private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } } 
public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { double VAR_1 = METHOD_2 ( METHOD_3 ( ) ) ; android.util.Log . i ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; if ( ( VAR_1 >= FLOAT_1 ) && ( VAR_1 <= FLOAT_2 ) ) { return ; } if ( METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_3 ) ) { if ( ( VAR_1 >= FLOAT_3 ) && ( VAR_1 <= FLOAT_2 ) ) { return ; } } fail ( ( STRING_2 + VAR_1 ) ) ; } 
public java.util.List < android.bluetooth.BluetoothDevice > METHOD_1 ( ) { android.util.Log.v ( VAR_1 . TAG , STRING_1 ) ; final TYPE_1 service = VAR_2 ; if ( service != null ) { try { return service . METHOD_1 ( ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_1 . TAG , e.toString ( ) ) ; } } else { android.util.Log.w ( VAR_1 . TAG , STRING_2 ) ; } return new java.util.ArrayList < android.bluetooth.BluetoothDevice > ( ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; int VAR_2 = INT_1 ; TYPE_1 VAR_3 = TYPE_1 . METHOD_2 ( 10 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_2 ( 100 ) ; TYPE_2 VAR_5 = METHOD_3 ( VAR_1 , VAR_2 ) ; try { VAR_5 . METHOD_4 ( VAR_3 , VAR_4 ) ; fail ( STRING_2 ) ; } catch ( TYPE_3 VAR_6 ) { } catch ( java.lang.Exception e ) { fail ( ( e + STRING_3 ) ) ; } } 
public static void METHOD_1 ( TYPE_1 test , java.lang.Object VAR_1 , TYPE_2 VAR_2 ) throws java.lang.Exception { assertNotNull ( STRING_1 , VAR_2 ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( test , STRING_2 ) ; VAR_2 . METHOD_3 ( ( ( TYPE_3 ) ( VAR_1 ) ) , VAR_3 ) ; } 
protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) ; java.util.List < TYPE_3 > VAR_3 = TYPE_4 . METHOD_5 ( VAR_4 ) ; for ( TYPE_3 VAR_5 : VAR_3 ) { TYPE_5 VAR_6 = VAR_2 . METHOD_6 ( VAR_5 ) ; if ( ( VAR_6 . METHOD_7 ( ) ) && ( ( VAR_6 . equals ( METHOD_8 ( ) ) ) == false ) ) { METHOD_9 ( VAR_6 , VAR_6 ) ; } } } 
public void METHOD_1 ( TYPE_1 test , java.lang.String VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( java.lang.String.format ( STRING_1 , test . METHOD_3 ( ) , test . METHOD_4 ( ) , VAR_3 ) ) ; VAR_2 . METHOD_2 ( METHOD_5 ( VAR_1 ) ) ; } VAR_4 . METHOD_6 ( test ) ; super . METHOD_1 ( test , VAR_1 ) ; } 
private java.lang.String METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { java.lang.String VAR_2 = VAR_1 . METHOD_3 ( VAR_3 , VAR_4 ) ; if ( ( VAR_2 . length ( ) ) > 0 ) { return VAR_2 ; } } return null ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) { return true ; } if ( ( VAR_1 == null ) || ( ( METHOD_1 ( ) ) != ( VAR_1 . METHOD_1 ( ) ) ) ) { return false ; } if ( ! ( super . equals ( VAR_1 ) ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; if ( ( VAR_3 ) != ( VAR_4 ) ) { return false ; } return true ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ; VAR_4 . METHOD_3 ( VAR_6 ) ; VAR_4 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_7 , VAR_1 , STRING_1 , VAR_2 ) ; VAR_4 . METHOD_3 ( VAR_8 ) ; } 
public boolean METHOD_1 ( int subId ) { boolean VAR_1 = false ; try { TYPE_1 telephony = METHOD_2 ( ) ; if ( telephony != null ) VAR_1 = telephony . METHOD_1 ( subId ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ; } catch ( java.lang.NullPointerException e ) { } android.util.Log.d ( VAR_2 . TAG , ( STRING_2 + VAR_1 ) ) ; return VAR_1 ; } 
private void METHOD_1 ( java.lang.String parent , TYPE_1 c , java.lang.String VAR_1 ) { java.lang.String VAR_2 = c . METHOD_2 ( ) ; if ( METHOD_3 ( VAR_2 , parent , METHOD_4 ( ) ) ) { java.lang.String value = METHOD_5 ( c . METHOD_6 ( ) ) ; METHOD_7 ( context , VAR_2 , value , parent , VAR_1 , c ) ; } } 
public boolean METHOD_1 ( TYPE_1 context ) { if ( TYPE_2 . METHOD_2 ( context ) ) { if ( ( VAR_1 ) >= ( VAR_2 ) ) { return TYPE_2 . METHOD_3 ( context ) . METHOD_4 ( ) ; } else { return TYPE_2 . METHOD_3 ( context ) . METHOD_1 ( ) ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 = new TYPE_1 [ ] { } ; VAR_2 = VAR_3 = VAR_4 = - 1 ; VAR_5 = new TYPE_2 ( INT_1 , 0 , TYPE_3 . METHOD_4 ( STRING_1 ) ) ; VAR_6 . METHOD_5 ( VAR_5 ) ; VAR_7 = new TYPE_4 ( TAG ) ; VAR_7 . start ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_8 class , STRING_2 , VAR_9 , VAR_10 ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String name ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( name ) ; if ( VAR_1 == null ) { VAR_1 = TYPE_3 . METHOD_1 ( name ) ; } if ( VAR_1 == null ) { VAR_1 = TYPE_4 . METHOD_1 ( name ) ; } if ( VAR_1 == null ) { VAR_1 = TYPE_5 . METHOD_1 ( name ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 , 1 ) . METHOD_3 ( 2 , 1 ) . METHOD_4 ( ) ; assertEquals ( VAR_3 , VAR_4 . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; } 
public void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_2 . METHOD_2 ( ) ) ) ) ; METHOD_3 ( VAR_3 ) ; synchronized ( this ) { METHOD_4 ( VAR_3 , VAR_4 , VAR_2 ) ; } } 
public void METHOD_1 ( boolean VAR_1 ) { try { final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = VAR_2 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; long VAR_3 = TYPE_3 . METHOD_4 ( ) ; long VAR_4 = 10 ; assertFalse ( c . METHOD_5 ( VAR_4 , VAR_5 ) ) ; assertTrue ( ( ( METHOD_6 ( VAR_3 ) ) >= VAR_4 ) ) ; VAR_2 . METHOD_7 ( ) ; } catch ( TYPE_4 e ) { METHOD_8 ( e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { int VAR_1 = VAR_2 ; when ( VAR_3 . METHOD_2 ( ) ) . thenReturn ( true ) ; when ( VAR_4 . METHOD_2 ( ) ) . thenReturn ( false ) ; VAR_5 . METHOD_3 ( VAR_1 ) ; VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_5 ( METHOD_6 ( VAR_7 class ) ) ; VAR_6 . verify ( VAR_4 , METHOD_4 ( ) ) . METHOD_7 ( METHOD_8 ( ) , METHOD_6 ( VAR_8 class ) ) ; } 
protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( STRING_1 ) ; VAR_3 = TYPE_1 . METHOD_6 ( VAR_4 class ) ; VAR_5 = new TYPE_2 ( VAR_6 , VAR_7 , VAR_1 ) ; } 
private void METHOD_1 ( ) { if ( ( ( VAR_1 . length ) > 0 ) && ( ( VAR_1 [ 0 ] ) != null ) ) { if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_1 . METHOD_2 ( VAR_3 , mContext , VAR_4 , VAR_5 ) ; } else { VAR_2 . METHOD_3 ( VAR_3 , mContext , VAR_4 ) ; } } else { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_4 ( ) ; } VAR_2 = null ; } } 
public java.lang.Object METHOD_1 ( ) { try { TYPE_1 e = ( ( TYPE_1 ) ( super . METHOD_1 ( ) ) ) ; VAR_1 = ( ( VAR_2 ) == null ) ? null : VAR_2 . METHOD_1 ( ) ; return e ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( ) ; } } 
public android.os.Bundle METHOD_1 ( TYPE_1 VAR_1 , java.lang.String action , int x , int y , int VAR_2 , android.os.Bundle VAR_3 , boolean VAR_4 ) { synchronized ( VAR_5 ) { long VAR_6 = TYPE_2 . METHOD_2 ( ) ; try { return METHOD_3 ( METHOD_4 ( this , VAR_1 ) , action , x , y , VAR_2 , VAR_3 , VAR_4 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_6 ) ; } } } 
public boolean METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) { if ( ( ! ( VAR_1 . METHOD_2 ( ) ) ) && ( ( VAR_1 . METHOD_3 ( ) ) instanceof TYPE_1 ) ) { TYPE_2 VAR_2 = VAR_1 . METHOD_4 ( ) ; assert VAR_2 != null ; if ( ( VAR_2 . METHOD_5 ( VAR_3 class ) ) == null ) { VAR_2 . METHOD_6 ( new TYPE_3 ( VAR_2 ) ) ; } } return super . METHOD_1 ( VAR_1 ) ; } 
private static void METHOD_1 ( java.lang.String [ ] VAR_1 , int VAR_2 , int VAR_3 , java.util.List < java.lang.String > VAR_4 ) { for ( int i = VAR_2 ; i < VAR_3 ; i ++ ) { final java.lang.String VAR_5 = VAR_1 [ i ] ; if ( TYPE_1 . METHOD_2 ( VAR_5 ) ) { VAR_4 . METHOD_3 ( VAR_5 . METHOD_4 ( VAR_6 ) ) ; } else { break ; } } } 
public void METHOD_1 ( ) throws TYPE_1 { final short VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_2 ) ; args . METHOD_2 ( STRING_2 , 0 ) ; args . METHOD_2 ( STRING_3 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 , VAR_5 ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , boolean VAR_4 ) { TYPE_2 VAR_5 ; if ( TYPE_3 . METHOD_2 ( ) ) { VAR_5 = TYPE_4 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , null ) ; } else { VAR_5 = TYPE_5 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } return new TYPE_1 ( VAR_5 ) ; } 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { java.util.List < TYPE_3 > VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( ) . VAR_3 ; return TYPE_5 . METHOD_6 ( TYPE_6 . METHOD_7 ( VAR_2 , true , VAR_1 ) ) ; } 
public static java.util.Set < java.lang.Integer > METHOD_1 ( int VAR_1 ) { int VAR_2 = 1 ; java.util.Set < java.lang.Integer > result = null ; while ( VAR_1 != 0 ) { if ( ( VAR_1 & 1 ) != 0 ) { if ( result == null ) { result = new TYPE_1 < java.lang.Integer > ( ) ; } result . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_2 ) ) ; } VAR_1 >>>= 1 ; VAR_2 <<= 1 ; } return result != null ? result : VAR_3 < java.lang.Integer > METHOD_4 ( ) ; } 
public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; sb.append ( METHOD_1 ( ) . getName ( ) ) ; sb.append ( CHAR_1 ) ; sb.append ( VAR_1 . toString ( ) ) ; sb.append ( CHAR_2 ) ; sb.append ( type . METHOD_2 ( ) ) ; sb.append ( CHAR_3 ) ; return sb . toString ( ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 = method . METHOD_1 ( ) ; if ( ( ( ( VAR_1 . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_2 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } session = VAR_1 . METHOD_7 ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( method ) ; VAR_3 . METHOD_5 ( method ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( ( VAR_2 ) == null ) { VAR_3 = VAR_1 ; VAR_2 = VAR_4 . METHOD_2 ( VAR_5 , VAR_1 ) ; } if ( ! ( VAR_2 . METHOD_3 ( ) ) ) VAR_2 . METHOD_4 ( ) ; return true ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { TYPE_2 . i ( STRING_1 , STRING_2 ) ; throw new java.lang.NullPointerException ( STRING_3 ) ; } return ( ( ( ( VAR_2 ) >= ( VAR_3 ) ) && ( ( VAR_2 ) <= ( VAR_4 ) ) ) && ( ! ( TYPE_3 . METHOD_2 ( ) ) ) ) && ( VAR_1 . METHOD_3 ( STRING_4 , false ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_3 ) + STRING_1 ) ) ; VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_1 ) ; VAR_2 = TYPE_2 . METHOD_2 ( STRING_2 ) ; try { VAR_2 . METHOD_3 ( VAR_4 , VAR_5 , VAR_1 ) ; fail ( ) ; } catch ( TYPE_3 expected ) { } } 
public void METHOD_1 ( ) throws android.os.RemoteException { TYPE_1 config = new TYPE_2 ( ) . addFeature ( VAR_1 ) . addFeature ( VAR_2 ) . build ( ) ; VAR_3 = config ; TYPE_1 result = VAR_4 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( config , result ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device ) ; } 
private void METHOD_1 ( ) { try { synchronized ( this ) { METHOD_2 ( ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; VAR_1 . METHOD_1 ( ) ; VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_4 ( ) ; if ( VAR_3 ) out . METHOD_5 ( ) ; } } catch ( TYPE_2 x ) { TYPE_3 . METHOD_6 ( ) . METHOD_7 ( ) ; } catch ( java.io.IOException x ) { VAR_4 = true ; } } 
public static java.lang.String METHOD_1 ( char [ ] s ) { TYPE_1 result = new TYPE_1 ( ) ; for ( int i = 0 ; i < ( s . length ) ; ++ i ) { if ( i != 0 ) result . append ( CHAR_1 ) ; result . append ( TYPE_2 . METHOD_1 ( s [ i ] ) ) ; } return result . toString ( ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ) ; for ( TYPE_2 VAR_3 : m . METHOD_2 ( VAR_2 ) ) { sb.append ( VAR_3 . toString ( ) ) . append ( CHAR_1 ) ; for ( TYPE_3 item : VAR_3 . METHOD_3 ( ) ) { sb.append ( STRING_1 ) . append ( item . toString ( ) ) . append ( CHAR_1 ) ; } } return sb . toString ( ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , int index , int VAR_2 ) { if ( VAR_3 ) TYPE_1 . d ( VAR_4 . TAG , ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 < TYPE_4 > VAR_2 ) { java.util.List < TYPE_4 > VAR_3 = TYPE_5 . METHOD_2 ( VAR_2 ) ; TYPE_4 VAR_4 = TYPE_5 . METHOD_3 ( VAR_5 , VAR_1 . METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( VAR_4 ) ; return new TYPE_6 ( TYPE_7 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) , TYPE_8 . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) , VAR_3 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , STRING_1 , VAR_1 ) ; for ( int i = 0 , size = VAR_3 . size ( ) ; i < size ; ++ i ) { TYPE_1 type = VAR_3 . get ( i ) ; if ( type == VAR_1 ) { VAR_3 . set ( i , VAR_2 ) ; } } } 
private TYPE_1 < TYPE_2 > METHOD_1 ( com.android.jack.ir.ast.JDefinedClassOrInterface VAR_1 ) { java.util.Set < TYPE_2 > VAR_2 = new TYPE_3 < TYPE_2 > ( ) ; assert ( VAR_3 ) != null ; for ( com.android.jack.ir.ast.JDefinedClassOrInterface type : VAR_3 ) { if ( ( VAR_1 . METHOD_2 ( type ) ) || ( type . METHOD_2 ( VAR_1 ) ) ) { for ( com.android.jack.ir.ast.JMethod method : type . METHOD_3 ( ) ) { VAR_2 . METHOD_4 ( method . METHOD_5 ( ) ) ; } } } return VAR_2 ; } 
private long METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 class ) ; int VAR_3 = VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_4 ) ; boolean VAR_5 = ( VAR_3 >= 0 ) && ( VAR_3 <= ( VAR_6 ) ) ; return VAR_5 ? VAR_3 : TYPE_1 . METHOD_6 ( ) . METHOD_5 ( VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; s . METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ; s . METHOD_6 ( ) . getElement ( ) . METHOD_8 ( ) ; s . METHOD_8 ( ) ; } 
protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class ) ; java.io.File VAR_3 ; try { VAR_3 = TYPE_3 . METHOD_3 ( STRING_1 , STRING_2 ) ; VAR_1 . METHOD_4 ( TYPE_4 . getName ( ) , TYPE_5 . toString ( VAR_4 ) ) ; VAR_1 . METHOD_4 ( TYPE_6 . getName ( ) , STRING_3 ) ; VAR_1 . METHOD_4 ( TYPE_7 . getName ( ) , VAR_3 . METHOD_5 ( ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_8 ( e ) ; } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { if ( VAR_3 ) METHOD_2 ( ) ; if ( VAR_3 ) android.util.Log.d ( VAR_4 , ( ( ( STRING_1 + ( VAR_1 . METHOD_3 ( ) ) ) + STRING_2 ) + VAR_2 ) ) ; VAR_5 . METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; if ( ( VAR_5 . METHOD_5 ( ) ) && ( VAR_6 ) ) { if ( VAR_2 ) { METHOD_6 ( VAR_7 ) ; } else { METHOD_6 ( VAR_8 ) ; } } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_3 ( VAR_3 , STRING_1 , VAR_1 , VAR_4 , ( ( TYPE_4 ) ( VAR_5 . METHOD_2 ( ) ) ) ) ; TYPE_1 VAR_6 = new TYPE_1 ( VAR_3 , VAR_7 < TYPE_5 > METHOD_3 ( VAR_1 ) , VAR_2 ) ; return VAR_6 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ) ; VAR_1 . METHOD_6 ( null ) ; TYPE_5 VAR_3 = METHOD_7 ( VAR_2 ) ; TYPE_6 < TYPE_7 > request = METHOD_8 ( TYPE_8 . with ( VAR_1 ) , VAR_2 ) . METHOD_9 ( VAR_3 ) . METHOD_10 ( VAR_3 ) ; if ( VAR_2 . METHOD_11 ( ) ) { request . METHOD_12 ( ) ; } request . METHOD_13 ( VAR_1 ) ; } 
void METHOD_1 ( java.lang.String uri , java.lang.String VAR_1 , java.lang.String VAR_2 , long VAR_3 , int VAR_4 ) throws TYPE_1 { if ( ( ( VAR_5 ) ++ ) > 0 ) { super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = VAR_3 ; int VAR_4 = ( ( int ) ( METHOD_2 ( VAR_5 ) ) ) ; int VAR_6 = VAR_4 + ( VAR_7 ) ; int VAR_8 = METHOD_3 ( VAR_1 ) ; int VAR_9 = METHOD_4 ( VAR_5 ) ; if ( VAR_10 . METHOD_5 ( ) ) { METHOD_6 ( VAR_2 , VAR_4 , VAR_6 , VAR_8 , VAR_11 , VAR_9 ) ; } else { } } 
private void METHOD_1 ( TYPE_1 b ) { java.util.ArrayList < TYPE_2 > VAR_1 = b . METHOD_2 ( ) ; TYPE_2 VAR_2 = VAR_1 . get ( ( ( VAR_1 . size ( ) ) - 1 ) ) ; TYPE_3 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( ( ( VAR_3 . METHOD_4 ( ) ) != ( VAR_4 ) ) && ( VAR_3 != ( VAR_5 ) ) ) { throw new java.lang.RuntimeException ( ( STRING_1 + STRING_2 ) ) ; } } 
public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( new java.util.HashMap < > ( ) ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } java.util.HashMap < java.lang.Integer , TYPE_3 > m = new java.util.HashMap < > ( ) ; m . METHOD_4 ( 1 , FLOAT_1 ) ; try { TYPE_1 . METHOD_2 ( m ) . METHOD_3 ( 1 , FLOAT_1 , FLOAT_2 ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( STRING_1 ) ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( STRING_2 ) ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_2 , STRING_1 ) ; assertEquals ( match , result ) ; } 
public synchronized void METHOD_1 ( int VAR_1 ) throws TYPE_1 { if ( ( VAR_1 < 0 ) || ( VAR_1 > INT_1 ) ) throw new java.lang.IllegalArgumentException ( STRING_1 ) ; if ( METHOD_2 ( ) ) throw new TYPE_1 ( STRING_2 ) ; try { METHOD_3 ( ) . METHOD_4 ( VAR_2 , VAR_1 ) ; } catch ( TYPE_1 VAR_3 ) { if ( ! ( METHOD_5 ( ) ) ) throw VAR_3 ; } } 
void METHOD_1 ( final long id , final int VAR_1 ) { if ( ( ( status ) & ( VAR_2 ) ) == 0 ) { status |= VAR_2 ; VAR_3 = new int [ ( ( VAR_1 - 1 ) / INT_1 ) + 1 ] ; } VAR_3 [ ( ( int ) ( id > > > INT_1 ) ) ] |= ( ( int ) ( id ) ) ; } 
private static void METHOD_1 ( TYPE_1 session , TYPE_2 < TYPE_3 > VAR_1 , TYPE_4 VAR_2 ) { if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { TYPE_3 VAR_4 = VAR_1 . METHOD_3 ( VAR_2 , session . METHOD_4 ( ) ) ; session . METHOD_5 ( ) . METHOD_6 ( VAR_4 ) ; } } 
public synchronized TYPE_1 METHOD_1 ( java.lang.String name ) throws TYPE_2 { try { return METHOD_2 ( name ) ; } catch ( TYPE_3 e ) { TYPE_1 VAR_1 = VAR_2 . METHOD_1 ( this , name ) ; VAR_3 . METHOD_3 ( name , VAR_1 ) ; return VAR_1 ; } catch ( TYPE_4 e ) { throw new TYPE_2 ( VAR_2 . METHOD_4 ( this , name ) ) ; } } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ! ( VAR_1 instanceof TYPE_1 ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; ++ i ) { if ( ! ( VAR_3 [ i ] . equals ( VAR_4 [ i ] ) ) ) return false ; } return true ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 [ ] VAR_3 = VAR_4 ; if ( METHOD_2 ( VAR_3 ) ) { TYPE_4 VAR_5 = VAR_6 ; if ( VAR_5 == null ) { return false ; } java.lang.String VAR_7 = TYPE_5 . METHOD_3 ( VAR_2 ) ; TYPE_6 item = TYPE_7 . METHOD_4 ( VAR_7 , VAR_5 ) ; if ( item != null ) { assert VAR_7 != null ; METHOD_5 ( VAR_7 , item ) ; METHOD_6 ( VAR_3 , item ) ; } } return false ; } 
public void METHOD_1 ( boolean VAR_1 ) { if ( ( VAR_2 ) == VAR_1 ) return ; VAR_2 = VAR_1 ; if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 ) ; TYPE_1 . METHOD_3 ( mContext , VAR_5 ) ; } else { VAR_3 . METHOD_4 ( VAR_4 ) ; TYPE_1 . METHOD_5 ( mContext , VAR_5 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; boolean VAR_3 = VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.verify ( VAR_6 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_3 , true ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { while ( VAR_1 != null ) { java.lang.Class < ? extends TYPE_1 > type = VAR_1 . METHOD_2 ( ) ; if ( ( type == ( VAR_2 class ) ) || ( type == ( VAR_3 class ) ) ) { return VAR_1 ; } VAR_1 = VAR_1 . METHOD_3 ( ) ; } return null ; } 
private void METHOD_1 ( int VAR_1 , int VAR_2 ) { synchronized ( VAR_3 ) { for ( TYPE_1 < TYPE_2 > i = VAR_4 . METHOD_2 ( ) ; i . METHOD_3 ( ) ; ) { TYPE_2 VAR_5 = i . METHOD_4 ( ) ; try { VAR_5 . METHOD_5 ( VAR_1 , VAR_2 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_6 , ( ( STRING_1 + STRING_2 ) + ( e.getMessage ( ) ) ) ) ; i . METHOD_6 ( ) ; } } } } 
public TYPE_1 METHOD_1 ( ) { int size = ( this . METHOD_2 ( ) ) > > 2 ; int VAR_1 = METHOD_3 ( ) ; return ( ( TYPE_1 ) ( new TYPE_2 ( this , ( - 1 ) , 0 , size , size , VAR_1 , METHOD_4 ( ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( STRING_1 , STRING_2 , VAR_3 . TAG , null , null , null , null , false , ( - 1 ) , false , ( - 1 ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_4 ( TYPE_1 . eq ( STRING_3 ) , TYPE_1 . eq ( STRING_4 ) , TYPE_1 . eq ( 0 ) , TYPE_1 . eq ( 0 ) , org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.lang.String name = TYPE_2 . getName ( VAR_1 ) ; if ( name == null ) { name = TYPE_3 . getName ( VAR_1 ) ; if ( name == null ) { name = TYPE_4 . getName ( VAR_1 ) ; } if ( name == null ) { name = TYPE_5 . getName ( VAR_1 ) ; } if ( name == null ) { name = TYPE_6 . getName ( VAR_1 ) ; } } return name ; } 
public void METHOD_1 ( ) throws java.io.IOException { TYPE_1 a = METHOD_2 ( STRING_1 ) ; TYPE_1 b = METHOD_2 ( STRING_2 ) ; TYPE_1 VAR_1 = new TYPE_2 ( new TYPE_1 [ ] { a , b } , VAR_2 ) . METHOD_3 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( new TYPE_1 [ ] { a , VAR_1 } , VAR_2 ) ; try { VAR_3 . METHOD_3 ( ) ; fail ( ) ; } catch ( TYPE_3 expected ) { assertEquals ( STRING_3 , expected . getMessage ( ) ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 type ) { switch ( type . METHOD_2 ( ) ) { case VAR_1 : return VAR_2 ; case VAR_3 : return VAR_4 ; case VAR_5 : return VAR_6 ; case VAR_7 : return VAR_8 ; case VAR_9 : return VAR_10 ; case VAR_11 : return VAR_4 ; } return TYPE_3 . METHOD_3 ( type ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( VAR_2 . METHOD_3 ( ) ) ) { android.util.Log.w ( VAR_3 . TAG , ( ( STRING_1 + ( VAR_4 ) ) + STRING_2 ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_4 ) ; VAR_2 . METHOD_6 ( ) ; } METHOD_7 ( ) ; if ( ( METHOD_8 ( ) ) == 0 ) { if ( VAR_5 ) android.util.Log.d ( VAR_3 . TAG , STRING_3 ) ; METHOD_9 ( false ) ; } } 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { if ( VAR_2 ) log ( ( ( ( getName ( ) ) + ( VAR_1 . toString ( ) ) ) + STRING_1 ) ) ; switch ( VAR_3 ) { case VAR_4 : if ( ( message.arg1 ) == ( VAR_5 ) ) { METHOD_2 ( VAR_1 ) ; } break ; case VAR_6 : METHOD_2 ( VAR_1 ) ; METHOD_3 ( ) ; transitionTo ( VAR_7 ) ; break ; default : return VAR_8 ; } TYPE_1 . METHOD_4 ( VAR_9 , VAR_3 ) ; return VAR_10 ; } 
public void METHOD_1 ( ) { TYPE_1 match ; java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( ) ) ; VAR_1 . METHOD_3 ( ( match = TYPE_3 . METHOD_5 ( INT_1 ) ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_5 ( INT_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_6 ( VAR_1 , INT_1 , STRING_1 ) ; assertEquals ( match , result ) ; } 
private void METHOD_1 ( java.lang.String path ) { try { java.io.File VAR_1 = new java.io.File ( VAR_2 ) ; TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 , false ) ) ; TYPE_3 . METHOD_2 ( VAR_3 , path ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; } catch ( java.lang.Exception e ) { android.util.Log.e ( VAR_4 , ( STRING_1 + ( e.getMessage ( ) ) ) ) ; } } 
private static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 ) { if ( ( VAR_2 ) < ( VAR_3 ) ) { return null ; } if ( VAR_1 == null ) { TYPE_4 . i ( STRING_1 , STRING_2 ) ; VAR_1 = TYPE_5 . METHOD_2 ( context ) ; if ( VAR_1 == null ) { TYPE_4 . i ( STRING_1 , STRING_3 ) ; return null ; } } return context . METHOD_3 ( VAR_4 class ) . METHOD_1 ( VAR_1 ) ; } 
private static java.lang.String METHOD_1 ( java.lang.String [ ] VAR_1 , int start , int VAR_2 ) { java.lang.StringBuilder VAR_3 = new java.lang.StringBuilder ( INT_1 ) ; for ( int i = start ; i < VAR_2 ; ++ i ) { if ( i != 0 ) { VAR_3 . append ( CHAR_1 ) ; } VAR_3 . append ( VAR_1 [ i ] ) ; } return VAR_3 . toString ( ) ; } 
public void METHOD_1 ( ) { android.renderscript.Allocation VAR_1 = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 4 ] ; TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) ; VAR_1 . METHOD_4 ( n ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( INT_3 , 16 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { assert ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( getName ( ) ) ) ) ; if ( VAR_1 . METHOD_3 ( this ) ) { if ( VAR_1 . METHOD_4 ( ) ) { METHOD_5 ( ) ; METHOD_6 ( ) ; } VAR_1 . METHOD_7 ( VAR_4 ) ; VAR_1 . METHOD_7 ( VAR_5 ) ; } VAR_1 . METHOD_8 ( this ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_1 , STRING_1 ) ; TYPE_2 . METHOD_3 ( VAR_1 , STRING_2 ) ; TYPE_3 . assertTrue ( STRING_3 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_4 , null ) ) ; TYPE_3 . assertTrue ( STRING_5 , TYPE_2 . METHOD_4 ( VAR_1 , STRING_6 , null ) ) ; TYPE_2 . METHOD_5 ( VAR_1 , STRING_4 , null ) ; TYPE_2 . METHOD_5 ( VAR_1 , STRING_6 , null ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( ! ( METHOD_2 ( ) ) ) || ( VAR_2 . METHOD_3 ( ) ) ) { return ; } VAR_1 . print ( STRING_1 ) ; VAR_1 . print ( METHOD_4 ( ) ) ; VAR_1 . println ( STRING_2 ) ; for ( TYPE_2 VAR_3 : VAR_2 ) { VAR_3 . METHOD_1 ( VAR_1 ) ; } VAR_1 . print ( STRING_3 ) ; VAR_1 . println ( ) ; } 
public void METHOD_1 ( ) { java.lang.Class < ? > target = VAR_1 class ; java.lang.String VAR_2 = STRING_1 ; TYPE_1 VAR_3 = new TYPE_2 ( VAR_4 , VAR_2 , null , target , VAR_5 , VAR_6 , 0 ) ; VAR_3 . run ( STRING_2 , null , null ) ; org.mockito.Mockito.verify ( VAR_4 , TYPE_3 . METHOD_2 ( 8 ) ) . METHOD_3 ( VAR_7 ) ; } 
public int METHOD_1 ( ) throws java.io.IOException { java.lang.Object VAR_1 = TYPE_1 . METHOD_2 ( path ) ; byte [ ] b = new byte [ 1 ] ; int res = - 1 ; try { res = METHOD_1 ( b , 0 , 1 ) ; } finally { TYPE_1 . METHOD_3 ( VAR_1 , res ) ; } return res != ( - 1 ) ? ( b [ 0 ] ) & INT_1 : - 1 ; } 
public void error ( TYPE_1 VAR_1 , TYPE_2 location , java.lang.String VAR_2 , java.lang.Object ... VAR_3 ) { switch ( VAR_1 ) { case VAR_4 : VAR_5 . METHOD_1 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; case VAR_6 : VAR_5 . METHOD_2 ( STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; case VAR_7 : VAR_5 . error ( null , STRING_1 , location , java.lang.String.format ( VAR_2 , VAR_3 ) ) ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; TYPE_1 . when ( VAR_1 . METHOD_3 ( METHOD_4 ( ) ) ) . METHOD_5 ( VAR_2 ) ; assertFalse ( VAR_3 . METHOD_3 ( ) ) ; assertFalse ( VAR_3 . METHOD_6 ( ) ) ; } 
public static int METHOD_1 ( int uid , int VAR_1 , int [ ] VAR_2 , boolean VAR_3 , int [ ] [ ] VAR_4 ) { int VAR_5 = ( VAR_3 ) ? VAR_6 : 0 ; return TYPE_1 . METHOD_1 ( uid , VAR_1 , VAR_2 , VAR_5 , VAR_4 ) ; } 
void METHOD_1 ( ) { final int VAR_1 = VAR_2 . size ( ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { TYPE_1 w = VAR_2 . get ( i ) ; if ( VAR_3 ) android.util.Log.v ( TYPE_2 . TAG , ( STRING_1 + w ) ) ; w . METHOD_2 ( ) ; } } 
public java.lang.Integer METHOD_1 ( ) { java.lang.Integer result = 0 ; TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 , null , null , null , null ) ; if ( VAR_1 != null ) { result = VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( ) ; } return result ; } 
public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; try { TYPE_3 . METHOD_2 ( VAR_2 class . METHOD_3 ( ) , new java.lang.Class < ? > [ ] { VAR_3 class , VAR_4 class , VAR_5 class , VAR_6 class } , VAR_1 ) ; VAR_7 . println ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException VAR_8 ) { java.lang.System.out.println ( STRING_2 ) ; } } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = null ; try { VAR_1 = ( ( TYPE_1 < TYPE_2 > ) ( super . METHOD_1 ( ) ) ) ; VAR_1 . METHOD_2 ( new TYPE_3 ( m ) ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ) ; } return VAR_1 ; } 
private synchronized void METHOD_1 ( ) { if ( ( ( VAR_1 ) == true ) || ( ( VAR_2 ) != null ) ) { return ; } TYPE_1 pm = ( ( TYPE_1 ) ( mContext . METHOD_2 ( VAR_3 ) ) ) ; VAR_2 = pm . METHOD_3 ( VAR_4 , VAR_5 ) ; } 
void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; java.lang.Class [ ] VAR_2 = TYPE_1 . METHOD_3 ( ) ; if ( ( ( VAR_3 . size ( ) ) < 1 ) || ( ( ( VAR_3 . size ( ) ) == 1 ) && ( VAR_4 class . METHOD_4 ( ) . equals ( VAR_3 . get ( 0 ) . getName ( ) ) ) ) ) { METHOD_5 ( STRING_1 ) ; VAR_5 . METHOD_6 ( VAR_6 ) ; } METHOD_7 ( VAR_2 , VAR_7 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 c = TYPE_1 . METHOD_2 ( ) ; TYPE_2 e = VAR_1 . METHOD_3 ( ) ; java.lang.String [ ] VAR_2 = e . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( VAR_3 , VAR_2 ) ; METHOD_6 ( VAR_2 , e . METHOD_4 ( ) ) ; c . METHOD_7 ( ) ; } 
public void METHOD_1 ( TYPE_1 context ) { if ( ( VAR_1 ) != null ) { for ( TYPE_2 < java.lang.String , TYPE_3 > VAR_2 : VAR_1 ) { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; if ( ( ( VAR_4 ) == null ) || ( ! ( VAR_4 . METHOD_3 ( VAR_3 ) ) ) ) { continue ; } TYPE_3 location = VAR_2 . METHOD_4 ( ) ; context . METHOD_5 ( VAR_5 , location , VAR_6 , null ) ; } } } 
public void METHOD_1 ( java.lang.StringBuilder sb ) { sb.append ( STRING_1 ) ; if ( ( VAR_1 ) == null ) { sb.append ( STRING_2 ) ; return ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( sb ) ; } else { sb.append ( STRING_3 ) ; } VAR_3 . METHOD_1 ( sb ) ; sb.append ( STRING_4 ) ; } 
public static final java.util.HashMap METHOD_1 ( TYPE_1 in ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( in , null ) ; return ( ( java.util.HashMap ) ( TYPE_5 . METHOD_4 ( VAR_1 , new java.lang.String [ 1 ] ) ) ) ; } 
public char METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } METHOD_2 ( i , VAR_2 ) ; char x = ( ( char ) ( TYPE_2 . METHOD_3 ( METHOD_4 ( i ) , ( ! ( VAR_3 ) ) ) ) ) ; return x ; } 
public void METHOD_1 ( int VAR_1 , TYPE_1 listener ) throws TYPE_2 { METHOD_2 ( ) ; if ( listener == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } try { TYPE_3 p = METHOD_3 ( VAR_1 , listener ) ; VAR_2 . METHOD_4 ( p ) ; VAR_3 . METHOD_1 ( VAR_4 , p ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_2 , e , VAR_5 ) ; } } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , ( ( ( VAR_4 ) | ( VAR_5 ) ) | ( VAR_6 ) ) ) ; VAR_3 . METHOD_2 ( new TYPE_4 [ ] { TYPE_5 . METHOD_3 ( ) } ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; return VAR_3 ; } 
public void METHOD_1 ( TYPE_1 context ) { if ( ( VAR_1 ) != null ) { TYPE_2 VAR_2 = context . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 != ( VAR_3 ) ) ) { java.lang.String name = TYPE_3 . METHOD_3 ( VAR_4 . getName ( ) ) ; if ( ! ( name . METHOD_4 ( VAR_1 ) ) ) { TYPE_4 location = TYPE_4 . METHOD_5 ( VAR_4 ) ; context . METHOD_6 ( VAR_5 , location , METHOD_7 ( name ) , null ) ; } } } } 
protected TYPE_1 METHOD_1 ( ) throws TYPE_2 { java.util.List < java.lang.Class < ? extends TYPE_3 > > VAR_1 = new java.util.ArrayList < java.lang.Class < ? extends TYPE_3 > > ( 1 ) ; VAR_1 . METHOD_2 ( VAR_2 class ) ; VAR_1 . METHOD_2 ( VAR_3 class ) ; TYPE_1 VAR_4 = null ; VAR_4 = TYPE_4 . METHOD_3 ( VAR_5 class , VAR_1 ) ; java.io.File [ ] VAR_6 = VAR_4 . METHOD_4 ( ) ; VAR_4 . METHOD_5 ( VAR_6 ) ; VAR_4 . METHOD_6 ( VAR_7 ) ; return VAR_4 ; } 
protected boolean METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String VAR_3 ) { TYPE_1 c = VAR_4 . METHOD_2 ( ) ; if ( ( c != null ) && ( c . METHOD_3 ( VAR_1 ) ) ) { android.content.Intent VAR_5 = METHOD_4 ( c , VAR_2 , VAR_3 ) ; METHOD_5 ( VAR_5 ) ; return true ; } return false ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 , java.lang.String VAR_4 , java.lang.Object ... VAR_5 ) { switch ( VAR_1 ) { case VAR_6 : VAR_7 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; case VAR_8 : VAR_7 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; case VAR_9 : VAR_7 . error ( null , STRING_1 , VAR_2 , VAR_3 , java.lang.String.format ( VAR_4 , VAR_5 ) ) ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; assertEquals ( VAR_4 , VAR_5 . METHOD_4 ( VAR_6 ) . METHOD_5 ( ) ) ; VAR_7 . METHOD_6 ( VAR_6 ) ; TYPE_2 . METHOD_7 ( VAR_8 ) ; org.mockito.Mockito.verify ( VAR_3 . METHOD_8 ( ) , TYPE_3 . METHOD_9 ( ) ) . METHOD_6 ( org.mockito.Matchers.eq ( VAR_6 ) , org.mockito.Matchers . METHOD_10 ( ) ) ; } 
void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { assert ! ( METHOD_2 ( ) ) ; java.io.File path = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( ( ! ( path . METHOD_1 ( ) ) ) || ( path . METHOD_5 ( ) ) ) { throw new TYPE_2 ( VAR_1 . METHOD_6 ( ) ) ; } VAR_1 . METHOD_7 ( ) ; } 
public void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException , TYPE_2 { byte [ ] VAR_3 = VAR_2 . METHOD_2 ( ) ; byte [ ] VAR_4 = VAR_2 . METHOD_3 ( ) ; VAR_5 . METHOD_4 ( VAR_3 ) ; VAR_6 . METHOD_4 ( VAR_4 ) ; if ( VAR_1 ) { METHOD_5 ( ) ; } else { METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( this . METHOD_2 ( ) . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( true , null ) ; VAR_2 = this . VAR_1 ; VAR_3 . METHOD_5 ( VAR_4 , new java.lang.String [ ] { } ) ; new TYPE_1 ( TAG ) . start ( ) ; METHOD_6 ( ) ; METHOD_7 ( STRING_1 ) ; TYPE_2 . METHOD_8 ( 100 ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 context , TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_3 ) ; VAR_2 . METHOD_2 ( new java.lang.String [ ] { context . METHOD_3 ( VAR_4 ) } ) ; return new TYPE_1 ( new TYPE_5 [ ] { VAR_2 , VAR_1 } ) ; } 
private static int METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { if ( VAR_1 ) { if ( ( ( VAR_3 ) == ( VAR_4 ) ) || ( ( VAR_3 ) == ( VAR_5 ) ) ) { return 0 ; } } else { if ( ( ( VAR_3 ) == ( VAR_6 ) ) || ( ( VAR_3 ) == ( VAR_7 ) ) ) { return 0 ; } } throw VAR_2 . METHOD_2 ( ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { return false ; } boolean VAR_3 = false ; for ( TYPE_1 VAR_4 : VAR_2 . METHOD_3 ( ) ) { if ( VAR_4 . METHOD_4 ( ) . equals ( VAR_1 . METHOD_4 ( ) ) ) { VAR_3 = true ; } } return VAR_3 ; } 
public void METHOD_1 ( ) { android.renderscript.Allocation VAR_1 = android.renderscript.Allocation.createSized ( mRS , TYPE_1 . METHOD_2 ( mRS ) , android.renderscript.cts.INPUTSIZE ) ; n = new int [ ( INPUTSIZE ) * 2 ] ; TYPE_2 . METHOD_3 ( INT_1 , INT_2 , 1 , n ) ; VAR_1 . METHOD_4 ( n ) ; VAR_2 . METHOD_5 ( VAR_1 ) ; METHOD_6 ( INT_1 , 16 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . i ( VAR_1 , STRING_1 ) ; if ( VAR_2 . METHOD_2 ( ) ) { VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; if ( ( VAR_6 ) == ( VAR_7 ) ) { TYPE_1 . i ( VAR_1 , ( STRING_2 + STRING_3 ) ) ; VAR_3 . METHOD_4 ( VAR_8 ) ; } VAR_3 . METHOD_4 ( VAR_9 ) ; VAR_2 . METHOD_5 ( VAR_10 ) ; } else { TYPE_1 . i ( VAR_1 , STRING_4 ) ; } VAR_2 . METHOD_6 ( ) ; } 
java.util.List < TYPE_1 < TYPE_2 > > METHOD_1 ( ) { java.util.List < TYPE_1 < TYPE_2 > > VAR_1 = super . METHOD_1 ( ) ; TYPE_1 < TYPE_2 > VAR_2 = TYPE_3 . not ( new TYPE_4 ( VAR_3 class ) ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; if ( ! ( VAR_4 ) ) { TYPE_1 < TYPE_2 > VAR_5 = TYPE_3 . not ( new TYPE_4 ( VAR_6 class ) ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; } return VAR_1 ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( ( VAR_2 != null ) && ( VAR_2 . METHOD_3 ( ) . equals ( VAR_3 ) ) ) { context . METHOD_4 ( VAR_4 , VAR_2 , context . METHOD_5 ( VAR_2 ) , STRING_1 , null ) ; } } 
public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; sb.append ( METHOD_1 ( ) . getName ( ) ) ; sb.append ( CHAR_1 ) ; sb.append ( VAR_1 . METHOD_2 ( ) ) ; sb.append ( CHAR_2 ) ; return sb . toString ( ) ; } 
public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; METHOD_3 ( new TYPE_4 ( info , METHOD_4 ( info , VAR_2 ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } } 
void METHOD_1 ( ) { for ( int i = ( VAR_1 . size ( ) ) - 1 ; i >= 0 ; i -- ) { android.util.Log.v ( VAR_2 . TAG , ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_1 . get ( i ) . VAR_3 ) ) ) ; } } 
public int METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; return - 1 ; } TYPE_3 VAR_4 = METHOD_3 ( VAR_3 ) ; if ( VAR_4 != null ) { android.util.Log.d ( TYPE_2 . TAG , ( ( ( STRING_3 + VAR_1 ) + STRING_2 ) + VAR_2 ) ) ; METHOD_4 ( VAR_4 ) ; } return 1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 [ ] VAR_1 = new TYPE_1 [ 0 ] ; TYPE_2 request = new TYPE_3 ( ) . METHOD_2 ( VAR_1 ) . METHOD_3 ( new TYPE_4 ( ) . METHOD_4 ( VAR_2 ) ) . build ( ) ; TYPE_5 result = METHOD_5 ( VAR_3 , request ) ; TYPE_6 . METHOD_6 ( result . METHOD_7 ( ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 = VAR_4 ; VAR_5 = VAR_6 ; VAR_7 = VAR_8 ; VAR_9 = VAR_10 ; VAR_11 = VAR_12 ; VAR_13 = VAR_14 ; VAR_15 = VAR_16 ; VAR_17 = VAR_18 ; VAR_19 = VAR_20 ; VAR_21 = VAR_22 ; return VAR_2 ; } 
public boolean METHOD_1 ( android.os.Message VAR_1 ) { switch ( VAR_2 ) { case VAR_3 : VAR_4 . METHOD_2 ( this ) ; case VAR_5 : transitionTo ( VAR_6 ) ; break ; case VAR_7 : METHOD_3 ( ) ; transitionTo ( VAR_8 ) ; break ; case VAR_9 : VAR_10 . METHOD_4 ( VAR_11 , this ) ; VAR_10 . METHOD_5 ( VAR_11 , this ) . METHOD_6 ( ) ; transitionTo ( VAR_8 ) ; break ; } return VAR_12 ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) throws TYPE_3 { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } TYPE_4 VAR_3 = TYPE_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 == null ) { throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; } return TYPE_5 . METHOD_1 ( VAR_1 , VAR_3 ) ; } 
public void METHOD_1 ( final java.lang.String log ) { if ( METHOD_2 ( log , false ) ) { METHOD_3 ( VAR_1 , new java.lang.Runnable ( ) { public void run ( ) { METHOD_4 ( VAR_2 , ( STRING_1 + log ) ) ; } } ) ; if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_5 ( STRING_2 , log ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . d ( this , STRING_1 , VAR_1 ) ; if ( TYPE_3 . equals ( VAR_2 , VAR_1 ) ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_5 ) ; TYPE_1 VAR_6 = null ; if ( ( VAR_5 ) != null ) { VAR_6 = VAR_7 . METHOD_3 ( ) ; } METHOD_4 ( VAR_6 ) ; METHOD_5 ( ) ; if ( ( VAR_5 ) != null ) { METHOD_6 ( VAR_5 ) ; VAR_5 = null ; } } } 
public static void METHOD_1 ( int i , byte [ ] VAR_1 , int offset ) { VAR_1 [ offset ] = ( ( byte ) ( i > > 16 ) ) ; VAR_1 [ ( offset + 1 ) ] = ( ( byte ) ( i > > 8 ) ) ; VAR_1 [ ( offset + 2 ) ] = ( ( byte ) ( i ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) throws java.io.IOException { if ( METHOD_2 ( ) ) { METHOD_3 ( ) ; } server = METHOD_4 ( VAR_1 , VAR_2 ) ; try { out = new TYPE_2 ( new TYPE_3 ( server . METHOD_5 ( ) ) , true , VAR_3 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( ( ( VAR_3 ) + STRING_1 ) ) ; } in = new TYPE_6 ( server . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.Class < ? > VAR_3 , TYPE_3 < java.lang.String > VAR_4 , TYPE_4 VAR_5 , int VAR_6 , boolean VAR_7 ) { if ( new TYPE_5 ( VAR_3 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) { return new TYPE_6 ( VAR_1 , VAR_3 ) ; } else { return null ; } } 
public void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( false ) ; TYPE_1 . when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( VAR_3 class ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( ) ) ; VAR_4 . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 , VAR_6 , VAR_7 ) , null , null , false , true , null ) ; } 
public void METHOD_1 ( ) { java.lang.String [ ] res = new java.lang.String [ ] { STRING_1 , STRING_2 , STRING_1 , STRING_1 } ; TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_3 ) ; TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( STRING_4 ) ; int VAR_3 = 0 ; for ( ; VAR_2 . METHOD_4 ( ) ; VAR_3 ++ ) { assertEquals ( res [ VAR_3 ] , VAR_2 . METHOD_5 ( ) ) ; } } 
public void METHOD_1 ( ) { java.util.ArrayList VAR_1 = new java.util.ArrayList ( 5 ) ; assertEquals ( STRING_1 , 0 , VAR_1 . size ( ) ) ; try { new java.util.ArrayList ( ( - 10 ) ) ; fail ( STRING_2 ) ; } catch ( java.lang.IllegalArgumentException e ) { } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; VAR_1 = METHOD_2 ( true , STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; METHOD_3 ( VAR_2 , VAR_3 , STRING_2 ) ; METHOD_3 ( VAR_2 , VAR_4 , STRING_3 ) ; METHOD_3 ( VAR_2 , VAR_5 , STRING_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.Set < java.io.File > VAR_1 = TYPE_1 . METHOD_2 ( new java.io.File ( STRING_1 ) ) ; java.util.Set < java.io.File > VAR_2 = TYPE_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; assertTrue ( ( STRING_2 + ( VAR_1 . toString ( ) ) ) , VAR_1 . METHOD_5 ( ) ) ; } 
public static int METHOD_1 ( int value , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } int VAR_3 = INT_1 ; return ( ( ( value < < ( VAR_1 | INT_2 ) ) + ( value > > ( VAR_1 ^ INT_3 ) ) ) + ( value > > > ( VAR_1 + INT_4 ) ) ) + ( value < < ( VAR_1 - VAR_3 ) ) ; } 
private static void METHOD_1 ( ) { for ( int i = 0 ; i < ( VAR_1 ) ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_3 [ i ] . get ( ) ) ) { VAR_4 . println ( ( ( ( ( ( STRING_1 + i ) + STRING_2 ) + ( VAR_2 [ i ] ) ) + STRING_3 ) + ( VAR_3 [ i ] . get ( ) ) ) ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( null ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new byte [ 0 ] ) ) ; assertEquals ( VAR_1 , TYPE_1 . METHOD_2 ( new byte [ 1 ] ) ) ; TYPE_2 . METHOD_3 ( ) ; } 
public final void verify ( TYPE_1 key , java.lang.String VAR_1 ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 { java.lang.String VAR_2 = TYPE_7 . METHOD_1 ( c . METHOD_2 ( ) ) ; TYPE_8 VAR_3 = TYPE_8 . METHOD_3 ( VAR_2 , VAR_1 ) ; METHOD_4 ( key , VAR_3 ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , int index , int VAR_2 , TYPE_1 VAR_3 ) { if ( VAR_4 ) TYPE_2 . d ( VAR_5 . TAG , ( ( ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + index ) + STRING_3 ) + VAR_2 ) + STRING_4 ) + VAR_3 ) ) ; TYPE_3 VAR_6 = new TYPE_3 ( mContext , VAR_1 , null ) ; VAR_6 . set ( VAR_3 ) ; VAR_7 . METHOD_2 ( VAR_6 , VAR_2 , new TYPE_4 ( VAR_8 , VAR_8 ) ) ; } 
public static java.lang.String METHOD_1 ( TYPE_1 element ) { TYPE_2 VAR_1 = element . METHOD_2 ( ) ; for ( int j = 0 ; j < ( VAR_1 . METHOD_3 ( ) ) ; j ++ ) { TYPE_3 VAR_2 = VAR_1 . item ( j ) ; if ( ( VAR_2 . METHOD_4 ( ) ) == ( VAR_3 ) ) { return VAR_2 . METHOD_5 ( ) . METHOD_6 ( ) ; } } return null ; } 
public static TYPE_1 METHOD_1 ( int state , java.lang.String VAR_1 ) { return new TYPE_1 ( state , false , VAR_2 , new TYPE_2 ( VAR_3 ) , null , null , null , null , null , false , false , false , false , false , false , false , 0 , false , false , false , true , VAR_4 , false , VAR_1 ) ; } 
public int METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , int version , int VAR_4 , int VAR_5 ) { if ( ( VAR_6 ) == false ) { throw new java.lang.RuntimeException ( ( ( VAR_7 . TAG ) + STRING_1 ) ) ; } return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , version , VAR_4 , VAR_5 ) ; } 
public static boolean METHOD_1 ( java.lang.String VAR_1 ) { return ( ( ( ( ! ( VAR_1 . METHOD_2 ( STRING_1 ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_2 ) ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_3 ) ) ) ) && ( ! ( VAR_1 . METHOD_2 ( STRING_4 ) ) ) ) && ( ! ( VAR_1 . METHOD_3 ( STRING_5 ) ) ) ; } 
void METHOD_1 ( java.lang.String [ ] expected , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; org.junit.Assert.assertEquals ( expected . length , VAR_2 . length ) ; for ( int i = 0 ; i < ( expected . length ) ; ++ i ) { org.junit.Assert.assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) ; } } 
public static java.lang.String METHOD_1 ( TYPE_1 context ) { java.lang.String msg = STRING_1 ; try { TYPE_2 pm = context . METHOD_2 ( ) ; TYPE_3 VAR_1 = pm . METHOD_3 ( context . METHOD_4 ( ) , 0 ) ; msg = STRING_2 ; if ( ( VAR_2 ) != null ) { msg = VAR_2 ; } } catch ( TYPE_4 e ) { TYPE_5 . d ( VAR_3 . TAG , msg ) ; } return msg ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { java.lang.String key = ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) + STRING_1 ) + VAR_3 ; TYPE_4 VAR_4 = TYPE_5 . get ( key ) ; if ( VAR_4 == null ) { VAR_4 = TYPE_6 . METHOD_2 ( new TYPE_7 ( VAR_1 ) , null , VAR_2 , VAR_3 ) ; TYPE_5 . METHOD_3 ( key , VAR_4 ) ; } return VAR_4 ; } 
public void METHOD_1 ( short VAR_1 , TYPE_1 status ) { if ( VAR_2 ) { android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( TYPE_2 . METHOD_2 ( status ) ) ) ) ; } VAR_3 . METHOD_3 ( VAR_1 , status . status , true ) ; } 
private boolean METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 ) { if ( ( VAR_1 == ( VAR_4 ) ) && ( VAR_2 >= 0 ) ) { if ( VAR_3 == ( VAR_5 ) ) { if ( VAR_2 <= ( VAR_6 ) ) { return true ; } } else if ( ( VAR_3 < ( VAR_5 ) ) && ( VAR_3 >= ( VAR_7 ) ) ) { return true ; } } return false ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 . d ( STRING_1 , STRING_2 ) ; TYPE_1 VAR_1 = null ; try { VAR_1 = TYPE_1 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) . METHOD_5 ( true ) ; } catch ( java.io.IOException e ) { } return VAR_1 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 . getName ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) , VAR_4 . METHOD_6 ( ) ) ; if ( ( VAR_1 . METHOD_7 ( ) ) == ( VAR_5 ) ) { final TYPE_3 config = new TYPE_3 ( ) ; VAR_1 . METHOD_8 ( config ) ; METHOD_9 ( config ) ; } } 
public void METHOD_1 ( ) throws TYPE_1 { if ( ( VAR_1 ) == null ) { throw new TYPE_2 ( STRING_1 ) ; } try { VAR_1 . METHOD_1 ( VAR_2 , VAR_3 , VAR_4 . METHOD_2 ( ) ) ; } catch ( TYPE_3 e ) { android.util.Log.w ( VAR_5 , STRING_2 ) ; VAR_1 = null ; throw new TYPE_1 ( VAR_6 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.w ( VAR_5 , ( STRING_3 + e ) ) ; throw new TYPE_1 ( VAR_7 ) ; } } 
static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return false ; } TYPE_2 path = TYPE_2 . METHOD_2 ( VAR_2 ) ; if ( path == null ) { return false ; } if ( VAR_5 . METHOD_3 ( ) ) { path . METHOD_4 ( ) ; return false ; } path . METHOD_5 ( VAR_5 . METHOD_6 ( new TYPE_3 ( ) ) ) ; return true ; } 
public void METHOD_1 ( ) { int [ ] VAR_1 = new int [ ] { VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_10 } ; for ( int i = 0 ; i < ( VAR_1 . length ) ; i ++ ) { try { new TYPE_1 ( ) . METHOD_2 ( VAR_1 [ i ] , STRING_1 ) ; fail ( ( STRING_2 + ( VAR_1 [ i ] ) ) ) ; } catch ( java.io.IOException expected ) { } } } 
public TYPE_1 METHOD_1 ( ) { TYPE_1 pkg = super . METHOD_1 ( ) ; if ( pkg == null ) { try { pkg = TYPE_2 . METHOD_2 ( null , METHOD_3 ( ) , 0 , null , STRING_1 , null , TYPE_3 . METHOD_4 ( ) , TYPE_4 . METHOD_5 ( ) , METHOD_6 ( ) . METHOD_7 ( ) ) ; METHOD_8 ( pkg ) ; } catch ( java.lang.Exception e ) { METHOD_9 ( STRING_2 , e.toString ( ) ) ; } } return pkg ; } 
public static float METHOD_1 ( float a , float b ) { if ( a != a ) return a ; if ( ( ( a == FLOAT_1 ) && ( b == FLOAT_1 ) ) && ( ( TYPE_1 . METHOD_2 ( a ) ) == ( VAR_1 ) ) ) { return b ; } return a >= b ? a : b ; } 
public static TYPE_1 [ ] METHOD_1 ( TYPE_2 [ ] VAR_1 ) throws TYPE_3 { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_2 p : VAR_1 ) { if ( ( p . METHOD_2 ( ) ) && ( p . METHOD_3 ( VAR_3 ) ) ) { VAR_2 . METHOD_4 ( TYPE_4 . METHOD_5 ( p ) ) ; } } return VAR_2 . METHOD_6 ( new TYPE_1 [ VAR_2 . size ( ) ] ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_2 ( ) ) ; VAR_3 = TYPE_3 . METHOD_3 ( VAR_4 , VAR_5 ) ; VAR_6 = TYPE_3 . METHOD_3 ( VAR_7 , VAR_8 ) ; TYPE_4 < TYPE_5 > VAR_9 = TYPE_4 . METHOD_4 ( VAR_10 class ) ; org.mockito.Mockito.verify ( VAR_2 ) . METHOD_5 ( VAR_9 . METHOD_6 ( ) ) ; VAR_11 = VAR_9 . METHOD_7 ( ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , double ... VAR_2 ) throws java.lang.Throwable { METHOD_2 ( java.lang.String.format ( STRING_1 , VAR_1 ) ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( 10 , VAR_3 ) ) ; try { METHOD_6 ( VAR_2 ) ; } finally { METHOD_7 ( ) ; } } 
public java.util.ArrayList < TYPE_1 > METHOD_1 ( ) { synchronized ( VAR_1 ) { final int VAR_2 = VAR_1 . size ( ) ; java.util.ArrayList < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( VAR_2 ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { VAR_3 . METHOD_2 ( VAR_1 . METHOD_3 ( i ) ) ; } return VAR_3 ; } } 
public synchronized boolean METHOD_1 ( boolean VAR_1 ) { METHOD_2 ( VAR_2 , STRING_1 ) ; if ( VAR_3 . METHOD_3 ( VAR_4 , VAR_5 ) ) { METHOD_4 ( STRING_2 ) ; return false ; } METHOD_4 ( ( STRING_3 + VAR_1 ) ) ; VAR_6 = VAR_1 ; android.os.Message m = VAR_7 . METHOD_5 ( VAR_8 ) ; VAR_7 . METHOD_6 ( m ) ; return true ; } 
private int METHOD_1 ( java.lang.Class < ? > VAR_1 , boolean VAR_2 ) throws java.io.IOException { output . METHOD_2 ( VAR_3 ) ; TYPE_1 VAR_4 = TYPE_1 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 . METHOD_4 ( ) ) { METHOD_5 ( VAR_1 , VAR_4 , VAR_2 ) ; } else { METHOD_6 ( VAR_4 , VAR_2 ) ; } int VAR_5 = METHOD_7 ( ) ; if ( ! VAR_2 ) { VAR_6 . METHOD_8 ( VAR_1 , VAR_5 ) ; } return VAR_5 ; } 
public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 item = VAR_2 . get ( VAR_1 ) ; if ( item == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return item . METHOD_3 ( ) ; } 
public java.lang.Integer METHOD_1 ( ) { int n = number ; if ( n <= 1 ) return n ; TYPE_1 VAR_1 = new TYPE_1 ( ( n - 1 ) ) ; VAR_1 . METHOD_2 ( ) ; return ( new TYPE_1 ( ( n - 2 ) ) . METHOD_1 ( ) ) + ( VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , ( ( VAR_1 . get ( INT_1 ) ) == ( VAR_2 [ INT_1 ] ) ) ) ; try { VAR_1 . get ( INT_2 ) ; fail ( STRING_2 ) ; } catch ( TYPE_1 e ) { } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . d ( this , STRING_1 ) ; if ( ! ( METHOD_2 ( ) ) ) { final int VAR_2 = METHOD_3 ( VAR_1 ) ; if ( VAR_2 != ( VAR_3 ) ) { METHOD_4 ( VAR_2 ) ; } } } 
public static TYPE_1 METHOD_1 ( byte [ ] name ) { TYPE_2 VAR_1 ; try { VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; } catch ( TYPE_3 VAR_2 ) { throw new TYPE_4 ( STRING_2 ) ; } byte [ ] VAR_3 = VAR_1 . METHOD_3 ( name ) ; VAR_3 [ 6 ] &= INT_1 ; VAR_3 [ 6 ] |= INT_2 ; VAR_3 [ 8 ] &= INT_3 ; VAR_3 [ 8 ] |= INT_4 ; return new TYPE_1 ( VAR_3 ) ; } 
private static int METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : case VAR_3 : case VAR_4 : case VAR_5 : return VAR_6 ; case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : return VAR_11 ; default : throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( TYPE_1 . METHOD_2 ( ( VAR_1 & - 1 ) ) ) ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { assert ( VAR_3 ) != null ; try { VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; try { VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_4 e ) { throw new TYPE_5 ( e ) ; } catch ( TYPE_6 e ) { throw new TYPE_5 ( e ) ; } } catch ( TYPE_7 e ) { } catch ( TYPE_8 e ) { throw new TYPE_3 ( e ) ; } } 
public void METHOD_1 ( ) { assertTrue ( STRING_1 , TYPE_1 . METHOD_2 ( CHAR_1 ) ) ; assertTrue ( STRING_2 , TYPE_1 . METHOD_2 ( CHAR_2 ) ) ; assertTrue ( STRING_3 , TYPE_1 . METHOD_2 ( CHAR_3 ) ) ; assertTrue ( STRING_4 , TYPE_1 . METHOD_2 ( CHAR_4 ) ) ; assertTrue ( STRING_5 , TYPE_1 . METHOD_2 ( CHAR_5 ) ) ; assertTrue ( STRING_6 , TYPE_1 . METHOD_2 ( CHAR_6 ) ) ; assertTrue ( STRING_7 , ( ! ( TYPE_1 . METHOD_2 ( CHAR_7 ) ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( this ) ; TYPE_2 context = METHOD_3 ( VAR_1 class ) ; when ( context . METHOD_4 ( VAR_2 ) ) . thenReturn ( VAR_3 ) ; METHOD_5 ( ) . when ( VAR_3 ) . METHOD_6 ( METHOD_7 ( ) , METHOD_8 ( ) , METHOD_9 ( VAR_4 . String class ) , VAR_5 . METHOD_10 ( ) , METHOD_9 ( VAR_6 class ) ) ; VAR_7 = new TYPE_3 ( context , VAR_8 , VAR_9 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , boolean VAR_1 , int VAR_2 , byte [ ] VAR_3 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , VAR_1 , VAR_2 , VAR_3 ) ; } 
static < TYPE_1 , TYPE_2 > java.util.Map < TYPE_1 , TYPE_2 > METHOD_1 ( java.util.Set < TYPE_1 > set , TYPE_3 < ? super TYPE_1 , TYPE_2 > VAR_1 ) { if ( set instanceof TYPE_4 ) { return TYPE_5 . METHOD_1 ( ( ( TYPE_4 < TYPE_1 > ) ( set ) ) , VAR_1 ) ; } else { return new TYPE_6 < TYPE_1 , TYPE_2 > ( set , VAR_1 ) ; } } 
protected java.lang.String METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { final java.lang.String VAR_3 ; if ( VAR_1 == 16 ) { VAR_3 = STRING_1 ; } else { VAR_3 = STRING_2 ; } if ( VAR_2 == ( VAR_4 ) ) { return VAR_3 ; } else { return ( VAR_3 + STRING_3 ) + ( VAR_2 . toString ( ) . METHOD_2 ( VAR_5 ) ) ; } } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; TYPE_4 type = VAR_1 . METHOD_4 ( ) ; TYPE_5 VAR_3 = TYPE_6 . METHOD_5 ( TYPE_3 . METHOD_6 ( type ) ) ; TYPE_7 VAR_4 = TYPE_3 . METHOD_7 ( VAR_1 ) ; TYPE_8 VAR_5 = new TYPE_9 ( VAR_3 , VAR_4 , VAR_6 , METHOD_8 ( ) , VAR_2 ) ; METHOD_9 ( VAR_5 ) ; METHOD_10 ( VAR_7 , VAR_4 ) ; return false ; } 
private TYPE_1 METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) throws TYPE_2 , TYPE_3 , java.io.IOException { TYPE_1 VAR_2 = VAR_3 . get ( ) ; if ( ( VAR_2 == null ) || ( ( VAR_2 . METHOD_2 ( ) ) != ( VAR_4 ) ) ) { TYPE_4 VAR_5 = VAR_6 . METHOD_1 ( VAR_4 , VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) ; VAR_2 = VAR_5 . METHOD_6 ( VAR_1 ) ; } return VAR_2 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = TYPE_2 . METHOD_2 ( ) ; if ( VAR_2 != null ) { TYPE_3 data = VAR_2 . METHOD_3 ( VAR_1 ) ; if ( data != null ) { TYPE_4 VAR_3 = data . METHOD_4 ( ) ; VAR_3 . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ; } } if ( ( ( VAR_5 ) != null ) && ( VAR_5 . METHOD_7 ( ) ) ) { VAR_5 = null ; } } 
private void METHOD_1 ( TYPE_1 is , TYPE_2 VAR_1 , java.lang.String name ) { try { TYPE_3 VAR_2 = new TYPE_3 ( name ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( is , VAR_1 , name ) ; } catch ( java.lang.Exception e ) { throw new TYPE_4 ( ( STRING_1 + name ) , e ) ; } } 
public static synchronized int METHOD_1 ( TYPE_1 provider , int VAR_1 ) { java.lang.String VAR_2 = provider . getName ( ) ; TYPE_2 . METHOD_2 ( ( STRING_1 + VAR_2 ) ) ; TYPE_3 VAR_3 = TYPE_4 . METHOD_3 ( ) ; TYPE_3 VAR_4 = TYPE_3 . METHOD_4 ( VAR_3 , provider , ( VAR_1 - 1 ) ) ; if ( VAR_3 == VAR_4 ) { return - 1 ; } TYPE_2 . METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; return ( VAR_4 . METHOD_7 ( VAR_2 ) ) + 1 ; } 
public void METHOD_1 ( int VAR_1 , int count , float [ ] d ) { int VAR_2 = ( VAR_3 . METHOD_2 ( ) ) * count ; METHOD_3 ( VAR_1 , count , ( ( d . length ) * 4 ) , VAR_2 ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 is ) throws TYPE_3 { final TYPE_4 VAR_1 = new TYPE_4 ( is ) ; try { final long VAR_2 = TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( VAR_2 == INT_1 ) { return null ; } return new TYPE_1 ( VAR_2 ) ; } catch ( java.lang.Exception e ) { throw new TYPE_3 ( e ) ; } finally { VAR_1 . METHOD_4 ( ) ; } } 
void METHOD_1 ( java.lang.String VAR_1 ) { java.lang.String s = METHOD_2 ( VAR_1 , 10 ) ; this . METHOD_3 ( ) ; int VAR_2 = TYPE_1 . METHOD_4 ( this . VAR_3 , s ) ; TYPE_2 . METHOD_5 ( ( VAR_2 > 0 ) ) ; if ( VAR_2 < ( s . length ( ) ) ) { throw METHOD_6 ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( ) { try { android.os.Bundle VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 . METHOD_4 ( ) ) return null ; return VAR_2 ; } catch ( android.os.RemoteException ex ) { return null ; } catch ( java.lang.NullPointerException ex ) { return null ; } } 
synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 ) ; assertTrue ( VAR_3 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { if ( ( ( VAR_1 ) != null ) && ( VAR_1 . METHOD_2 ( ) ) ) { VAR_2 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { if ( VAR_1 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( false , true ) ; } else { VAR_1 . METHOD_6 ( ) ; } } } ) ; } } 
public void METHOD_1 ( TYPE_1 device ) { if ( ! ( device . METHOD_2 ( VAR_1 ) ) ) return ; TYPE_2 VAR_2 = device . METHOD_3 ( ) ; try { for ( TYPE_3 listener : VAR_3 ) { listener . METHOD_4 ( VAR_2 ) ; } } catch ( android.os.RemoteException e ) { android.util.Log.e ( TYPE_4 . TAG , STRING_1 , e ) ; } } 
private final boolean METHOD_1 ( TYPE_1 uri , int uid , int VAR_1 ) { if ( ( uid == 0 ) || ( ! ( TYPE_2 . METHOD_2 ( ) ) ) ) { return true ; } java.util.HashMap < TYPE_1 , TYPE_3 > VAR_2 = VAR_3 . get ( uid ) ; if ( VAR_2 == null ) return false ; TYPE_3 VAR_4 = VAR_2 . get ( uri ) ; if ( VAR_4 == null ) return false ; return ( VAR_1 & ( VAR_5 ) ) == VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( STRING_1 ) , null , null , TYPE_3 . of ( ) , TYPE_3 . of ( ) , TYPE_3 . of ( ) ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_2 ) ) . METHOD_4 ( STRING_3 ) ; TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_4 ) ) . METHOD_4 ( STRING_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { TYPE_2 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.lang.String ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = VAR_2 ; TYPE_3 . METHOD_3 ( VAR_5 , ret ) ; } VAR_3 . METHOD_4 ( rr , VAR_1 , ret ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 c ) { return new TYPE_1 ( VAR_1 . METHOD_2 ( ) , c . state , VAR_2 , VAR_3 , VAR_4 , VAR_1 . METHOD_3 ( ) , VAR_5 , VAR_6 , VAR_7 , VAR_8 , VAR_9 , false , false , 0 , VAR_10 , VAR_11 , VAR_12 , VAR_13 ) ; } 
static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 device ) throws TYPE_3 , TYPE_4 , java.io.IOException { if ( device != null ) { java.lang.String msg = STRING_1 + ( device . METHOD_2 ( ) ) ; byte [ ] VAR_2 = TYPE_5 . METHOD_3 ( msg ) ; TYPE_5 . METHOD_4 ( VAR_1 , VAR_2 ) ; TYPE_6 VAR_3 = TYPE_5 . METHOD_5 ( VAR_1 , false ) ; if ( ( VAR_4 ) == false ) { throw new TYPE_3 ( VAR_5 , true ) ; } } } 
private void METHOD_1 ( final java.lang.String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { VAR_3 = new TYPE_3 ( new TYPE_4 ( this ) , VAR_4 . value ( ) ) ; VAR_3 . start ( ) ; VAR_5 = new TYPE_5 ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { METHOD_2 ( VAR_1 , VAR_2 ) ; } else { for ( java.lang.String VAR_6 : METHOD_3 ( ) ) { METHOD_2 ( VAR_6 , VAR_2 ) ; } } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; VAR_1 . METHOD_4 ( VAR_2 , VAR_4 ) ; assertTrue ( TYPE_1 . equals ( VAR_4 , VAR_1 . get ( VAR_2 ) ) ) ; assertTrue ( VAR_1 . METHOD_2 ( VAR_2 ) ) ; METHOD_5 ( VAR_1 . get ( VAR_2 ) ) ; } 
public static TYPE_1 METHOD_1 ( int VAR_1 , int uid , java.lang.String VAR_2 , boolean VAR_3 , boolean VAR_4 , java.lang.String VAR_5 , java.lang.String VAR_6 ) { final TYPE_1 config = new TYPE_1 ( ) ; VAR_7 = VAR_2 ; VAR_8 = VAR_1 ; VAR_9 = uid ; VAR_10 = VAR_3 ; config . status = ( VAR_4 ) ? VAR_11 : VAR_12 ; if ( VAR_5 != null ) { VAR_13 = VAR_5 ; VAR_14 = VAR_6 ; VAR_15 . METHOD_2 ( VAR_16 ) ; } return config ; } 
private TYPE_1 METHOD_1 ( TYPE_2 p , TYPE_3 VAR_1 , TYPE_4 VAR_2 , byte a , byte VAR_3 ) { TYPE_3 [ ] VAR_4 ; if ( a == 0 ) { VAR_4 = VAR_5 ; } else { VAR_4 = VAR_6 ; } TYPE_5 VAR_7 = TYPE_6 . METHOD_2 ( VAR_3 , VAR_8 ) ; byte [ ] VAR_9 = TYPE_6 . METHOD_3 ( VAR_3 , VAR_1 , VAR_8 , TYPE_5 . METHOD_4 ( VAR_10 ) , VAR_7 , VAR_4 ) ; return TYPE_7 . METHOD_5 ( p , VAR_9 , VAR_2 ) ; } 
public int [ ] METHOD_1 ( int [ ] src , int [ ] VAR_1 ) { return new int [ ] { src [ 0 ] , VAR_1 [ 1 ] , VAR_1 [ 2 ] , TYPE_1 . METHOD_2 ( INT_1 , ( ( src [ 3 ] ) + ( VAR_1 [ 3 ] ) ) ) } ; } 
static int METHOD_1 ( int [ ] a , int VAR_1 ) { int x = 0 ; for ( int i = TYPE_1 . METHOD_2 ( VAR_1 ) ; i < ( a . length ) ; i ++ ) { x += a [ i ] ; } return x ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } METHOD_7 ( method ) ; VAR_2 . METHOD_8 ( method ) ; } 
public void METHOD_1 ( ) { assertEquals ( VAR_1 . METHOD_2 ( ) , STRING_1 ) ; assertEquals ( VAR_2 . METHOD_2 ( ) , STRING_2 ) ; assertEquals ( VAR_3 . METHOD_2 ( ) , STRING_3 ) ; assertEquals ( VAR_4 . METHOD_2 ( ) , STRING_4 ) ; assertEquals ( VAR_5 . METHOD_2 ( ) , STRING_5 ) ; } 
protected void METHOD_1 ( ) { if ( VAR_1 ) log ( STRING_1 ) ; if ( ( VAR_2 ) == false ) return ; if ( ( METHOD_2 ( ) ) == false ) { METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_3 ) ; } else { METHOD_5 ( VAR_3 ) ; } } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { try { TYPE_4 VAR_2 = TYPE_4 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_5 VAR_3 = TYPE_5 . METHOD_1 ( TYPE_6 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , VAR_1 . METHOD_5 ( ) ) ; return new TYPE_1 ( TYPE_6 . METHOD_6 ( VAR_2 . METHOD_4 ( ) , VAR_3 . METHOD_4 ( ) , null ) ) ; } catch ( java.lang.Exception e ) { throw new TYPE_3 ( e ) ; } } 
public java.lang.String METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; if ( VAR_2 == null ) { return VAR_3 ; } return new java.lang.StringBuilder ( ) . append ( ( ( METHOD_3 ( ) ) != null ? METHOD_3 ( ) . print ( VAR_1 ) : STRING_1 ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_4 ( ) ) . append ( STRING_2 ) . append ( VAR_2 . METHOD_5 ( ) ) . toString ( ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 ) && ( VAR_2 != ( VAR_4 ) ) ) { return VAR_5 ; } if ( ( VAR_6 . METHOD_3 ( ) ) && ( ( VAR_2 . METHOD_4 ( VAR_7 ) ) < 0 ) ) { VAR_2 = VAR_8 ; } if ( ( VAR_6 . METHOD_5 ( ) ) && ( VAR_2 == ( VAR_9 ) ) ) { VAR_2 = VAR_5 ; } return VAR_2 ; } 
public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 m = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( m . METHOD_3 ( ) ) { java.lang.String v = m . METHOD_4 ( 1 ) ; int VAR_3 = - 1 ; try { VAR_3 = java.lang.Integer.parseInt ( v ) ; } catch ( TYPE_3 e ) { return null ; } TYPE_1 VAR_4 = new TYPE_1 ( VAR_3 ) ; return VAR_4 ; } return null ; } 
public void METHOD_1 ( int VAR_1 , int count , byte [ ] d ) { int VAR_2 = ( VAR_3 . METHOD_2 ( ) ) * count ; METHOD_3 ( VAR_1 , count , d . length , VAR_2 ) ; mRS . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_4 , count , d , VAR_2 ) ; } 
private void METHOD_1 ( int VAR_1 ) { int VAR_2 = java.util.HashMap . METHOD_2 ( VAR_1 ) ; float VAR_3 = VAR_2 * ( VAR_4 ) ; if ( VAR_3 > ( ( VAR_5 ) + 1 ) ) { VAR_3 = ( VAR_5 ) + 1 ; } VAR_6 = ( ( int ) ( VAR_3 ) ) ; VAR_7 = new TYPE_1 [ VAR_2 ] ; METHOD_3 ( VAR_2 ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 , int VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 , TYPE_1 VAR_6 , TYPE_1 VAR_7 , java.lang.String VAR_8 ) { TYPE_2 VAR_9 = new TYPE_2 ( VAR_8 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; try { VAR_9 . METHOD_2 ( ) ; } catch ( java.io.IOException e ) { throw new java.lang.RuntimeException ( e ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String path ) throws TYPE_2 { TYPE_3 fd = VAR_1 . METHOD_2 ( path , VAR_2 , 0 ) ; long size = VAR_1 . METHOD_3 ( fd ) . VAR_3 ; long address = VAR_1 . METHOD_4 ( INT_1 , size , VAR_4 , VAR_5 , fd , 0 ) ; VAR_1 . METHOD_5 ( fd ) ; return new TYPE_1 ( address , size ) ; } 
private static java.util.Set < java.lang.String > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { java.util.Set < java.lang.String > VAR_4 = new TYPE_4 < java.lang.String > ( ) ; if ( VAR_2 . METHOD_2 ( VAR_3 ) ) { VAR_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( VAR_1 , VAR_5 ) ) ; } else { VAR_4 . METHOD_3 ( TYPE_5 . METHOD_5 ( VAR_2 . METHOD_6 ( VAR_3 ) ) ) ; } return VAR_4 ; } 
void METHOD_1 ( ) { try { int VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; if ( VAR_1 > 0 ) { VAR_4 = VAR_5 ; } else if ( VAR_1 == 0 ) { VAR_4 = VAR_6 ; } else { VAR_4 = VAR_7 ; } } catch ( android.os.RemoteException e ) { } } 
public static void METHOD_1 ( TYPE_1 VAR_1 , final TYPE_2 VAR_2 ) { final TYPE_3 VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_4 VAR_4 = VAR_1 . METHOD_3 ( STRING_1 ) ; if ( VAR_4 != null ) { VAR_3 . METHOD_4 ( VAR_4 ) ; } VAR_3 . METHOD_5 ( null ) ; final TYPE_5 VAR_5 = TYPE_5 . METHOD_6 ( VAR_2 ) ; VAR_5 . METHOD_7 ( VAR_3 , STRING_1 ) ; } 
public boolean METHOD_1 ( int VAR_1 ) { boolean VAR_2 = false ; VAR_3 = VAR_1 ; if ( ! ( VAR_4 ) ) { METHOD_2 ( ) ; if ( VAR_5 ) TYPE_1 . d ( VAR_6 , ( STRING_1 + VAR_1 ) ) ; VAR_7 . METHOD_3 ( ) . METHOD_4 ( this ) ; if ( ( VAR_8 ) != null ) { VAR_2 = VAR_8 . METHOD_5 ( this ) ; } VAR_9 = null ; } METHOD_6 ( ) ; METHOD_7 ( ) ; return VAR_2 ; } 
protected void METHOD_1 ( int VAR_1 , TYPE_1 key , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) throws TYPE_4 , TYPE_5 { if ( ( VAR_2 != null ) && ( ( VAR_4 ) != ( VAR_5 ) ) ) { throw new TYPE_4 ( ( STRING_1 + ( VAR_2 . METHOD_2 ( ) . getName ( ) ) ) ) ; } METHOD_3 ( VAR_1 , key ) ; } 
static void METHOD_1 ( int VAR_1 , int r , int VAR_2 , int b ) { TYPE_1 . METHOD_2 ( VAR_1 , ( ( ( - INT_1 | ( r < < 16 ) ) | ( ( VAR_2 & INT_2 ) < < 8 ) ) | ( b & INT_2 ) ) , VAR_3 ) ; } 
public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 e ) { if ( ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) ) ) && ( ! ( e . METHOD_2 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ) ) { throw new TYPE_4 ( STRING_1 ) ; } int id = VAR_1 . METHOD_5 ( 5 , e . METHOD_6 ( VAR_1 ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( id , VAR_1 ) ; VAR_2 . METHOD_7 ( FLOAT_1 ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) . build ( ) ; VAR_2 . METHOD_2 ( STRING_1 , VAR_3 , TYPE_3 . METHOD_3 ( VAR_4 ) ) ; VAR_2 . METHOD_2 ( STRING_2 , VAR_5 , TYPE_3 . METHOD_3 ( VAR_6 ) ) ; VAR_2 . METHOD_2 ( STRING_3 , 0 , TYPE_3 . METHOD_3 ( VAR_7 ) ) ; VAR_2 . METHOD_2 ( STRING_4 , false , TYPE_3 . METHOD_3 ( VAR_8 ) ) ; VAR_2 . METHOD_2 ( STRING_5 , false , TYPE_3 . METHOD_3 ( VAR_9 ) ) ; } 
void METHOD_1 ( java.lang.String [ ] expected , java.lang.String VAR_1 ) { java.lang.String [ ] VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; assertEquals ( expected . length , VAR_2 . length ) ; for ( int i = 0 ; i < ( expected . length ) ; ++ i ) { assertEquals ( ( STRING_1 + i ) , expected [ i ] , VAR_2 [ i ] ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = METHOD_2 ( STRING_1 ) ; s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , true ) ; assertTrue ( STRING_2 , ( ( s . METHOD_5 ( ) ) == VAR_1 ) ) ; s = new TYPE_1 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 , false ) ; } 
public final java.lang.String METHOD_1 ( ) { TYPE_1 sb = new TYPE_1 ( 100 ) ; boolean VAR_1 = true ; sb.append ( STRING_1 ) ; for ( TYPE_2 i : VAR_2 ) { if ( VAR_1 ) { VAR_1 = false ; } else { sb.append ( STRING_2 ) ; } sb.append ( i . METHOD_1 ( ) ) ; } sb.append ( STRING_3 ) ; return sb . toString ( ) ; } 
protected com.android.jack.ir.ast.JDefinedClassOrInterface METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { assert ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; for ( TYPE_2 VAR_3 : VAR_4 ) { try { return VAR_3 . METHOD_1 ( this , VAR_1 ) ; } catch ( TYPE_3 e ) { } } throw new TYPE_4 ( this , VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } return new TYPE_3 ( VAR_2 , this . METHOD_2 ( ) , this . METHOD_3 ( ) , this . METHOD_4 ( ) , this . METHOD_5 ( ) , offset , true ) ; } 
public void METHOD_1 ( ) { when ( VAR_1 . METHOD_2 ( METHOD_3 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) ) ) . thenReturn ( null ) ; VAR_2 . METHOD_5 ( false ) ; int VAR_3 = VAR_2 . METHOD_6 ( ) ; VAR_2 . METHOD_7 ( VAR_4 ) ; int VAR_5 = VAR_2 . METHOD_6 ( ) ; assertEquals ( ( VAR_3 * 2 ) , VAR_5 ) ; } 
void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { if ( ( METHOD_2 ( VAR_1 ) ) == ( VAR_3 ) ) { return ; } java.lang.String msg = ( ( ( ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + ( TYPE_1 . METHOD_3 ( ) ) ) + STRING_3 ) + ( TYPE_1 . METHOD_4 ( ) ) ) + STRING_4 ) + VAR_1 ; android.util.Log.w ( com.android.server.am.ActivityManagerService.TAG , msg ) ; throw new TYPE_2 ( msg ) ; } 
private int METHOD_1 ( ) { switch ( VAR_1 ) { case VAR_2 : return VAR_3 ; case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : return VAR_8 ; case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : return VAR_13 ; case VAR_14 : return VAR_15 ; case VAR_16 : return VAR_17 ; case VAR_18 : return VAR_19 ; case VAR_20 : return VAR_21 ; default : return VAR_22 ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_2 ( STRING_2 ) ; assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) ; VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 2 ) ; VAR_3 . METHOD_5 ( TYPE_3 . METHOD_4 ( VAR_1 , VAR_2 ) ) ; assertEquals ( VAR_3 . METHOD_2 ( ) . size ( ) , 0 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( true ) ; while ( ! ( VAR_1 . METHOD_2 ( true , false ) ) ) ; assertFalse ( VAR_1 . get ( ) ) ; while ( ! ( VAR_1 . METHOD_2 ( false , false ) ) ) ; assertFalse ( VAR_1 . get ( ) ) ; while ( ! ( VAR_1 . METHOD_2 ( false , true ) ) ) ; assertTrue ( VAR_1 . get ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , false ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_2 , false ) ; assertEquals ( VAR_1 , VAR_3 ) ; VAR_3 = new TYPE_1 ( VAR_2 , true ) ; assertFalse ( VAR_1 . equals ( VAR_3 ) ) ; VAR_3 = new TYPE_1 ( VAR_4 , false ) ; assertFalse ( VAR_1 . equals ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } try { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } catch ( java.io.IOException e ) { android.util.Log.e ( VAR_3 . TAG , ( STRING_1 + ( e.toString ( ) ) ) ) ; } VAR_4 . METHOD_3 ( VAR_5 ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final int VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_1 ) ; args . METHOD_2 ( STRING_2 , VAR_2 ) ; TYPE_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_3 ) . METHOD_5 ( VAR_1 , VAR_4 , true ) ; TYPE_4 . METHOD_6 ( VAR_3 ) ; } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { if ( ! ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) ) { throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( VAR_2 ) ) ) ; } if ( ( VAR_2 . METHOD_4 ( 0 ) ) == CHAR_1 ) { VAR_1 = VAR_2 ; } else { VAR_1 = VAR_2 . METHOD_5 ( 1 , ( ( VAR_2 . length ( ) ) - 1 ) ) ; } } return VAR_1 ; } 
public static void METHOD_1 ( int VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; TYPE_1 VAR_3 = TYPE_2 . METHOD_3 ( ) ; if ( VAR_4 ) { VAR_3 . METHOD_4 ( VAR_1 , false ) ; } else { VAR_3 . METHOD_4 ( VAR_1 ) ; } } catch ( java.lang.Throwable e ) { throw TYPE_3 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( this ) ; VAR_2 . METHOD_4 ( this ) ; } if ( ( VAR_3 ) != null ) { VAR_1 . METHOD_5 ( VAR_3 ) ; } VAR_1 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) != null ) { VAR_1 . METHOD_5 ( VAR_5 ) ; } VAR_6 . METHOD_6 ( VAR_1 ) ; } 
private void METHOD_1 ( int VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : VAR_3 . METHOD_2 ( VAR_4 ) ; VAR_3 . METHOD_3 ( true ) ; break ; case VAR_5 : VAR_3 . METHOD_2 ( VAR_6 ) ; VAR_3 . METHOD_3 ( true ) ; break ; case VAR_7 : VAR_3 . METHOD_2 ( VAR_8 ) ; VAR_3 . METHOD_3 ( true ) ; break ; default : VAR_3 . METHOD_2 ( null ) ; VAR_3 . METHOD_3 ( false ) ; break ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( this ) ; VAR_1 = TYPE_2 . METHOD_3 ( VAR_2 class ) ; TYPE_2 . METHOD_4 ( VAR_2 class ) ; TYPE_2 . METHOD_5 ( VAR_2 class , VAR_3 ) ; TYPE_3 . when ( mContext . METHOD_6 ( VAR_4 ) ) . thenReturn ( VAR_5 ) ; TYPE_3 . when ( mContext . METHOD_6 ( VAR_6 ) ) . thenReturn ( VAR_7 ) ; } 
private boolean METHOD_1 ( java.lang.String VAR_1 ) { if ( VAR_1 == null ) { return false ; } if ( ( VAR_1 . METHOD_2 ( ) . length ( ) ) == 0 ) { return false ; } TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; return ( VAR_2 . METHOD_3 ( ) ) == ( VAR_3 ) ; } 
private static TYPE_1 METHOD_1 ( ) { for ( TYPE_2 VAR_1 : TYPE_3 . METHOD_2 ( ) ) { TYPE_1 project = VAR_1 . METHOD_3 ( ) ; TYPE_4 state = TYPE_5 . METHOD_4 ( project ) ; if ( state . METHOD_5 ( ) ) { TYPE_6 VAR_2 = TYPE_6 . get ( project ) ; if ( VAR_2 . METHOD_6 ( ) . equals ( STRING_1 ) ) { return project ; } } } return null ; } 
public static int METHOD_1 ( int a , int b , int c , int d , int e , int f ) { int [ ] values = new int [ ] { a , b , c , d , e , f } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_2 ) ; ++ i ) { java.lang.Integer VAR_3 = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; assertTrue ( VAR_1 . METHOD_3 ( VAR_3 ) ) ; } assertEquals ( 0 , VAR_1 . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 context , java.lang.Object VAR_1 , TYPE_2 VAR_2 , java.lang.String VAR_3 ) { if ( context . METHOD_2 ( VAR_2 ) ) { boolean VAR_4 = context . METHOD_3 ( ) ; if ( VAR_4 ) { int VAR_5 = METHOD_4 ( context , VAR_1 ) ; if ( ( VAR_5 >= 0 ) && ( context . METHOD_5 ( VAR_5 , VAR_2 ) ) ) { return ; } } context . METHOD_1 ( VAR_2 , METHOD_6 ( context , VAR_1 ) , VAR_3 , null ) ; } } 
public void METHOD_1 ( int count ) { if ( count < 0 ) { throw new java.lang.IllegalArgumentException ( STRING_1 ) ; } int VAR_1 = ( VAR_2 ) + count ; if ( VAR_3 ) { METHOD_2 ( VAR_1 ) ; } else if ( VAR_1 > ( data . length ) ) { TYPE_1 . METHOD_3 ( ) ; return ; } TYPE_2 . METHOD_4 ( data , VAR_2 , VAR_1 , ( ( byte ) ( 0 ) ) ) ; VAR_2 = VAR_1 ; } 
static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 context ) { if ( ! ( TYPE_4 . get ( context ) . METHOD_2 ( VAR_1 , false ) ) ) { return TYPE_1 . METHOD_3 ( ) ; } java.lang.String VAR_2 = TYPE_5 . METHOD_4 ( context ) . METHOD_5 ( ) ; return TYPE_6 . METHOD_6 ( VAR_2 ) ? TYPE_1 . of ( TYPE_6 . get ( VAR_2 ) ) : TYPE_1 . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; TYPE_1 VAR_5 = ( ( TYPE_1 ) ( VAR_6 . METHOD_4 ( ) ) ) ; VAR_5 . flags &= ~ ( VAR_7 ) ; VAR_8 . METHOD_5 ( VAR_6 , VAR_5 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) , null , 0 ) ; VAR_1 . METHOD_4 ( true ) ; assertTrue ( STRING_1 , VAR_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_4 ( false ) ; assertFalse ( STRING_2 , VAR_1 . METHOD_5 ( ) ) ; } 
private void METHOD_1 ( short VAR_1 , short VAR_2 , java.lang.String VAR_3 , java.lang.Exception VAR_4 ) throws java.io.IOException { VAR_5 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; byte [ ] error = new byte [ 2 ] ; error [ 0 ] = ( ( byte ) ( VAR_1 ) ) ; error [ 1 ] = ( ( byte ) ( VAR_2 ) ) ; METHOD_3 ( VAR_6 , error , 0 , 2 ) ; } 
public static void METHOD_1 ( long i , TYPE_1 output ) throws java.io.IOException { output . METHOD_2 ( ( ( int ) ( i > > INT_1 ) ) ) ; output . METHOD_2 ( ( ( int ) ( i > > 16 ) ) ) ; output . METHOD_2 ( ( ( int ) ( i > > 8 ) ) ) ; output . METHOD_2 ( ( ( int ) ( i ) ) ) ; } 
public java.lang.String METHOD_1 ( ) { int VAR_1 = METHOD_2 ( ) ; TYPE_1 VAR_2 = METHOD_3 ( ) ; return ( ( ( ( ( VAR_1 == 0 ? STRING_1 : ( TYPE_2 . toString ( VAR_1 ) ) + STRING_2 ) + ( VAR_2 instanceof java.lang.Class ? TYPE_3 . METHOD_4 ( ( ( java.lang.Class ) ( VAR_2 ) ) ) : VAR_2 . toString ( ) ) ) + STRING_2 ) + ( TYPE_3 . METHOD_4 ( METHOD_5 ( ) ) ) ) + STRING_3 ) + ( getName ( ) ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method ) ; VAR_2 . METHOD_5 ( method ) ; new TYPE_2 ( ) . METHOD_5 ( method ) ; } 
private static boolean METHOD_1 ( TYPE_1 element ) { java.lang.String VAR_1 = element . METHOD_2 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 != null ) && ( ! ( VAR_1 . METHOD_3 ( ) ) ) ) { return TYPE_2 . METHOD_4 ( VAR_1 ) ; } else { for ( TYPE_1 VAR_4 : TYPE_3 . METHOD_5 ( element ) ) { if ( VAR_4 . METHOD_6 ( ) . equals ( VAR_5 ) ) { return true ; } } } return false ; } 
private java.util.List < TYPE_1 > METHOD_1 ( ) { synchronized ( this ) { if ( ( VAR_1 ) == null ) { try { VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 class . METHOD_3 ( VAR_3 ) ) ; } catch ( TYPE_3 e ) { VAR_4 . error ( e , null ) ; VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; } catch ( java.lang.Exception e ) { VAR_4 . error ( null , STRING_1 ) ; VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; } } } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_3 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_4 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; } 
public final void METHOD_1 ( int VAR_1 , int VAR_2 , java.lang.String format , byte [ ] VAR_3 ) { synchronized ( VAR_4 ) { if ( ( VAR_5 ) == null ) { throw new TYPE_1 ( STRING_1 ) ; } try { VAR_5 . METHOD_1 ( VAR_1 , VAR_2 , format , VAR_3 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_6 , ( STRING_2 + ( e.getMessage ( ) ) ) ) ; METHOD_2 ( VAR_1 , VAR_2 , VAR_7 ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; VAR_2 = null ; VAR_1 = null ; VAR_3 = null ; VAR_4 = null ; VAR_5 = null ; VAR_6 = null ; VAR_7 . METHOD_3 ( ) ; VAR_8 = null ; super . METHOD_1 ( ) ; } 
protected void METHOD_1 ( final java.lang.String VAR_1 ) throws TYPE_1 { if ( METHOD_2 ( ) . METHOD_3 ( ) ) { com.android.tradefed.log.LogUtil.CLog.i ( STRING_1 ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( java.lang.String.format ( STRING_3 , VAR_2 ) ) ; METHOD_4 ( STRING_4 ) ; return ; } TYPE_2 VAR_3 = new TYPE_2 ( ) { public boolean run ( ) throws TYPE_3 , TYPE_4 , java.io.IOException { METHOD_2 ( ) . METHOD_5 ( VAR_1 ) ; return true ; } } ; METHOD_6 ( STRING_5 , VAR_3 , VAR_4 ) ; } 
public synchronized long METHOD_1 ( long n ) throws java.io.IOException { if ( VAR_1 ) { return 0 ; } if ( ( in ) instanceof TYPE_1 ) { n = in . METHOD_1 ( n ) ; } else { long VAR_2 = ( n > ( ( expected ) - ( count ) ) ) ? ( expected ) - ( count ) : n ; n = in . METHOD_1 ( VAR_2 ) ; } METHOD_2 ( n ) ; return n ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , int line ) { if ( ( VAR_3 ) != null ) { for ( TYPE_1 VAR_4 : VAR_3 ) { if ( VAR_4 . METHOD_1 ( VAR_1 , VAR_2 , line ) ) { break ; } } } } 
public void METHOD_1 ( ) throws java.lang.Exception { int c = TYPE_1 . METHOD_2 ( ) ; int s = TYPE_1 . METHOD_3 ( c ) ; try { TYPE_1 . METHOD_4 ( s ) ; fail ( ) ; } catch ( TYPE_2 expected ) { } TYPE_1 . METHOD_5 ( s ) ; TYPE_1 . METHOD_6 ( c ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { METHOD_2 ( ) ; synchronized ( VAR_3 ) { ( VAR_4 ) ++ ; VAR_3 . METHOD_3 ( new TYPE_2 ( VAR_2 , VAR_1 ) ) ; VAR_5 . METHOD_4 ( ) ; } int uid = TYPE_3 . METHOD_5 ( ) ; TYPE_4 VAR_6 = TYPE_3 . METHOD_6 ( ) ; try { VAR_7 . METHOD_7 ( uid ) ; } catch ( android.os.RemoteException e ) { } finally { TYPE_3 . METHOD_8 ( VAR_6 ) ; } } 
protected void METHOD_1 ( ) { VAR_1 = VAR_2 . METHOD_2 ( 0 , STRING_1 , STRING_2 , null , null ) ; VAR_1 . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_3 , 0 ) ; VAR_1 . METHOD_5 ( VAR_4 , STRING_3 , STRING_1 , STRING_2 ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_1 ) ) ) { return VAR_2 < TYPE_2 > of ( ) . METHOD_1 ( ) ; } java.util.List < TYPE_2 > VAR_3 = new java.util.ArrayList < TYPE_2 > ( ) ; METHOD_3 ( METHOD_4 ( VAR_1 ) . METHOD_5 ( ) , VAR_1 , VAR_3 ) ; return VAR_3 . METHOD_6 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 . i ( STRING_1 , STRING_2 ) ; TYPE_2 . METHOD_2 ( mContext ) ; METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 . METHOD_7 ( ) , VAR_1 . METHOD_8 ( ) , VAR_1 . METHOD_9 ( ) . METHOD_10 ( ) , VAR_1 . METHOD_11 ( ) ) ; TYPE_3 . METHOD_12 ( ) . METHOD_13 ( ) . METHOD_1 ( ) ; } 
private void METHOD_1 ( java.lang.String packageName , java.util.Set < java.lang.String > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 = packageName + CHAR_1 ; java.lang.String VAR_4 = VAR_3 . METHOD_2 ( CHAR_1 , CHAR_2 ) ; for ( java.lang.String entry : VAR_5 ) { java.io.File VAR_6 = new java.io.File ( entry ) ; if ( ( VAR_6 . METHOD_3 ( ) ) && ( ! ( VAR_6 . METHOD_4 ( ) ) ) ) { VAR_7 . METHOD_5 ( VAR_6 , VAR_4 , packageName , VAR_1 , VAR_2 ) ; } } } 
public TYPE_1 METHOD_1 ( ) { return new TYPE_2 < TYPE_3 , TYPE_3 , TYPE_4 > ( new TYPE_5 < TYPE_3 , TYPE_3 , TYPE_4 > ( ) { public TYPE_6 get ( TYPE_7 < TYPE_6 , TYPE_8 > entry ) { return entry . key ; } } , VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 expected , TYPE_1 VAR_1 ) { if ( ! ( expected . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( expected ) ) ; return new TYPE_4 ( VAR_1 . METHOD_4 ( ) , VAR_1 , VAR_2 ) ; } else { return VAR_1 ; } } 
public void METHOD_1 ( TYPE_1 event ) { if ( event . METHOD_2 ( ) . equals ( VAR_1 ) ) { VAR_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , METHOD_5 ( ) ) ; } else if ( event . METHOD_2 ( ) . equals ( VAR_3 ) ) { TYPE_2 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { switch ( VAR_1 ) { case VAR_3 : return new TYPE_4 ( this ) ; case VAR_4 : case VAR_5 : case VAR_6 : return new TYPE_5 ( this , VAR_1 , VAR_2 ) ; case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : return new TYPE_6 ( this , VAR_1 , VAR_2 ) ; case VAR_11 : return new TYPE_7 ( this ) ; default : throw new java.lang.IllegalArgumentException ( ( STRING_1 + VAR_1 ) ) ; } } 
public < TYPE_1 extends TYPE_2 > TYPE_1 METHOD_1 ( java.lang.Class < TYPE_1 > VAR_1 ) { synchronized ( VAR_2 ) { if ( ( VAR_3 ) == null ) { return null ; } } return ( ( TYPE_1 ) ( VAR_3 . get ( VAR_1 ) ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.String VAR_4 , int VAR_5 ) { java.lang.String key = VAR_2 + VAR_3 ; TYPE_2 VAR_6 = VAR_7 . get ( key ) ; if ( VAR_6 == null ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } return new TYPE_1 ( VAR_8 , VAR_3 , TYPE_3 . METHOD_2 ( VAR_1 , VAR_8 ) , ( VAR_5 - ( VAR_9 ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( 1 , 1 , VAR_2 , 1 ) ; byte [ ] VAR_3 = VAR_1 . METHOD_2 ( ) ; VAR_3 [ ( ( VAR_3 . length ) - 3 ) ] = CHAR_1 ; TYPE_2 VAR_4 = TYPE_3 . METHOD_3 ( VAR_3 ) ; assertEquals ( VAR_5 , VAR_6 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; } 
public void METHOD_1 ( com.android.jack.ir.ast.JMethod VAR_1 ) { synchronized ( this ) { if ( VAR_2 ) { return ; } TYPE_1 node ; try { node = METHOD_2 ( VAR_3 ) ; node . METHOD_3 ( VAR_1 ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( METHOD_4 ( VAR_1 ) , e ) ; } VAR_2 = true ; if ( VAR_4 ) { VAR_1 . METHOD_5 ( ) ; } } } 
public void METHOD_1 ( ) throws java.io.IOException { int VAR_1 = INT_1 * INT_1 ; byte [ ] VAR_2 = new byte [ INT_2 ] ; TYPE_1 in = new TYPE_1 ( new TYPE_2 ( METHOD_2 ( VAR_1 ) ) ) ; while ( ( in . METHOD_3 ( ) ) != null ) { while ( ( in . METHOD_4 ( VAR_2 , 0 , VAR_2 . length ) ) != ( - 1 ) ) { } } in . METHOD_5 ( ) ; } 
private void METHOD_1 ( ) { synchronized ( VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == 1 ) { TYPE_1 VAR_2 = new TYPE_1 ( STRING_1 ) ; VAR_2 . start ( ) ; VAR_3 = new TYPE_2 ( VAR_2 . METHOD_3 ( ) , VAR_4 , VAR_1 , this ) ; } } } 
public static void METHOD_1 ( java.io.File VAR_1 , TYPE_1 location ) throws TYPE_2 , TYPE_3 { assert VAR_1 != null ; if ( ! ( VAR_1 . METHOD_2 ( ) ) ) { throw new TYPE_2 ( location ) ; } if ( ! ( VAR_1 . METHOD_3 ( ) ) ) { throw new TYPE_3 ( ( ( TYPE_4 ) ( location ) ) ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.Object obj ) { if ( ( obj == null ) || ( obj instanceof TYPE_2 ) ) { return ( ( TYPE_1 ) ( obj ) ) ; } if ( obj instanceof TYPE_3 ) { return new TYPE_1 ( ( ( TYPE_3 ) ( obj ) ) ) ; } throw new java.lang.IllegalArgumentException ( ( STRING_1 + ( obj . METHOD_2 ( ) . getName ( ) ) ) ) ; } 
void METHOD_1 ( TYPE_1 [ ] VAR_1 , boolean VAR_2 ) { int VAR_3 = VAR_1 . length ; for ( TYPE_2 < TYPE_3 , TYPE_4 > e = VAR_4 ; e != ( VAR_5 ) ; e = VAR_6 ) { if ( VAR_2 ) VAR_7 = ( ( e . key ) == null ) ? 0 : java.util.HashMap . METHOD_2 ( e . key ) ; int index = METHOD_3 ( VAR_7 , VAR_3 ) ; VAR_8 = VAR_1 [ index ] ; VAR_1 [ index ] = e ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) . when ( VAR_2 ) . METHOD_3 ( org.mockito.Matchers . METHOD_4 ( VAR_3 class ) ) ; VAR_4 . METHOD_5 ( ) ; VAR_5 . METHOD_6 ( VAR_6 , VAR_7 ) ; TYPE_2 < TYPE_3 > VAR_8 = TYPE_2 . METHOD_7 ( VAR_3 class ) ; org.mockito.Mockito.verify ( VAR_2 , TYPE_1 . METHOD_8 ( VAR_6 ) ) . METHOD_3 ( VAR_8 . METHOD_9 ( ) ) ; TYPE_4 . assertEquals ( VAR_9 , VAR_8 . METHOD_10 ( ) . METHOD_11 ( ) ) ; } 
public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( java.util.Map < ? extends TYPE_2 , ? extends TYPE_3 > VAR_1 ) { VAR_2 . METHOD_2 ( ( ( VAR_2 . size ( ) ) + ( VAR_1 . size ( ) ) ) ) ; for ( TYPE_4 < ? extends TYPE_2 , ? extends TYPE_3 > entry : VAR_1 . METHOD_3 ( ) ) { METHOD_4 ( entry . METHOD_5 ( ) , entry . METHOD_6 ( ) ) ; } return this ; } 
public static TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = TYPE_3 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_1 . METHOD_3 ( ) ; if ( VAR_2 == null ) { TYPE_4 [ ] VAR_3 = VAR_1 . METHOD_4 ( ) ; if ( ( VAR_3 . length ) > 0 ) { VAR_2 = VAR_3 [ 0 ] ; } } if ( VAR_2 != null ) { TYPE_5 VAR_4 = VAR_2 . METHOD_5 ( ) ; if ( VAR_4 != null ) { return VAR_4 . METHOD_1 ( ) ; } } return null ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int value ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( device , value ) ; } 
public TYPE_1 METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 ) ; } else { VAR_2 . METHOD_2 ( VAR_4 ) ; } return this ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( e ) ; } } 
boolean METHOD_1 ( long VAR_1 ) { if ( VAR_2 ) { return false ; } if ( ( VAR_3 ) <= 0 ) { return false ; } if ( ( ( VAR_4 . size ( ) ) > 0 ) && ( ( VAR_5 ) > VAR_1 ) ) { return false ; } long VAR_6 = VAR_1 - ( VAR_3 ) ; return VAR_6 <= ( METHOD_2 ( VAR_1 ) ) ; } 
protected com.android.jack.ir.ast.JMethod METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { for ( com.android.jack.ir.ast.JMethod m : VAR_1 . METHOD_2 ( ) ) { if ( ( m . METHOD_3 ( ) . equals ( VAR_2 ) ) && ( m . METHOD_4 ( ) . equals ( VAR_3 ) ) ) { return m ; } } return null ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( METHOD_2 ( ) ) ) { TYPE_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; return ; } METHOD_4 ( 0 ) ; METHOD_5 ( VAR_2 , VAR_3 ) ; final TYPE_2 VAR_4 = METHOD_6 ( VAR_2 , VAR_3 ) ; METHOD_4 ( 1 ) ; final TYPE_2 VAR_5 = METHOD_6 ( VAR_2 , VAR_3 ) ; TYPE_3 . METHOD_7 ( VAR_4 , VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) { VAR_4 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_5 ) ) ) == 1 ; VAR_6 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_7 ) ) ) == 1 ; VAR_8 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_9 ) ) ) == 1 ; VAR_10 = ( java.lang.Integer.parseInt ( VAR_3 . METHOD_2 ( VAR_11 ) ) ) == 1 ; } 
private static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.String name , java.lang.String VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( VAR_1 , VAR_2 , name , TYPE_3 . on ( CHAR_1 ) . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) , VAR_4 ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 , int index ) { if ( ! ( METHOD_2 ( ) ) ) { throw new TYPE_2 ( STRING_1 ) ; } int VAR_2 = size ( ) ; for ( int i = 0 ; i < VAR_2 ; i ++ ) { TYPE_1 VAR_3 = ( ( TYPE_1 ) ( METHOD_3 ( i ) ) ) ; if ( ( VAR_3 != null ) && ( VAR_3 . METHOD_4 ( VAR_1 , index ) ) ) { return VAR_3 ; } } return null ; } 
public void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String msg = STRING_2 + STRING_3 ; super . METHOD_1 ( ) ; TYPE_2 . METHOD_3 ( msg , VAR_1 ) ; throw new TYPE_3 ( msg ) ; } METHOD_4 ( new TYPE_4 ( VAR_2 , METHOD_5 ( ) ) ) ; super . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; int VAR_1 = 5 ; METHOD_3 ( VAR_1 , false , false ) ; TYPE_1 . when ( VAR_2 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( ) ) ) . thenReturn ( false ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_4 = VAR_1 ; VAR_3 . METHOD_6 ( ) . METHOD_7 ( STRING_1 ) ; assertFalse ( VAR_5 . METHOD_8 ( VAR_3 ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.util.List < TYPE_3 > VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = VAR_3 . METHOD_2 ( VAR_2 ) . METHOD_3 ( ) ; int VAR_5 = VAR_1 . METHOD_4 ( VAR_3 ) ; int VAR_6 = VAR_1 . METHOD_5 ( VAR_3 ) ; return TYPE_6 . METHOD_6 ( VAR_4 , VAR_5 , VAR_6 ) ; } 
private int METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.lang.Exception { TYPE_1 . when ( VAR_4 . METHOD_2 ( org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_3 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_4 ( ) , org.mockito.Matchers . METHOD_3 ( ) ) ) . thenReturn ( VAR_3 ) ; TYPE_2 VAR_5 = VAR_6 . METHOD_5 ( VAR_1 , TYPE_3 . METHOD_6 ( VAR_2 ) . METHOD_7 ( ) , VAR_7 , new TYPE_4 ( ) ) ; return VAR_8 ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 service = METHOD_2 ( ) ; if ( service != null ) { try { return service . METHOD_1 ( VAR_1 ) ; } catch ( android.os.RemoteException e ) { android.util.Log.e ( VAR_2 . TAG , STRING_1 , e ) ; } } return false ; } 
void METHOD_1 ( java.lang.String uri , java.lang.String VAR_1 , java.lang.String VAR_2 , int VAR_3 , int VAR_4 ) throws TYPE_1 { if ( ( ( VAR_5 ) ++ ) > 0 ) { super . METHOD_1 ( uri , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 callback ) { if ( callback == null ) { android.util.Log.w ( VAR_1 . TAG , STRING_1 ) ; return null ; } android.os.Message msg = VAR_2 . METHOD_2 ( VAR_3 ) ; msg.obj = callback ; VAR_2 . METHOD_3 ( msg ) ; synchronized ( VAR_4 ) { return VAR_5 ; } } 
protected boolean METHOD_1 ( ) { VAR_1 = null ; if ( VAR_2 ) { METHOD_2 ( ) ; VAR_2 = false ; } if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) ; } if ( ( VAR_4 ) != null ) { VAR_4 . METHOD_3 ( ) ; } if ( ( VAR_5 ) != null ) { VAR_5 . METHOD_3 ( ) ; } return true ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , TYPE_2 VAR_3 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_3 . METHOD_3 ( VAR_3 ) ; return ; } try { TYPE_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , mContext . METHOD_5 ( ) , VAR_3 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; for ( int i = 0 ; i < ( VAR_3 ) ; ++ i ) { assertEquals ( new TYPE_2 ( i ) , ( ( TYPE_2 ) ( VAR_1 . METHOD_3 ( ) ) ) ) ; } METHOD_4 ( VAR_1 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; assertNotNull ( VAR_1 ) ; int VAR_2 = 7 ; VAR_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_3 ) , VAR_2 ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( org.mockito.Matchers.eq ( VAR_5 ) , org.mockito.Matchers.eq ( VAR_2 ) , org.mockito.Matchers.eq ( VAR_3 ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final short VAR_1 = INT_1 ; android.os.Bundle args = new android.os.Bundle ( ) ; args . METHOD_2 ( STRING_1 , VAR_2 ) ; args . METHOD_2 ( STRING_2 , 0 ) ; args . METHOD_2 ( STRING_3 , VAR_3 ) ; TYPE_2 . METHOD_3 ( VAR_1 , TYPE_3 . METHOD_4 ( args ) . toString ( ) ) ; org.mockito.Mockito.verify ( VAR_4 ) . METHOD_5 ( VAR_1 ) ; TYPE_4 . METHOD_6 ( VAR_4 ) ; } 
public void run ( com.android.jack.ir.ast.JMethod method ) throws java.lang.Exception { if ( ( ( ( method . METHOD_1 ( ) . METHOD_2 ( ) ) || ( method . METHOD_3 ( ) ) ) || ( method . METHOD_4 ( ) ) ) || ( ! ( VAR_1 . METHOD_5 ( this . METHOD_6 ( ) , method ) ) ) ) { return ; } TYPE_1 VAR_2 = new TYPE_1 ( method ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 , method ) ; VAR_3 . METHOD_5 ( method ) ; VAR_2 . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_2 out = METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = new TYPE_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( STRING_2 ) ; out . METHOD_5 ( VAR_2 ) ; out . METHOD_6 ( ) ; TYPE_4 VAR_3 = new TYPE_4 ( VAR_1 ) ; assertEquals ( null , VAR_3 . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_1 , VAR_4 ) ; TYPE_1 VAR_5 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_5 ) ; TYPE_2 . assertFalse ( VAR_5 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_5 . METHOD_6 ( ) . size ( ) ) ; METHOD_7 ( VAR_3 , VAR_5 , VAR_1 , true , VAR_4 ) ; } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 request ) { int VAR_2 = ( VAR_1 ) ? + 1 : - 1 ; switch ( request . type ) { case VAR_3 : case VAR_4 : VAR_5 += VAR_2 ; break ; case VAR_6 : VAR_5 += VAR_2 ; VAR_7 += VAR_2 ; break ; case VAR_8 : break ; case VAR_9 : default : android.util.Log . METHOD_2 ( VAR_10 . TAG , ( STRING_1 + ( request . type ) ) ) ; break ; } } 
public static void run ( ) { TYPE_1 . METHOD_1 ( VAR_1 class ) ; java.lang.System.out.println ( STRING_1 ) ; if ( TYPE_2 . METHOD_2 ( ) ) { java.lang.System.out.println ( STRING_2 ) ; } if ( TYPE_2 . METHOD_3 ( ) ) { java.lang.System.out.println ( STRING_3 ) ; } TYPE_2 . set ( 0 ) ; TYPE_2 . set ( 1 ) ; TYPE_2 . set ( 2 ) ; TYPE_2 . set ( 4 ) ; TYPE_2 . set ( 8 ) ; } 
public TYPE_1 METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( ( ( VAR_2 ) == null ) || ( ! ( VAR_3 . METHOD_2 ( ) ) ) ) { METHOD_3 ( ) ; try { TYPE_3 VAR_4 = VAR_3 . METHOD_4 ( VAR_1 ) ; if ( VAR_4 == null ) { throw new TYPE_2 ( STRING_1 , VAR_5 ) ; } VAR_2 = new TYPE_4 ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { throw new TYPE_2 ( STRING_1 , e , VAR_6 ) ; } } return VAR_2 ; } 
private static void METHOD_1 ( java.lang.Object expected , java.lang.String VAR_1 ) { java.lang.String source = ( ( ( ( ( ( ( STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ) + VAR_1 ) + STRING_6 ) + STRING_7 ) + STRING_8 ) + STRING_9 ) + STRING_10 ) + STRING_11 ; TYPE_1 . METHOD_2 ( expected , source , STRING_12 ) ; } 
static void METHOD_1 ( ) { TYPE_1 VAR_1 ; VAR_1 = new TYPE_1 ( STRING_1 , STRING_2 ) ; java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) ; java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; VAR_1 = new TYPE_1 ( STRING_5 , STRING_6 ) ; java.lang.System.out.println ( ( STRING_3 + VAR_1 ) ) ; try { java.lang.System.out.println ( ( STRING_4 + ( VAR_1 . METHOD_2 ( ) ) ) ) ; } catch ( TYPE_2 VAR_2 ) { VAR_3 . println ( STRING_7 ) ; } } 
public boolean METHOD_1 ( ) throws TYPE_1 { if ( ( TYPE_2 . METHOD_2 ( ) ) <= INT_1 ) { return device . METHOD_3 ( new TYPE_3 ( ) . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; } else { return device . METHOD_3 ( new TYPE_3 ( ) . text ( ( STRING_1 + VAR_1 ) ) ) . METHOD_5 ( ) ; } } 
public java.lang.Class METHOD_1 ( java.lang.String name , java.util.List < java.lang.Throwable > VAR_1 ) { for ( TYPE_1 element : VAR_2 ) { TYPE_2 VAR_3 = VAR_4 ; if ( VAR_3 != null ) { java.lang.Class VAR_5 = VAR_3 . METHOD_2 ( name , VAR_6 , VAR_1 ) ; if ( VAR_5 != null ) { return VAR_5 ; } } } if ( ( VAR_7 ) != null ) { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_7 ) ) ; } return null ; } 
private TYPE_1 METHOD_1 ( char VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = VAR_4 ; if ( VAR_2 ) { if ( VAR_5 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_5 ; } else if ( VAR_6 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_6 ; } } else { if ( VAR_7 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_7 ; } else if ( VAR_8 . METHOD_2 ( VAR_1 ) ) { VAR_3 = VAR_8 ; } } return VAR_3 ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , float [ ] VAR_3 ) { assertEquals ( VAR_2 , VAR_1 . METHOD_2 ( VAR_4 ) ) ; float [ ] VAR_5 = ( ( float [ ] ) ( VAR_1 . METHOD_2 ( VAR_6 ) ) ) ; for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { assertEquals ( VAR_3 [ i ] , VAR_5 [ i ] , FLOAT_1 ) ; } } 
public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_1 . METHOD_2 ( STRING_1 , TYPE_2 . METHOD_3 ( ) , VAR_2 ) ) ) ; if ( VAR_1 == null ) { errln ( STRING_2 ) ; } } catch ( TYPE_3 ex ) { METHOD_4 ( ( STRING_3 + ( ex . getMessage ( ) ) ) ) ; } } 
private void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( STRING_1 , STRING_2 ) , STRING_3 ) ) && ( ! ( TYPE_3 . METHOD_4 ( STRING_4 ) ) ) ) { METHOD_5 ( STRING_5 ) ; } else if ( TYPE_1 . METHOD_6 ( TYPE_2 . METHOD_3 ( STRING_6 , STRING_2 ) , STRING_7 ) ) { METHOD_5 ( STRING_8 ) ; } } 
synchronized void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { TYPE_4 VAR_4 = VAR_1 . METHOD_2 ( ) ; java.util.List < TYPE_5 > VAR_5 = METHOD_3 ( VAR_1 ) ; TYPE_5 VAR_6 = new TYPE_5 ( VAR_2 , new TYPE_6 ( VAR_4 . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 . METHOD_6 ( ) ) , VAR_1 . METHOD_7 ( ) , null , VAR_3 ) ; VAR_5 . METHOD_8 ( VAR_6 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 service = METHOD_2 ( ) ; if ( service == null ) return null ; TYPE_1 VAR_2 = service . METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { METHOD_3 ( STRING_1 ) ; return null ; } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( VAR_2 , STRING_1 ) ) ) { throw new TYPE_2 ( STRING_2 ) ; } TYPE_3 VAR_3 ; synchronized ( VAR_4 ) { VAR_3 = METHOD_3 ( VAR_1 ) ; if ( VAR_3 == null ) { android.util.Log.w ( TYPE_4 . TAG , ( STRING_3 + VAR_1 ) ) ; return ; } VAR_5 = true ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 [ ] VAR_2 = VAR_1 . METHOD_2 ( ) ; VAR_3 = new java.lang.String [ VAR_2 . length ] ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { VAR_3 [ i ] = VAR_2 [ i ] . getName ( ) ; } VAR_4 = METHOD_3 ( VAR_1 ) ; } 
public java.lang.String METHOD_1 ( int VAR_1 ) { if ( VAR_1 < 0 ) { throw new TYPE_1 ( this , VAR_1 ) ; } int VAR_2 = ( count ) - VAR_1 ; if ( VAR_2 < 0 ) { throw new TYPE_1 ( this , VAR_1 ) ; } return VAR_1 == 0 ? this : METHOD_2 ( VAR_1 , VAR_2 ) ; } 
void METHOD_1 ( ) { if ( ( VAR_1 ) || ( VAR_2 ) ) { if ( ! ( VAR_3 . METHOD_2 ( ) ) ) { VAR_3 . METHOD_3 ( ) ; if ( VAR_4 . METHOD_2 ( ) ) { VAR_4 . METHOD_4 ( ) ; VAR_5 . METHOD_5 ( VAR_6 ) ; } } if ( ( VAR_7 ) == null ) { if ( VAR_8 ) android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , STRING_1 ) ; if ( VAR_9 ) android.util.Log.v ( com.android.server.am.ActivityManagerService.TAG , STRING_2 ) ; METHOD_6 ( false , true ) ; } } } 
protected java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( java.lang.String packageName , java.util.Map < java.lang.String , java.lang.Object > args ) { java.util.List < java.lang.String > VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 , packageName ) ; java.lang.String result = METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 ) ) ; return TYPE_2 . METHOD_5 ( result ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 msg ) { TYPE_3 VAR_1 = TYPE_3 . METHOD_2 ( msg . METHOD_3 ( 0 ) . METHOD_4 ( 0 ) ) ; java.lang.Integer VAR_2 = java.lang.Integer . METHOD_2 ( ( ( VAR_1 . value ) - ( VAR_3 . value ) ) ) ; TYPE_1 VAR_4 = new TYPE_4 ( TYPE_5 . METHOD_5 ( msg . METHOD_6 ( ) , VAR_5 , VAR_6 ) , VAR_2 ) ; return TYPE_6 . METHOD_7 ( VAR_4 ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( obj == null ) || ( ! ( obj instanceof TYPE_1 ) ) ) { return false ; } TYPE_1 VAR_1 = ( ( TYPE_1 ) ( obj ) ) ; if ( ( this ) == VAR_1 ) { return true ; } return ( VAR_2 . equals ( VAR_1 . METHOD_1 ( ) ) ) && ( VAR_3 . equals ( VAR_1 . METHOD_2 ( ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( true , INT_1 ) ; assertEquals ( STRING_1 , INT_1 , VAR_1 . METHOD_5 ( ) ) ; VAR_1 . METHOD_4 ( false , 0 ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( null == ( VAR_2 ) ) return true ; if ( null == ( VAR_3 ) ) return false ; for ( TYPE_2 VAR_4 : VAR_3 ) { if ( VAR_4 . METHOD_2 ( VAR_5 ) ) return true ; if ( ! ( VAR_1 . METHOD_3 ( VAR_4 ) ) ) { return false ; } } return true ; } 
public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_2 ( STRING_1 ) ; } int VAR_2 = this . METHOD_2 ( ) ; int VAR_3 = this . METHOD_3 ( ) ; assert VAR_2 <= VAR_3 ; int VAR_4 = ( VAR_2 <= VAR_3 ) ? VAR_3 - VAR_2 : 0 ; int size = VAR_4 > > 2 ; return ( ( TYPE_1 ) ( new TYPE_3 ( this , ( - 1 ) , 0 , size , size , VAR_2 , METHOD_4 ( ) ) ) ) ; } 
private void METHOD_1 ( int VAR_1 , boolean VAR_2 ) throws java.io.IOException , TYPE_1 { final TYPE_2 res = VAR_3 ; final int VAR_4 = res . METHOD_2 ( ) . VAR_4 ; try { METHOD_3 ( res , VAR_1 , VAR_2 ) ; } finally { TYPE_3 . METHOD_4 ( res , VAR_4 ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 < TYPE_4 > > VAR_1 , long key ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_4 > VAR_3 = VAR_1 . get ( key ) ; if ( VAR_3 != null ) { TYPE_4 entry = VAR_3 . get ( ) ; if ( entry != null ) { return entry . METHOD_2 ( ) ; } else { VAR_1 . METHOD_3 ( key ) ; } } } return null ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) { public void METHOD_4 ( TYPE_2 VAR_2 , java.lang.Object arg ) { METHOD_3 ( ) ; } } ; VAR_3 . METHOD_5 ( VAR_1 ) ; } } 
private void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( VAR_2 . METHOD_2 ( ) , VAR_3 , new TYPE_2 ( ) , VAR_4 , new TYPE_3 ( ) , VAR_5 . METHOD_3 ( ) ) ; if ( ( VAR_6 ) >= ( VAR_7 ) ) { TYPE_1 . METHOD_4 ( ) ; } } 
public void METHOD_1 ( TYPE_1 res ) { int VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; int VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_4 ( ) ; VAR_4 = new TYPE_2 ( mRS , res , VAR_5 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; VAR_4 . METHOD_7 ( INT_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; assertEquals ( 3 , VAR_1 . METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { if ( ! ( VAR_1 ) ) { return ; } if ( METHOD_2 ( 1 ) ) { int VAR_2 = METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; } int VAR_3 = METHOD_5 ( VAR_4 , VAR_5 , VAR_6 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) ; METHOD_4 ( VAR_3 , VAR_5 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_2 , VAR_9 ) ; METHOD_7 ( VAR_3 , VAR_5 ) ; METHOD_6 ( VAR_7 , VAR_8 , STRING_1 , VAR_9 ) ; } 
public void METHOD_1 ( int session , int s , int c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { TYPE_4 . METHOD_2 ( VAR_2 [ 0 ] , session ) ; super . METHOD_1 ( VAR_3 , s , VAR_3 , VAR_1 , fd , callback ) ; } 
public void METHOD_1 ( TYPE_1 context ) throws java.lang.Exception { super . METHOD_1 ( context ) ; METHOD_2 ( ) ; TYPE_2 . METHOD_1 ( ) ; TYPE_3 . METHOD_3 ( ) ; VAR_1 . METHOD_3 ( ) ; synchronized ( VAR_2 class ) { VAR_3 = null ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { org.mockito.Mockito.verify ( VAR_3 , TYPE_1 . METHOD_2 ( VAR_2 ) ) . METHOD_3 ( TYPE_1 . METHOD_4 ( new TYPE_2 ( VAR_1 ) ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_3 response = VAR_4 . METHOD_6 ( ) ; assertEquals ( VAR_5 , response . status ) ; assertEquals ( VAR_1 , VAR_6 . packageName ) ; } 
public static void METHOD_1 ( java.io.File [ ] VAR_1 , java.io.File [ ] VAR_2 , java.io.File VAR_3 , boolean VAR_4 , boolean VAR_5 , float VAR_6 ) throws java.lang.Exception { TYPE_1 . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , ( ( TYPE_2 ) ( null ) ) , ( ( TYPE_3 [ ] ) ( null ) ) ) ; } 
public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_2 ) ) ) { return ; } TYPE_1 VAR_3 = new TYPE_1 ( mContext ) ; for ( TYPE_2 test : VAR_4 ) { assertEquals ( ( ( ( STRING_1 + ( VAR_5 ) ) + STRING_2 ) + ( test . address ) ) , VAR_6 , ( METHOD_3 ( test . address ) ? VAR_7 : VAR_3 . METHOD_4 ( test . address , VAR_5 ) ) ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 device ) { try { java.lang.String VAR_1 = device . METHOD_2 ( ) ; TYPE_3 VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_2 != null ) { TYPE_1 VAR_4 = new TYPE_1 ( device ) ; boolean result = VAR_4 . METHOD_3 ( VAR_1 , VAR_2 ) ; VAR_2 . METHOD_4 ( ) ; if ( result ) { return VAR_4 ; } } } catch ( java.lang.Exception e ) { android.util.Log.e ( VAR_5 . TAG , STRING_1 , e ) ; } return null ; } 
private static byte [ ] METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 ) { byte [ ] VAR_2 = new byte [ VAR_1 . size ( ) ] ; int i = 0 ; for ( TYPE_1 b : VAR_1 ) { VAR_2 [ ( i ++ ) ] = b ; } return VAR_2 ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 , java.util.Set < java.lang.String > VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_1 ) { VAR_4 = ( VAR_5 ) ++ ; if ( VAR_6 ) { android.util.Log.v ( VAR_7 . TAG , ( STRING_1 + ( VAR_3 . METHOD_2 ( ) ) ) ) ; } METHOD_3 ( VAR_3 ) ; VAR_8 . METHOD_4 ( VAR_3 ) ; } for ( java.lang.String VAR_9 : VAR_2 ) { VAR_10 . METHOD_5 ( VAR_9 ) ; } } 
public void run ( ) { TYPE_1 VAR_1 = ( METHOD_1 ( ) ) ? VAR_2 . METHOD_2 ( false ) : METHOD_3 ( ) ; if ( android.util.Log . METHOD_4 ( VAR_3 , VAR_4 ) ) { TYPE_2 . log ( ( STRING_1 + VAR_5 ) ) ; TYPE_2 . log ( ( STRING_2 + VAR_1 ) ) ; } METHOD_5 ( VAR_1 ) ; this . VAR_6 . METHOD_6 ( ) ; if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_7 ( VAR_1 ) ; } } 
public static boolean METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( context ) ) { return VAR_2 . METHOD_4 ( VAR_3 ) ; } else { return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , false ) ; } } 
static java.lang.String METHOD_1 ( TYPE_1 method , TYPE_1 call ) { assert ( call instanceof TYPE_2 ) || ( call instanceof TYPE_3 ) ; TYPE_4 VAR_1 = new TYPE_4 ( null , method , call , 0 ) ; method . METHOD_2 ( VAR_1 ) ; java.lang.String name = VAR_1 . METHOD_3 ( ) ; return name ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 call , TYPE_3 callback , boolean VAR_2 ) { org.mockito.Mockito.verify ( callback ) . METHOD_2 ( call ) ; org.mockito.Mockito.verify ( call . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ( VAR_2 ? 1 : 0 ) ) ) . METHOD_5 ( ) ; assertEquals ( call . METHOD_3 ( ) , VAR_1 . METHOD_6 ( ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , java.lang.Class < ? > VAR_4 , TYPE_3 < java.lang.String > VAR_5 , TYPE_4 VAR_6 , int VAR_7 , boolean VAR_8 ) { if ( new TYPE_5 ( VAR_4 ) . METHOD_2 ( true , void . class , STRING_1 , java.lang.String [ ] . class ) ) { return new TYPE_6 ( VAR_1 , VAR_4 ) ; } else { return null ; } } 
public int METHOD_1 ( ) { if ( METHOD_2 ( ) ) { int VAR_1 = METHOD_3 ( ) . METHOD_1 ( ) ; if ( ( VAR_1 & ( VAR_2 ) ) != 0 ) { VAR_1 &= ~ ( ( VAR_2 ) | ( VAR_3 ) ) ; } return ( ( VAR_4 ) | ( VAR_5 ) ) | VAR_1 ; } int VAR_6 = INT_1 ; int VAR_7 = TYPE_1 . METHOD_4 ( this , ( ( VAR_8 ) & VAR_6 ) ) ; return VAR_7 & VAR_6 ; } 
private static void METHOD_1 ( TYPE_1 context , java.util.List < TYPE_2 > VAR_1 , TYPE_3 VAR_2 ) { boolean VAR_3 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ; boolean VAR_4 = ! ( TYPE_4 . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ) ; VAR_1 . METHOD_6 ( new TYPE_5 ( context , TYPE_6 . METHOD_7 ( context , VAR_2 . METHOD_8 ( ) , TYPE_7 . METHOD_9 ( VAR_2 ) , VAR_3 , VAR_4 ) , VAR_5 , VAR_6 ) ) ; } 
public void METHOD_1 ( final boolean VAR_1 , final int VAR_2 , final TYPE_1 VAR_3 ) { if ( METHOD_2 ( ) ) { VAR_4 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } } ) ; return ; } VAR_5 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_5 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; java.io.File VAR_3 = java.io.File . METHOD_2 ( STRING_6 , STRING_7 ) ; TYPE_2 VAR_4 = new TYPE_3 ( new TYPE_4 ( VAR_3 ) ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; VAR_4 . METHOD_4 ( ) ; TYPE_5 VAR_5 = VAR_2 . METHOD_5 ( new TYPE_6 ( VAR_3 ) ) ; assertNotNull ( VAR_5 ) ; VAR_3 . METHOD_6 ( ) ; } 
private synchronized boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , TYPE_1 VAR_1 ) { if ( VAR_2 ) android.util.Log.d ( TAG , ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( VAR_3 ) ) ) ; if ( ( ( VAR_3 ) == false ) && ( ( VAR_4 . METHOD_1 ( device , VAR_1 ) ) == true ) ) { VAR_3 = true ; return true ; } return false ; } 
public void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.lang.Throwable VAR_3 ) { java.lang.String VAR_4 = METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . log ( VAR_3 , STRING_1 , VAR_5 , VAR_4 ) ; if ( VAR_3 != null ) { VAR_6 = true ; } METHOD_3 ( VAR_4 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) throws java.io.IOException { java.lang.String VAR_3 = VAR_2 . METHOD_2 ( ) ; while ( VAR_3 != null ) { java.lang.String VAR_4 = VAR_1 . METHOD_2 ( ) ; TYPE_2 . assertEquals ( VAR_4 , VAR_3 ) ; VAR_3 = VAR_2 . METHOD_2 ( ) ; } TYPE_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_1 ) ) ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( INT_2 ) ) ; TYPE_1 result = TYPE_3 . METHOD_5 ( VAR_1 , INT_3 , STRING_1 ) ; METHOD_6 ( result ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) { VAR_1 . METHOD_2 ( true , true , true ) ; } else if ( VAR_3 ) { VAR_1 . METHOD_2 ( false , false , true ) ; VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ( ! ( VAR_4 ) ) ) ; } else { VAR_1 . METHOD_2 ( true , ( ! ( VAR_4 ) ) , true ) ; } } 
public void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = VAR_2 . METHOD_2 ( ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertFalse ( VAR_4 . METHOD_5 ( ) ) ; org.junit.Assert.assertEquals ( VAR_1 . size ( ) , VAR_4 . METHOD_6 ( ) . size ( ) ) ; METHOD_7 ( VAR_2 , VAR_4 , VAR_1 , false , VAR_3 ) ; } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 < TYPE_6 > VAR_4 = TYPE_5 . of ( VAR_1 , VAR_2 , VAR_3 ) ; return new TYPE_1 ( ) { public TYPE_2 METHOD_2 ( ) { return VAR_1 ; } public TYPE_5 < TYPE_6 > METHOD_3 ( ) { return VAR_4 ; } public TYPE_5 < TYPE_6 > METHOD_4 ( ) { return VAR_4 . METHOD_5 ( 1 , VAR_4 . size ( ) ) ; } } ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_2 ) ; if ( VAR_4 . METHOD_3 ( ) ) { TYPE_4 VAR_5 = new TYPE_4 ( ) ; try { VAR_5 . METHOD_4 ( VAR_4 ) ; VAR_5 . METHOD_5 ( VAR_4 , TYPE_5 . METHOD_6 ( ) ) ; return VAR_5 ; } catch ( java.io.IOException e ) { } } return null ; } 
public void METHOD_1 ( final boolean VAR_1 ) { if ( METHOD_2 ( ) ) { VAR_2 . METHOD_3 ( new java.lang.Runnable ( ) { public void run ( ) { METHOD_1 ( VAR_1 ) ; } } ) ; return ; } VAR_3 . METHOD_4 ( ) . METHOD_1 ( VAR_1 ) ; } 
public boolean METHOD_1 ( android.bluetooth.BluetoothDevice device , int VAR_1 ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , TYPE_1 . METHOD_4 ( device . METHOD_5 ( ) ) , VAR_1 ) ; if ( VAR_2 ) { android.util.Log.v ( VAR_3 . TAG , ( ( ( STRING_1 + device ) + STRING_2 ) + VAR_1 ) ) ; } return true ; } 
public static int METHOD_1 ( TYPE_1 context ) { TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( context ) ) { return VAR_2 . METHOD_4 ( VAR_3 , VAR_4 ) ; } else { return TYPE_3 . METHOD_5 ( context ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } } 
static java.lang.String METHOD_1 ( TYPE_1 method , TYPE_1 call , int VAR_1 ) { assert ( call instanceof TYPE_2 ) || ( call instanceof TYPE_3 ) ; TYPE_4 VAR_2 = new TYPE_4 ( method , call , VAR_1 ) ; method . METHOD_2 ( VAR_2 ) ; java.lang.String name = VAR_2 . METHOD_3 ( ) ; return name ; } 
static void METHOD_1 ( int VAR_1 , float x , float y , float VAR_2 , int VAR_3 ) { TYPE_1 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_2 . Float ( ( x - VAR_2 ) , ( y - VAR_2 ) , ( VAR_2 * 2 ) , ( VAR_2 * 2 ) ) , false ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) { TYPE_1 config = new TYPE_1 ( ) ; VAR_1 = in . METHOD_2 ( ) ; VAR_2 = ( ( TYPE_3 ) ( in . METHOD_3 ( null ) ) ) ; VAR_3 = in . METHOD_4 ( ) ; VAR_4 = TYPE_4 . METHOD_5 ( in . METHOD_2 ( ) ) ; return config ; } 
private TYPE_1 METHOD_1 ( java.lang.String id , java.lang.String name , TYPE_2 type , java.lang.String VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( id ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( id , name , type , VAR_1 ) ; VAR_3 . METHOD_2 ( id , VAR_2 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_5 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) , org.mockito.Matchers . METHOD_7 ( ) ) ; org.mockito.Mockito.verify ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) . METHOD_8 ( org.mockito.Matchers . METHOD_6 ( VAR_5 class ) ) ; assertEquals ( VAR_2 , false ) ; } 
private org.eclipse.jgit.lib.Repository METHOD_1 ( final TYPE_1 . NameKey name ) { try { return VAR_1 . METHOD_1 ( name . get ( ) ) ; } catch ( TYPE_2 err ) { VAR_2 . METHOD_2 ( ( STRING_1 + ( name . get ( ) ) ) , err ) ; return null ; } } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { return new TYPE_3 ( VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { VAR_1 . METHOD_2 ( ) ; TYPE_4 VAR_2 = VAR_3 . METHOD_3 ( ) ; TYPE_5 VAR_4 = ( ( TYPE_5 ) ( VAR_5 ) ) ; TYPE_6 . Change change = TYPE_7 . get ( VAR_1 ) ; TYPE_8 . NameKey name = change . getProject ( ) ; if ( ! ( VAR_2 . METHOD_4 ( TYPE_9 . create ( name . get ( ) ) , VAR_6 ) ) ) { return VAR_1 . METHOD_5 ( ) ; } return VAR_7 ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey p ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( p ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { java.util.List < TYPE_1 > VAR_2 = new TYPE_4 < > ( ) ; try { for ( TYPE_5 VAR_3 : VAR_4 ) { VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( VAR_1 ) ) ; } } catch ( TYPE_3 e ) { VAR_2 . METHOD_2 ( e . METHOD_4 ( ) ) ; throw new TYPE_3 ( e . getMessage ( ) , VAR_2 ) ; } return VAR_2 ; } 
public java.lang.String METHOD_1 ( final com.google.gerrit.reviewdb.client.Project.NameKey project , final com.google.gerrit.reviewdb.client.PatchSet ps ) { TYPE_1 VAR_1 = new TYPE_1 ( type . getRevision ( ) ) ; final java.util.Map < java.lang.String , java.lang.String > p = new TYPE_2 < java.lang.String , java.lang.String > ( ) ; p . put ( STRING_1 , METHOD_2 ( project . get ( ) ) ) ; p . put ( STRING_2 , METHOD_2 ( ps . getRevision ( ) . get ( ) ) ) ; return ( VAR_2 ) + ( VAR_1 . METHOD_3 ( p ) ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 id ) throws TYPE_4 , java.io.IOException { TYPE_2 p = VAR_2 . get ( ) . METHOD_1 ( VAR_3 , id ) ; for ( TYPE_5 VAR_4 : p . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) { if ( VAR_1 . METHOD_5 ( ) . equals ( VAR_4 . getProject ( ) . METHOD_5 ( ) ) ) { return new TYPE_1 ( VAR_1 , p . METHOD_2 ( ) ) ; } } throw new TYPE_4 ( id ) ; } 
public < TYPE_1 > void put ( TYPE_2 < TYPE_1 > key , TYPE_1 value ) { TYPE_3 < TYPE_2 < TYPE_4 > , TYPE_4 > p = METHOD_1 ( ( value != null ) ) ; if ( ( p != null ) || ( value != null ) ) { TYPE_2 < TYPE_4 > VAR_1 = ( ( TYPE_2 < TYPE_4 > ) ( key ) ) ; if ( value != null ) { p . put ( VAR_1 , value ) ; } else { p . METHOD_2 ( VAR_1 ) ; } } } 
public void add ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { if ( ( VAR_2 ) == null ) { VAR_2 = TYPE_3 . METHOD_1 ( ) ; } VAR_2 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ; } VAR_3 . add ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . PatchSet patchSet ) { TYPE_1 p = new TYPE_1 ( ) ; p . revision = patchSet . getRevision ( ) . get ( ) ; VAR_1 = TYPE_3 . toString ( patchSet . METHOD_2 ( ) ) ; p . ref = patchSet . getRefName ( ) ; final TYPE_4 VAR_2 = VAR_3 . get ( patchSet . METHOD_3 ( ) ) ; VAR_4 = METHOD_4 ( VAR_2 . METHOD_5 ( ) ) ; return p ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 ) ; com.google.common.truth.Truth.assertThat ( TYPE_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( STRING_1 , STRING_2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_8 ( TYPE_4 . of ( STRING_3 , STRING_4 , STRING_5 , STRING_2 , STRING_6 , STRING_7 ) ) ; } 
protected void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } VAR_1 = null ; if ( ( db ) != null ) { try { db . close ( ) ; } catch ( TYPE_1 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } db = null ; } 
private < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 < TYPE_1 > VAR_1 ) { if ( VAR_2 ) { VAR_1 . METHOD_2 ( VAR_3 ) ; return TYPE_4 . METHOD_3 ( ) ; } TYPE_5 < TYPE_1 > VAR_4 = new TYPE_5 < TYPE_1 > ( VAR_1 ) ; VAR_5 . add ( VAR_4 ) ; VAR_6 . add ( VAR_4 ) ; return VAR_4 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( null ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( STRING_1 ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_1 ) ) . METHOD_3 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_2 ) ) . METHOD_2 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . equals ( VAR_3 ) ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; assertEquals ( query ( in ) , METHOD_3 ( in ) ) ; VAR_1 . METHOD_4 ( new TYPE_2 ( VAR_2 ) ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_5 ( ( out instanceof TYPE_3 ) ) ; assertEquals ( TYPE_4 . of ( query ( in . METHOD_6 ( 0 ) ) , in . METHOD_6 ( 1 ) ) , out . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; final TYPE_1 n = VAR_1 . METHOD_3 ( ) ; org.junit.Assert.assertEquals ( TYPE_2 . METHOD_4 ( ( ( TYPE_2 . METHOD_4 ( STRING_2 ) ) + STRING_3 ) ) , n . METHOD_5 ( ) ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) { java.util.List < java.lang.String > VAR_1 = commit . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . isEmpty ( ) ) || ( ( VAR_1 . size ( ) ) > 1 ) ) { return null ; } if ( VAR_1 . get ( 0 ) . isEmpty ( ) ) { return TYPE_1 . of ( ) ; } else { return TYPE_2 . METHOD_3 ( TYPE_3 . on ( CHAR_1 ) . METHOD_4 ( VAR_1 . get ( 0 ) ) ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 , java.util.Map < java.lang.String , java.util.Set < java.lang.String > > VAR_3 ) { for ( java.lang.String VAR_4 : METHOD_2 ( VAR_1 ) ) { java.util.Set < java.lang.String > VAR_5 = VAR_3 . METHOD_3 ( VAR_4 , ( VAR_6 ) - > TYPE_1 . METHOD_4 ( ) ) ; VAR_5 . add ( VAR_2 ) ; } } 
public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 . METHOD_2 ( change . getProject ( ) . equals ( project ) , ( STRING_1 + STRING_2 ) , project , changeId , change . getProject ( ) ) ; return new TYPE_1 ( args , change ) . METHOD_3 ( ) ; } 
protected void run ( ) throws TYPE_1 { try { METHOD_1 ( ) ; } catch ( TYPE_2 err ) { throw new TYPE_1 ( ( STRING_1 + ( err . getMessage ( ) ) ) ) ; } final TYPE_3 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) != null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; TYPE_1 n = VAR_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( new TYPE_3 ( STRING_2 , STRING_3 ) ) ) ; METHOD_5 ( VAR_1 , n ) ; assertEquals ( STRING_4 , n . METHOD_6 ( ) ) ; } 
public void run ( ) { int line = ( cm . METHOD_1 ( ) . METHOD_2 ( ) ) ? cm . METHOD_3 ( cm . METHOD_1 ( ) . METHOD_4 ( ) ) : 0 ; int res = java.util.Collections . METHOD_5 ( VAR_1 , new TYPE_1 ( cm . METHOD_6 ( ) , 0 , 0 , 0 , line , false ) , METHOD_7 ( ) ) ; METHOD_8 ( VAR_1 , VAR_2 , res , VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( org.eclipse.jgit.lib.ObjectId id ) throws java.lang.Exception { TYPE_2 r = VAR_1 . get ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( id . name ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; TYPE_1 result = METHOD_3 ( ) . METHOD_4 ( r . METHOD_5 ( ) , VAR_3 class ) ; r . METHOD_6 ( ) ; return result ; } 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final long VAR_2 = INT_2 ; final TYPE_1 p = new TYPE_1 ( VAR_1 ) ; final TYPE_2 c = new TYPE_2 ( p , VAR_2 ) ; METHOD_2 ( p , c . getParentKey ( ) ) ; METHOD_3 ( ( VAR_2 != ( c . METHOD_4 ( ) ) ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 p = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 ) ; final TYPE_3 < java.lang.String > n = TYPE_3 . not ( p ) ; assertEquals ( 1 , n . METHOD_3 ( ) ) ; METHOD_4 ( p , n . METHOD_5 ( 0 ) ) ; } 
private java.util.List < TYPE_1 > METHOD_1 ( final org.eclipse.jgit.revwalk.RevCommit [ ] VAR_1 , final org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , TYPE_2 { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ; for ( org.eclipse.jgit.revwalk.RevCommit VAR_3 : VAR_1 ) { walk . METHOD_2 ( VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 . getId ( ) . name ( ) ) ; java.lang.String msg = VAR_3 . METHOD_3 ( ) ; VAR_2 . add ( new TYPE_1 ( VAR_4 , msg ) ) ; } return VAR_2 ; } 
protected void METHOD_1 ( TYPE_1 result ) { VAR_1 = new TYPE_2 ( this , METHOD_2 ( ) , getRevision ( ) , METHOD_3 ( ) , result . METHOD_4 ( ) , METHOD_5 ( ) . METHOD_6 ( ) ) ; METHOD_7 ( result . METHOD_8 ( ) ) ; display ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_3 ( VAR_4 , VAR_2 , VAR_3 , STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_4 , VAR_2 , VAR_3 , STRING_2 ) ; TYPE_2 u = user ( VAR_4 ) ; METHOD_4 ( u ) ; METHOD_5 ( STRING_3 , u ) ; METHOD_5 ( STRING_4 , u ) ; METHOD_6 ( STRING_5 , u ) ; } 
protected void METHOD_1 ( ) { rpc ( VAR_1 class ) ; rpc ( VAR_2 class ) ; rpc ( VAR_3 class ) ; rpc ( VAR_4 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_2 ( ) ) ; install ( new TYPE_3 ( ) ) ; install ( new TYPE_4 ( ) ) ; } 
void METHOD_1 ( TYPE_1 < java.lang.String > e ) { java.lang.String VAR_1 = e . getValue ( ) ; if ( ( VAR_1 != null ) && ( ( VAR_1 . length ( ) ) > 0 ) ) { VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( 1 , TYPE_3 . METHOD_4 ( VAR_1 ) ) ) ; view . METHOD_5 ( VAR_2 . METHOD_2 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 plugins = VAR_1 ; TYPE_2 . METHOD_2 ( plugins ) ; TYPE_1 VAR_2 = plugins . METHOD_3 ( STRING_1 ) ; TYPE_2 . METHOD_4 ( VAR_2 , STRING_2 . METHOD_5 ( VAR_3 ) ) ; VAR_4 . METHOD_6 ( STRING_3 ) ; TYPE_3 i = VAR_5 . config ( ) . server ( ) . METHOD_7 ( ) ; com.google.common.truth.Truth.assertThat ( VAR_6 ) . METHOD_8 ( 1 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project ) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_2 ( project ) ; TYPE_2 VAR_2 = repo . METHOD_3 ( ) ; return new TYPE_1 ( repo , new org.eclipse.jgit.revwalk.RevWalk ( VAR_2 . METHOD_4 ( ) ) , VAR_2 , new TYPE_3 ( ) , true ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . ChangeInfo c = get ( changeId , VAR_1 , VAR_2 ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( 1 ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( METHOD_3 ( 2 ) ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( VAR_3 . METHOD_4 ( ) ) ) ) . METHOD_5 ( TYPE_3 . of ( METHOD_3 ( 2 ) ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 . get ( METHOD_3 ( 2 ) ) . VAR_5 ) . isEqualTo ( INT_1 ) ; } 
private void METHOD_1 ( TYPE_1 < TYPE_2 . NameKey > VAR_1 ) { METHOD_2 ( STRING_1 ) ; TYPE_3 VAR_2 = VAR_3 . create ( VAR_4 ) ; try { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( STRING_2 ) ; } catch ( TYPE_4 e ) { METHOD_3 ( ( STRING_3 + STRING_4 ) , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; METHOD_2 ( VAR_1 , null , true ) ; TYPE_1 r = VAR_2 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_3 ) ; r . METHOD_5 ( ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( ( format ) == ( VAR_2 ) ) { TYPE_4 VAR_3 = new TYPE_4 ( ) ; display ( VAR_3 ) ; return TYPE_5 . create ( VAR_3 . METHOD_1 ( ) ) . METHOD_2 ( STRING_1 ) . METHOD_3 ( TYPE_6 . name ( ) ) ; } return apply ( ) ; } 
public org.eclipse.jgit.lib.ObjectId METHOD_1 ( org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.lib.ObjectId VAR_1 , java.lang.String path ) throws java.io.IOException { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk ( repo ) ; try { rw . METHOD_2 ( rw . parseCommit ( VAR_1 ) ) ; rw . METHOD_3 ( false ) ; rw . METHOD_4 ( TYPE_1 . create ( TYPE_2 . METHOD_5 ( path ) , VAR_2 ) ) ; return rw . METHOD_6 ( ) ; } finally { rw . METHOD_7 ( ) ; } } 
protected void METHOD_1 ( ) throws TYPE_1 { if ( ( db ) != null ) { try { final TYPE_2 . Project project = getProject ( ) ; if ( project != null ) { for ( TYPE_3 w : db . METHOD_2 ( ) . METHOD_3 ( project . getId ( ) ) ) { add ( VAR_1 , w . getAccountId ( ) ) ; } } } catch ( TYPE_4 . OrmException err ) { } } } 
private java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { if ( ( VAR_1 . METHOD_2 ( ) ) != null ) { return VAR_1 . METHOD_2 ( ) ; } return VAR_1 . METHOD_3 ( ) . toString ( ) ; } return VAR_2 . getName ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < com.google.gerrit.server.query.change.ChangeData > in = METHOD_2 ( STRING_1 ) ; TYPE_1 < com.google.gerrit.server.query.change.ChangeData > out = METHOD_3 ( in ) ; METHOD_4 ( VAR_1 class , out . METHOD_5 ( ) ) ; assertEquals ( TYPE_2 . of ( query ( TYPE_1 . METHOD_6 ( in . METHOD_7 ( 0 ) , in . METHOD_7 ( 2 ) ) ) , in . METHOD_7 ( 1 ) , in . METHOD_7 ( INT_1 ) ) , out . METHOD_8 ( ) ) ; } 
private static void METHOD_1 ( java.util.List < java.lang.String > VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { com.google.gerrit.reviewdb.client.Change a = VAR_2 . change ; com.google.gerrit.reviewdb.client.Change b = VAR_3 . change ; java.lang.String VAR_4 = ( a . getId ( ) . equals ( b . getId ( ) ) ) ? TYPE_1 . METHOD_2 ( a . getId ( ) ) : STRING_1 ; TYPE_1 . METHOD_3 ( VAR_1 , VAR_5 . Change class , VAR_4 , a , b ) ; } 
private void METHOD_1 ( final TYPE_1 m , boolean VAR_1 ) { m . METHOD_2 ( ) ; m . METHOD_3 ( ) ; m . METHOD_4 ( TYPE_2 . css ( ) . METHOD_5 ( ) ) ; if ( VAR_1 ) { m . METHOD_6 ( TYPE_2 . css ( ) . METHOD_7 ( ) ) ; } else { m . METHOD_8 ( STRING_1 , STRING_2 ) ; } m . METHOD_9 ( ) ; } 
public void onSuccess ( TYPE_1 result ) { java.lang.String b = ( ( base ) != null ) ? java.lang.String . METHOD_1 ( base . get ( ) ) : null ; java.lang.String VAR_1 = java.lang.String . METHOD_1 ( revision . get ( ) ) ; TYPE_2 . display ( TYPE_3 . METHOD_2 ( changeId , VAR_1 ) , new TYPE_4 ( changeId , b , VAR_1 , VAR_2 ) ) ; } 
public TYPE_1 < ? extends java.util.Set < java.lang.String > > apply ( TYPE_2 req ) throws TYPE_3 , TYPE_4 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_5 VAR_1 = req . METHOD_1 ( ) ; TYPE_6 notes = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; java.util.Set < java.lang.String > VAR_2 = notes . METHOD_4 ( ) ; if ( VAR_2 == null ) { VAR_2 = java.util.Collections . METHOD_5 ( ) ; } return TYPE_1 . METHOD_6 ( new TYPE_7 < java.lang.String > ( VAR_2 ) ) ; } 
static java.lang.String METHOD_1 ( int change , int patch , java.lang.String branch ) { if ( ( branch . METHOD_2 ( TYPE_1 ) ) == 0 ) { branch = branch . METHOD_3 ( TYPE_1 . length ( ) ) ; } return ( ( ( change + STRING_1 ) + patch ) + STRING_1 ) + branch ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 , TYPE_1 msg ) { if ( msg != null ) { if ( ( VAR_1 != null ) && ( ( msg . METHOD_2 ( ) ) == null ) ) { msg . METHOD_3 ( VAR_1 . getAccountId ( ) ) ; } try { db . METHOD_4 ( ) . insert ( java.util.Collections.singleton ( msg ) ) ; } catch ( com.google.gwtorm.server.OrmException err ) { VAR_2 . METHOD_5 ( STRING_1 , err ) ; } } } 
private void METHOD_1 ( TYPE_1 out , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk walk , TYPE_2 VAR_1 , TYPE_2 VAR_2 , java.lang.String path ) throws java.io.IOException { TYPE_3 diff = new TYPE_4 ( VAR_3 , out ) ; try { if ( ! ( path . equals ( STRING_1 ) ) ) { diff . METHOD_2 ( TYPE_5 . create ( path ) ) ; } diff . METHOD_3 ( repo ) ; diff . METHOD_4 ( true ) ; diff . format ( VAR_1 , VAR_2 ) ; } finally { diff . METHOD_5 ( ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; boolean VAR_2 = false ; try { for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_1 . METHOD_3 ( VAR_3 . METHOD_4 ( event ) ) ; } } catch ( TYPE_5 e ) { VAR_1 . add ( new TYPE_1 ( e . getMessage ( ) , true ) ) ; VAR_2 = true ; } if ( VAR_2 ) { METHOD_5 ( VAR_1 , event ) ; } return VAR_1 ; } 
public boolean equals ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { final TYPE_2 p = ( ( TYPE_2 ) ( VAR_1 ) ) ; return ( METHOD_1 ( ) . equals ( p . METHOD_1 ( ) ) ) && ( id . equals ( p . id ) ) ; } return false ; } 
public void METHOD_1 ( final TYPE_1 . Id VAR_1 , final java.lang.String msg , final java.util.Set < TYPE_2 . Id > VAR_2 , final TYPE_3 < TYPE_4 > VAR_3 ) { TYPE_5 . METHOD_2 ( VAR_4 . create ( VAR_1 , msg , VAR_2 ) ) . to ( VAR_3 ) ; } 
private TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( false ) ; java.util.Set < TYPE_3 > VAR_2 = TYPE_4 . of ( ) ; return new TYPE_1 ( VAR_3 , account , VAR_2 , java.util.Collections . METHOD_4 ( ) , new TYPE_5 < TYPE_6 , java.util.Set < TYPE_7 > > ( ) ) ; } 
public boolean METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 key ) { return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + key ) + STRING_3 ) ) { TYPE_3 METHOD_2 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_3 ( VAR_1 , key ) ; return VAR_3 . METHOD_4 ( TYPE_5 . on ( STRING_4 ) . METHOD_5 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_6 ( ) ; } 
private TYPE_1 METHOD_1 ( ) throws TYPE_2 { TYPE_3 VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 . get ( ) ) ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 ) ; try { if ( VAR_3 . METHOD_3 ( ) ) { return VAR_3 ; } else { throw new TYPE_2 ( STRING_1 ) ; } } catch ( java.io.IOException VAR_4 ) { throw new TYPE_2 ( STRING_2 ) ; } } 
static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 ) { return new TYPE_3 ( VAR_1 , VAR_2 , true , ( ! ( TYPE_1 . METHOD_2 ( VAR_3 class , VAR_1 . METHOD_3 ( ) ) ) ) , TYPE_1 . METHOD_2 ( VAR_4 class , VAR_1 . METHOD_3 ( ) ) , TYPE_1 . METHOD_2 ( VAR_5 class , VAR_1 . METHOD_3 ( ) ) , null , null ) ; } 
private com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String name , java.lang.String email ) throws TYPE_1 , TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 . Key VAR_2 = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ; TYPE_5 VAR_4 = db . METHOD_2 ( ) ; TYPE_4 VAR_5 = VAR_4 . get ( VAR_2 ) ; if ( VAR_5 == null ) { return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; } return VAR_5 . getAccountId ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result change = METHOD_2 ( git , true ) ; METHOD_2 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_3 ( change ) ; com.google.common.truth.Truth.assertThat ( ( ( TYPE_2 < ? > ) ( changes ) ) ) . isEmpty ( ) ; } 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( getId ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; return METHOD_5 ( ) ; } 
private java.lang.String METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 res = METHOD_2 ( path , ( STRING_1 + VAR_1 ) , VAR_2 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_3 ( VAR_3 ) ) . isEqualTo ( STRING_2 ) ; java.lang.String VAR_4 = res . METHOD_4 ( ) ; java.lang.String VAR_5 = STRING_3 ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . METHOD_5 ( VAR_5 ) ; java.lang.String result = VAR_4 . METHOD_6 ( VAR_5 . length ( ) ) ; VAR_6 . METHOD_7 ( result ) ; return result ; } 
public static void topic ( int id , java.lang.String topic , TYPE_1 < java.lang.String > VAR_1 ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_1 ( id , STRING_1 ) ; topic = TYPE_3 . METHOD_2 ( topic ) ; if ( topic != null ) { TYPE_4 input = TYPE_4 . create ( ) ; input . topic ( topic ) ; VAR_2 . put ( input , TYPE_5 . METHOD_3 ( VAR_1 ) ) ; } else { VAR_2 . delete ( TYPE_5 . METHOD_3 ( VAR_1 ) ) ; } } 
public TYPE_1 METHOD_1 ( ) { if ( ( ( ! ( METHOD_2 ( VAR_1 ) ) ) && ( ! ( METHOD_2 ( VAR_2 ) ) ) ) && ( ! ( METHOD_3 ( ) ) ) ) { java.lang.String VAR_3 = VAR_4 . getProject ( ) . getName ( ) ; return new TYPE_1 ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) ) ; } if ( VAR_4 . METHOD_4 ( ) ) { return METHOD_5 ( ) ; } return VAR_5 ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_2 ) ) . METHOD_4 ( STRING_3 ) . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_4 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 , null , STRING_6 ) ) . METHOD_4 ( STRING_5 ) . METHOD_5 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result result = METHOD_2 ( STRING_1 , STRING_2 , STRING_3 , STRING_4 ) ; java.lang.String projectName = result . getChange ( ) . change ( ) . getProject ( ) . get ( ) ; METHOD_3 ( new TYPE_2 . NameKey ( projectName , STRING_5 ) ) ; METHOD_4 ( STRING_6 , projectName ) ; METHOD_5 ( result . getChangeId ( ) ) ; result . METHOD_6 ( ) ; METHOD_7 ( result ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; super . METHOD_1 ( ) ; TYPE_1 . METHOD_3 ( VAR_1 , new TYPE_2 < java.util.List < TYPE_3 . Branch > > ( ) { public void onSuccess ( final java.util.List < TYPE_3 . Branch > result ) { METHOD_2 ( true ) ; VAR_2 . display ( result ) ; } } ) ; } 
private static java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > METHOD_1 ( TYPE_2 < com.google.gerrit.server.query.change.ChangeData > schema , java.util.List < java.lang.String > VAR_1 ) { java.util.List < TYPE_1 < com.google.gerrit.server.query.change.ChangeData > > VAR_2 = new java.util.ArrayList < > ( VAR_1 . size ( ) ) ; for ( java.lang.String s : VAR_1 ) { VAR_2 . add ( TYPE_3 . commit ( schema , s ) ) ; } return VAR_2 ; } 
private boolean METHOD_1 ( final TYPE_1 < TYPE_2 > refs ) throws java.io.IOException { METHOD_2 ( refs ) ; java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_1 = new TYPE_3 < > ( ) ; java.util.List < org.eclipse.jgit.revwalk.RevCommit > VAR_2 = new TYPE_3 < > ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; rw . METHOD_4 ( ) ; return ( ! ( METHOD_5 ( VAR_2 , 1 ) . isEmpty ( ) ) ) || ( ! ( METHOD_5 ( VAR_1 , 1 ) . isEmpty ( ) ) ) ; } 
private void METHOD_1 ( final boolean VAR_1 , final boolean VAR_2 , final boolean VAR_3 ) { VAR_4 . METHOD_2 ( VAR_3 ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; VAR_7 . METHOD_2 ( VAR_1 ) ; VAR_8 . METHOD_2 ( VAR_3 ) ; VAR_9 . METHOD_2 ( ( ( VAR_1 || VAR_2 ) || VAR_3 ) ) ; } 
public void update ( final int VAR_1 ) { VAR_2 += VAR_1 ; if ( ( VAR_3 ) != ( VAR_4 ) ) { int VAR_5 = ( ( VAR_2 ) * INT_1 ) / ( VAR_3 ) ; if ( VAR_5 > ( VAR_6 ) ) { VAR_6 = VAR_5 ; METHOD_1 ( ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { repo = new TYPE_1 < TYPE_2 > ( new TYPE_3 ( new TYPE_4 ( STRING_1 ) ) ) ; walk = new org.eclipse.jgit.revwalk.RevWalk ( repo . METHOD_2 ( ) ) ; VAR_1 = new TYPE_5 ( ) ; VAR_2 = ( repo . METHOD_3 ( ) . METHOD_4 ( ) ) / INT_1 ; } 
public void METHOD_1 ( ) { for ( TYPE_1 path : METHOD_2 ( ) ) { TYPE_2 VAR_1 = METHOD_3 ( path ) ; TYPE_3 VAR_2 = new TYPE_3 ( VAR_1 . METHOD_4 ( ) ) ; if ( VAR_2 . METHOD_5 ( new TYPE_3 ( ) ) ) { METHOD_6 ( path ) ; } } } 
public void METHOD_1 ( ) { final java.lang.String VAR_1 = STRING_1 ; final TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 ) ; assertEquals ( STRING_2 , VAR_2 . toString ( ) ) ; final TYPE_1 VAR_3 = new TYPE_1 ( STRING_3 ) ; VAR_3 . METHOD_2 ( VAR_2 . toString ( ) ) ; assertEquals ( VAR_2 , VAR_3 ) ; } 
public TYPE_1 . Result METHOD_1 ( final TYPE_2 index ) { TYPE_3 VAR_1 = new TYPE_4 ( new TYPE_5 ( VAR_2 ) ) ; VAR_1 . METHOD_2 ( 2 ) ; TYPE_6 VAR_3 = TYPE_6 . METHOD_3 ( ) ; java.util.List < com.google.gerrit.reviewdb.client.Project.NameKey > VAR_4 ; try { VAR_4 = METHOD_4 ( VAR_1 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_5 . error ( STRING_1 , e ) ; return new TYPE_7 . Result ( VAR_3 , false , 0 , 0 ) ; } return METHOD_5 ( index , VAR_4 , VAR_1 ) ; } 
public final void onSuccess ( TYPE_1 result ) { if ( METHOD_1 ( ) ) { if ( ( ( result . size ( ) ) == 1 ) && ( TYPE_2 . METHOD_2 ( query ) ) ) { TYPE_3 . ChangeInfo c = result . get ( 0 ) ; com.google.gerrit.reviewdb.client.Change . Id id = c . METHOD_3 ( ) ; TYPE_4 . display ( TYPE_5 . METHOD_4 ( id ) , new TYPE_6 ( id ) ) ; } else { display ( result ) ; this . display ( ) ; } } } 
private void commit ( org.eclipse.jgit.lib.Repository VAR_1 , TYPE_1 VAR_2 , TYPE_2 VAR_3 ) throws java.io.IOException { TYPE_3 VAR_4 = VAR_1 . METHOD_1 ( ) . METHOD_2 ( ) ; try ( TYPE_4 VAR_5 = METHOD_3 ( VAR_1 , VAR_4 ) ) { VAR_2 . commit ( VAR_5 ) ; } try ( TYPE_4 VAR_5 = METHOD_3 ( VAR_1 , VAR_4 ) ) { VAR_3 . commit ( VAR_5 ) ; } try ( org.eclipse.jgit.revwalk.RevWalk VAR_6 = new org.eclipse.jgit.revwalk.RevWalk ( VAR_1 ) ) { TYPE_5 . METHOD_4 ( VAR_4 , VAR_6 ) ; } } 
private static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String > VAR_2 = TYPE_3 . METHOD_2 ( ) ; while ( VAR_1 != null ) { VAR_2 . METHOD_3 ( VAR_1 . value ( ) ) ; VAR_1 = TYPE_4 . METHOD_4 ( VAR_1 ) ; } VAR_2 . METHOD_5 ( ) ; return VAR_2 ; } 
public void METHOD_1 ( java.lang.String msg ) { if ( ( ( info ) == null ) && ( ( VAR_1 ) != null ) ) { info = new TYPE_1 ( TYPE_2 . info ( ) ) ; VAR_1 . add ( info ) ; } info . METHOD_2 ( msg ) ; } 
private void METHOD_1 ( ) throws java.io.IOException { if ( ( VAR_1 . METHOD_2 ( ) ) && ( ( getRevision ( ) ) == null ) ) { org.eclipse.jgit.lib.Repository repo = VAR_2 . METHOD_3 ( METHOD_4 ( ) ) ; try { METHOD_1 ( repo ) ; } catch ( TYPE_1 e ) { throw new java.io.IOException ( e ) ; } finally { repo . close ( ) ; } } } 
public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( VAR_1 ) ; } else { switch ( status . getStatus ( ) ) { case VAR_2 : return STRING_1 ; case VAR_3 : return STRING_2 ; default : return ( ( ( ( ( STRING_3 + ( VAR_4 ) ) + STRING_4 ) + ( VAR_5 ) ) + STRING_5 ) + ( VAR_6 ) ) + STRING_6 ; } } } 
protected java.lang.String METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = name + STRING_1 ; TYPE_2 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( TYPE_3 . METHOD_3 ( VAR_2 ) ) { return METHOD_4 ( VAR_1 ) ; } else { return METHOD_5 ( name ) ; } } 
public void METHOD_1 ( ) { VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 class ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( TYPE_3 . get ( STRING_1 ) ) ) . METHOD_7 ( ) ; TYPE_1 . METHOD_8 ( VAR_1 ) ; VAR_3 = new TYPE_4 ( VAR_4 , cfg , TYPE_1 . METHOD_2 ( VAR_5 class ) , VAR_1 ) ; } 
public synchronized < TYPE_1 , TYPE_2 , TYPE_3 > TYPE_4 < TYPE_1 , TYPE_2 , TYPE_3 > METHOD_1 ( java.lang.String name , TYPE_5 VAR_1 , TYPE_6 < TYPE_1 > VAR_2 , TYPE_6 < TYPE_2 > VAR_3 , TYPE_6 < TYPE_3 > VAR_4 ) { TYPE_7 . METHOD_2 ( VAR_1 ) ; TYPE_8 m = new TYPE_8 ( this , name , VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; METHOD_3 ( name , VAR_1 ) ; VAR_5 . put ( name , m ) ; return m . METHOD_4 ( ) ; } 
private static TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 ) { try ( TYPE_3 VAR_2 = new TYPE_4 ( VAR_1 ) ; TYPE_3 in = TYPE_5 . METHOD_2 ( VAR_2 ) ) { return new TYPE_6 ( in ) ; } catch ( java.io.IOException e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; } catch ( TYPE_8 e ) { throw new TYPE_7 ( ( STRING_1 + VAR_1 ) , e ) ; } } 
private void METHOD_1 ( TYPE_1 ctx ) { change = ctx . getChange ( ) ; TYPE_2 update = ctx . METHOD_2 ( psId ) ; VAR_1 = ( change . getStatus ( ) ) == ( VAR_2 ) ; if ( VAR_1 ) { change . METHOD_3 ( VAR_3 ) ; update . METHOD_3 ( change . getStatus ( ) ) ; ctx . METHOD_1 ( ) ; } } 
public TYPE_1 METHOD_1 ( TYPE_2 in ) throws TYPE_3 { try { return changes . id ( VAR_1 . get ( ) . apply ( revision , in ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( TYPE_4 e ) { throw new TYPE_3 ( STRING_1 , e ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ) ; VAR_1 = null ; } if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; VAR_2 = null ; } super . METHOD_1 ( ) ; } 
private static boolean METHOD_1 ( TYPE_1 event , TYPE_2 update ) { return ( ( ( update != null ) && ( ( TYPE_3 . METHOD_2 ( VAR_1 ) ) == ( TYPE_3 . METHOD_2 ( update . METHOD_3 ( ) ) ) ) ) && ( VAR_2 . equals ( update . METHOD_4 ( ) ) ) ) && ( VAR_3 . equals ( update . METHOD_5 ( ) ) ) ; } 
protected < TYPE_1 > void METHOD_1 ( final java.lang.String VAR_1 , final boolean VAR_2 , final java.lang.String VAR_3 , final TYPE_2 < TYPE_1 > VAR_4 , final TYPE_3 < TYPE_1 > VAR_5 ) throws TYPE_4 { if ( ( url ) == null ) { throw new TYPE_5 ( ) ; } new TYPE_6 < TYPE_1 > ( this , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) . METHOD_2 ( ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change . Status VAR_1 , java.lang.String VAR_2 , TYPE_1 ... VAR_3 ) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = getChange ( ) . change ( ) ; com.google.common.truth.Truth.assertThat ( VAR_4 ) . isEqualTo ( c . METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 ) . isEqualTo ( c . getStatus ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_2 ) . isEqualTo ( TYPE_2 . METHOD_3 ( c . METHOD_4 ( ) ) ) ; METHOD_5 ( c , VAR_3 ) ; } 
protected void METHOD_1 ( ) { factory ( VAR_1 . Factory class ) ; factory ( VAR_2 . Factory class ) ; factory ( VAR_3 . Factory class ) ; factory ( VAR_4 . Factory class ) ; factory ( VAR_5 . Factory class ) ; factory ( VAR_6 . Factory class ) ; factory ( VAR_7 . Factory class ) ; factory ( VAR_8 . Factory class ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 , TYPE_2 group ) { if ( VAR_1 . METHOD_2 ( ) ) { return ; } TYPE_3 . METHOD_3 ( changeId . get ( ) , VAR_1 . name ( ) , group . add ( new TYPE_4 < TYPE_5 > ( ) { public void onSuccess ( TYPE_5 info ) { VAR_1 . METHOD_4 ( info ) ; } public void METHOD_5 ( TYPE_6 VAR_2 ) { } } ) ) ; } 
public void METHOD_1 ( ) { final long VAR_1 = INT_1 ; final long VAR_2 = INT_2 ; final TYPE_1 VAR_3 = new TYPE_1 ( new TYPE_2 ( VAR_1 ) , VAR_2 ) ; assertEquals ( ( ( VAR_1 + STRING_1 ) + VAR_2 ) , VAR_3 . toString ( ) ) ; final TYPE_1 VAR_4 = new TYPE_1 ( new TYPE_2 ( 0 ) , 0 ) ; VAR_4 . METHOD_2 ( VAR_3 . toString ( ) ) ; assertEquals ( VAR_3 , VAR_4 ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String name , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException { try { org.eclipse.jgit.lib.ObjectId id = repo . METHOD_1 ( name ) ; return id != null ? walk . METHOD_2 ( id ) : null ; } catch ( TYPE_2 e ) { return null ; } catch ( TYPE_3 e ) { return null ; } catch ( TYPE_4 e ) { return null ; } } 
public static void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 , com.google.gerrit.reviewdb.client.PatchSet VAR_3 , TYPE_2 VAR_4 ) throws com.google.gwtorm.server.OrmException { TYPE_3 < com.google.gerrit.reviewdb.client . PatchSetApproval > VAR_5 = db . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; TYPE_4 . METHOD_1 ( db , VAR_1 , VAR_5 , VAR_2 , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( server , admin ) ; VAR_2 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 . get ( ) ) ; VAR_3 = new com.google.gerrit.reviewdb.client.Project.NameKey ( STRING_2 ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_3 . get ( ) ) ; VAR_1 . close ( ) ; } 
public void METHOD_1 ( TYPE_1 . ChangeInfo change , TYPE_2 revision , TYPE_3 VAR_1 , TYPE_4 VAR_2 ) { if ( ! ( VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } TYPE_5 event = new TYPE_5 ( change , revision , VAR_1 , VAR_2 ) ; for ( TYPE_6 VAR_4 : VAR_3 ) { try { VAR_4 . METHOD_4 ( event ) ; } catch ( java.lang.Exception e ) { util . METHOD_5 ( TYPE_7 . log , e ) ; } } } 
protected void METHOD_1 ( java.lang.String changeId , int VAR_1 , org.eclipse.jgit.lib.ObjectId VAR_2 ) throws java.io.IOException { TYPE_1 . ChangeInfo c = getChange ( changeId , VAR_3 ) ; org.junit.Assert.assertEquals ( VAR_2 . name ( ) , VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 . get ( VAR_2 . name ( ) ) . VAR_6 ) ; } 
private void METHOD_1 ( final TYPE_1 . ReceiveCommand cmd ) { TYPE_2 ctl = VAR_1 . METHOD_2 ( cmd . getRefName ( ) ) ; if ( ctl . METHOD_3 ( ) ) { cmd . METHOD_4 ( rp ) ; } else { TYPE_3 . reject ( cmd , STRING_1 ) ; } } 
private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; commit . METHOD_2 ( ( VAR_1 ? ! ( VAR_3 . METHOD_3 ( ) . isEmpty ( ) ) : false ) ) ; VAR_4 . METHOD_2 ( ( VAR_1 ? VAR_3 . METHOD_4 ( ) : false ) ) ; VAR_5 . METHOD_2 ( VAR_1 ) ; VAR_6 . METHOD_2 ( VAR_1 ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 { TYPE_3 cm = VAR_1 . create ( change.getId ( ) ) ; cm . METHOD_2 ( ctx . METHOD_3 ( ) . getAccountId ( ) ) ; cm . METHOD_4 ( patchSet , VAR_2 ) ; cm . METHOD_5 ( VAR_3 . METHOD_6 ( ) ) ; cm . METHOD_7 ( VAR_3 . METHOD_8 ( ) ) ; cm . METHOD_9 ( ) ; } 
public static boolean METHOD_1 ( final TYPE_1 VAR_1 , final TYPE_2 VAR_2 , final org.eclipse.jgit.revwalk.RevWalk rw , final TYPE_2 VAR_3 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 , VAR_3 ) ) { return false ; } try { return ( VAR_2 == null ) || ( rw . METHOD_3 ( VAR_2 , VAR_3 ) ) ; } catch ( java.io.IOException e ) { throw new TYPE_3 ( STRING_1 , e ) ; } } 
protected static void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String table , java.lang.String VAR_1 , java.lang.String to ) throws com.google.gwtorm.server.OrmException { TYPE_1 s = ( ( TYPE_1 ) ( db ) ) ; try ( TYPE_2 e = new TYPE_2 ( s ) ) { s . METHOD_2 ( e , table , VAR_1 , to ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String projectName ) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey key = new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; org.eclipse.jgit.lib.Repository git = VAR_1 . METHOD_2 ( key ) ; try { TYPE_2 . ProjectConfig cfg = new TYPE_2 . ProjectConfig ( key ) ; cfg . METHOD_1 ( git ) ; return VAR_2 . create ( cfg ) ; } finally { git . close ( ) ; } } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { switch ( type ) { case VAR_2 : this . VAR_3 = ( VAR_1 != null ) ? TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_1 ) ) : null ; return this ; case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : case VAR_14 : case VAR_15 : default : throw new TYPE_4 ( java.lang.String.format ( STRING_1 , type ) ) ; } } 
private java.lang.String METHOD_1 ( TYPE_1 is ) throws java.io.IOException { VAR_1 = new TYPE_2 ( ) ; TYPE_3 input = new TYPE_3 ( is ) ; char [ ] VAR_2 = new char [ INT_1 ] ; int n = 0 ; while ( ( n = input . METHOD_2 ( VAR_2 ) ) != ( - 1 ) ) { VAR_1 . METHOD_3 ( VAR_2 , 0 , n ) ; } return VAR_1 . toString ( ) ; } 
private void METHOD_1 ( TYPE_1 ctx ) throws TYPE_2 , com.google.gwtorm.server.OrmException { patchSet = ctx . METHOD_2 ( ) . patchSets ( ) . get ( psId ) ; if ( ! ( patchSet . METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_1 ) ; } patchSet . METHOD_4 ( false ) ; } 
void METHOD_1 ( ) { TYPE_1 . get ( ) . METHOD_2 ( new TYPE_2 ( ) { public void METHOD_3 ( ) { if ( ( ( VAR_1 ) == null ) || ( ( VAR_2 ) == null ) ) { throw new TYPE_3 ( STRING_1 ) ; } VAR_1 . METHOD_4 ( ) ; VAR_2 . METHOD_1 ( ) ; } } ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Result r = METHOD_2 ( ) ; java.lang.String VAR_1 = STRING_1 + ( r . getChangeId ( ) ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_6 ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_7 ( VAR_1 ) ; com.google.common.truth.Truth.assertThat ( getChange ( VAR_1 ) . VAR_3 ) . METHOD_8 ( ) ; } 
protected void METHOD_1 ( ) { com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_1 class ) . to ( VAR_2 class ) ; bind ( VAR_3 class ) . to ( VAR_4 class ) ; install ( TYPE_1 . METHOD_2 ( ) ) ; bind ( VAR_5 class ) . METHOD_3 ( TYPE_2 . create ( ) ) . to ( VAR_6 class ) ; } 
private static synchronized TYPE_1 METHOD_1 ( ) throws TYPE_2 { final TYPE_3 p = new TYPE_3 ( ) ; p . METHOD_2 ( STRING_1 , VAR_1 class . getName ( ) ) ; p . METHOD_2 ( STRING_2 , ( ( STRING_3 + STRING_4 ) + ( ++ ( VAR_2 ) ) ) ) ; final TYPE_1 VAR_3 = new TYPE_4 ( p ) ; return VAR_3 ; } 
private void METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , TYPE_1 [ ] VAR_1 ) throws java.io.IOException , TYPE_2 , TYPE_3 , TYPE_4 { TYPE_5 d = new TYPE_5 ( ) ; if ( ( VAR_1 == null ) || ( ( VAR_1 . length ) == 0 ) ) { VAR_2 = VAR_3 ; } else { VAR_2 = VAR_4 ; VAR_5 = TYPE_6 . METHOD_2 ( VAR_1 [ 0 ] ) ; } METHOD_1 ( db , d ) ; } 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; TYPE_2 . METHOD_2 ( getChange ( ) , VAR_1 . METHOD_3 ( ) . get ( ctl . getId ( ) ) ) ; VAR_1 . METHOD_4 ( ) ; return METHOD_5 ( ) ; } 
public synchronized void METHOD_1 ( TYPE_1 index ) { int VAR_1 = index . METHOD_2 ( ) . METHOD_3 ( ) ; for ( TYPE_1 i : VAR_2 ) { if ( ( i . METHOD_2 ( ) . METHOD_3 ( ) ) == VAR_1 ) { throw new TYPE_2 ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) ) ; } } VAR_2 . add ( index ) ; } 
private PatchSet . Id METHOD_1 ( org.eclipse.jgit.revwalk.RevCommit commit ) throws TYPE_1 { java.util.List < java.lang.String > VAR_1 = commit . METHOD_2 ( VAR_2 ) ; if ( ( VAR_1 . size ( ) ) != 1 ) { throw METHOD_3 ( STRING_1 , VAR_2 , VAR_1 ) ; } TYPE_2 psId = TYPE_3 . METHOD_4 ( VAR_1 . get ( 0 ) ) ; if ( psId == null ) { throw METHOD_3 ( STRING_2 , VAR_2 , VAR_1 . get ( 0 ) ) ; } return new com.google.gerrit.reviewdb.client.PatchSet.Id ( change.getId ( ) , psId ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 0 ) ; TYPE_1 VAR_1 ; METHOD_3 ( ( ( VAR_2 ) - FLOAT_1 ) ) ; METHOD_4 ( ) ; TYPE_2 . ChangeInfo info = METHOD_5 ( METHOD_6 ( VAR_3 ) ) ; java.lang.String message = VAR_4 . get ( VAR_5 ) . commit . message ; com.google.common.truth.Truth.assertThat ( message ) . contains ( java.lang.String.format ( STRING_1 , VAR_6 , admin . METHOD_7 ( ) . METHOD_8 ( ) ) ) ; } 
private static TYPE_1 create ( TYPE_2 VAR_1 , TYPE_3 < TYPE_2 > VAR_2 , java.util.Map < java.lang.String , TYPE_4 > VAR_3 , java.lang.String VAR_4 , java.lang.String VAR_5 ) { return new TYPE_5 ( VAR_1 , TYPE_6 . METHOD_1 ( VAR_2 ) , TYPE_7 . METHOD_1 ( VAR_3 ) , VAR_4 , VAR_5 ) ; } 
private void METHOD_1 ( TYPE_1 . Result r ) throws java.lang.Exception { revision ( r ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; revision ( r ) . submit ( ) ; org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_4 ( project ) ; try { org.junit.Assert.assertEquals ( r . METHOD_5 ( ) , repo . METHOD_6 ( STRING_1 ) . METHOD_7 ( ) ) ; } finally { repo . close ( ) ; } } 
public void METHOD_1 ( ) throws java.io.IOException { METHOD_2 ( TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 0 ) ) ) ) ; assertEquals ( STRING_1 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( 1 , CHAR_1 ) ) ) ) ; assertEquals ( STRING_2 , TYPE_1 . METHOD_3 ( TYPE_2 . r ( TYPE_2 . b ( INT_1 , CHAR_2 , CHAR_3 , CHAR_4 , CHAR_4 , CHAR_5 , CHAR_5 , CHAR_6 ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 . Result r = METHOD_3 ( ) ; TYPE_2 revision = VAR_1 . changes ( ) . id ( r . getChangeId ( ) ) . METHOD_4 ( ) ; TYPE_3 in = new TYPE_3 ( ) ; VAR_2 = VAR_3 . toString ( ) ; in . label ( STRING_1 , INT_1 ) ; VAR_4 . METHOD_5 ( VAR_5 class ) ; VAR_4 . METHOD_6 ( STRING_2 ) ; revision . METHOD_7 ( in ) ; } 
public TYPE_1 apply ( TYPE_2 VAR_1 , TYPE_3 input ) throws TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException { TYPE_7 in = new TYPE_7 ( ) ; VAR_2 = TYPE_8 . of ( id ) ; java.util.List < TYPE_1 > VAR_3 = put . get ( ) . apply ( VAR_1 , in ) ; if ( ( VAR_3 . size ( ) ) == 1 ) { return VAR_3 . get ( 0 ) ; } else { throw new TYPE_9 ( ) ; } } 
public static boolean METHOD_1 ( ) { return ( ( ( TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ) != null ) && ( TYPE_1 . METHOD_4 ( ) . auth ( ) . METHOD_5 ( ) ) ) && ( ! ( TYPE_1 . METHOD_2 ( ) . METHOD_6 ( ) ) ) ; } 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account ( VAR_1 , TYPE_2 . METHOD_2 ( ) ) ; account . METHOD_3 ( false ) ; TYPE_3 < TYPE_4 > VAR_2 = java.util.Collections . METHOD_4 ( ) ; TYPE_3 < TYPE_5 > VAR_3 = java.util.Collections . METHOD_4 ( ) ; java.util.Set < TYPE_6 > VAR_4 = TYPE_7 . of ( ) ; return new TYPE_1 ( account , VAR_4 , VAR_2 , VAR_3 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { switch ( VAR_1 ) { case VAR_2 : return ( ) - > { ( VAR_3 ? VAR_4 : VAR_5 ) . METHOD_2 ( ) ; } ; case VAR_6 : return ( ) - > { ( VAR_7 ? VAR_8 : VAR_5 ) . METHOD_2 ( ) ; } ; default : return ( ) - > { } ; } } 
private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; } 
private java.util.Set < TYPE_1 > METHOD_1 ( java.util.List < com.google.gerrit.server.query.change.ChangeData > VAR_1 ) throws com.google.gwtorm.server.OrmException { TYPE_2 < TYPE_1 > result = TYPE_3 . METHOD_2 ( VAR_1 . size ( ) ) ; for ( com.google.gerrit.server.query.change.ChangeData cd : VAR_1 ) { TYPE_1 commit = VAR_2 . get ( cd . getId ( ) ) ; TYPE_4 . METHOD_3 ( ( commit != null ) , STRING_1 , cd . change ( ) . getId ( ) ) ; result . add ( commit ) ; } return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_3 ) ; METHOD_4 ( VAR_1 . changeId , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_5 ( STRING_1 , VAR_1 ) . to ( VAR_3 ) . to ( VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 < com.google.gerrit.reviewdb.client.PatchSet.Id , com.google.gerrit.reviewdb.client . PatchSetApproval > METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.server.ReviewDb > db ) throws com.google.gwtorm.server.OrmException { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_3 . create ( ) ; for ( com.google.gerrit.reviewdb.client . PatchSetApproval VAR_2 : com.google.gerrit.server.query.change.ChangeData . METHOD_2 ( db . get ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_3 ) ) ) { VAR_1 . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; } } return VAR_1 ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { table . METHOD_3 ( 0 , VAR_1 , TYPE_2 . METHOD_4 ( ) ) ; table . METHOD_5 ( ) . METHOD_6 ( 0 , VAR_1 , TYPE_3 . css ( ) . METHOD_7 ( ) ) ; } } 
private void METHOD_1 ( ) throws java.io.IOException { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( git , VAR_2 ) ; TYPE_2 res ; try { res = METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; } finally { try { VAR_1 . close ( ) ; } catch ( TYPE_3 VAR_3 ) { VAR_4 . METHOD_5 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 ) ; } } METHOD_6 ( res . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( false ) ; if ( ( ( VAR_1 ) != null ) && ( ( VAR_2 ) >= 0 ) ) { final TYPE_1 c = TYPE_2 . METHOD_3 ( VAR_2 ) ; if ( c != null ) { VAR_3 . put ( VAR_1 , METHOD_4 ( c ) ) ; } } super . METHOD_1 ( ) ; } 
public java.util.Map < java.lang.String , TYPE_1 > METHOD_1 ( java.lang.String base ) throws TYPE_2 { try { return ( ( java.util.Map < java.lang.String , TYPE_1 > ) ( VAR_1 . get ( ) . METHOD_2 ( base ) . apply ( revision ) . value ( ) ) ) ; } catch ( com.google.gwtorm.server.OrmException | java.io.IOException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public < TYPE_1 > java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > factory ) { java.util.List < TYPE_1 > VAR_1 = TYPE_3 . METHOD_2 ( ) ; for ( TYPE_4 VAR_2 : VAR_3 ) { for ( TYPE_5 < ? > VAR_4 : VAR_2 . METHOD_3 ( ) ) { VAR_1 . add ( factory . METHOD_4 ( VAR_4 ) ) ; } } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 { try { return changes . id ( VAR_1 . get ( ) . apply ( revision , null ) . VAR_2 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { throw new TYPE_2 ( STRING_1 , e ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . get ( ) ; if ( VAR_1 != null ) { VAR_1 . close ( ) ; } for ( TYPE_1 VAR_3 : VAR_4 ) { if ( VAR_3 != VAR_1 ) { VAR_3 . METHOD_1 ( ) ; VAR_3 . close ( ) ; } } } 
public boolean METHOD_1 ( ) { com.google.gerrit.reviewdb.client.Account.Id VAR_1 = notes . getChange ( ) . METHOD_2 ( ) ; if ( ( VAR_1 != null ) && ( METHOD_3 ( ) . METHOD_4 ( ) ) ) { com.google.gerrit.reviewdb.client.Account.Id id = METHOD_3 ( ) . getAccountId ( ) ; return id . equals ( VAR_1 . get ( ) ) ; } return false ; } 
private static org.eclipse.jgit.lib.ObjectId METHOD_1 ( TYPE_1 VAR_1 , org.eclipse.jgit.lib.Repository repo , org.eclipse.jgit.revwalk.RevWalk rw , TYPE_2 VAR_2 , org.eclipse.jgit.revwalk.RevCommit VAR_3 , TYPE_3 VAR_4 , java.lang.String VAR_5 , byte [ ] VAR_6 , org.eclipse.jgit.revwalk.RevCommit base ) throws TYPE_4 , java.io.IOException { TYPE_5 VAR_7 = TYPE_6 . METHOD_2 ( VAR_4 , VAR_3 ) ; TYPE_6 . METHOD_3 ( VAR_1 , repo , rw , base , VAR_7 . METHOD_4 ( ) , VAR_2 , VAR_5 , VAR_6 ) ; return VAR_7 . METHOD_5 ( VAR_2 ) ; } 
public void run ( ) throws java.lang.Exception { METHOD_1 ( ) ; final TYPE_1 VAR_1 = factory . create ( in , out ) ; VAR_1 . METHOD_2 ( format ) ; if ( ( query ) != null ) { VAR_1 . METHOD_3 ( query ) ; } else { VAR_1 . run ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) . METHOD_3 ( ) ; TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) ; TYPE_2 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_4 ( STRING_2 , u . METHOD_5 ( STRING_3 ) . METHOD_6 ( ) ) ; } 
public java.lang.String METHOD_1 ( final java.lang.String VAR_1 ) { final java.lang.String VAR_2 = TYPE_1 . get ( VAR_1 ) ; boolean VAR_3 ; try { VAR_3 = METHOD_2 ( VAR_2 , null ) ; } catch ( TYPE_2 e ) { VAR_3 = false ; } return VAR_3 ? TYPE_1 . METHOD_3 ( VAR_1 ) : null ; } 
public void METHOD_1 ( final TYPE_1 < TYPE_2 > event ) { if ( ( VAR_1 ) == null ) { TYPE_3 . METHOD_2 ( patchSet . getId ( ) , new TYPE_4 < TYPE_5 > ( ) { public void onSuccess ( final TYPE_5 result ) { METHOD_3 ( result ) ; VAR_2 . METHOD_4 ( true ) ; } } ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , null , true ) ; TYPE_2 r = VAR_3 . put ( ( ( STRING_2 + ( project . get ( ) ) ) + STRING_3 ) , METHOD_3 ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_4 ( ) ) . isEqualTo ( VAR_4 ) ; r . METHOD_5 ( ) ; } 
private void METHOD_1 ( ) throws com.google.gwtorm.server.OrmException { final java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; TYPE_2 < ? > in = VAR_2 ; while ( in != null ) { for ( final TYPE_3 VAR_3 : in . METHOD_2 ( ) ) { if ( ( VAR_3 . METHOD_3 ( VAR_4 class ) ) != null ) { VAR_1 . add ( new TYPE_1 ( VAR_3 ) ) ; } } in = in . METHOD_4 ( ) ; } METHOD_1 ( VAR_1 ) ; } 
TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 , TYPE_4 > VAR_1 ) throws java.io.IOException { TYPE_5 p = METHOD_2 ( ) ; if ( ( VAR_2 ) != null ) { return new TYPE_6 ( VAR_1 , VAR_2 ) ; } else { return new TYPE_7 ( VAR_1 , VAR_3 , p . METHOD_3 ( ) ) ; } } 
public TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , com.google.gerrit.reviewdb.client.Change change , TYPE_2 user ) throws com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_3 , TYPE_4 { com.google.gerrit.server.query.change.ChangeData cd = VAR_1 . create ( db , change . getProject ( ) , change.getId ( ) ) ; cd . METHOD_2 ( user ) ; if ( TYPE_5 . METHOD_3 ( cfg ) ) { return METHOD_4 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } return METHOD_5 ( db , new TYPE_1 ( cd , db , null ) , user ) ; } 
public boolean METHOD_1 ( TYPE_1 VAR_1 ) { boolean VAR_2 = false ; for ( TYPE_2 ref : VAR_3 . values ( ) ) { TYPE_3 . AccountGroup VAR_4 = VAR_1 . get ( ref . METHOD_2 ( ) ) ; if ( ( VAR_4 != null ) && ( ! ( VAR_4 . getName ( ) . equals ( ref . getName ( ) ) ) ) ) { VAR_2 = true ; ref . METHOD_3 ( VAR_4 . getName ( ) ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; int VAR_1 = VAR_2 . METHOD_3 ( TYPE_3 . METHOD_4 ( STRING_2 ) ) . getAccountId ( ) . get ( ) ; for ( int i = 0 ; i < INT_1 ; i ++ ) { METHOD_5 ( repo , null , null , VAR_1 , null ) . insert ( ) ; } METHOD_6 ( STRING_3 ) ; METHOD_6 ( STRING_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . name ( ( VAR_1 + STRING_2 ) ) . create ( ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_3 ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { try { final TYPE_3 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) ; VAR_2 . create ( ) . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_1 ) , VAR_3 class ) ; } catch ( TYPE_6 err ) { VAR_4 = null ; VAR_5 = null ; throw err ; } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( binder ( ) , VAR_1 ) ; bind ( VAR_2 class ) ; METHOD_3 ( VAR_3 , STRING_1 ) . to ( VAR_2 class ) ; delete ( VAR_1 ) . to ( VAR_4 class ) ; get ( VAR_5 , STRING_2 ) . to ( VAR_6 class ) ; put ( VAR_5 , STRING_2 ) . to ( VAR_7 class ) ; get ( VAR_8 , STRING_3 ) . to ( VAR_9 class ) ; put ( VAR_8 , STRING_3 ) . to ( VAR_10 class ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = VAR_2 . create ( db , admin . METHOD_2 ( ) ) ; com.google.gerrit.reviewdb.client.PatchSet.Id ps = VAR_1 . to ( git , STRING_1 ) . METHOD_3 ( ) ; java.util.List < TYPE_2 > VAR_3 = METHOD_4 ( ps ) ; org.junit.Assert.assertEquals ( 0 , VAR_3 . size ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final java.lang.String VAR_1 = STRING_1 ; TYPE_1 p = VAR_2 . projects ( ) . create ( VAR_1 ) . get ( ) ; com.google.common.truth.Truth.assertThat ( p . name ) . isEqualTo ( VAR_1 ) ; TYPE_2 VAR_3 = VAR_4 . get ( new com.google.gerrit.reviewdb.client.Project.NameKey ( VAR_1 ) ) ; com.google.common.truth.Truth.assertThat ( VAR_3 ) . METHOD_2 ( ) ; TYPE_3 . METHOD_3 ( VAR_3 . getProject ( ) , p ) ; METHOD_4 ( VAR_1 , STRING_2 ) ; } 
private com.google.gerrit.reviewdb.client . AccountGroup group ( java.lang.String name ) throws java.lang.Exception { TYPE_1 args = new TYPE_1 ( ) ; args . METHOD_1 ( name ) ; VAR_1 = java.util.Collections.singleton ( admin . getId ( ) ) ; return VAR_2 . create ( args ) . METHOD_2 ( ) ; } 
private void delete ( java.lang.String path ) { METHOD_1 ( ) ; TYPE_1 . delete ( changeId . get ( ) , path , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( TYPE_5 . METHOD_2 ( changeId ) ) ; } public void METHOD_3 ( TYPE_6 VAR_1 ) { } } ) ; } 
private com.google.gerrit.reviewdb.client.Change . Id METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db , java.lang.String VAR_1 , java.lang.String name , java.lang.String email ) throws TYPE_1 , TYPE_2 , TYPE_3 , com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_4 . Key VAR_2 = new TYPE_4 . Key ( VAR_3 , VAR_1 ) ; TYPE_5 VAR_4 = db . METHOD_2 ( ) ; TYPE_4 VAR_5 = VAR_4 . get ( VAR_2 ) ; if ( VAR_5 == null ) { return VAR_6 . METHOD_3 ( VAR_1 , name , email ) ; } else { return VAR_5 . getAccountId ( ) ; } } 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } 
private static java.lang.StringBuilder METHOD_1 ( java.lang.String VAR_1 , com.google.gerrit.reviewdb.client.Account.Id VAR_2 ) { java.lang.StringBuilder r = new java.lang.StringBuilder ( ) ; r . append ( VAR_1 ) ; int n = ( VAR_2 . get ( ) ) % INT_1 ; if ( n < INT_2 ) { r . append ( CHAR_1 ) ; } r . append ( n ) ; r . append ( CHAR_2 ) ; r . append ( VAR_2 . get ( ) ) ; r . append ( CHAR_2 ) ; return r ; } 
private static void METHOD_1 ( final java.lang.String token , final TYPE_1 . Key id , final int line ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( token ) { public void onSuccess ( ) { TYPE_4 . display ( token , new TYPE_5 ( id , line ) ) ; } } ) ; } 
TYPE_1 METHOD_1 ( final TYPE_2 . Key key , final TYPE_1 VAR_1 ) { final com.google.gerrit.reviewdb.client.Account.Id VAR_2 = VAR_1 . getAccountId ( ) ; final boolean VAR_3 = VAR_1 . METHOD_2 ( ) ; final TYPE_3 . Key VAR_4 = VAR_1 . METHOD_3 ( ) ; return METHOD_1 ( key , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } 
private long METHOD_1 ( java.lang.String n , java.lang.String VAR_1 , long VAR_2 ) { final long d = TYPE_1 . METHOD_2 ( VAR_2 , TYPE_2 ) ; final long m ; m = TYPE_3 . METHOD_3 ( config , STRING_1 , n , VAR_1 , d , TYPE_1 ) ; return TYPE_2 . METHOD_2 ( m , TYPE_1 ) ; } 
private void add ( com.google.gerrit.reviewdb.server.ReviewDb db , java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { try { VAR_1 . add ( new TYPE_1 ( VAR_2 . getKey ( ) , TYPE_3 . METHOD_1 ( VAR_2 ) ) ) ; } catch ( TYPE_4 e ) { throw e ; } catch ( TYPE_5 e ) { METHOD_2 ( db , VAR_2 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_6 ) . to ( VAR_7 ) . METHOD_6 ( VAR_8 , VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_7 ( VAR_11 ) . METHOD_7 ( VAR_2 ) ; } 
private TYPE_1 get ( ) { TYPE_1 p = VAR_1 ; if ( ( VAR_2 ) && ( p . METHOD_1 ( ) ) ) { final TYPE_1 VAR_3 ; try { VAR_3 = new TYPE_1 ( ) ; } catch ( java.io.IOException e ) { VAR_4 . error ( STRING_1 , e ) ; return p ; } p = VAR_3 ; VAR_1 = p ; } return p ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException , TYPE_2 { TYPE_3 git = METHOD_2 ( ) ; TYPE_4 . Result change = METHOD_3 ( git , true ) ; METHOD_3 ( git , false ) ; java.util.Set < java.lang.String > changes = METHOD_4 ( change ) ; org.junit.Assert.assertEquals ( 0 , changes . size ( ) ) ; } 
private java.util.Set < java.lang.String > METHOD_1 ( TYPE_1 notes ) throws com.google.gwtorm.server.OrmException { java.util.Set < java.lang.String > result = new TYPE_2 < > ( ) ; for ( com.google.gerrit.reviewdb.client.PatchSet ps : VAR_1 . METHOD_2 ( db . get ( ) , notes ) ) { java.util.List < java.lang.String > VAR_2 = ps . METHOD_3 ( ) ; if ( VAR_2 != null ) { result . METHOD_4 ( VAR_2 ) ; } } return result ; } 
public void add ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { if ( VAR_1 instanceof TYPE_2 ) { if ( ( VAR_3 ) == null ) { VAR_3 = TYPE_3 . METHOD_1 ( ) ; } VAR_3 . add ( ( ( TYPE_2 < ? > ) ( VAR_1 ) ) ) ; } VAR_2 . add ( VAR_1 ) ; } } 
public TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 , TYPE_5 , TYPE_6 , com.google.gwtorm.server.OrmException , java.io.IOException , TYPE_7 { final TYPE_8 result = VAR_1 . create ( VAR_2 , message ) . METHOD_1 ( ) ; if ( ( result . METHOD_2 ( ) . size ( ) ) > 0 ) { throw new TYPE_6 ( result . getChangeId ( ) ) ; } return VAR_3 . create ( result . getChangeId ( ) ) . METHOD_1 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 r = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , STRING_1 ) ; r . METHOD_3 ( ) ; r . METHOD_4 ( true ) ; TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , VAR_4 , STRING_1 ) ; TYPE_3 u = util . user ( VAR_1 , VAR_4 ) ; METHOD_5 ( STRING_2 , u . METHOD_6 ( STRING_3 ) . METHOD_7 ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 value ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . create ( project ) ; TYPE_3 . ProjectConfig config = TYPE_4 . METHOD_2 ( VAR_1 ) ; config . getProject ( ) . METHOD_1 ( value ) ; config . commit ( VAR_1 ) ; VAR_3 . METHOD_3 ( config . getProject ( ) ) ; } 
public void METHOD_1 ( final TYPE_1 . Key VAR_1 , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_2 , final com.google.gerrit.reviewdb.client.PatchSet.Id VAR_3 , final TYPE_2 VAR_4 , final TYPE_3 < TYPE_4 > VAR_5 ) { if ( VAR_3 == null ) { VAR_5 . METHOD_2 ( new TYPE_5 ( ) ) ; return ; } TYPE_6 . METHOD_3 ( VAR_6 . create ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ) . to ( VAR_5 ) ; } 
public static void METHOD_1 ( final TYPE_1 . NameKey project , final java.lang.String ref ) { for ( final TYPE_2 cfg : TYPE_3 . METHOD_2 ( ) ) { if ( cfg . METHOD_3 ( ref ) ) { for ( final TYPE_4 VAR_1 : cfg . METHOD_4 ( project ) ) { TYPE_3 . METHOD_5 ( project , ref , cfg , VAR_1 ) ; } } } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) ; factory ( VAR_8 . Factory class ) ; factory ( VAR_9 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_10 class ) . to ( VAR_11 class ) ; install ( VAR_12 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { synchronized ( VAR_2 ) { for ( TYPE_2 < java.lang.String , TYPE_3 < TYPE_4 < ? , ? > > > VAR_3 : VAR_4 . METHOD_2 ( VAR_1 . getName ( ) ) . METHOD_3 ( ) ) { TYPE_4 < ? , ? > VAR_5 = VAR_3 . getValue ( ) . get ( ) ; if ( VAR_2 . METHOD_4 ( VAR_5 ) ) { ( ( TYPE_5 < ? , ? > ) ( VAR_5 ) ) . METHOD_5 ( ) ; } } } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; factory ( VAR_2 . Factory class ) ; install ( new TYPE_2 ( VAR_3 ) ) ; if ( ( ( VAR_4 ) == null ) && ( ( base ) == null ) ) { install ( new TYPE_3 ( ) ) ; } else { install ( new TYPE_4 ( ) ) ; } } 
public TYPE_1 create ( ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( out . size ( ) ) ; for ( final com.google.gerrit.reviewdb.client.Account a : out . values ( ) ) { r . add ( new TYPE_2 ( a ) ) ; } return new TYPE_1 ( r ) ; } 
public boolean METHOD_1 ( ) { if ( ( TYPE_1 . equals ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_2 ( ) ) ) ) { if ( ! ( ( VAR_2 . METHOD_3 ( ) . METHOD_4 ( ) ) && ( METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) ) ) ) { return false ; } } return ( METHOD_8 ( VAR_3 ) ) && ( METHOD_9 ( ) ) ; } 
public static void METHOD_1 ( boolean VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_2 , TYPE_1 < java.lang.String > VAR_3 ) { TYPE_2 . METHOD_2 ( VAR_1 , id , VAR_2 ) . get ( new TYPE_3 < TYPE_4 , java.lang.String > ( VAR_3 ) { public void onSuccess ( TYPE_4 VAR_4 ) { VAR_5 . onSuccess ( TYPE_2 . METHOD_3 ( VAR_4 . METHOD_4 ( ) ) ) ; } } ) ; } 
private int METHOD_1 ( TYPE_1 < com.google.gerrit.server.query.change.ChangeData > s ) { int n = ( VAR_1 . METHOD_2 ( s ) ) ? VAR_1 . METHOD_3 ( s ) : VAR_2 ; return ( VAR_3 ) > 0 ? ( TYPE_2 . METHOD_4 ( n , VAR_3 ) ) + 1 : n ; } 
private boolean METHOD_1 ( com.google.gerrit.reviewdb.server.ReviewDb db ) throws com.google.gwtorm.server.OrmException { return ( ( ( ( ( METHOD_2 ( ) ) || ( VAR_1 . METHOD_3 ( METHOD_2 ( ) ) ) ) || ( VAR_1 . METHOD_1 ( ) ) ) && ( VAR_1 . METHOD_4 ( ) . METHOD_5 ( VAR_2 ) ) ) && ( METHOD_6 ( ) . METHOD_7 ( ) . METHOD_8 ( ) ) ) && ( ! ( METHOD_9 ( db ) ) ) ; } 
public TYPE_1 METHOD_1 ( final TYPE_2 . Id VAR_1 ) throws TYPE_3 { final TYPE_4 . AccountGroup group = VAR_2 . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( VAR_1 ) ; } return new TYPE_1 ( user . get ( ) , group ) ; } 
private void METHOD_1 ( final TYPE_1 VAR_1 ) throws java.io.IOException , TYPE_2 { try { final TYPE_3 VAR_2 = METHOD_2 ( ) ; VAR_2 . METHOD_3 ( VAR_3 class , new TYPE_4 < TYPE_1 > ( VAR_1 , this ) ) ; VAR_2 . create ( ) . METHOD_4 ( METHOD_5 ( VAR_1 ) , VAR_3 class ) ; } catch ( TYPE_5 err ) { VAR_4 = null ; VAR_5 = null ; throw err ; } } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( java.lang.String name ) throws java.lang.Exception { TYPE_3 create = VAR_1 . create ( name ) ; create . apply ( VAR_2 , new TYPE_4 ( ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_3 . METHOD_2 ( new com.google.gerrit.reviewdb.client.Project.NameKey ( name ) ) ) ; } 
private static TYPE_1 < ? extends TYPE_2 > METHOD_1 ( java.lang.String name , TYPE_3 VAR_1 ) throws TYPE_4 { if ( TYPE_5 . METHOD_2 ( name ) ) { return null ; } TYPE_1 < ? > VAR_2 = TYPE_1 . METHOD_3 ( name , false , VAR_1 ) ; if ( ! ( VAR_3 class . METHOD_4 ( VAR_2 ) ) ) { throw new TYPE_6 ( java.lang.String.format ( STRING_1 , name , VAR_3 class . getName ( ) ) ) ; } return ( ( TYPE_1 < ? extends TYPE_2 > ) ( VAR_2 ) ) ; } 
public void onSuccess ( final java.util.List < TYPE_1 > result ) { final java.util.List < TYPE_2 > r = new java.util.ArrayList < TYPE_2 > ( result . size ( ) ) ; for ( final TYPE_1 VAR_1 : result ) { r . add ( new TYPE_2 ( VAR_1 ) ) ; } VAR_2 . METHOD_1 ( req , new TYPE_3 ( r ) ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 < com.google.gerrit.reviewdb.client . AccountGroup > schema , TYPE_3 cfg , TYPE_4 VAR_1 ) throws java.io.IOException { if ( TYPE_5 . METHOD_2 ( cfg ) ) { return new TYPE_6 ( ) ; } TYPE_7 VAR_2 = TYPE_8 . METHOD_3 ( VAR_1 , ( ( VAR_3 ) + STRING_1 ) , schema ) ; return TYPE_9 . METHOD_4 ( VAR_2 ) ; } 
public boolean METHOD_1 ( final java.lang.String VAR_1 , final TYPE_1 key ) { return new TYPE_2 ( ( ( ( ( STRING_1 + VAR_1 ) + STRING_2 ) + ( METHOD_2 ( key ) ) ) + STRING_3 ) ) { TYPE_3 METHOD_3 ( ) throws java.io.IOException { java.lang.String VAR_2 = TYPE_4 . METHOD_4 ( VAR_1 , key ) ; return VAR_3 . METHOD_5 ( TYPE_5 . on ( STRING_4 ) . METHOD_6 ( VAR_4 , STRING_5 , VAR_1 ) , VAR_2 ) ; } } . METHOD_7 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = insert ( METHOD_3 ( repo ) ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_3 ( repo ) ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } 
public TYPE_1 . ChangeInfo apply ( TYPE_2 req , final TYPE_3 input ) throws TYPE_4 , TYPE_5 , com.google.gwtorm.server.OrmException { TYPE_6 VAR_1 = req . METHOD_1 ( ) ; TYPE_7 VAR_2 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; if ( ! ( VAR_1 . METHOD_4 ( VAR_3 . get ( ) ) ) ) { throw new TYPE_8 ( STRING_1 ) ; } com.google.gerrit.reviewdb.client.Change change = METHOD_5 ( VAR_1 , input . message , VAR_2 . METHOD_6 ( ) ) ; return VAR_4 . create ( VAR_5 ) . format ( change ) ; } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . METHOD_2 ( VAR_2 class ) . METHOD_3 ( VAR_3 class ) ; bind ( VAR_4 class ) . in ( VAR_5 ) ; bind ( VAR_6 class ) . METHOD_3 ( VAR_7 class ) . in ( VAR_5 ) ; factory ( VAR_8 . Factory class ) ; com.google.gerrit.extensions.registration.DynamicSet . bind ( binder ( ) , VAR_9 class ) . to ( VAR_10 class ) ; } 
private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { TYPE_2 . Key key = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ; return auth ( db . METHOD_3 ( ) . get ( key ) ) ; } finally { db . close ( ) ; } } catch ( com.google.gwtorm.server.OrmException e ) { METHOD_4 ( ) . log ( STRING_1 , e ) ; return null ; } } 
public TYPE_1 METHOD_1 ( ) { final TYPE_1 user = VAR_1 . METHOD_1 ( ) ; if ( ( user != null ) && ( user . METHOD_2 ( ) ) ) { TYPE_2 VAR_2 = VAR_3 . create ( ( ( TYPE_2 ) ( user ) ) . getAccountId ( ) ) ; VAR_2 . METHOD_3 ( user . METHOD_4 ( ) ) ; return VAR_2 ; } return user ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_1 , STRING_2 , STRING_3 ) ) . METHOD_5 ( null ) . METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( STRING_4 , VAR_1 . METHOD_9 ( ) ) ; } 
public TYPE_1 run ( final com.google.gerrit.reviewdb.server.ReviewDb db ) throws TYPE_2 , com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = getAccountId ( ) ; for ( final TYPE_3 . Key VAR_1 : VAR_2 ) { if ( ! ( me . equals ( VAR_1 . getParentKey ( ) ) ) ) throw new TYPE_2 ( new TYPE_4 ( ) ) ; } db . METHOD_1 ( ) . METHOD_2 ( VAR_2 ) ; return VAR_3 ; } 
public void METHOD_1 ( ) throws TYPE_1 , java.io.IOException { TYPE_2 VAR_1 = new TYPE_2 ( admin ) ; java.lang.String result = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_2 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_3 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_4 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_5 ) ) ; org.junit.Assert . METHOD_3 ( result . contains ( STRING_6 ) ) ; VAR_1 . close ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( ( ( ( STRING_1 + ( project . get ( ) ) ) + STRING_2 ) + ( branch . METHOD_2 ( ) ) ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; r . METHOD_4 ( ) ; } 
private static TYPE_1 METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id psId , org.eclipse.jgit.lib.ObjectId VAR_1 , int VAR_2 ) { TYPE_1 result = new TYPE_1 ( ) ; VAR_3 = psId . getParentKey ( ) . get ( ) ; result . commit = new TYPE_2 ( ) ; VAR_4 . commit = VAR_1 . name ( ) ; VAR_5 = psId . get ( ) ; VAR_6 = VAR_2 ; result . status = STRING_1 ; return result ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < TYPE_2 > repo = METHOD_2 ( STRING_1 ) ; com.google.gerrit.reviewdb.client.Change VAR_1 = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; com.google.gerrit.reviewdb.client.Change VAR_2 = insert ( METHOD_3 ( repo , null , null , null , null ) ) ; METHOD_4 ( STRING_2 ) ; METHOD_4 ( VAR_1 . getId ( ) . get ( ) , VAR_1 ) ; METHOD_4 ( VAR_2 . getId ( ) . get ( ) , VAR_2 ) ; } 
public void delete ( TYPE_1 edit ) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit . getChange ( ) ; org.eclipse.jgit.lib.Repository repo = VAR_1 . METHOD_1 ( change . getProject ( ) ) ; try { TYPE_2 . METHOD_2 ( repo , edit ) ; } finally { repo . close ( ) ; } VAR_2 . index ( db . get ( ) , change ) ; } 
private TYPE_1 . OrmException METHOD_1 ( final java.lang.String VAR_1 , final TYPE_2 err ) { if ( ( ( err . METHOD_2 ( ) ) == null ) && ( ( err . METHOD_3 ( ) ) != null ) ) { err . METHOD_4 ( err . METHOD_3 ( ) ) ; } return schema . METHOD_5 ( ) . METHOD_1 ( VAR_1 , TYPE_3 . METHOD_6 ( ) , err ) ; } 
private static void METHOD_1 ( final java.lang.String in ) { try { TYPE_1 . METHOD_2 ( in ) ; METHOD_3 ( ( STRING_1 + in ) ) ; } catch ( TYPE_2 e ) { assertEquals ( ( STRING_2 + in ) , e . getMessage ( ) ) ; } } 
private static void METHOD_1 ( byte [ ] VAR_1 , TYPE_1 p ) { while ( ( ( p . value ) < ( VAR_1 . length ) ) && ( ( VAR_1 [ p . value ] ) == CHAR_1 ) ) { ( p . value ) ++ ; } } 
public TYPE_1 METHOD_1 ( ) throws java.io.IOException { if ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . equals ( VAR_2 ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 ) ; } return VAR_1 . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) . METHOD_4 ( VAR_3 ) ; } 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { METHOD_1 ( db , VAR_1 ) ; final TYPE_2 . AccountGroup group = db . METHOD_2 ( ) . get ( VAR_1 ) ; if ( group == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } group . METHOD_3 ( VAR_2 ) ; db . METHOD_2 ( ) . update ( java.util.Collections.singleton ( group ) ) ; return VAR_3 ; } 
public TYPE_1 run ( final TYPE_2 . ReviewDb db ) throws TYPE_3 , TYPE_4 . OrmException { final TYPE_2 . Change change = db . changes ( ) . get ( id ) ; if ( change == null ) { throw new TYPE_3 ( new TYPE_5 ( ) ) ; } final TYPE_6 VAR_1 = new TYPE_6 ( ) ; final TYPE_1 d = new TYPE_1 ( ) ; d . METHOD_1 ( db , new TYPE_7 ( db ) , VAR_1 , change ) ; return d ; } 
public org.eclipse.jgit.lib.ObjectId commit ( ) throws com.google.gwtorm.server.OrmException , java.io.IOException { TYPE_1 VAR_1 = VAR_2 . create ( METHOD_1 ( ) ) ; VAR_1 . add ( this ) ; VAR_1 . METHOD_2 ( getChange ( ) ) ; VAR_1 . METHOD_3 ( ) ; return METHOD_4 ( ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } else { TYPE_4 VAR_5 = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; return VAR_5 . METHOD_4 ( VAR_3 ) ; } } 
protected void METHOD_1 ( ) { bind ( VAR_1 class ) . to ( VAR_2 class ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; install ( new TYPE_1 ( ) ) ; } 
private Project . NameKey METHOD_1 ( TYPE_1 p ) { java.lang.String projectName = VAR_1 . METHOD_2 ( p ) . toString ( ) ; if ( ( VAR_2 ) != CHAR_1 ) { projectName = projectName . METHOD_3 ( VAR_2 , CHAR_1 ) ; } if ( projectName . METHOD_4 ( TYPE_2 ) ) { int VAR_3 = ( projectName . length ( ) ) - ( TYPE_2 . length ( ) ) ; projectName = projectName . METHOD_5 ( 0 , VAR_3 ) ; } return new com.google.gerrit.reviewdb.client.Project.NameKey ( projectName ) ; } 
private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 . getName ( ) , new TYPE_2 < TYPE_3 > ( ) { public void onSuccess ( TYPE_3 result ) { TYPE_4 . display ( VAR_2 ) ; } public void METHOD_3 ( TYPE_5 VAR_3 ) { VAR_4 . METHOD_4 ( STRING_2 ) ; super . METHOD_3 ( VAR_3 ) ; } } ) ; } 
private static TYPE_1 . Test METHOD_1 ( java.lang.String VAR_1 ) { if ( STRING_1 . equals ( VAR_1 ) ) { return VAR_2 ; } else if ( STRING_2 . equals ( VAR_1 ) ) { return VAR_3 ; } else if ( STRING_3 . equals ( VAR_1 ) ) { return VAR_4 ; } else { throw new TYPE_2 ( ( STRING_4 + VAR_1 ) ) ; } } 
private void METHOD_1 ( final TYPE_1 event ) { TYPE_2 change = VAR_1 . get ( ) ; if ( VAR_2 . METHOD_2 ( change ) ) { METHOD_3 ( change ) ; } try { METHOD_4 ( change ) ; } catch ( com.google.gwtorm.server.OrmException | TYPE_3 | java.io.IOException | TYPE_4 e ) { VAR_3 . error ( ( STRING_1 + ( VAR_4 ) ) , e ) ; } } 
private TYPE_1 METHOD_1 ( ) { final java.util.List < TYPE_2 > modules = new java.util.ArrayList < TYPE_2 > ( ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_2 class ) ) ; modules.add ( VAR_1 . METHOD_2 ( VAR_3 class ) ) ; return VAR_4 . METHOD_3 ( modules ) ; } 
protected TYPE_1 < java.lang.String > METHOD_1 ( ) { final TYPE_1 < java.lang.String > VAR_1 = new TYPE_2 < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; VAR_1 . add ( STRING_2 ) ; for ( final TYPE_3 c : METHOD_2 ( ) ) { VAR_1 . add ( c . getName ( ) ) ; } return VAR_1 ; } 
public java.lang.String METHOD_1 ( ) { final java.lang.String s = METHOD_2 ( ) ; if ( ( s == null ) || ( ( s . length ( ) ) == 0 ) ) { return STRING_1 ; } final java.lang.String [ ] VAR_1 = s . METHOD_3 ( STRING_2 ) ; if ( ( VAR_1 . length ) < INT_1 ) { return STRING_1 ; } return VAR_1 [ INT_1 ] ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String config = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; TYPE_1 VAR_1 = new TYPE_1 ( new TYPE_2 ( projectName , config ) , new TYPE_3 ( STRING_5 , STRING_6 ) , new TYPE_4 ( ) ) ; com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( projectName , STRING_7 , STRING_8 ) ) . METHOD_3 ( ) ; } 
public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.client.Account.Id VAR_1 , TYPE_1 < java.lang.String > VAR_2 , java.util.Set < java.lang.String > VAR_3 , java.util.Set < java.lang.String > VAR_4 , TYPE_2 VAR_5 ) { if ( ! ( VAR_6 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return ; } try { METHOD_1 ( util . METHOD_4 ( change ) , util . METHOD_5 ( VAR_1 ) , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( com.google.gwtorm.server.OrmException e ) { VAR_7 . error ( STRING_1 , e ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 ; repo . branch ( STRING_2 ) . commit ( ) . add ( STRING_3 , VAR_1 ) . create ( ) ; java.lang.String VAR_2 = METHOD_2 ( STRING_4 ) ; org.junit.Assert . METHOD_3 ( VAR_2 . contains ( STRING_5 ) ) ; } 
void METHOD_1 ( ) throws java.io.IOException , TYPE_1 { try { if ( ( VAR_1 ) == null ) { return ; } message . insert ( 0 , STRING_1 ) ; VAR_2 . create ( project , git , VAR_3 ) . METHOD_2 ( VAR_1 , VAR_4 , VAR_5 , message . toString ( ) ) ; } finally { if ( ( VAR_3 ) != null ) { VAR_3 . METHOD_3 ( ) ; } } } 
public static void METHOD_1 ( java.util.Set < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { for ( TYPE_1 VAR_3 : VAR_2 . METHOD_2 ( ) ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_3 ( VAR_3 ) ) . METHOD_4 ( ) ; } com.google.common.truth.Truth.assertThat ( ( ( TYPE_3 < ? > ) ( VAR_1 ) ) ) . isEmpty ( ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 info ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . css ( ) . METHOD_4 ( ) ) ; if ( ( ! ( TYPE_4 . equals ( info . path ( ) ) ) ) && ( ! ( info . METHOD_5 ( ) ) ) ) { VAR_1 . append ( ( ( info . METHOD_6 ( ) ) - ( info . METHOD_7 ( ) ) ) ) ; } VAR_1 . METHOD_8 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 , VAR_2 ) ; assertThat ( VAR_3 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_4 ) . to ( VAR_2 ) . to ( VAR_5 ) . METHOD_6 ( VAR_6 , VAR_7 , VAR_8 ) . METHOD_6 ( VAR_9 ) . METHOD_7 ( VAR_10 ) . METHOD_7 ( VAR_11 ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 revision ) { switch ( type ) { case VAR_1 : case VAR_2 : break ; case VAR_3 : case VAR_4 : case VAR_5 : case VAR_6 : case VAR_7 : case VAR_8 : case VAR_9 : case VAR_10 : case VAR_11 : case VAR_12 : case VAR_13 : default : revision = TYPE_3 . METHOD_2 ( revision , VAR_14 ) ; TYPE_4 . METHOD_3 ( ( revision == ( VAR_14 ) ) , STRING_1 , type ) ; break ; } this . VAR_15 = revision ; return this ; } 
public final java.util.List < java.lang.String > METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_2 : TYPE_2 . METHOD_2 ( METHOD_3 ( ) ) ) { VAR_1 . add ( VAR_2 . get ( ) ) ; } return VAR_1 ; } 
public static com.google.gerrit.reviewdb.client.PatchSet METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , org.eclipse.jgit.lib.ObjectId revision , com.google.gerrit.reviewdb.client.Account.Id VAR_1 ) { com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet ( id ) ; ps . METHOD_2 ( new TYPE_1 ( revision . name ( ) ) ) ; ps . METHOD_3 ( VAR_1 ) ; ps . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; return ps ; } 
private java.util.Set < java.lang.String > METHOD_1 ( java.lang.String VAR_1 ) throws com.google.gwtorm.server.OrmException { org.eclipse.jgit.lib.Repository repo ; try { repo = VAR_2 . METHOD_2 ( VAR_3 ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } try { TYPE_1 VAR_4 = repo . METHOD_3 ( ) ; return VAR_4 . METHOD_4 ( VAR_1 ) . METHOD_5 ( ) ; } catch ( java.io.IOException e ) { throw new com.google.gwtorm.server.OrmException ( e ) ; } finally { repo . close ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 . changeId , VAR_3 , VAR_4 ) ; assertThat ( VAR_5 ) . METHOD_4 ( STRING_1 , VAR_1 ) . METHOD_5 ( VAR_3 , VAR_6 ) . METHOD_6 ( VAR_7 , VAR_8 ) . to ( VAR_9 ) . METHOD_6 ( VAR_10 ) . METHOD_5 ( VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 cfg ) { METHOD_2 ( TYPE_2 . METHOD_3 ( true , java.util.Collections . METHOD_4 ( TYPE_3 . METHOD_5 ( VAR_1 , VAR_2 ) ) , VAR_3 ) ) ; TYPE_4 < TYPE_5 > factory ; if ( cfg . METHOD_6 ( STRING_1 , null , STRING_2 , false ) ) { factory = new TYPE_6 . Factory ( ) ; } else { factory = TYPE_7 . METHOD_7 ( ) ; } METHOD_8 ( new TYPE_8 ( factory ) ) ; } 
private TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 , java.lang.String VAR_2 ) throws java.io.IOException { if ( VAR_2 . equals ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) { return VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_3 , VAR_4 ) ; } TYPE_4 VAR_5 = VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_2 ) ; return VAR_5 . METHOD_4 ( VAR_3 ) ; } 
void METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 , TYPE_3 VAR_2 , TYPE_1 < TYPE_4 < TYPE_5 > > VAR_3 , TYPE_1 < TYPE_4 < TYPE_5 > > VAR_4 , TYPE_6 VAR_5 ) { TYPE_4 < TYPE_2 > VAR_6 = VAR_1 . values ( ) ; TYPE_2 . METHOD_2 ( VAR_6 ) ; TYPE_7 cmd = new TYPE_7 ( VAR_1 , VAR_6 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; if ( cmd . METHOD_3 ( ) ) { cmd . METHOD_4 ( ) ; TYPE_8 . get ( ) . METHOD_5 ( cmd ) ; } } 
public static TYPE_1 METHOD_1 ( java.lang.String name , org.eclipse.jgit.lib.ObjectId id , org.eclipse.jgit.revwalk.RevWalk walk ) throws java.io.IOException , TYPE_2 { TYPE_3 VAR_1 = walk . METHOD_2 ( id ) ; TYPE_3 VAR_2 = walk . METHOD_1 ( VAR_1 ) ; return new TYPE_1 ( name , VAR_1 , VAR_1 . METHOD_3 ( ) , VAR_2 , VAR_2 . METHOD_3 ( ) ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( STRING_1 ) ) ; final TYPE_4 ui = TYPE_5 . METHOD_2 ( VAR_2 class ) ; TYPE_5 . METHOD_3 ( ui ) ; TYPE_6 lib = new TYPE_6 ( new TYPE_7 < TYPE_8 > ( ) { public TYPE_8 get ( ) { return new TYPE_8 ( ui , VAR_1 ) ; } } ) ; METHOD_4 ( VAR_3 ) ; METHOD_4 ( VAR_4 ) ; TYPE_5 . METHOD_5 ( ui ) ; } 
public TYPE_1 < com.google.gerrit.reviewdb.client.Account.Id > METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema . METHOD_2 ( ) ; try { final TYPE_2 . Key key = new TYPE_2 . Key ( VAR_2 , VAR_1 ) ; final TYPE_2 id = db . METHOD_3 ( ) . get ( key ) ; if ( id != null ) { return TYPE_1 . of ( id . getAccountId ( ) ) ; } return TYPE_1 . METHOD_4 ( ) ; } finally { db . close ( ) ; } } 
public void METHOD_1 ( TYPE_1 returnValue ) { TYPE_2 model = ( ( TYPE_2 ) ( getWindow ( ) ) ) ; model . METHOD_2 ( ) ; METHOD_3 ( ) ; if ( model . METHOD_4 ( ) ) { METHOD_5 ( returnValue . METHOD_6 ( ) ) ; METHOD_7 ( ) ; METHOD_8 ( ) . METHOD_9 ( ) ; } } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_3 = TYPE_2 . METHOD_3 ( ) ; VAR_3 . put ( VAR_4 , VAR_1 ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_5 = TYPE_2 . METHOD_4 ( VAR_3 ) ; TYPE_3 . METHOD_5 ( VAR_2 , VAR_5 , TYPE_2 . METHOD_6 ( ) ) ; TYPE_4 . assertEquals ( VAR_2 . METHOD_7 ( ) . get ( 0 ) . METHOD_8 ( ) , new TYPE_5 ( STRING_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 command ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( null ) . when ( VAR_1 ) . METHOD_6 ( null ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , TYPE_2 . METHOD_4 ( METHOD_5 ( ) , STRING_4 ) ) . append ( STRING_5 , METHOD_6 ( ) ) . append ( STRING_6 , TYPE_2 . METHOD_4 ( METHOD_7 ( ) , STRING_4 ) ) . append ( STRING_7 , METHOD_8 ( ) ) . append ( STRING_8 , METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( METHOD_4 ( ) , VAR_1 ) ) ; METHOD_5 ( ) ; METHOD_6 ( 0 , 1 ) ; METHOD_7 ( ) ; METHOD_8 ( 1 ) ; METHOD_9 ( ) ; VAR_2 . METHOD_10 ( ) ; TYPE_1 response = resource . get ( ) ; METHOD_11 ( response , 0 ) ; METHOD_12 ( response ) ; } 
private void METHOD_1 ( java.lang.Object sender , TYPE_1 args ) { VAR_1 . METHOD_2 ( ) ; if ( ( METHOD_3 ( ) . getEntity ( ) ) != null ) { METHOD_4 ( true ) ; VAR_2 . setEntity ( TYPE_2 . METHOD_5 ( METHOD_3 ( ) . getEntity ( ) ) ) ; } } 
protected static TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . METHOD_1 ( ) ; TYPE_1 VAR_3 = new TYPE_3 ( VAR_1 ) ; VAR_3 . METHOD_2 ( ) . METHOD_3 ( VAR_4 , VAR_5 ) ; if ( VAR_6 ) { TYPE_4 VAR_7 = VAR_1 . METHOD_4 ( ) ; VAR_7 . METHOD_5 ( VAR_8 ) ; } return VAR_3 ; } 
protected TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { for ( TYPE_2 nic : vm . METHOD_2 ( ) ) { if ( ( nic . METHOD_3 ( ) ) == null ) { return ! ( TYPE_3 . METHOD_4 ( vm . METHOD_5 ( ) ) ) ? new TYPE_1 . ValidationResult ( VAR_1 ) : VAR_2 ; } } return VAR_2 ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > VAR_2 ) { final org.ovirt.engine.core.compat.Guid vmId = VAR_1 . getId ( ) ; for ( TYPE_3 disk : TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ) { org.ovirt.engine.core.compat.Guid VAR_3 = disk . getId ( ) ; TYPE_2 VAR_4 = TYPE_4 . METHOD_4 ( vmId , VAR_3 , TYPE_4 . METHOD_5 ( VAR_1 , vmId ) ) ; TYPE_4 . METHOD_6 ( VAR_1 , VAR_4 , VAR_3 , VAR_2 ) ; } } 
private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( STRING_1 ) ; cmd = org.mockito.Mockito . METHOD_3 ( new TYPE_2 ( params ) ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; params . METHOD_5 ( null ) ; params . METHOD_6 ( null ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; } 
public java.lang.String METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { byte [ ] VAR_1 = id . METHOD_2 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; for ( int VAR_3 = 0 ; VAR_3 < ( VAR_1 . length ) ; VAR_3 ++ ) { VAR_2 . append ( ( STRING_1 + ( java.lang.String . METHOD_3 ( STRING_2 , VAR_1 [ VAR_3 ] ) ) ) ) ; } return VAR_2 . toString ( ) ; } 
private void METHOD_1 ( TYPE_1 . AuditLogType VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( STRING_1 , METHOD_3 ( ) . name ( ) . METHOD_4 ( ) ) ; VAR_2 . METHOD_2 ( STRING_2 , TYPE_3 . METHOD_5 ( ) . getName ( ) ) ; VAR_2 . METHOD_6 ( TYPE_3 . METHOD_7 ( ) ) ; VAR_3 . log ( VAR_2 , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( VAR_2 . getModel ( ) . getSelectedItem ( ) ) == null ) { METHOD_2 ( ) . METHOD_3 ( ) ; return ; } METHOD_2 ( ) . METHOD_4 ( VAR_2 . getModel ( ) ) ; METHOD_2 ( ) . METHOD_5 ( true ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( VAR_2 ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.String VAR_1 = ( ( java.lang.String ) ( returnValue ) ) ; boolean VAR_2 = ! ( VAR_1 . equals ( STRING_1 ) ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; java.util.List < org.ovirt.engine.core.compat.Guid > VAR_4 = VAR_5 . METHOD_4 ( VAR_6 ) ; TYPE_2 . assertEquals ( STRING_1 , 1 , VAR_4 . size ( ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_4 . METHOD_6 ( VAR_3 ) ) ; } 
public int METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return ( VAR_1 . METHOD_2 ( ) ) < ( VAR_2 . METHOD_2 ( ) ) ? - 1 : ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 . METHOD_2 ( ) ) ? 0 : 1 ; } 
public TYPE_1 < java.util.List < TYPE_2 > > METHOD_1 ( java.util.List < TYPE_3 > VAR_1 ) throws TYPE_4 { final TYPE_5 VAR_2 = new TYPE_5 ( VAR_1 ) ; for ( final TYPE_3 VAR_3 : VAR_1 ) { this . VAR_4 . METHOD_2 ( VAR_3 , VAR_2 ) ; } this . METHOD_3 ( ) . METHOD_4 ( TYPE_6 . METHOD_5 ( VAR_1 ) ) ; METHOD_6 ( VAR_1 , VAR_2 ) ; return VAR_2 ; } 
public static < TYPE_1 > java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > > METHOD_1 ( java.util.ArrayList < TYPE_1 > list ) { java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > > VAR_1 = new java.util.ArrayList < org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > > ( ) ; if ( list != null ) { for ( TYPE_1 item : list ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > model = new org.ovirt.engine.ui.uicommonweb.models.EntityModel < TYPE_1 > ( ) ; model . setEntity ( item ) ; VAR_1 . add ( model ) ; } } return VAR_1 ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; final org.ovirt.engine.core.compat.Guid VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( STRING_1 , VAR_1 , TYPE_2 . name ( ) ) ; METHOD_4 ( VAR_3 , new TYPE_3 ( VAR_1 , VAR_4 ) ) ; } 
public boolean equals ( java.lang.Object other ) { if ( ( other != null ) && ( other instanceof TYPE_1 ) ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( other ) ) ; return ( VAR_2 . equals ( VAR_1 . METHOD_1 ( ) ) ) && ( ( VAR_3 ) == ( VAR_1 . METHOD_2 ( ) ) ) ; } return false ; } 
void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { this . METHOD_2 ( true ) ; VAR_2 . METHOD_3 ( VAR_1 . size ( ) ) ; int VAR_3 = 0 ; for ( TYPE_1 VAR_4 : VAR_1 ) { METHOD_4 ( VAR_3 , 0 , METHOD_5 ( VAR_4 ) ) ; METHOD_4 ( VAR_3 , 1 , METHOD_6 ( VAR_4 ) ) ; METHOD_4 ( VAR_3 , 2 , METHOD_7 ( VAR_4 ) ) ; METHOD_4 ( VAR_3 , INT_1 , METHOD_8 ( VAR_4 ) ) ; VAR_3 ++ ; } } 
private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) == null ) { org.ovirt.engine.core.compat.Guid VAR_3 = TYPE_2 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( TYPE_3 . equals ( VAR_3 ) ) ) { VAR_3 = TYPE_2 . METHOD_3 ( VAR_1 ) ; } VAR_2 = VAR_3 ; } return VAR_2 ; } 
private java.util.Map < java.lang.String , java.lang.Object > METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 ) { java.util.Map < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > VAR_2 = new java.util.HashMap < java.lang.String , java.util.Map < java.lang.String , java.lang.Object > > ( ) ; VAR_2 . put ( STRING_1 , VAR_1 ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_3 = TYPE_1 . METHOD_2 ( VAR_2 ) ; METHOD_3 ( ) ; return VAR_3 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; final TYPE_1 model = METHOD_3 ( 0 ) ; model . METHOD_4 ( TYPE_2 . METHOD_5 ( VAR_2 [ 2 ] ) ) ; model . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ; try { METHOD_8 ( resource . METHOD_9 ( model ) , 0 ) ; METHOD_10 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_11 ( VAR_3 , VAR_4 ) ; } } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_1 . getId ( ) , VAR_3 , TYPE_2 . METHOD_2 ( VAR_4 , STRING_1 ) ) ; VAR_2 . METHOD_3 ( true ) ; TYPE_3 . getInstance ( ) . METHOD_4 ( VAR_5 , VAR_2 , TYPE_4 . METHOD_5 ( ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( result ) ) ; if ( ( VAR_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( VAR_1 . METHOD_1 ( ) ) ; } else { METHOD_2 ( new java.util.ArrayList < TYPE_2 > ( ) ) ; } METHOD_3 ( ) ; } 
protected TYPE_1 . Disk METHOD_1 ( TYPE_1 . Disk model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) ) ; model . METHOD_4 ( TYPE_2 . METHOD_3 ( VAR_2 class ) ) ; model . METHOD_5 ( TYPE_3 . METHOD_6 ( TYPE_2 . METHOD_3 ( VAR_3 class ) ) ) ; model . METHOD_7 ( new TYPE_4 ( ) ) ; return model ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( TYPE_3 . METHOD_3 ( ) , TYPE_3 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_4 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; VAR_4 . METHOD_1 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; for ( TYPE_1 iface : VAR_1 ) { METHOD_6 ( iface ) ; } } 
public void METHOD_1 ( ) { VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( VAR_2 ) . get ( TYPE_1 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_6 ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_6 ( VAR_1 ) ) . thenReturn ( METHOD_7 ( VAR_7 ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getModel ( ) . METHOD_1 ( ) . setItems ( VAR_1 ) ; if ( VAR_1 != null ) { for ( TYPE_1 VAR_2 : VAR_1 ) { if ( VAR_2 . getId ( ) . equals ( VAR_3 ) ) { getModel ( ) . METHOD_1 ( ) . setSelectedItem ( VAR_2 ) ; break ; } } } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_4 , VAR_5 . METHOD_3 ( ) , new java.lang.String [ ] { VAR_6 } , new java.lang.Object [ ] { VAR_7 [ 1 ] } , METHOD_4 ( VAR_3 ) , VAR_2 ) ; VAR_8 . METHOD_5 ( ) ; } 
protected void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( VAR_1 ) . METHOD_3 ( TYPE_1 . any ( VAR_2 . VM class ) , TYPE_1 . METHOD_4 ( VAR_3 . String class ) , TYPE_1 . any ( VAR_4 class ) , TYPE_1 . METHOD_4 ( VAR_2 . Disk class ) ) ; org.mockito.Mockito.doReturn ( false ) . when ( VAR_1 ) . METHOD_5 ( TYPE_1 . any ( VAR_2 . VM class ) ) ; } 
protected void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VM vm : vms ) { TYPE_2 . METHOD_6 ( vm ) ; TYPE_3 . METHOD_7 ( vm . METHOD_8 ( ) , new TYPE_4 ( ) ) ; TYPE_5 . METHOD_9 ( vm ) ; } TYPE_1 . METHOD_10 ( ) . METHOD_11 ( vms ) ; } 
public void METHOD_1 ( final TYPE_1 < org.ovirt.engine.core.compat.Guid > VAR_1 ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( ) { public void METHOD_3 ( ) { for ( org.ovirt.engine.core.compat.Guid vmId : VAR_1 ) { TYPE_4 . getInstance ( ) . METHOD_4 ( VAR_2 , new TYPE_5 ( vmId ) ) ; } } } ) ; } 
private java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { java.lang.String result = STRING_1 ; if ( ( TYPE_1 . METHOD_2 ( VAR_1 ) ) && ( TYPE_1 . METHOD_2 ( VAR_2 ) ) ) { if ( VAR_3 . METHOD_3 ( VAR_1 ) ) { java.util.HashMap < java.lang.String , java.lang.String > VAR_4 = VAR_3 . get ( VAR_1 ) ; result = ( VAR_4 . METHOD_3 ( VAR_2 ) ) ? VAR_4 . get ( VAR_2 ) : VAR_2 ; } else { VAR_5 . METHOD_4 ( VAR_6 , VAR_1 ) ; } } return result ; } 
protected boolean METHOD_1 ( ) { boolean result ; if ( ( METHOD_2 ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) result = false ; else if ( ! ( TYPE_1 . METHOD_4 ( ) ) ) result = true ; else if ( METHOD_2 ( ) . METHOD_5 ( ) ) result = true ; else result = false ; return result ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; TYPE_2 VAR_3 = ( ( VAR_2 . size ( ) ) > 0 ) ? VAR_2 . get ( 0 ) : null ; VAR_1 . METHOD_2 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { double VAR_1 = INT_1 * ( TYPE_1 . METHOD_2 ( INT_2 , 2 ) ) ; int VAR_2 = TYPE_2 . METHOD_3 ( ( ( long ) ( VAR_1 ) ) , VAR_3 , VAR_4 ) . METHOD_4 ( ) ; TYPE_3 . assertEquals ( VAR_2 , INT_1 ) ; } 
protected boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_1 . getId ( ) ; org.ovirt.engine.core.compat.Guid VAR_3 = VAR_1 . getStoragePoolId ( ) . getValue ( ) ; TYPE_1 params = new TYPE_1 ( VAR_2 , VAR_3 ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return TYPE_2 . METHOD_4 ( ) . METHOD_5 ( VAR_4 , params ) . getSucceeded ( ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.models.EntityModel model ) { this . model = model ; VAR_1 . METHOD_2 ( ) ; for ( TYPE_1 item : VAR_2 ) { if ( ( item . METHOD_3 ( ) ) && ( item . METHOD_4 ( ) ) ) { VAR_1 . METHOD_5 ( item ) ; } } model . METHOD_6 ( ) . METHOD_7 ( VAR_3 ) ; model . METHOD_6 ( ) . METHOD_8 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , VAR_2 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , null , null , false ) , null ) ) ; METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cluster ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_7 ( ) ; TYPE_3 . METHOD_8 ( command . validate ( ) ) ; } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 . RunVmCommand < TYPE_2 > VAR_3 = METHOD_2 ( ) ; METHOD_3 ( VAR_3 ) ; TYPE_2 VAR_4 = command . getParameters ( ) ; VAR_4 . METHOD_4 ( VAR_1 ) ; VAR_4 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = VAR_5 . get ( command . getParameters ( ) . METHOD_7 ( ) ) ; return vm ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . Network ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; } 
public void METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new java.util.HashMap < > ( ) ; java.util.Map < java.lang.String , java.lang.Object > disk = new java.util.HashMap < > ( ) ; disk . put ( VAR_2 , VAR_3 ) ; VAR_1 . put ( STRING_1 , disk ) ; VAR_1 . put ( STRING_2 , disk ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_4 = TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , VAR_4 , false ) ; } 
private void METHOD_1 ( TYPE_1 . Disk model , int VAR_1 ) { assertEquals ( VAR_2 [ VAR_1 ] . toString ( ) , model . getId ( ) ) ; METHOD_2 ( model . METHOD_3 ( ) ) ; METHOD_2 ( ( ! ( model . METHOD_4 ( ) ) ) ) ; METHOD_2 ( model . METHOD_5 ( ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( INT_1 ) ; TYPE_2 VAR_4 = TYPE_3 . METHOD_2 ( STRING_1 ) ; TYPE_4 VAR_5 = VAR_4 . METHOD_3 ( VAR_1 , true ) ; TYPE_5 . METHOD_4 ( ( STRING_2 + VAR_1 ) , VAR_5 . METHOD_5 ( ) ) ; java.lang.String VAR_6 = VAR_3 . METHOD_6 ( VAR_5 , true ) ; VAR_7 . METHOD_7 ( VAR_2 ) ; VAR_7 . METHOD_7 ( VAR_6 ) ; TYPE_5 . assertEquals ( VAR_2 , VAR_6 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; org.mockito.Mockito . METHOD_6 ( VAR_2 ) . METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito . METHOD_6 ( VAR_2 , org.mockito.Mockito . METHOD_7 ( ) ) . METHOD_8 ( TYPE_2 . METHOD_3 ( ) ) ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 iface ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( iface . METHOD_3 ( ) . getValue ( ) ) ; VAR_1 . METHOD_4 ( STRING_1 , iface . METHOD_5 ( ) ) ; VAR_1 . METHOD_4 ( STRING_2 , iface . getName ( ) ) ; return VAR_1 ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( VAR_3 < java.lang.Boolean > METHOD_5 ( VAR_4 ) ) { VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_2 . METHOD_6 ( ) ; } else { VAR_2 . METHOD_7 ( ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; } VAR_1 . METHOD_2 ( STRING_4 ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , TYPE_1 . instance ( ) . METHOD_3 ( INT_1 ) ) ; org.mockito.Mockito.when ( cluster . METHOD_4 ( ) ) . thenReturn ( true ) ; validator = new TYPE_2 ( VAR_3 , VAR_4 , cluster , VAR_5 ) ; TYPE_3 . METHOD_5 ( validator . METHOD_1 ( ) , TYPE_4 . METHOD_6 ( ) ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.VM > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ( ( org.ovirt.engine.core.compat.Guid ) ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ) ) ; } return VAR_1 ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { final java.util.List < TYPE_1 > VAR_2 = VAR_3 . METHOD_2 ( VAR_1 . getId ( ) ) ; final TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_4 = VAR_2 . METHOD_3 ( ) . map ( TYPE_3 : : METHOD_4 ) . METHOD_5 ( TYPE_4 . METHOD_6 ( ) ) ; VAR_1 . METHOD_7 ( ( ( VAR_4 . size ( ) ) > 1 ? null : VAR_4 . METHOD_8 ( ) . METHOD_9 ( ) ) ) ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > list = new TYPE_1 < org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( ) ; list . add ( new TYPE_2 ( ) ) ; list . add ( new TYPE_3 ( ) ) ; list . add ( new TYPE_4 ( ) ) ; list . add ( new TYPE_5 ( ) ) ; list . add ( new TYPE_6 ( ) ) ; METHOD_2 ( list ) ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = true ; java.util.List < java.lang.String > VAR_2 = getReturnValue ( ) . METHOD_2 ( ) ; java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_1 > VAR_3 = new java.util.HashMap < org.ovirt.engine.core.compat.Guid , TYPE_1 > ( ) ; VAR_1 = METHOD_3 ( VAR_2 , VAR_3 ) ; if ( VAR_1 && ( getParameters ( ) . METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } return VAR_1 && ( METHOD_6 ( VAR_1 , VAR_2 , VAR_3 ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.ArrayList < TYPE_1 > VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_5 . put ( VAR_1 , VAR_4 ) ; VAR_4 . METHOD_2 ( VAR_6 ) ; VAR_4 . METHOD_3 ( METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( VAR_2 ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; VAR_4 . METHOD_7 ( VAR_7 ) ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_5 ( ) ) ; if ( ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . get ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) ) != null ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_6 ( ) . METHOD_4 ( TYPE_1 . METHOD_2 ( ) . METHOD_7 ( ) ) ; } } super . METHOD_1 ( ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) : null ; } } ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_2 ( VAR_2 ) ; if ( VAR_1 != null ) { VAR_3 . METHOD_3 ( VAR_1 ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_3 , aQuery ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { org.ovirt.engine.core.compat . Version version = VAR_1 . METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities.VDS vds = VAR_1 . METHOD_3 ( ) ; if ( ( ( ( TYPE_3 . METHOD_4 ( version ) ) && ( ( VAR_2 ) == ( vds . METHOD_5 ( ) ) ) ) && ( TYPE_3 . METHOD_6 ( version ) ) ) && ( TYPE_3 . METHOD_7 ( version ) ) ) { return new TYPE_4 ( VAR_1 ) ; } return new TYPE_5 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; final TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; final TYPE_2 VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 [ 2 ] } , METHOD_4 ( ) ) ; super . METHOD_1 ( ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; cmd . getParameters ( ) . getVm ( ) . METHOD_3 ( VAR_1 ) ; TYPE_1 cluster = new TYPE_1 ( ) ; cluster . METHOD_4 ( VAR_1 ) ; cluster . METHOD_5 ( TYPE_2 . METHOD_6 ( ) ) ; org.mockito.Mockito.doReturn ( cluster ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) ; } 
private void METHOD_1 ( ) { java.util.Map < org.ovirt.engine.core.compat.Guid , java.lang.String > VAR_1 = METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , null , new TYPE_2 < java.lang.String > ( VAR_1 . METHOD_5 ( ) ) ) ; } VAR_3 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ; } 
public boolean equals ( java.lang.Object VAR_1 ) { return ( ( VAR_1 != null ) && ( ( METHOD_1 ( ) ) == ( VAR_1 . METHOD_1 ( ) ) ) ) && ( map . equals ( ( ( TYPE_1 ) ( VAR_1 ) ) . map ) ) ; } 
private void METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) throws TYPE_1 , TYPE_2 { TYPE_3 context = null ; try { context = new TYPE_3 ( ) ; TYPE_4 . METHOD_2 ( context ) . METHOD_3 ( VAR_3 , new TYPE_5 ( VAR_1 , VAR_2 ) ) ; } finally { try { context . METHOD_4 ( ) ; } catch ( TYPE_2 e ) { VAR_4 . error ( ( STRING_1 + STRING_2 ) , e ) ; } } } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 . VdcQueryReturnValue returnValue = ( ( TYPE_1 . VdcQueryReturnValue ) ( VAR_1 ) ) ; java.lang.Object VAR_2 = returnValue . getReturnValue ( ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( VAR_2 ) ) ; this . VAR_3 = VAR_3 ; METHOD_2 ( ) ; METHOD_3 ( ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) ; org.mockito.Mockito.when ( host . METHOD_2 ( ) ) . thenReturn ( METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_6 ( org.mockito.Mockito . METHOD_7 ( VAR_3 . VDS class ) ) ) ; TYPE_3 . METHOD_8 ( validator . METHOD_9 ( ) , TYPE_4 . METHOD_10 ( VAR_4 ) ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ) { METHOD_4 ( ) ; } else if ( METHOD_5 ( ) . equals ( command ) ) { METHOD_6 ( ) ; } else if ( METHOD_7 ( ) . equals ( command ) ) { METHOD_8 ( ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( args ) ) ; if ( STRING_1 . equals ( VAR_3 ) ) { boolean VAR_4 = VAR_5 . getModel ( ) . METHOD_2 ( ) ; METHOD_3 ( VAR_4 ) ; } TYPE_4 . METHOD_4 ( this , this ) ; } 
public void METHOD_1 ( int VAR_1 ) { try { TYPE_1 . getInstance ( ) . METHOD_2 ( METHOD_3 ( ) . METHOD_4 ( ) ) . METHOD_5 ( METHOD_3 ( ) , METHOD_6 ( ) . get ( VAR_1 ) . getId ( ) ) ; } catch ( TYPE_2 e ) { VAR_2 . METHOD_7 ( STRING_1 , METHOD_6 ( ) . get ( VAR_1 ) . getName ( ) , METHOD_8 ( ) . METHOD_9 ( ) , e ) ; } } 
private java.util.List < java.lang.Integer > METHOD_1 ( int VAR_1 ) { java.util.List < java.lang.Integer > VAR_2 = new java.util.ArrayList < java.lang.Integer > ( ) ; int VAR_3 = METHOD_2 ( ) ; for ( int i = 1 ; i <= ( TYPE_1 . METHOD_3 ( VAR_3 , VAR_1 ) ) ; i ++ ) { if ( ( VAR_3 % i ) == 0 ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.Boolean VAR_1 , java.lang.String VAR_2 , java.lang.Integer VAR_3 , java.lang.String VAR_4 ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = new org.ovirt.engine.core.common.businessentities . VdsNetworkInterface ( ) ; iface . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; iface . METHOD_3 ( name ) ; iface . METHOD_4 ( VAR_1 ) ; iface . METHOD_5 ( VAR_2 ) ; iface . METHOD_6 ( VAR_3 ) ; iface . METHOD_7 ( VAR_4 ) ; return iface ; } 
private boolean METHOD_1 ( TYPE_1 . VdcQueryReturnValue returnValue , TYPE_2 model ) { model . METHOD_2 ( null ) ; if ( ! ( returnValue . getSucceeded ( ) ) ) { model . METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( returnValue . METHOD_5 ( ) ) ) ; METHOD_6 ( ) . setEntity ( false ) ; return true ; } return false ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( TYPE_1 status , java.lang.String name , boolean VAR_1 ) { final org.ovirt.engine.core.common.businessentities.StorageDomain domain = METHOD_2 ( status , name , VAR_2 ) ; domain . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( domain ) ) ; cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return domain ; } 
public void METHOD_1 ( ) { parameters . METHOD_2 ( TYPE_1 ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_1 ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( TYPE_1 . METHOD_3 ( ) ) ; TYPE_2 . METHOD_5 ( command ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_2 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue ) ) ; VAR_1 . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_3 . METHOD_3 ( ) . METHOD_4 ( ) ) ) ; } 
protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , java.util.List < TYPE_1 > VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_2 ( true , vmId ) ; for ( TYPE_1 VAR_4 : VAR_1 ) { if ( ( VAR_4 . getId ( ) ) == null ) { VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; } VAR_4 . METHOD_4 ( vmId ) ; VAR_3 . add ( VAR_4 , VAR_2 ) ; } } 
private void METHOD_1 ( int VAR_1 ) { java.util.List < java.lang.Integer > VAR_2 = METHOD_2 ( VAR_3 ) ; java.util.List < java.lang.Integer > VAR_4 = METHOD_2 ( VAR_5 ) ; TYPE_1 . METHOD_3 ( VAR_2 ) ; for ( java.lang.Integer VAR_6 : VAR_2 ) { for ( java.lang.Integer VAR_7 : VAR_4 ) { if ( ( VAR_6 * VAR_7 ) == VAR_1 ) { getModel ( ) . METHOD_4 ( ) . setSelectedItem ( VAR_7 ) ; getModel ( ) . METHOD_5 ( ) . setSelectedItem ( VAR_6 ) ; return ; } } } } 
private static void METHOD_1 ( TYPE_1 vm , int VAR_1 ) { for ( int VAR_2 = 1 ; VAR_2 <= VAR_1 ; VAR_2 ++ ) { TYPE_2 . METHOD_2 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , vm . getId ( ) ) , VAR_3 , VAR_4 , TYPE_2 . METHOD_4 ( ) , true , false ) ; } } 
private org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( TYPE_1 . DiskImage disk ) { if ( ! ( disk . METHOD_2 ( ) ) ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > vms = TYPE_2 . METHOD_3 ( ) . METHOD_4 ( disk . getId ( ) , false ) ; if ( ! ( vms . isEmpty ( ) ) ) { return vms . get ( 0 ) ; } } return null ; } 
public java.lang.Object METHOD_1 ( java.lang.Object id ) throws TYPE_1 { org.ovirt.engine.core.common.businessentities.VM vm = METHOD_2 ( VAR_1 . VM class , VAR_2 , METHOD_3 ( VAR_3 , id ) , id . toString ( ) ) ; TYPE_2 model = new TYPE_2 ( ) ; model . setId ( vm . getId ( ) . toString ( ) ) ; return TYPE_3 . METHOD_4 ( METHOD_5 ( ) , model ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 from ) { TYPE_1 to = new TYPE_1 ( ) ; if ( from . METHOD_2 ( ) ) { to . METHOD_3 ( from . METHOD_4 ( ) ) ; } if ( from . METHOD_5 ( ) ) { to . METHOD_6 ( from . METHOD_7 ( ) ) ; } return to ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_2 ( VAR_1 . getId ( ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_2 ( VAR_2 . getId ( ) ) ; TYPE_1 . assertEquals ( validator . METHOD_3 ( ) , VAR_3 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( true ) ; METHOD_3 ( ) ; VAR_1 . METHOD_4 ( STRING_1 , TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( ) , TYPE_1 . METHOD_5 ( ) . METHOD_8 ( ) , ( ( TYPE_1 . METHOD_9 ( ) ) != null ? TYPE_1 . METHOD_9 ( ) . METHOD_8 ( ) : STRING_2 ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , TYPE_2 . VM entity ) { TYPE_3 < java.lang.String > VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 ) ; VAR_4 . METHOD_3 ( VAR_1 , model ) ; if ( VAR_1 . METHOD_4 ( STRING_1 ) ) { METHOD_5 ( model , entity , VAR_3 ) ; } VAR_4 . METHOD_6 ( model ) ; VAR_4 . METHOD_7 ( model ) ; TYPE_5 . METHOD_8 ( model , this ) ; return model ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( cluster . METHOD_2 ( ) ) . thenReturn ( org.mockito.Mockito . METHOD_3 ( VAR_1 . Version class ) ) ; validator = org.mockito.Mockito . METHOD_4 ( new TYPE_1 ( VAR_2 , cluster , VAR_3 ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( validator ) . METHOD_5 ( TYPE_2 . any ( VAR_4 class ) ) ; TYPE_3 . METHOD_6 ( validator . METHOD_1 ( TYPE_4 . instance ( ) . METHOD_7 ( VAR_4 class ) ) , TYPE_5 . METHOD_8 ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery aQuery = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; aQuery . METHOD_2 ( this ) ; VAR_1 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( result ) ) ; if ( ( VAR_2 != null ) && ( ( VAR_2 . length ( ) ) > 0 ) ) { METHOD_3 ( ) . setEntity ( VAR_2 ) ; } } } ; TYPE_1 . METHOD_4 ( aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 < java.lang.String > VAR_1 = TYPE_2 . METHOD_2 ( INT_1 , null ) ; TYPE_3 . METHOD_3 ( ( ( VAR_1 . size ( ) ) == 2 ) ) ; for ( java.lang.String VAR_2 : TYPE_4 . METHOD_4 ( STRING_1 ) ) { TYPE_3 . METHOD_3 ( VAR_1 . METHOD_5 ( VAR_2 . METHOD_6 ( ) ) ) ; } } 
public void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { if ( ( ( ( TYPE_2 . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . METHOD_3 ( ) ) != null ) ) && ( ! ( TYPE_2 . METHOD_2 ( ) . METHOD_4 ( ) . equals ( VAR_2 ) ) ) ) { VAR_1 . add ( new TYPE_1 ( TYPE_2 . METHOD_3 ( ) , VAR_3 , VAR_4 ) ) ; } } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { VAR_3 . METHOD_1 ( VAR_2 . getId ( ) . toString ( ) ) ; } if ( VAR_3 == null ) { return ; } METHOD_2 ( VAR_3 ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , TYPE_2 < java.lang.String > > ) ( ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_4 ( VAR_5 ) , VAR_1 ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( vmId , other . vmId ) ) && ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ; model . METHOD_3 ( model , VAR_3 , VAR_2 , vm . METHOD_4 ( ) ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( vm . getId ( ) ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; VAR_2 . getParameters ( ) . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( true ) . when ( VAR_2 ) . METHOD_4 ( VAR_1 ) ; VAR_2 . validate ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_4 ( VAR_1 ) ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_5 , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , VAR_2 ) . addValue ( STRING_4 , VAR_3 ) ) ; return VAR_4 ; } 
protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) ) != null ) { this . VAR_1 . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) ; } METHOD_3 ( ) ; METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( true ) ; } 
private TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 ) { TYPE_1 . ValidationResult VAR_2 = VAR_3 ; VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_3 ( ) ; VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_4 ( VAR_1 ) ; VAR_2 = ( METHOD_2 ( VAR_2 ) ) ? VAR_2 : METHOD_5 ( VAR_1 ) ; return VAR_2 ; } 
private void METHOD_1 ( ) { TYPE_1 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ; TYPE_1 . METHOD_7 ( ) . METHOD_8 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ; METHOD_9 ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) . getId ( ) ) ; TYPE_1 . METHOD_10 ( null ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; getModel ( ) . METHOD_1 ( ) . setEntity ( ( ! ( VAR_1 . isEmpty ( ) ) ) ) ; getModel ( ) . METHOD_2 ( ( VAR_1 . isEmpty ( ) ? new TYPE_1 ( ) : VAR_1 . get ( 0 ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( null ) ; VAR_2 . add ( VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_5 ) ; METHOD_3 ( 1 , VAR_4 ) ; VAR_6 . METHOD_4 ( VAR_1 ) ; try { METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( STRING_1 ) ; } catch ( TYPE_5 VAR_7 ) { METHOD_7 ( VAR_7 , VAR_8 , VAR_4 ) ; } finally { VAR_2 . METHOD_8 ( ) ; } } 
protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( false ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { TYPE_1 . getVm ( ) . METHOD_3 ( VAR_1 ) ; TYPE_1 . getVm ( ) . METHOD_4 ( null ) ; org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . getVm ( ) . METHOD_7 ( ) ) ; } else { VAR_2 . METHOD_8 ( STRING_1 ) ; } METHOD_9 ( true ) ; } 
private TYPE_1 < java.util.List < org.ovirt.engine.core.compat.Guid > , org.ovirt.engine.core.compat.Guid > METHOD_1 ( TYPE_2 VAR_1 , org.ovirt.engine.core.common.businessentities.VDSGroup cluster ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts = METHOD_2 ( ) . METHOD_3 ( new TYPE_3 [ ] { TYPE_3 . VDS , VAR_2 } ) ; return VAR_1 . METHOD_4 ( cluster , hosts , cluster . METHOD_5 ( ) , new java.util.ArrayList < java.lang.String > ( ) ) ; } 
private void METHOD_1 ( ) { if ( ( METHOD_2 ( ) . getSelectedItem ( ) ) != null ) { TYPE_1 . METHOD_3 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_4 ( hosts ) ; } } ) ) ; } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( METHOD_2 ( ) ) { if ( ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_1 ) ) { TYPE_1 . METHOD_5 ( ) . METHOD_6 ( true ) ; TYPE_1 . METHOD_7 ( ) . METHOD_8 ( TYPE_1 . METHOD_5 ( ) . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_9 ( true ) ; } } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 < TYPE_3 > > VAR_2 ) { java.util.List < TYPE_3 > VAR_3 = new java.util.ArrayList ( VAR_1 . METHOD_2 ( ) ) ; for ( TYPE_2 < TYPE_3 > VAR_4 : VAR_2 ) { VAR_3 = TYPE_4 . METHOD_3 ( VAR_3 , VAR_4 ) ; } return ! ( VAR_3 . isEmpty ( ) ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; METHOD_3 ( ) . setIsChangable ( false ) ; METHOD_3 ( ) . setEntity ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( true ) ; METHOD_3 ( ) . setEntity ( TYPE_3 . METHOD_6 ( VAR_2 ) ) ; } } 
public java.lang.String METHOD_1 ( ) { if ( METHOD_2 ( ) ) { final java.lang.String VAR_1 = ( ( java.lang.String ) ( TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ) ) ; if ( ! ( VAR_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ) ) { VAR_3 = VAR_2 . METHOD_7 ( ) ; } return VAR_2 . METHOD_5 ( ) . get ( VAR_1 ) ; } else { return VAR_2 . METHOD_5 ( ) . get ( VAR_3 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? source : new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > > ( ) ; } } ; TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , VAR_3 , aQuery ) ; } 
protected boolean validate ( TYPE_1 . ValidationResult VAR_1 ) { if ( ! ( VAR_1 . METHOD_1 ( ) ) ) { addCanDoActionMessage ( VAR_1 . METHOD_2 ( ) ) ; if ( ( VAR_1 . METHOD_3 ( ) ) != null ) { for ( java.lang.String VAR_2 : VAR_1 . METHOD_3 ( ) ) { addCanDoActionMessage ( VAR_2 ) ; } } } return VAR_1 . METHOD_1 ( ) ; } 
public int METHOD_1 ( TYPE_1 < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > VAR_1 , TYPE_1 < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface , org.ovirt.engine.core.common.businessentities.VDS > VAR_2 ) { int VAR_3 = VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_3 ( ) ) ; if ( VAR_3 != 0 ) { return VAR_3 ; } return VAR_1 . METHOD_2 ( ) . METHOD_5 ( ) . METHOD_4 ( VAR_2 . METHOD_2 ( ) . METHOD_5 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 nic , java.lang.String VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_2 ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface i : VAR_2 ) { if ( i . getName ( ) . equals ( VAR_1 ) ) { nic . METHOD_2 ( ) . add ( METHOD_3 ( i . getId ( ) . toString ( ) ) ) ; break ; } } return nic ; } 
protected TYPE_1 METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > VAR_1 ) { TYPE_1 VAR_2 = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_3 , METHOD_3 ( VAR_1 ) , TYPE_3 . METHOD_4 ( TYPE_4 . METHOD_5 ( ) ) ) ; if ( VAR_2 . getSucceeded ( ) ) { TYPE_4 . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; } return VAR_2 ; } 
public static TYPE_1 . ValidationResult METHOD_1 ( TYPE_2 VAR_1 , org.ovirt.engine.core.compat . Version version ) { if ( ! ( TYPE_3 . METHOD_2 ( version ) ) ) return VAR_2 ; if ( ( VAR_1 . METHOD_3 ( ) ) == null ) { return TYPE_4 . METHOD_4 ( VAR_1 ) ; } else { return new TYPE_5 ( VAR_1 . METHOD_3 ( ) ) . METHOD_5 ( VAR_1 . METHOD_6 ( ) ) ; } } 
public java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 ) { java.lang.String value = get ( VAR_1 , VAR_2 ) ; if ( ( value == null ) || ( value . isEmpty ( ) ) ) { return TYPE_2 . METHOD_2 ( ) ; } return TYPE_3 . METHOD_3 ( value . METHOD_4 ( STRING_1 ) ) ; } 
public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) ; getVm ( ) . METHOD_5 ( VAR_1 ) ; TYPE_1 . getInstance ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_2 , new TYPE_2 ( METHOD_8 ( ) , getVm ( ) . METHOD_4 ( ) ) ) ; METHOD_2 ( ) . METHOD_9 ( ) ; return null ; } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; METHOD_2 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( VAR_1 , new TYPE_1 ( vm . getId ( ) ) ) ) ; setItems ( METHOD_4 ( ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid VAR_1 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_8 ( ) ; TYPE_1 . METHOD_9 ( command . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; final TYPE_1 VAR_2 = METHOD_3 ( 0 ) ; VAR_2 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( TYPE_2 . METHOD_7 ( VAR_3 [ 2 ] ) ) ; try { VAR_4 . add ( VAR_2 ) ; METHOD_8 ( STRING_1 ) ; } catch ( TYPE_3 VAR_5 ) { METHOD_9 ( VAR_5 , VAR_6 ) ; } } 
public void METHOD_1 ( ) { params = METHOD_2 ( ) ; command = org.mockito.Mockito . METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( params . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( params . METHOD_5 ( ) ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_7 ( ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model ) { model . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_1 class ) . value ( ) ) ; for ( TYPE_3 VAR_2 : model . METHOD_4 ( ) . METHOD_4 ( ) ) { VAR_2 . METHOD_5 ( TYPE_2 . METHOD_3 ( VAR_3 class ) . value ( ) ) ; VAR_2 . METHOD_6 ( null ) ; VAR_2 . METHOD_7 ( null ) ; } return model ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { ( ( TYPE_3 . ViewDef ) ( METHOD_2 ( ) ) ) . METHOD_3 ( ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( model . METHOD_4 ( ) . getSelectedItem ( ) ) ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; TYPE_3 . METHOD_3 ( validator . METHOD_4 ( VAR_1 . getId ( ) ) , TYPE_4 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { return ; } boolean VAR_3 = ( ! ( TYPE_1 . METHOD_3 ( this . VAR_1 , VAR_1 ) ) ) || ( ( this . VAR_2 ) != VAR_2 ) ; this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; if ( VAR_3 ) { METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . METHOD_4 ( result . isEmpty ( ) ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . get ( 0 ) . getId ( ) ) ; } 
public java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { TYPE_1 result = new TYPE_1 ( ) ; result . append ( ( TYPE_2 . isEmpty ( VAR_1 ) ? STRING_1 : VAR_1 ) ) ; result . append ( ( ( result . length ( ) ) == 0 ? STRING_1 : STRING_2 ) ) ; result . append ( ( TYPE_2 . isEmpty ( VAR_2 ) ? STRING_1 : VAR_2 ) ) ; return result . toString ( ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < TYPE_2 > VAR_1 = ( ( TYPE_3 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_1 ( ) . setItems ( VAR_1 ) ; model . METHOD_1 ( ) . METHOD_2 ( VAR_1 . isEmpty ( ) ) ; model . METHOD_3 ( ) ; METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 0 ) ; METHOD_2 ( 0 ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 , false ) ; model . setId ( TYPE_3 . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_4 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( TYPE_2 [ ] VAR_1 ) { java.util.ArrayList < TYPE_1 > result = new java.util.ArrayList < TYPE_1 > ( VAR_1 . length ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { result . add ( TYPE_3 . METHOD_2 ( VAR_2 ) ) ; } return result ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 ) ; VAR_2 . METHOD_4 ( new TYPE_3 ( VAR_3 . Disk , VAR_1 ) ) ; VAR_2 . METHOD_5 ( VAR_2 ) ; VAR_2 . METHOD_6 ( VAR_4 ) ; TYPE_4 returnValue = METHOD_7 ( VAR_4 , VAR_2 ) ; if ( returnValue . getSucceeded ( ) ) { METHOD_8 ( returnValue . METHOD_9 ( ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( STRING_2 ) ; TYPE_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_2 ) ) < 0 ) ) ; TYPE_2 . METHOD_2 ( ( ( VAR_1 . METHOD_3 ( VAR_1 ) ) == 0 ) ) ; TYPE_2 . METHOD_2 ( ( ( VAR_2 . METHOD_3 ( VAR_1 ) ) > 0 ) ) ; } 
protected void METHOD_1 ( ) { command = METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_4 ( TYPE_1 . any ( VAR_1 . Version class ) ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_5 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_4 ( cmd . getReturnValue ( ) . METHOD_5 ( ) . METHOD_6 ( TYPE_4 . toString ( ) ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { METHOD_2 ( ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_3 = METHOD_3 ( VAR_4 ) ; VAR_3 . METHOD_4 ( VAR_5 ) ; VAR_3 . METHOD_5 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain VAR_6 = METHOD_3 ( VAR_7 ) ; VAR_6 . METHOD_4 ( VAR_5 ) ; VAR_6 . METHOD_5 ( VAR_2 ) ; METHOD_6 ( VAR_8 , VAR_9 ) ; METHOD_7 ( VAR_10 , org.ovirt.engine.core.compat.Guid . METHOD_8 ( ) , VAR_8 ) ; TYPE_2 . METHOD_9 ( command . validate ( ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { final int VAR_1 = INT_1 ; final int VAR_2 = INT_2 ; org.ovirt.engine.core.compat.Guid VAR_3 = org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ; METHOD_3 ( VAR_3 , VAR_4 ) ; METHOD_4 ( ) ; TYPE_1 VAR_5 = METHOD_5 ( VAR_3 , VAR_1 , VAR_2 ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_5 , true ) ; TYPE_2 . METHOD_8 ( command . METHOD_9 ( ) ) ; } 
private TYPE_1 METHOD_1 ( java.util.List < TYPE_2 > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( VAR_1 , VAR_2 , VAR_4 ) ; VAR_3 . METHOD_2 ( ( ! ( TYPE_3 . getReturnValue ( ) . METHOD_3 ( ) . isEmpty ( ) ) ) ) ; return METHOD_4 ( VAR_3 , TYPE_3 . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( vmId , VAR_1 ) ; cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito . METHOD_3 ( ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_3 = STRING_1 ; java.util.ArrayList < java.lang.String > VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 ) ; METHOD_3 ( STRING_2 , ( ( VAR_4 . size ( ) ) == 1 ) ) ; } 
public static TYPE_1 . ValidationResult METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ; if ( VAR_2 == null ) { return new TYPE_1 . ValidationResult ( VAR_3 , java.lang.String . METHOD_3 ( STRING_1 , STRING_2 , VAR_1 . toString ( ) ) ) ; } return VAR_4 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; } 
protected boolean validate ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = TYPE_1 . getParameters ( ) . METHOD_1 ( ) ; if ( METHOD_2 ( ) ) { return METHOD_3 ( VAR_1 ) ; } else if ( ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) == ( VAR_2 ) ) { return METHOD_5 ( VAR_3 ) ; } return METHOD_6 ( ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds , TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( vds . METHOD_3 ( ) ) ) { java.lang.Integer VAR_2 = VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 ) ; VAR_5 . METHOD_5 ( VAR_2 ) ; if ( VAR_5 . METHOD_6 ( TYPE_2 . METHOD_7 ( ) ) ) { return true ; } } return false ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( false ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_1 ) ; TYPE_2 . METHOD_8 ( command . validate ( ) ) ; TYPE_2 . METHOD_9 ( command . getReturnValue ( ) . METHOD_10 ( ) . METHOD_11 ( TYPE_3 . toString ( ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_5 ( VAR_4 , VAR_2 , false ) ) ; TYPE_2 . METHOD_4 ( STRING_1 , VAR_3 . METHOD_6 ( VAR_4 , false ) ) ; org.mockito.Mockito . METHOD_7 ( VAR_1 ) . METHOD_8 ( TYPE_3 . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( VAR_2 ) ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( METHOD_5 ( VAR_3 ) ) . when ( VAR_1 ) . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_4 ) ) . when ( VAR_5 ) . METHOD_6 ( VAR_4 ) ; org.mockito.Mockito.doReturn ( METHOD_7 ( VAR_6 ) ) . when ( VAR_5 ) . METHOD_6 ( VAR_6 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( 1 , true ) ; VAR_2 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_7 ( VAR_3 ) ; } } 
private boolean METHOD_1 ( ) { int VAR_1 = ( TYPE_1 . METHOD_2 ( ) ) ? 0 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_1 . METHOD_5 ( ) . getName ( ) , TYPE_2 . name ( ) ) ; if ( VAR_1 > 0 ) { addCanDoActionMessage ( VAR_2 ) ; TYPE_1 . METHOD_6 ( STRING_1 , VAR_1 ) ; return false ; } else { return true ; } } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 parameters = METHOD_2 ( ) ; parameters . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ; if ( TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) { parameters . METHOD_6 ( VAR_1 ) ; parameters . METHOD_7 ( TYPE_2 . METHOD_8 ( ) . get ( 0 ) . METHOD_9 ( ) ) ; } return parameters ; } 
private void METHOD_1 ( java.lang.Object sender , TYPE_1 args ) { if ( STRING_1 . equals ( METHOD_2 ( ) . getEntity ( ) ) ) { METHOD_3 ( ) . setIsChangable ( false ) ; METHOD_3 ( ) . setSelectedItem ( STRING_1 ) ; } else { METHOD_3 ( ) . setIsChangable ( true ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( STRING_1 . equals ( ( ( TYPE_3 ) ( args ) ) . VAR_2 ) ) { boolean value = METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( value ) ; METHOD_5 ( ) . setEntity ( ( value && ( ! ( TYPE_4 . METHOD_6 ( ( ( java.lang.String ) ( METHOD_3 ( ) . getSelectedItem ( ) ) ) ) ) ) ) ) ; } } 
private boolean METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_1 = METHOD_2 ( VAR_2 ) ; if ( VAR_1 == null ) { return true ; } java.util.List < TYPE_1 . DiskImage > VAR_3 = METHOD_3 ( VAR_1 ) ; if ( ! ( METHOD_4 ( VAR_3 ) ) ) { return false ; } if ( ! ( VAR_3 . isEmpty ( ) ) ) { return METHOD_5 ( VAR_4 , METHOD_6 ( VAR_3 ) , TYPE_2 . METHOD_7 ( ) ) . getSucceeded ( ) ; } return true ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDSGroup cluster , org.ovirt.engine.core.common.businessentities.VDS VAR_1 , java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 ) { if ( cluster . METHOD_2 ( ) ) { log . METHOD_3 ( STRING_1 , cluster . METHOD_4 ( ) ) ; return ; } METHOD_5 ( cluster . getId ( ) ) ; try { java.util.List < TYPE_1 > VAR_3 = METHOD_6 ( cluster , VAR_1 , VAR_2 ) ; if ( VAR_3 != null ) { METHOD_7 ( VAR_2 , VAR_3 ) ; } } finally { METHOD_8 ( cluster . getId ( ) ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ; org.ovirt.engine.core.compat.Guid VAR_1 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; TYPE_1 VAR_2 = METHOD_2 ( VAR_1 , vmId ) ; TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_2 ) ) == 0 ) ) ; TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , vmId ) ; TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_3 ) ) == 0 ) ) ; } 
private java.util.List < TYPE_1 . DiskImage > METHOD_1 ( ) { TYPE_1 . DiskImage disk = new TYPE_1 . DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( TYPE_2 . METHOD_4 ( VAR_2 ) ) ) ; java.util.List < TYPE_1 . DiskImage > VAR_3 = new java.util.ArrayList < TYPE_1 . DiskImage > ( ) ; VAR_3 . add ( disk ) ; return VAR_3 ; } 
protected void METHOD_1 ( ) { if ( ( ( TYPE_1 . METHOD_2 ( ) ) != null ) && ( METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ) ) { org.ovirt.engine.core.compat.Guid VAR_1 = TYPE_1 . METHOD_5 ( ) . METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; TYPE_1 . METHOD_12 ( true ) ; } } 
private static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_2 , TYPE_3 user ) { return ( VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ) || ( ( TYPE_4 . METHOD_3 ( ) . METHOD_4 ( user . getId ( ) , VAR_3 , VAR_1 . getId ( ) , VAR_4 ) ) != null ) ; } 
public static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { try { if ( VAR_1 != null ) { TYPE_3 VAR_3 = TYPE_4 . METHOD_2 ( ) . METHOD_3 ( VAR_1 . getValue ( ) ) ; if ( VAR_3 != null ) { VAR_3 . METHOD_4 ( VAR_2 ) ; TYPE_4 . METHOD_2 ( ) . METHOD_5 ( VAR_3 ) ; } } } catch ( java.lang.Exception e ) { VAR_4 . METHOD_6 ( STRING_1 , VAR_1 , VAR_2 , e ) ; } } 
private void METHOD_1 ( TYPE_1 version , TYPE_2 [ ] VAR_1 ) { if ( TYPE_3 . METHOD_2 ( version , VAR_2 ) ) { version . METHOD_3 ( new TYPE_4 ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { version . METHOD_4 ( ) . METHOD_4 ( ) . add ( VAR_3 . value ( ) ) ; } } } 
protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( VAR_1 == ( TYPE_1 . VM ) ) ? true : false ; TYPE_2 tempVar = new TYPE_2 ( ) ; tempVar . METHOD_3 ( METHOD_4 ( ) ) ; tempVar . METHOD_5 ( VAR_1 ) ; tempVar . METHOD_6 ( VAR_2 ) ; METHOD_7 ( org.ovirt.engine.ui.frontend.Frontend . METHOD_8 ( VAR_3 , tempVar ) ) ; setItems ( METHOD_9 ( ) . METHOD_10 ( ) ) ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == true ) { return VAR_1 ; } else if ( ( METHOD_3 ( ) . getEntity ( ) ) == true ) { return VAR_2 ; } else if ( ( METHOD_4 ( ) . getEntity ( ) ) == true ) { return VAR_3 ; } return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) ; TYPE_2 . METHOD_3 ( VAR_1 ) ; TYPE_1 VAR_3 = METHOD_4 ( ) ; VAR_1 = dao . get ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( VAR_2 ) ) ; TYPE_2 . METHOD_5 ( VAR_1 ) ; TYPE_2 . assertEquals ( VAR_3 , VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 status , boolean VAR_1 ) { this . VAR_2 = status ; if ( VAR_1 ) { TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( ) ; try { TYPE_4 . METHOD_3 ( METHOD_4 ( ) , METHOD_5 ( ) , VAR_2 ) ; } finally { if ( VAR_3 != null ) { TYPE_3 . METHOD_6 ( VAR_3 ) ; } } } } 
protected boolean METHOD_1 ( ) { boolean returnValue = ( ( ( ( ( super . METHOD_1 ( ) ) && ( TYPE_1 . METHOD_2 ( ) ) ) && ( METHOD_3 ( VAR_1 ) ) ) && ( TYPE_1 . METHOD_4 ( ) ) ) && ( METHOD_5 ( ) ) ) && ( METHOD_6 ( ) ) ; return returnValue ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( cmd . METHOD_4 ( VAR_1 ) ) ; java.util.List < java.lang.String > VAR_2 = cmd . getReturnValue ( ) . METHOD_5 ( ) ; TYPE_1 . assertEquals ( VAR_2 . size ( ) , 2 ) ; TYPE_1 . assertEquals ( VAR_2 . get ( 0 ) , TYPE_2 . toString ( ) ) ; TYPE_1 . assertEquals ( VAR_2 . get ( 1 ) , java.lang.String . METHOD_6 ( STRING_1 , VAR_1 ) ) ; } 
protected java.lang.String METHOD_1 ( TYPE_1 pool ) { return getEntity ( VAR_1 . VDSGroup class , VAR_2 , new TYPE_2 ( pool . METHOD_2 ( ) . getName ( ) ) , ( STRING_1 + ( pool . METHOD_2 ( ) . getName ( ) ) ) ) . getId ( ) . toString ( ) ; } 
private static org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( ( ( model . METHOD_2 ( ) ) && ( model . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( model . METHOD_3 ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) ) { return TYPE_2 . METHOD_7 ( model . METHOD_3 ( ) . METHOD_5 ( ) . getId ( ) ) ; } else { return VAR_1 == null ? VAR_2 : VAR_1 ; } } 
private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > args ) throws TYPE_1 { TYPE_2 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_2 = ( ( java.lang.String ) ( args . get ( STRING_2 ) ) ) ; if ( VAR_2 != null ) { TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 ) ; VAR_3 . METHOD_3 ( new TYPE_4 ( ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; } TYPE_5 . METHOD_5 ( ( ( TYPE_6 ) ( args . get ( STRING_3 ) ) ) ) ; } 
protected void METHOD_1 ( ) { if ( ( getModel ( ) . METHOD_2 ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = getModel ( ) . METHOD_2 ( ) ; boolean VAR_1 = ( ( cluster . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ) >= 0 ) && ( cluster . METHOD_5 ( ) . equals ( VAR_3 ) ) ; getModel ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_1 ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; assertEquals ( 2 , VAR_1 . METHOD_3 ( ) . size ( ) ) ; METHOD_4 ( VAR_1 . METHOD_3 ( ) . get ( 0 ) , 1 , INT_1 , false , STRING_1 , 0 , false , false , false ) ; METHOD_4 ( VAR_1 . METHOD_3 ( ) . get ( 1 ) , INT_2 , INT_3 , true , STRING_2 , INT_4 , true , true , true ) ; METHOD_5 ( VAR_1 ) ; METHOD_6 ( VAR_1 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = new TYPE_4 ( TYPE_5 . METHOD_2 ( ) ) ; TYPE_6 . METHOD_3 ( VAR_2 , VAR_1 ) ; return new TYPE_1 ( VAR_2 , TYPE_6 . METHOD_4 ( VAR_1 ) , TYPE_6 . METHOD_5 ( VAR_2 . getId ( ) , VAR_1 ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( VAR_2 ) { if ( ( ( java.lang.Boolean ) ( ( ( org.ovirt.engine.ui.uicommonweb.models.EntityModel ) ( sender ) ) . getEntity ( ) ) ) ) { METHOD_2 ( ) . setEntity ( true ) ; METHOD_2 ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . setIsChangable ( false ) ; } else { METHOD_2 ( ) . setIsChangable ( true ) ; } } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false ) ; VAR_1 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; assertEquals ( VAR_2 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new TYPE_1 ( ) { public void onSuccess ( java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; } 
public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; for ( org.ovirt.engine.core.common.businessentities.StorageDomain domain : VAR_1 ) { if ( ( domain . METHOD_2 ( ) ) == ( VAR_2 ) ) { return domain ; } } } return null ; } 
private TYPE_1 METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , TYPE_2 . Disk disk , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_3 . setId ( new TYPE_3 ( vm . getId ( ) , disk . getId ( ) ) ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_2 ) ; return VAR_3 ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 domain : VAR_1 ) { if ( TYPE_2 . METHOD_2 ( domain ) ) { VAR_2 . add ( domain ) ; } } METHOD_3 ( ) . setItems ( VAR_2 ) ; if ( VAR_3 ) { METHOD_4 ( ) ; } else { METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) { if ( validate ( false ) ) { VAR_1 . METHOD_1 ( ) ; ( ( TYPE_1 . DiskImage ) ( METHOD_2 ( ) . METHOD_3 ( ) ) ) . METHOD_4 ( METHOD_5 ( ) . getSelectedItem ( ) ) ; } } 
public void METHOD_1 ( ) { log . METHOD_2 ( STRING_1 , this . METHOD_3 ( ) . getName ( ) ) ; try { if ( METHOD_4 ( ) ) { METHOD_5 ( ) ; } } catch ( TYPE_1 e ) { log . METHOD_6 ( STRING_2 , e ) ; } METHOD_7 ( ) ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { if ( VAR_1 == null ) { return null ; } TYPE_1 VAR_2 = new TYPE_2 ( VAR_3 ) . METHOD_2 ( ) . get ( VAR_1 ) ; if ( VAR_2 != null ) { return VAR_2 ; } TYPE_1 VAR_4 = METHOD_3 ( VAR_1 ) ; if ( ( VAR_4 != null ) && ( ! ( METHOD_4 ( VAR_4 . getId ( ) ) ) ) ) { return VAR_4 ; } throw new TYPE_3 ( ( STRING_1 + VAR_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 . AuditLogType VAR_1 , java.lang.String VAR_2 , TYPE_2 VAR_3 ) { TYPE_3 VAR_4 = new TYPE_3 ( ) ; VAR_4 . METHOD_2 ( TYPE_4 . METHOD_3 ( ) . getId ( ) ) ; java.lang.String VAR_5 = ( VAR_2 == null ) ? TYPE_4 . METHOD_4 ( ) . name ( ) : VAR_2 ; VAR_4 . METHOD_5 ( STRING_1 , VAR_5 ) ; VAR_4 . METHOD_6 ( VAR_3 ) ; TYPE_5 . METHOD_7 ( VAR_4 , VAR_1 , VAR_6 ) ; } 
private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String name ) { TYPE_1 returnValue = null ; if ( VAR_1 . METHOD_2 ( name ) ) { java.lang.String VAR_2 = ( ( java.lang.String ) ( ( ( VAR_1 . METHOD_3 ( name ) ) instanceof java.lang.String ) ? VAR_1 . METHOD_3 ( name ) : null ) ) ; returnValue = ( VAR_2 == null ) ? null : TYPE_1 . METHOD_4 ( VAR_2 ) ; } return returnValue ; } 
public static java.util.List < TYPE_1 . DiskImage > METHOD_1 ( java.util.List < TYPE_1 . Disk > VAR_1 ) { java.util.List < TYPE_1 . DiskImage > VAR_2 = new java.util.ArrayList < > ( ) ; java.util.List < TYPE_2 > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; for ( TYPE_2 VAR_4 : VAR_3 ) { VAR_2 . add ( TYPE_4 . METHOD_3 ( VAR_4 . getId ( ) ) ) ; } return VAR_2 ; } 
private TYPE_1 . DiskImage METHOD_1 ( boolean VAR_1 ) { TYPE_1 . DiskImage VAR_2 = new TYPE_1 . DiskImage ( ) ; VAR_2 . METHOD_2 ( true ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_2 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_2 . METHOD_6 ( VAR_3 ) ; return VAR_2 ; } 
private org.ovirt.engine.core.common.businessentities.VDS METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_2 ) ; VAR_2 . METHOD_4 ( new org.ovirt.engine.core.compat . Version ( STRING_3 ) ) ; VAR_2 . METHOD_5 ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; VAR_2 . setId ( VAR_1 ) ; return VAR_2 ; } 
protected void METHOD_1 ( ) { TYPE_1 . VdcQueryReturnValue VAR_1 = TYPE_2 . METHOD_2 ( VAR_2 . VdcQueryReturnValue class ) ; TYPE_3 . METHOD_3 ( VAR_3 . RunQuery ( TYPE_3 . METHOD_4 ( VAR_4 ) , METHOD_5 ( ) ) ) . METHOD_6 ( VAR_1 ) ; TYPE_3 . METHOD_3 ( VAR_1 . getSucceeded ( ) ) . METHOD_6 ( true ) . METHOD_7 ( ) ; TYPE_3 . METHOD_3 ( VAR_1 . getReturnValue ( ) ) . METHOD_6 ( METHOD_8 ( ) ) . METHOD_7 ( ) ; TYPE_2 . METHOD_9 ( ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; TYPE_1 . VdcQueryType VAR_2 = VAR_3 ; java.lang.Object result = VAR_4 . runQuery ( VAR_2 , VAR_5 , VAR_1 ) ; TYPE_2 . assertEquals ( result , VAR_6 ) ; org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_4 ( VAR_1 ) ; org.mockito.Mockito . METHOD_2 ( VAR_5 ) . METHOD_5 ( VAR_4 . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_2 ( VAR_7 ) . RunQuery ( VAR_2 , VAR_5 ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( true ) ; final java.lang.String VAR_2 = STRING_1 ; VAR_1 . METHOD_3 ( VAR_2 ) ; long VAR_3 = TYPE_2 . METHOD_4 ( ) ; VAR_3 += INT_1 ; final TYPE_3 VAR_4 = new TYPE_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( ) ; final boolean result = VAR_1 . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( result ) ; } 
private org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( TYPE_1 status , java.lang.String name ) { final org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( status , name , VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( VAR_1 ) ) ; cmd . METHOD_6 ( new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ) ; return VAR_1 ; } 
private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < > ( ) ; TYPE_1 VAR_3 = new TYPE_1 ( ) ; VAR_2 . add ( VAR_3 ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_4 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_5 ( VAR_4 ) ) . thenReturn ( VAR_2 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . add ( VAR_2 , java.lang.Boolean . toString ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) ) ; if ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) { VAR_1 . add ( VAR_3 , TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 0 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
public org.ovirt.engine.core.common.businessentities.VM getVm ( ) { org.ovirt.engine.core.common.businessentities.VM vm = super . getVm ( ) ; if ( vm == null ) { vm = TYPE_1 . METHOD_1 ( ) . METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) . get ( 0 ) ; METHOD_4 ( vm ) ; METHOD_5 ( vm . getId ( ) ) ; } return vm ; } 
protected org.ovirt.engine.core.common.businessentities.VM METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM result = null ; TYPE_1 . VdcQueryReturnValue VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_3 . getId ( ) ) ) ; if ( VAR_1 . getSucceeded ( ) ) { result = VAR_1 . getReturnValue ( ) ; } return result ; } 
private java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( VAR_1 . size ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { TYPE_1 VAR_4 = METHOD_2 ( VAR_3 ) ; VAR_2 . add ( VAR_4 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 , VAR_2 , true ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_3 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_4 ) { METHOD_8 ( VAR_4 ) ; } } 
protected boolean METHOD_1 ( TYPE_1 . Network network ) { return ( ( ( network != null ) && ( network . METHOD_2 ( ) ) ) && ( network . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( network . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( false ) ; METHOD_6 ( ) ; METHOD_7 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_8 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( new TYPE_3 . ValidationResult ( VAR_5 ) ) ; TYPE_4 . METHOD_9 ( command , VAR_6 ) ; } 
public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { org.ovirt.engine.core.common.businessentities.VM vm = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( vmId ) ; if ( vm != null ) { return ( org.ovirt.engine.core.common.businessentities.VM . METHOD_3 ( vm . METHOD_4 ( ) ) ) || ( ( vm . METHOD_4 ( ) ) == ( VAR_1 ) ) ; } return false ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_4 ( VAR_2 class ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_2 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_5 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; TYPE_4 . METHOD_7 ( cmd . METHOD_8 ( ) ) ; } 
public TYPE_1 < TYPE_2 > METHOD_1 ( ) throws TYPE_3 , TYPE_4 { java.util.List < TYPE_2 > VAR_1 = new java.util.ArrayList < TYPE_2 > ( ) ; java.util.List < TYPE_5 < ? > > VAR_2 = TYPE_6 . METHOD_2 ( VAR_3 ) ; for ( java.lang.String VAR_4 : VAR_5 ) { TYPE_5 < ? > resource = METHOD_3 ( VAR_4 , VAR_2 ) ; VAR_1 . METHOD_4 ( METHOD_5 ( resource , VAR_4 , new java.util.HashMap < java.lang.String , TYPE_7 > ( ) ) ) ; } return VAR_1 ; } 
private TYPE_1 METHOD_1 ( ) { if ( METHOD_2 ( ) ) { if ( ( getParameters ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) { return METHOD_4 ( ) . METHOD_5 ( ) ; } return METHOD_4 ( ) . METHOD_6 ( ) ; } return METHOD_5 ( ) ; } 
public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_2 ) ) { return VAR_3 . METHOD_3 ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) { return VAR_3 . METHOD_4 ( ) ; } else if ( ( VAR_1 . METHOD_2 ( ) ) == ( VAR_5 ) ) { return VAR_3 . METHOD_5 ( ) ; } return VAR_3 . METHOD_6 ( ) ; } 
public void METHOD_1 ( final TYPE_1 model ) { super . METHOD_1 ( model ) ; model . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 VAR_1 , java.lang.Object sender , TYPE_4 args ) { ( ( TYPE_5 . ViewDef ) ( METHOD_6 ( ) ) ) . METHOD_7 ( model . METHOD_2 ( ) . getSelectedItem ( ) . getName ( ) ) ; } } ) ; } 
public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_2 instanceof TYPE_4 ) { return VAR_3 . get ( ) ; } else if ( VAR_2 instanceof TYPE_5 ) { return VAR_4 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_5 . get ( ) ; } return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } 
private void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_3 . put ( VAR_4 , VAR_5 ) ; } METHOD_2 ( ) ; for ( TYPE_1 VAR_1 : VAR_2 ) { METHOD_3 ( ) . put ( VAR_4 , VAR_6 ) ; } for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_7 . put ( VAR_4 , VAR_8 ) ; } METHOD_4 ( ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 , true ) ; VAR_1 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_6 ( VAR_2 . METHOD_7 ( ) ) ; assertEquals ( VAR_2 . METHOD_7 ( ) . getStatus ( ) , INT_1 ) ; } } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = super . METHOD_1 ( ) ; if ( ( ( ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) ) != null ) && ( ( TYPE_2 . getVm ( ) ) != null ) ) && ( TYPE_2 . getParameters ( ) . METHOD_2 ( ) . METHOD_3 ( ) ) ) { VAR_1 . add ( new TYPE_1 ( TYPE_2 . getVm ( ) . METHOD_4 ( ) , VAR_2 . StoragePool , VAR_3 ) ) ; } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( ) { if ( ( super . METHOD_1 ( ) ) == null ) { super . METHOD_2 ( new TYPE_1 ( ) ) ; } super . METHOD_1 ( ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_1 ( ) ) ; return super . METHOD_1 ( ) ; } 
protected java.lang.String METHOD_1 ( TYPE_1 client ) { TYPE_2 VAR_1 = new TYPE_3 ( INT_1 ) ; java.lang.String command = VAR_2 < java.lang.String > METHOD_2 ( VAR_3 ) ; try { client . METHOD_3 ( command , null , VAR_1 , null ) ; return new java.lang.String ( VAR_1 . METHOD_4 ( ) , STRING_1 ) ; } catch ( java.lang.Exception e ) { log . METHOD_5 ( STRING_2 , command , client . METHOD_6 ( ) , e ) ; throw new TYPE_4 ( e ) ; } } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( vmId , other . vmId ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 ) { VAR_3 . METHOD_2 ( ) . METHOD_3 ( ) ; try { if ( ! ( VAR_4 . METHOD_4 ( VAR_1 ) ) ) { return ; } synchronized ( VAR_4 . get ( VAR_1 ) ) { java.util.Map < org.ovirt.engine.core.compat.Guid , TYPE_1 > map = VAR_4 . get ( VAR_1 ) ; for ( org.ovirt.engine.core.compat.Guid VAR_5 : VAR_2 ) { map . METHOD_5 ( VAR_5 ) ; } } } finally { VAR_3 . METHOD_2 ( ) . METHOD_6 ( ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_2 ( ) ; VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_3 = VAR_1 . METHOD_4 ( ) ; VAR_4 = VAR_2 . get ( VAR_5 ) ; VAR_6 = new TYPE_1 ( ) ; VAR_6 . METHOD_5 ( STRING_1 ) ; VAR_6 . METHOD_6 ( VAR_4 . METHOD_7 ( ) ) ; VAR_6 . METHOD_8 ( VAR_7 ) ; VAR_8 = new TYPE_2 ( ) ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VM VAR_2 = new org.ovirt.engine.core.common.businessentities.VM ( ) ; VAR_2 . METHOD_2 ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; final TYPE_3 VAR_4 = VAR_1 . METHOD_4 ( ) ; TYPE_4 . assertEquals ( VAR_3 , VAR_4 . getId ( ) ) ; } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; TYPE_1 . setTitle ( VAR_1 . METHOD_2 ( ) ) ; TYPE_2 VAR_2 = TYPE_2 . instance ( ) ; if ( VAR_2 != null ) { METHOD_3 ( VAR_2 ) ; } TYPE_3 VAR_3 = TYPE_3 . instance ( ) ; if ( VAR_3 != null ) { VAR_4 . METHOD_4 ( VAR_3 . METHOD_5 ( ) ) ; VAR_4 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; } VAR_5 . METHOD_8 ( ) ; } 
public int METHOD_1 ( TYPE_1 < ? > VAR_1 , TYPE_1 < ? > VAR_2 ) { org.ovirt.engine.core.common.businessentities.VM VAR_3 = vms . get ( VAR_1 . METHOD_2 ( ) ) ; org.ovirt.engine.core.common.businessentities.VM VAR_4 = vms . get ( VAR_2 . METHOD_2 ( ) ) ; return VAR_5 . METHOD_3 ( VAR_3 , VAR_4 ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 , org.ovirt.engine.core.common.businessentities.VDS vds , org.ovirt.engine.core.compat.Guid VAR_2 ) { java.util.List < TYPE_2 > VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( ( ! ( VAR_3 . isEmpty ( ) ) ) && ( ! ( METHOD_3 ( vds , VAR_3 , false ) ) ) ) { VAR_5 . error ( STRING_1 , vds . getName ( ) ) ; METHOD_4 ( VAR_1 , vds . getId ( ) , VAR_6 ) ; return false ; } return true ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; TYPE_2 . METHOD_4 ( ( ( VAR_1 . get ( 0 ) . METHOD_5 ( ) . equals ( STRING_2 ) ) || ( VAR_1 . get ( 0 ) . METHOD_5 ( ) . equals ( STRING_3 ) ) ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { try ( TYPE_2 VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 , VAR_3 ) ) { VAR_4 = new TYPE_4 ( VAR_4 ) ; VAR_4 . METHOD_3 ( VAR_2 ) ; log . METHOD_4 ( ( STRING_1 + VAR_1 ) ) ; } catch ( TYPE_5 e ) { log . error ( ( STRING_2 + VAR_1 ) ) ; } } 
public TYPE_1 add ( TYPE_2 cluster ) { METHOD_1 ( cluster , STRING_1 , STRING_2 ) ; METHOD_2 ( VAR_1 class , cluster ) ; TYPE_3 pool = TYPE_4 . METHOD_3 ( cluster , this ) ; org.ovirt.engine.core.common.businessentities.VDSGroup entity = map ( cluster , map ( pool ) ) ; return METHOD_4 ( VAR_2 , new TYPE_5 ( entity ) , new TYPE_6 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 class ) ) ; } 
public java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , java.util.Map < java.lang.String , java.lang.Object > parameters ) { java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > list = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS host : hosts ) { list . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( host . getId ( ) , 1 ) ) ; } return list ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_4 ) ; TYPE_1 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_3 ) ) ; TYPE_1 . assertEquals ( STRING_2 , VAR_4 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; } 
private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 ) { org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_2 ( ) ) . when ( VAR_2 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( TYPE_2 . METHOD_4 ( ) ) . when ( VAR_2 ) . METHOD_5 ( ) ; TYPE_3 VAR_3 = org.mockito.Mockito . METHOD_6 ( VAR_4 class ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_2 ) . METHOD_7 ( TYPE_4 . METHOD_8 ( ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_9 ( TYPE_4 . METHOD_8 ( ) ) ) . thenReturn ( VAR_1 ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_2 ( new org.ovirt.engine.core.compat . Version ( STRING_1 ) ) ; command . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_1 ) ) . thenReturn ( vds ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) . METHOD_2 ( ) , aQuery ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) ; METHOD_4 ( cmd ) ; METHOD_5 ( true , null ) ; TYPE_1 . METHOD_6 ( cmd . validate ( ) ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_8 ( ) ; org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_9 ( VAR_2 ) ; org.mockito.Mockito . METHOD_7 ( cmd ) . METHOD_10 ( VAR_2 ) ; TYPE_1 . assertEquals ( VAR_3 , cmd . METHOD_11 ( ) ) ; } 
public org.ovirt.engine.core.common.businessentities.VDS METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( ( VAR_2 == null ) || ( VAR_2 . isEmpty ( ) ) ) { throw new TYPE_1 ( VAR_4 ) ; } return TYPE_2 . instance ( ) . METHOD_4 ( VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( STRING_1 ) ; java.lang.String VAR_2 = VAR_1 . METHOD_3 ( ) ; int VAR_3 = VAR_2 . METHOD_4 ( STRING_2 ) ; if ( VAR_3 > 0 ) { VAR_2 = ( VAR_2 . METHOD_5 ( 0 , VAR_3 ) ) + STRING_1 ; VAR_1 . METHOD_6 ( VAR_2 ) ; } } 
public TYPE_1 list ( ) { java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.util.HashMap < java.lang.String , java.lang.String > > > VAR_1 = getEntity ( VAR_2 . HashMap class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_1 ( VAR_4 ) ) , null ) ; return METHOD_2 ( VAR_1 ) ; } 
protected void METHOD_1 ( boolean VAR_1 ) { VAR_2 = new TYPE_1 ( ) ; VAR_2 . setId ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; } 
public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.HashMap < java.lang.Integer , java.lang.String > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; TYPE_2 . METHOD_2 ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; } 
public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm , java.util.ArrayList < java.lang.String > VAR_1 ) { java.lang.Integer VAR_2 = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ; for ( TYPE_1 < TYPE_2 , java.lang.Integer > e : METHOD_3 ( vm ) . METHOD_4 ( ) ) { if ( ! ( METHOD_5 ( e . METHOD_6 ( ) , ( VAR_2 * ( e . getValue ( ) ) ) , VAR_1 ) ) ) { return false ; } } return true ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return ( ( ( java.util.List < java.lang.String > ) ( source ) ) . size ( ) ) > 0 ; } return false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) , aQuery ) ; } 
private java.util.Map < java.lang.String , TYPE_1 < ? > > METHOD_1 ( java.util.Map < java.lang.String , TYPE_1 < ? > > map ) { map . put ( STRING_1 , VAR_1 class ) ; map . put ( STRING_2 , VAR_2 class ) ; map . put ( STRING_3 , VAR_3 class ) ; map . put ( STRING_4 , VAR_4 class ) ; map . put ( STRING_5 , VAR_5 class ) ; return map ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( source ) ) ; return VAR_1 . isEmpty ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( ( STRING_1 + name ) , VAR_3 . StorageDomain ) , aQuery ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } TYPE_2 . METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( source ) ) , new TYPE_3 ( ) ) ; return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_4 ( ) , aQuery ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 . METHOD_2 ( ) ) { org.ovirt.engine.core.compat.Guid VAR_3 = METHOD_3 ( ) ; org.ovirt.engine.core.common.businessentities . network VAR_4 = METHOD_4 ( VAR_3 , ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) ? METHOD_7 ( VAR_1 . METHOD_5 ( ) . getId ( ) ) : null ) , VAR_1 . METHOD_5 ( ) . getName ( ) ) ; if ( VAR_4 != null ) { VAR_2 . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; } } return VAR_2 ; } 
protected void METHOD_1 ( int VAR_1 , java.lang.Object VAR_2 ) { while ( ( VAR_1 -- ) > 0 ) { TYPE_1 cluster = new TYPE_1 ( ) ; cluster . METHOD_2 ( VAR_3 [ 2 ] ) ; METHOD_3 ( VAR_4 , VAR_5 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_6 } , cluster , null ) ; } } 
public void METHOD_1 ( java.util.List < org.ovirt.engine.core.compat.Guid > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 parameters = new TYPE_1 ( false , VAR_2 ) ; parameters . METHOD_2 ( new java.util.ArrayList < org.ovirt.engine.core.compat.Guid > ( VAR_1 ) ) ; TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_3 , parameters , TYPE_3 . METHOD_4 ( ) ) ; } 
public void METHOD_1 ( ) { final TYPE_1 iface = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( iface , VAR_2 ) ; METHOD_4 ( VAR_3 , iface ) ; TYPE_3 . assertEquals ( VAR_4 . getValue ( ) . METHOD_5 ( ) , VAR_2 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , false ) ; VAR_2 . METHOD_3 ( ) ; try { resource . METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; } catch ( TYPE_1 VAR_3 ) { METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 . Guid class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; } 
private boolean METHOD_1 ( TYPE_1 . Network network ) { return ( ( ( network != null ) && ( network . METHOD_2 ( ) ) ) && ( network . METHOD_3 ( ) . METHOD_4 ( ) ) ) && ( ! ( network . METHOD_3 ( ) . METHOD_5 ( ) ) ) ; } 
public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 , VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = dao . METHOD_3 ( VAR_1 ) ; TYPE_2 . METHOD_4 ( ( ( VAR_3 . size ( ) ) == 1 ) ) ; TYPE_2 . METHOD_4 ( VAR_3 . METHOD_5 ( VAR_4 ) ) ; TYPE_2 . METHOD_6 ( VAR_3 . METHOD_5 ( VAR_5 ) ) ; } 
protected java.util.List < TYPE_1 > METHOD_1 ( int VAR_1 , int VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < TYPE_1 > ( ) ; VAR_3 . add ( METHOD_2 ( VAR_1 ) ) ; VAR_3 . add ( METHOD_3 ( VAR_2 ) ) ; return VAR_3 ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = ( ( org.ovirt.engine.core.common.businessentities.StoragePool ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_2 = new java.util.ArrayList ( TYPE_1 . METHOD_1 ( new org.ovirt.engine.core.common.businessentities.StoragePool [ ] { VAR_1 } ) ) ; METHOD_2 ( VAR_2 ) ; } else { getModel ( ) . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } 
protected boolean METHOD_1 ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , TYPE_1 . DiskImage diskImage , TYPE_2 VAR_2 , org.ovirt.engine.core.common.businessentities.StorageDomain VAR_3 ) { if ( VAR_1 . METHOD_2 ( VAR_3 ) ) { return false ; } return super . METHOD_1 ( VAR_1 , diskImage , VAR_2 , VAR_3 ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_2 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_3 . equals ( command . getName ( ) ) ) { METHOD_4 ( ) ; } else if ( STRING_4 . equals ( command . getName ( ) ) ) { METHOD_5 ( ) ; } else { super . METHOD_1 ( command ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) ; TYPE_3 < java.lang.String , java.lang.String > VAR_2 = VAR_3 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) , VAR_1 ) ; TYPE_2 . METHOD_5 ( VAR_2 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_7 ( ) ) ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 params ) throws java.lang.Exception { TYPE_1 < TYPE_2 > result = super . METHOD_1 ( params ) ; VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.when ( result . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; return result ; } 
private static TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 client = new TYPE_1 ( new TYPE_2 ( ) ) ; int VAR_2 = VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ; TYPE_3 VAR_5 = new TYPE_4 ( VAR_2 , false ) ; TYPE_5 parameters = client . METHOD_3 ( ) ; parameters . METHOD_4 ( VAR_6 , VAR_5 ) ; return client ; } 
protected void METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_1 , TYPE_1 < TYPE_2 . DiskImage > VAR_2 ) { TYPE_3 < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = null ; for ( TYPE_3 < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_4 : METHOD_2 ( VAR_2 ) ) { VAR_3 = ( VAR_3 == null ) ? VAR_4 . METHOD_3 ( ) : VAR_3 . METHOD_4 ( VAR_4 . METHOD_3 ( ) ) ; } TYPE_4 . METHOD_5 ( VAR_1 , VAR_3 ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . setId ( VAR_1 ) ; vds . METHOD_2 ( INT_1 ) ; TYPE_1 host = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ; METHOD_3 ( host . METHOD_4 ( ) ) ; assertEquals ( new TYPE_3 ( host . METHOD_4 ( ) ) , new TYPE_3 ( INT_2 ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_3 ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; TYPE_3 . assertEquals ( VAR_4 , VAR_1 . getStatus ( ) ) ; dao . METHOD_5 ( VAR_1 . getId ( ) , VAR_5 ) ; TYPE_1 VAR_6 = dao . METHOD_2 ( VAR_2 ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_6 . METHOD_6 ( ) . METHOD_7 ( ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { try { VAR_1 . add ( STRING_1 ) ; TYPE_1 VAR_2 = METHOD_2 ( null ) ; METHOD_3 ( VAR_3 . length ) ; METHOD_4 ( STRING_2 ) ; VAR_4 . METHOD_5 ( VAR_2 ) ; java.util.List < TYPE_2 > hosts = METHOD_6 ( ) ; METHOD_7 ( hosts . get ( 0 ) . METHOD_8 ( ) ) ; METHOD_9 ( hosts ) ; } finally { VAR_1 . METHOD_10 ( ) ; } } 
public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( result ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_2 : result ) { TYPE_2 . assertEquals ( VAR_1 , VAR_2 . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; try { resource . get ( ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assert VAR_1 . equals ( STRING_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { STRING_2 } , new java.lang.Object [ ] { VAR_5 [ ( ( VAR_6 . length ) - 1 ) ] } , METHOD_3 ( ) , VAR_2 ) ; VAR_7 . METHOD_4 ( ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 . VdcQueryReturnValue response = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) ; if ( response . getSucceeded ( ) ) { model . METHOD_2 ( ( ( java.util.ArrayList < TYPE_3 > ) ( response . getReturnValue ( ) ) ) , false ) ; model . METHOD_3 ( STRING_1 ) ; } else { model . METHOD_3 ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_4 ( ) ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) ; org.ovirt.engine.core.compat.Guid VAR_3 = VAR_1 . METHOD_3 ( ) ; if ( VAR_3 . equals ( VAR_4 ) ) { TYPE_2 . METHOD_4 ( STRING_1 ) ; } dao . METHOD_5 ( VAR_5 , VAR_6 , VAR_4 ) ; VAR_1 = dao . METHOD_2 ( VAR_2 ) . get ( 0 ) ; VAR_3 = VAR_1 . METHOD_3 ( ) ; TYPE_2 . assertEquals ( STRING_2 , VAR_3 , VAR_4 ) ; } 
public boolean METHOD_1 ( TYPE_1 source ) { return ( TYPE_2 . METHOD_2 ( source . METHOD_3 ( ) , target . METHOD_3 ( ) ) ) && ( ( ( TYPE_2 . METHOD_4 ( target . METHOD_5 ( ) ) ) || ( TYPE_2 . METHOD_2 ( target . METHOD_5 ( ) , STRING_1 ) ) ) || ( source . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( target . METHOD_5 ( ) ) ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( new TYPE_1 . ValidationResult ( VAR_1 ) ) . when ( VAR_2 ) . METHOD_2 ( TYPE_2 . any ( VAR_3 . Guid class ) ) ; org.mockito.Mockito.doReturn ( TYPE_3 . METHOD_3 ( ) ) . when ( cmd ) . METHOD_4 ( ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; TYPE_4 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_5 . name ( ) ) ) ; } 
protected void METHOD_1 ( ) { TYPE_1 . getParameters ( ) . METHOD_2 ( TYPE_1 . getVm ( ) . getId ( ) ) ; if ( ( ( TYPE_1 . getVm ( ) . METHOD_3 ( ) ) == ( VAR_1 ) ) || ( ! ( TYPE_2 . METHOD_4 ( TYPE_1 . getVm ( ) . METHOD_5 ( ) ) ) ) ) { METHOD_6 ( true ) ; METHOD_7 ( METHOD_8 ( ) ) ; } else { super . METHOD_1 ( ) ; } METHOD_9 ( ) ; } 
protected TYPE_1 METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = new TYPE_2 < > ( ) ; VAR_1 . put ( STRING_1 , STRING_2 ) ; return new TYPE_1 ( new TYPE_3 ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) , VAR_2 ) , VAR_3 , STRING_3 , STRING_4 , 2 , new java.util.HashMap < java.lang.String , java.lang.Object > ( ) , true , false , false , STRING_5 , VAR_1 ) ; } 
public void METHOD_1 ( ) { java.lang.String VAR_1 = STRING_1 ; java.lang.String VAR_2 = STRING_2 ; final long VAR_3 = TYPE_1 . METHOD_2 ( VAR_1 ) ; final long VAR_4 = ( TYPE_1 . METHOD_2 ( VAR_1 ) ) + ( VAR_5 ) ; METHOD_3 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } 
private static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { TYPE_1 . METHOD_2 ( ) ; aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( returnValue != null ) { VAR_1 . METHOD_3 ( ( ( java.util.HashMap < TYPE_2 < TYPE_3 , java.lang.String > , java.lang.Object > ) ( returnValue ) ) ) ; } return VAR_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_4 ( ) , aQuery ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( ) ; METHOD_4 ( 1 ) ; METHOD_5 ( 1 ) ; METHOD_6 ( 1 ) ; METHOD_7 ( METHOD_8 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 , VAR_4 } , true , true ) ) ; METHOD_9 ( resource . METHOD_10 ( ) ) ; } 
private org.ovirt.engine.core.compat.Guid METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = VAR_1 . get ( TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ; if ( vds == null ) { throw new TYPE_2 ( java.lang.String . METHOD_3 ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) ) ) ; } if ( ( vds . getStatus ( ) ) != ( VAR_2 ) ) { METHOD_4 ( vds . getName ( ) ) ; throw new TYPE_2 ( ) ; } return vds . getId ( ) ; } 
public java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > hosts , java.util.Map < java.lang.String , java.lang.Object > parameters ) { java.util.List < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > VAR_1 = new java.util.ArrayList < TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > > ( ) ; for ( org.ovirt.engine.core.common.businessentities.VDS vds : hosts ) { VAR_1 . add ( new TYPE_1 < org.ovirt.engine.core.compat.Guid , java.lang.Integer > ( vds . getId ( ) , ( INT_1 - ( vds . METHOD_2 ( ) ) ) ) ) ; } return VAR_1 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true , getEntity ( 0 ) ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( TYPE_1 . getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_2 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } } 
private < TYPE_1 > TYPE_1 getEntity ( TYPE_2 < TYPE_1 > VAR_1 , TYPE_3 . VdcQueryType VAR_2 , TYPE_4 VAR_3 , java.lang.String VAR_4 , boolean VAR_5 , boolean VAR_6 ) { try { return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( java.lang.Exception e ) { return METHOD_2 ( VAR_1 , e , VAR_5 ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 ) ) . thenReturn ( getVdsGroup ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( VAR_2 ) ) . thenReturn ( getVdsGroup ( ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( cmd . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) : false ; } } ; TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ; } 
protected boolean METHOD_1 ( ) { return ( ( ( ( METHOD_2 ( ) ) || ( METHOD_3 ( ) ) ) || ( getVm ( ) . METHOD_4 ( ) ) ) || ( ! ( METHOD_5 ( ) . METHOD_6 ( ) ) ) ) && ( METHOD_7 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , true ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( ( ( VAR_1 . METHOD_5 ( ) . METHOD_7 ( ) . getStatus ( ) ) == ( VAR_2 ) ) ) ; TYPE_3 . METHOD_8 ( VAR_3 . METHOD_9 ( ) ) ; org.mockito.Mockito . METHOD_10 ( VAR_4 , org.mockito.Mockito . METHOD_11 ( ) ) . METHOD_12 ( VAR_1 . METHOD_4 ( ) , VAR_5 ) ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( VAR_1 . size ( ) ) ; for ( TYPE_1 host : VAR_1 ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . METHOD_2 ( host . getName ( ) ) ; vds . METHOD_3 ( host . METHOD_4 ( ) ) ; hosts . add ( vds ) ; } return hosts ; } 
public void METHOD_1 ( ) { TYPE_1 disk = VAR_1 . get ( VAR_2 ) ; TYPE_2 . METHOD_2 ( disk ) ; java.lang.String name = disk . METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( name . equals ( VAR_3 . METHOD_5 ( VAR_2 , VAR_4 . Disk ) ) ) ; } 
private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { java.lang.String VAR_3 = new java.lang.Integer ( VAR_1 . METHOD_2 ( ) ) . toString ( ) ; if ( ( ! ( TYPE_3 . isEmpty ( VAR_3 ) ) ) && ( ! ( VAR_3 . equals ( STRING_1 ) ) ) ) { VAR_2 . add ( VAR_4 , VAR_3 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { if ( ! VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vmId , VAR_3 , TYPE_2 . getName ( ) ) ; for ( TYPE_1 VAR_4 : VAR_2 ) { VAR_5 . METHOD_4 ( VAR_4 . getId ( ) ) ; } } else { TYPE_3 . METHOD_5 ( vmId ) ; } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; org.mockito.Mockito.when ( host . getName ( ) ) . thenReturn ( TYPE_1 . instance ( ) . METHOD_3 ( ( ( VAR_3 ) * 2 ) ) ) ; TYPE_2 . METHOD_4 ( validator . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( VAR_4 ) ) ; } 
private void METHOD_1 ( ) { if ( ( getWindow ( ) ) != null ) { return ; } TYPE_1 model = TYPE_2 . METHOD_2 ( getEntity ( ) . METHOD_3 ( ) , getEntity ( ) , getEntity ( ) . METHOD_4 ( ) , ( ( java.util.ArrayList < TYPE_3 > ) ( METHOD_5 ( ) ) ) , ( ( TYPE_3 ) ( getSelectedItem ( ) ) ) , this ) ; METHOD_6 ( model ) ; } 
public boolean equals ( java.lang.Object obj ) { if ( ( this ) == obj ) { return true ; } if ( obj == null ) { return false ; } if ( ( METHOD_1 ( ) ) != ( obj . METHOD_1 ( ) ) ) { return false ; } TYPE_1 other = ( ( TYPE_1 ) ( obj ) ) ; return ( TYPE_2 . equals ( VAR_1 , VAR_2 ) ) && ( TYPE_2 . equals ( VAR_3 , VAR_4 ) ) ; } 
protected void METHOD_1 ( ) { if ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( object . getId ( ) ) ) { object . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; } if ( TYPE_1 . isEmpty ( object . METHOD_4 ( ) ) ) { object . METHOD_5 ( TYPE_2 . instance ( ) . METHOD_6 ( INT_1 ) ) ; } if ( ( object . METHOD_7 ( ) ) == null ) { object . METHOD_8 ( VAR_1 ) ; } } 
private void METHOD_1 ( ) { java.util.Map < java.lang.String , TYPE_1 > VAR_1 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network network : VAR_2 ) { VAR_1 . put ( network . METHOD_2 ( ) , new TYPE_1 ( network , this ) ) ; } METHOD_3 ( VAR_1 ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 value , TYPE_3 VAR_1 ) { VAR_1 . append ( METHOD_2 ( ) . id ( TYPE_4 . METHOD_3 ( TYPE_5 . METHOD_4 ( ) , TYPE_5 . METHOD_5 ( ) , context ) ) ) ; for ( TYPE_6 < TYPE_2 , ? > VAR_2 : VAR_3 ) { METHOD_1 ( context , value , VAR_1 , VAR_2 ) ; } VAR_1 . METHOD_6 ( STRING_1 ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.common.businessentities . Disk disk ) { TYPE_1 VAR_1 = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) . METHOD_3 ( ) , TYPE_3 . getId ( ) , disk . getId ( ) , VAR_2 . Disk ) ; TYPE_4 . METHOD_4 ( VAR_1 ) ; } 
protected java.lang.Object [ ] METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == null ) { return new java.lang.Object [ 0 ] ; } else { java.util.ArrayList < java.lang.Object > VAR_1 = new java.util.ArrayList < java.lang.Object > ( ) ; for ( TYPE_1 a : VAR_2 . Linq < TYPE_1 > METHOD_3 ( METHOD_2 ( ) ) ) { VAR_1 . add ( a . getId ( ) ) ; } return VAR_1 . METHOD_4 ( new java.lang.Object [ ] { } ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = TYPE_1 . METHOD_2 ( STRING_2 ) ; TYPE_2 . METHOD_3 ( ( ( VAR_1 . METHOD_4 ( VAR_2 ) ) < 0 ) ) ; TYPE_2 . METHOD_3 ( ( ( VAR_1 . METHOD_4 ( VAR_1 ) ) == 0 ) ) ; TYPE_2 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( VAR_1 ) ) > 0 ) ) ; } 
private static java.util.List < TYPE_1 > METHOD_1 ( boolean VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( org.ovirt.engine.core.compat.Guid TYPE_2 : VAR_3 ) { TYPE_1 VAR_4 = new TYPE_1 ( ) ; VAR_4 . METHOD_2 ( TYPE_2 . toString ( ) ) ; VAR_2 . add ( VAR_4 ) ; } if ( VAR_1 ) { TYPE_1 VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_2 ( VAR_6 ) ; VAR_2 . add ( VAR_5 ) ; } return VAR_2 ; } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = dao . METHOD_2 ( STRING_1 , VAR_2 ) ; TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_3 ) . METHOD_4 ( ) . equals ( VAR_1 . METHOD_4 ( ) ) , true ) ; TYPE_2 . assertEquals ( dao . METHOD_3 ( VAR_3 ) . getId ( ) . equals ( VAR_1 . getId ( ) ) , true ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { java.util.ArrayList < TYPE_1 > list = ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ; java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 VAR_3 : list ) { if ( ! ( VAR_3 . METHOD_1 ( ) . equals ( VAR_4 . METHOD_2 ( ) ) ) ) { VAR_2 . add ( VAR_3 ) ; } } setItems ( VAR_2 ) ; } 
public void METHOD_1 ( ) { TYPE_1 . Disk model = METHOD_2 ( ) ; model . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_4 ( ) . get ( 0 ) . METHOD_5 ( null ) ; METHOD_6 ( METHOD_7 ( ) ) ; VAR_1 . METHOD_8 ( ) ; try { VAR_2 . add ( model ) ; METHOD_9 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { METHOD_10 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.util.Map < java.lang.String , java.lang.String > VAR_2 = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( result ) ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { VAR_1 . METHOD_1 ( true ) ; VAR_1 . METHOD_2 ( true ) ; } else { METHOD_1 ( false ) ; METHOD_2 ( false ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < > ( ) ; VAR_1 . add ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( 1 ) ; METHOD_7 ( METHOD_8 ( ) ) ; VAR_4 . METHOD_9 ( ) ; java.util.List < TYPE_2 . Network > VAR_5 = METHOD_10 ( ) ; TYPE_3 . METHOD_11 ( VAR_5 , new TYPE_4 ( ) ) ; METHOD_12 ( VAR_5 ) ; } 
public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_1 > source , TYPE_3 < ? super TYPE_1 > VAR_1 ) { java.util.ArrayList < TYPE_1 > list = new java.util.ArrayList < > ( ) ; for ( TYPE_1 item : source ) { if ( VAR_1 . METHOD_2 ( item ) ) { list . add ( item ) ; } } return list ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , TYPE_2 entity ) { TYPE_3 < java.lang.String > VAR_1 = TYPE_4 . METHOD_2 ( VAR_2 , VAR_3 ) ; TYPE_5 . METHOD_3 ( this , model , entity ) ; if ( VAR_1 . METHOD_4 ( STRING_1 ) ) { TYPE_5 . METHOD_5 ( this , model , entity ) ; } return model ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { boolean VAR_1 = false ; java.util.List < TYPE_1 > VAR_2 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; if ( ( ( VAR_2 . size ( ) ) == 1 ) && ( ( VAR_2 . get ( 0 ) . METHOD_1 ( ) ) == ( VAR_3 ) ) ) { VAR_1 = true ; } METHOD_2 ( ) . setEntity ( VAR_1 ) ; METHOD_3 ( ) . setEntity ( ( ! VAR_1 ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( vm . getId ( ) , VAR_1 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_4 ( VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_3 ) . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( ) ; } 
public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat . Version version , TYPE_1 type ) { if ( ! ( TYPE_2 . METHOD_2 ( version ) ) ) { return new java.util.HashMap < > ( ) ; } java.util.Map < java.lang.String , java.lang.String > map = VAR_1 . get ( version ) . get ( type ) ; if ( map == null ) { map = new java.util.HashMap < > ( ) ; } else { map = new java.util.HashMap < > ( map ) ; } return map ; } 
public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( null ) ; final TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . setId ( VAR_3 ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; final TYPE_3 VAR_4 = VAR_1 . getStoragePoolId ( ) ; TYPE_4 . assertEquals ( VAR_3 , VAR_4 ) ; } 
protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id , java.lang.String VAR_1 , TYPE_2 type ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( id != null ) { VAR_2 . METHOD_2 ( id . toString ( ) ) ; } VAR_2 . METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( type ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { java.lang.Object [ ] VAR_1 = TYPE_1 . METHOD_2 ( ) ; VAR_1 [ 1 ] = null ; java.util.Map < java.lang.String , java.lang.Object > VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 ) ; TYPE_1 . METHOD_4 ( METHOD_5 ( ) , VAR_1 , VAR_2 ) ; } 
private static void METHOD_1 ( TYPE_1 nic , java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = nic . METHOD_2 ( ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_3 : new java.util.ArrayList < TYPE_2 > ( VAR_2 ) ) { TYPE_3 . METHOD_3 ( VAR_3 , null , VAR_1 ) . METHOD_4 ( ) ; } } } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( VAR_8 ) ) ; } 
private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 ) { TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( VAR_4 . Network ) ; VAR_3 . METHOD_4 ( TYPE_3 . getParameters ( ) . METHOD_5 ( ) . getId ( ) ) ; VAR_3 . METHOD_6 ( VAR_2 . getId ( ) ) ; TYPE_4 . METHOD_7 ( VAR_3 ) ; } 
private void METHOD_1 ( int VAR_1 , int VAR_2 , boolean VAR_3 ) { TYPE_1 validation = new TYPE_1 ( METHOD_2 ( VAR_1 ) , VAR_2 , VAR_4 ) ; TYPE_2 . METHOD_3 ( validation . METHOD_4 ( null ) . METHOD_5 ( ) , TYPE_3 . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_3 ) ) ) ; } 
public TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 ) { TYPE_2 VAR_2 = new TYPE_3 ( STRING_1 ) . METHOD_2 ( STRING_2 , new java.util.ArrayList < > ( TYPE_4 . METHOD_3 ( VAR_1 ) ) ) . METHOD_4 ( ) ; java.util.Map < java.lang.String , java.lang.Object > response = new TYPE_5 ( this . client , VAR_2 ) . METHOD_5 ( STRING_2 ) . METHOD_6 ( java.lang.Object [ ] . class ) ; return new TYPE_1 ( response ) ; } 
public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( METHOD_3 ( ) , new java.lang.String [ 0 ] ) ; TYPE_1 . assertEquals ( VAR_1 . METHOD_4 ( ) , 0 ) ; TYPE_1 . assertEquals ( VAR_1 . size ( ) , 0 ) ; TYPE_1 . METHOD_5 ( VAR_1 . isEmpty ( ) ) ; TYPE_1 . METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 cluster = ( ( TYPE_2 ) ( returnValue ) ) ; if ( cluster != null ) { VAR_1 . add ( cluster ) ; } TYPE_3 . METHOD_1 ( VAR_1 , new TYPE_4 ( ) ) ; model . METHOD_2 ( model , VAR_2 , VAR_1 , vm . METHOD_3 ( ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 ( TYPE_2 . getVm ( ) . getId ( ) ) , TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( ) ) ) ; TYPE_2 . METHOD_6 ( null ) ; TYPE_2 . METHOD_7 ( true ) ; } 
private void METHOD_1 ( ) { java.util.Map < java.lang.String , java.lang.String > VAR_1 = METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , VAR_2 , TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ; if ( VAR_1 != null ) { TYPE_1 . getVm ( ) . METHOD_6 ( ) . put ( VAR_3 , VAR_1 ) ; } } 
public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_1 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } } 
public TYPE_1 getValue ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { switch ( VAR_1 . getStatus ( ) ) { case VAR_2 : return METHOD_1 ( ) . METHOD_2 ( ) ; case VAR_3 : return METHOD_1 ( ) . METHOD_3 ( ) ; default : return METHOD_1 ( ) . METHOD_3 ( ) ; } } 
protected void METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) == ( VAR_1 ) ) { TYPE_1 . METHOD_3 ( ) ; if ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) { TYPE_1 . METHOD_5 ( ) . METHOD_6 ( new TYPE_2 ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) , TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) ; } METHOD_9 ( ) ; } else { TYPE_1 . METHOD_10 ( ) ; } TYPE_1 . METHOD_11 ( true ) ; } 
public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( false ) . when ( VAR_2 ) . METHOD_3 ( TYPE_1 . any ( VAR_3 . VM class ) ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( vm ) , true , null ) ; } 
public void onSuccess ( java.lang.Object returnValue ) { final java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > ) ( returnValue ) ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_2 = METHOD_1 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_1 , new TYPE_2 ( ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_3 ( ) . setItems ( VAR_1 ) ; METHOD_3 ( ) . setSelectedItem ( VAR_2 ) ; if ( ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ) { METHOD_4 ( ) . METHOD_5 ( ) ; } } 
public void METHOD_1 ( ) { parameters . METHOD_2 ( TYPE_1 ) ; parameters . METHOD_3 ( null ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_1 ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) ; command . METHOD_7 ( ) ; org.mockito.Mockito . METHOD_8 ( command , org.mockito.Mockito . METHOD_9 ( ) ) . METHOD_10 ( ) ; } 
protected boolean METHOD_1 ( ) { final java.util.List < java.lang.String > VAR_1 = TYPE_1 . getReturnValue ( ) . METHOD_2 ( ) ; final int VAR_2 = ( TYPE_1 . getParameters ( ) . METHOD_3 ( ) ) * ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( TYPE_1 . METHOD_6 ( ) ) . size ( ) ) ; final int VAR_3 = TYPE_1 . getParameters ( ) . METHOD_7 ( ) . METHOD_8 ( ) ; return TYPE_2 . METHOD_9 ( VAR_1 , VAR_2 , VAR_3 , TYPE_1 . METHOD_10 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > list = new java.util.ArrayList < TYPE_2 > ( ) ; for ( TYPE_2 a : ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) { if ( ( a . METHOD_2 ( ) ) == ( VAR_1 ) ) { list . add ( a ) ; } } model . METHOD_3 ( model , list ) ; METHOD_4 ( ) . METHOD_5 ( this , VAR_2 ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 . Network network , org.ovirt.engine.core.common.businessentities . network entity ) { if ( METHOD_2 ( network ) ) { entity . METHOD_3 ( METHOD_4 ( network ) ) ; } return new TYPE_1 ( entity . METHOD_5 ( ) . getValue ( ) , entity ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.Map < java.lang.String , java.lang.String > VAR_2 = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( returnValue ) ) ; VAR_2 . put ( null , STRING_1 ) ; VAR_3 . put ( VAR_4 , VAR_2 . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_5 ) ; } 
public TYPE_1 getValue ( org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : return METHOD_3 ( ) . METHOD_4 ( ) ; case VAR_3 : return METHOD_3 ( ) . METHOD_5 ( ) ; case VAR_4 : case VAR_5 : case VAR_6 : return METHOD_3 ( ) . METHOD_6 ( ) ; case VAR_7 : return METHOD_3 ( ) . METHOD_7 ( ) ; default : break ; } return null ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; METHOD_4 ( ) ; } else if ( command == ( METHOD_5 ( ) ) ) { METHOD_6 ( ) ; } else if ( TYPE_1 . METHOD_7 ( command . getName ( ) , STRING_1 ) ) { METHOD_8 ( ) ; } } 
public boolean equals ( java.lang.Object obj ) { boolean returnValue = super . equals ( obj ) ; if ( ( ( ! returnValue ) && ( obj != null ) ) && ( obj instanceof TYPE_1 ) ) { returnValue = ( ! ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , STRING_1 ) ) ) && ( TYPE_2 . METHOD_1 ( METHOD_2 ( ) , ( ( TYPE_1 ) ( obj ) ) . METHOD_2 ( ) ) ) ; } return returnValue ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; TYPE_1 < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = METHOD_1 ( ) ; hosts . add ( 0 , null ) ; VAR_1 . setItems ( hosts ) ; VAR_1 . setIsChangable ( true ) ; METHOD_2 ( true ) ; METHOD_3 ( ) . setIsChangable ( true ) ; } 
public TYPE_1 getValue ( TYPE_2 item ) { org.ovirt.engine.core.common.businessentities.VM vm = item . METHOD_1 ( ) ; TYPE_3 VAR_1 = null ; if ( ( vm != null ) && ( vm . METHOD_2 ( ) ) ) { VAR_1 = VAR_2 . METHOD_3 ( ) ; } return new TYPE_1 ( METHOD_4 ( item ) , VAR_1 , VAR_3 , VAR_4 ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { TYPE_3 VAR_2 = ( ( TYPE_3 ) ( args ) ) ; if ( STRING_1 . equals ( VAR_3 ) ) { if ( ( VAR_4 . getModel ( ) . METHOD_2 ( ) ) != null ) { METHOD_3 ( ) . METHOD_4 ( VAR_5 ) ; } } } 
protected boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . getVm ( ) , TYPE_2 . getReturnValue ( ) . METHOD_3 ( ) , TYPE_2 . getVm ( ) . getStoragePoolId ( ) , VAR_1 , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , METHOD_4 ( ) , true , true , true , true , null ) ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { return TYPE_2 . METHOD_2 ( new TYPE_1 ( ( ( TYPE_3 . getVdsGroup ( ) . METHOD_3 ( ) ) == null ? null : TYPE_3 . getVdsGroup ( ) . METHOD_3 ( ) . getValue ( ) ) , VAR_1 . StoragePool , TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.StoragePool entity ) { TYPE_2 parameters = new TYPE_2 ( ) ; parameters . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( model . getId ( ) ) ) ; model . METHOD_3 ( METHOD_4 ( VAR_1 . List class , VAR_2 class ) . map ( getEntity ( VAR_1 . ArrayList class , VAR_3 , parameters , model . getId ( ) ) , null ) ) ; return model ; } 
public void METHOD_1 ( ) { for ( TYPE_1 VAR_1 : VAR_2 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ; } java.util.Map < java.lang.String , java.lang.Object > VAR_3 = TYPE_2 . METHOD_4 ( VAR_2 , VAR_4 ) ; TYPE_3 . METHOD_5 ( VAR_3 ) . isEmpty ( ) ; java.util.Map < java.lang.String , java.lang.Object > VAR_5 = TYPE_2 . METHOD_6 ( VAR_6 , VAR_2 ) ; TYPE_3 . METHOD_5 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_8 ) ; } 
private void METHOD_1 ( ) { TYPE_1 returnValue = new TYPE_1 ( ) ; returnValue . METHOD_2 ( true ) ; returnValue . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.doReturn ( returnValue ) . when ( METHOD_4 ( ) ) . METHOD_5 ( TYPE_2 . METHOD_6 ( VAR_2 ) , TYPE_2 . any ( VAR_3 class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( METHOD_4 ( ) ) . METHOD_7 ( ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_8 ( VAR_5 ) ) . thenReturn ( METHOD_9 ( VAR_6 ) ) ; } 
private void METHOD_1 ( final org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { TYPE_1 VAR_3 = new TYPE_1 ( false ) ; VAR_3 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . getStoragePoolId ( ) ) ; VAR_3 . METHOD_4 ( VAR_1 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; METHOD_7 ( VAR_5 , VAR_3 , TYPE_2 . METHOD_8 ( ) ) ; } 
public boolean equals ( java.lang.Object VAR_1 ) { if ( ( this ) == VAR_1 ) { return true ; } if ( ! ( VAR_1 instanceof TYPE_1 ) ) { return false ; } TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 ) ) ; return TYPE_2 . equals ( METHOD_1 ( ) , VAR_2 . METHOD_1 ( ) ) ; } 
private java.lang.String METHOD_1 ( ) throws TYPE_1 { java.lang.String VAR_1 = null ; if ( args . METHOD_2 ( VAR_2 ) ) { try { VAR_1 = METHOD_3 ( args . get ( VAR_2 ) ) ; } catch ( java.lang.Exception e ) { throw new TYPE_1 ( VAR_3 , e . METHOD_4 ( ) ) ; } if ( VAR_1 == null ) { throw new TYPE_1 ( VAR_4 ) ; } } else { VAR_1 = METHOD_5 ( STRING_1 , true ) ; } METHOD_6 ( VAR_1 ) ; return VAR_1 ; } 
public static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.ui.frontend.AsyncQuery VAR_2 ) { VAR_2 . converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter < TYPE_1 < java.lang.String > > ( ) { public TYPE_1 < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_3 ) { TYPE_1 < java.lang.String > VAR_4 = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ; VAR_4 . METHOD_2 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) ; return VAR_4 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_5 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , VAR_2 ) ; } 
protected void METHOD_1 ( ) { super . METHOD_2 ( ) ; if ( ( TYPE_1 . getVm ( ) ) != null ) { METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( true ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { if ( ( VAR_2 . METHOD_2 ( ) ) && ( VAR_1 == ( VAR_3 ) ) ) { METHOD_3 ( ) . METHOD_4 ( TYPE_3 . METHOD_5 ( ) ) ; METHOD_3 ( ) . setIsChangable ( false ) ; METHOD_3 ( ) . setEntity ( false ) ; } else if ( METHOD_3 ( ) . METHOD_6 ( ) ) { METHOD_3 ( ) . setIsChangable ( METHOD_7 ( ) ) ; } } 
protected void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object VAR_2 ) { super . METHOD_1 ( VAR_1 , VAR_2 ) ; TYPE_1 VAR_3 = ( ( TYPE_1 ) ( VAR_2 ) ) ; if ( VAR_2 != null ) { VAR_3 . METHOD_2 ( false ) ; VAR_3 . setItems ( null ) ; TYPE_2 VAR_4 = ( ( TYPE_2 ) ( ( VAR_2 instanceof TYPE_2 ) ? VAR_2 : null ) ) ; if ( VAR_4 != null ) { VAR_4 . METHOD_3 ( null ) ; } VAR_3 . METHOD_4 ( ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = METHOD_2 ( STRING_1 ) ; org.ovirt.engine.core.common.businessentities . VdsNetworkInterface nic = METHOD_3 ( STRING_2 , VAR_1 ) ; nic . METHOD_4 ( ( ! ( VAR_1 . METHOD_5 ( ) ) ) ) ; METHOD_6 ( VAR_1 ) ; METHOD_7 ( nic ) ; TYPE_1 VAR_2 = METHOD_8 ( METHOD_9 ( nic ) ) ; METHOD_10 ( VAR_2 , VAR_1 ) ; } 
public TYPE_1 < java.lang.String > Convert ( java.lang.Object returnValue , org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 ) { TYPE_1 < java.lang.String > VAR_2 = new TYPE_2 < java.lang.String > ( new TYPE_3 ( ) ) ; VAR_2 . METHOD_1 ( ( ( TYPE_4 < java.lang.String > ) ( returnValue ) ) ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( new java.util.HashMap < java.lang.Integer , TYPE_1 > ( ) { { put ( 0 , new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_2 ) ) ) ; } } ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( TYPE_2 . any ( VAR_3 class ) , TYPE_2 . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( VAR_4 ) ; } 
private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 = new TYPE_3 ( VAR_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; METHOD_5 ( ) . add ( VAR_3 . METHOD_6 ( this ) ) ; VAR_1 . add ( VAR_3 ) ; return VAR_1 ; } 
protected void METHOD_1 ( ) { java.lang.String VAR_1 = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; log . METHOD_6 ( STRING_1 , VAR_1 ) ; if ( org.ovirt.engine.core.compat.Guid . METHOD_7 ( TYPE_1 . getParameters ( ) . METHOD_8 ( ) ) ) { log . METHOD_6 ( STRING_2 ) ; } else { TYPE_1 . METHOD_9 ( ) ; } TYPE_1 . METHOD_10 ( true ) ; } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; vds . setId ( VAR_1 ) ; vds . METHOD_2 ( INT_1 ) ; TYPE_1 host = TYPE_2 . map ( vds , ( ( TYPE_1 ) ( null ) ) ) ; METHOD_3 ( host . METHOD_4 ( ) ) ; assertEquals ( TYPE_3 . valueOf ( host . METHOD_4 ( ) ) , TYPE_3 . valueOf ( INT_2 ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_3 VAR_4 = new TYPE_3 ( ) ; TYPE_4 VAR_5 = new TYPE_4 ( ) ; VAR_5 . METHOD_2 ( VAR_2 ) ; VAR_5 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . add ( VAR_5 ) ; VAR_4 . METHOD_5 ( VAR_1 ) ; TYPE_1 VAR_6 = new TYPE_1 ( ) ; VAR_6 . METHOD_6 ( VAR_4 ) ; return VAR_6 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( STRING_1 , VAR_2 . StoragePool ) , aQuery ) ; } 
private boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_2 VAR_3 = VAR_2 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 == null ) || ( ( VAR_3 != null ) && ( VAR_3 . getId ( ) . equals ( METHOD_4 ( ) . getId ( ) ) ) ) ) { return false ; } return true ; } 
public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 ) { if ( ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) || ( VAR_1 . getName ( ) . equals ( VAR_2 ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 ) ; } } 
private boolean METHOD_1 ( ) { for ( TYPE_1 VAR_1 : ( ( TYPE_2 < TYPE_1 > ) ( METHOD_2 ( ) ) ) ) { if ( ( ! ( VAR_1 . METHOD_3 ( ) . getEntity ( ) ) ) && ( ( VAR_1 . METHOD_4 ( ) ) != null ) ) { METHOD_5 ( new TYPE_3 ( STRING_1 ) ) ; return false ; } } return true ; } 
protected void METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , METHOD_5 ( ) . get ( 0 ) . METHOD_6 ( ) . get ( 0 ) . getValue ( ) , TYPE_1 . METHOD_7 ( ) . METHOD_8 ( ) , TYPE_1 . METHOD_9 ( ) ) ; } } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( METHOD_3 ( VAR_1 , 0 ) ) ; METHOD_4 ( cmd ) ; METHOD_5 ( true , null ) ; TYPE_1 . METHOD_6 ( cmd . METHOD_7 ( ) ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_9 ( ) ; org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_10 ( VAR_2 ) ; org.mockito.Mockito . METHOD_8 ( cmd ) . METHOD_11 ( VAR_2 ) ; TYPE_1 . assertEquals ( cmd . METHOD_12 ( ) , VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( true , VAR_1 ) ; TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_2 = TYPE_3 . METHOD_3 ( VAR_3 , VAR_4 ) ; TYPE_4 . METHOD_4 ( STRING_1 , ( ( VAR_5 . METHOD_5 ( cluster , VAR_2 ) . size ( ) ) == 2 ) ) ; TYPE_4 . METHOD_4 ( TYPE_3 . METHOD_3 ( STRING_2 , STRING_3 ) . equals ( VAR_5 . METHOD_5 ( cluster , VAR_2 ) ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( ( ( VAR_1 . METHOD_6 ( ) ) != null ) ) ; TYPE_3 . METHOD_5 ( ( ( VAR_1 . METHOD_7 ( ) ) == null ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_3 ) . METHOD_9 ( VAR_4 . METHOD_10 ( ) ) ; TYPE_2 . METHOD_3 ( ( ( VAR_4 . getValue ( ) . size ( ) ) == 0 ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . METHOD_6 ( ) ; METHOD_7 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_8 ( VAR_5 . METHOD_9 ( ) ) ; assertEquals ( INT_1 , VAR_5 . METHOD_9 ( ) . getStatus ( ) ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ) { TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) , VAR_1 ) ) ; } else { TYPE_2 . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 entity = METHOD_2 ( ) ; TYPE_2 < TYPE_3 , TYPE_1 > VAR_1 = ( ( TYPE_2 < TYPE_3 , TYPE_1 > ) ( ( ( TYPE_4 ) ( resource ) ) . METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_1 . METHOD_6 ( ) , entity ) ; } 
protected java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > METHOD_1 ( boolean VAR_1 ) { java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > VAR_2 = new java.util.HashMap < org.ovirt.engine.core.common.businessentities.VmTemplate , TYPE_1 > ( ) ; if ( VAR_1 ) { return VAR_2 ; } for ( int i = 0 ; i < ( VAR_3 . length ) ; i ++ ) { VAR_2 . put ( METHOD_2 ( i ) , new TYPE_1 ( ) ) ; } return VAR_2 ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { VAR_1 = new TYPE_1 ( ) ; } METHOD_2 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_2 ( ) ) ) ; METHOD_4 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ; METHOD_5 ( ) . setEntity ( TYPE_2 . METHOD_3 ( VAR_1 . METHOD_5 ( ) ) ) ; } 
private boolean METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = VAR_3 . METHOD_3 ( ) ; return ( ( VAR_1 . METHOD_4 ( ) ) || ( ( VAR_1 . METHOD_5 ( ) ) && ( ! ( VAR_2 . METHOD_5 ( ) ) ) ) ) || ( ! ( TYPE_3 . equals ( VAR_1 . METHOD_6 ( ) , VAR_2 . METHOD_6 ( ) ) ) ) ; } 
protected boolean METHOD_1 ( TYPE_1 storageDomain ) { boolean returnValue = false ; if ( storageDomain != null ) { returnValue = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( storageDomain . getId ( ) ) . isEmpty ( ) ; if ( ! returnValue ) { addCanDoActionMessage ( VAR_1 ) ; } } return returnValue ; } 
public void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > parameters = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( java.lang.Object VAR_1 : VAR_2 . METHOD_2 ( ) ) { TYPE_2 < TYPE_3 > VAR_3 = new TYPE_2 < TYPE_3 > ( ) ; TYPE_3 VAR_4 = ( ( TYPE_3 ) ( VAR_1 ) ) ; VAR_3 . METHOD_3 ( VAR_4 ) ; parameters . add ( VAR_3 ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_5 , parameters ) ; METHOD_5 ( ) ; } 
public boolean METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version , TYPE_1 < TYPE_2 > VAR_2 , TYPE_3 VAR_3 ) { for ( TYPE_2 VAR_4 : VAR_2 ) { if ( ! ( VAR_5 . METHOD_2 ( ) . get ( VAR_1 ) . get ( version ) . METHOD_3 ( new TYPE_4 ( VAR_4 , VAR_3 ) ) ) ) { return false ; } } return true ; } 
public void METHOD_1 ( ) { TYPE_1 value = new TYPE_1 ( ) ; value . METHOD_2 ( false ) ; value . METHOD_3 ( new TYPE_2 ( STRING_1 ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) , TYPE_3 . any ( VAR_3 class ) ) ) . thenReturn ( value ) ; VAR_4 . METHOD_5 ( ) ; } 
private static TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_1 < TYPE_2 > VAR_1 ) { final TYPE_1 < TYPE_2 > result = new java.util.ArrayList < > ( ) ; for ( TYPE_2 VAR_2 : VAR_1 ) { final TYPE_2 VAR_3 = TYPE_3 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 != null ) { result . add ( VAR_3 ) ; } } return result ; } 
private void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( vm . getId ( ) , TYPE_2 . getName ( ) , TYPE_2 . getName ( ) ) ; for ( TYPE_1 VAR_2 : VAR_1 ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . add ( VAR_4 , VAR_2 . METHOD_4 ( ) ) ; VAR_3 . add ( VAR_5 , VAR_2 . METHOD_4 ( ) ) ; METHOD_5 ( VAR_3 , VAR_2 , null ) ; } } 
private void METHOD_1 ( ) { if ( ( ( getSelectedItem ( ) ) == null ) || ( ( getWindow ( ) ) != null ) ) { return ; } TYPE_1 . METHOD_2 ( this , VAR_1 , getEntity ( ) . getId ( ) , ( ( TYPE_2 . DiskImage ) ( getSelectedItem ( ) ) ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup cluster = METHOD_2 ( ) ; java.lang.Integer VAR_1 = METHOD_3 ( ) . getSelectedItem ( ) ; if ( ( cluster == null ) || ( VAR_1 == null ) ) { return ; } java.util.List < TYPE_1 > VAR_2 = TYPE_2 . METHOD_4 ( VAR_1 , cluster . METHOD_5 ( ) ) ; METHOD_6 ( VAR_2 ) ; } 
private boolean METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_1 = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VmTemplate > METHOD_3 ( METHOD_2 ( ) ) ; for ( org.ovirt.engine.core.common.businessentities.VmTemplate template : VAR_1 ) { if ( ( template != null ) && ( template . getId ( ) . equals ( VAR_3 ) ) ) { return true ; } } } return false ; } 
private java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( TYPE_1 VAR_1 ) { try { METHOD_2 ( VAR_2 , VAR_1 ) ; TYPE_2 [ ] hosts = VAR_3 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , TYPE_2 [ ] . class ) ; return map ( TYPE_3 . METHOD_5 ( hosts ) ) ; } catch ( TYPE_4 e ) { METHOD_6 ( e ) ; } catch ( TYPE_5 e ) { METHOD_6 ( e ) ; } catch ( TYPE_6 e ) { METHOD_6 ( e ) ; } return null ; } 
public TYPE_1 . AuditLogType METHOD_1 ( ) { TYPE_1 . AuditLogType VAR_1 = ( TYPE_2 . METHOD_2 ( ) ) ? VAR_2 : VAR_3 ; return TYPE_2 . getSucceeded ( ) ? ( TYPE_2 . METHOD_3 ( ) ) == ( VAR_4 ) ? VAR_5 : VAR_1 : VAR_6 ? VAR_7 : ( TYPE_2 . METHOD_4 ( ) . METHOD_5 ( ) ) == ( VAR_8 ) ? VAR_9 : VAR_10 ; } 
public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( model ) ) ; java.util.Map < java.lang.String , java.lang.String > VAR_2 = ( ( java.util.Map < java.lang.String , java.lang.String > ) ( result ) ) ; if ( ! ( VAR_2 . isEmpty ( ) ) ) { VAR_1 . METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( true ) ; } else { METHOD_2 ( false ) ; METHOD_3 ( false ) ; } } 
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 , boolean VAR_3 , java.util.List < java.lang.String > VAR_4 , java.lang.String VAR_5 , TYPE_2 nic ) { if ( VAR_2 || VAR_3 ) { java.util.List < java.lang.String > VAR_6 = ( VAR_2 ) ? VAR_4 : VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_7 = METHOD_3 ( VAR_1 , VAR_5 , VAR_3 , VAR_2 , VAR_6 , nic . METHOD_4 ( ) ) ; return METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_7 ) . METHOD_8 ( ) ; } return VAR_1 ; } 
public TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = null ; if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) { VAR_2 = new TYPE_3 ( VAR_3 class ) ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_2 ) ) { VAR_2 = new TYPE_4 ( VAR_4 class ) ; } else if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_3 ) ) { VAR_2 = new TYPE_3 ( VAR_5 class ) ; } else { } return VAR_2 ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.Network > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; } 
public TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > VAR_1 , TYPE_2 < TYPE_4 > VAR_2 , TYPE_2 < TYPE_5 < ? > > VAR_3 , java.lang.String VAR_4 , float VAR_5 , java.lang.String VAR_6 , java.lang.String VAR_7 , TYPE_6 VAR_8 , java.lang.String VAR_9 ) { return new TYPE_1 ( VAR_10 , VAR_11 , VAR_12 , VAR_1 , VAR_2 , VAR_3 , VAR_13 , VAR_4 , VAR_5 , VAR_6 , VAR_7 , VAR_8 ) ; } 
public synchronized void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ) ) { VAR_2 . put ( VAR_1 . getId ( ) , VAR_1 ) ; } METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( STRING_1 , VAR_1 . getId ( ) ) ; } 
public TYPE_1 getValue ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; switch ( VAR_1 . METHOD_2 ( ) ) { case VAR_2 : return METHOD_3 ( ) . METHOD_4 ( ) ; case VAR_3 : return METHOD_3 ( ) . METHOD_5 ( ) ; default : return METHOD_3 ( ) . METHOD_5 ( ) ; } } 
private boolean METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; if ( TYPE_1 . equals ( vm . getStatus ( ) ) ) { return true ; } java.util.ArrayList < TYPE_2 > VAR_1 = ( ( METHOD_2 ( ) ) != null ) ? VAR_2 . Linq < TYPE_2 > METHOD_3 ( METHOD_2 ( ) ) : new java.util.ArrayList < TYPE_2 > ( ) ; for ( TYPE_2 nic : VAR_1 ) { if ( nic . METHOD_4 ( ) ) { return false ; } } return true ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , VAR_3 , INT_1 , 0 ) ; java.util.List < TYPE_1 > VAR_4 = new java.util.ArrayList < > ( ) ; TYPE_1 VAR_5 = VAR_1 ; VAR_4 . add ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) . thenReturn ( VAR_4 ) ; boolean VAR_7 = command . METHOD_5 ( VAR_1 , null ) ; TYPE_2 . METHOD_6 ( VAR_7 ) ; } 
protected TYPE_1 METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 = new TYPE_1 ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 ) ) ) , METHOD_3 ( ) . METHOD_4 ( ) ) ; } return VAR_1 ; } 
protected void METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ; boolean VAR_2 = ( METHOD_3 ( ) . getSelectedItem ( ) ) == null ; if ( VAR_2 ) { METHOD_4 ( ) . setIsChangable ( false ) ; return ; } if ( ! ( VAR_3 ) ) { METHOD_4 ( ) . setIsChangable ( false ) ; return ; } METHOD_4 ( ) . setIsChangable ( true ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , false ) ; cmd . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) ; TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) ; } 
private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 VAR_2 , org.ovirt.engine.core.compat.Guid VAR_3 ) { java.lang.String VAR_4 = TYPE_2 . METHOD_2 ( VAR_5 , METHOD_3 ( ) ) ; return super . METHOD_1 ( VAR_1 , VAR_2 . METHOD_4 ( ) , TYPE_3 . getParameters ( ) . METHOD_5 ( ) , VAR_4 , VAR_6 , VAR_3 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat . Version version ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( version ) , aQuery ) ; } 
private TYPE_1 METHOD_1 ( final TYPE_2 < ? > command , final TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = command . METHOD_2 ( ) ; TYPE_1 result = TYPE_5 . METHOD_3 ( VAR_3 . log ) . METHOD_4 ( command , ( VAR_1 != null ? VAR_1 . METHOD_5 ( ) : null ) ) ; METHOD_6 ( command , result ) ; return result ; } 
public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( returnValue ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > VAR_2 = TYPE_2 . METHOD_1 ( VAR_1 , vm . METHOD_2 ( ) ) ; model . METHOD_3 ( model , VAR_3 , VAR_2 , vm . METHOD_4 ( ) ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 < org.ovirt.engine.core.compat.Guid , TYPE_2 < java.lang.Boolean , java.lang.Integer > > VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) . addValue ( STRING_2 , VAR_2 ) . addValue ( STRING_3 , VAR_1 . METHOD_4 ( ) ) . addValue ( STRING_4 , VAR_1 . METHOD_5 ( ) . METHOD_5 ( ) ) . addValue ( STRING_5 , VAR_1 . METHOD_5 ( ) . METHOD_4 ( ) ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( TYPE_2 . getVm ( ) . METHOD_2 ( ) ) != null ) { TYPE_3 . getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( VAR_2 , new TYPE_4 ( TYPE_2 . getVm ( ) . METHOD_2 ( ) . getValue ( ) , VAR_1 ) ) ; } else { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . METHOD_6 ( VAR_1 ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_1 ( STRING_1 ) ; METHOD_2 ( VAR_1 ) ; METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; assertEquals ( 1 , VAR_1 . METHOD_3 ( ) . size ( ) ) ; assertEquals ( 0 , VAR_1 . METHOD_3 ( ) . get ( 0 ) . METHOD_4 ( ) ) ; assertEquals ( STRING_2 , VAR_1 . METHOD_3 ( ) . get ( 0 ) . METHOD_5 ( ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 ) ; VAR_1 . append ( STRING_2 ) ; VAR_1 . append ( STRING_3 ) ; VAR_1 . append ( STRING_4 ) ; java.util.Map < java.lang.String , TYPE_2 > VAR_2 = new TYPE_3 ( ) . METHOD_2 ( VAR_1 . toString ( ) , VAR_3 . HashMap class ) ; TYPE_4 . METHOD_3 ( VAR_2 ) ; TYPE_4 . assertEquals ( VAR_2 . get ( STRING_5 ) , VAR_4 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_2 ( VAR_1 ) , aQuery ) ; } 
private void METHOD_1 ( TYPE_1 id ) { try ( TYPE_2 VAR_1 = new TYPE_2 ( this . VAR_2 ) ) { this . VAR_3 . METHOD_2 ( id ) ; TYPE_3 VAR_4 = this . map . METHOD_2 ( id ) ; java.util.List < TYPE_1 > VAR_5 = this . VAR_6 . get ( VAR_4 . METHOD_3 ( ) . METHOD_4 ( ) ) ; VAR_5 . METHOD_2 ( id ) ; } } 
private void METHOD_1 ( TYPE_1 e ) { switch ( VAR_1 . getStatus ( ) ) { case VAR_2 : break ; case VAR_3 : VAR_4 . METHOD_2 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_3 ( ) , e . METHOD_4 ( ) ) ; break ; default : VAR_4 . METHOD_5 ( STRING_1 , VAR_1 . getId ( ) , VAR_1 . METHOD_3 ( ) , e . METHOD_4 ( ) ) ; } } 
public static java.util.ArrayList < TYPE_1 > METHOD_1 ( java.util.ArrayList < TYPE_1 > VAR_1 , TYPE_2 status ) { java.util.ArrayList < TYPE_1 > VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 i : VAR_1 ) { if ( ( i . METHOD_2 ( ) ) == status ) { VAR_2 . add ( i ) ; } } return VAR_2 ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( TYPE_2 . METHOD_2 ( ) ) ) ; TYPE_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 , ( ( int ) ( METHOD_5 ( ) ) ) ) ; METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_7 ( ) , true ) ; TYPE_2 . getReturnValue ( ) . METHOD_8 ( VAR_1 . getId ( ) ) ; TYPE_2 . METHOD_9 ( true ) ; } 
public void METHOD_1 ( ) { TYPE_1 < java.lang.Boolean , java.lang.String > VAR_1 = new TYPE_1 < java.lang.Boolean , java.lang.String > ( true , STRING_1 ) ; TYPE_1 < java.lang.Boolean , java.lang.String > VAR_2 = new TYPE_1 < java.lang.Boolean , java.lang.String > ( true , STRING_1 ) ; TYPE_1 < java.lang.Boolean , java.lang.String > VAR_3 = new TYPE_1 < java.lang.Boolean , java.lang.String > ( false , STRING_1 ) ; TYPE_2 . METHOD_2 ( VAR_1 . equals ( VAR_2 ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . equals ( VAR_3 ) ) ; } 
protected void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid id = TYPE_1 . getParameters ( ) . getId ( ) ; for ( TYPE_2 VAR_1 : org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( id ) ) { TYPE_3 tempVar = new TYPE_3 ( VAR_1 ) ; tempVar . METHOD_4 ( false ) ; TYPE_4 . getInstance ( ) . METHOD_5 ( VAR_2 , tempVar , TYPE_5 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) ) ) ; } TYPE_1 . METHOD_8 ( ) . METHOD_9 ( id ) ; TYPE_1 . METHOD_10 ( true ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; } } ; TYPE_1 . METHOD_3 ( new TYPE_2 ( VAR_1 , TYPE_1 . METHOD_4 ( ) ) , aQuery ) ; } 
protected void METHOD_1 ( ) { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 . METHOD_3 ( VAR_2 . METHOD_4 ( VAR_3 ) ) . METHOD_5 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , false , iface . METHOD_4 ( ) , ( ! ( iface . METHOD_5 ( ) ) ) , 0 , TYPE_1 . instance ( ) . METHOD_6 ( ) , METHOD_7 ( ) ) ; } 
private void METHOD_1 ( ) { java.util.ArrayList < TYPE_1 . VdcActionParametersBase > list = new java.util.ArrayList < TYPE_1 . VdcActionParametersBase > ( ) ; for ( java.lang.Object item : METHOD_2 ( ) ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( item ) ) ; list . add ( new TYPE_2 ( vds . getId ( ) ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_3 ( VAR_1 , list , new TYPE_3 ( ) { public void METHOD_4 ( TYPE_4 result ) { } } , null ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_3 . get ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_5 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_4 . METHOD_5 ( VAR_1 ) ) ; TYPE_5 . METHOD_6 ( cmd ) ; } 
private void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_2 ( ) ; for ( TYPE_1 storageDomain : VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_3 ( storageDomain . getId ( ) , VAR_3 ) ) . thenReturn ( storageDomain ) ; } } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( new java.util.HashMap < java.lang.Integer , TYPE_1 > ( ) { { put ( 0 , new TYPE_1 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_1 ) , org.ovirt.engine.core.compat.Guid . METHOD_3 ( STRING_2 ) ) ) ; } } ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( TYPE_2 . any ( ) , TYPE_2 . METHOD_6 ( ) ) ; VAR_2 . METHOD_7 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { TYPE_1 vds = VAR_1 . METHOD_2 ( ) . get ( VAR_2 ) ; TYPE_2 . METHOD_3 ( vds ) ; java.lang.String name = vds . METHOD_4 ( ) ; TYPE_2 . METHOD_5 ( name . equals ( VAR_1 . METHOD_6 ( VAR_2 , VAR_3 . VDS ) ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; if ( VAR_8 . METHOD_3 ( ) . getValue ( ) ) { METHOD_4 ( VAR_9 ) ; METHOD_5 ( ) ; } else if ( VAR_10 . METHOD_3 ( ) . getValue ( ) ) { METHOD_4 ( VAR_11 ) ; } else if ( VAR_12 . METHOD_3 ( ) . getValue ( ) ) { METHOD_4 ( VAR_13 ) ; } } 
private void METHOD_1 ( java.lang.String VAR_1 ) { if ( ! ( VAR_2 . METHOD_2 ( VAR_1 ) ) ) { org.ovirt.engine.ui.uicommonweb.models.EntityModel VAR_3 = new org.ovirt.engine.ui.uicommonweb.models.EntityModel ( ) ; VAR_3 . setEntity ( VAR_1 ) ; TYPE_1 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > VAR_4 = new TYPE_2 < java.lang.String , org.ovirt.engine.ui.uicommonweb.models.EntityModel > ( STRING_1 , VAR_3 ) ; VAR_5 . add ( VAR_4 ) ; VAR_2 . put ( VAR_1 , VAR_4 ) ; } } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; TYPE_2 VAR_1 = new TYPE_2 ( STRING_1 , VAR_2 . StorageDomain ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , VAR_1 , aQuery ) ; } 
public void METHOD_1 ( ) { parameters = new TYPE_1 ( TYPE_2 . METHOD_2 ( ) ) ; command = org.mockito.Mockito . METHOD_3 ( new TYPE_3 ( parameters , null ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) ; org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_8 ( TYPE_4 . METHOD_9 ( VAR_2 class ) ) ; } 
protected java.util.List < java.lang.String > METHOD_1 ( TYPE_1 object ) { java.util.List < java.lang.String > VAR_1 = super . METHOD_1 ( object ) ; java.lang.String VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) . getName ( ) ; for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( VAR_1 . get ( i ) . equals ( VAR_2 ) ) { VAR_1 . METHOD_4 ( i ) ; break ; } } return VAR_1 ; } 
private static void METHOD_1 ( TYPE_1 command , TYPE_2 VAR_1 ) { final TYPE_3 dao = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; final TYPE_4 domain = new TYPE_4 ( ) ; domain . METHOD_3 ( VAR_1 ) ; org.mockito.Mockito.when ( dao . get ( TYPE_5 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( domain ) ; org.mockito.Mockito.doReturn ( dao ) . when ( command ) . METHOD_4 ( ) ; } 
public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_3 ) . METHOD_5 ( VAR_4 ) ; org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_5 ( TYPE_1 . any ( VAR_5 . VM class ) ) ; org.mockito.Mockito . METHOD_4 ( VAR_3 , org.mockito.Mockito . METHOD_6 ( 0 ) ) . METHOD_5 ( TYPE_1 . METHOD_7 ( VAR_6 ) ) ; } 
public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( model ) ) ; java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > map = ( ( java.util.HashMap < java.lang.Boolean , org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ; java.util.List < org.ovirt.engine.core.common.businessentities.VmTemplate > VAR_3 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VmTemplate > ( ) ; VAR_3 . add ( map . get ( true ) ) ; VAR_2 . setItems ( VAR_3 ) ; } 
private TYPE_1 . AsyncQuery METHOD_1 ( ) { TYPE_1 . AsyncQuery VAR_1 = new TYPE_1 . AsyncQuery ( ) ; VAR_2 = new TYPE_2 ( ) { public void onSuccess ( java.lang.Object returnValue ) { METHOD_2 ( ( ( TYPE_3 ) ( ( ( TYPE_4 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; } } ; return VAR_1 ; } 
public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 status ) { if ( ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( ( VAR_1 . METHOD_2 ( ) . getStatus ( ) ) == status ) ) { return true ; } return false ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = org.mockito.Mockito . METHOD_2 ( VAR_2 class ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( validator ) . METHOD_3 ( TYPE_2 . any ( VAR_3 class ) ) ; TYPE_3 . METHOD_4 ( validator . METHOD_5 ( TYPE_2 . METHOD_6 ( ) , TYPE_2 . any ( ) ) . METHOD_7 ( ) ) ; org.mockito.Mockito . METHOD_8 ( VAR_1 , org.mockito.Mockito . METHOD_9 ( VAR_4 ) ) . METHOD_10 ( TYPE_2 . any ( ) , TYPE_2 . any ( ) ) ; } 
public void METHOD_1 ( ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_1 VAR_2 = METHOD_3 ( ) ; long VAR_3 = TYPE_2 . METHOD_4 ( ) ; if ( VAR_2 . METHOD_5 ( ) ) { METHOD_6 ( VAR_3 ) . METHOD_7 ( VAR_2 . METHOD_8 ( ) ) ; METHOD_9 ( VAR_2 . METHOD_10 ( ) . METHOD_11 ( ) . map ( TYPE_3 : : METHOD_12 ) , VAR_3 ) ; } else { VAR_4 . METHOD_13 ( STRING_1 , VAR_1 . METHOD_14 ( ) ) ; } } } 
public void METHOD_1 ( final TYPE_1 object ) { super . METHOD_1 ( object ) ; VAR_1 . METHOD_1 ( object . METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( true ) ; VAR_3 . METHOD_3 ( false ) ; VAR_1 . METHOD_3 ( true ) ; VAR_4 . METHOD_3 ( false ) ; VAR_5 . METHOD_3 ( false ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; VAR_6 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( VAR_8 ) ; METHOD_8 ( ) . METHOD_9 ( INT_1 , INT_2 ) ; } 
public void METHOD_1 ( TYPE_1 returnValue ) { TYPE_2 VAR_1 = ( ( TYPE_2 ) ( getWindow ( ) ) ) ; VAR_1 . METHOD_2 ( ) . METHOD_3 ( ( ( org.ovirt.engine.core.compat.Guid ) ( returnValue . METHOD_4 ( ) ) ) ) ; METHOD_5 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; TYPE_1 . when ( VAR_1 . get ( TYPE_2 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) ; TYPE_1 . when ( VAR_1 . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_3 ( ) ) ; TYPE_3 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( VAR_3 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_5 ( TYPE_1 . any ( VAR_3 . Guid class ) ) ) . thenReturn ( null ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( command . METHOD_8 ( VAR_1 . METHOD_9 ( ) ) ) ; TYPE_3 . METHOD_10 ( STRING_1 , command , VAR_4 ) ; } 
private void METHOD_1 ( boolean VAR_1 , TYPE_1 VAR_2 ) { org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_2 ( ) ; TYPE_2 VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_3 ( VAR_1 ) ; if ( ! VAR_1 ) { VAR_4 . METHOD_4 ( new TYPE_3 ( VAR_2 , STRING_1 ) ) ; } org.mockito.Mockito.when ( VAR_5 . METHOD_5 ( TYPE_4 . METHOD_6 ( VAR_6 ) , TYPE_4 . any ( ) ) ) . thenReturn ( VAR_4 ) ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( METHOD_2 ( ) ) . when ( VAR_1 ) . METHOD_3 ( VAR_2 [ 1 ] ) ; METHOD_4 ( ) ; VAR_3 . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( VAR_4 , org.mockito.Mockito . METHOD_7 ( 2 ) ) . METHOD_8 ( TYPE_1 . any ( VAR_5 class ) , TYPE_1 . any ( VAR_6 class ) , TYPE_1 . METHOD_9 ( ) ) ; } 
public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_3 ) { org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( METHOD_3 ( ) ) . when ( VAR_2 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_4 , VAR_5 ) ) . when ( VAR_3 ) . get ( VAR_4 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_6 , VAR_5 ) ) . when ( VAR_3 ) . get ( VAR_6 ) ; } 
private java.util.List < org.ovirt.engine.core.compat.Guid > METHOD_1 ( java.lang.Object result ) { if ( ( result == null ) || ( ! ( result instanceof java.lang.Object [ ] ) ) ) { VAR_1 . error ( STRING_1 ) ; return null ; } java.util.List < org.ovirt.engine.core.compat.Guid > VAR_2 = new TYPE_1 < org.ovirt.engine.core.compat.Guid > ( ) ; for ( java.lang.Object VAR_3 : ( ( java.lang.Object [ ] ) ( result ) ) ) { VAR_2 . add ( new org.ovirt.engine.core.compat.Guid ( VAR_3 . toString ( ) ) ) ; } return VAR_2 ; } 
public static TYPE_1 map ( TYPE_2 VAR_1 , TYPE_1 template ) { TYPE_3 type = TYPE_3 . valueOf ( VAR_1 . METHOD_1 ( ) ) ; if ( template != null ) { return template ; } switch ( type ) { case VAR_2 : return new TYPE_1 ( VAR_3 ) ; case VAR_4 : return new TYPE_1 ( VAR_5 ) ; default : return template ; } } 
public void METHOD_1 ( ) { super . METHOD_1 ( ) ; java.util.ArrayList < TYPE_1 . VdcQueryType > VAR_1 = new java.util.ArrayList < TYPE_1 . VdcQueryType > ( ) ; VAR_1 . add ( VAR_2 ) ; TYPE_2 VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_4 ) ; java.util.ArrayList < TYPE_3 > VAR_5 = new java.util.ArrayList < TYPE_3 > ( TYPE_4 . METHOD_3 ( new TYPE_3 [ ] { VAR_3 } ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_1 , VAR_5 , this , getModel ( ) . METHOD_5 ( ) ) ; } 
private void METHOD_1 ( ) { TYPE_1 model = new TYPE_1 ( this , VAR_1 ) ; model . setTitle ( org.ovirt.engine.ui.uicompat.ConstantsManager.getInstance ( ) . getConstants ( ) . METHOD_2 ( ) ) ; model . METHOD_3 ( STRING_1 ) ; model . METHOD_4 ( VAR_2 ) ; METHOD_5 ( model ) ; model . setEntity ( ( ( TYPE_2 ) ( getSelectedItem ( ) ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; METHOD_3 ( METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { STRING_1 , STRING_2 } , new java.lang.Object [ ] { VAR_3 [ 0 ] , java.lang.Boolean . FALSE } , VAR_3 [ 0 ] ) ) ; METHOD_5 ( resource . METHOD_6 ( new TYPE_1 ( ) ) ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 model , TYPE_2 entity ) { TYPE_3 parameters = new TYPE_3 ( ) ; parameters . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( model . getId ( ) ) ) ; model . METHOD_3 ( METHOD_4 ( VAR_1 . List class , VAR_2 class ) . map ( getEntity ( VAR_1 . ArrayList class , VAR_3 , parameters , model . getId ( ) ) , null ) ) ; return model ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > result = dao . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; TYPE_2 . assertEquals ( VAR_1 , result . get ( 0 ) . METHOD_5 ( ) . getId ( ) ) ; } 
public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 , boolean VAR_3 , java.lang.String VAR_4 ) { return TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_1 , vmId ) , VAR_5 , ( VAR_3 ? VAR_6 : VAR_7 ) , VAR_8 , VAR_2 , false , VAR_4 , null , false ) ; } 
private void METHOD_1 ( final int VAR_1 ) { TYPE_1 . METHOD_2 ( new TYPE_2 < TYPE_3 > ( ) { public TYPE_3 METHOD_3 ( TYPE_4 VAR_2 ) throws TYPE_5 { TYPE_3 result = METHOD_4 ( VAR_1 ) ; result . setId ( ( ( org.ovirt.engine.core.compat.Guid ) ( VAR_2 . METHOD_5 ( ) [ 0 ] ) ) ) ; return result ; } } ) . when ( VAR_3 ) . get ( TYPE_6 . any ( VAR_4 . Guid class ) ) ; } 
protected boolean METHOD_1 ( ) { boolean VAR_1 = true ; if ( VAR_2 . isEmpty ( ) ) { VAR_1 = METHOD_2 ( ) ; } else { VAR_1 = METHOD_3 ( ) ; } if ( VAR_1 && ( ( METHOD_4 ( ) . size ( ) ) != ( VAR_2 . size ( ) ) ) ) { log . error ( STRING_1 , VAR_3 . getId ( ) ) ; METHOD_5 ( VAR_4 ) ; VAR_1 = false ; } return VAR_1 && ( METHOD_6 ( ) ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; params = new TYPE_1 ( quota ) ; command = org.mockito.Mockito . METHOD_3 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_4 ( ) ; org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito . METHOD_5 ( ) . when ( command ) . METHOD_7 ( ) ; } 
private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_4 ( TYPE_2 . any ( VAR_4 . Guid class ) , TYPE_2 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( VAR_1 ) ; } 
private TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String value , java.lang.String VAR_3 ) { TYPE_1 VAR_4 = TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , value ) ; TYPE_3 . METHOD_3 ( VAR_4 . toString ( ) , TYPE_4 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_3 ) ) ) ; return VAR_4 ; } 
public java.util.List < TYPE_1 > METHOD_1 ( ) { java.lang.Integer VAR_1 = VAR_2 < java.lang.Integer > METHOD_2 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_3 ( ) . addValue ( STRING_1 , VAR_1 . METHOD_4 ( ) ) ; return METHOD_5 ( ) . METHOD_6 ( STRING_2 , VAR_5 . instance , VAR_4 ) ; } 
public org.ovirt.engine.core.compat.Guid METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { java.util.List < TYPE_1 . DiskImage > VAR_2 = TYPE_2 . METHOD_2 ( TYPE_3 . getVm ( ) . METHOD_3 ( ) , VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain = TYPE_4 . METHOD_4 ( TYPE_3 . getStoragePoolId ( ) , VAR_2 ) ; if ( storageDomain != null ) { VAR_1 = storageDomain . getId ( ) ; } } return VAR_1 ; } 
public static java.util.List < TYPE_1 > METHOD_1 ( java.util.List < java.lang.String > model ) { java.util.List < TYPE_1 > result = new java.util.ArrayList < > ( ( model != null ? model . size ( ) : 0 ) ) ; if ( model != null ) { for ( java.lang.String VAR_1 : model ) { try { TYPE_2 source = TYPE_2 . METHOD_2 ( VAR_1 ) ; result . add ( TYPE_3 . map ( source , null ) ) ; } catch ( TYPE_4 VAR_2 ) { } } } return result ; } 
public void METHOD_1 ( ) { diskImage . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; TYPE_1 . getInstance ( ) . METHOD_4 ( VAR_1 . DbFacade class , VAR_2 ) ; TYPE_2 . METHOD_5 ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_6 ( ) ) . thenReturn ( VAR_3 ) ; VAR_4 = new TYPE_3 ( ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; VAR_5 = new TYPE_4 ( ) ; } 
public void METHOD_1 ( boolean VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { java.util.List < TYPE_1 > VAR_2 = METHOD_2 ( ) . METHOD_3 ( vmId ) ; if ( VAR_2 != null ) { for ( TYPE_1 iface : VAR_2 ) { if ( VAR_1 ) { METHOD_4 ( ) . METHOD_5 ( iface . METHOD_6 ( ) ) ; } METHOD_2 ( ) . METHOD_7 ( iface . getId ( ) ) ; METHOD_8 ( ) . METHOD_7 ( iface . getId ( ) ) ; } } } 
public void METHOD_1 ( ) { TYPE_1 . DiskImage image = TYPE_2 . METHOD_2 ( ) ; image . METHOD_3 ( VAR_1 ) ; TYPE_3 parameters = TYPE_2 . METHOD_4 ( ) ; parameters . METHOD_5 ( image ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ; METHOD_7 ( VAR_2 , parameters ) ; METHOD_8 ( ) ; METHOD_9 ( VAR_2 , VAR_3 ) ; METHOD_10 ( ) ; METHOD_11 ( ) ; METHOD_12 ( ) ; METHOD_13 ( ) ; } 
private TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) { TYPE_2 parameters = new TYPE_2 ( VAR_2 , VAR_3 ) ; parameters . METHOD_2 ( VAR_1 ) ; TYPE_3 . VdcQueryReturnValue result = VAR_4 . METHOD_3 ( VAR_5 , parameters ) ; return TYPE_1 . from ( ( ( java.lang.Integer ) ( result . getReturnValue ( ) ) ) ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( ) ; java.util.List < java.lang.String > VAR_2 = TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( STRING_1 ) ) ; TYPE_4 . METHOD_4 ( STRING_2 , VAR_2 . METHOD_5 ( STRING_2 ) ) ; TYPE_4 . METHOD_4 ( STRING_3 , VAR_2 . METHOD_5 ( STRING_3 ) ) ; TYPE_4 . METHOD_4 ( STRING_4 , ( ! ( VAR_2 . METHOD_5 ( STRING_4 ) ) ) ) ; } 
private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 . getId ( ) ) ) { throw new TYPE_3 ( VAR_3 ) ; } TYPE_1 VAR_4 = new TYPE_4 ( METHOD_3 ( VAR_1 ) , VAR_1 . METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( ) ; VAR_2 . put ( VAR_1 . getId ( ) , VAR_4 ) ; return VAR_4 ; } 
public void METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < java.lang.String > VAR_2 , TYPE_1 < java.lang.String > value , boolean VAR_3 ) { if ( TYPE_2 . METHOD_2 ( VAR_1 , STRING_1 ) ) { TYPE_3 VAR_4 = new TYPE_3 ( TYPE_3 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_5 , CHAR_1 ) ) ) ; VAR_5 = TYPE_4 . METHOD_5 ( STRING_2 , VAR_4 ) ; } else { super . METHOD_1 ( VAR_1 , VAR_2 , value , VAR_3 ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( true ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object VAR_3 ) { TYPE_1 . METHOD_3 ( ) ; } } ; frontend . METHOD_4 ( frontend . METHOD_5 ( ) , VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; TYPE_1 VAR_2 = METHOD_2 ( STRING_2 ) ; VAR_2 . METHOD_3 ( STRING_3 ) ; cmd = org.mockito.Mockito . METHOD_4 ( new TYPE_2 ( new TYPE_3 ( VAR_3 , STRING_4 , STRING_5 , VAR_4 , null , null , TYPE_4 . METHOD_5 ( VAR_1 , VAR_2 ) ) , null ) ) ; METHOD_6 ( VAR_5 ) ; TYPE_5 . METHOD_7 ( cmd . validate ( ) ) ; } 
public static synchronized TYPE_1 getInstance ( ) { if ( ( TYPE_1 . instance ) == null ) { TYPE_1 . instance = new TYPE_1 ( ) ; } else { if ( ( TYPE_1 . instance ) == null ) { synchronized ( VAR_1 class ) { if ( ( TYPE_1 . instance ) == null ) { TYPE_1 . instance = new TYPE_1 ( ) ; } } } } return TYPE_1 . instance ; } 
public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface = METHOD_2 ( ) ; METHOD_3 ( iface , false , iface . METHOD_4 ( ) , iface . METHOD_5 ( ) , iface . METHOD_6 ( ) , ( ( iface . METHOD_7 ( ) ) + 1 ) ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; METHOD_4 ( cmd , false ) ; cmd . METHOD_5 ( ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . getSucceeded ( ) ) ; TYPE_3 . assertEquals ( cmd . METHOD_7 ( ) , VAR_2 ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > list = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ) ( source ) ) ; TYPE_1 . METHOD_2 ( list , new TYPE_2 ( ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDSGroup > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_3 ( ) , aQuery ) ; } 
public boolean METHOD_1 ( ) { final int VAR_1 = ( VAR_2 ) / ( VAR_3 < java.lang.Integer > METHOD_2 ( VAR_4 ) ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { if ( METHOD_3 ( ) ) { VAR_5 . METHOD_4 ( STRING_1 , host . getName ( ) , host . getId ( ) ) ; return true ; } else { METHOD_5 ( ) ; } } return false ; } 
public java.util.List < org.ovirt.engine.core.common.businessentities.VDS > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_1 status ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_2 = METHOD_2 ( ) . METHOD_3 ( STRING_1 , VAR_3 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) . addValue ( STRING_3 , status . getValue ( ) ) ) ; return METHOD_5 ( VAR_2 ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; VAR_3 . METHOD_6 ( VAR_4 , VAR_5 , java.lang.Boolean . TRUE ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( ) ; METHOD_10 ( ) ; METHOD_11 ( VAR_6 ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = METHOD_2 ( INT_1 , 2 , 2 , 2 , 2 ) ; TYPE_2 . assertEquals ( INT_1 , VAR_1 . size ( ) ) ; TYPE_2 . METHOD_3 ( VAR_1 . METHOD_4 ( VAR_2 . METHOD_5 ( nic ) ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { java.util.List < java.lang.String > VAR_1 = new java.util.ArrayList < java.lang.String > ( ) ; VAR_1 . add ( STRING_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_1 . METHOD_3 ( VAR_2 . METHOD_4 ( STRING_2 ) ) . METHOD_5 ( VAR_1 ) ; resource . METHOD_6 ( METHOD_7 ( ) ) ; METHOD_8 ( true ) ; VAR_3 . METHOD_9 ( ) ; resource . get ( ) ; } 
private void METHOD_1 ( final TYPE_1 < TYPE_2 > . VAR_1 context ) { log . error ( STRING_1 , METHOD_2 ( ) ) ; METHOD_3 ( context . entity ) ; if ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) ) ) { METHOD_6 ( ( ( TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) == ( VAR_2 ) ? VAR_3 : VAR_4 ) ) ; } METHOD_8 ( VAR_5 ) ; METHOD_9 ( VAR_5 ) ; } 
private boolean METHOD_1 ( TYPE_1 VAR_1 ) { org.ovirt.engine.core.compat.Guid VAR_2 = TYPE_2 . getParameters ( ) . METHOD_2 ( ) ; if ( VAR_2 == null ) { return ! ( TYPE_3 . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) ) ) ; } else { return ! ( TYPE_3 . METHOD_6 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) , TYPE_2 . getReturnValue ( ) . METHOD_5 ( ) , VAR_2 ) ) ; } } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( org.ovirt.engine.ui.frontend.Frontend . METHOD_2 ( VAR_1 ) ) { return ; } VAR_2 . log ( VAR_3 , ( STRING_1 + VAR_1 ) , VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_3 ( ) . METHOD_4 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_5 ( VAR_1 ) ; if ( VAR_4 . METHOD_6 ( ) ) { org.ovirt.engine.ui.frontend.Frontend . METHOD_7 ( null ) ; VAR_5 . METHOD_8 ( VAR_4 . getModel ( ) , null ) ; } } 
public void METHOD_1 ( ) { TYPE_1 cmd = VAR_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ; TYPE_2 . METHOD_4 ( cmd ) ; VAR_1 . METHOD_2 ( ) . METHOD_5 ( METHOD_3 ( ) ) ; TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) . get ( METHOD_3 ( ) ) ; TYPE_2 . METHOD_6 ( VAR_2 ) ; } 
protected void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 , int status ) { assertEquals ( status , VAR_1 . METHOD_2 ( ) . getStatus ( ) ) ; METHOD_3 ( ( ( VAR_1 . METHOD_2 ( ) . getEntity ( ) ) instanceof TYPE_2 ) ) ; TYPE_2 VAR_4 = ( ( TYPE_2 ) ( VAR_1 . METHOD_2 ( ) . getEntity ( ) ) ) ; assertEquals ( VAR_2 , VAR_4 . METHOD_4 ( ) ) ; assertEquals ( VAR_3 , VAR_4 . METHOD_5 ( ) ) ; } 
public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.VM ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; } 
public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; org.mockito.Mockito . METHOD_4 ( ) . when ( VAR_2 ) . METHOD_5 ( METHOD_6 ( ) , true ) ; cmd . METHOD_1 ( ) ; TYPE_3 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; } 
protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { org.ovirt.engine.core.common.businessentities.VM vm = ( ( TYPE_1 ) ( getEntity ( ) ) ) . getVm ( ) ; setItems ( vm . METHOD_2 ( ) ) ; } else { setItems ( null ) ; } } 
public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . setId ( VAR_1 [ 0 ] . toString ( ) ) ; model . METHOD_2 ( VAR_2 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_3 . METHOD_5 ( ) ; try { ( ( TYPE_2 ) ( VAR_4 ) ) . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_3 VAR_5 ) { METHOD_7 ( VAR_5 , STRING_2 , STRING_3 , STRING_4 ) ; } } 
public static TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 < java.lang.String > VAR_2 = new TYPE_3 < > ( ) ; for ( java.lang.String VAR_3 : VAR_4 ) { java.util.List < java.lang.String > VAR_5 = VAR_1 . METHOD_2 ( VAR_3 ) ; if ( VAR_5 != null ) { VAR_2 . METHOD_3 ( VAR_5 ) ; } } return VAR_2 ; } 
private void METHOD_1 ( ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) . METHOD_3 ( ) ) { java.lang.String VAR_1 = iface . METHOD_4 ( ) ; if ( ( TYPE_1 . METHOD_5 ( VAR_1 ) ) && ( ! ( VAR_2 . METHOD_6 ( VAR_1 ) ) ) ) { VAR_3 . add ( METHOD_2 ( ) . get ( VAR_1 ) ) ; } } } 
public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_1 . METHOD_2 ( ) ; if ( VAR_2 == ( VAR_3 ) ) { METHOD_3 ( VAR_1 ) ; } else if ( VAR_2 == ( VAR_4 ) ) { METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; } VAR_5 . error ( STRING_1 , VAR_1 . METHOD_6 ( ) , VAR_1 . METHOD_5 ( ) ) ; return VAR_2 ; } 
public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; METHOD_3 ( VAR_2 ) ; org.mockito.Mockito.when ( host . METHOD_4 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_5 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( VAR_4 ) , TYPE_3 . METHOD_7 ( ) ) ; } 
protected TYPE_1 METHOD_1 ( ) { return super . METHOD_1 ( ) . METHOD_2 ( VAR_1 , TYPE_2 . METHOD_3 ( ) ) . METHOD_4 ( METHOD_5 ( ) , TYPE_2 . METHOD_3 ( ) ) . METHOD_6 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) . METHOD_2 ( VAR_3 , TYPE_2 . METHOD_7 ( ) . METHOD_8 ( ) ) . METHOD_6 ( VAR_4 , TYPE_2 . METHOD_3 ( ) ) ; } 
public static void METHOD_1 ( TYPE_1 . DiskImage image , boolean VAR_1 , TYPE_2 VAR_2 ) { try { TYPE_3 . METHOD_2 ( image , VAR_1 , VAR_2 ) ; TYPE_3 . METHOD_3 ( image ) ; } catch ( TYPE_4 VAR_3 ) { VAR_4 . error ( STRING_1 , VAR_3 . METHOD_4 ( ) ) ; VAR_4 . METHOD_5 ( STRING_2 , VAR_3 ) ; throw new TYPE_5 ( VAR_5 , VAR_3 ) ; } } 
public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_1 = METHOD_2 ( true ) ; VAR_1 . METHOD_3 ( VAR_2 ) ; VAR_1 . setId ( VAR_3 ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_4 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_6 ) , TYPE_2 . any ( VAR_7 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; } 
public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( cmd ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( TYPE_1 . METHOD_5 ( ) ) . when ( cmd ) . METHOD_6 ( ) ; TYPE_2 . METHOD_7 ( cmd . validate ( ) ) ; TYPE_2 . METHOD_7 ( cmd . getReturnValue ( ) . METHOD_8 ( ) . isEmpty ( ) ) ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . Network VAR_1 = new org.ovirt.engine.core.common.businessentities . Network ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) ; VAR_1 . METHOD_8 ( true ) ; METHOD_9 ( ) . METHOD_10 ( VAR_1 ) ; } 
public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; } 
public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , final TYPE_3 model , TYPE_4 VAR_2 , TYPE_5 event , TYPE_6 < TYPE_3 > VAR_3 ) { VAR_4 . METHOD_1 ( context , VAR_1 , VAR_5 . METHOD_2 ( ( ( TYPE_7 ) ( model . getSelectedItem ( ) ) ) ) , event , new TYPE_6 < java.lang.String > ( ) { public void METHOD_3 ( java.lang.String value ) { if ( value != null ) { model . setSelectedItem ( VAR_6 . get ( value ) ) ; } } } ) ; } 
protected TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return super . METHOD_1 ( VAR_1 ) . append ( STRING_1 , METHOD_2 ( ) ) . append ( STRING_2 , METHOD_3 ( ) ) . append ( STRING_3 , METHOD_4 ( ) ) . append ( STRING_4 , METHOD_5 ( ) ) . append ( STRING_5 , METHOD_6 ( ) ) ; } 
public boolean METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = getEntity ( ) ; boolean VAR_1 = ( vm != null ) && ( ( ( ( vm . METHOD_2 ( ) ) == ( VAR_2 ) ) || ( ( ( vm . METHOD_2 ( ) ) == ( VAR_3 ) ) | ( ( vm . METHOD_2 ( ) ) == ( VAR_4 ) ) ) ) || ( ( vm . METHOD_2 ( ) ) == ( VAR_5 ) ) ) ; return ( VAR_6 ) && VAR_1 ; } 
private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . network VAR_1 = new org.ovirt.engine.core.common.businessentities . network ( ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; VAR_1 . METHOD_3 ( VAR_2 < java.lang.String > METHOD_4 ( VAR_3 ) ) ; VAR_1 . METHOD_5 ( VAR_4 ) ; VAR_1 . METHOD_6 ( TYPE_1 . METHOD_7 ( ) . getId ( ) ) ; VAR_1 . METHOD_8 ( true ) ; METHOD_9 ( ) . METHOD_10 ( VAR_1 ) ; } 
public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_4 . METHOD_5 ( VAR_5 class ) ) ; VAR_2 . METHOD_6 ( VAR_6 , VAR_7 ) ; org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_8 , VAR_1 ) ; org.mockito.Mockito . METHOD_7 ( VAR_6 ) . METHOD_8 ( VAR_9 , VAR_4 ) ; } 
public void METHOD_1 ( ) { command = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , new TYPE_3 ( TYPE_4 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ) , null , null ) ) ) ; org.mockito.Mockito.doReturn ( vds ) . when ( command ) . METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( null ) . when ( command ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . validate ( ) ) ; } 
private static void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 . METHOD_2 ( new TYPE_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 ) , VAR_2 , VAR_3 , VAR_4 . Collections < java.lang.String , java.lang.Object > METHOD_4 ( VAR_5 , STRING_1 ) , true , true , null ) ; } 
public void METHOD_1 ( ) throws TYPE_1 { TYPE_2 VAR_1 = new TYPE_2 ( this . METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( STRING_1 ) . METHOD_5 ( ) . METHOD_6 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( VAR_1 . METHOD_7 ( ) , STRING_2 ) ; TYPE_3 VAR_3 = new TYPE_3 ( VAR_2 . METHOD_8 ( ) , VAR_1 , 1 ) ; TYPE_4 . METHOD_9 ( STRING_3 , VAR_3 . METHOD_10 ( ) ) ; TYPE_4 . METHOD_11 ( STRING_4 , VAR_3 . METHOD_12 ( ) ) ; } 
public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { java.lang.Object [ ] VAR_1 = ( ( java.lang.Object [ ] ) ( target ) ) ; TYPE_1 VAR_2 = ( ( TYPE_1 ) ( VAR_1 [ 0 ] ) ) ; TYPE_2 VAR_3 = ( ( TYPE_2 ) ( VAR_1 [ 1 ] ) ) ; VAR_2 . METHOD_2 ( VAR_3 , ( returnValue == null ) ) ; } 
public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = dao . get ( TYPE_1 . toString ( ) ) ; VAR_4 = new TYPE_2 ( ) ; VAR_4 . METHOD_4 ( STRING_2 ) ; VAR_4 . METHOD_5 ( VAR_5 ) ; } 
public TYPE_1 . VdcActionParametersBase getParameters ( TYPE_2 model , TYPE_3 entity ) { TYPE_4 parameters = new TYPE_4 ( ) ; parameters . METHOD_1 ( TYPE_5 . map ( TYPE_6 . METHOD_2 ( model . METHOD_3 ( ) ) ) ) ; parameters . METHOD_4 ( TYPE_5 . map ( TYPE_7 . METHOD_2 ( model . getModel ( ) ) ) ) ; parameters . setId ( vmId ) ; parameters . METHOD_5 ( true ) ; return parameters ; } 
protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , java.lang.String VAR_2 , java.lang.String VAR_3 ) { TYPE_1 obj = METHOD_2 ( ) ; obj . put ( STRING_1 , VAR_1 . getId ( ) . toString ( ) ) ; obj . put ( STRING_2 , VAR_1 . METHOD_3 ( ) ) ; obj . put ( STRING_3 , VAR_1 . METHOD_4 ( ) ) ; obj . put ( STRING_4 , VAR_1 . METHOD_5 ( ) ) ; obj . put ( STRING_5 , VAR_2 ) ; obj . put ( STRING_6 , VAR_3 ) ; return obj ; } 
public void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . add ( new TYPE_2 < TYPE_1 , java.lang.Integer > ( VAR_1 , 1 ) ) ; for ( int i = 0 ; i < ( VAR_3 . size ( ) ) ; i ++ ) { if ( VAR_3 . get ( i ) . getId ( ) . equals ( VAR_1 . getId ( ) ) ) { VAR_3 . METHOD_2 ( VAR_1 ) ; break ; } } METHOD_3 ( null ) ; METHOD_4 ( ) . METHOD_5 ( this , VAR_4 ) ; } 
public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_2 ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_2 ( command . getName ( ) , TYPE_3 ) ) { METHOD_4 ( ) ; } } 
private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 . VdcBllMessages VAR_2 ) { java.util.List < TYPE_2 . VdcBllMessages > VAR_3 = VAR_1 . validate ( ) ; TYPE_3 . METHOD_2 ( TYPE_4 . METHOD_3 ( STRING_1 , VAR_2 , VAR_3 ) , VAR_3 . METHOD_4 ( VAR_2 ) ) ; } 
private void METHOD_1 ( ) { METHOD_2 ( ) ; getWindow ( ) . METHOD_3 ( ) ; if ( ( VAR_1 ) != null ) { org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_4 ( VAR_2 , new TYPE_1 ( VAR_1 , VAR_3 ) , new TYPE_2 ( ) { public void METHOD_5 ( TYPE_3 result ) { TYPE_4 VAR_4 = ( ( TYPE_4 ) ( result . METHOD_6 ( ) ) ) ; METHOD_7 ( VAR_5 , VAR_6 ) ; VAR_5 = null ; } } , this ) ; } } 
public static java.util.List < TYPE_1 > METHOD_1 ( final TYPE_2 VAR_1 , final java.util.List < java.lang.String > VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( java.util.List < java.lang.String > VAR_4 : TYPE_3 . METHOD_2 ( VAR_1 , VAR_2 ) ) { VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 , TYPE_4 . METHOD_5 ( VAR_4 , VAR_5 ) , true ) ) ; } return VAR_3 ; } 
private TYPE_1 METHOD_1 ( int VAR_1 ) { TYPE_1 cluster = new TYPE_1 ( ) ; cluster . setId ( VAR_2 [ VAR_1 ] ) ; cluster . METHOD_2 ( STRING_1 ) ; cluster . METHOD_3 ( true ) ; cluster . METHOD_4 ( false ) ; cluster . METHOD_5 ( VAR_3 ) ; return cluster ; } 
public TYPE_1 addValue ( java.lang.String VAR_1 , java.lang.Object value ) { java.lang.Object VAR_2 = value ; if ( VAR_2 != null ) { if ( VAR_2 . METHOD_1 ( ) . METHOD_2 ( ) ) { VAR_2 = TYPE_2 . METHOD_3 ( VAR_2 ) ; } else if ( ( VAR_2 instanceof TYPE_3 ) || ( VAR_2 instanceof org.ovirt.engine.core.compat . Version ) ) { VAR_2 = value . toString ( ) ; } } return super . addValue ( ( ( VAR_3 . METHOD_4 ( ) ) + VAR_1 ) , VAR_2 ) ; } 
private void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( parameters , null ) ) ; org.mockito.Mockito.when ( VAR_1 . getParameters ( ) ) . thenReturn ( parameters ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_3 ) ) . thenReturn ( METHOD_4 ( VAR_3 ) ) ; org.mockito.Mockito.when ( VAR_2 . get ( VAR_4 ) ) . thenReturn ( null ) ; } 
public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { if ( ( storage . getSelectedItem ( ) ) == null ) { VAR_2 . METHOD_2 ( ( ( TYPE_2 ) ( storage . getSelectedItem ( ) ) ) ) ; } } return VAR_2 ; } 
protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_2 ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; VAR_1 . METHOD_2 ( VAR_6 ) ; TYPE_1 < TYPE_2 > command = org.mockito.Mockito . METHOD_3 ( new TYPE_1 < TYPE_2 > ( VAR_1 ) { protected void METHOD_4 ( ) { } } ) ; command . METHOD_5 ( ) ; return command ; } 
protected static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , java.util.ArrayList < java.lang.String > VAR_2 ) { org.ovirt.engine.core.common.businessentities.VDSGroup VAR_3 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . get ( VAR_1 ) ; boolean VAR_4 = VAR_3 != null ; if ( ! VAR_4 ) { VAR_2 . add ( TYPE_1 . toString ( ) ) ; } return VAR_4 ; } 
private void METHOD_1 ( ) { VAR_1 = false ; VAR_2 = false ; VAR_3 = false ; VAR_4 = false ; VAR_5 = false ; VAR_6 = STRING_1 ; VAR_7 = STRING_1 ; VAR_8 = false ; VAR_9 = new java.util.HashMap < java.lang.String , TYPE_1 > ( ) ; VAR_10 = new java.util.HashMap < java.lang.String , TYPE_2 > ( ) ; VAR_11 = new TYPE_3 < TYPE_4 > ( STRING_2 , VAR_12 class ) ; VAR_13 = 0 ; } 
public static java.lang.String METHOD_1 ( java.util.ArrayList < TYPE_1 . Disk > VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return null ; } final java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( ) ; for ( TYPE_1 . Disk disk : VAR_1 ) { VAR_2 . add ( disk . METHOD_2 ( ) ) ; } return java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) ; } 
private void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . add ( VAR_3 , TYPE_3 . getName ( ) ) ; VAR_2 . add ( VAR_4 , VAR_1 . METHOD_2 ( ) . getName ( ) ) ; VAR_2 . add ( VAR_5 , TYPE_4 . METHOD_3 ( ) ) ; VAR_2 . add ( VAR_6 , java.lang.String.valueOf ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) ) ) ; VAR_7 . add ( VAR_2 ) ; } 
public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 , VAR_3 , TYPE_2 . METHOD_3 ( VAR_4 ) ) ; TYPE_3 . METHOD_4 ( VAR_1 ) ; TYPE_3 . METHOD_5 ( VAR_1 . METHOD_6 ( VAR_5 ) ) ; for ( TYPE_1 VAR_6 : VAR_1 ) { TYPE_3 . METHOD_7 ( VAR_4 , VAR_6 . METHOD_8 ( ) ) ; } } 
