private TYPE_1 METHOD_1 ( TYPE_2 token , TYPE_3 VAR_1 ) { if ( token == VAR_2 || token == VAR_3 || token == VAR_4 ) { return new TYPE_1 ( STRING_1 , token ) ; } VAR_5 . update ( ) ; int VAR_6 = VAR_5 . METHOD_2 ( ) ; int VAR_7 = VAR_5 . METHOD_3 ( ) + 1 ; String line = VAR_5 . METHOD_4 ( ) ; if ( VAR_1 != VAR_8 ) { line = line . trim ( ) ; } TYPE_4 VAR_9 = new TYPE_4 ( ) ; VAR_9 . append ( line ) ; state = VAR_10 ; token = METHOD_5 ( ) ; boolean VAR_11 = false ; do { switch ( token ) { case VAR_12 : if ( VAR_11 ) { } else { if ( VAR_9 . length ( ) > 0 ) { VAR_9 . append ( CHAR_1 ) ; } VAR_9 . append ( CHAR_2 ) ; } token = METHOD_5 ( ) ; continue ; case VAR_13 : if ( VAR_1 != VAR_14 ) { VAR_9 . append ( "\n" ) ; } VAR_11 = true ; token = METHOD_5 ( ) ; continue ; default : VAR_11 = false ; state = VAR_10 ; if ( token == VAR_2 || token == VAR_4 || ( token == VAR_15 && VAR_1 != VAR_8 ) ) { String VAR_16 = VAR_9 . toString ( ) ; if ( VAR_1 != VAR_8 ) { VAR_16 = VAR_16 . trim ( ) ; } int VAR_17 = VAR_5 . METHOD_2 ( ) ; int VAR_18 = VAR_5 . METHOD_3 ( ) ; if ( VAR_16 . length ( ) > 0 ) { VAR_19 . METHOD_6 ( VAR_16 , VAR_6 , VAR_7 , VAR_17 , VAR_18 ) ; } return new TYPE_1 ( VAR_16 , token ) ; } if ( VAR_9 . length ( ) > 0 ) { VAR_9 . append ( CHAR_1 ) ; } VAR_9 . append ( toString ( token ) ) ; line = VAR_5 . METHOD_4 ( ) ; if ( VAR_1 != VAR_8 ) { line = METHOD_7 ( line ) ; } VAR_9 . append ( line ) ; token = METHOD_5 ( ) ; } } while ( true ) ; }