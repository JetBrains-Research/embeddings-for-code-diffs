private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 < String , String > VAR_3 ) { TYPE_4 < TYPE_5 > nodes = TYPE_6 . METHOD_2 ( ) ; TYPE_5 VAR_4 = VAR_2 . METHOD_3 ( ) ; METHOD_4 ( VAR_4 , VAR_5 ) ; TYPE_7 . METHOD_5 ( VAR_4 . getType ( ) == VAR_6 ) ; TYPE_8 < String > VAR_7 = TYPE_9 . METHOD_6 ( VAR_3 . METHOD_7 ( ) ) ; for ( TYPE_5 key = VAR_4 . METHOD_8 ( ) ; key != null ; key = key . METHOD_9 ( ) ) { String var = key . getString ( ) ; TYPE_5 value = key . METHOD_10 ( ) ; nodes . add ( new TYPE_5 ( VAR_8 , TYPE_5 . METHOD_11 ( VAR_9 , VAR_3 . get ( var ) ) , value ) ) ; VAR_7 . remove ( var ) ; } for ( String var : VAR_7 ) { nodes . add ( new TYPE_5 ( VAR_8 , TYPE_5 . METHOD_11 ( VAR_9 , VAR_3 . get ( var ) ) , TYPE_10 . METHOD_12 ( null ) ) ) ; } TYPE_5 VAR_10 ; if ( nodes . isEmpty ( ) ) { VAR_10 = new TYPE_5 ( VAR_11 ) ; } else { nodes . add ( new TYPE_5 ( VAR_11 ) ) ; nodes = TYPE_6 . METHOD_13 ( nodes ) ; VAR_10 = new TYPE_5 ( VAR_12 ) ; TYPE_5 VAR_13 = VAR_10 ; int i ; for ( i = 0 ; i < nodes . size ( ) - INT_1 ; i ++ ) { VAR_13 . METHOD_14 ( nodes . get ( i ) ) ; TYPE_5 t = new TYPE_5 ( VAR_12 ) ; VAR_13 . METHOD_14 ( t ) ; VAR_13 = t ; } VAR_13 . METHOD_14 ( nodes . get ( i ) ) ; VAR_13 . METHOD_14 ( nodes . get ( i + 1 ) ) ; } TYPE_5 replace = VAR_2 . METHOD_15 ( ) ; VAR_10 . METHOD_16 ( replace ) ; if ( replace . getType ( ) == VAR_14 ) { replace . METHOD_15 ( ) . METHOD_17 ( replace , TYPE_10 . METHOD_18 ( VAR_10 ) ) ; } else { replace . METHOD_15 ( ) . METHOD_17 ( replace , VAR_10 ) ; } }