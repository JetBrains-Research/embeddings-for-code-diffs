void METHOD_1 ( TYPE_1 t , TYPE_2 n , TYPE_2 VAR_1 , TYPE_2 VAR_2 , TYPE_2 VAR_3 ) { if ( ! TYPE_3 . METHOD_2 ( VAR_1 ) || ! TYPE_3 . METHOD_3 ( VAR_2 ) ) { return ; } TYPE_2 VAR_4 = VAR_1 . METHOD_4 ( ) ; TYPE_2 VAR_5 = VAR_4 . METHOD_5 ( ) ; if ( ( VAR_4 . getType ( ) != VAR_6 ) || ! VAR_5 . getString ( ) . equals ( STRING_1 ) ) { return ; } String VAR_7 = TYPE_3 . METHOD_6 ( VAR_2 ) ; TYPE_4 < TYPE_2 > VAR_8 = TYPE_5 . METHOD_7 ( ) ; TYPE_6 VAR_9 = null ; int VAR_10 = 0 ; TYPE_2 VAR_11 = VAR_4 . METHOD_4 ( ) ; while ( VAR_11 != null ) { if ( TYPE_3 . METHOD_3 ( VAR_11 ) ) { if ( VAR_9 == null ) { VAR_9 = new TYPE_6 ( ) ; } else { VAR_9 . append ( VAR_7 ) ; } VAR_9 . append ( TYPE_3 . METHOD_6 ( VAR_11 ) ) ; } else { if ( VAR_9 != null ) { VAR_10 += VAR_9 . length ( ) + INT_1 ; VAR_8 . add ( TYPE_2 . METHOD_8 ( VAR_9 . toString ( ) ) ) ; VAR_9 = null ; } VAR_10 += TYPE_7 . METHOD_9 ( VAR_11 ) ; VAR_8 . add ( VAR_11 ) ; } VAR_11 = VAR_11 . METHOD_5 ( ) ; } if ( VAR_9 != null ) { VAR_10 += VAR_9 . length ( ) + INT_1 ; VAR_8 . add ( TYPE_2 . METHOD_8 ( VAR_9 . toString ( ) ) ) ; } VAR_10 += VAR_8 . size ( ) - 1 ; int VAR_12 = TYPE_7 . METHOD_9 ( n ) ; switch ( VAR_8 . size ( ) ) { case 0 : TYPE_2 VAR_13 = TYPE_2 . METHOD_8 ( STRING_2 ) ; VAR_3 . METHOD_10 ( n , VAR_13 ) ; break ; case 1 : TYPE_2 VAR_14 = VAR_8 . remove ( 0 ) ; if ( VAR_10 > VAR_12 ) { return ; } VAR_4 . METHOD_11 ( ) ; if ( VAR_14 . getType ( ) != VAR_15 ) { TYPE_2 VAR_16 = new TYPE_2 ( VAR_17 , TYPE_2 . METHOD_8 ( STRING_2 ) , VAR_14 ) ; VAR_14 = VAR_16 ; } VAR_3 . METHOD_10 ( n , VAR_14 ) ; break ; default : if ( VAR_8 . size ( ) == VAR_4 . METHOD_12 ( ) ) { return ; } int VAR_18 = STRING_3 . length ( ) ; VAR_10 += VAR_18 ; VAR_10 += TYPE_7 . METHOD_9 ( VAR_2 ) ; if ( VAR_10 > VAR_12 ) { return ; } VAR_4 . METHOD_11 ( ) ; for ( TYPE_2 node : VAR_8 ) { VAR_4 . METHOD_13 ( node ) ; } break ; } t . METHOD_14 ( ) . METHOD_15 ( ) ; }