private TYPE_1 METHOD_1 ( TYPE_1 n , TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 . getType ( ) == VAR_3 && VAR_2 . getType ( ) == VAR_3 ) { double result ; double VAR_4 = VAR_1 . METHOD_2 ( ) ; double VAR_5 = VAR_2 . METHOD_2 ( ) ; if ( ! ( VAR_4 >= VAR_6 && VAR_4 <= VAR_7 ) ) { error ( VAR_8 , VAR_1 ) ; return n ; } if ( ! ( VAR_5 >= 0 && VAR_5 < INT_1 ) ) { error ( VAR_9 , VAR_2 ) ; return n ; } int VAR_10 = ( int ) VAR_4 ; if ( VAR_10 != VAR_4 ) { error ( VAR_11 , VAR_1 ) ; return n ; } int VAR_12 = ( int ) VAR_5 ; if ( VAR_12 != VAR_5 ) { error ( VAR_11 , VAR_2 ) ; return n ; } switch ( n . getType ( ) ) { case VAR_13 : result = VAR_10 < < VAR_12 ; break ; case VAR_14 : result = VAR_10 > > VAR_12 ; break ; case VAR_15 : long VAR_17 = VAR_10 & INT_2 ; result = VAR_17 > > > VAR_12 ; break ; default : throw new TYPE_2 ( STRING_1 + TYPE_1 . METHOD_3 ( n . getType ( ) ) ) ; } TYPE_1 VAR_16 = TYPE_1 . METHOD_4 ( result ) ; n . METHOD_5 ( ) . METHOD_6 ( n , VAR_16 ) ; METHOD_7 ( ) ; return VAR_16 ; } return n ; }