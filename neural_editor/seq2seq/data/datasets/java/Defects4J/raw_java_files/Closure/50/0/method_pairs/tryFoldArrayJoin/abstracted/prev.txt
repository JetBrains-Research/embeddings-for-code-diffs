private TYPE_1 METHOD_1 ( TYPE_1 n ) { TYPE_1 VAR_1 = n . METHOD_2 ( ) ; if ( VAR_1 == null || ! TYPE_2 . METHOD_3 ( VAR_1 ) ) { return n ; } TYPE_1 VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 != null ) { if ( ! TYPE_2 . METHOD_5 ( VAR_2 ) ) { return n ; } } TYPE_1 VAR_3 = VAR_1 . METHOD_2 ( ) ; TYPE_1 VAR_4 = VAR_3 . METHOD_4 ( ) ; if ( ( VAR_3 . getType ( ) != VAR_5 ) || ! VAR_4 . getString ( ) . equals ( STRING_1 ) ) { return n ; } String VAR_6 = ( VAR_2 == null ) ? STRING_2 : TYPE_2 . METHOD_6 ( VAR_2 ) ; TYPE_3 < TYPE_1 > VAR_7 = TYPE_4 . METHOD_7 ( ) ; TYPE_5 VAR_8 = null ; int VAR_9 = 0 ; TYPE_1 VAR_10 = null ; TYPE_1 VAR_11 = VAR_3 . METHOD_2 ( ) ; while ( VAR_11 != null ) { if ( TYPE_2 . METHOD_5 ( VAR_11 ) || VAR_11 . getType ( ) == VAR_12 ) { if ( VAR_8 == null ) { VAR_8 = new TYPE_5 ( ) ; } else { VAR_8 . append ( VAR_6 ) ; } VAR_8 . append ( TYPE_2 . METHOD_8 ( VAR_11 ) ) ; } else { if ( VAR_8 != null ) { TYPE_6 . METHOD_9 ( VAR_10 ) ; VAR_9 += VAR_8 . length ( ) + INT_1 ; VAR_7 . add ( TYPE_1 . METHOD_10 ( VAR_8 . toString ( ) ) . METHOD_11 ( VAR_10 ) ) ; VAR_8 = null ; } VAR_9 += TYPE_7 . METHOD_12 ( VAR_11 ) ; VAR_7 . add ( VAR_11 ) ; } VAR_10 = VAR_11 ; VAR_11 = VAR_11 . METHOD_4 ( ) ; } if ( VAR_8 != null ) { TYPE_6 . METHOD_9 ( VAR_10 ) ; VAR_9 += VAR_8 . length ( ) + INT_1 ; VAR_7 . add ( TYPE_1 . METHOD_10 ( VAR_8 . toString ( ) ) . METHOD_11 ( VAR_10 ) ) ; } VAR_9 += VAR_7 . size ( ) - 1 ; int VAR_13 = TYPE_7 . METHOD_12 ( n ) ; switch ( VAR_7 . size ( ) ) { case 0 : TYPE_1 VAR_14 = TYPE_1 . METHOD_10 ( STRING_3 ) ; n . METHOD_13 ( ) . METHOD_14 ( n , VAR_14 ) ; METHOD_15 ( ) ; return VAR_14 ; case 1 : TYPE_1 VAR_15 = VAR_7 . remove ( 0 ) ; if ( VAR_9 > VAR_13 ) { return n ; } VAR_3 . METHOD_16 ( ) ; if ( VAR_15 . getType ( ) != VAR_16 ) { TYPE_1 VAR_17 = new TYPE_1 ( VAR_18 , TYPE_1 . METHOD_10 ( STRING_3 ) . METHOD_11 ( n ) , VAR_15 ) ; VAR_15 = VAR_17 ; } n . METHOD_13 ( ) . METHOD_14 ( n , VAR_15 ) ; METHOD_15 ( ) ; return VAR_15 ; default : if ( VAR_7 . size ( ) == VAR_3 . METHOD_17 ( ) ) { return n ; } int VAR_19 = STRING_4 . length ( ) ; VAR_9 += VAR_19 ; VAR_9 += ( VAR_2 != null ) ? TYPE_7 . METHOD_12 ( VAR_2 ) : 0 ; if ( VAR_9 > VAR_13 ) { return n ; } VAR_3 . METHOD_16 ( ) ; for ( TYPE_1 node : VAR_7 ) { VAR_3 . METHOD_18 ( node ) ; } METHOD_15 ( ) ; break ; } return n ; }