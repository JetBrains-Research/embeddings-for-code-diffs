static boolean METHOD_1 ( TYPE_1 value , TYPE_2 < TYPE_1 > VAR_1 ) { switch ( value . getType ( ) ) { case VAR_2 : return TYPE_3 . METHOD_2 ( value . METHOD_3 ( ) ) || ( VAR_1 . METHOD_4 ( value ) && METHOD_1 ( value . METHOD_3 ( ) , VAR_1 ) ) ; case VAR_3 : return METHOD_1 ( value . METHOD_3 ( ) , VAR_1 ) ; case VAR_4 : case VAR_5 : return METHOD_1 ( value . METHOD_5 ( ) , VAR_1 ) && METHOD_1 ( value . METHOD_3 ( ) , VAR_1 ) ; case VAR_6 : return METHOD_1 ( value . METHOD_5 ( ) . METHOD_6 ( ) , VAR_1 ) && METHOD_1 ( value . METHOD_3 ( ) , VAR_1 ) ; case VAR_7 : case VAR_8 : if ( value . METHOD_7 ( VAR_9 ) ) { return METHOD_1 ( value . METHOD_5 ( ) , VAR_1 ) ; } else { return true ; } case VAR_10 : return VAR_1 . METHOD_4 ( value ) ; case VAR_11 : return METHOD_2 ( value ) || VAR_1 . METHOD_4 ( value ) ; case VAR_12 : case VAR_13 : return VAR_1 . METHOD_4 ( value ) ; case VAR_14 : return METHOD_8 ( value ) || METHOD_9 ( value ) || VAR_1 . METHOD_4 ( value ) ; case VAR_15 : return METHOD_10 ( value ) || VAR_1 . METHOD_4 ( value ) ; case VAR_16 : case VAR_17 : case VAR_18 : case VAR_19 : return true ; case VAR_21 : case VAR_20 : return true ; default : if ( METHOD_11 ( value ) || METHOD_12 ( value ) || METHOD_2 ( value ) ) { return true ; } throw new TYPE_4 ( STRING_1 + value + STRING_2 + value . METHOD_13 ( ) ) ; } }