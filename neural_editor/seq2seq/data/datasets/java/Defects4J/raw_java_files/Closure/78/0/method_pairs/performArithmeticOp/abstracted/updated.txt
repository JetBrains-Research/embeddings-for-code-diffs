private TYPE_1 METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , TYPE_1 VAR_3 ) { if ( VAR_1 == VAR_4 && ( TYPE_2 . METHOD_2 ( VAR_2 , false ) || TYPE_2 . METHOD_2 ( VAR_3 , false ) ) ) { return null ; } double result ; TYPE_3 VAR_5 = TYPE_2 . METHOD_3 ( VAR_2 ) ; if ( VAR_5 == null ) { return null ; } TYPE_3 VAR_6 = TYPE_2 . METHOD_3 ( VAR_3 ) ; if ( VAR_6 == null ) { return null ; } double VAR_7 = VAR_5 ; double VAR_8 = VAR_6 ; switch ( VAR_1 ) { case VAR_9 : result = TYPE_4 . METHOD_4 ( VAR_7 ) & TYPE_4 . METHOD_4 ( VAR_8 ) ; break ; case VAR_10 : result = TYPE_4 . METHOD_4 ( VAR_7 ) | TYPE_4 . METHOD_4 ( VAR_8 ) ; break ; case VAR_11 : result = TYPE_4 . METHOD_4 ( VAR_7 ) ^ TYPE_4 . METHOD_4 ( VAR_8 ) ; break ; case VAR_4 : result = VAR_7 + VAR_8 ; break ; case VAR_12 : result = VAR_7 - VAR_8 ; break ; case VAR_13 : result = VAR_7 * VAR_8 ; break ; case VAR_14 : if ( VAR_8 == 0 ) { return null ; } result = VAR_7 % VAR_8 ; break ; case VAR_15 : if ( VAR_8 == 0 ) { return null ; } result = VAR_7 / VAR_8 ; break ; default : throw new TYPE_6 ( STRING_3 ) ; } if ( String . METHOD_5 ( result ) . length ( ) <= String . METHOD_5 ( VAR_7 ) . length ( ) + String . METHOD_5 ( VAR_8 ) . length ( ) + 1 && TYPE_7 . METHOD_6 ( result ) <= VAR_16 ) { TYPE_1 VAR_17 = TYPE_1 . METHOD_7 ( result ) ; return VAR_17 ; } else if ( TYPE_3 . METHOD_8 ( result ) ) { return TYPE_1 . METHOD_9 ( VAR_18 , STRING_4 ) ; } else if ( result == VAR_19 ) { return TYPE_1 . METHOD_9 ( VAR_18 , STRING_5 ) ; } else if ( result == VAR_20 ) { return new TYPE_1 ( VAR_21 , TYPE_1 . METHOD_9 ( VAR_18 , STRING_5 ) ) ; } return null ; }