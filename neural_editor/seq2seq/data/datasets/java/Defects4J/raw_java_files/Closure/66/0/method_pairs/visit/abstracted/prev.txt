public void METHOD_1 ( TYPE_1 t , TYPE_2 n , TYPE_2 VAR_1 ) { TYPE_3 VAR_2 ; TYPE_3 VAR_3 , VAR_4 ; TYPE_2 VAR_5 , VAR_6 ; boolean VAR_7 = true ; switch ( n . getType ( ) ) { case VAR_8 : VAR_7 = METHOD_2 ( t , n , VAR_1 ) ; break ; case VAR_9 : if ( VAR_1 . getType ( ) != VAR_10 ) { METHOD_3 ( t , n , METHOD_4 ( n . METHOD_5 ( ) ) ) ; } else { VAR_7 = false ; } break ; case VAR_11 : METHOD_3 ( t , n , METHOD_4 ( n . METHOD_6 ( ) ) ) ; break ; case VAR_12 : case VAR_13 : METHOD_3 ( t , n , VAR_14 ) ; break ; case VAR_15 : METHOD_3 ( t , n , t . METHOD_7 ( ) . METHOD_8 ( ) ) ; break ; case VAR_16 : METHOD_3 ( t , n ) ; break ; case VAR_17 : METHOD_3 ( t , n , METHOD_4 ( n . METHOD_5 ( ) ) ) ; break ; case TYPE_4 . NULL : METHOD_3 ( t , n , VAR_18 ) ; break ; case VAR_19 : METHOD_3 ( t , n , VAR_20 ) ; break ; case VAR_21 : if ( ! TYPE_5 . METHOD_9 ( n , n . METHOD_10 ( ) ) ) { METHOD_3 ( t , n , VAR_22 ) ; } break ; case VAR_23 : case VAR_24 : break ; case VAR_25 : METHOD_3 ( t , n , VAR_26 ) ; break ; case VAR_27 : METHOD_3 ( t , n , VAR_28 ) ; break ; case VAR_29 : METHOD_11 ( t , n , VAR_1 ) ; VAR_7 = ! ( VAR_1 . getType ( ) == VAR_30 && VAR_1 . METHOD_5 ( ) == n ) ; break ; case VAR_31 : METHOD_12 ( t , n ) ; VAR_7 = false ; break ; case VAR_32 : METHOD_13 ( t , n ) ; VAR_7 = false ; break ; case VAR_33 : METHOD_14 ( t , n ) ; VAR_7 = true ; break ; case VAR_34 : METHOD_15 ( t , n ) ; VAR_7 = ! TYPE_5 . METHOD_16 ( VAR_1 ) ; break ; case VAR_35 : METHOD_17 ( t , n ) ; VAR_7 = false ; break ; case VAR_36 : case VAR_37 : VAR_5 = n . METHOD_5 ( ) ; VAR_38 . METHOD_18 ( t , VAR_5 , METHOD_4 ( VAR_5 ) , STRING_1 ) ; METHOD_3 ( t , n , VAR_20 ) ; break ; case VAR_39 : METHOD_3 ( t , n , VAR_14 ) ; break ; case VAR_40 : METHOD_3 ( t , n , VAR_41 ) ; break ; case VAR_42 : METHOD_3 ( t , n , VAR_22 ) ; break ; case VAR_43 : VAR_2 = METHOD_4 ( n . METHOD_5 ( ) ) ; if ( ! VAR_2 . METHOD_19 ( ) ) { METHOD_20 ( t , n , VAR_44 , TYPE_5 . METHOD_21 ( n . getType ( ) ) , VAR_2 . toString ( ) ) ; } METHOD_3 ( t , n , VAR_20 ) ; break ; case VAR_45 : case VAR_46 : VAR_5 = n . METHOD_5 ( ) ; VAR_38 . METHOD_18 ( t , VAR_5 , METHOD_4 ( VAR_5 ) , STRING_2 ) ; METHOD_3 ( t , n , VAR_20 ) ; break ; case VAR_47 : case VAR_48 : { VAR_3 = METHOD_4 ( n . METHOD_5 ( ) ) ; VAR_4 = METHOD_4 ( n . METHOD_6 ( ) ) ; TYPE_3 VAR_49 = VAR_3 . METHOD_22 ( ) ; TYPE_3 VAR_50 = VAR_4 . METHOD_22 ( ) ; TYPE_6 result = VAR_49 . METHOD_23 ( VAR_50 ) ; if ( result != VAR_51 ) { if ( n . getType ( ) == VAR_48 ) { result = result . not ( ) ; } METHOD_20 ( t , n , VAR_52 , VAR_3 . toString ( ) , VAR_4 . toString ( ) , result . toString ( ) ) ; } METHOD_3 ( t , n , VAR_14 ) ; break ; } case VAR_53 : case VAR_54 : { VAR_3 = METHOD_4 ( n . METHOD_5 ( ) ) ; VAR_4 = METHOD_4 ( n . METHOD_6 ( ) ) ; TYPE_3 VAR_49 = VAR_3 . METHOD_22 ( ) ; TYPE_3 VAR_50 = VAR_4 . METHOD_22 ( ) ; if ( ! VAR_49 . METHOD_24 ( VAR_50 ) ) { METHOD_20 ( t , n , VAR_55 , VAR_3 . toString ( ) , VAR_4 . toString ( ) ) ; } METHOD_3 ( t , n , VAR_14 ) ; break ; } case VAR_56 : case VAR_57 : case VAR_58 : case VAR_59 : VAR_3 = METHOD_4 ( n . METHOD_5 ( ) ) ; VAR_4 = METHOD_4 ( n . METHOD_6 ( ) ) ; if ( VAR_4 . METHOD_25 ( ) ) { VAR_38 . METHOD_18 ( t , n , VAR_3 , STRING_3 ) ; } else if ( VAR_3 . METHOD_25 ( ) ) { VAR_38 . METHOD_18 ( t , n , VAR_4 , STRING_4 ) ; } else if ( VAR_3 . METHOD_26 ( ) && VAR_4 . METHOD_26 ( ) ) { } else { String message = STRING_5 ; VAR_38 . METHOD_27 ( t , n , VAR_3 , message ) ; VAR_38 . METHOD_28 ( t , n , VAR_3 , message , METHOD_29 ( VAR_22 ) ) ; message = STRING_6 ; VAR_38 . METHOD_27 ( t , n , VAR_4 , message ) ; VAR_38 . METHOD_28 ( t , n , VAR_4 , message , METHOD_29 ( VAR_22 ) ) ; } METHOD_3 ( t , n , VAR_14 ) ; break ; case VAR_60 : VAR_5 = n . METHOD_5 ( ) ; VAR_6 = n . METHOD_6 ( ) ; VAR_3 = METHOD_4 ( VAR_5 ) ; VAR_4 = METHOD_4 ( VAR_6 ) ; VAR_38 . METHOD_30 ( t , n , VAR_4 , STRING_7 ) ; VAR_38 . METHOD_27 ( t , VAR_5 , VAR_3 , STRING_8 ) ; METHOD_3 ( t , n , VAR_14 ) ; break ; case VAR_61 : VAR_5 = n . METHOD_5 ( ) ; VAR_6 = n . METHOD_6 ( ) ; VAR_3 = METHOD_4 ( VAR_5 ) ; VAR_4 = METHOD_4 ( VAR_6 ) . METHOD_22 ( ) ; VAR_38 . METHOD_31 ( t , VAR_5 , VAR_3 , STRING_9 ) ; VAR_38 . METHOD_32 ( t , VAR_6 , VAR_4 , STRING_10 ) ; METHOD_3 ( t , n , VAR_14 ) ; break ; case VAR_30 : METHOD_33 ( t , n ) ; VAR_7 = false ; break ; case VAR_62 : case VAR_63 : case VAR_64 : case VAR_65 : case VAR_66 : case VAR_67 : case VAR_68 : case VAR_69 : case VAR_70 : case VAR_71 : case VAR_72 : case VAR_73 : case VAR_74 : case VAR_75 : case VAR_76 : case VAR_77 : case VAR_78 : case VAR_79 : case VAR_80 : case VAR_81 : case VAR_82 : case VAR_83 : METHOD_34 ( n . getType ( ) , t , n ) ; break ; case VAR_84 : if ( ! METHOD_35 ( n . METHOD_5 ( ) ) ) { METHOD_20 ( t , n , VAR_85 ) ; } METHOD_3 ( t , n , VAR_14 ) ; break ; case VAR_86 : TYPE_3 VAR_87 = METHOD_4 ( VAR_1 . METHOD_5 ( ) ) ; TYPE_3 VAR_88 = METHOD_4 ( n . METHOD_5 ( ) ) ; VAR_38 . METHOD_36 ( t , n , VAR_87 , VAR_88 ) ; VAR_7 = false ; break ; case VAR_89 : { TYPE_2 VAR_90 = n . METHOD_5 ( ) ; VAR_2 = METHOD_4 ( VAR_90 ) ; VAR_38 . METHOD_30 ( t , VAR_90 , VAR_2 , STRING_11 ) ; VAR_7 = false ; break ; } case VAR_10 : METHOD_37 ( t , n ) ; break ; case VAR_91 : case VAR_92 : case VAR_93 : case VAR_94 : case VAR_95 : case VAR_96 : case VAR_97 : case VAR_98 : case VAR_99 : case VAR_100 : case VAR_101 : case VAR_102 : case VAR_103 : case VAR_104 : VAR_7 = false ; break ; case VAR_105 : case VAR_106 : case VAR_107 : case VAR_108 : VAR_7 = false ; break ; case VAR_109 : case VAR_110 : case VAR_111 : case VAR_112 : if ( n . METHOD_4 ( ) != null ) { METHOD_3 ( t , n ) ; } else { if ( ( n . getType ( ) == VAR_111 ) && ( VAR_1 . METHOD_4 ( ) instanceof TYPE_7 ) ) { METHOD_3 ( t , n , VAR_1 . METHOD_4 ( ) ) ; } else { METHOD_3 ( t , n ) ; } } if ( n . getType ( ) == VAR_111 ) { for ( TYPE_2 key : n . METHOD_38 ( ) ) { METHOD_39 ( t , key , n ) ; } } break ; default : METHOD_20 ( t , n , VAR_113 , TYPE_4 . name ( n . getType ( ) ) ) ; METHOD_3 ( t , n ) ; break ; } VAR_7 = VAR_7 && ! VAR_114 ; if ( VAR_7 ) { METHOD_40 ( t , n ) ; } METHOD_41 ( n , false ) ; }