private void METHOD_1 ( TYPE_1 n , TYPE_2 VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) { switch ( n . getType ( ) ) { case VAR_4 : case VAR_5 : case VAR_6 : return ; case VAR_7 : case VAR_8 : case VAR_9 : METHOD_1 ( TYPE_3 . METHOD_2 ( n ) , VAR_1 , VAR_2 , VAR_3 ) ; return ; case VAR_10 : if ( ! TYPE_3 . METHOD_3 ( n ) ) { METHOD_1 ( TYPE_3 . METHOD_2 ( n ) , VAR_1 , VAR_2 , VAR_3 ) ; } else { TYPE_1 VAR_11 = n . METHOD_4 ( ) ; TYPE_1 VAR_12 = VAR_11 . METHOD_5 ( ) ; if ( TYPE_3 . METHOD_6 ( VAR_11 ) ) { VAR_11 = VAR_11 . METHOD_7 ( ) ; } if ( TYPE_3 . METHOD_13 ( VAR_11 ) ) { METHOD_8 ( VAR_11 , VAR_2 ) ; METHOD_8 ( VAR_11 , VAR_1 ) ; } else { METHOD_1 ( VAR_11 , VAR_1 , VAR_2 , VAR_3 ) ; } METHOD_1 ( VAR_12 , VAR_1 , VAR_2 , VAR_3 ) ; } return ; case VAR_13 : for ( TYPE_1 c = n . METHOD_4 ( ) ; c != null ; c = c . METHOD_5 ( ) ) { if ( c . METHOD_9 ( ) ) { METHOD_1 ( c . METHOD_4 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; if ( ! VAR_3 ) { METHOD_8 ( c , VAR_2 ) ; } } } return ; case VAR_14 : case VAR_15 : METHOD_1 ( n . METHOD_4 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_1 ( n . METHOD_7 ( ) , VAR_1 , VAR_2 , true ) ; return ; case VAR_16 : METHOD_1 ( n . METHOD_4 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; METHOD_1 ( n . METHOD_4 ( ) . METHOD_5 ( ) , VAR_1 , VAR_2 , true ) ; METHOD_1 ( n . METHOD_7 ( ) , VAR_1 , VAR_2 , true ) ; return ; case VAR_17 : if ( METHOD_10 ( n ) ) { METHOD_11 ( ) ; } else { METHOD_8 ( n , VAR_1 ) ; } return ; default : if ( TYPE_3 . METHOD_12 ( n ) && TYPE_3 . METHOD_13 ( n . METHOD_4 ( ) ) ) { TYPE_1 VAR_11 = n . METHOD_4 ( ) ; if ( ! VAR_3 ) { METHOD_8 ( VAR_11 , VAR_2 ) ; } if ( ! TYPE_3 . METHOD_14 ( n ) ) { METHOD_8 ( VAR_11 , VAR_1 ) ; } METHOD_1 ( VAR_11 . METHOD_5 ( ) , VAR_1 , VAR_2 , VAR_3 ) ; } else { for ( TYPE_1 c = n . METHOD_4 ( ) ; c != null ; c = c . METHOD_5 ( ) ) { METHOD_1 ( c , VAR_1 , VAR_2 , VAR_3 ) ; } } return ; } }