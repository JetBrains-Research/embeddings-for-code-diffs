void add ( TYPE_1 n , TYPE_2 context ) { if ( ! VAR_1 . METHOD_1 ( ) ) { return ; } int type = n . getType ( ) ; String VAR_2 = TYPE_3 . METHOD_2 ( type ) ; int VAR_3 = n . METHOD_3 ( ) ; TYPE_1 first = n . METHOD_4 ( ) ; TYPE_1 VAR_4 = n . METHOD_5 ( ) ; if ( VAR_2 != null && first != VAR_4 ) { TYPE_4 . METHOD_6 ( VAR_3 == INT_1 , STRING_1 , VAR_2 , VAR_3 ) ; int p = TYPE_3 . METHOD_7 ( type ) ; TYPE_2 VAR_5 = METHOD_8 ( context ) ; if ( VAR_4 . getType ( ) == type && TYPE_3 . METHOD_9 ( type ) ) { METHOD_10 ( first , p , context ) ; VAR_1 . METHOD_11 ( VAR_2 , true ) ; METHOD_10 ( VAR_4 , p , VAR_5 ) ; } else if ( TYPE_3 . METHOD_12 ( n ) && TYPE_3 . METHOD_12 ( VAR_4 ) ) { METHOD_10 ( first , p , context ) ; VAR_1 . METHOD_11 ( VAR_2 , true ) ; METHOD_10 ( VAR_4 , p , VAR_5 ) ; } else { METHOD_10 ( first , p , context ) ; VAR_1 . METHOD_11 ( VAR_2 , true ) ; METHOD_10 ( VAR_4 , p + 1 , VAR_5 ) ; } return ; } VAR_1 . METHOD_13 ( n ) ; switch ( type ) { case VAR_6 : { TYPE_4 . METHOD_6 ( first . METHOD_14 ( ) . METHOD_15 ( ) && ! first . METHOD_14 ( ) . METHOD_16 ( ) ) ; TYPE_4 . METHOD_6 ( VAR_3 >= INT_1 && VAR_3 <= INT_2 ) ; add ( STRING_2 ) ; add ( first , VAR_7 ) ; TYPE_1 VAR_8 = first . METHOD_14 ( ) . METHOD_4 ( ) ; if ( VAR_8 != null ) { add ( VAR_8 ) ; } if ( VAR_3 == INT_2 ) { add ( STRING_3 ) ; add ( VAR_4 , VAR_7 ) ; } break ; } case VAR_9 : TYPE_4 . METHOD_6 ( VAR_3 == INT_1 ) ; add ( STRING_4 ) ; add ( first ) ; add ( STRING_5 ) ; add ( VAR_4 , VAR_7 ) ; break ; case VAR_10 : TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; add ( STRING_6 ) ; add ( first ) ; VAR_1 . METHOD_17 ( true ) ; break ; case VAR_11 : add ( STRING_7 ) ; if ( VAR_3 == 1 ) { add ( first ) ; } else { TYPE_4 . METHOD_6 ( VAR_3 == 0 ) ; } VAR_1 . METHOD_17 ( ) ; break ; case VAR_12 : if ( first != null ) { add ( STRING_8 ) ; METHOD_18 ( first , false , METHOD_8 ( context ) ) ; } break ; case VAR_13 : TYPE_4 . METHOD_6 ( ! n . getString ( ) . isEmpty ( ) ) ; METHOD_19 ( n . getString ( ) ) ; break ; case VAR_14 : if ( first == null || first . isEmpty ( ) ) { METHOD_19 ( n . getString ( ) ) ; } else { TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; METHOD_19 ( n . getString ( ) ) ; VAR_1 . METHOD_11 ( STRING_9 , true ) ; if ( first . METHOD_20 ( ) ) { METHOD_10 ( first , TYPE_3 . METHOD_7 ( VAR_15 ) , VAR_16 ) ; } else { METHOD_10 ( first , 0 , METHOD_8 ( context ) ) ; } } break ; case VAR_17 : add ( STRING_10 ) ; METHOD_21 ( first ) ; add ( STRING_11 ) ; break ; case VAR_18 : add ( STRING_12 ) ; METHOD_18 ( first ) ; add ( STRING_5 ) ; break ; case VAR_19 : TYPE_4 . METHOD_6 ( VAR_3 == INT_1 ) ; METHOD_22 ( n , VAR_19 , STRING_13 , context , VAR_16 , 0 , 0 ) ; break ; case VAR_20 : TYPE_4 . METHOD_6 ( VAR_3 == 0 ) ; VAR_1 . METHOD_23 ( n . METHOD_24 ( ) ) ; break ; case VAR_21 : case VAR_22 : case VAR_23 : case VAR_24 : case VAR_25 : { TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; VAR_1 . METHOD_11 ( TYPE_3 . METHOD_25 ( type ) , false ) ; METHOD_10 ( first , TYPE_3 . METHOD_7 ( type ) , VAR_16 ) ; break ; } case VAR_26 : { TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; if ( n . METHOD_4 ( ) . METHOD_26 ( ) ) { VAR_1 . METHOD_23 ( - n . METHOD_4 ( ) . METHOD_24 ( ) ) ; } else { VAR_1 . METHOD_11 ( TYPE_3 . METHOD_25 ( type ) , false ) ; METHOD_10 ( first , TYPE_3 . METHOD_7 ( type ) , VAR_16 ) ; } break ; } case VAR_27 : { TYPE_4 . METHOD_6 ( VAR_3 == INT_2 ) ; int p = TYPE_3 . METHOD_7 ( type ) ; METHOD_10 ( first , p + 1 , context ) ; VAR_1 . METHOD_11 ( STRING_14 , true ) ; METHOD_10 ( first . METHOD_14 ( ) , 1 , VAR_16 ) ; VAR_1 . METHOD_11 ( STRING_15 , true ) ; METHOD_10 ( VAR_4 , 1 , VAR_16 ) ; break ; } case VAR_28 : if ( ! first . METHOD_27 ( ) || ! VAR_4 . METHOD_27 ( ) ) { throw new TYPE_5 ( STRING_16 ) ; } String VAR_29 = METHOD_28 ( first . getString ( ) , VAR_30 ) ; if ( VAR_3 == INT_1 ) { add ( VAR_29 + VAR_4 . getString ( ) ) ; } else { TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; add ( VAR_29 ) ; } break ; case VAR_31 : if ( n . getClass ( ) != VAR_32 class ) { throw new TYPE_5 ( STRING_17 ) ; } TYPE_4 . METHOD_6 ( VAR_3 == INT_2 ) ; boolean VAR_33 = ( context == VAR_34 ) ; if ( VAR_33 ) { add ( STRING_12 ) ; } add ( STRING_18 ) ; add ( first ) ; add ( first . METHOD_14 ( ) ) ; add ( VAR_4 , VAR_7 ) ; VAR_1 . METHOD_29 ( context == VAR_35 ) ; if ( VAR_33 ) { add ( STRING_5 ) ; } break ; case VAR_36 : case VAR_37 : TYPE_4 . METHOD_6 ( n . METHOD_30 ( ) . METHOD_31 ( ) ) ; TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; TYPE_4 . METHOD_6 ( first . METHOD_32 ( ) ) ; TYPE_4 . METHOD_6 ( first . METHOD_4 ( ) . getString ( ) . isEmpty ( ) ) ; if ( type == VAR_36 ) { TYPE_4 . METHOD_6 ( ! first . METHOD_33 ( 1 ) . METHOD_34 ( ) ) ; add ( STRING_19 ) ; } else { TYPE_4 . METHOD_6 ( first . METHOD_33 ( 1 ) . METHOD_35 ( ) ) ; add ( STRING_20 ) ; } String name = n . getString ( ) ; TYPE_1 VAR_38 = first ; TYPE_1 parameters = VAR_38 . METHOD_33 ( 1 ) ; TYPE_1 VAR_39 = VAR_38 . METHOD_5 ( ) ; if ( ! n . METHOD_36 ( ) && TYPE_6 . METHOD_37 ( name ) && TYPE_3 . METHOD_38 ( name ) ) { add ( name ) ; } else { double VAR_40 = METHOD_39 ( name ) ; if ( ! TYPE_7 . METHOD_40 ( VAR_40 ) ) { VAR_1 . METHOD_23 ( VAR_40 ) ; } else { METHOD_41 ( n ) ; } } add ( parameters ) ; add ( VAR_39 , VAR_7 ) ; break ; case VAR_41 : case VAR_42 : { if ( n . getClass ( ) != VAR_32 class ) { throw new TYPE_5 ( STRING_17 ) ; } boolean VAR_43 = context == VAR_7 ; if ( VAR_43 ) { VAR_1 . METHOD_42 ( ) ; } boolean VAR_44 = type == VAR_41 || ( type == VAR_42 && ! VAR_43 && n . METHOD_30 ( ) != null && n . METHOD_30 ( ) . METHOD_43 ( ) ) ; for ( TYPE_1 c = first ; c != null ; c = c . METHOD_14 ( ) ) { add ( c , VAR_35 ) ; if ( c . METHOD_44 ( ) ) { VAR_1 . METHOD_17 ( ) ; } if ( c . METHOD_32 ( ) ) { VAR_1 . METHOD_45 ( ) ; } if ( VAR_44 ) { VAR_1 . METHOD_46 ( ) ; } } if ( VAR_43 ) { VAR_1 . METHOD_47 ( VAR_1 . METHOD_48 ( n , context == VAR_35 ) ) ; } break ; } case VAR_45 : if ( VAR_3 == INT_3 ) { add ( STRING_21 ) ; if ( first . METHOD_44 ( ) ) { add ( first , VAR_46 ) ; } else { METHOD_10 ( first , 0 , VAR_46 ) ; } add ( STRING_22 ) ; add ( first . METHOD_14 ( ) ) ; add ( STRING_22 ) ; add ( first . METHOD_14 ( ) . METHOD_14 ( ) ) ; add ( STRING_5 ) ; METHOD_49 ( VAR_4 , METHOD_50 ( context ) , false ) ; } else { TYPE_4 . METHOD_6 ( VAR_3 == INT_2 ) ; add ( STRING_21 ) ; add ( first ) ; add ( STRING_23 ) ; add ( first . METHOD_14 ( ) ) ; add ( STRING_5 ) ; METHOD_49 ( VAR_4 , METHOD_50 ( context ) , false ) ; } break ; case VAR_47 : TYPE_4 . METHOD_6 ( VAR_3 == INT_1 ) ; add ( STRING_24 ) ; METHOD_49 ( first , VAR_16 , false ) ; add ( STRING_25 ) ; add ( VAR_4 ) ; add ( STRING_5 ) ; VAR_1 . METHOD_17 ( ) ; break ; case VAR_48 : TYPE_4 . METHOD_6 ( VAR_3 == INT_1 ) ; add ( STRING_25 ) ; add ( first ) ; add ( STRING_5 ) ; METHOD_49 ( VAR_4 , METHOD_50 ( context ) , false ) ; break ; case VAR_49 : TYPE_4 . METHOD_6 ( VAR_3 == 0 ) ; break ; case VAR_50 : { TYPE_4 . METHOD_6 ( VAR_3 == INT_1 , STRING_26 , VAR_3 ) ; TYPE_4 . METHOD_6 ( VAR_4 . METHOD_27 ( ) , STRING_27 ) ; boolean VAR_51 = ( first . METHOD_26 ( ) ) ; if ( VAR_51 ) { add ( STRING_12 ) ; } METHOD_10 ( first , TYPE_3 . METHOD_7 ( type ) , context ) ; if ( VAR_51 ) { add ( STRING_5 ) ; } add ( STRING_28 ) ; METHOD_19 ( VAR_4 . getString ( ) ) ; break ; } case VAR_52 : TYPE_4 . METHOD_6 ( VAR_3 == INT_1 , STRING_29 , VAR_3 ) ; METHOD_10 ( first , TYPE_3 . METHOD_7 ( type ) , context ) ; add ( STRING_10 ) ; add ( first . METHOD_14 ( ) ) ; add ( STRING_11 ) ; break ; case VAR_53 : TYPE_4 . METHOD_6 ( VAR_3 == INT_1 ) ; add ( STRING_30 ) ; add ( first ) ; add ( STRING_5 ) ; METHOD_49 ( VAR_4 , METHOD_50 ( context ) , false ) ; break ; case VAR_54 : case VAR_55 : { TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; String VAR_56 = type == VAR_54 ? STRING_31 : STRING_32 ; int VAR_57 = n . METHOD_51 ( VAR_58 ) ; if ( VAR_57 != 0 ) { METHOD_10 ( first , TYPE_3 . METHOD_7 ( type ) , context ) ; VAR_1 . METHOD_11 ( VAR_56 , false ) ; } else { VAR_1 . METHOD_11 ( VAR_56 , false ) ; add ( first ) ; } break ; } case VAR_59 : if ( METHOD_52 ( first ) || n . METHOD_53 ( VAR_60 ) && TYPE_3 . METHOD_54 ( first ) ) { add ( STRING_33 ) ; METHOD_10 ( first , TYPE_3 . METHOD_7 ( VAR_19 ) , VAR_16 ) ; add ( STRING_5 ) ; } else { METHOD_10 ( first , TYPE_3 . METHOD_7 ( type ) , context ) ; } add ( STRING_12 ) ; METHOD_18 ( first . METHOD_14 ( ) ) ; add ( STRING_5 ) ; break ; case VAR_61 : boolean VAR_62 = VAR_3 == INT_2 ; boolean VAR_63 = context == VAR_64 && ! VAR_62 ; if ( VAR_63 ) { VAR_1 . METHOD_42 ( ) ; } add ( STRING_34 ) ; add ( first ) ; add ( STRING_5 ) ; if ( VAR_62 ) { METHOD_49 ( first . METHOD_14 ( ) , VAR_64 , false ) ; add ( STRING_35 ) ; METHOD_49 ( VAR_4 , METHOD_50 ( context ) , false ) ; } else { METHOD_49 ( first . METHOD_14 ( ) , VAR_16 , false ) ; TYPE_4 . METHOD_6 ( VAR_3 == INT_1 ) ; } if ( VAR_63 ) { VAR_1 . METHOD_47 ( ) ; } break ; case VAR_65 . NULL : TYPE_4 . METHOD_6 ( VAR_3 == 0 ) ; add ( STRING_36 ) ; break ; case VAR_66 : TYPE_4 . METHOD_6 ( VAR_3 == 0 ) ; add ( STRING_37 ) ; break ; case VAR_67 : TYPE_4 . METHOD_6 ( VAR_3 == 0 ) ; add ( "false" ) ; break ; case VAR_68 : TYPE_4 . METHOD_6 ( VAR_3 == 0 ) ; add ( "true" ) ; break ; case VAR_69 : TYPE_4 . METHOD_6 ( VAR_3 <= 1 ) ; add ( STRING_38 ) ; if ( VAR_3 == 1 ) { if ( ! first . METHOD_55 ( ) ) { throw new TYPE_5 ( STRING_39 ) ; } add ( STRING_40 ) ; add ( first ) ; } VAR_1 . METHOD_17 ( ) ; break ; case VAR_70 : TYPE_4 . METHOD_6 ( VAR_3 == 0 ) ; add ( STRING_41 ) ; VAR_1 . METHOD_17 ( ) ; break ; case VAR_71 : TYPE_4 . METHOD_6 ( VAR_3 <= 1 ) ; add ( STRING_42 ) ; if ( VAR_3 == 1 ) { if ( ! first . METHOD_55 ( ) ) { throw new TYPE_5 ( STRING_39 ) ; } add ( STRING_40 ) ; add ( first ) ; } VAR_1 . METHOD_17 ( ) ; break ; case VAR_72 : TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; add ( first , VAR_34 ) ; VAR_1 . METHOD_17 ( ) ; break ; case VAR_73 : add ( STRING_43 ) ; int VAR_74 = TYPE_3 . METHOD_7 ( type ) ; if ( TYPE_3 . METHOD_56 ( first , VAR_59 , VAR_75 ) ) { VAR_74 = TYPE_3 . METHOD_7 ( first . getType ( ) ) + 1 ; } METHOD_10 ( first , VAR_74 , VAR_16 ) ; TYPE_1 VAR_76 = first . METHOD_14 ( ) ; if ( VAR_76 != null ) { add ( STRING_12 ) ; METHOD_18 ( VAR_76 ) ; add ( STRING_5 ) ; } break ; case VAR_77 : if ( VAR_3 != ( ( n . METHOD_30 ( ) != null && n . METHOD_30 ( ) . METHOD_31 ( ) ) ? 1 : 0 ) ) { throw new TYPE_8 ( STRING_44 + n . METHOD_30 ( ) . METHOD_57 ( ) ) ; } METHOD_41 ( n ) ; break ; case VAR_78 : TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; add ( STRING_45 ) ; add ( first ) ; break ; case VAR_79 : { boolean VAR_51 = ( context == VAR_34 ) ; if ( VAR_51 ) { add ( STRING_12 ) ; } add ( STRING_46 ) ; for ( TYPE_1 c = first ; c != null ; c = c . METHOD_14 ( ) ) { if ( c != first ) { VAR_1 . METHOD_58 ( ) ; } if ( c . METHOD_59 ( ) || c . METHOD_60 ( ) ) { add ( c ) ; } else { TYPE_4 . METHOD_6 ( c . METHOD_27 ( ) ) ; String key = c . getString ( ) ; if ( ! c . METHOD_36 ( ) && ! TYPE_6 . METHOD_61 ( key ) && TYPE_6 . METHOD_37 ( key ) && TYPE_3 . METHOD_38 ( key ) ) { add ( key ) ; } else { double VAR_40 = METHOD_39 ( key ) ; if ( ! TYPE_7 . METHOD_40 ( VAR_40 ) ) { VAR_1 . METHOD_23 ( VAR_40 ) ; } else { METHOD_10 ( c , 1 , VAR_16 ) ; } } add ( STRING_15 ) ; METHOD_10 ( c . METHOD_4 ( ) , 1 , VAR_16 ) ; } } add ( STRING_47 ) ; if ( VAR_51 ) { add ( STRING_5 ) ; } break ; } case VAR_80 : add ( STRING_48 ) ; add ( first ) ; add ( STRING_5 ) ; VAR_1 . METHOD_42 ( ) ; METHOD_62 ( first . METHOD_14 ( ) ) ; VAR_1 . METHOD_47 ( context == VAR_35 ) ; break ; case VAR_81 : TYPE_4 . METHOD_6 ( VAR_3 == INT_1 ) ; add ( STRING_49 ) ; add ( first ) ; METHOD_63 ( VAR_4 ) ; break ; case VAR_82 : TYPE_4 . METHOD_6 ( VAR_3 == 1 ) ; add ( STRING_50 ) ; METHOD_63 ( first ) ; break ; case VAR_83 : TYPE_4 . METHOD_6 ( VAR_3 == INT_1 ) ; if ( ! first . METHOD_55 ( ) ) { throw new TYPE_5 ( STRING_39 ) ; } add ( first ) ; add ( STRING_15 ) ; METHOD_49 ( VAR_4 , METHOD_50 ( context ) , true ) ; break ; default : throw new TYPE_5 ( STRING_51 + type + "\n" + n . METHOD_57 ( ) ) ; } VAR_1 . METHOD_64 ( n ) ; }