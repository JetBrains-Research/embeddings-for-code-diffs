protected double METHOD_1 ( ) { final double [ ] x = new double [ VAR_1 + 1 ] ; final double [ ] y = new double [ VAR_1 + 1 ] ; x [ 0 ] = METHOD_2 ( ) ; x [ 1 ] = METHOD_3 ( ) ; x [ INT_1 ] = METHOD_4 ( ) ; METHOD_5 ( x [ 0 ] , x [ 1 ] , x [ INT_1 ] ) ; y [ 1 ] = METHOD_6 ( x [ 1 ] ) ; if ( TYPE_1 . equals ( y [ 1 ] , 0.0 , 1 ) ) { return x [ 1 ] ; } y [ 0 ] = METHOD_6 ( x [ 0 ] ) ; if ( TYPE_1 . equals ( y [ 0 ] , 0.0 , 1 ) ) { return x [ 0 ] ; } int VAR_2 ; int VAR_3 ; if ( y [ 0 ] * y [ 1 ] < 0 ) { VAR_2 = INT_1 ; VAR_3 = 1 ; } else { y [ INT_1 ] = METHOD_6 ( x [ INT_1 ] ) ; if ( TYPE_1 . equals ( y [ INT_1 ] , 0.0 , 1 ) ) { return x [ INT_1 ] ; } if ( y [ 1 ] * y [ INT_1 ] < 0 ) { VAR_2 = INT_2 ; VAR_3 = INT_1 ; } else { throw new TYPE_2 ( x [ 0 ] , x [ INT_1 ] , y [ 0 ] , y [ INT_1 ] ) ; } } final double [ ] VAR_4 = new double [ x . length ] ; double VAR_5 = x [ VAR_3 - 1 ] ; double VAR_6 = y [ VAR_3 - 1 ] ; double VAR_7 = TYPE_3 . METHOD_7 ( VAR_6 ) ; int VAR_8 = 0 ; double VAR_9 = x [ VAR_3 ] ; double VAR_10 = y [ VAR_3 ] ; double VAR_11 = TYPE_3 . METHOD_7 ( VAR_10 ) ; int VAR_12 = 0 ; while ( true ) { final double VAR_13 = METHOD_8 ( ) + METHOD_9 ( ) * TYPE_3 . METHOD_10 ( TYPE_3 . METHOD_7 ( VAR_5 ) , TYPE_3 . METHOD_7 ( VAR_9 ) ) ; if ( ( ( VAR_9 - VAR_5 ) <= VAR_13 ) || ( TYPE_3 . METHOD_10 ( VAR_7 , VAR_11 ) < METHOD_11 ( ) ) ) { switch ( VAR_14 ) { case VAR_15 : return VAR_7 < VAR_11 ? VAR_5 : VAR_9 ; case VAR_16 : return VAR_5 ; case VAR_17 : return VAR_9 ; case VAR_18 : return ( VAR_6 <= 0 ) ? VAR_5 : VAR_9 ; case VAR_19 : return ( VAR_6 < 0 ) ? VAR_9 : VAR_5 ; default : throw new TYPE_4 ( null ) ; } } double VAR_20 ; if ( VAR_8 >= VAR_21 ) { VAR_20 = - VAR_22 * VAR_10 ; } else if ( VAR_12 >= VAR_21 ) { VAR_20 = - VAR_22 * VAR_6 ; } else { VAR_20 = 0 ; } double VAR_23 ; int start = 0 ; int end = VAR_2 ; do { TYPE_5 . METHOD_12 ( x , start , VAR_4 , start , end - start ) ; VAR_23 = METHOD_13 ( VAR_20 , VAR_4 , y , start , end ) ; if ( ! ( ( VAR_23 > VAR_5 ) && ( VAR_23 < VAR_9 ) ) ) { if ( VAR_3 - start >= end - VAR_3 ) { ++ start ; } else { -- end ; } VAR_23 = VAR_24 ; } } while ( TYPE_6 . METHOD_14 ( VAR_23 ) && ( end - start > 1 ) ) ; if ( TYPE_6 . METHOD_14 ( VAR_23 ) ) { VAR_23 = VAR_5 + FLOAT_1 * ( VAR_9 - VAR_5 ) ; start = VAR_3 - 1 ; end = VAR_3 ; } final double VAR_25 = METHOD_6 ( VAR_23 ) ; if ( TYPE_1 . equals ( VAR_25 , 0.0 , 1 ) ) { return VAR_23 ; } if ( ( VAR_2 > INT_1 ) && ( end - start != VAR_2 ) ) { VAR_2 = end - start ; TYPE_5 . METHOD_12 ( x , start , x , 0 , VAR_2 ) ; TYPE_5 . METHOD_12 ( y , start , y , 0 , VAR_2 ) ; VAR_3 -= start ; } else if ( VAR_2 == x . length ) { VAR_2 -- ; if ( VAR_3 >= ( x . length + 1 ) / INT_1 ) { TYPE_5 . METHOD_12 ( x , 1 , x , 0 , VAR_2 ) ; TYPE_5 . METHOD_12 ( y , 1 , y , 0 , VAR_2 ) ; -- VAR_3 ; } } TYPE_5 . METHOD_12 ( x , VAR_3 , x , VAR_3 + 1 , VAR_2 - VAR_3 ) ; x [ VAR_3 ] = VAR_23 ; TYPE_5 . METHOD_12 ( y , VAR_3 , y , VAR_3 + 1 , VAR_2 - VAR_3 ) ; y [ VAR_3 ] = VAR_25 ; ++ VAR_2 ; if ( VAR_25 * VAR_6 <= 0 ) { VAR_9 = VAR_23 ; VAR_10 = VAR_25 ; VAR_11 = TYPE_3 . METHOD_7 ( VAR_10 ) ; ++ VAR_8 ; VAR_12 = 0 ; } else { VAR_5 = VAR_23 ; VAR_6 = VAR_25 ; VAR_7 = TYPE_3 . METHOD_7 ( VAR_6 ) ; VAR_8 = 0 ; ++ VAR_12 ; VAR_3 ++ ; } } }