public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; final TYPE_2 < TYPE_1 > VAR_1 = METHOD_3 ( ) ; if ( VAR_1 == null ) { throw new TYPE_3 ( ) ; } final double [ ] VAR_2 = METHOD_4 ( ) ; final int VAR_3 = VAR_2 . length ; final TYPE_4 VAR_4 = METHOD_5 ( ) ; final double [ ] VAR_5 = new double [ VAR_3 ] ; for ( int i = 0 ; i < VAR_3 ; i ++ ) { VAR_5 [ i ] = VAR_4 . METHOD_6 ( i , i ) ; } final double [ ] VAR_6 = METHOD_7 ( ) ; final int VAR_7 = VAR_6 . length ; TYPE_1 VAR_8 = null ; int VAR_9 = 0 ; for ( boolean VAR_10 = false ; ! VAR_10 ; ) { ++ VAR_9 ; TYPE_1 VAR_11 = VAR_8 ; final double [ ] VAR_12 = METHOD_8 ( VAR_6 ) ; final double [ ] VAR_13 = METHOD_9 ( VAR_12 ) ; final TYPE_4 VAR_14 = METHOD_10 ( VAR_6 ) ; VAR_8 = new TYPE_1 ( VAR_6 , VAR_12 ) ; final double [ ] b = new double [ VAR_7 ] ; final double [ ] [ ] a = new double [ VAR_7 ] [ VAR_7 ] ; for ( int i = 0 ; i < VAR_3 ; ++ i ) { final double [ ] VAR_15 = VAR_14 . METHOD_11 ( i ) ; final double VAR_16 = VAR_5 [ i ] ; final double VAR_17 = VAR_13 [ i ] ; final double VAR_18 = VAR_16 * VAR_17 ; for ( int j = 0 ; j < VAR_7 ; ++ j ) { b [ j ] += VAR_18 * VAR_15 [ j ] ; } for ( int k = 0 ; k < VAR_7 ; ++ k ) { double [ ] VAR_19 = a [ k ] ; double VAR_20 = VAR_16 * VAR_15 [ k ] ; for ( int VAR_21 = 0 ; VAR_21 < VAR_7 ; ++ VAR_21 ) { VAR_19 [ VAR_21 ] += VAR_20 * VAR_15 [ VAR_21 ] ; } } } try { TYPE_4 VAR_22 = new TYPE_5 ( a ) ; TYPE_6 VAR_23 = VAR_24 ? new TYPE_7 ( VAR_22 ) . METHOD_12 ( ) : new TYPE_8 ( VAR_22 ) . METHOD_12 ( ) ; final double [ ] VAR_25 = VAR_23 . METHOD_13 ( new TYPE_9 ( b , false ) ) . METHOD_14 ( ) ; for ( int i = 0 ; i < VAR_7 ; ++ i ) { VAR_6 [ i ] += VAR_25 [ i ] ; } } catch ( TYPE_10 VAR_26 ) { throw new TYPE_11 ( VAR_27 ) ; } if ( VAR_11 != null ) { VAR_10 = VAR_1 . METHOD_15 ( VAR_9 , VAR_11 , VAR_8 ) ; if ( VAR_10 ) { METHOD_16 ( METHOD_17 ( VAR_13 ) ) ; return VAR_8 ; } } } throw new TYPE_12 ( ) ; }