protected TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 { VAR_1 = TYPE_5 . min ( rows , VAR_2 ) ; VAR_3 = new double [ VAR_2 ] ; VAR_4 = new double [ VAR_2 ] ; VAR_5 = new double [ VAR_2 ] ; VAR_6 = new int [ VAR_2 ] ; VAR_7 = new double [ VAR_2 ] ; double VAR_8 = 0 ; double VAR_9 = 0 ; double [ ] VAR_10 = new double [ VAR_2 ] ; double [ ] VAR_11 = new double [ VAR_2 ] ; double [ ] VAR_12 = new double [ rows ] ; double [ ] VAR_52 = new double [ rows ] ; double [ ] VAR_53 = new double [ rows ] ; double [ ] VAR_13 = new double [ VAR_2 ] ; double [ ] VAR_14 = new double [ VAR_2 ] ; double [ ] VAR_15 = new double [ VAR_2 ] ; METHOD_2 ( ) ; VAR_16 = 0 ; boolean VAR_17 = true ; TYPE_1 VAR_18 = new TYPE_1 ( VAR_19 , VAR_20 ) ; while ( true ) { for ( int i = 0 ; i < rows ; i ++ ) { VAR_53 [ i ] = VAR_22 [ i ] ; } METHOD_3 ( ) ; TYPE_1 VAR_21 = VAR_18 ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_53 ) ; for ( int k = 0 ; k < VAR_1 ; ++ k ) { int VAR_23 = VAR_6 [ k ] ; VAR_24 [ k ] [ VAR_23 ] = VAR_3 [ VAR_23 ] ; } if ( VAR_17 ) { VAR_9 = 0 ; for ( int k = 0 ; k < VAR_2 ; ++ k ) { double VAR_25 = VAR_4 [ k ] ; if ( VAR_25 == 0 ) { VAR_25 = 1.0 ; } double VAR_26 = VAR_25 * VAR_19 [ k ] ; VAR_9 += VAR_26 * VAR_26 ; VAR_10 [ k ] = VAR_25 ; } VAR_9 = TYPE_5 . METHOD_7 ( VAR_9 ) ; VAR_8 = ( VAR_9 == 0 ) ? VAR_27 : ( VAR_27 * VAR_9 ) ; } double VAR_28 = 0 ; if ( VAR_29 != 0 ) { for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_30 = VAR_6 [ j ] ; double VAR_31 = VAR_4 [ VAR_30 ] ; if ( VAR_31 != 0 ) { double sum = 0 ; for ( int i = 0 ; i <= j ; ++ i ) { sum += VAR_24 [ i ] [ VAR_30 ] * VAR_53 [ i ] ; } VAR_28 = TYPE_5 . METHOD_8 ( VAR_28 , TYPE_5 . METHOD_9 ( sum ) / ( VAR_31 * VAR_29 ) ) ; } } } if ( VAR_28 <= VAR_32 ) { METHOD_2 ( ) ; VAR_18 = new TYPE_1 ( VAR_19 , VAR_20 ) ; return VAR_18 ; } for ( int j = 0 ; j < VAR_2 ; ++ j ) { VAR_10 [ j ] = TYPE_5 . METHOD_8 ( VAR_10 [ j ] , VAR_4 [ j ] ) ; } for ( double VAR_33 = 0 ; VAR_33 < FLOAT_1 ; ) { for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_30 = VAR_6 [ j ] ; VAR_11 [ VAR_30 ] = VAR_19 [ VAR_30 ] ; } double VAR_34 = VAR_29 ; double [ ] VAR_35 = VAR_22 ; VAR_22 = VAR_12 ; VAR_12 = VAR_35 ; VAR_35 = VAR_20 ; VAR_20 = VAR_52 ; VAR_52 = VAR_35 ; METHOD_10 ( VAR_53 , VAR_8 , VAR_10 , VAR_13 , VAR_14 , VAR_15 ) ; double VAR_36 = 0 ; for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_30 = VAR_6 [ j ] ; VAR_7 [ VAR_30 ] = - VAR_7 [ VAR_30 ] ; VAR_19 [ VAR_30 ] = VAR_11 [ VAR_30 ] + VAR_7 [ VAR_30 ] ; double VAR_31 = VAR_10 [ VAR_30 ] * VAR_7 [ VAR_30 ] ; VAR_36 += VAR_31 * VAR_31 ; } VAR_36 = TYPE_5 . METHOD_7 ( VAR_36 ) ; if ( VAR_17 ) { VAR_8 = TYPE_5 . min ( VAR_8 , VAR_36 ) ; } METHOD_2 ( ) ; double VAR_37 = - 1.0 ; if ( FLOAT_2 * VAR_29 < VAR_34 ) { double VAR_38 = VAR_29 / VAR_34 ; VAR_37 = 1.0 - VAR_38 * VAR_38 ; } for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_30 = VAR_6 [ j ] ; double VAR_39 = VAR_7 [ VAR_30 ] ; VAR_13 [ j ] = 0 ; for ( int i = 0 ; i <= j ; ++ i ) { VAR_13 [ i ] += VAR_24 [ i ] [ VAR_30 ] * VAR_39 ; } } double VAR_40 = 0 ; for ( int j = 0 ; j < VAR_1 ; ++ j ) { VAR_40 += VAR_13 [ j ] * VAR_13 [ j ] ; } double VAR_41 = VAR_34 * VAR_34 ; VAR_40 = VAR_40 / VAR_41 ; double VAR_42 = VAR_16 * VAR_36 * VAR_36 / VAR_41 ; double VAR_43 = VAR_40 + INT_1 * VAR_42 ; double VAR_44 = - ( VAR_40 + VAR_42 ) ; VAR_33 = ( VAR_43 == 0 ) ? 0 : ( VAR_37 / VAR_43 ) ; if ( VAR_33 <= FLOAT_3 ) { double tmp = ( VAR_37 < 0 ) ? ( FLOAT_4 * VAR_44 / ( VAR_44 + FLOAT_4 * VAR_37 ) ) : FLOAT_4 ; if ( ( FLOAT_2 * VAR_29 >= VAR_34 ) || ( tmp < FLOAT_2 ) ) { tmp = FLOAT_2 ; } VAR_8 = tmp * TYPE_5 . min ( VAR_8 , FLOAT_5 * VAR_36 ) ; VAR_16 /= tmp ; } else if ( ( VAR_16 == 0 ) || ( VAR_33 >= FLOAT_6 ) ) { VAR_8 = INT_1 * VAR_36 ; VAR_16 *= FLOAT_4 ; } if ( VAR_33 >= FLOAT_1 ) { VAR_17 = false ; VAR_9 = 0 ; for ( int k = 0 ; k < VAR_2 ; ++ k ) { double VAR_45 = VAR_10 [ k ] * VAR_19 [ k ] ; VAR_9 += VAR_45 * VAR_45 ; } VAR_9 = TYPE_5 . METHOD_7 ( VAR_9 ) ; VAR_18 = new TYPE_1 ( VAR_19 , VAR_20 ) ; if ( VAR_46 != null ) { if ( VAR_46 . METHOD_11 ( METHOD_12 ( ) , VAR_21 , VAR_18 ) ) { return VAR_18 ; } } } else { VAR_29 = VAR_34 ; for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_30 = VAR_6 [ j ] ; VAR_19 [ VAR_30 ] = VAR_11 [ VAR_30 ] ; } VAR_35 = VAR_22 ; VAR_22 = VAR_12 ; VAR_12 = VAR_35 ; VAR_35 = VAR_20 ; VAR_20 = VAR_52 ; VAR_52 = VAR_35 ; } if ( VAR_46 == null ) { if ( ( ( TYPE_5 . METHOD_9 ( VAR_37 ) <= VAR_47 ) && ( VAR_43 <= VAR_47 ) && ( VAR_33 <= FLOAT_7 ) ) || ( VAR_8 <= VAR_48 * VAR_9 ) ) { return VAR_18 ; } } if ( ( TYPE_5 . METHOD_9 ( VAR_37 ) <= FLOAT_8 ) && ( VAR_43 <= FLOAT_8 ) && ( VAR_33 <= FLOAT_7 ) ) { throw new TYPE_3 ( VAR_49 , VAR_47 ) ; } else if ( VAR_8 <= FLOAT_8 * VAR_9 ) { throw new TYPE_3 ( VAR_50 , VAR_48 ) ; } else if ( VAR_28 <= FLOAT_8 ) { throw new TYPE_3 ( VAR_51 , VAR_32 ) ; } } } }