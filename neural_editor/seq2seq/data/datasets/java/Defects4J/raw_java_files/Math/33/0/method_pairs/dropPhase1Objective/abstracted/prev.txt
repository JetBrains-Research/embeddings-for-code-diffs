protected void METHOD_1 ( ) { if ( METHOD_2 ( ) == 1 ) { return ; } TYPE_1 < TYPE_2 > VAR_1 = new TYPE_3 < TYPE_2 > ( ) ; VAR_1 . add ( 0 ) ; for ( int i = METHOD_2 ( ) ; i < METHOD_3 ( ) ; i ++ ) { final double VAR_2 = VAR_3 . METHOD_4 ( 0 , i ) ; if ( TYPE_4 . compareTo ( VAR_2 , FLOAT_1 , VAR_4 ) > 0 ) { VAR_1 . add ( i ) ; } } for ( int i = 0 ; i < METHOD_5 ( ) ; i ++ ) { int VAR_5 = i + METHOD_3 ( ) ; if ( METHOD_6 ( VAR_5 ) == null ) { VAR_1 . add ( VAR_5 ) ; } } double [ ] [ ] VAR_6 = new double [ METHOD_7 ( ) - 1 ] [ METHOD_8 ( ) - VAR_1 . size ( ) ] ; for ( int i = 1 ; i < METHOD_7 ( ) ; i ++ ) { int VAR_5 = 0 ; for ( int j = 0 ; j < METHOD_8 ( ) ; j ++ ) { if ( ! VAR_1 . contains ( j ) ) { VAR_6 [ i - 1 ] [ VAR_5 ++ ] = VAR_3 . METHOD_4 ( i , j ) ; } } } for ( int i = VAR_1 . size ( ) - 1 ; i >= 0 ; i -- ) { VAR_7 . remove ( ( int ) VAR_1 . get ( i ) ) ; } this . VAR_3 = new TYPE_5 ( VAR_6 ) ; this . VAR_8 = 0 ; }