protected TYPE_1 METHOD_1 ( ) throws TYPE_2 , TYPE_3 , TYPE_4 { VAR_1 = TYPE_5 . min ( rows , VAR_2 ) ; VAR_3 = new double [ VAR_2 ] ; VAR_4 = new double [ VAR_2 ] ; VAR_5 = new double [ VAR_2 ] ; VAR_6 = new int [ VAR_2 ] ; VAR_7 = new double [ VAR_2 ] ; double VAR_8 = 0 ; double VAR_9 = 0 ; double [ ] VAR_10 = new double [ VAR_2 ] ; double [ ] VAR_11 = new double [ VAR_2 ] ; double [ ] VAR_12 = new double [ rows ] ; double [ ] VAR_13 = new double [ VAR_2 ] ; double [ ] VAR_14 = new double [ VAR_2 ] ; double [ ] VAR_15 = new double [ VAR_2 ] ; METHOD_2 ( ) ; VAR_16 = 0 ; boolean VAR_17 = true ; while ( true ) { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_18 ) ; for ( int k = 0 ; k < VAR_1 ; ++ k ) { int VAR_19 = VAR_6 [ k ] ; VAR_20 [ k ] [ VAR_19 ] = VAR_3 [ VAR_19 ] ; } if ( VAR_17 ) { VAR_9 = 0 ; for ( int k = 0 ; k < VAR_2 ; ++ k ) { double VAR_21 = VAR_4 [ k ] ; if ( VAR_21 == 0 ) { VAR_21 = 1.0 ; } double VAR_22 = VAR_21 * VAR_23 [ k ] ; VAR_9 += VAR_22 * VAR_22 ; VAR_10 [ k ] = VAR_21 ; } VAR_9 = TYPE_5 . METHOD_7 ( VAR_9 ) ; VAR_8 = ( VAR_9 == 0 ) ? VAR_24 : ( VAR_24 * VAR_9 ) ; } double VAR_25 = 0 ; if ( VAR_26 != 0 ) { for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_27 = VAR_6 [ j ] ; double VAR_28 = VAR_4 [ VAR_27 ] ; if ( VAR_28 != 0 ) { double sum = 0 ; for ( int i = 0 ; i <= j ; ++ i ) { sum += VAR_20 [ i ] [ VAR_27 ] * VAR_18 [ i ] ; } VAR_25 = TYPE_5 . METHOD_8 ( VAR_25 , TYPE_5 . METHOD_9 ( sum ) / ( VAR_28 * VAR_26 ) ) ; } } } if ( VAR_25 <= VAR_29 ) { return new TYPE_1 ( VAR_23 , VAR_30 ) ; } for ( int j = 0 ; j < VAR_2 ; ++ j ) { VAR_10 [ j ] = TYPE_5 . METHOD_8 ( VAR_10 [ j ] , VAR_4 [ j ] ) ; } for ( double VAR_31 = 0 ; VAR_31 < FLOAT_1 ; ) { for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_27 = VAR_6 [ j ] ; VAR_11 [ VAR_27 ] = VAR_23 [ VAR_27 ] ; } double VAR_32 = VAR_26 ; double [ ] VAR_33 = VAR_18 ; VAR_18 = VAR_12 ; VAR_12 = VAR_33 ; METHOD_10 ( VAR_12 , VAR_8 , VAR_10 , VAR_13 , VAR_14 , VAR_15 ) ; double VAR_34 = 0 ; for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_27 = VAR_6 [ j ] ; VAR_7 [ VAR_27 ] = - VAR_7 [ VAR_27 ] ; VAR_23 [ VAR_27 ] = VAR_11 [ VAR_27 ] + VAR_7 [ VAR_27 ] ; double VAR_28 = VAR_10 [ VAR_27 ] * VAR_7 [ VAR_27 ] ; VAR_34 += VAR_28 * VAR_28 ; } VAR_34 = TYPE_5 . METHOD_7 ( VAR_34 ) ; if ( VAR_17 ) { VAR_8 = TYPE_5 . min ( VAR_8 , VAR_34 ) ; } METHOD_2 ( ) ; double VAR_35 = - 1.0 ; if ( FLOAT_2 * VAR_26 < VAR_32 ) { double VAR_36 = VAR_26 / VAR_32 ; VAR_35 = 1.0 - VAR_36 * VAR_36 ; } for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_27 = VAR_6 [ j ] ; double VAR_37 = VAR_7 [ VAR_27 ] ; VAR_13 [ j ] = 0 ; for ( int i = 0 ; i <= j ; ++ i ) { VAR_13 [ i ] += VAR_20 [ i ] [ VAR_27 ] * VAR_37 ; } } double VAR_38 = 0 ; for ( int j = 0 ; j < VAR_1 ; ++ j ) { VAR_38 += VAR_13 [ j ] * VAR_13 [ j ] ; } double VAR_39 = VAR_32 * VAR_32 ; VAR_38 = VAR_38 / VAR_39 ; double VAR_40 = VAR_16 * VAR_34 * VAR_34 / VAR_39 ; double VAR_41 = VAR_38 + INT_1 * VAR_40 ; double VAR_42 = - ( VAR_38 + VAR_40 ) ; VAR_31 = ( VAR_41 == 0 ) ? 0 : ( VAR_35 / VAR_41 ) ; if ( VAR_31 <= FLOAT_3 ) { double tmp = ( VAR_35 < 0 ) ? ( FLOAT_4 * VAR_42 / ( VAR_42 + FLOAT_4 * VAR_35 ) ) : FLOAT_4 ; if ( ( FLOAT_2 * VAR_26 >= VAR_32 ) || ( tmp < FLOAT_2 ) ) { tmp = FLOAT_2 ; } VAR_8 = tmp * TYPE_5 . min ( VAR_8 , FLOAT_5 * VAR_34 ) ; VAR_16 /= tmp ; } else if ( ( VAR_16 == 0 ) || ( VAR_31 >= FLOAT_6 ) ) { VAR_8 = INT_1 * VAR_34 ; VAR_16 *= FLOAT_4 ; } if ( VAR_31 >= FLOAT_1 ) { VAR_17 = false ; VAR_9 = 0 ; for ( int k = 0 ; k < VAR_2 ; ++ k ) { double VAR_43 = VAR_10 [ k ] * VAR_23 [ k ] ; VAR_9 += VAR_43 * VAR_43 ; } VAR_9 = TYPE_5 . METHOD_7 ( VAR_9 ) ; } else { VAR_26 = VAR_32 ; for ( int j = 0 ; j < VAR_1 ; ++ j ) { int VAR_27 = VAR_6 [ j ] ; VAR_23 [ VAR_27 ] = VAR_11 [ VAR_27 ] ; } VAR_33 = VAR_18 ; VAR_18 = VAR_12 ; VAR_12 = VAR_33 ; } if ( ( ( TYPE_5 . METHOD_9 ( VAR_35 ) <= VAR_44 ) && ( VAR_41 <= VAR_44 ) && ( VAR_31 <= FLOAT_7 ) ) || ( VAR_8 <= VAR_45 * VAR_9 ) ) { return new TYPE_1 ( VAR_23 , VAR_30 ) ; } if ( ( TYPE_5 . METHOD_9 ( VAR_35 ) <= FLOAT_8 ) && ( VAR_41 <= FLOAT_8 ) && ( VAR_31 <= FLOAT_7 ) ) { throw new TYPE_3 ( STRING_1 + STRING_2 + STRING_3 , VAR_44 ) ; } else if ( VAR_8 <= FLOAT_8 * VAR_9 ) { throw new TYPE_3 ( STRING_4 + STRING_5 + STRING_6 , VAR_45 ) ; } else if ( VAR_25 <= FLOAT_8 ) { throw new TYPE_3 ( STRING_7 + STRING_8 , VAR_29 ) ; } } } }