public double METHOD_1 ( final TYPE_1 VAR_1 , final double VAR_2 , final double [ ] VAR_3 , final double t , final double [ ] y ) throws TYPE_2 , TYPE_3 { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , t , y ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; final boolean VAR_4 = t > VAR_2 ; final int VAR_5 = c . length + 1 ; if ( y != VAR_3 ) { TYPE_4 . METHOD_5 ( VAR_3 , 0 , y , 0 , VAR_3 . length ) ; } final double [ ] [ ] VAR_6 = new double [ VAR_5 ] [ ] ; for ( int i = 0 ; i < VAR_5 ; ++ i ) { VAR_6 [ i ] = new double [ VAR_3 . length ] ; } final double [ ] VAR_7 = new double [ VAR_3 . length ] ; TYPE_5 VAR_8 ; if ( METHOD_6 ( ) || ( ! VAR_9 . isEmpty ( ) ) ) { final TYPE_6 VAR_10 = ( TYPE_6 ) VAR_11 . METHOD_7 ( ) ; VAR_10 . METHOD_8 ( this , VAR_7 , VAR_6 , VAR_4 ) ; VAR_8 = VAR_10 ; } else { VAR_8 = new TYPE_7 ( VAR_7 , VAR_6 [ VAR_5 - 1 ] , VAR_4 ) ; } VAR_8 . METHOD_9 ( VAR_2 ) ; VAR_12 = VAR_2 ; VAR_13 = VAR_4 ? step : - step ; for ( TYPE_8 VAR_14 : VAR_15 ) { VAR_14 . METHOD_10 ( ) ; } TYPE_9 VAR_16 = METHOD_11 ( VAR_2 , t , VAR_9 ) ; boolean VAR_17 = false ; while ( ! VAR_17 ) { VAR_8 . METHOD_12 ( ) ; for ( boolean VAR_18 = true ; VAR_18 ; ) { METHOD_13 ( VAR_12 , y , VAR_6 [ 0 ] ) ; for ( int k = 1 ; k < VAR_5 ; ++ k ) { for ( int j = 0 ; j < VAR_3 . length ; ++ j ) { double sum = a [ k - 1 ] [ 0 ] * VAR_6 [ 0 ] [ j ] ; for ( int VAR_19 = 1 ; VAR_19 < k ; ++ VAR_19 ) { sum += a [ k - 1 ] [ VAR_19 ] * VAR_6 [ VAR_19 ] [ j ] ; } VAR_7 [ j ] = y [ j ] + VAR_13 * sum ; } METHOD_13 ( VAR_12 + c [ k - 1 ] * VAR_13 , VAR_7 , VAR_6 [ k ] ) ; } for ( int j = 0 ; j < VAR_3 . length ; ++ j ) { double sum = b [ 0 ] * VAR_6 [ 0 ] [ j ] ; for ( int VAR_19 = 1 ; VAR_19 < VAR_5 ; ++ VAR_19 ) { sum += b [ VAR_19 ] * VAR_6 [ VAR_19 ] [ j ] ; } VAR_7 [ j ] = y [ j ] + VAR_13 * sum ; } VAR_8 . METHOD_9 ( VAR_12 + VAR_13 ) ; if ( VAR_16 . METHOD_14 ( VAR_8 ) ) { final double VAR_20 = VAR_16 . METHOD_15 ( ) - VAR_12 ; if ( TYPE_10 . METHOD_16 ( VAR_20 ) <= TYPE_10 . METHOD_17 ( VAR_12 ) ) { VAR_8 . METHOD_9 ( VAR_12 ) ; TYPE_4 . METHOD_5 ( y , 0 , VAR_7 , 0 , VAR_3 . length ) ; VAR_13 = 0 ; VAR_18 = false ; } else { VAR_13 = VAR_20 ; } } else { VAR_18 = false ; } } final double VAR_21 = VAR_12 + VAR_13 ; TYPE_4 . METHOD_5 ( VAR_7 , 0 , y , 0 , VAR_3 . length ) ; VAR_16 . METHOD_18 ( VAR_21 , y ) ; VAR_17 = VAR_16 . METHOD_19 ( ) ; VAR_8 . METHOD_9 ( VAR_21 ) ; for ( TYPE_8 VAR_14 : VAR_15 ) { VAR_14 . METHOD_20 ( VAR_8 , VAR_17 ) ; } VAR_12 = VAR_21 ; if ( VAR_16 . METHOD_10 ( VAR_12 , y ) && ! VAR_17 ) { METHOD_13 ( VAR_12 , y , VAR_6 [ 0 ] ) ; } VAR_13 = VAR_4 ? step : - step ; } final double VAR_22 = VAR_12 ; VAR_12 = VAR_23 ; VAR_13 = VAR_23 ; return VAR_22 ; }