public static double METHOD_1 ( final double [ ] a , final double [ ] b ) throws TYPE_1 { final int VAR_1 = a . length ; if ( VAR_1 != b . length ) { throw new TYPE_1 ( VAR_1 , b . length ) ; } final double [ ] VAR_2 = new double [ VAR_1 ] ; double VAR_3 = 0 ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { final double VAR_4 = a [ i ] ; final double VAR_5 = VAR_6 * VAR_4 ; final double VAR_7 = VAR_5 - ( VAR_5 - VAR_4 ) ; final double VAR_8 = VAR_4 - VAR_7 ; final double VAR_9 = b [ i ] ; final double VAR_10 = VAR_6 * VAR_9 ; final double VAR_11 = VAR_10 - ( VAR_10 - VAR_9 ) ; final double VAR_12 = VAR_9 - VAR_11 ; VAR_2 [ i ] = VAR_4 * VAR_9 ; final double VAR_13 = VAR_8 * VAR_12 - ( ( ( VAR_2 [ i ] - VAR_7 * VAR_11 ) - VAR_8 * VAR_11 ) - VAR_7 * VAR_12 ) ; VAR_3 += VAR_13 ; } final double VAR_14 = VAR_2 [ 0 ] ; double VAR_15 = VAR_2 [ 1 ] ; double VAR_16 = VAR_14 + VAR_15 ; double VAR_17 = VAR_16 - VAR_15 ; double VAR_18 = ( VAR_15 - ( VAR_16 - VAR_17 ) ) + ( VAR_14 - VAR_17 ) ; final int VAR_19 = VAR_1 - 1 ; for ( int i = 1 ; i < VAR_19 ; i ++ ) { VAR_15 = VAR_2 [ i + 1 ] ; final double VAR_20 = VAR_16 + VAR_15 ; VAR_17 = VAR_20 - VAR_15 ; VAR_18 += ( VAR_15 - ( VAR_20 - VAR_17 ) ) + ( VAR_16 - VAR_17 ) ; VAR_16 = VAR_20 ; } double result = VAR_16 + ( VAR_3 + VAR_18 ) ; if ( TYPE_2 . METHOD_2 ( result ) ) { result = 0 ; for ( int i = 0 ; i < VAR_1 ; ++ i ) { result += a [ i ] * b [ i ] ; } } return result ; }