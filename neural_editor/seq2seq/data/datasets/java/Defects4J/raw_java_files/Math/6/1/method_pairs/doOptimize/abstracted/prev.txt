protected TYPE_1 METHOD_1 ( ) { final TYPE_2 < TYPE_1 > VAR_1 = METHOD_2 ( ) ; final double [ ] VAR_2 = METHOD_3 ( ) ; final TYPE_3 VAR_3 = METHOD_4 ( ) ; final int n = VAR_2 . length ; double [ ] VAR_4 = METHOD_5 ( VAR_2 ) ; if ( VAR_3 == VAR_5 ) { for ( int i = 0 ; i < n ; i ++ ) { VAR_4 [ i ] = - VAR_4 [ i ] ; } } double [ ] VAR_6 = VAR_7 . METHOD_6 ( VAR_2 , VAR_4 ) ; double [ ] VAR_8 = VAR_6 . METHOD_7 ( ) ; double VAR_9 = 0 ; for ( int i = 0 ; i < n ; ++ i ) { VAR_9 += VAR_4 [ i ] * VAR_8 [ i ] ; } TYPE_1 VAR_10 = null ; int VAR_11 = 0 ; int VAR_12 = METHOD_8 ( ) ; while ( true ) { ++ VAR_11 ; final double VAR_13 = METHOD_9 ( VAR_2 ) ; TYPE_1 VAR_14 = VAR_10 ; VAR_10 = new TYPE_1 ( VAR_2 , VAR_13 ) ; if ( VAR_14 != null ) { if ( VAR_1 . METHOD_10 ( VAR_11 , VAR_14 , VAR_10 ) ) { return VAR_10 ; } } final TYPE_4 VAR_15 = new TYPE_5 ( VAR_2 , VAR_8 ) ; final double VAR_16 = METHOD_11 ( VAR_15 , 0 , VAR_17 ) ; final double step = VAR_18 . METHOD_12 ( VAR_12 , VAR_15 , 0 , VAR_16 , FLOAT_1 ) ; VAR_12 -= VAR_18 . METHOD_13 ( ) ; for ( int i = 0 ; i < VAR_2 . length ; ++ i ) { VAR_2 [ i ] += step * VAR_8 [ i ] ; } VAR_4 = METHOD_5 ( VAR_2 ) ; if ( VAR_3 == VAR_5 ) { for ( int i = 0 ; i < n ; ++ i ) { VAR_4 [ i ] = - VAR_4 [ i ] ; } } final double VAR_19 = VAR_9 ; final double [ ] VAR_20 = VAR_7 . METHOD_6 ( VAR_2 , VAR_4 ) ; VAR_9 = 0 ; for ( int i = 0 ; i < n ; ++ i ) { VAR_9 += VAR_4 [ i ] * VAR_20 [ i ] ; } final double VAR_21 ; switch ( VAR_22 ) { case VAR_23 : VAR_21 = VAR_9 / VAR_19 ; break ; case VAR_24 : double VAR_25 = 0 ; for ( int i = 0 ; i < VAR_4 . length ; ++ i ) { VAR_25 += VAR_4 [ i ] * VAR_6 [ i ] ; } VAR_21 = ( VAR_9 - VAR_25 ) / VAR_19 ; break ; default : throw new TYPE_6 ( ) ; } VAR_6 = VAR_20 ; if ( VAR_11 % n == 0 || VAR_21 < 0 ) { VAR_8 = VAR_6 . METHOD_7 ( ) ; } else { for ( int i = 0 ; i < n ; ++ i ) { VAR_8 [ i ] = VAR_6 [ i ] + VAR_21 * VAR_8 [ i ] ; } } } }