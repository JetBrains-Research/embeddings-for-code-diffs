protected TYPE_1 METHOD_1 ( ) { VAR_1 = METHOD_2 ( ) . equals ( VAR_2 ) ; final TYPE_2 VAR_3 = new TYPE_2 ( ) ; final double [ ] VAR_4 = METHOD_3 ( ) ; VAR_5 = VAR_4 . length ; METHOD_4 ( VAR_4 ) ; VAR_6 = 0 ; double VAR_7 = VAR_3 . value ( VAR_4 ) ; METHOD_5 ( VAR_8 , VAR_7 ) ; TYPE_1 VAR_9 = new TYPE_1 ( METHOD_3 ( ) , VAR_1 ? VAR_7 : - VAR_7 ) ; TYPE_1 VAR_10 = null ; VAR_11 : for ( VAR_6 = 1 ; VAR_6 <= VAR_12 ; VAR_6 ++ ) { final TYPE_3 VAR_13 = METHOD_6 ( VAR_5 , VAR_14 ) ; final TYPE_3 VAR_15 = METHOD_7 ( VAR_5 , VAR_14 ) ; final double [ ] VAR_16 = new double [ VAR_14 ] ; for ( int k = 0 ; k < VAR_14 ; k ++ ) { TYPE_3 VAR_17 = null ; for ( int i = 0 ; i < VAR_18 + 1 ; i ++ ) { if ( VAR_19 <= 0 ) { VAR_17 = VAR_20 . add ( TYPE_4 . METHOD_8 ( VAR_13 . METHOD_9 ( k ) ) . METHOD_10 ( VAR_21 ) ) ; } else { VAR_17 = VAR_20 . add ( METHOD_11 ( VAR_22 , VAR_13 . METHOD_9 ( k ) ) . METHOD_10 ( VAR_21 ) ) ; } if ( i >= VAR_18 || VAR_3 . METHOD_12 ( VAR_17 . METHOD_13 ( 0 ) ) ) { break ; } VAR_13 . METHOD_14 ( k , METHOD_15 ( VAR_5 ) ) ; } METHOD_16 ( VAR_17 , 0 , VAR_15 , k ) ; try { VAR_16 [ k ] = VAR_3 . value ( VAR_15 . METHOD_13 ( k ) ) ; } catch ( TYPE_5 VAR_23 ) { break VAR_11 ; } } final int [ ] VAR_24 = METHOD_17 ( VAR_16 ) ; final TYPE_3 VAR_25 = VAR_20 ; final TYPE_3 VAR_26 = METHOD_18 ( VAR_15 , TYPE_6 . METHOD_19 ( VAR_24 , VAR_27 ) ) ; VAR_20 = VAR_26 . METHOD_8 ( VAR_28 ) ; final TYPE_3 VAR_29 = METHOD_18 ( VAR_13 , TYPE_6 . METHOD_19 ( VAR_24 , VAR_27 ) ) ; final TYPE_3 VAR_30 = VAR_29 . METHOD_8 ( VAR_28 ) ; final boolean VAR_31 = METHOD_20 ( VAR_30 , VAR_25 ) ; if ( VAR_19 <= 0 ) { METHOD_21 ( VAR_31 , VAR_26 , VAR_13 , VAR_24 , VAR_25 ) ; } else { METHOD_22 ( VAR_31 , VAR_29 ) ; } VAR_21 *= TYPE_7 . METHOD_23 ( TYPE_7 . min ( 1 , ( VAR_32 / VAR_33 - 1 ) * VAR_34 / VAR_35 ) ) ; final double VAR_36 = VAR_16 [ VAR_24 [ 0 ] ] ; final double VAR_37 = VAR_16 [ VAR_24 [ VAR_24 . length - 1 ] ] ; if ( VAR_7 > VAR_36 ) { VAR_7 = VAR_36 ; VAR_10 = VAR_9 ; VAR_9 = new TYPE_1 ( VAR_3 . METHOD_24 ( VAR_26 . METHOD_13 ( 0 ) ) , VAR_1 ? VAR_36 : - VAR_36 ) ; if ( METHOD_25 ( ) != null && VAR_10 != null ) { if ( METHOD_25 ( ) . METHOD_26 ( VAR_6 , VAR_9 , VAR_10 ) ) { break VAR_11 ; } } } if ( VAR_38 != 0 ) { if ( VAR_36 < ( VAR_1 ? VAR_38 : - VAR_38 ) ) { break VAR_11 ; } } final double [ ] VAR_39 = METHOD_27 ( VAR_40 ) . METHOD_13 ( 0 ) ; final double [ ] VAR_41 = VAR_42 . METHOD_13 ( 0 ) ; for ( int i = 0 ; i < VAR_5 ; i ++ ) { if ( VAR_21 * TYPE_7 . METHOD_28 ( TYPE_7 . METHOD_29 ( VAR_41 [ i ] ) , VAR_39 [ i ] ) > VAR_43 ) { break ; } if ( i >= VAR_5 - 1 ) { break VAR_11 ; } } for ( int i = 0 ; i < VAR_5 ; i ++ ) { if ( VAR_21 * VAR_39 [ i ] > VAR_44 ) { break VAR_11 ; } } final double VAR_45 = min ( VAR_8 ) ; final double VAR_46 = METHOD_28 ( VAR_8 ) ; if ( VAR_6 > INT_1 && TYPE_7 . METHOD_28 ( VAR_46 , VAR_37 ) - TYPE_7 . min ( VAR_45 , VAR_36 ) < VAR_47 ) { break VAR_11 ; } if ( VAR_6 > VAR_8 . length && VAR_46 - VAR_45 < VAR_48 ) { break VAR_11 ; } if ( METHOD_28 ( VAR_22 ) / min ( VAR_22 ) > FLOAT_1 ) { break VAR_11 ; } if ( METHOD_25 ( ) != null ) { final TYPE_1 VAR_49 = new TYPE_1 ( VAR_26 . METHOD_13 ( 0 ) , VAR_1 ? VAR_36 : - VAR_36 ) ; if ( VAR_10 != null && METHOD_25 ( ) . METHOD_26 ( VAR_6 , VAR_49 , VAR_10 ) ) { break VAR_11 ; } VAR_10 = VAR_49 ; } if ( VAR_7 == VAR_16 [ VAR_24 [ ( int ) ( FLOAT_2 + VAR_14 / FLOAT_3 ) ] ] ) { VAR_21 = VAR_21 * TYPE_7 . METHOD_23 ( FLOAT_4 + VAR_34 / VAR_35 ) ; } if ( VAR_6 > INT_1 && TYPE_7 . METHOD_28 ( VAR_46 , VAR_36 ) - TYPE_7 . min ( VAR_45 , VAR_36 ) == 0 ) { VAR_21 = VAR_21 * TYPE_7 . METHOD_23 ( FLOAT_4 + VAR_34 / VAR_35 ) ; } METHOD_5 ( VAR_8 , VAR_36 ) ; VAR_3 . METHOD_30 ( VAR_37 - VAR_36 ) ; if ( VAR_50 ) { VAR_51 . add ( VAR_21 ) ; VAR_52 . add ( VAR_36 ) ; VAR_53 . add ( VAR_20 . METHOD_31 ( ) ) ; VAR_54 . add ( VAR_22 . METHOD_31 ( ) . METHOD_10 ( FLOAT_5 ) ) ; } } return VAR_9 ; }