private VAR_1 ( final double value , final double VAR_2 , final int VAR_3 , int VAR_4 ) throws TYPE_1 { long VAR_5 = VAR_6 ; double VAR_7 = value ; long VAR_8 = ( long ) TYPE_2 . METHOD_1 ( VAR_7 ) ; if ( VAR_8 > VAR_5 ) { throw new TYPE_1 ( value , VAR_8 , INT_1 ) ; } if ( TYPE_2 . METHOD_2 ( VAR_8 - value ) < VAR_2 ) { VAR_9 = TYPE_3 . METHOD_3 ( VAR_8 ) ; VAR_10 = VAR_11 ; return ; } long VAR_12 = 1 ; long VAR_13 = 0 ; long VAR_14 = VAR_8 ; long VAR_15 = 1 ; long VAR_16 = 0 ; long VAR_17 = 1 ; int n = 0 ; boolean VAR_18 = false ; do { ++ n ; final double VAR_19 = 1.0 / ( VAR_7 - VAR_8 ) ; final long VAR_20 = ( long ) TYPE_2 . METHOD_1 ( VAR_19 ) ; VAR_16 = ( VAR_20 * VAR_14 ) + VAR_12 ; VAR_17 = ( VAR_20 * VAR_15 ) + VAR_13 ; if ( ( VAR_16 > VAR_5 ) || ( VAR_17 > VAR_5 ) ) { if ( VAR_2 == 0.0 && TYPE_2 . METHOD_2 ( VAR_15 ) < VAR_3 ) { break ; } throw new TYPE_1 ( value , VAR_16 , VAR_17 ) ; } final double VAR_21 = ( double ) VAR_16 / ( double ) VAR_17 ; if ( ( n < VAR_4 ) && ( TYPE_2 . METHOD_2 ( VAR_21 - value ) > VAR_2 ) && ( VAR_17 < VAR_3 ) ) { VAR_12 = VAR_14 ; VAR_14 = VAR_16 ; VAR_13 = VAR_15 ; VAR_15 = VAR_17 ; VAR_8 = VAR_20 ; VAR_7 = VAR_19 ; } else { VAR_18 = true ; } } while ( ! VAR_18 ) ; if ( n >= VAR_4 ) { throw new TYPE_1 ( value , VAR_4 ) ; } if ( VAR_17 < VAR_3 ) { VAR_9 = TYPE_3 . METHOD_3 ( VAR_16 ) ; VAR_10 = TYPE_3 . METHOD_3 ( VAR_17 ) ; } else { VAR_9 = TYPE_3 . METHOD_3 ( VAR_14 ) ; VAR_10 = TYPE_3 . METHOD_3 ( VAR_15 ) ; } }