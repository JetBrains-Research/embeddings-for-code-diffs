private void METHOD_1 ( final int n ) throws TYPE_1 { double VAR_1 = 0 ; for ( int i = 0 ; i < n - 1 ; ++ i ) { final int VAR_2 = INT_1 * i ; final double VAR_3 = VAR_4 [ VAR_2 + INT_2 ] ; VAR_1 += VAR_3 ; } if ( VAR_1 == 0 ) { return ; } METHOD_2 ( n , INT_2 ) ; METHOD_3 ( n ) ; VAR_5 = 0 ; VAR_6 = 0 ; VAR_7 = 0 ; VAR_8 = 0 ; VAR_9 = 0 ; VAR_10 = 0 ; VAR_11 = 0 ; int VAR_12 = 0 ; int VAR_13 = n ; while ( VAR_13 > 0 ) { VAR_14 = ( VAR_13 == n ) ? 0 : - VAR_4 [ INT_1 * VAR_13 - INT_2 ] ; VAR_15 = 0 ; double VAR_16 = ( VAR_12 == VAR_13 ) ? 0 : VAR_4 [ INT_1 * VAR_13 - INT_3 ] ; double VAR_17 = 0 ; double VAR_18 = VAR_4 [ INT_1 * VAR_13 - INT_1 ] ; double VAR_19 = VAR_18 ; VAR_12 = 0 ; for ( int i = INT_1 * ( VAR_13 - INT_2 ) ; i >= 0 ; i -= INT_1 ) { if ( VAR_4 [ i + INT_2 ] <= 0 ) { VAR_12 = 1 + i / INT_1 ; break ; } if ( VAR_19 >= INT_1 * VAR_17 ) { VAR_19 = TYPE_2 . min ( VAR_19 , VAR_4 [ i + INT_1 ] ) ; VAR_17 = TYPE_2 . METHOD_4 ( VAR_17 , VAR_4 [ i + INT_2 ] ) ; } VAR_18 = TYPE_2 . METHOD_4 ( VAR_18 , VAR_4 [ i ] + VAR_4 [ i + INT_2 ] ) ; VAR_16 = TYPE_2 . min ( VAR_16 , VAR_4 [ i + INT_2 ] ) ; } VAR_4 [ INT_1 * VAR_13 - INT_2 ] = VAR_16 ; VAR_20 = - TYPE_2 . METHOD_4 ( 0 , VAR_19 - INT_2 * TYPE_2 . METHOD_5 ( VAR_19 * VAR_17 ) ) ; VAR_21 = 0 ; int VAR_22 = INT_4 * ( VAR_13 - VAR_12 ) ; for ( int k = 0 ; VAR_12 < VAR_13 ; ++ k ) { if ( k >= VAR_22 ) { throw new TYPE_1 ( new TYPE_3 ( VAR_22 ) ) ; } VAR_13 = METHOD_6 ( VAR_12 , VAR_13 ) ; VAR_21 = 1 - VAR_21 ; if ( ( VAR_21 == 0 ) && ( VAR_13 - VAR_12 > INT_5 ) && ( VAR_4 [ INT_1 * VAR_13 - 1 ] <= VAR_23 * VAR_18 ) && ( VAR_4 [ INT_1 * VAR_13 - INT_2 ] <= VAR_23 * VAR_14 ) ) { int split = VAR_12 - 1 ; VAR_18 = VAR_4 [ INT_1 * VAR_12 ] ; VAR_16 = VAR_4 [ INT_1 * VAR_12 + INT_2 ] ; double VAR_24 = VAR_4 [ INT_1 * VAR_12 + INT_5 ] ; for ( int i = INT_1 * VAR_12 ; i < INT_1 * VAR_13 - INT_6 ; i += INT_1 ) { if ( ( VAR_4 [ i + INT_5 ] <= VAR_23 * VAR_4 [ i ] ) && ( VAR_4 [ i + INT_2 ] <= VAR_23 * VAR_14 ) ) { VAR_4 [ i + INT_2 ] = - VAR_14 ; split = i / INT_1 ; VAR_18 = 0 ; VAR_16 = VAR_4 [ i + INT_3 ] ; VAR_24 = VAR_4 [ i + INT_7 ] ; } else { VAR_18 = TYPE_2 . METHOD_4 ( VAR_18 , VAR_4 [ i + INT_1 ] ) ; VAR_16 = TYPE_2 . min ( VAR_16 , VAR_4 [ i + INT_2 ] ) ; VAR_24 = TYPE_2 . min ( VAR_24 , VAR_4 [ i + INT_5 ] ) ; } } VAR_4 [ INT_1 * VAR_13 - INT_2 ] = VAR_16 ; VAR_4 [ INT_1 * VAR_13 - 1 ] = VAR_24 ; VAR_12 = split + 1 ; } } } }