public void METHOD_1 ( final TYPE_1 VAR_1 , final double t ) throws TYPE_2 , TYPE_3 { METHOD_2 ( VAR_1 , t ) ; METHOD_3 ( VAR_1 ) ; final boolean VAR_2 = t > VAR_1 . getTime ( ) ; final double [ ] VAR_3 = VAR_1 . METHOD_4 ( ) ; final double [ ] y = VAR_3 . METHOD_5 ( ) ; final int VAR_4 = c . length + 1 ; final double [ ] [ ] VAR_5 = new double [ VAR_4 ] [ y . length ] ; final double [ ] VAR_6 = VAR_3 . METHOD_5 ( ) ; final double [ ] VAR_7 = new double [ y . length ] ; final TYPE_4 VAR_8 = ( TYPE_4 ) VAR_9 . METHOD_6 ( ) ; VAR_8 . METHOD_7 ( this , VAR_6 , VAR_5 , VAR_2 , VAR_1 . METHOD_8 ( ) , VAR_1 . METHOD_9 ( ) ) ; VAR_8 . METHOD_10 ( VAR_1 . getTime ( ) ) ; VAR_10 = VAR_1 . getTime ( ) ; double VAR_11 = 0 ; boolean VAR_12 = true ; METHOD_11 ( VAR_1 . getTime ( ) , VAR_3 , t ) ; VAR_13 = false ; do { VAR_8 . METHOD_12 ( ) ; double error = INT_1 ; while ( error >= 1.0 ) { if ( VAR_12 || ! VAR_14 ) { METHOD_13 ( VAR_10 , y , VAR_5 [ 0 ] ) ; } if ( VAR_12 ) { final double [ ] VAR_15 = new double [ VAR_16 ] ; if ( VAR_17 == null ) { for ( int i = 0 ; i < VAR_15 . length ; ++ i ) { VAR_15 [ i ] = VAR_18 + VAR_19 * TYPE_5 . METHOD_14 ( y [ i ] ) ; } } else { for ( int i = 0 ; i < VAR_15 . length ; ++ i ) { VAR_15 [ i ] = VAR_17 [ i ] + VAR_20 [ i ] * TYPE_5 . METHOD_14 ( y [ i ] ) ; } } VAR_11 = METHOD_15 ( VAR_2 , METHOD_16 ( ) , VAR_15 , VAR_10 , y , VAR_5 [ 0 ] , VAR_6 , VAR_5 [ 1 ] ) ; VAR_12 = false ; } VAR_21 = VAR_11 ; if ( VAR_2 ) { if ( VAR_10 + VAR_21 >= t ) { VAR_21 = t - VAR_10 ; } } else { if ( VAR_10 + VAR_21 <= t ) { VAR_21 = t - VAR_10 ; } } for ( int k = 1 ; k < VAR_4 ; ++ k ) { for ( int j = 0 ; j < VAR_3 . length ; ++ j ) { double sum = a [ k - 1 ] [ 0 ] * VAR_5 [ 0 ] [ j ] ; for ( int VAR_22 = 1 ; VAR_22 < k ; ++ VAR_22 ) { sum += a [ k - 1 ] [ VAR_22 ] * VAR_5 [ VAR_22 ] [ j ] ; } VAR_6 [ j ] = y [ j ] + VAR_21 * sum ; } METHOD_13 ( VAR_10 + c [ k - 1 ] * VAR_21 , VAR_6 , VAR_5 [ k ] ) ; } for ( int j = 0 ; j < VAR_3 . length ; ++ j ) { double sum = b [ 0 ] * VAR_5 [ 0 ] [ j ] ; for ( int VAR_22 = 1 ; VAR_22 < VAR_4 ; ++ VAR_22 ) { sum += b [ VAR_22 ] * VAR_5 [ VAR_22 ] [ j ] ; } VAR_6 [ j ] = y [ j ] + VAR_21 * sum ; } error = METHOD_17 ( VAR_5 , y , VAR_6 , VAR_21 ) ; if ( error >= 1.0 ) { final double VAR_23 = TYPE_5 . min ( VAR_24 , TYPE_5 . METHOD_18 ( VAR_25 , VAR_26 * TYPE_5 . METHOD_19 ( error , VAR_27 ) ) ) ; VAR_11 = METHOD_20 ( VAR_21 * VAR_23 , VAR_2 , false ) ; } } VAR_8 . METHOD_10 ( VAR_10 + VAR_21 ) ; TYPE_6 . METHOD_21 ( VAR_6 , 0 , y , 0 , VAR_3 . length ) ; TYPE_6 . METHOD_21 ( VAR_5 [ VAR_4 - 1 ] , 0 , VAR_7 , 0 , VAR_3 . length ) ; VAR_10 = METHOD_22 ( VAR_8 , y , VAR_7 , t ) ; TYPE_6 . METHOD_21 ( y , 0 , VAR_6 , 0 , y . length ) ; if ( ! VAR_13 ) { VAR_8 . METHOD_10 ( VAR_10 ) ; if ( VAR_14 ) { TYPE_6 . METHOD_21 ( VAR_7 , 0 , VAR_5 [ 0 ] , 0 , VAR_3 . length ) ; } final double VAR_23 = TYPE_5 . min ( VAR_24 , TYPE_5 . METHOD_18 ( VAR_25 , VAR_26 * TYPE_5 . METHOD_19 ( error , VAR_27 ) ) ) ; final double VAR_28 = VAR_21 * VAR_23 ; final double VAR_29 = VAR_10 + VAR_28 ; final boolean VAR_30 = VAR_2 ? ( VAR_29 >= t ) : ( VAR_29 <= t ) ; VAR_11 = METHOD_20 ( VAR_28 , VAR_2 , VAR_30 ) ; final double VAR_31 = VAR_10 + VAR_11 ; final boolean VAR_32 = VAR_2 ? ( VAR_31 >= t ) : ( VAR_31 <= t ) ; if ( VAR_32 ) { VAR_11 = t - VAR_10 ; } } } while ( ! VAR_13 ) ; VAR_1 . METHOD_23 ( VAR_10 ) ; VAR_1 . METHOD_24 ( y ) ; METHOD_25 ( ) ; }