public double METHOD_1 ( double x , double VAR_1 , int VAR_2 ) { final double VAR_3 = FLOAT_1 ; double VAR_4 = METHOD_2 ( 0 , x ) ; if ( TYPE_1 . equals ( VAR_4 , 0.0 , VAR_3 ) ) { VAR_4 = VAR_3 ; } int n = 1 ; double VAR_5 = 0.0 ; double VAR_6 = 1.0 ; double VAR_7 = 1.0 ; double VAR_8 = VAR_4 ; double VAR_9 = VAR_4 ; while ( n < VAR_2 ) { final double a = METHOD_2 ( n , x ) ; final double b = METHOD_3 ( n , x ) ; double VAR_10 = a * VAR_4 + b * VAR_6 ; double VAR_11 = a * VAR_7 + b * VAR_5 ; if ( TYPE_2 . METHOD_4 ( VAR_10 ) || TYPE_2 . METHOD_4 ( VAR_11 ) ) { double VAR_12 = FLOAT_2 ; double VAR_13 = FLOAT_2 ; final int VAR_14 = INT_1 ; final double VAR_15 = TYPE_3 . METHOD_5 ( a , b ) ; if ( VAR_15 <= 0 ) { throw new TYPE_4 ( VAR_16 , x ) ; } for ( int i = 0 ; i < VAR_14 ; i ++ ) { VAR_13 = VAR_12 ; VAR_12 *= VAR_15 ; if ( a != 0.0 && a > b ) { VAR_10 = VAR_4 / VAR_13 + ( b / VAR_12 * VAR_6 ) ; VAR_11 = VAR_7 / VAR_13 + ( b / VAR_12 * VAR_5 ) ; } else if ( b != 0 ) { VAR_10 = ( a / VAR_12 * VAR_4 ) + VAR_6 / VAR_13 ; VAR_11 = ( a / VAR_12 * VAR_7 ) + VAR_5 / VAR_13 ; } if ( ! ( TYPE_2 . METHOD_4 ( VAR_10 ) || TYPE_2 . METHOD_4 ( VAR_11 ) ) ) { break ; } } } final double VAR_17 = VAR_10 / VAR_11 / VAR_8 ; VAR_9 = VAR_8 * VAR_17 ; if ( TYPE_2 . METHOD_4 ( VAR_9 ) ) { throw new TYPE_4 ( VAR_16 , x ) ; } if ( TYPE_2 . METHOD_6 ( VAR_9 ) ) { throw new TYPE_4 ( VAR_18 , x ) ; } if ( TYPE_3 . METHOD_7 ( VAR_17 - 1.0 ) < VAR_1 ) { break ; } VAR_5 = VAR_7 ; VAR_8 = VAR_10 / VAR_11 ; VAR_6 = VAR_4 ; VAR_4 = VAR_10 ; VAR_7 = VAR_11 ; n ++ ; } if ( n >= VAR_2 ) { throw new TYPE_5 ( VAR_19 , VAR_2 , x ) ; } return VAR_9 ; }