private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , final int VAR_2 ) { TYPE_3 < TYPE_1 > VAR_3 = new TYPE_4 < TYPE_1 > ( ) ; double VAR_4 = VAR_5 ; for ( int i = VAR_1 . METHOD_2 ( ) ; i < VAR_1 . METHOD_3 ( ) ; i ++ ) { final double VAR_6 = VAR_1 . METHOD_4 ( i , VAR_1 . METHOD_5 ( ) - 1 ) ; final double VAR_7 = VAR_1 . METHOD_4 ( i , VAR_2 ) ; if ( TYPE_5 . compareTo ( VAR_7 , FLOAT_1 , VAR_8 ) > 0 ) { final double VAR_9 = VAR_6 / VAR_7 ; final int VAR_10 = TYPE_6 . METHOD_6 ( VAR_9 , VAR_4 ) ; if ( VAR_10 == 0 ) { VAR_3 . add ( i ) ; } else if ( VAR_10 < 0 ) { VAR_4 = VAR_9 ; VAR_3 = new TYPE_4 < TYPE_1 > ( ) ; VAR_3 . add ( i ) ; } } } if ( VAR_3 . size ( ) == 0 ) { return null ; } else if ( VAR_3 . size ( ) > 1 ) { for ( TYPE_1 VAR_11 : VAR_3 ) { for ( int i = 0 ; i < VAR_1 . METHOD_7 ( ) ; i ++ ) { int VAR_12 = i + VAR_1 . METHOD_8 ( ) ; final double VAR_7 = VAR_1 . METHOD_4 ( VAR_11 , VAR_12 ) ; if ( TYPE_5 . equals ( VAR_7 , FLOAT_2 , VAR_8 ) && VAR_11 . equals ( VAR_1 . METHOD_9 ( VAR_12 ) ) ) { return VAR_11 ; } } } TYPE_1 VAR_13 = null ; int VAR_14 = VAR_1 . METHOD_5 ( ) ; for ( TYPE_1 VAR_11 : VAR_3 ) { int i = VAR_1 . METHOD_2 ( ) ; for ( ; i < VAR_1 . METHOD_5 ( ) - 1 && VAR_13 != VAR_11 ; i ++ ) { if ( VAR_11 == VAR_1 . METHOD_9 ( i ) ) { if ( i < VAR_14 ) { VAR_14 = i ; VAR_13 = VAR_11 ; } } } } return VAR_13 ; } return VAR_3 . get ( 0 ) ; }