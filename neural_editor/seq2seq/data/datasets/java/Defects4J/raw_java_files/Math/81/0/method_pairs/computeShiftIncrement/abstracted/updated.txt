private void METHOD_1 ( final int start , final int end , final int VAR_1 ) { final double VAR_2 = FLOAT_1 ; final double VAR_3 = FLOAT_2 ; final double VAR_4 = FLOAT_3 ; if ( VAR_5 <= 0.0 ) { VAR_6 = - VAR_5 ; VAR_7 = - 1 ; return ; } int VAR_8 = INT_1 * end + VAR_9 - 1 ; switch ( VAR_1 ) { case 0 : if ( VAR_5 == VAR_10 || VAR_5 == VAR_11 ) { double VAR_12 = TYPE_1 . METHOD_2 ( VAR_13 [ VAR_8 - INT_2 ] ) * TYPE_1 . METHOD_2 ( VAR_13 [ VAR_8 - INT_3 ] ) ; double VAR_14 = TYPE_1 . METHOD_2 ( VAR_13 [ VAR_8 - INT_4 ] ) * TYPE_1 . METHOD_2 ( VAR_13 [ VAR_8 - INT_5 ] ) ; double VAR_15 = VAR_13 [ VAR_8 - INT_4 ] + VAR_13 [ VAR_8 - INT_3 ] ; if ( VAR_5 == VAR_10 && VAR_16 == VAR_11 ) { final double VAR_17 = VAR_18 - VAR_15 - VAR_18 * FLOAT_4 ; final double VAR_19 = VAR_15 - VAR_10 - ( ( VAR_17 > 0.0 && VAR_17 > VAR_14 ) ? ( VAR_14 / VAR_17 ) * VAR_14 : ( VAR_12 + VAR_14 ) ) ; if ( VAR_19 > 0.0 && VAR_19 > VAR_12 ) { VAR_6 = TYPE_1 . METHOD_3 ( VAR_10 - ( VAR_12 / VAR_19 ) * VAR_12 , FLOAT_5 * VAR_5 ) ; VAR_7 = - INT_6 ; } else { double VAR_20 = 0.0 ; if ( VAR_10 > VAR_12 ) { VAR_20 = VAR_10 - VAR_12 ; } if ( VAR_15 > ( VAR_12 + VAR_14 ) ) { VAR_20 = TYPE_1 . min ( VAR_20 , VAR_15 - ( VAR_12 + VAR_14 ) ) ; } VAR_6 = TYPE_1 . METHOD_3 ( VAR_20 , FLOAT_6 * VAR_5 ) ; VAR_7 = - INT_2 ; } } else { VAR_7 = - INT_1 ; double VAR_20 = FLOAT_4 * VAR_5 ; double VAR_21 ; int VAR_22 ; if ( VAR_5 == VAR_10 ) { VAR_21 = VAR_10 ; VAR_15 = 0.0 ; if ( VAR_13 [ VAR_8 - INT_3 ] > VAR_13 [ VAR_8 - INT_4 ] ) { return ; } VAR_14 = VAR_13 [ VAR_8 - INT_3 ] / VAR_13 [ VAR_8 - INT_4 ] ; VAR_22 = VAR_8 - INT_5 ; } else { VAR_22 = VAR_8 - INT_6 * VAR_9 ; VAR_14 = VAR_13 [ VAR_22 - INT_6 ] ; VAR_21 = VAR_11 ; if ( VAR_13 [ VAR_22 - INT_1 ] > VAR_13 [ VAR_22 - INT_6 ] ) { return ; } VAR_15 = VAR_13 [ VAR_22 - INT_1 ] / VAR_13 [ VAR_22 - INT_6 ] ; if ( VAR_13 [ VAR_8 - INT_5 ] > VAR_13 [ VAR_8 - INT_7 ] ) { return ; } VAR_14 = VAR_13 [ VAR_8 - INT_5 ] / VAR_13 [ VAR_8 - INT_7 ] ; VAR_22 = VAR_8 - INT_8 ; } VAR_15 = VAR_15 + VAR_14 ; for ( int VAR_23 = VAR_22 ; VAR_23 >= INT_1 * start + INT_6 + VAR_9 ; VAR_23 -= INT_1 ) { if ( VAR_14 == 0.0 ) { break ; } VAR_12 = VAR_14 ; if ( VAR_13 [ VAR_23 ] > VAR_13 [ VAR_23 - INT_6 ] ) { return ; } VAR_14 = VAR_14 * ( VAR_13 [ VAR_23 ] / VAR_13 [ VAR_23 - INT_6 ] ) ; VAR_15 = VAR_15 + VAR_14 ; if ( INT_9 * TYPE_1 . METHOD_3 ( VAR_14 , VAR_12 ) < VAR_15 || VAR_2 < VAR_15 ) { break ; } } VAR_15 = VAR_4 * VAR_15 ; if ( VAR_15 < VAR_2 ) { VAR_20 = VAR_21 * ( 1 - TYPE_1 . METHOD_2 ( VAR_15 ) ) / ( 1 + VAR_15 ) ; } VAR_6 = VAR_20 ; } } else if ( VAR_5 == VAR_24 ) { VAR_7 = - INT_3 ; double VAR_20 = FLOAT_4 * VAR_5 ; final int VAR_22 = VAR_8 - INT_6 * VAR_9 ; double VAR_12 = VAR_13 [ VAR_22 - INT_6 ] ; double VAR_14 = VAR_13 [ VAR_22 - INT_10 ] ; final double VAR_21 = VAR_24 ; if ( VAR_13 [ VAR_22 - INT_11 ] > VAR_14 || VAR_13 [ VAR_22 - INT_1 ] > VAR_12 ) { return ; } double VAR_15 = ( VAR_13 [ VAR_22 - INT_11 ] / VAR_14 ) * ( 1 + VAR_13 [ VAR_22 - INT_1 ] / VAR_12 ) ; if ( end - start > INT_2 ) { VAR_14 = VAR_13 [ VAR_8 - INT_8 ] / VAR_13 [ VAR_8 - INT_12 ] ; VAR_15 = VAR_15 + VAR_14 ; for ( int VAR_23 = VAR_8 - INT_13 ; VAR_23 >= INT_1 * start + INT_6 + VAR_9 ; VAR_23 -= INT_1 ) { if ( VAR_14 == 0.0 ) { break ; } VAR_12 = VAR_14 ; if ( VAR_13 [ VAR_23 ] > VAR_13 [ VAR_23 - INT_6 ] ) { return ; } VAR_14 = VAR_14 * ( VAR_13 [ VAR_23 ] / VAR_13 [ VAR_23 - INT_6 ] ) ; VAR_15 = VAR_15 + VAR_14 ; if ( INT_9 * TYPE_1 . METHOD_3 ( VAR_14 , VAR_12 ) < VAR_15 || VAR_2 < VAR_15 ) { break ; } } VAR_15 = VAR_4 * VAR_15 ; } if ( VAR_15 < VAR_2 ) { VAR_6 = VAR_21 * ( 1 - TYPE_1 . METHOD_2 ( VAR_15 ) ) / ( 1 + VAR_15 ) ; } else { VAR_6 = VAR_20 ; } } else { if ( VAR_7 == - INT_10 ) { VAR_25 += FLOAT_6 * ( 1 - VAR_25 ) ; } else if ( VAR_7 == - INT_14 ) { VAR_25 = FLOAT_4 * FLOAT_6 ; } else { VAR_25 = FLOAT_4 ; } VAR_6 = VAR_25 * VAR_5 ; VAR_7 = - INT_10 ; } break ; case 1 : if ( VAR_16 == VAR_11 && VAR_18 == VAR_24 ) { VAR_7 = - INT_4 ; double VAR_20 = FLOAT_6 * VAR_16 ; if ( VAR_13 [ VAR_8 - INT_3 ] > VAR_13 [ VAR_8 - INT_4 ] ) { return ; } double VAR_12 = VAR_13 [ VAR_8 - INT_3 ] / VAR_13 [ VAR_8 - INT_4 ] ; double VAR_14 = VAR_12 ; if ( VAR_14 != 0.0 ) { for ( int VAR_23 = INT_1 * end - INT_15 + VAR_9 ; VAR_23 >= INT_1 * start + INT_6 + VAR_9 ; VAR_23 -= INT_1 ) { final double VAR_26 = VAR_12 ; if ( VAR_13 [ VAR_23 ] > VAR_13 [ VAR_23 - INT_6 ] ) { return ; } VAR_12 = VAR_12 * ( VAR_13 [ VAR_23 ] / VAR_13 [ VAR_23 - INT_6 ] ) ; VAR_14 = VAR_14 + VAR_12 ; if ( INT_9 * TYPE_1 . METHOD_3 ( VAR_12 , VAR_26 ) < VAR_14 ) { break ; } } } VAR_14 = TYPE_1 . METHOD_2 ( VAR_4 * VAR_14 ) ; final double VAR_15 = VAR_16 / ( 1 + VAR_14 * VAR_14 ) ; final double VAR_17 = FLOAT_5 * VAR_18 - VAR_15 ; if ( VAR_17 > 0.0 && VAR_17 > VAR_14 * VAR_15 ) { VAR_6 = TYPE_1 . METHOD_3 ( VAR_20 , VAR_15 * ( 1 - VAR_3 * VAR_15 * ( VAR_14 / VAR_17 ) * VAR_14 ) ) ; } else { VAR_6 = TYPE_1 . METHOD_3 ( VAR_20 , VAR_15 * ( 1 - VAR_3 * VAR_14 ) ) ; VAR_7 = - INT_11 ; } } else { VAR_6 = FLOAT_4 * VAR_16 ; if ( VAR_16 == VAR_11 ) { VAR_6 = FLOAT_5 * VAR_16 ; } VAR_7 = - INT_5 ; } break ; case INT_6 : if ( VAR_18 == VAR_24 && INT_6 * VAR_13 [ VAR_8 - INT_3 ] < VAR_13 [ VAR_8 - INT_4 ] ) { VAR_7 = - INT_15 ; final double VAR_20 = FLOAT_6 * VAR_18 ; if ( VAR_13 [ VAR_8 - INT_3 ] > VAR_13 [ VAR_8 - INT_4 ] ) { return ; } double VAR_12 = VAR_13 [ VAR_8 - INT_3 ] / VAR_13 [ VAR_8 - INT_4 ] ; double VAR_14 = VAR_12 ; if ( VAR_14 != 0.0 ) { for ( int VAR_23 = INT_1 * end - INT_5 + VAR_9 ; VAR_23 >= INT_1 * start + INT_6 + VAR_9 ; VAR_23 -= INT_1 ) { if ( VAR_13 [ VAR_23 ] > VAR_13 [ VAR_23 - INT_6 ] ) { return ; } VAR_12 *= VAR_13 [ VAR_23 ] / VAR_13 [ VAR_23 - INT_6 ] ; VAR_14 += VAR_12 ; if ( INT_9 * VAR_12 < VAR_14 ) { break ; } } } VAR_14 = TYPE_1 . METHOD_2 ( VAR_4 * VAR_14 ) ; final double VAR_15 = VAR_18 / ( 1 + VAR_14 * VAR_14 ) ; final double VAR_17 = VAR_13 [ VAR_8 - INT_4 ] + VAR_13 [ VAR_8 - INT_5 ] - TYPE_1 . METHOD_2 ( VAR_13 [ VAR_8 - INT_7 ] ) * TYPE_1 . METHOD_2 ( VAR_13 [ VAR_8 - INT_5 ] ) - VAR_15 ; if ( VAR_17 > 0.0 && VAR_17 > VAR_14 * VAR_15 ) { VAR_6 = TYPE_1 . METHOD_3 ( VAR_20 , VAR_15 * ( 1 - VAR_3 * VAR_15 * ( VAR_14 / VAR_17 ) * VAR_14 ) ) ; } else { VAR_6 = TYPE_1 . METHOD_3 ( VAR_20 , VAR_15 * ( 1 - VAR_3 * VAR_14 ) ) ; } } else { VAR_6 = FLOAT_4 * VAR_18 ; VAR_7 = - INT_7 ; } break ; default : VAR_6 = 0.0 ; VAR_7 = - INT_16 ; } }