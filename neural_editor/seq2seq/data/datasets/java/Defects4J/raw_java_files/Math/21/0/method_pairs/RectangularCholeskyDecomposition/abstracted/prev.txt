public VAR_1 ( TYPE_1 VAR_2 , double VAR_3 ) throws TYPE_2 { final int VAR_4 = VAR_2 . METHOD_1 ( ) ; final double [ ] [ ] c = VAR_2 . getData ( ) ; final double [ ] [ ] b = new double [ VAR_4 ] [ VAR_4 ] ; int [ ] VAR_5 = new int [ VAR_4 ] ; int [ ] index = new int [ VAR_4 ] ; for ( int i = 0 ; i < VAR_4 ; ++ i ) { index [ i ] = i ; } int VAR_6 = 0 ; for ( boolean VAR_7 = true ; VAR_7 ; ) { VAR_5 [ VAR_6 ] = VAR_6 ; for ( int i = VAR_6 + 1 ; i < VAR_4 ; ++ i ) { int VAR_8 = index [ i ] ; int VAR_9 = index [ VAR_5 [ i ] ] ; if ( c [ VAR_8 ] [ VAR_8 ] > c [ VAR_9 ] [ VAR_9 ] ) { VAR_5 [ VAR_6 ] = i ; } } if ( VAR_5 [ VAR_6 ] != VAR_6 ) { int tmp = index [ VAR_6 ] ; index [ VAR_6 ] = index [ VAR_5 [ VAR_6 ] ] ; index [ VAR_5 [ VAR_6 ] ] = tmp ; } int VAR_10 = index [ VAR_6 ] ; if ( c [ VAR_10 ] [ VAR_10 ] < VAR_3 ) { if ( VAR_6 == 0 ) { throw new TYPE_2 ( c [ VAR_10 ] [ VAR_10 ] , VAR_10 , VAR_3 ) ; } for ( int i = VAR_6 ; i < VAR_4 ; ++ i ) { if ( c [ index [ i ] ] [ index [ i ] ] < - VAR_3 ) { throw new TYPE_2 ( c [ index [ i ] ] [ index [ i ] ] , i , VAR_3 ) ; } } ++ VAR_6 ; VAR_7 = false ; } else { final double VAR_11 = TYPE_3 . METHOD_2 ( c [ VAR_10 ] [ VAR_10 ] ) ; b [ VAR_6 ] [ VAR_6 ] = VAR_11 ; final double VAR_12 = 1 / VAR_11 ; for ( int i = VAR_6 + 1 ; i < VAR_4 ; ++ i ) { final int VAR_8 = index [ i ] ; final double VAR_13 = VAR_12 * c [ VAR_8 ] [ VAR_10 ] ; b [ i ] [ VAR_6 ] = VAR_13 ; c [ VAR_8 ] [ VAR_8 ] -= VAR_13 * VAR_13 ; for ( int j = VAR_6 + 1 ; j < i ; ++ j ) { final int VAR_14 = index [ j ] ; final double f = c [ VAR_8 ] [ VAR_14 ] - VAR_13 * b [ j ] [ VAR_6 ] ; c [ VAR_8 ] [ VAR_14 ] = f ; c [ VAR_14 ] [ VAR_8 ] = f ; } } VAR_7 = ++ VAR_6 < VAR_4 ; } } VAR_15 = VAR_6 ; VAR_16 = TYPE_4 . METHOD_3 ( VAR_4 , VAR_6 ) ; for ( int i = 0 ; i < VAR_4 ; ++ i ) { for ( int j = 0 ; j < VAR_6 ; ++ j ) { VAR_16 . METHOD_4 ( index [ i ] , j , b [ i ] [ j ] ) ; } } }