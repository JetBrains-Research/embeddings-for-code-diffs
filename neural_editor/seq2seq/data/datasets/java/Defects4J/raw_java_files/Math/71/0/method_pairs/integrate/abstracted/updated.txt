public double METHOD_1 ( final TYPE_1 VAR_1 , final double VAR_2 , final double [ ] VAR_3 , final double t , final double [ ] y ) throws TYPE_2 , TYPE_3 { METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , t , y ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( ) ; final boolean VAR_4 = t > VAR_2 ; final int VAR_5 = c . length + 1 ; if ( y != VAR_3 ) { TYPE_4 . METHOD_5 ( VAR_3 , 0 , y , 0 , VAR_3 . length ) ; } final double [ ] [ ] VAR_6 = new double [ VAR_5 ] [ VAR_3 . length ] ; final double [ ] VAR_7 = new double [ VAR_3 . length ] ; TYPE_5 VAR_8 ; if ( METHOD_6 ( ) || ( ! VAR_9 . isEmpty ( ) ) ) { final TYPE_6 VAR_10 = ( TYPE_6 ) VAR_11 . METHOD_7 ( ) ; VAR_10 . METHOD_8 ( this , VAR_7 , VAR_6 , VAR_4 ) ; VAR_8 = VAR_10 ; } else { VAR_8 = new TYPE_7 ( VAR_7 , VAR_6 [ VAR_5 - 1 ] , VAR_4 ) ; } VAR_8 . METHOD_9 ( VAR_2 ) ; VAR_12 = VAR_2 ; double VAR_13 = 0 ; boolean VAR_14 = true ; for ( TYPE_8 VAR_15 : VAR_16 ) { VAR_15 . METHOD_10 ( ) ; } TYPE_9 VAR_17 = METHOD_11 ( VAR_2 , t , VAR_9 ) ; boolean VAR_18 = false ; while ( ! VAR_18 ) { VAR_8 . METHOD_12 ( ) ; double error = 0 ; for ( boolean VAR_19 = true ; VAR_19 ; ) { if ( VAR_14 || ! VAR_20 ) { METHOD_13 ( VAR_12 , y , VAR_6 [ 0 ] ) ; } if ( VAR_14 ) { final double [ ] VAR_21 = new double [ VAR_3 . length ] ; if ( VAR_22 == null ) { for ( int i = 0 ; i < VAR_21 . length ; ++ i ) { VAR_21 [ i ] = VAR_23 + VAR_24 * TYPE_10 . METHOD_14 ( y [ i ] ) ; } } else { for ( int i = 0 ; i < VAR_21 . length ; ++ i ) { VAR_21 [ i ] = VAR_22 [ i ] + VAR_25 [ i ] * TYPE_10 . METHOD_14 ( y [ i ] ) ; } } VAR_13 = METHOD_15 ( VAR_1 , VAR_4 , METHOD_16 ( ) , VAR_21 , VAR_12 , y , VAR_6 [ 0 ] , VAR_7 , VAR_6 [ 1 ] ) ; VAR_14 = false ; } VAR_26 = VAR_13 ; for ( int k = 1 ; k < VAR_5 ; ++ k ) { for ( int j = 0 ; j < VAR_3 . length ; ++ j ) { double sum = a [ k - 1 ] [ 0 ] * VAR_6 [ 0 ] [ j ] ; for ( int VAR_27 = 1 ; VAR_27 < k ; ++ VAR_27 ) { sum += a [ k - 1 ] [ VAR_27 ] * VAR_6 [ VAR_27 ] [ j ] ; } VAR_7 [ j ] = y [ j ] + VAR_26 * sum ; } METHOD_13 ( VAR_12 + c [ k - 1 ] * VAR_26 , VAR_7 , VAR_6 [ k ] ) ; } for ( int j = 0 ; j < VAR_3 . length ; ++ j ) { double sum = b [ 0 ] * VAR_6 [ 0 ] [ j ] ; for ( int VAR_27 = 1 ; VAR_27 < VAR_5 ; ++ VAR_27 ) { sum += b [ VAR_27 ] * VAR_6 [ VAR_27 ] [ j ] ; } VAR_7 [ j ] = y [ j ] + VAR_26 * sum ; } error = METHOD_17 ( VAR_6 , y , VAR_7 , VAR_26 ) ; if ( error <= 1.0 ) { VAR_8 . METHOD_9 ( VAR_12 + VAR_26 ) ; if ( VAR_17 . METHOD_18 ( VAR_8 ) ) { final double VAR_28 = VAR_17 . METHOD_19 ( ) - VAR_12 ; if ( TYPE_10 . METHOD_14 ( VAR_28 ) <= TYPE_10 . METHOD_20 ( VAR_12 ) ) { VAR_8 . METHOD_9 ( VAR_12 ) ; TYPE_4 . METHOD_5 ( y , 0 , VAR_7 , 0 , VAR_3 . length ) ; VAR_13 = 0 ; VAR_26 = 0 ; VAR_19 = false ; } else { VAR_13 = VAR_28 ; } } else { VAR_19 = false ; } } else { final double VAR_29 = TYPE_10 . min ( VAR_30 , TYPE_10 . METHOD_21 ( VAR_31 , VAR_32 * TYPE_10 . METHOD_22 ( error , VAR_33 ) ) ) ; VAR_13 = METHOD_23 ( VAR_26 * VAR_29 , VAR_4 , false ) ; } } final double VAR_34 = VAR_12 + VAR_26 ; TYPE_4 . METHOD_5 ( VAR_7 , 0 , y , 0 , VAR_3 . length ) ; VAR_17 . METHOD_24 ( VAR_34 , y ) ; VAR_18 = VAR_17 . METHOD_25 ( ) ; VAR_8 . METHOD_9 ( VAR_34 ) ; for ( TYPE_8 VAR_15 : VAR_16 ) { VAR_15 . METHOD_26 ( VAR_8 , VAR_18 ) ; } VAR_12 = VAR_34 ; if ( VAR_20 ) { TYPE_4 . METHOD_5 ( VAR_6 [ VAR_5 - 1 ] , 0 , VAR_6 [ 0 ] , 0 , VAR_3 . length ) ; } if ( VAR_17 . METHOD_10 ( VAR_12 , y ) && ! VAR_18 ) { METHOD_13 ( VAR_12 , y , VAR_6 [ 0 ] ) ; } if ( ! VAR_18 ) { VAR_26 = METHOD_23 ( VAR_26 , VAR_4 , true ) ; final double VAR_29 = TYPE_10 . min ( VAR_30 , TYPE_10 . METHOD_21 ( VAR_31 , VAR_32 * TYPE_10 . METHOD_22 ( error , VAR_33 ) ) ) ; final double VAR_35 = VAR_26 * VAR_29 ; final double VAR_36 = VAR_12 + VAR_35 ; final boolean VAR_37 = VAR_4 ? ( VAR_36 >= t ) : ( VAR_36 <= t ) ; VAR_13 = METHOD_23 ( VAR_35 , VAR_4 , VAR_37 ) ; } } final double VAR_38 = VAR_12 ; METHOD_27 ( ) ; return VAR_38 ; }