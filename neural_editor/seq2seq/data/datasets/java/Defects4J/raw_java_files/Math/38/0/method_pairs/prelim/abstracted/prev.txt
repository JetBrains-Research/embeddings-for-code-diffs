private void METHOD_1 ( double [ ] VAR_1 , double [ ] VAR_2 ) { METHOD_2 ( ) ; final int n = VAR_3 . METHOD_3 ( ) ; final int VAR_4 = VAR_5 ; final int VAR_6 = VAR_7 . METHOD_4 ( ) ; final double VAR_8 = VAR_9 * VAR_9 ; final double VAR_10 = FLOAT_1 / VAR_8 ; final int VAR_11 = n + 1 ; for ( int j = 0 ; j < n ; j ++ ) { VAR_12 . METHOD_5 ( j , VAR_3 . METHOD_6 ( j ) ) ; for ( int k = 0 ; k < VAR_4 ; k ++ ) { VAR_13 . METHOD_5 ( k , j , VAR_14 ) ; } for ( int i = 0 ; i < VAR_6 ; i ++ ) { VAR_7 . METHOD_5 ( i , j , VAR_14 ) ; } } for ( int i = 0 , VAR_15 = n * VAR_11 / INT_1 ; i < VAR_15 ; i ++ ) { VAR_16 . METHOD_5 ( i , VAR_14 ) ; } for ( int k = 0 ; k < VAR_4 ; k ++ ) { VAR_17 . METHOD_5 ( k , VAR_14 ) ; for ( int j = 0 , VAR_15 = VAR_4 - VAR_11 ; j < VAR_15 ; j ++ ) { VAR_18 . METHOD_5 ( k , j , VAR_14 ) ; } } int VAR_19 = 0 ; int VAR_20 = 0 ; double VAR_21 = VAR_22 ; do { final int VAR_23 = METHOD_7 ( ) ; final int VAR_24 = VAR_23 - n ; final int VAR_25 = VAR_23 - 1 ; final int VAR_26 = VAR_24 - 1 ; double VAR_27 = 0 ; double VAR_28 = 0 ; if ( VAR_23 <= INT_1 * n ) { if ( VAR_23 >= 1 && VAR_23 <= n ) { VAR_27 = VAR_9 ; if ( VAR_29 . METHOD_6 ( VAR_25 ) == VAR_14 ) { VAR_27 = - VAR_27 ; throw new TYPE_1 ( ) ; } VAR_13 . METHOD_5 ( VAR_23 , VAR_25 , VAR_27 ) ; } else if ( VAR_23 > n ) { VAR_27 = VAR_13 . METHOD_6 ( VAR_24 , VAR_26 ) ; VAR_28 = - VAR_9 ; if ( VAR_30 . METHOD_6 ( VAR_26 ) == VAR_14 ) { VAR_28 = TYPE_2 . min ( VAR_31 * VAR_9 , VAR_29 . METHOD_6 ( VAR_26 ) ) ; throw new TYPE_1 ( ) ; } if ( VAR_29 . METHOD_6 ( VAR_26 ) == VAR_14 ) { VAR_28 = TYPE_2 . METHOD_8 ( - VAR_31 * VAR_9 , VAR_30 . METHOD_6 ( VAR_26 ) ) ; throw new TYPE_1 ( ) ; } VAR_13 . METHOD_5 ( VAR_23 , VAR_26 , VAR_28 ) ; } } else { final int VAR_32 = ( VAR_23 - VAR_11 ) / n ; VAR_20 = VAR_23 - VAR_32 * n - n ; VAR_19 = VAR_20 + VAR_32 ; if ( VAR_19 > n ) { final int VAR_33 = VAR_20 ; VAR_20 = VAR_19 - n ; VAR_19 = VAR_33 ; throw new TYPE_1 ( ) ; } final int VAR_34 = VAR_19 ; final int VAR_35 = VAR_20 ; VAR_13 . METHOD_5 ( VAR_23 , VAR_34 , VAR_13 . METHOD_6 ( VAR_19 , VAR_34 ) ) ; VAR_13 . METHOD_5 ( VAR_23 , VAR_35 , VAR_13 . METHOD_6 ( VAR_20 , VAR_35 ) ) ; } for ( int j = 0 ; j < n ; j ++ ) { VAR_3 . METHOD_5 ( j , TYPE_2 . min ( TYPE_2 . METHOD_8 ( VAR_1 [ j ] , VAR_12 . METHOD_6 ( j ) + VAR_13 . METHOD_6 ( VAR_23 , j ) ) , VAR_2 [ j ] ) ) ; if ( VAR_13 . METHOD_6 ( VAR_23 , j ) == VAR_30 . METHOD_6 ( j ) ) { VAR_3 . METHOD_5 ( j , VAR_1 [ j ] ) ; } if ( VAR_13 . METHOD_6 ( VAR_23 , j ) == VAR_29 . METHOD_6 ( j ) ) { VAR_3 . METHOD_5 ( j , VAR_2 [ j ] ) ; } } final double VAR_36 = METHOD_9 ( VAR_3 . METHOD_10 ( ) ) ; final double f = VAR_37 ? VAR_36 : - VAR_36 ; final int VAR_38 = METHOD_7 ( ) ; VAR_39 . METHOD_5 ( VAR_23 , f ) ; if ( VAR_38 == 1 ) { VAR_21 = f ; VAR_40 = 0 ; } else if ( f < VAR_39 . METHOD_6 ( VAR_40 ) ) { VAR_40 = VAR_23 ; } if ( VAR_38 <= INT_1 * n + 1 ) { if ( VAR_38 >= INT_1 && VAR_38 <= n + 1 ) { VAR_41 . METHOD_5 ( VAR_25 , ( f - VAR_21 ) / VAR_27 ) ; if ( VAR_4 < VAR_38 + n ) { final double VAR_42 = VAR_43 / VAR_27 ; VAR_7 . METHOD_5 ( 0 , VAR_25 , - VAR_42 ) ; VAR_7 . METHOD_5 ( VAR_23 , VAR_25 , VAR_42 ) ; VAR_7 . METHOD_5 ( VAR_4 + VAR_25 , VAR_25 , - VAR_44 * VAR_8 ) ; throw new TYPE_1 ( ) ; } } else if ( VAR_38 >= n + INT_1 ) { final int VAR_45 = VAR_24 * ( VAR_24 + 1 ) / INT_1 - 1 ; final double tmp = ( f - VAR_21 ) / VAR_28 ; final double diff = VAR_28 - VAR_27 ; VAR_16 . METHOD_5 ( VAR_45 , VAR_31 * ( tmp - VAR_41 . METHOD_6 ( VAR_26 ) ) / diff ) ; VAR_41 . METHOD_5 ( VAR_26 , ( VAR_41 . METHOD_6 ( VAR_26 ) * VAR_28 - tmp * VAR_27 ) / diff ) ; if ( VAR_27 * VAR_28 < VAR_14 ) { if ( f < VAR_39 . METHOD_6 ( VAR_23 - n ) ) { VAR_39 . METHOD_5 ( VAR_23 , VAR_39 . METHOD_6 ( VAR_23 - n ) ) ; VAR_39 . METHOD_5 ( VAR_23 - n , f ) ; if ( VAR_40 == VAR_23 ) { VAR_40 = VAR_23 - n ; } VAR_13 . METHOD_5 ( VAR_23 - n , VAR_26 , VAR_28 ) ; VAR_13 . METHOD_5 ( VAR_23 , VAR_26 , VAR_27 ) ; } } VAR_7 . METHOD_5 ( 0 , VAR_26 , - ( VAR_27 + VAR_28 ) / ( VAR_27 * VAR_28 ) ) ; VAR_7 . METHOD_5 ( VAR_23 , VAR_26 , - VAR_44 / VAR_13 . METHOD_6 ( VAR_23 - n , VAR_26 ) ) ; VAR_7 . METHOD_5 ( VAR_23 - n , VAR_26 , - VAR_7 . METHOD_6 ( 0 , VAR_26 ) - VAR_7 . METHOD_6 ( VAR_23 , VAR_26 ) ) ; VAR_18 . METHOD_5 ( 0 , VAR_26 , TYPE_2 . METHOD_11 ( VAR_31 ) / ( VAR_27 * VAR_28 ) ) ; VAR_18 . METHOD_5 ( VAR_23 , VAR_26 , TYPE_2 . METHOD_11 ( VAR_44 ) / VAR_8 ) ; VAR_18 . METHOD_5 ( VAR_23 - n , VAR_26 , - VAR_18 . METHOD_6 ( 0 , VAR_26 ) - VAR_18 . METHOD_6 ( VAR_23 , VAR_26 ) ) ; } } else { VAR_18 . METHOD_5 ( 0 , VAR_26 , VAR_10 ) ; VAR_18 . METHOD_5 ( VAR_23 , VAR_26 , VAR_10 ) ; VAR_18 . METHOD_5 ( VAR_19 , VAR_26 , - VAR_10 ) ; VAR_18 . METHOD_5 ( VAR_20 , VAR_26 , - VAR_10 ) ; final int VAR_45 = VAR_19 * ( VAR_19 - 1 ) / INT_1 + VAR_20 - 1 ; final double tmp = VAR_13 . METHOD_6 ( VAR_23 , VAR_19 - 1 ) * VAR_13 . METHOD_6 ( VAR_23 , VAR_20 - 1 ) ; VAR_16 . METHOD_5 ( VAR_45 , ( VAR_21 - VAR_39 . METHOD_6 ( VAR_19 ) - VAR_39 . METHOD_6 ( VAR_20 ) + f ) / tmp ) ; throw new TYPE_1 ( ) ; } } while ( METHOD_7 ( ) < VAR_4 ) ; }