private VAR_1 ( double value , double VAR_2 , int VAR_3 , int VAR_4 ) throws TYPE_1 { long VAR_5 = VAR_6 ; double VAR_7 = value ; long VAR_8 = ( long ) TYPE_2 . METHOD_1 ( VAR_7 ) ; if ( TYPE_2 . METHOD_2 ( VAR_8 ) > VAR_5 ) { throw new TYPE_1 ( value , VAR_8 , INT_1 ) ; } if ( TYPE_2 . METHOD_2 ( VAR_8 - value ) < VAR_2 ) { this . VAR_9 = ( int ) VAR_8 ; this . VAR_10 = 1 ; return ; } long VAR_11 = 1 ; long VAR_12 = 0 ; long VAR_13 = VAR_8 ; long VAR_14 = 1 ; long VAR_15 = 0 ; long VAR_16 = 1 ; int n = 0 ; boolean VAR_17 = false ; do { ++ n ; double VAR_18 = 1.0 / ( VAR_7 - VAR_8 ) ; long VAR_19 = ( long ) TYPE_2 . METHOD_1 ( VAR_18 ) ; VAR_15 = ( VAR_19 * VAR_13 ) + VAR_11 ; VAR_16 = ( VAR_19 * VAR_14 ) + VAR_12 ; if ( ( TYPE_2 . METHOD_2 ( VAR_15 ) > VAR_5 ) || ( TYPE_2 . METHOD_2 ( VAR_16 ) > VAR_5 ) ) { if ( VAR_2 == 0.0 && TYPE_2 . METHOD_2 ( VAR_14 ) < VAR_3 ) { break ; } throw new TYPE_1 ( value , VAR_15 , VAR_16 ) ; } double VAR_20 = ( double ) VAR_15 / ( double ) VAR_16 ; if ( n < VAR_4 && TYPE_2 . METHOD_2 ( VAR_20 - value ) > VAR_2 && VAR_16 < VAR_3 ) { VAR_11 = VAR_13 ; VAR_13 = VAR_15 ; VAR_12 = VAR_14 ; VAR_14 = VAR_16 ; VAR_8 = VAR_19 ; VAR_7 = VAR_18 ; } else { VAR_17 = true ; } } while ( ! VAR_17 ) ; if ( n >= VAR_4 ) { throw new TYPE_1 ( value , VAR_4 ) ; } if ( VAR_16 < VAR_3 ) { this . VAR_9 = ( int ) VAR_15 ; this . VAR_10 = ( int ) VAR_16 ; } else { this . VAR_9 = ( int ) VAR_13 ; this . VAR_10 = ( int ) VAR_14 ; } }