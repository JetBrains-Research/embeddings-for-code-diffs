protected TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; final TYPE_2 VAR_1 = METHOD_3 ( ) ; final double [ ] VAR_2 = METHOD_4 ( ) ; final int n = VAR_2 . length ; final double [ ] [ ] VAR_3 = new double [ n ] [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { VAR_3 [ i ] [ i ] = 1 ; } final TYPE_3 < TYPE_1 > VAR_4 = METHOD_5 ( ) ; double [ ] x = VAR_2 ; double VAR_5 = METHOD_6 ( x ) ; double [ ] VAR_6 = x . METHOD_7 ( ) ; int VAR_7 = 0 ; while ( true ) { ++ VAR_7 ; double VAR_8 = VAR_5 ; double VAR_9 = 0 ; double VAR_10 = 0 ; int VAR_11 = 0 ; double VAR_12 = 0 ; for ( int i = 0 ; i < n ; i ++ ) { final double [ ] VAR_13 = TYPE_4 . METHOD_8 ( VAR_3 [ i ] ) ; VAR_9 = VAR_5 ; final TYPE_5 VAR_14 = line . METHOD_9 ( x , VAR_13 ) ; VAR_5 = VAR_14 . getValue ( ) ; VAR_12 = VAR_14 . METHOD_10 ( ) ; final double [ ] [ ] result = METHOD_11 ( x , VAR_13 , VAR_12 ) ; x = result [ 0 ] ; if ( ( VAR_9 - VAR_5 ) > VAR_10 ) { VAR_10 = VAR_9 - VAR_5 ; VAR_11 = i ; } } boolean VAR_15 = INT_1 * ( VAR_8 - VAR_5 ) <= ( VAR_16 * ( TYPE_6 . METHOD_12 ( VAR_8 ) + TYPE_6 . METHOD_12 ( VAR_5 ) ) + VAR_17 ) ; final TYPE_1 VAR_18 = new TYPE_1 ( VAR_6 , VAR_8 ) ; final TYPE_1 VAR_19 = new TYPE_1 ( x , VAR_5 ) ; if ( ! VAR_15 ) { if ( VAR_4 != null ) { VAR_15 = VAR_4 . METHOD_13 ( VAR_7 , VAR_18 , VAR_19 ) ; } } if ( VAR_15 ) { if ( VAR_1 == VAR_20 ) { return ( VAR_5 < VAR_8 ) ? VAR_19 : VAR_18 ; } else { return ( VAR_5 > VAR_8 ) ? VAR_19 : VAR_18 ; } } final double [ ] VAR_13 = new double [ n ] ; final double [ ] VAR_21 = new double [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { VAR_13 [ i ] = x [ i ] - VAR_6 [ i ] ; VAR_21 [ i ] = INT_1 * x [ i ] - VAR_6 [ i ] ; } VAR_6 = x . METHOD_7 ( ) ; VAR_9 = METHOD_6 ( VAR_21 ) ; if ( VAR_8 > VAR_9 ) { double t = INT_1 * ( VAR_8 + VAR_9 - INT_1 * VAR_5 ) ; double temp = VAR_8 - VAR_5 - VAR_10 ; t *= temp * temp ; temp = VAR_8 - VAR_9 ; t -= VAR_10 * temp * temp ; if ( t < 0.0 ) { final TYPE_5 VAR_14 = line . METHOD_9 ( x , VAR_13 ) ; VAR_5 = VAR_14 . getValue ( ) ; VAR_12 = VAR_14 . METHOD_10 ( ) ; final double [ ] [ ] result = METHOD_11 ( x , VAR_13 , VAR_12 ) ; x = result [ 0 ] ; final int VAR_22 = n - 1 ; VAR_3 [ VAR_11 ] = VAR_3 [ VAR_22 ] ; VAR_3 [ VAR_22 ] = result [ 1 ] ; } } } }