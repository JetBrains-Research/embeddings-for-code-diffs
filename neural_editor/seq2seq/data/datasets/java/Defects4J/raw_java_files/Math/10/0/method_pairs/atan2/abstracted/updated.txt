public void METHOD_1 ( final double [ ] y , final int VAR_1 , final double [ ] x , final int VAR_2 , final double [ ] result , final int VAR_3 ) { double [ ] VAR_4 = new double [ METHOD_2 ( ) ] ; METHOD_3 ( x , VAR_2 , x , VAR_2 , VAR_4 , 0 ) ; double [ ] VAR_5 = new double [ METHOD_2 ( ) ] ; METHOD_3 ( y , VAR_1 , y , VAR_1 , VAR_5 , 0 ) ; add ( VAR_4 , 0 , VAR_5 , 0 , VAR_5 , 0 ) ; METHOD_4 ( VAR_5 , 0 , INT_1 , VAR_4 , 0 ) ; if ( x [ VAR_2 ] >= 0 ) { add ( VAR_4 , 0 , x , VAR_2 , VAR_5 , 0 ) ; METHOD_5 ( y , VAR_1 , VAR_5 , 0 , VAR_4 , 0 ) ; METHOD_6 ( VAR_4 , 0 , VAR_5 , 0 ) ; for ( int i = 0 ; i < VAR_5 . length ; ++ i ) { result [ VAR_3 + i ] = INT_1 * VAR_5 [ i ] ; } } else { METHOD_7 ( VAR_4 , 0 , x , VAR_2 , VAR_5 , 0 ) ; METHOD_5 ( y , VAR_1 , VAR_5 , 0 , VAR_4 , 0 ) ; METHOD_6 ( VAR_4 , 0 , VAR_5 , 0 ) ; result [ VAR_3 ] = ( ( VAR_5 [ 0 ] <= 0 ) ? - VAR_6 : VAR_6 ) - INT_1 * VAR_5 [ 0 ] ; for ( int i = 1 ; i < VAR_5 . length ; ++ i ) { result [ VAR_3 + i ] = - INT_1 * VAR_5 [ i ] ; } } result [ VAR_3 ] = TYPE_1 . METHOD_1 ( y [ VAR_1 ] , x [ VAR_2 ] ) ; }