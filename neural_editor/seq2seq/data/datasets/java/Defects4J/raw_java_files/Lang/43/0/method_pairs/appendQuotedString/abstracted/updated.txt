private TYPE_1 METHOD_1 ( String pattern , TYPE_2 VAR_1 , TYPE_1 VAR_2 , boolean VAR_3 ) { int start = VAR_1 . METHOD_2 ( ) ; char [ ] c = pattern . METHOD_3 ( ) ; if ( VAR_3 && c [ start ] == VAR_4 ) { METHOD_5 ( VAR_1 ) ; return VAR_2 == null ? null : VAR_2 . append ( VAR_4 ) ; } int VAR_5 = start ; for ( int i = VAR_1 . METHOD_2 ( ) ; i < pattern . length ( ) ; i ++ ) { if ( VAR_3 && pattern . substring ( i ) . startsWith ( TYPE_3 ) ) { VAR_2 . append ( c , VAR_5 , VAR_1 . METHOD_2 ( ) - VAR_5 ) . append ( VAR_4 ) ; VAR_1 . METHOD_4 ( i + TYPE_3 . length ( ) ) ; VAR_5 = VAR_1 . METHOD_2 ( ) ; continue ; } switch ( c [ VAR_1 . METHOD_2 ( ) ] ) { case VAR_4 : METHOD_5 ( VAR_1 ) ; return VAR_2 == null ? null : VAR_2 . append ( c , VAR_5 , VAR_1 . METHOD_2 ( ) - VAR_5 ) ; default : METHOD_5 ( VAR_1 ) ; } } throw new TYPE_4 ( STRING_1 + start ) ; }