public int METHOD_1 ( TYPE_1 VAR_1 , int index , TYPE_2 out ) throws TYPE_3 { int VAR_2 = VAR_1 . length ( ) ; if ( VAR_1 . METHOD_2 ( index ) == CHAR_1 && index < VAR_2 - INT_1 && VAR_1 . METHOD_2 ( index + 1 ) == CHAR_2 ) { int start = index + INT_1 ; boolean VAR_3 = false ; char VAR_4 = VAR_1 . METHOD_2 ( start ) ; if ( VAR_4 == CHAR_3 || VAR_4 == CHAR_4 ) { start ++ ; VAR_3 = true ; if ( start == VAR_2 ) { return 0 ; } } int end = start ; while ( end < VAR_2 && ( ( VAR_1 . METHOD_2 ( end ) >= CHAR_6 && VAR_1 . METHOD_2 ( end ) <= CHAR_7 ) || ( VAR_1 . METHOD_2 ( end ) >= CHAR_8 && VAR_1 . METHOD_2 ( end ) <= CHAR_9 ) || ( VAR_1 . METHOD_2 ( end ) >= CHAR_10 && VAR_1 . METHOD_2 ( end ) <= CHAR_11 ) ) ) { end ++ ; } int VAR_5 ; try { if ( VAR_3 ) { VAR_5 = TYPE_4 . METHOD_3 ( VAR_1 . METHOD_4 ( start , end ) . toString ( ) , INT_2 ) ; } else { VAR_5 = TYPE_4 . METHOD_3 ( VAR_1 . METHOD_4 ( start , end ) . toString ( ) , INT_3 ) ; } } catch ( TYPE_5 VAR_6 ) { VAR_7 . METHOD_5 ( STRING_1 + VAR_1 . METHOD_4 ( start , end ) + STRING_2 + start + STRING_3 + end + STRING_4 ) ; return 0 ; } if ( VAR_5 > INT_4 ) { char [ ] VAR_8 = TYPE_6 . METHOD_6 ( VAR_5 ) ; out.write ( VAR_8 [ 0 ] ) ; out.write ( VAR_8 [ 1 ] ) ; } else { out.write ( VAR_5 ) ; } boolean VAR_9 = ( end != VAR_2 ) && ( VAR_1 . METHOD_2 ( end ) == CHAR_5 ) ; return INT_1 + ( end - start ) + ( VAR_3 ? 1 : 0 ) + ( VAR_9 ? 1 : 0 ) ; } return 0 ; }