public static TYPE_1 METHOD_1 ( final String str ) throws TYPE_2 { if ( str == null ) { return null ; } if ( TYPE_3 . METHOD_2 ( str ) ) { throw new TYPE_2 ( STRING_1 ) ; } final String [ ] VAR_1 = { STRING_2 , STRING_3 , STRING_4 , STRING_5 , STRING_6 , STRING_7 } ; int VAR_2 = 0 ; for ( final String VAR_3 : VAR_1 ) { if ( str . startsWith ( VAR_3 ) ) { VAR_2 += VAR_3 . length ( ) ; break ; } } if ( VAR_2 > 0 ) { char VAR_17 = 0 ; for ( int i = VAR_2 ; i < str . length ( ) ; i ++ ) { VAR_17 = str . METHOD_6 ( i ) ; if ( VAR_17 == CHAR_11 ) { VAR_2 ++ ; } else { break ; } } final int VAR_4 = str . length ( ) - VAR_2 ; if ( VAR_4 > INT_1 || ( VAR_4 == INT_1 && VAR_17 > CHAR_12 ) ) { return METHOD_3 ( str ) ; } if ( VAR_4 > INT_2 || ( VAR_4 == INT_2 && VAR_17 > CHAR_12 ) ) { return METHOD_4 ( str ) ; } return METHOD_5 ( str ) ; } final char VAR_5 = str . METHOD_6 ( str . length ( ) - 1 ) ; String VAR_6 ; String VAR_7 ; String VAR_8 ; final int VAR_9 = str . METHOD_7 ( CHAR_1 ) ; final int VAR_10 = str . METHOD_7 ( CHAR_2 ) + str . METHOD_7 ( CHAR_3 ) + 1 ; int VAR_11 = 0 ; if ( VAR_9 > - 1 ) { if ( VAR_10 > - 1 ) { if ( VAR_10 < VAR_9 || VAR_10 > str . length ( ) ) { throw new TYPE_2 ( str + STRING_8 ) ; } VAR_7 = str . substring ( VAR_9 + 1 , VAR_10 ) ; } else { VAR_7 = str . substring ( VAR_9 + 1 ) ; } VAR_6 = str . substring ( 0 , VAR_9 ) ; VAR_11 = VAR_7 . length ( ) ; } else { if ( VAR_10 > - 1 ) { if ( VAR_10 > str . length ( ) ) { throw new TYPE_2 ( str + STRING_8 ) ; } VAR_6 = str . substring ( 0 , VAR_10 ) ; } else { VAR_6 = str ; } VAR_7 = null ; } if ( ! TYPE_4 . METHOD_8 ( VAR_5 ) && VAR_5 != CHAR_1 ) { if ( VAR_10 > - 1 && VAR_10 < str . length ( ) - 1 ) { VAR_8 = str . substring ( VAR_10 + 1 , str . length ( ) - 1 ) ; } else { VAR_8 = null ; } final String VAR_12 = str . substring ( 0 , str . length ( ) - 1 ) ; final boolean VAR_13 = METHOD_9 ( VAR_6 ) && METHOD_9 ( VAR_8 ) ; switch ( VAR_5 ) { case CHAR_4 : case CHAR_5 : if ( VAR_7 == null && VAR_8 == null && ( VAR_12 . METHOD_6 ( 0 ) == CHAR_6 && METHOD_10 ( VAR_12 . substring ( 1 ) ) || METHOD_10 ( VAR_12 ) ) ) { try { return METHOD_4 ( VAR_12 ) ; } catch ( final TYPE_2 VAR_14 ) { } return METHOD_3 ( VAR_12 ) ; } throw new TYPE_2 ( str + STRING_8 ) ; case CHAR_7 : case CHAR_8 : try { final TYPE_5 f = TYPE_6 . METHOD_11 ( VAR_12 ) ; if ( ! ( f . METHOD_12 ( ) || ( f . METHOD_13 ( ) == 0.0F && ! VAR_13 ) ) ) { return f ; } } catch ( final TYPE_2 VAR_14 ) { } case CHAR_9 : case CHAR_10 : try { final TYPE_7 VAR_15 = TYPE_6 . METHOD_14 ( VAR_12 ) ; if ( ! ( VAR_15 . METHOD_12 ( ) || ( VAR_15 . METHOD_13 ( ) == FLOAT_1 && ! VAR_13 ) ) ) { return VAR_15 ; } } catch ( final TYPE_2 VAR_14 ) { } try { return METHOD_15 ( VAR_12 ) ; } catch ( final TYPE_2 VAR_16 ) { } default : throw new TYPE_2 ( str + STRING_8 ) ; } } if ( VAR_10 > - 1 && VAR_10 < str . length ( ) - 1 ) { VAR_8 = str . substring ( VAR_10 + 1 , str . length ( ) ) ; } else { VAR_8 = null ; } if ( VAR_7 == null && VAR_8 == null ) { try { return METHOD_5 ( str ) ; } catch ( final TYPE_2 VAR_14 ) { } try { return METHOD_4 ( str ) ; } catch ( final TYPE_2 VAR_14 ) { } return METHOD_3 ( str ) ; } final boolean VAR_13 = METHOD_9 ( VAR_6 ) && METHOD_9 ( VAR_8 ) ; try { if ( VAR_11 <= INT_3 ) { final TYPE_5 f = METHOD_11 ( str ) ; if ( ! ( f . METHOD_12 ( ) || ( f . METHOD_13 ( ) == 0.0F && ! VAR_13 ) ) ) { return f ; } } } catch ( final TYPE_2 VAR_14 ) { } try { if ( VAR_11 <= INT_1 ) { final TYPE_7 VAR_15 = METHOD_14 ( str ) ; if ( ! ( VAR_15 . METHOD_12 ( ) || ( VAR_15 . METHOD_16 ( ) == FLOAT_1 && ! VAR_13 ) ) ) { return VAR_15 ; } } } catch ( final TYPE_2 VAR_14 ) { } return METHOD_15 ( str ) ; }