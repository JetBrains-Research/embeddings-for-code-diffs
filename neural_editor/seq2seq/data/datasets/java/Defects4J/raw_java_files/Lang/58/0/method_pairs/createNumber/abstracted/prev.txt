public static TYPE_1 METHOD_1 ( String str ) throws TYPE_2 { if ( str == null ) { return null ; } if ( TYPE_3 . METHOD_2 ( str ) ) { throw new TYPE_2 ( STRING_1 ) ; } if ( str . startsWith ( STRING_2 ) ) { return null ; } if ( str . startsWith ( STRING_3 ) || str . startsWith ( STRING_4 ) ) { return METHOD_3 ( str ) ; } char VAR_1 = str . METHOD_4 ( str . length ( ) - 1 ) ; String VAR_2 ; String VAR_3 ; String VAR_4 ; int VAR_5 = str . METHOD_5 ( CHAR_1 ) ; int VAR_6 = str . METHOD_5 ( CHAR_2 ) + str . METHOD_5 ( CHAR_3 ) + 1 ; if ( VAR_5 > - 1 ) { if ( VAR_6 > - 1 ) { if ( VAR_6 < VAR_5 ) { throw new TYPE_2 ( str + STRING_5 ) ; } VAR_3 = str . substring ( VAR_5 + 1 , VAR_6 ) ; } else { VAR_3 = str . substring ( VAR_5 + 1 ) ; } VAR_2 = str . substring ( 0 , VAR_5 ) ; } else { if ( VAR_6 > - 1 ) { VAR_2 = str . substring ( 0 , VAR_6 ) ; } else { VAR_2 = str ; } VAR_3 = null ; } if ( ! TYPE_4 . METHOD_6 ( VAR_1 ) ) { if ( VAR_6 > - 1 && VAR_6 < str . length ( ) - 1 ) { VAR_4 = str . substring ( VAR_6 + 1 , str . length ( ) - 1 ) ; } else { VAR_4 = null ; } String VAR_7 = str . substring ( 0 , str . length ( ) - 1 ) ; boolean VAR_8 = METHOD_7 ( VAR_2 ) && METHOD_7 ( VAR_4 ) ; switch ( VAR_1 ) { case CHAR_4 : case CHAR_5 : if ( VAR_3 == null && VAR_4 == null && METHOD_8 ( VAR_7 . substring ( 1 ) ) && ( VAR_7 . METHOD_4 ( 0 ) == CHAR_6 || TYPE_4 . METHOD_6 ( VAR_7 . METHOD_4 ( 0 ) ) ) ) { try { return METHOD_9 ( VAR_7 ) ; } catch ( TYPE_2 VAR_9 ) { } return METHOD_10 ( VAR_7 ) ; } throw new TYPE_2 ( str + STRING_5 ) ; case CHAR_7 : case CHAR_8 : try { TYPE_5 f = TYPE_6 . METHOD_11 ( VAR_7 ) ; if ( ! ( f . METHOD_12 ( ) || ( f . METHOD_13 ( ) == 0.0F && ! VAR_8 ) ) ) { return f ; } } catch ( TYPE_2 VAR_9 ) { } case CHAR_9 : case CHAR_10 : try { TYPE_7 VAR_10 = TYPE_6 . METHOD_14 ( VAR_7 ) ; if ( ! ( VAR_10 . METHOD_12 ( ) || ( VAR_10 . METHOD_13 ( ) == FLOAT_1 && ! VAR_8 ) ) ) { return VAR_10 ; } } catch ( TYPE_2 VAR_9 ) { } try { return METHOD_15 ( VAR_7 ) ; } catch ( TYPE_2 VAR_11 ) { } default : throw new TYPE_2 ( str + STRING_5 ) ; } } else { if ( VAR_6 > - 1 && VAR_6 < str . length ( ) - 1 ) { VAR_4 = str . substring ( VAR_6 + 1 , str . length ( ) ) ; } else { VAR_4 = null ; } if ( VAR_3 == null && VAR_4 == null ) { try { return METHOD_3 ( str ) ; } catch ( TYPE_2 VAR_9 ) { } try { return METHOD_9 ( str ) ; } catch ( TYPE_2 VAR_9 ) { } return METHOD_10 ( str ) ; } else { boolean VAR_8 = METHOD_7 ( VAR_2 ) && METHOD_7 ( VAR_4 ) ; try { TYPE_5 f = METHOD_11 ( str ) ; if ( ! ( f . METHOD_12 ( ) || ( f . METHOD_13 ( ) == 0.0F && ! VAR_8 ) ) ) { return f ; } } catch ( TYPE_2 VAR_9 ) { } try { TYPE_7 VAR_10 = METHOD_14 ( str ) ; if ( ! ( VAR_10 . METHOD_12 ( ) || ( VAR_10 . METHOD_16 ( ) == FLOAT_1 && ! VAR_8 ) ) ) { return VAR_10 ; } } catch ( TYPE_2 VAR_9 ) { } return METHOD_15 ( str ) ; } } }