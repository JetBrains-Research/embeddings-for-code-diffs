public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , int value ) { if ( VAR_1 == null ) { throw new TYPE_3 ( STRING_1 ) ; } int index = METHOD_2 ( VAR_1 ) ; if ( index == - 1 ) { TYPE_2 [ ] VAR_2 = new TYPE_2 [ VAR_3 . length + 1 ] ; int [ ] VAR_4 = new int [ VAR_2 . length ] ; int i = 0 ; TYPE_4 VAR_5 = VAR_1 . METHOD_3 ( ) . METHOD_4 ( VAR_6 ) ; if ( VAR_5 . METHOD_5 ( ) ) { for ( ; i < VAR_3 . length ; i ++ ) { TYPE_2 VAR_7 = VAR_3 [ i ] ; TYPE_4 VAR_8 = VAR_7 . METHOD_3 ( ) . METHOD_4 ( VAR_6 ) ; if ( VAR_8 . METHOD_5 ( ) ) { int VAR_9 = VAR_5 . compareTo ( VAR_8 ) ; if ( VAR_9 > 0 ) { break ; } else if ( VAR_9 == 0 ) { if ( VAR_1 . METHOD_6 ( ) == null ) { break ; } TYPE_4 VAR_10 = VAR_1 . METHOD_6 ( ) . METHOD_4 ( VAR_6 ) ; TYPE_4 VAR_11 = VAR_7 . METHOD_6 ( ) . METHOD_4 ( VAR_6 ) ; if ( VAR_10 . compareTo ( VAR_11 ) > 0 ) { break ; } } } } } TYPE_5 . METHOD_7 ( VAR_3 , 0 , VAR_2 , 0 , i ) ; TYPE_5 . METHOD_7 ( VAR_12 , 0 , VAR_4 , 0 , i ) ; VAR_2 [ i ] = VAR_1 ; VAR_4 [ i ] = value ; TYPE_5 . METHOD_7 ( VAR_3 , i , VAR_2 , i + 1 , VAR_2 . length - i - 1 ) ; TYPE_5 . METHOD_7 ( VAR_12 , i , VAR_4 , i + 1 , VAR_4 . length - i - 1 ) ; TYPE_1 VAR_13 = new TYPE_1 ( VAR_2 , VAR_4 , VAR_6 ) ; VAR_6 . METHOD_8 ( VAR_13 , VAR_4 ) ; return VAR_13 ; } if ( value == getValue ( index ) ) { return this ; } int [ ] VAR_4 = METHOD_9 ( ) ; VAR_4 = METHOD_4 ( index ) . set ( this , index , VAR_4 , value ) ; return new TYPE_1 ( this , VAR_4 ) ; }