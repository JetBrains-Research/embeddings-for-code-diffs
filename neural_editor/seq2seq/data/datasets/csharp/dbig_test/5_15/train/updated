var VAR0 = ( await Task . WhenAll ( VAR1 ) . ConfigureAwait ( false ) ) . All ( VAR2 => VAR2 ) ; var VAR3 = VAR4 . Select ( VAR5 => VAR5 . Proxies . PollAsync ( true ) ) ; await Task . WhenAll ( VAR3 ) . ConfigureAwait ( false ) ;
VAR0 [ 0 ] . CityOfBirthName = VAR1 [ 1 ] . Name ; VAR0 [ 0 ] . Squad = VAR2 [ 0 ] ; VAR0 [ 0 ] . Tag = VAR3 [ 0 ] ; VAR0 [ 0 ] . VAR4 = new List < Weapon > { VAR5 [ LITERAL ] , VAR5 [ LITERAL ] } ; VAR0 [ 1 ] . AssignedCity = VAR1 [ 0 ] ; VAR0 [ 1 ] . CityOfBirth = VAR1 [ LITERAL ] ; VAR0 [ 1 ] . CityOfBirthName = VAR1 [ LITERAL ] . Name ;
VAR0 [ 1 ] . CityOfBirthName = VAR1 [ LITERAL ] . Name ; VAR0 [ 1 ] . Squad = VAR2 [ 0 ] ; VAR0 [ 1 ] . Tag = VAR3 [ 1 ] ; VAR0 [ 1 ] . VAR4 = new List < Weapon > { VAR5 [ LITERAL ] , VAR5 [ LITERAL ] } ; VAR0 [ LITERAL ] . AssignedCity = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . CityOfBirth = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . CityOfBirthName = VAR1 [ LITERAL ] . Name ;
VAR0 [ LITERAL ] . CityOfBirthName = VAR1 [ LITERAL ] . Name ; VAR0 [ LITERAL ] . Squad = VAR2 [ 1 ] ; VAR0 [ LITERAL ] . Tag = VAR3 [ LITERAL ] ; VAR0 [ LITERAL ] . VAR4 = new List < Weapon > { VAR5 [ LITERAL ] } ; VAR0 [ LITERAL ] . AssignedCity = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . CityOfBirth = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . CityOfBirthName = VAR1 [ LITERAL ] . Name ;
VAR0 . AddEntry ( VAR1 , true ) ; var VAR2 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR2 [ VAR4 ] = LITERAL ; VAR2 . SetEntityState ( EntityState . Deleted ) ; var VAR5 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR5 . AddEntry ( VAR2 , true ) ;
VAR0 . AddEntry ( VAR1 , true ) ; var VAR2 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR2 [ VAR4 ] = LITERAL ; VAR2 . SetEntityState ( EntityState . Modified ) ; var VAR5 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR5 . AddEntry ( VAR2 , true ) ; var VAR6 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR6 [ VAR4 ] = LITERAL ; VAR6 . SetEntityState ( EntityState . Deleted ) ; var VAR7 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR7 . AddEntry ( VAR6 , true ) ;
Assert . Single ( VAR0 ) ; Assert . Empty ( VAR1 ) ; AssertTrackedEvent ( VAR2 , 1 , EntityState . Unchanged , VAR0 [ 0 ] , VAR3 : false ) ; VAR2 . Entry ( new VAR4 ( LITERAL ) ) . State = EntityState . Unchanged ; Assert . Equal ( LITERAL , VAR0 . Count ) ; Assert . Empty ( VAR1 ) ;
Assert . Single ( VAR0 ) ; Assert . Empty ( VAR1 ) ; AssertTrackedEvent ( VAR2 , 1 , EntityState . Added , VAR0 [ 0 ] , VAR3 : false ) ; VAR2 . Entry ( new VAR4 ( LITERAL ) ) . State = EntityState . Added ; Assert . Equal ( LITERAL , VAR0 . Count ) ; Assert . Empty ( VAR1 ) ;
Assert . Single ( VAR0 ) ; Assert . Empty ( VAR1 ) ; AssertTrackedEvent ( VAR2 , 1 , EntityState . Unchanged , VAR0 [ 0 ] , VAR3 : true ) ; VAR2 . Add ( new VAR4 ( LITERAL ) ) ; VAR5 . VAR6 = LITERAL ; VAR2 . ChangeTracker . DetectChanges ( ) ; Assert . Equal ( LITERAL , VAR0 . Count ) ; Assert . Single ( VAR1 ) ;
Assert . Single ( VAR0 ) ; Assert . Empty ( VAR1 ) ; AssertTrackedEvent ( VAR2 , LITERAL , EntityState . Unchanged , VAR0 [ 0 ] , VAR3 : false ) ; VAR2 . Entry ( VAR4 ) . Property ( VAR5 => VAR5 . VAR6 ) . IsModified = true ; Assert . Single ( VAR0 ) ; Assert . Single ( VAR1 ) ;
Assert . Single ( VAR0 ) ; Assert . Empty ( VAR1 ) ; AssertTrackedEvent ( VAR2 , LITERAL , EntityState . Unchanged , VAR0 [ 0 ] , VAR3 : false ) ; VAR2 . Entry ( VAR4 ) . Property ( VAR5 => VAR5 . VAR6 ) . IsModified = true ; Assert . Single ( VAR0 ) ; Assert . Single ( VAR1 ) ; AssertChangedEvent ( VAR2 , LITERAL , EntityState . Unchanged , EntityState . Modified , VAR1 [ 0 ] ) ; VAR2 . Entry ( VAR4 ) . Property ( VAR5 => VAR5 . VAR6 ) . IsModified = false ; Assert . Single ( VAR0 ) ;
Assert . Empty ( VAR0 ) ; VAR1 . Entry ( VAR1 . VAR2 . Find ( 1 ) ) . State = EntityState . Modified ; Assert . Equal ( LITERAL , VAR3 . Count ) ; Assert . Single ( VAR0 ) ; Assert . Empty ( VAR4 ) ; Assert . Empty ( VAR5 ) ;
Assert . Empty ( VAR0 ) ; VAR1 . Entry ( VAR1 . VAR2 . Find ( 1 ) ) . State = EntityState . Modified ; Assert . Equal ( LITERAL , VAR3 . Count ) ; Assert . Single ( VAR0 ) ; Assert . Equal ( LITERAL , VAR4 . Count ) ; Assert . Single ( VAR5 ) ;
Assert . Equal ( nameof ( DbContext ) , VAR0 . Metadata . GetContainer ( ) ) ; VAR0 . ToContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetContainer ( ) ) ; VAR0 . ToContainer ( null ) ; Assert . Equal ( nameof ( DbContext ) , VAR0 . Metadata . GetContainer ( ) ) ; VAR1 . HasDefaultContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetContainer ( ) ) ;
Assert . Null ( VAR0 . GetPartitionKeyPropertyName ( ) ) ; ( ( IConventionEntityType ) VAR0 ) . SetPartitionKeyPropertyName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetPartitionKeyPropertyName ( ) ) ; Assert . Equal ( ConfigurationSource . Convention , ( ( IConventionEntityType ) VAR0 ) . GetPartitionKeyPropertyNameConfigurationSource ( ) ) ; VAR0 . SetPartitionKeyPropertyName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetPartitionKeyPropertyName ( ) ) ; Assert . Equal ( ConfigurationSource . Explicit , ( ( IConventionEntityType ) VAR0 ) . GetPartitionKeyPropertyNameConfigurationSource ( ) ) ; VAR0 . SetPartitionKeyPropertyName ( null ) ; Assert . Null ( VAR0 . GetPartitionKeyPropertyName ( ) ) ; Assert . Null ( ( ( IConventionEntityType ) VAR0 ) . GetPartitionKeyPropertyNameConfigurationSource ( ) ) ;
Assert . Single ( VAR0 . GetKeys ( ) ) ; var VAR1 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . False ( VAR1 . IsUnique ) ; Assert . True ( VAR1 . PrincipalEntityType . ClrType . GetTypeInfo ( ) . IsAbstract ) ; Assert . Single ( VAR0 . GetNavigations ( ) ) ;
Assert . Single ( VAR0 ( VAR1 ) ) ; VAR2 . Remove ( VAR1 , VAR3 ) ; Assert . False ( VAR2 . Contains ( VAR1 , VAR3 ) ) ; Assert . Empty ( VAR0 ( VAR1 ) ) ;
Assert . Empty ( VAR0 . Metadata . GetForeignKeys ( ) ) ; var VAR1 = VAR2 . Metadata . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( Order . VAR3 . Name , VAR1 . DependentToPrincipal . Name ) ; Assert . Equal ( VAR4 . VAR5 . Name , VAR1 . PrincipalToDependent . Name ) ; Assert . NotEqual ( Order . VAR6 . Name , VAR1 . Properties . Single ( ) . Name ) ; Assert . Single ( VAR0 . Metadata . GetDeclaredProperties ( ) ) ;
Assert . Equal ( nameof ( Order . Customer ) , VAR0 . DependentToPrincipal . Name ) ; Assert . Equal ( nameof ( Order . CustomerId ) , VAR0 . Properties . Single ( ) . Name ) ; Assert . Equal ( nameof ( Order . OrderId ) , VAR1 . FindPrimaryKey ( ) . Properties . Single ( ) . Name ) ; Assert . Single ( VAR1 . GetForeignKeys ( ) ) ; Assert . Equal ( nameof ( Order . CustomerId ) , VAR1 . GetIndexes ( ) . Single ( ) . Properties . Single ( ) . Name ) ;
Assert . Single ( VAR0 . GetForeignKeys ( ) ) ; var VAR1 = VAR0 . FindPrimaryKey ( ) ; Assert . Equal ( new [ ] { nameof ( Order . CustomerId ) , nameof ( Order . OrderId ) } , VAR1 . Properties . Select ( VAR2 => VAR2 . Name ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR1 . Properties . Last ( ) . ValueGenerated ) ; Assert . Empty ( VAR0 . GetIndexes ( ) ) ;
Assert . Single ( VAR0 . GetForeignKeys ( ) ) ; var VAR1 = VAR0 . FindPrimaryKey ( ) ; Assert . Equal ( new [ ] { nameof ( Order . CustomerId ) , LITERAL } , VAR1 . Properties . Select ( VAR2 => VAR2 . Name ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR1 . Properties . Last ( ) . ValueGenerated ) ; Assert . Empty ( VAR0 . GetIndexes ( ) ) ;
Assert . Single ( VAR0 . KeyColumns ) ; Assert . Equal ( 1 , VAR0 . KeyValues . GetLength ( 0 ) ) ; Assert . Equal ( 1 , VAR0 . KeyValues . GetLength ( 1 ) ) ; Assert . Equal ( LITERAL , VAR0 . KeyValues [ 0 , 0 ] ) ; Assert . Single ( VAR0 . Columns ) ;
Assert . Single ( VAR0 . KeyColumns ) ; Assert . Equal ( LITERAL , VAR0 . KeyValues . GetLength ( 0 ) ) ; Assert . Equal ( 1 , VAR0 . KeyValues . GetLength ( 1 ) ) ; Assert . Equal ( LITERAL , VAR0 . KeyValues [ 1 , 0 ] ) ; Assert . Single ( VAR0 . Columns ) ;
Assert . Single ( VAR0 ) ; var VAR1 = VAR2 . ToList ( ) ; Assert . Single ( VAR1 ) ;
Assert . Empty ( VAR0 ) ; var VAR1 = new Driver { Name = LITERAL , TeamId = Team . Ferrari , CarNumber = LITERAL } ; VAR2 . Drivers . Add ( VAR1 ) ; Assert . Contains ( VAR1 , VAR0 ) ; Assert . Single ( VAR0 ) ;
Assert . Single ( VAR0 . RequiredChildren ) ; Assert . DoesNotContain ( VAR1 , VAR0 . RequiredChildren . Select ( VAR2 => VAR2 . Id ) ) ; Assert . Empty ( VAR3 . Set < Required1 > ( ) . Where ( VAR2 => VAR2 . Id == VAR1 ) ) ; Assert . Empty ( VAR3 . Set < Required2 > ( ) . Where ( VAR2 => VAR4 . Contains ( VAR2 . Id ) ) ) ; Assert . Same ( VAR0 , VAR5 . Parent ) ; Assert . Empty ( VAR5 . Children ) ;
Assert . Single ( VAR0 . RequiredChildrenAk ) ; Assert . DoesNotContain ( VAR1 , VAR0 . RequiredChildrenAk . Select ( VAR2 => VAR2 . Id ) ) ; Assert . Empty ( VAR3 . Set < RequiredAk1 > ( ) . Where ( VAR2 => VAR2 . Id == VAR1 ) ) ; Assert . Empty ( VAR3 . Set < RequiredAk2 > ( ) . Where ( VAR2 => VAR4 . Contains ( VAR2 . Id ) ) ) ; Assert . Empty ( VAR3 . Set < RequiredComposite2 > ( ) . Where ( VAR2 => VAR5 . Contains ( VAR2 . Id ) ) ) ; Assert . Same ( VAR0 , VAR6 . Parent ) ; Assert . Empty ( VAR6 . Children ) ;
Assert . Single ( VAR0 . OptionalChildrenAk ) ; Assert . DoesNotContain ( VAR1 , VAR0 . OptionalChildrenAk . Select ( VAR2 => VAR2 . Id ) ) ; Assert . Empty ( VAR3 . Set < OptionalAk1 > ( ) . Where ( VAR2 => VAR2 . Id == VAR1 ) ) ; var VAR4 = VAR3 . Set < OptionalAk2 > ( ) . Where ( VAR2 => VAR5 . Contains ( VAR2 . Id ) ) . ToList ( ) ; Assert . Equal ( VAR5 . Count , VAR4 . Count ) ; Assert . True ( VAR4 . All ( VAR2 => VAR2 . ParentId == null ) ) ; var VAR6 = VAR3 . Set < OptionalComposite2 > ( ) . Where ( VAR2 => VAR7 . Contains ( VAR2 . Id ) ) . ToList ( ) ; Assert . Equal ( VAR7 . Count , VAR6 . Count ) ; Assert . True ( VAR6 . All ( VAR2 => VAR2 . ParentId == null ) ) ; Assert . Same ( VAR0 , VAR8 . Parent ) ; Assert . Empty ( VAR8 . Children ) ;
Assert . Single ( VAR0 . RequiredChildrenAk ) ; Assert . DoesNotContain ( VAR1 , VAR0 . RequiredChildrenAk . Select ( VAR2 => VAR2 . Id ) ) ; Assert . Empty ( VAR3 . Set < RequiredAk1 > ( ) . Where ( VAR2 => VAR2 . Id == VAR1 ) ) ; Assert . Empty ( VAR3 . Set < RequiredAk2 > ( ) . Where ( VAR2 => VAR4 . Contains ( VAR2 . Id ) ) ) ; Assert . Empty ( VAR3 . Set < RequiredComposite2 > ( ) . Where ( VAR2 => VAR5 . Contains ( VAR2 . Id ) ) ) ; Assert . Same ( VAR0 , VAR6 . Parent ) ; Assert . Empty ( VAR6 . Children ) ;
Assert . Single ( VAR0 . OptionalChildren ) ; Assert . DoesNotContain ( VAR1 , VAR0 . OptionalChildren . Select ( VAR2 => VAR2 . Id ) ) ; Assert . Empty ( VAR3 . Set < Optional1 > ( ) . Where ( VAR2 => VAR2 . Id == VAR1 ) ) ; var VAR4 = VAR3 . Set < Optional2 > ( ) . Where ( VAR2 => VAR5 . Contains ( VAR2 . Id ) ) . ToList ( ) ; Assert . Equal ( VAR5 . Count , VAR4 . Count ) ; Assert . True ( VAR4 . All ( VAR2 => VAR2 . ParentId == null ) ) ; Assert . Same ( VAR0 , VAR6 . Parent ) ; Assert . Empty ( VAR6 . Children ) ;
Assert . Single ( VAR0 . OptionalChildrenAk ) ; Assert . DoesNotContain ( VAR1 , VAR0 . OptionalChildrenAk . Select ( VAR2 => VAR2 . Id ) ) ; Assert . Empty ( VAR3 . Set < OptionalAk1 > ( ) . Where ( VAR2 => VAR2 . Id == VAR1 ) ) ; var VAR4 = VAR3 . Set < OptionalAk2 > ( ) . Where ( VAR2 => VAR5 . Contains ( VAR2 . Id ) ) . ToList ( ) ; Assert . Equal ( VAR5 . Count , VAR4 . Count ) ; Assert . True ( VAR4 . All ( VAR2 => VAR2 . ParentId == null ) ) ; var VAR6 = VAR3 . Set < OptionalComposite2 > ( ) . Where ( VAR2 => VAR7 . Contains ( VAR2 . Id ) ) . ToList ( ) ; Assert . Equal ( VAR7 . Count , VAR6 . Count ) ; Assert . True ( VAR6 . All ( VAR2 => VAR2 . ParentId == null ) ) ; Assert . Same ( VAR0 , VAR8 . Parent ) ; Assert . Empty ( VAR8 . Children ) ;
Assert . Single ( VAR0 ) ; Assert . Single ( VAR1 . ChangeTracker . Entries ( ) ) ; VAR1 . ChangeTracker . QueryTrackingBehavior = QueryTrackingBehavior . NoTracking ; VAR0 = VAR2 . Skip ( 1 ) . Take ( 1 ) . ToList ( ) ; Assert . Single ( VAR0 ) ; Assert . Single ( VAR1 . ChangeTracker . Entries ( ) ) ;
Assert . Single ( VAR0 ) ; Assert . Empty ( VAR1 . ChangeTracker . Entries ( ) ) ; VAR1 . ChangeTracker . QueryTrackingBehavior = QueryTrackingBehavior . TrackAll ; VAR0 = VAR2 . Skip ( 1 ) . Take ( 1 ) . ToList ( ) ; Assert . Single ( VAR0 ) ; Assert . Single ( VAR1 . ChangeTracker . Entries ( ) ) ;
Assert . Empty ( VAR0 . ChangeTracker . Entries ( ) ) ; Assert . Throws < InvalidOperationException > ( ( ) => VAR1 . AsTracking ( ) . ToList ( ) ) ; Assert . Empty ( VAR0 . ChangeTracker . Entries ( ) ) ;
Assert . Single ( VAR0 . ChangeTracker . Entries < VAR1 > ( ) ) ; Assert . Equal ( LITERAL , VAR0 . ChangeTracker . Entries < VAR2 > ( ) . Count ( ) ) ; Assert . Equal ( LITERAL , VAR0 . ChangeTracker . Entries < ThirdLevel > ( ) . Count ( ) ) ; AssertValidFks ( VAR0 , VAR3 , VAR4 : true ) ; AddData ( VAR3 ) ; VAR0 . ChangeTracker . DetectChanges ( ) ; Assert . Single ( VAR0 . ChangeTracker . Entries < VAR1 > ( ) ) ;
Assert . Single ( VAR0 . DeclaringEntityType . GetForeignKeys ( ) ) ; Assert . Single ( VAR0 . DeclaringEntityType . GetForeignKeys ( ) ) ; Assert . NotSame ( VAR1 . DeclaringEntityType , VAR2 . DeclaringEntityType ) ; Assert . NotSame ( VAR3 . DeclaringEntityType , VAR4 . DeclaringEntityType ) ; Assert . Single ( VAR1 . DeclaringEntityType . GetForeignKeys ( ) ) ; Assert . Single ( VAR3 . DeclaringEntityType . GetForeignKeys ( ) ) ; Assert . Single ( VAR2 . DeclaringEntityType . GetForeignKeys ( ) ) ; Assert . Single ( VAR4 . DeclaringEntityType . GetForeignKeys ( ) ) ;
var VAR0 = ( ( IEntityType ) VAR1 . Metadata ) . GetDiscriminatorProperty ( ) ; Assert . NotNull ( VAR0 ) ; Assert . Same ( VAR0 , ( ( IEntityType ) VAR2 . Metadata ) . GetDiscriminatorProperty ( ) ) ; Assert . Same ( VAR0 , ( ( IEntityType ) VAR3 . Metadata ) . GetDiscriminatorProperty ( ) ) ; Assert . Equal ( typeof ( EntityBase ) . VAR4 , VAR2 . Metadata . GetDiscriminatorValue ( ) ) ; Assert . Equal ( typeof ( Entity ) . VAR4 , VAR1 . Metadata . GetDiscriminatorValue ( ) ) ; Assert . Equal ( typeof ( DerivedEntity ) . VAR4 , VAR3 . Metadata . GetDiscriminatorValue ( ) ) ; VAR1 . HasBaseType ( ( Type ) null , ConfigurationSource . DataAnnotation ) ; RunConvention ( VAR1 , VAR2 . Metadata ) ; Assert . Null ( ( ( IEntityType ) VAR2 . Metadata ) . GetDiscriminatorProperty ( ) ) ; VAR0 = ( ( IEntityType ) VAR1 . Metadata ) . GetDiscriminatorProperty ( ) ; Assert . NotNull ( VAR0 ) ; Assert . Same ( VAR0 , ( ( IEntityType ) VAR3 . Metadata ) . GetDiscriminatorProperty ( ) ) ;
Assert . Null ( ( ( IEntityType ) VAR0 . Metadata ) . GetDiscriminatorProperty ( ) ) ; Assert . Null ( ( ( IEntityType ) VAR1 . Metadata ) . GetDiscriminatorProperty ( ) ) ; Assert . Null ( VAR1 . Metadata . GetDiscriminatorValue ( ) ) ; Assert . Null ( VAR0 . Metadata . GetDiscriminatorValue ( ) ) ; VAR0 . HasBaseType ( ( Type ) null , ConfigurationSource . DataAnnotation ) ; RunConvention ( VAR0 , VAR1 . Metadata ) ; Assert . Null ( ( ( IEntityType ) VAR1 . Metadata ) . GetDiscriminatorProperty ( ) ) ; Assert . NotNull ( ( ( IEntityType ) VAR0 . Metadata ) . GetDiscriminatorProperty ( ) ) ;
var VAR0 = groupJoinMethod . Arguments [ LITERAL ] . UnwrapLambdaFromQuote ( ) ; var VAR1 = groupJoinMethod . Arguments [ LITERAL ] . UnwrapLambdaFromQuote ( ) ; var VAR2 = groupJoinMethod . Arguments [ LITERAL ] . UnwrapLambdaFromQuote ( ) ; var VAR3 = VAR4 . Arguments [ 1 ] . UnwrapLambdaFromQuote ( ) ; var VAR5 = VAR4 . Arguments [ LITERAL ] . UnwrapLambdaFromQuote ( ) ;
VAR0 . Append ( LITERAL ) ; VAR0 . Visit ( VAR1 ) ; VAR0 . Append ( LITERAL ) ; VAR0 . Visit ( VAR2 ) ; VAR0 . Append ( LITERAL ) ; VAR0 . Visit ( VAR3 ) ; VAR0 . Append ( LITERAL ) ;
VAR0 . Append ( VAR1 . DeclaringType ? . Name + LITERAL + VAR1 . Name + LITERAL ) ; VAR0 . Visit ( VAR2 ) ; VAR0 . Append ( LITERAL ) ; VAR0 . Visit ( Constant ( propertyName ) ) ; VAR0 . Append ( LITERAL ) ;
VAR0 . Append ( LITERAL ) ; VAR0 . Visit ( VAR1 ) ; VAR0 . Append ( LITERAL ) ; VAR0 . Visit ( VAR2 ) ; VAR0 . Append ( LITERAL ) ;
VAR0 . Entity < KeylessEntity > ( ) . HasNoKey ( ) ; VAR0 . Entity < Customer > ( ) ; VAR0 . FinalizeModel ( ) ; Assert . Null ( VAR0 . Model . FindEntityType ( typeof ( Customer ) ) ? . FindProperty ( LITERAL ) ) ; Assert . Null ( VAR0 . Model . FindEntityType ( typeof ( KeylessEntity ) ) . FindPrimaryKey ( ) ) ;
VAR0 . AppendJoin ( LITERAL , VAR1 . Select ( VAR2 => EscapeLiteral ( VAR2 . Table ) ) ) ; VAR0 . Append ( LITERAL ) ; VAR0 . Append ( VAR3 ) ; VAR0 . Append ( LITERAL ) ; VAR0 . Append ( VAR4 ) ; VAR0 . Append ( LITERAL ) ; VAR0 . AppendJoin ( LITERAL , VAR1 . Select ( VAR2 => EscapeLiteral ( LITERAL ) ) ) ;
Assert . Null ( VAR0 . GetGeometricDimension ( ) ) ; VAR0 . SetGeometricDimension ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetGeometricDimension ( ) ) ; VAR0 . SetGeometricDimension ( null ) ; Assert . Null ( VAR0 . GetGeometricDimension ( ) ) ;
VAR0 . SetValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; VAR0 . SetHiLoSequenceName ( VAR1 ) ; VAR0 . SetHiLoSequenceSchema ( VAR2 ) ; VAR0 . SetIdentitySeed ( null ) ; VAR0 . SetIdentityIncrement ( null ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . None , VAR0 . GetValueGenerationStrategy ( ) ) ; var VAR1 = VAR2 . FindProperty ( nameof ( GeneratedEntityNonInteger . DateTime ) ) ; Assert . Equal ( SqlServerValueGenerationStrategy . None , VAR1 . GetValueGenerationStrategy ( ) ) ; var VAR3 = VAR2 . FindProperty ( nameof ( GeneratedEntityNonInteger . Guid ) ) ; Assert . Equal ( SqlServerValueGenerationStrategy . None , VAR3 . GetValueGenerationStrategy ( ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR0 . GetValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Equal ( 1 , VAR0 . GetIdentitySeed ( ) ) ; Assert . Equal ( 1 , VAR0 . GetIdentityIncrement ( ) ) ; Assert . Null ( VAR0 . GetHiLoSequenceName ( ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR0 . GetValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Equal ( LITERAL , VAR0 . GetIdentitySeed ( ) ) ; Assert . Equal ( LITERAL , VAR0 . GetIdentityIncrement ( ) ) ; Assert . Null ( VAR0 . GetHiLoSequenceName ( ) ) ;
Assert . True ( VAR0 . Metadata . IsMemoryOptimized ( ) ) ; Assert . NotNull ( VAR0 . IsMemoryOptimized ( false , fromDataAnnotation : true ) ) ; Assert . False ( VAR0 . Metadata . IsMemoryOptimized ( ) ) ; Assert . Null ( VAR0 . IsMemoryOptimized ( true ) ) ; Assert . False ( VAR0 . Metadata . IsMemoryOptimized ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . GetHiLoSequenceName ( ) ) ; Assert . NotNull ( VAR0 . HasHiLoSequence ( LITERAL , null , fromDataAnnotation : true ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetHiLoSequenceName ( ) ) ; Assert . Null ( VAR0 . HasHiLoSequence ( LITERAL , null ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetHiLoSequenceName ( ) ) ;
Assert . Null ( VAR0 . IsClustered ( ) ) ; VAR0 . SetIsClustered ( true ) ; Assert . True ( VAR0 . IsClustered ( ) . Value ) ; VAR0 . SetIsClustered ( null ) ; Assert . Null ( VAR0 . IsClustered ( ) ) ;
Assert . Null ( VAR0 . IsClustered ( ) ) ; VAR0 . SetIsClustered ( true ) ; Assert . True ( VAR0 . IsClustered ( ) . Value ) ; VAR0 . SetIsClustered ( null ) ; Assert . Null ( VAR0 . IsClustered ( ) ) ;
VAR0 . SetHiLoSequenceName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetHiLoSequenceName ( ) ) ; VAR0 . SetHiLoSequenceName ( null ) ; Assert . Equal ( SqlServerModelExtensions . DefaultHiLoSequenceName , VAR0 . GetHiLoSequenceName ( ) ) ;
Assert . Null ( VAR0 . GetHiLoSequenceSchema ( ) ) ; VAR0 . SetHiLoSequenceSchema ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetHiLoSequenceSchema ( ) ) ; VAR0 . SetHiLoSequenceSchema ( null ) ; Assert . Null ( VAR0 . GetHiLoSequenceSchema ( ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . None , VAR0 . GetValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; VAR0 . SetValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . GetValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; VAR0 . SetValueGenerationStrategy ( null ) ; Assert . Equal ( SqlServerValueGenerationStrategy . None , VAR0 . GetValueGenerationStrategy ( ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR0 . GetValueGenerationStrategy ( ) ) ; VAR0 . SetValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . GetValueGenerationStrategy ( ) ) ; VAR0 . SetValueGenerationStrategy ( null ) ; Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR0 . GetValueGenerationStrategy ( ) ) ;
Assert . Null ( VAR0 . GetHiLoSequenceName ( ) ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . GetHiLoSequenceName ( ) ) ; VAR0 . SetHiLoSequenceName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetHiLoSequenceName ( ) ) ; VAR0 . SetHiLoSequenceName ( null ) ; Assert . Null ( VAR0 . GetHiLoSequenceName ( ) ) ;
Assert . Null ( VAR0 . GetHiLoSequenceSchema ( ) ) ; VAR0 . SetHiLoSequenceSchema ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetHiLoSequenceSchema ( ) ) ; VAR0 . SetHiLoSequenceSchema ( null ) ; Assert . Null ( VAR0 . GetHiLoSequenceSchema ( ) ) ;
VAR0 . Model . SetValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; VAR1 . SetHiLoSequenceName ( LITERAL ) ; VAR1 . SetHiLoSequenceSchema ( LITERAL ) ; Assert . Equal ( LITERAL , VAR1 . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , VAR1 . FindHiLoSequence ( ) . Schema ) ;
VAR0 . Model . SetHiLoSequenceName ( LITERAL ) ; VAR0 . Model . SetHiLoSequenceSchema ( LITERAL ) ; VAR1 . SetValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; Assert . Equal ( LITERAL , VAR1 . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , VAR1 . FindHiLoSequence ( ) . Schema ) ;
VAR0 . Model . SetValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; VAR0 . Model . SetHiLoSequenceName ( LITERAL ) ; VAR0 . Model . SetHiLoSequenceSchema ( LITERAL ) ; Assert . Equal ( LITERAL , VAR1 . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , VAR1 . FindHiLoSequence ( ) . Schema ) ;
Assert . Null ( VAR0 . GetSpatialDimension ( ) ) ; VAR0 . SetSpatialDimension ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetSpatialDimension ( ) ) ; VAR0 . SetSpatialDimension ( null ) ; Assert . Null ( VAR0 . GetSpatialDimension ( ) ) ;
VAR0 . ToContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetCosmosContainer ( ) ) ; VAR0 . ToContainer ( null ) ; Assert . Equal ( nameof ( DbContext ) , VAR0 . Metadata . GetCosmosContainer ( ) ) ; VAR1 . HasDefaultContainer ( LITERAL ) ;
VAR0 . HasDefaultContainer ( null ) ; Assert . Equal ( nameof ( Customer ) , VAR1 . GetCosmosContainer ( ) ) ; Assert . Null ( VAR0 . Model . GetCosmosDefaultContainer ( ) ) ; VAR0 . HasDefaultContainer ( LITERAL ) ;
VAR0 . IsMemoryOptimized ( ) ; VAR0 . HasIndex ( VAR1 => VAR1 . VAR2 ) . IsUnique ( ) ; VAR0 . HasOne ( VAR1 => VAR1 . VAR3 ) . WithMany ( VAR1 => VAR1 . VAR4 ) . IsRequired ( ) . OnDelete ( DeleteBehavior . Restrict ) ; VAR5 . Entity < FastUn > ( VAR0 => { VAR0 . IsMemoryOptimized ( ) ; VAR0 . HasIndex ( VAR1 => VAR1 . VAR2 ) . IsUnique ( ) ; VAR0 . HasOne ( VAR1 => VAR1 . VAR3 ) . WithMany ( VAR1 => VAR1 . VAR4 ) . IsRequired ( ) . OnDelete ( DeleteBehavior . Restrict ) ; } ) ; VAR5 . Entity < VAR3 > ( ) . IsMemoryOptimized ( ) ;
Assert . NotNull ( VAR0 . IsMemoryOptimized ( true ) ) ; Assert . True ( VAR0 . Metadata . GetSqlServerIsMemoryOptimized ( ) ) ; Assert . NotNull ( VAR0 . IsMemoryOptimized ( false , fromDataAnnotation : true ) ) ; Assert . False ( VAR0 . Metadata . GetSqlServerIsMemoryOptimized ( ) ) ; Assert . Null ( VAR0 . IsMemoryOptimized ( true ) ) ;
Assert . NotNull ( VAR0 . HasHiLoSequence ( LITERAL , null ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetSqlServerHiLoSequenceName ( ) ) ; Assert . NotNull ( VAR0 . HasHiLoSequence ( LITERAL , null , fromDataAnnotation : true ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetSqlServerHiLoSequenceName ( ) ) ; Assert . Null ( VAR0 . HasHiLoSequence ( LITERAL , null ) ) ;
SetNavigation ( VAR0 , VAR1 , VAR2 , VAR4 ) ; ToDependentFixup ( VAR0 , VAR2 , VAR3 , VAR4 ) ;
VAR0 . Entity < BaseEntity1 > ( ) . Property ( VAR1 => VAR1 . VAR2 ) ; Validate ( VAR0 ) ; Assert . Null ( VAR0 . Model . FindEntityType ( typeof ( AbstractBaseEntity1 ) ) . FindProperty ( LITERAL ) ) ; Assert . NotNull ( VAR0 . Model . FindEntityType ( typeof ( BaseEntity1 ) ) . FindProperty ( LITERAL ) ) ; Assert . NotNull ( VAR0 . Model . FindEntityType ( typeof ( Unit1 ) ) . FindProperty ( LITERAL ) ) ;
Assert . Equal ( nameof ( Customer ) , VAR0 . GetCosmosContainer ( ) ) ; ( ( IConventionEntityType ) VAR0 ) . SetCosmosContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetCosmosContainer ( ) ) ; Assert . Equal ( ConfigurationSource . Convention , ( ( IConventionEntityType ) VAR0 ) . GetCosmosContainerConfigurationSource ( ) ) ; VAR0 . SetCosmosContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetCosmosContainer ( ) ) ; Assert . Equal ( ConfigurationSource . Explicit , ( ( IConventionEntityType ) VAR0 ) . GetCosmosContainerConfigurationSource ( ) ) ; VAR0 . SetCosmosContainer ( null ) ; Assert . Equal ( nameof ( Customer ) , VAR0 . GetCosmosContainer ( ) ) ; Assert . Null ( ( ( IConventionEntityType ) VAR0 ) . GetCosmosContainerConfigurationSource ( ) ) ; ( ( IConventionModel ) VAR1 . Model ) . Builder . ForCosmosHasDefaultContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetCosmosContainer ( ) ) ;
var VAR3 = Guid . NewGuid ( ) ; var VAR0 = CreateCommand ( VAR2 , VAR3 , DbCommandMethod . ExecuteNonQuery ) ; VAR1 . Open ( ) ; var VAR4 = DateTimeOffset . UtcNow ;
var VAR4 = Guid . NewGuid ( ) ; var VAR0 = CreateCommand ( VAR2 , VAR4 , DbCommandMethod . ExecuteReader ) ; await VAR1 . OpenAsync ( VAR3 ) ; var VAR5 = DateTimeOffset . UtcNow ; var VAR6 = Stopwatch . StartNew ( ) ;
Check . NotNull ( VAR22 , nameof ( VAR22 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; VAR3 = VAR4 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR9 = VAR10 ; VAR11 = VAR12 ; VAR13 = VAR14 ; VAR15 = VAR16 ; VAR17 = VAR18 ; VAR19 = VAR20 ; VAR23 = VAR22 ;
Check . NotNull ( VAR21 , nameof ( VAR21 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = ( IRelationalDatabaseCreator ) VAR9 ; VAR10 = VAR11 ; VAR12 = VAR13 ; VAR14 = VAR15 ; VAR16 = VAR17 ; VAR18 = VAR19 ; VAR22 = VAR21 ;
Check . NotNull ( VAR11 , nameof ( VAR11 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = VAR9 ; VAR12 = VAR11 ;
Check . NotNull ( VAR17 , nameof ( VAR17 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = VAR9 ; VAR10 = VAR11 ; VAR12 = VAR13 ; VAR14 = VAR15 ; VAR18 = VAR17 ;
VAR0 ??  = new ObservableCollection < ISupplier > ( ) ; VAR1 = new ObservableCollection < IDiscontinuedProduct > ( ) ; VAR2 ??  = new ObservableCollection < IProductReview > ( ) ; VAR3 ??  = new ObservableCollection < IProductPhoto > ( ) ; VAR4 ??  = new ObservableCollection < IBarcode > ( ) ;
VAR0 ??  = new ObservableCollection < ISupplier > ( ) ; VAR1 = new ObservableCollection < IDiscontinuedProduct > ( ) ; VAR2 ??  = new ObservableCollection < IProductReview > ( ) ; VAR3 ??  = new ObservableCollection < IProductPhoto > ( ) ; VAR4 ??  = new ObservableCollection < IBarcode > ( ) ;
VAR0 . Add ( CreateBlogAndPosts < BlogAuto , PostAuto > ( new List < PostAuto > ( ) ) ) ; VAR0 . AddRange ( CreatePostsAndBlog < BlogAuto , PostAuto > ( ) ) ; VAR0 . Add ( CreateBlogAndPosts < BlogHiding , PostHiding > ( new List < PostHiding > ( ) ) ) ; VAR0 . AddRange ( CreatePostsAndBlog < BlogHiding , PostHiding > ( ) ) ; VAR0 . Add ( CreateBlogAndPosts < BlogFull , PostFull > ( new List < PostFull > ( ) ) ) ; VAR0 . AddRange ( CreatePostsAndBlog < BlogFull , PostFull > ( ) ) ; VAR0 . Add ( CreateBlogAndPosts < BlogFullExplicit , PostFullExplicit > ( new List < PostFullExplicit > ( ) ) ) ;
VAR0 . Add ( CreateBlogAndPosts < BlogReadOnly , PostReadOnly > ( new ObservableCollection < PostReadOnly > ( ) ) ) ; VAR0 . AddRange ( CreatePostsAndBlog < BlogReadOnly , PostReadOnly > ( ) ) ; VAR0 . Add ( CreateBlogAndPosts < BlogReadOnlyExplicit , PostReadOnlyExplicit > ( new Collection < PostReadOnlyExplicit > ( ) ) ) ; VAR0 . AddRange ( CreatePostsAndBlog < BlogReadOnlyExplicit , PostReadOnlyExplicit > ( ) ) ; VAR0 . Add ( CreateBlogAndPosts < BlogWriteOnly , PostWriteOnly > ( new List < PostWriteOnly > ( ) ) ) ; VAR0 . AddRange ( CreatePostsAndBlog < BlogWriteOnly , PostWriteOnly > ( ) ) ; VAR0 . Add ( CreateBlogAndPosts < BlogWriteOnlyExplicit , PostWriteOnlyExplicit > ( new HashSet < PostWriteOnlyExplicit > ( ) ) ) ; VAR0 . AddRange ( CreatePostsAndBlog < BlogWriteOnlyExplicit , PostWriteOnlyExplicit > ( ) ) ; VAR0 . Add ( CreateBlogAndPosts < BlogFields , PostFields > ( new List < PostFields > ( ) ) ) ; VAR0 . AddRange ( CreatePostsAndBlog < BlogFields , PostFields > ( ) ) ; VAR0 . Add ( CreateBlogAndPosts < BlogNavFields , PostNavFields > ( new List < PostNavFields > ( ) ) ) ;
Assert . Contains ( VAR1 . VAR2 , VAR11 => ReferenceEquals ( VAR11 , VAR0 ) ) ; Assert . Null ( VAR1 . VAR3 ) ; var VAR4 = VAR5 . Entry ( VAR0 ) ; Assert . Equal ( VAR1 . VAR6 , VAR4 . Property ( LITERAL ) . CurrentValue ) ; Assert . Equal ( VAR7 == null ? EntityState . Added : VAR8 , VAR4 . State ) ; Assert . Equal ( nameof ( ParentPN . VAR2 ) , VAR4 . Metadata . DefiningNavigationName ) ; Assert . Contains ( VAR0 . VAR10 , VAR11 => ReferenceEquals ( VAR11 , VAR9 ) ) ;
VAR0 = new QueryMetadataExtractingExpressionVisitor ( VAR1 ) . Visit ( VAR0 ) ; VAR0 = new AllAnyToContainsRewritingExpressionVisitor ( ) . Visit ( VAR0 ) ; VAR0 = new GroupJoinFlatteningExpressionVisitor ( ) . Visit ( VAR0 ) ; VAR0 = new NullCheckRemovingExpressionVisitor ( ) . Visit ( VAR0 ) ; VAR0 = new EntityEqualityRewritingExpressionVisitor ( VAR1 ) . Rewrite ( VAR0 ) ; VAR0 = new NavigationExpander ( VAR1 . Model ) . ExpandNavigations ( VAR0 ) ; VAR0 = new EnumerableToQueryableReMappingExpressionVisitor ( ) . Visit ( VAR0 ) ;
Assert . Equal ( LITERAL , VAR0 . Carbonation ) ; var VAR1 = VAR2 . Set < Lilt > ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR1 . SugarGrams ) ; Assert . Equal ( LITERAL , VAR1 . Carbonation ) ;
IMutableModel VAR0 = new Model ( TestRelationalConventionSetBuilder . Build ( ) ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( T1 ) ) ; var VAR2 = VAR1 . FindProperty ( LITERAL ) ; VAR2 . ValueGenerated = VAR3 ? ValueGenerated . OnAdd : ValueGenerated . Never ; VAR2 . SetColumnName ( LITERAL ) ; VAR1 . SetPrimaryKey ( VAR2 ) ; var VAR4 = VAR1 . FindProperty ( LITERAL ) ;
Assert . Equal ( nameof ( DbContext ) , VAR0 . Metadata . GetCosmosContainerName ( ) ) ; VAR0 . ForCosmosToContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetCosmosContainerName ( ) ) ; VAR0 . ForCosmosToContainer ( null ) ; Assert . Equal ( nameof ( DbContext ) , VAR0 . Metadata . GetCosmosContainerName ( ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . None , VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; VAR0 . SetSqlServerValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; VAR0 . SetSqlServerValueGenerationStrategy ( null ) ; Assert . Equal ( SqlServerValueGenerationStrategy . None , VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ;
ValueGenerationConvention VAR3 = new RelationalValueGenerationConvention ( Dependencies , VAR1 ) ; ReplaceConvention ( VAR2 . EntityTypeBaseTypeChangedConventions , VAR3 ) ; ReplaceConvention ( VAR2 . EntityTypePrimaryKeyChangedConventions , VAR3 ) ; ReplaceConvention ( VAR2 . ForeignKeyAddedConventions , VAR3 ) ; ReplaceConvention ( VAR2 . ForeignKeyRemovedConventions , VAR3 ) ;
var VAR0 = new KeyAttributeConvention ( VAR10 ) ; var VAR2 = new BackingFieldConvention ( VAR10 ) ; var VAR3 = new ConcurrencyCheckAttributeConvention ( VAR10 ) ; var VAR4 = new DatabaseGeneratedAttributeConvention ( VAR10 ) ; var VAR5 = new RequiredPropertyAttributeConvention ( VAR10 ) ; var VAR6 = new NonNullableReferencePropertyConvention ( VAR10 ) ; var VAR7 = new MaxLengthAttributeConvention ( VAR10 ) ; var VAR8 = new StringLengthAttributeConvention ( VAR10 ) ; var VAR9 = new TimestampAttributeConvention ( VAR10 ) ;
ReplaceConvention ( VAR0 . EntityTypePrimaryKeyChangedConventions , VAR1 ) ; VAR0 . KeyAddedConventions . Add ( VAR2 ) ; ReplaceConvention ( VAR0 . ForeignKeyAddedConventions , VAR1 ) ; ReplaceConvention ( VAR0 . ForeignKeyRemovedConventions , VAR1 ) ; var VAR3 = new SqlServerIndexConvention ( VAR4 , VAR5 ) ; VAR0 . EntityTypeBaseTypeChangedConventions . Add ( VAR3 ) ; VAR0 . ModelFinalizedConventions . Add ( VAR6 ) ;
var VAR0 = VAR1 . GetModel ( new Context1 ( ) , VAR2 ) ; var VAR5 = VAR1 . GetModel ( new Context2 ( ) , VAR2 ) ; Assert . NotSame ( VAR0 , VAR5 ) ; Assert . Same ( VAR0 , VAR1 . GetModel ( new Context1 ( ) , VAR2 ) ) ; Assert . Same ( VAR5 , VAR1 . GetModel ( new Context2 ( ) , VAR2 ) ) ;
Assert . Same ( VAR0 , RunConvention ( VAR0 ) ) ; IModel VAR1 = VAR0 . Metadata . Model ; var VAR2 = VAR1 . GetEntityTypes ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR2 . GetProperties ( ) . Count ( ) ) ; Assert . Equal ( 1 , VAR2 . GetKeys ( ) . Count ( ) ) ;
RunConvention ( VAR0 ) ; Assert . False ( VAR1 [ 0 ] . RequiresValueGenerator ( ) ) ; Assert . Equal ( ValueGenerated . Never , VAR1 [ 0 ] . ValueGenerated ) ; VAR2 . HasNoRelationship ( VAR0 . Metadata , ConfigurationSource . Convention ) ; RunConvention ( VAR2 , VAR0 . Metadata ) ;
var VAR2 = VAR1 . Metadata ; Assert . NotNull ( VAR1 . HasCheckConstraint ( LITERAL , LITERAL ) ) ; Assert . Equal ( LITERAL , VAR2 . GetCheckConstraints ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR2 . GetCheckConstraints ( ) . Single ( ) . Sql ) ; Assert . NotNull ( VAR1 . HasCheckConstraint ( LITERAL , LITERAL , fromDataAnnotation : true ) ) ; Assert . Equal ( LITERAL , VAR2 . GetCheckConstraints ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR2 . GetCheckConstraints ( ) . Single ( ) . Sql ) ; Assert . Null ( VAR1 . HasCheckConstraint ( LITERAL , LITERAL ) ) ; Assert . Equal ( LITERAL , VAR2 . GetCheckConstraints ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR2 . GetCheckConstraints ( ) . Single ( ) . Sql ) ;
Assert . Same ( VAR0 . FindEntry ( VAR1 ) . GetInfrastructure ( ) , VAR2 . Entry ( VAR1 ) . GetInfrastructure ( ) ) ; VAR0 . CurrentValue = null ; Assert . Null ( VAR1 . VAR3 ) ; Assert . Null ( VAR4 . VAR5 ) ; Assert . Null ( VAR1 . VAR6 ) ; Assert . Null ( VAR0 . CurrentValue ) ; Assert . Null ( VAR0 . FindEntry ( VAR1 ) ) ;
Assert . Same ( VAR0 . FindEntry ( VAR1 ) . GetInfrastructure ( ) , VAR2 . Entry ( VAR1 ) . GetInfrastructure ( ) ) ; VAR0 . CurrentValue = null ; Assert . Null ( VAR1 . VAR3 ) ; Assert . Null ( VAR4 . VAR5 ) ; Assert . Null ( VAR1 . VAR6 ) ; Assert . Null ( VAR0 . CurrentValue ) ; Assert . Null ( VAR0 . FindEntry ( VAR1 ) ) ;
var VAR0 = VAR1 . Entry ( VAR2 ) . Collection ( VAR3 => VAR3 . VAR4 ) . FindEntry ( VAR5 ) ; Assert . Equal ( VAR2 . VAR6 , VAR0 . Property ( LITERAL ) . CurrentValue ) ; Assert . Equal ( EntityState . Added , VAR0 . State ) ; Assert . Equal ( nameof ( ParentPN . VAR4 ) , VAR0 . Metadata . DefiningNavigationName ) ; Assert . Contains ( VAR7 , VAR5 . VAR8 ) ; var VAR9 = VAR0 . Collection ( VAR3 => VAR3 . VAR8 ) . FindEntry ( VAR7 ) ;
var VAR0 = VAR1 . Entry ( VAR2 ) . Collection ( VAR3 => VAR3 . VAR4 ) . FindEntry ( VAR5 ) ; VAR6 . VAR7 = VAR2 . VAR4 ; VAR2 . VAR4 = null ; VAR1 . ChangeTracker . DetectChanges ( ) ; Assert . Equal ( VAR8 == EntityState . Added ? LITERAL : LITERAL , VAR1 . ChangeTracker . Entries ( ) . Count ( ) ) ; Assert . Null ( VAR2 . VAR7 ) ; Assert . Null ( VAR2 . VAR4 ) ; Assert . Contains ( VAR5 , VAR6 . VAR7 ) ; Assert . Null ( VAR6 . VAR4 ) ; Assert . Equal ( VAR8 , VAR1 . Entry ( VAR2 ) . State ) ; Assert . Equal ( VAR8 , VAR1 . Entry ( VAR6 ) . State ) ; Assert . Equal ( VAR8 == EntityState . Added ? EntityState . Detached : EntityState . Deleted , VAR0 . State ) ; var VAR9 = VAR1 . Entry ( VAR6 ) . Collection ( VAR3 => VAR3 . VAR7 ) . FindEntry ( VAR5 ) ;
var VAR0 = VAR1 . Entry ( VAR2 ) . Collection ( VAR3 => VAR3 . VAR4 ) . FindEntry ( VAR5 ) ; VAR6 . VAR7 = VAR2 . VAR4 ; VAR2 . VAR4 = null ; VAR1 . ChangeTracker . DetectChanges ( ) ; Assert . Equal ( VAR8 == EntityState . Added ? LITERAL : LITERAL , VAR1 . ChangeTracker . Entries ( ) . Count ( ) ) ; Assert . Empty ( VAR2 . VAR7 ) ; Assert . Null ( VAR2 . VAR4 ) ; Assert . Contains ( VAR5 , VAR6 . VAR7 ) ; Assert . Null ( VAR6 . VAR4 ) ; Assert . Same ( VAR6 , VAR5 . VAR9 ) ; Assert . Equal ( VAR8 , VAR1 . Entry ( VAR2 ) . State ) ; Assert . Equal ( VAR8 , VAR1 . Entry ( VAR6 ) . State ) ; Assert . Equal ( VAR8 == EntityState . Added ? EntityState . Detached : EntityState . Deleted , VAR0 . State ) ; var VAR10 = VAR1 . Entry ( VAR6 ) . Collection ( VAR3 => VAR3 . VAR7 ) . FindEntry ( VAR5 ) ;
var VAR0 = VAR1 . Entry ( VAR2 ) . Collection ( VAR3 => VAR3 . VAR4 ) . FindEntry ( VAR5 ) ; Assert . Equal ( VAR2 . VAR6 , VAR0 . Property ( LITERAL ) . CurrentValue ) ; Assert . Equal ( EntityState . Added , VAR0 . State ) ; Assert . Equal ( nameof ( VAR7 . VAR4 ) , VAR0 . Metadata . DefiningNavigationName ) ; Assert . Contains ( VAR8 , VAR5 . VAR9 ) ; Assert . Same ( VAR5 , VAR8 . VAR7 ) ; var VAR10 = VAR0 . Collection ( VAR3 => VAR3 . VAR9 ) . FindEntry ( VAR8 ) ;
var VAR0 = ( IConventionDbFunctionBuilder ) new DbFunctionBuilder ( ( IMutableDbFunction ) VAR1 . Value ) ; var VAR2 = VAR0 . Metadata . MethodInfo ; var VAR3 = VAR2 . GetCustomAttributes < DbFunctionAttribute > ( ) . SingleOrDefault ( ) ; VAR0 . HasName ( VAR3 ? . FunctionName ?? VAR2 . Name ) ; VAR0 . HasSchema ( VAR3 ? . Schema ) ;
VerifyIgnoreProperty ( typeof ( OrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : true ) ; VerifyIgnoreProperty ( typeof ( SpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : true ) ; VerifyIgnoreProperty ( typeof ( ExtraSpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : true ) ; VerifyIgnoreProperty ( typeof ( OrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : true ) ; VerifyIgnoreProperty ( typeof ( SpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : true ) ; VerifyIgnoreProperty ( typeof ( ExtraSpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : true ) ; VerifyIgnoreProperty ( typeof ( OrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : false ) ; VerifyIgnoreProperty ( typeof ( SpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : false ) ; VerifyIgnoreProperty ( typeof ( ExtraSpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : false ) ; VerifyIgnoreProperty ( typeof ( OrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : false ) ; VerifyIgnoreProperty ( typeof ( SpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : false ) ; VerifyIgnoreProperty ( typeof ( ExtraSpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : false ) ;
VerifyIgnoreNavigation ( typeof ( OrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : true ) ; VerifyIgnoreNavigation ( typeof ( SpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : true ) ; VerifyIgnoreNavigation ( typeof ( ExtraSpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : true ) ; VerifyIgnoreNavigation ( typeof ( OrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : true ) ; VerifyIgnoreNavigation ( typeof ( SpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : true ) ; VerifyIgnoreNavigation ( typeof ( ExtraSpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : true ) ; VerifyIgnoreNavigation ( typeof ( OrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : false ) ; VerifyIgnoreNavigation ( typeof ( SpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : false ) ; VerifyIgnoreNavigation ( typeof ( ExtraSpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : true , VAR3 : false ) ; VerifyIgnoreNavigation ( typeof ( OrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : false ) ; VerifyIgnoreNavigation ( typeof ( SpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : false ) ; VerifyIgnoreNavigation ( typeof ( ExtraSpecialOrderMinimal ) , VAR0 , VAR1 , VAR2 : false , VAR3 : false ) ;
var VAR0 = VAR1 . GetTableName ( ) ; var VAR2 = VAR1 . GetSchema ( ) ; var VAR3 = VAR1 . Model . GetDefaultSchema ( ) ; var VAR4 = VAR2 != null && VAR2 != VAR3 ; var VAR5 = VAR4 || VAR0 != null && VAR0 != VAR1 . GetDbSetName ( ) ;
var VAR0 = VAR1 . Model ; var VAR2 = VAR1 . Model ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR2 . GetSqlServerValueGenerationStrategy ( ) ) ; Assert . Equal ( LITERAL , VAR2 . GetSqlServerHiLoSequenceName ( ) ) ; Assert . Equal ( LITERAL , VAR2 . GetSqlServerHiLoSequenceSchema ( ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Equal ( SqlServerModelExtensions . DefaultHiLoSequenceName , VAR0 . GetSqlServerHiLoSequenceName ( ) ) ; Assert . NotNull ( VAR1 . FindSequence ( SqlServerModelExtensions . DefaultHiLoSequenceName ) ) ; Assert . NotNull ( VAR1 . FindSequence ( SqlServerModelExtensions . DefaultHiLoSequenceName ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Equal ( LITERAL , VAR0 . GetSqlServerHiLoSequenceName ( ) ) ; Assert . Null ( VAR0 . GetSqlServerHiLoSequenceSchema ( ) ) ; Assert . NotNull ( VAR1 . FindSequence ( LITERAL ) ) ; var VAR2 = VAR1 . FindSequence ( LITERAL ) ;
VAR0 . Entity < VAR1 > ( ) . Property ( VAR2 => VAR2 . VAR3 ) . ForSqlServerUseIdentityColumn ( ) ; var VAR4 = VAR0 . Model ; var VAR5 = VAR4 . FindEntityType ( typeof ( VAR1 ) ) . FindProperty ( LITERAL ) ; Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR5 . GetSqlServerValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR5 . ValueGenerated ) ; Assert . Equal ( 1 , VAR5 . GetSqlServerIdentitySeed ( ) ) ; Assert . Equal ( 1 , VAR5 . GetSqlServerIdentityIncrement ( ) ) ; Assert . Null ( VAR5 . GetSqlServerHiLoSequenceName ( ) ) ; Assert . Null ( VAR4 . FindSequence ( SqlServerModelExtensions . DefaultHiLoSequenceName ) ) ; Assert . Null ( VAR4 . FindSequence ( SqlServerModelExtensions . DefaultHiLoSequenceName ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Equal ( 1 , VAR0 . GetSqlServerIdentitySeed ( ) ) ; Assert . Equal ( 1 , VAR0 . GetSqlServerIdentityIncrement ( ) ) ; Assert . Null ( VAR0 . GetSqlServerHiLoSequenceName ( ) ) ; Assert . Null ( VAR1 . FindSequence ( SqlServerModelExtensions . DefaultHiLoSequenceName ) ) ; Assert . Null ( VAR1 . FindSequence ( SqlServerModelExtensions . DefaultHiLoSequenceName ) ) ;
var VAR0 = VAR1 . Property ( typeof ( int ) , LITERAL , ConfigurationSource . DataAnnotation ) ; VAR0 . IsConcurrencyToken ( true , ConfigurationSource . Convention ) ; VAR0 . HasMaxLength ( 1 , ConfigurationSource . Explicit ) ; var VAR2 = VAR3 . Entity ( typeof ( BackOrder ) , ConfigurationSource . Convention ) ; VAR2 . HasBaseType ( VAR4 . Metadata , ConfigurationSource . Convention ) ; var VAR5 = VAR2 . Property ( typeof ( byte ) , LITERAL , ConfigurationSource . Convention ) ; VAR5 . HasMaxLength ( LITERAL , ConfigurationSource . Convention ) ; var VAR6 = VAR4 . Property ( typeof ( int ) , LITERAL , ConfigurationSource . Convention ) ;
Assert . NotNull ( VAR0 . Property ( typeof ( int ) , Order . VAR1 . Name , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR0 . Ignore ( Order . VAR1 . Name , ConfigurationSource . Convention ) ) ; Assert . NotNull ( VAR2 . FindProperty ( Order . VAR1 . Name ) ) ; Assert . Null ( VAR0 . Ignore ( Order . VAR1 . Name , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR2 . FindProperty ( Order . VAR1 . Name ) ) ; Assert . NotNull ( VAR0 . Property ( typeof ( int ) , Order . VAR1 . Name , ConfigurationSource . Explicit ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetConstraintName ( ) ) ; var VAR1 = VAR0 . DeclaringEntityType ; Assert . Equal ( nameof ( VAR2 . VAR3 ) , VAR1 . FindPrimaryKey ( ) . VAR4 [ 0 ] . VAR5 ) ; Assert . Equal ( LITERAL , VAR1 . GetKeys ( ) . VAR6 ( ) . GetName ( ) ) ; Assert . Equal ( LITERAL , VAR1 . GetIndexes ( ) . Count ( ) ) ; var VAR7 = VAR1 . GetIndexes ( ) . First ( ) ; Assert . Equal ( LITERAL , VAR7 . VAR4 [ 0 ] . VAR5 ) ; Assert . True ( VAR7 . IsUnique ) ; Assert . Equal ( LITERAL , VAR7 . GetFilter ( ) ) ; var VAR8 = VAR1 . GetIndexes ( ) . Last ( ) ; Assert . Equal ( LITERAL , VAR8 . VAR4 [ 0 ] . VAR5 ) ; Assert . False ( VAR8 . IsUnique ) ; Assert . Null ( VAR8 . GetFilter ( ) ) ; Assert . Equal ( new object [  ] { 1 , - 1 } , VAR1 . GetSeedData ( ) . VAR6 ( ) . Values ) ; Assert . Equal ( nameof ( VAR9 ) , VAR1 . GetTableName ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetFilter ( ) ) ; var VAR1 = VAR2 . GetIndexes ( ) . Last ( ) ; Assert . Equal ( LITERAL , VAR1 . VAR3 [ 0 ] . VAR4 ) ; Assert . False ( VAR1 . IsUnique ) ; Assert . Null ( VAR1 . GetFilter ( ) ) ; Assert . Equal ( new object [  ] { 1 , - 1 } , VAR2 . GetSeedData ( ) . VAR5 ( ) . Values ) ; Assert . Equal ( nameof ( VAR6 ) , VAR2 . GetTableName ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetFilter ( ) ) ; var VAR1 = VAR2 . GetIndexes ( ) . Last ( ) ; Assert . Equal ( LITERAL , VAR1 . VAR3 [ 0 ] . VAR4 ) ; Assert . False ( VAR1 . IsUnique ) ; Assert . Null ( VAR1 . GetFilter ( ) ) ; Assert . Equal ( nameof ( EntityWithStringProperty ) , VAR2 . GetTableName ( ) ) ;
Assert . Equal ( VAR0 . GetConstraintName ( ) , VAR1 . GetConstraintName ( ) ) ; var VAR2 = VAR3 . FindIndex ( VAR3 . FindProperty ( LITERAL ) ) ; var VAR4 = VAR5 . FindIndex ( VAR5 . FindProperty ( LITERAL ) ) ; Assert . Equal ( VAR2 . GetName ( ) , VAR4 . GetName ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetTableName ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Name ) ; var VAR1 = Assert . Single ( VAR0 . GetProperties ( ) ) ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetColumnName ( ) ) ;
Assert . Null ( VAR0 . FindEntityType ( LITERAL ) . FindProperty ( LITERAL ) . GetColumnType ( ) ) ; Assert . Null ( VAR0 . FindEntityType ( LITERAL ) . FindProperty ( LITERAL ) . GetColumnType ( ) ) ; Assert . Null ( VAR0 . FindEntityType ( LITERAL ) . FindProperty ( LITERAL ) . GetColumnType ( ) ) ; Assert . Null ( VAR0 . FindEntityType ( LITERAL ) . FindProperty ( LITERAL ) . GetColumnType ( ) ) ; Assert . Null ( VAR0 . FindEntityType ( LITERAL ) . FindProperty ( LITERAL ) . GetColumnType ( ) ) ;
VAR0 . GetEntityTypeErrors ( ) . Add ( LITERAL , LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetEntityTypeErrors ( ) [ LITERAL ] ) ; VAR0 . SetEntityTypeErrors ( new Dictionary < string , string > ( ) ) ; Assert . Empty ( VAR0 . GetEntityTypeErrors ( ) . Values ) ; VAR0 . GetEntityTypeErrors ( ) [ LITERAL ] = LITERAL ; VAR0 . GetEntityTypeErrors ( ) . Clear ( ) ; Assert . Empty ( VAR0 . GetEntityTypeErrors ( ) . Values ) ;
VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . DataAnnotation ) ; new EntityTypeBuilder ( VAR1 . Metadata ) . HasDiscriminator ( LITERAL , typeof ( string ) ) ; Assert . True ( new DiscriminatorConvention ( VAR2 ) . Apply ( VAR0 , oldBaseType : null ) ) ; var VAR3 = VAR0 . Metadata . GetDiscriminatorProperty ( ) ; Assert . NotNull ( VAR3 ) ; Assert . Same ( VAR3 , VAR1 . Metadata . GetDiscriminatorProperty ( ) ) ; Assert . Equal ( LITERAL , VAR3 . VAR4 ) ; Assert . Equal ( typeof ( string ) , VAR3 . ClrType ) ; Assert . Equal ( typeof ( EntityBase ) . VAR4 , VAR1 . Metadata . GetDiscriminatorValue ( ) ) ; Assert . Equal ( typeof ( Entity ) . VAR4 , VAR0 . Metadata . GetDiscriminatorValue ( ) ) ;
VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . DataAnnotation ) ; new EntityTypeBuilder ( VAR1 . Metadata ) . HasDiscriminator ( LITERAL , typeof ( int ) ) ; Assert . True ( new DiscriminatorConvention ( VAR2 ) . Apply ( VAR0 , oldBaseType : null ) ) ; var VAR3 = VAR0 . Metadata . GetDiscriminatorProperty ( ) ; Assert . NotNull ( VAR3 ) ; Assert . Same ( VAR3 , VAR1 . Metadata . GetDiscriminatorProperty ( ) ) ; Assert . Equal ( LITERAL , VAR3 . VAR4 ) ; Assert . Equal ( typeof ( int ) , VAR3 . ClrType ) ; Assert . Null ( VAR1 . Metadata . GetDiscriminatorValue ( ) ) ; Assert . Null ( VAR0 . Metadata . GetDiscriminatorValue ( ) ) ;
var VAR0 = VAR1 . Model . FindCheckConstraint ( LITERAL , LITERAL ) ; Assert . NotNull ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . Sql ) ;
var VAR0 = VAR1 . Model . FindCheckConstraint ( LITERAL , LITERAL , LITERAL ) ; Assert . NotNull ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . Sql ) ;
Assert . Equal ( LITERAL , VAR0 . GetTableName ( ) ) ; Assert . Null ( VAR0 . GetSchema ( ) ) ; VAR1 . HasDefaultSchema ( LITERAL ) ; Assert . Equal ( LITERAL , VAR1 . Model . GetDefaultSchema ( ) ) ; Assert . Equal ( LITERAL , VAR0 . GetTableName ( ) ) ; Assert . Equal ( LITERAL , VAR0 . GetSchema ( ) ) ;
Assert . False ( VAR0 . IsFixedLength ( ) ) ; VAR0 . SetIsFixedLength ( true ) ; Assert . True ( VAR0 . IsFixedLength ( ) ) ; VAR0 . SetIsFixedLength ( false ) ; Assert . False ( VAR0 . IsFixedLength ( ) ) ;
Assert . Null ( VAR0 . GetSchema ( ) ) ; VAR0 . SetSchema ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetSchema ( ) ) ; VAR0 . SetSchema ( null ) ; Assert . Null ( VAR0 . GetSchema ( ) ) ;
Assert . Null ( VAR0 . GetComputedColumnSql ( ) ) ; VAR0 . SetComputedColumnSql ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetComputedColumnSql ( ) ) ; VAR0 . SetComputedColumnSql ( null ) ; Assert . Null ( VAR0 . GetComputedColumnSql ( ) ) ;
Assert . Null ( VAR0 . GetDefaultValue ( ) ) ; var VAR1 = new Guid ( LITERAL ) ; VAR0 . SetDefaultValue ( VAR1 ) ; Assert . Equal ( VAR1 , VAR0 . GetDefaultValue ( ) ) ; VAR0 . SetDefaultValue ( null ) ; Assert . Null ( VAR0 . GetDefaultValue ( ) ) ;
Assert . Null ( VAR0 . GetDefaultValue ( ) ) ; VAR0 . SetDefaultValue ( MyEnum . Mon ) ; Assert . Equal ( typeof ( MyEnum ) , VAR0 . GetDefaultValue ( ) . GetType ( ) ) ; Assert . Equal ( MyEnum . Mon , VAR0 . GetDefaultValue ( ) ) ; VAR0 . SetDefaultValue ( null ) ; Assert . Null ( VAR0 . GetDefaultValue ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetConstraintName ( ) ) ; VAR0 . SetConstraintName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetConstraintName ( ) ) ; VAR0 . SetConstraintName ( null ) ; Assert . Equal ( LITERAL , VAR0 . GetConstraintName ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetName ( ) ) ; VAR0 . SetName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetName ( ) ) ; VAR0 . SetName ( null ) ; Assert . Equal ( LITERAL , VAR0 . GetName ( ) ) ;
Assert . Null ( VAR0 . GetDiscriminatorProperty ( ) ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . SetDiscriminatorProperty ( VAR1 ) ; Assert . Same ( VAR1 , VAR0 . GetDiscriminatorProperty ( ) ) ; VAR0 . SetDiscriminatorProperty ( null ) ; Assert . Null ( VAR0 . GetDiscriminatorProperty ( ) ) ;
var VAR0 = VAR1 . Property ( typeof ( string ) , LITERAL , ConfigurationSource . Explicit ) ; VAR0 . HasAnnotation ( RelationalAnnotationNames . ColumnName , LITERAL , ConfigurationSource . Convention ) ; VAR0 . HasAnnotation ( RelationalAnnotationNames . ColumnType , LITERAL , ConfigurationSource . Convention ) ; new RelationalColumnAttributeConvention ( new TestLogger < DbLoggerCategory . Model , TestRelationalLoggingDefinitions > ( ) ) . Apply ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetColumnName ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetColumnType ( ) ) ;
var VAR0 = VAR1 . Property ( typeof ( string ) , LITERAL , ConfigurationSource . Explicit ) ; VAR0 . HasAnnotation ( RelationalAnnotationNames . ColumnName , LITERAL , ConfigurationSource . Explicit ) ; VAR0 . HasAnnotation ( RelationalAnnotationNames . ColumnType , LITERAL , ConfigurationSource . Explicit ) ; new RelationalColumnAttributeConvention ( new TestLogger < DbLoggerCategory . Model , TestRelationalLoggingDefinitions > ( ) ) . Apply ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetColumnName ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetColumnType ( ) ) ;
IMutableModel VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddSequence ( LITERAL ) ; Assert . Null ( VAR1 . Schema ) ; VAR0 . SetDefaultSchema ( LITERAL ) ;
IMutableModel VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddSequence ( LITERAL , LITERAL ) ; VAR1 . StartValue = LITERAL ; VAR1 . IncrementBy = LITERAL ; VAR1 . ClrType = typeof ( int ) ; VAR1 = VAR0 . FindSequence ( LITERAL , LITERAL ) ;
VAR0 . AddProperty ( LITERAL , typeof ( bool ? ) ) . SetDefaultValueSql ( LITERAL ) ; VAR0 . AddProperty ( LITERAL , typeof ( bool ) ) . SetDefaultValueSql ( LITERAL ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( bool ) ) ; VAR1 . SetDefaultValueSql ( LITERAL ) ;
Assert . Equal ( VAR0 . GetConstraintName ( ) , VAR1 . GetConstraintName ( ) ) ; var VAR2 = VAR0 . DeclaringEntityType . GetDeclaredIndexes ( ) . Single ( ) ; var VAR3 = VAR1 . DeclaringEntityType . GetDeclaredIndexes ( ) . Single ( ) ; Assert . NotSame ( VAR2 , VAR3 ) ; Assert . Equal ( VAR2 . GetName ( ) , VAR3 . GetName ( ) ) ;
VAR0 . SetColumnName ( LITERAL ) ; VAR1 . SetPrimaryKey ( VAR0 ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . IsConcurrencyToken = VAR3 ; VAR2 . SetColumnName ( LITERAL ) ; VAR2 . ValueGenerated = VAR3 ? ValueGenerated . OnAddOrUpdate : ValueGenerated . Never ; var VAR4 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR4 . IsConcurrencyToken = VAR3 ; VAR4 . SetColumnName ( LITERAL ) ; VAR4 . ValueGenerated = VAR3 ? ValueGenerated . OnUpdate : ValueGenerated . Never ;
VAR0 . SetColumnName ( LITERAL ) ; VAR1 . SetPrimaryKey ( VAR0 ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . SetColumnName ( LITERAL ) ;
Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . GetColumnName ( ) ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . GetColumnName ( ) ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . GetColumnName ( ) ) ; Assert . Equal ( LITERAL , VAR1 . FindProperty ( LITERAL ) . GetColumnName ( ) ) ; Assert . Equal ( LITERAL , VAR1 . FindProperty ( LITERAL ) . GetColumnName ( ) ) ; Assert . Equal ( LITERAL , VAR2 . FindProperty ( LITERAL ) . GetColumnName ( ) ) ; Assert . Equal ( LITERAL , VAR2 . FindProperty ( LITERAL ) . GetColumnName ( ) ) ;
Assert . NotNull ( VAR0 . IsConcurrencyToken ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR0 . IsConcurrencyToken ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . IsConcurrencyToken ) ; Assert . Null ( VAR0 . IsConcurrencyToken ( true , ConfigurationSource . Convention ) ) ;
Assert . NotNull ( VAR0 . IsConcurrencyToken ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR0 . IsConcurrencyToken ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR1 . IsConcurrencyToken ) ; Assert . NotNull ( VAR0 . IsConcurrencyToken ( false , ConfigurationSource . Explicit ) ) ;
Assert . NotNull ( VAR0 . HasValueGenerator ( factory , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR0 . HasValueGenerator ( ( VAR1 , VAR2 ) => new CustomValueGenerator2 ( ) , ConfigurationSource . DataAnnotation ) ) ; Assert . IsType < CustomValueGenerator1 > ( VAR3 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . True ( VAR3 . RequiresValueGenerator ( ) ) ; Assert . NotNull ( VAR0 . HasValueGenerator ( ( VAR1 , VAR2 ) => new CustomValueGenerator2 ( ) , ConfigurationSource . Explicit ) ) ;
Assert . NotNull ( VAR0 . HasValueGenerator ( ( VAR1 , VAR2 ) => new CustomValueGenerator1 ( ) , ConfigurationSource . DataAnnotation ) ) ; Assert . IsType < CustomValueGenerator1 > ( VAR3 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . Equal ( ValueGenerated . Never , VAR3 . ValueGenerated ) ; Assert . True ( VAR3 . RequiresValueGenerator ( ) ) ; Assert . Null ( VAR0 . HasValueGenerator ( ( Func < IProperty , IEntityType , ValueGenerator > ) null , ConfigurationSource . Convention ) ) ; Assert . IsType < CustomValueGenerator1 > ( VAR3 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . Equal ( ValueGenerated . Never , VAR3 . ValueGenerated ) ; Assert . True ( VAR3 . RequiresValueGenerator ( ) ) ; Assert . NotNull ( VAR0 . HasValueGenerator ( ( Func < IProperty , IEntityType , ValueGenerator > ) null , ConfigurationSource . Explicit ) ) ; Assert . Null ( VAR3 . GetValueGeneratorFactory ( ) ) ;
Assert . NotNull ( VAR0 . HasValueGenerator ( typeof ( CustomValueGenerator1 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR0 . HasValueGenerator ( typeof ( CustomValueGenerator2 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . IsType < CustomValueGenerator2 > ( VAR1 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . True ( VAR1 . RequiresValueGenerator ( ) ) ; Assert . Null ( VAR0 . HasValueGenerator ( typeof ( CustomValueGenerator1 ) , ConfigurationSource . Convention ) ) ;
Assert . Null ( VAR0 . HasValueGenerator ( ( Type ) null , ConfigurationSource . Convention ) ) ; Assert . IsType < CustomValueGenerator1 > ( VAR1 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . Equal ( ValueGenerated . Never , VAR1 . ValueGenerated ) ; Assert . True ( VAR1 . RequiresValueGenerator ( ) ) ; Assert . NotNull ( VAR0 . HasValueGenerator ( ( Type ) null , ConfigurationSource . Explicit ) ) ; Assert . Null ( VAR1 . GetValueGeneratorFactory ( ) ) ;
Assert . NotNull ( VAR0 . IsUnicode ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR0 . IsUnicode ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . IsUnicode ( ) . Value ) ; Assert . Null ( VAR0 . IsUnicode ( true , ConfigurationSource . Convention ) ) ;
VAR0 . SetIsUnicode ( true ) ; var VAR1 = VAR0 . Builder ; Assert . NotNull ( VAR1 . IsUnicode ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR1 . IsUnicode ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . IsUnicode ( ) . Value ) ; Assert . NotNull ( VAR1 . IsUnicode ( false , ConfigurationSource . Explicit ) ) ;
Assert . NotNull ( VAR0 . IsRequired ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR0 . IsRequired ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR1 . IsNullable ) ; Assert . Null ( VAR0 . IsRequired ( true , ConfigurationSource . Convention ) ) ;
Assert . NotNull ( VAR0 . BeforeSave ( PropertySaveBehavior . Throw , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR0 . BeforeSave ( PropertySaveBehavior . Ignore , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR1 . GetBeforeSaveBehavior ( ) ) ; Assert . Null ( VAR0 . BeforeSave ( PropertySaveBehavior . Save , ConfigurationSource . Convention ) ) ;
Assert . NotNull ( VAR0 . AfterSave ( PropertySaveBehavior . Throw , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR0 . AfterSave ( PropertySaveBehavior . Ignore , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( PropertySaveBehavior . Throw , VAR1 . GetAfterSaveBehavior ( ) ) ; Assert . NotNull ( VAR0 . AfterSave ( PropertySaveBehavior . Ignore , ConfigurationSource . Explicit ) ) ;
VAR0 . HasRelationship ( VAR1 . Metadata , ConfigurationSource . Convention ) ; VAR0 . HasRelationship ( VAR1 . Metadata , ConfigurationSource . Convention ) ; VAR1 . HasRelationship ( VAR0 . Metadata , ConfigurationSource . Convention ) ; VAR1 . HasRelationship ( VAR0 . Metadata , ConfigurationSource . Convention ) ; VAR2 . HasRelationship ( VAR2 . Metadata , ConfigurationSource . Convention ) ; VAR2 . HasRelationship ( VAR2 . Metadata , ConfigurationSource . Convention ) ;
Assert . NotNull ( VAR0 . HasNoKey ( ConfigurationSource . Convention ) ) ; Assert . True ( VAR1 . IsKeyless ) ; Assert . Equal ( ConfigurationSource . Convention , VAR1 . GetIsKeylessConfigurationSource ( ) ) ; Assert . NotNull ( VAR0 . HasNoKey ( ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR1 . IsKeyless ) ; Assert . Equal ( ConfigurationSource . DataAnnotation , VAR1 . GetIsKeylessConfigurationSource ( ) ) ; Assert . NotNull ( VAR0 . HasKey ( new [ ] { Order . VAR2 . Name } , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . IsKeyless ) ;
Assert . Null ( VAR0 . HasNoKey ( ConfigurationSource . Convention ) ) ; Assert . Equal ( LITERAL , VAR1 . GetKeys ( ) . Count ( ) ) ; Assert . NotNull ( VAR0 . HasNoKey ( ConfigurationSource . Explicit ) ) ; Assert . Empty ( VAR1 . GetKeys ( ) ) ; Assert . Null ( VAR0 . HasKey ( new [ ] { Order . VAR2 . Name } , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR1 . IsKeyless ) ; Assert . Equal ( ConfigurationSource . Explicit , VAR1 . GetIsKeylessConfigurationSource ( ) ) ;
Assert . NotNull ( VAR0 . HasAnnotation ( LITERAL , 1 , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR0 . HasAnnotation ( LITERAL , LITERAL , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( 1 , VAR1 . GetAnnotations ( ) . Single ( ) . Value ) ; Assert . NotNull ( VAR0 . HasAnnotation ( LITERAL , LITERAL , ConfigurationSource . Explicit ) ) ;
Assert . NotNull ( VAR0 . Ignore ( typeof ( VAR1 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR2 . FindEntityType ( typeof ( VAR1 ) ) ) ; Assert . NotNull ( VAR0 . Ignore ( typeof ( VAR1 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR0 . Entity ( typeof ( VAR1 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR0 . Entity ( typeof ( VAR1 ) , ConfigurationSource . Explicit ) ) ; Assert . NotNull ( VAR0 . Ignore ( typeof ( VAR1 ) , ConfigurationSource . Explicit ) ) ;
var VAR0 = VAR1 . AddEntityType ( typeof ( VAR2 ) , ConfigurationSource . Explicit ) ; var VAR3 = CreateModelBuilder ( VAR1 ) ; Assert . Same ( VAR0 , VAR3 . Entity ( typeof ( VAR2 ) , ConfigurationSource . Convention ) . Metadata ) ; Assert . Null ( VAR3 . Ignore ( typeof ( VAR2 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR1 . FindEntityType ( typeof ( VAR2 ) ) ) ; Assert . NotNull ( VAR3 . Ignore ( typeof ( VAR2 ) , ConfigurationSource . Explicit ) ) ;
Assert . Equal ( CoreResources . LogDetectChangesStarting ( new TestLogger < TestLoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ; ( level , _ , message , _ , _ ) = VAR0 . Log . Single ( VAR1 => VAR1 . VAR2 . VAR2 == CoreEventId . DetectChangesCompleted . VAR2 ) ; Assert . Equal ( LogLevel . Debug , level ) ; Assert . Equal ( CoreResources . LogDetectChangesCompleted ( new TestLogger < TestLoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ;
new DerivedTypeDiscoveryConvention ( new TestLogger < DbLoggerCategory . Model , TestLoggingDefinitions > ( ) ) . Apply ( VAR0 ) ; Assert . Same ( VAR0 . Metadata , VAR1 . Metadata . BaseType ) ; Assert . Same ( VAR0 . Metadata , VAR2 . Metadata . BaseType ) ; new DerivedTypeDiscoveryConvention ( new TestLogger < DbLoggerCategory . Model , TestLoggingDefinitions > ( ) ) . Apply ( VAR1 ) ;
VAR0 . SetField ( VAR1 ) ; Assert . Equal ( VAR1 , VAR0 . GetFieldName ( ) ) ; var VAR2 = VAR0 . FieldInfo ; Assert . Equal ( VAR1 , VAR2 . Name ) ; Assert . Same ( VAR3 ?? ( MemberInfo ) VAR2 , VAR0 . GetIdentifyingMemberInfo ( ) ) ; VAR0 . SetField ( null ) ;
VAR0 . SetField ( null ) ; Assert . Null ( VAR0 . GetFieldName ( ) ) ; Assert . Null ( VAR0 . FieldInfo ) ; Assert . Same ( VAR1 , VAR0 . GetIdentifyingMemberInfo ( ) ) ; VAR0 . FieldInfo = VAR2 ; Assert . Equal ( VAR3 , VAR0 . GetFieldName ( ) ) ; Assert . Same ( VAR1 ?? ( MemberInfo ) VAR2 , VAR0 . GetIdentifyingMemberInfo ( ) ) ; VAR0 . FieldInfo = null ;
VAR0 . FieldInfo = VAR1 ; Assert . Equal ( VAR2 , VAR0 . GetFieldName ( ) ) ; Assert . Same ( VAR3 ?? ( MemberInfo ) VAR1 , VAR0 . GetIdentifyingMemberInfo ( ) ) ; VAR0 . FieldInfo = null ;
var VAR0 = VAR1 . Entry ( new T ( ) ) ; VAR2 = VAR0 . Entity ; VAR0 . Property ( LITERAL ) . CurrentValue = LITERAL ; VAR0 . Property ( LITERAL ) . CurrentValue = LITERAL ; VAR0 . State = EntityState . Added ;
IMutableModel VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( Customer ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . SetPrimaryKey ( VAR2 ) ;
IMutableModel VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( T1 ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . ValueGenerated = VAR3 ? ValueGenerated . OnAdd : ValueGenerated . Never ; VAR2 . Relational ( ) . ColumnName = LITERAL ; VAR1 . SetPrimaryKey ( VAR2 ) ;
IMutableModel VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( T1 ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . ValueGenerated = VAR3 ? ValueGenerated . OnAdd : ValueGenerated . Never ; VAR2 . Relational ( ) . ColumnName = LITERAL ; VAR1 . SetPrimaryKey ( VAR2 ) ;
var VAR0 = ( ( IConventionModel ) CreateModel ( ) ) . AddEntityType ( typeof ( AlwaysLookOnTheBrightSideOfLife ) ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . SetField ( LITERAL , fromDataAnnotation : true ) ; new BackingFieldConvention ( new TestLogger < DbLoggerCategory . Model , LoggingDefinitions > ( ) ) . Apply ( ( ( Property ) VAR1 ) . Builder ) ;
var VAR0 = CreateModel ( ) . AddEntityType ( LITERAL ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . SetPrimaryKey ( VAR1 ) ;
var VAR0 = CreateModel ( ) . AddEntityType ( LITERAL ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . SetPrimaryKey ( VAR1 ) ;
var VAR0 = ( ( IConventionModel ) CreateModel ( ) ) . AddEntityType ( typeof ( Customer ) ) ; var VAR1 = VAR0 . AddProperty ( Customer . VAR2 ) ; var VAR3 = VAR0 . AddProperty ( Customer . VAR4 ) ; VAR3 . SetIsNullable ( false ) ; var VAR5 = VAR0 . AddKey ( new [ ] { VAR1 , VAR3 } ) ;
var VAR0 = CreateModel ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( VAR2 ) ) ; var VAR3 = VAR1 . AddProperty ( VAR2 . VAR4 ) ; var VAR5 = VAR1 . AddKey ( VAR3 ) ; var VAR6 = VAR0 . AddEntityType ( typeof ( Order ) ) ; var VAR7 = VAR6 . AddProperty ( Order . VAR8 ) ;
var VAR0 = CreateModel ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( VAR2 ) ) ; var VAR3 = VAR0 . AddEntityType ( typeof ( Order ) ) ; var VAR4 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR3 . AddForeignKey ( VAR5 , VAR1 . AddKey ( VAR4 ) , VAR1 ) ;
IMutableModel VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( B ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR1 . SetPrimaryKey ( VAR2 ) ; var VAR4 = VAR0 . AddEntityType ( typeof ( VAR5 ) ) ; VAR4 . IsKeyless = true ; var VAR6 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR7 = VAR4 . AddForeignKey ( VAR6 , VAR3 , VAR1 ) ;
VAR0 . SetPrimaryKey ( VAR1 ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeCompositeEntityBase ) ) ; var VAR4 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR5 . IsNullable = false ; VAR2 . SetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ;
VAR0 . SetPrimaryKey ( VAR1 ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeCompositeEntityBase ) ) ; var VAR4 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR5 . IsNullable = false ; VAR2 . SetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ;
VAR0 . SetPrimaryKey ( VAR1 ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeCompositeEntityBase ) . FullName ) ; var VAR4 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR5 . IsNullable = false ; VAR2 . SetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ;
VAR0 . SetPrimaryKey ( new [ ] { VAR1 , VAR2 } ) ; var VAR3 = VAR4 . AddEntityType ( typeof ( SomeEntity ) . FullName ) ; VAR3 . BaseType = VAR5 ; var VAR6 = VAR3 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR6 . IsConcurrencyToken = true ; VAR6 . ValueGenerated = ValueGenerated . OnAdd ; var VAR7 = VAR4 . AddEntityType ( typeof ( SomeDependentEntity ) . FullName ) ; VAR7 . BaseType = VAR0 ; var VAR8 = VAR7 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR7 . AddForeignKey ( new [ ] { VAR8 } , VAR3 . FindPrimaryKey ( ) , VAR3 ) ;
VAR0 . UpdatePropertiesConfigurationSource ( ConfigurationSource . Explicit ) ; VAR0 . UpdatePrincipalKeyConfigurationSource ( ConfigurationSource . Explicit ) ; VAR0 . UpdatePrincipalEndConfigurationSource ( ConfigurationSource . Explicit ) ; VAR0 . HasDependentToPrincipal ( Order . VAR1 ) ; VAR0 . HasPrincipalToDependent ( VAR2 . VAR3 ) ; VAR0 . IsUnique = false ; VAR0 . IsRequired = false ; VAR0 . IsOwnership = false ; VAR0 . DeleteBehavior = DeleteBehavior . Cascade ; Assert . Equal ( ConfigurationSource . Explicit , VAR0 . GetConfigurationSource ( ) ) ; Assert . Equal ( ConfigurationSource . Explicit , VAR0 . GetPropertiesConfigurationSource ( ) ) ;
VAR0 . SetField ( ( string ) null , ConfigurationSource . Explicit ) ; Assert . Null ( VAR0 . GetFieldName ( ) ) ; Assert . Null ( VAR0 . FieldInfo ) ; Assert . Same ( VAR1 , VAR0 . GetIdentifyingMemberInfo ( ) ) ; VAR0 . SetField ( VAR2 , ConfigurationSource . Explicit ) ; Assert . Equal ( VAR3 , VAR0 . GetFieldName ( ) ) ; Assert . Same ( VAR1 ?? ( MemberInfo ) VAR2 , VAR0 . GetIdentifyingMemberInfo ( ) ) ; VAR0 . SetField ( ( FieldInfo ) null , ConfigurationSource . Explicit ) ;
VAR0 . SetBeforeSaveBehavior ( PropertySaveBehavior . Throw ) ; var VAR1 = VAR0 . Builder ; Assert . Equal ( ConfigurationSource . Explicit , VAR0 . GetBeforeSaveBehaviorConfigurationSource ( ) ) ; Assert . True ( VAR1 . BeforeSave ( PropertySaveBehavior . Throw , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . BeforeSave ( PropertySaveBehavior . Ignore , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( PropertySaveBehavior . Throw , VAR0 . GetBeforeSaveBehavior ( ) ) ; Assert . True ( VAR1 . BeforeSave ( PropertySaveBehavior . Ignore , ConfigurationSource . Explicit ) ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR0 . GetBeforeSaveBehavior ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ; VAR0 . Relational ( ) . ConstraintName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ; VAR0 . Relational ( ) . ConstraintName = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ConstraintName ) ; Assert . True ( VAR0 . SqlServer ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ConstraintName ) ; Assert . False ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ConstraintName ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ConstraintName ) ; Assert . True ( VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ConstraintName ) ; Assert . False ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ConstraintName ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Relational ( ) . ConstraintName ) ; VAR0 . Relational ( ) . ConstraintName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Relational ( ) . ConstraintName ) ; VAR0 . Relational ( ) . ConstraintName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Relational ( ) . ConstraintName ) ; VAR0 . Relational ( ) . ConstraintName = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Relational ( ) . ConstraintName ) ;
Assert . Equal ( CoreResources . LogDetectChangesStarting ( new TestLogger < LoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ; ( level , _ , message , _ , _ ) = VAR0 . Log . Single ( VAR1 => VAR1 . VAR2 . VAR2 == CoreEventId . DetectChangesCompleted . VAR2 ) ; Assert . Equal ( LogLevel . Debug , level ) ; Assert . Equal ( CoreResources . LogDetectChangesCompleted ( new TestLogger < LoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ;
Assert . Equal ( CoreResources . LogSaveChangesStarting ( new TestLogger < LoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ; ( level , _ , message , _ , _ ) = VAR0 . Log . Single ( VAR1 => VAR1 . VAR2 . VAR2 == CoreEventId . SaveChangesCompleted . VAR2 ) ; Assert . Equal ( LogLevel . Debug , level ) ; Assert . Equal ( CoreResources . LogSaveChangesCompleted ( new TestLogger < LoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) , 1 ) , message ) ;
Assert . Equal ( CoreStrings . LogDetectChangesStarting ( new TestLogger < LoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ; ( level , _ , message , _ , _ ) = VAR0 . Log . Single ( VAR1 => VAR1 . VAR2 . VAR2 == CoreEventId . DetectChangesCompleted . VAR2 ) ; Assert . Equal ( LogLevel . Debug , level ) ; Assert . Equal ( CoreStrings . LogDetectChangesCompleted ( new TestLogger < LoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ;
new DerivedTypeDiscoveryConvention ( new TestLogger < DbLoggerCategory . Model , LoggingDefinitions > ( ) ) . Apply ( VAR0 ) ; Assert . Same ( VAR0 . Metadata , VAR1 . Metadata . BaseType ) ; Assert . Same ( VAR0 . Metadata , VAR2 . Metadata . BaseType ) ; new DerivedTypeDiscoveryConvention ( new TestLogger < DbLoggerCategory . Model , LoggingDefinitions > ( ) ) . Apply ( VAR1 ) ;
var VAR0 = VAR1 . Entry ( VAR2 . Are ) ; var VAR4 = VAR1 . Entry ( VAR2 . Made ) ; var VAR6 = EntityState . Unchanged ; var VAR7 = VAR8 ? EntityState . Unchanged : EntityState . Added ; Assert . Equal ( VAR6 , VAR1 . Entry ( VAR2 . VAR9 ) . State ) ; Assert . Equal ( VAR7 , VAR10 . State ) ; Assert . Equal ( VAR7 , VAR0 . State ) ; Assert . Equal ( VAR7 , VAR4 . State ) ;
var VAR0 = new InMemoryIntegerValueGenerator < int > ( 0 ) ; Assert . Equal ( 1 , VAR0 . Next ( null ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( null ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( null ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( null ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( null ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( null ) ) ; VAR0 = new InMemoryIntegerValueGenerator < int > ( 0 ) ;
var VAR0 = new SqlServerIndexConvention ( VAR1 , VAR6 ) ; VAR2 . BaseEntityTypeChangedConventions . Add ( VAR0 ) ; VAR2 . ModelBuiltConventions . Add ( VAR3 ) ; VAR2 . IndexAddedConventions . Add ( VAR4 ) ; VAR2 . IndexAddedConventions . Add ( VAR0 ) ; VAR2 . IndexUniquenessChangedConventions . Add ( VAR0 ) ; VAR2 . IndexAnnotationChangedConventions . Add ( VAR0 ) ; VAR2 . PropertyNullabilityChangedConventions . Add ( VAR0 ) ; VAR2 . PropertyAnnotationChangedConventions . Add ( VAR0 ) ; VAR2 . PropertyAnnotationChangedConventions . Add ( ( SqlServerValueGeneratorConvention ) VAR5 ) ; ReplaceConvention ( VAR2 . ModelAnnotationChangedConventions , ( RelationalDbFunctionConvention ) new SqlServerDbFunctionConvention ( VAR6 ) ) ;
VAR1 . SetEntityState ( EntityState . Added ) ; VAR1 . SetEntityState ( EntityState . Detached ) ; var VAR2 = VAR0 . GetOrCreateEntry ( VAR3 ) ; Assert . NotSame ( VAR1 , VAR2 ) ; VAR2 . SetEntityState ( EntityState . Added ) ;
Assert . Same ( VAR0 , new ValueGeneratorConvention ( new TestLogger < DbLoggerCategory . Model > ( ) ) . Apply ( VAR0 ) ) ; Assert . Equal ( ValueGenerated . Never , ( ( IProperty ) VAR1 ) . ValueGenerated ) ; VAR2 . RemoveForeignKey ( VAR0 . Metadata , ConfigurationSource . Convention ) ; Assert . True ( new ValueGeneratorConvention ( new TestLogger < DbLoggerCategory . Model > ( ) ) . Apply ( VAR2 , ( Key ) null ) ) ;
VAR0 . Property ( VAR1 => VAR1 . Id1 ) . ValueGeneratedNever ( ) ; VAR0 . Property ( VAR1 => VAR1 . Id2 ) . ValueGeneratedNever ( ) ; VAR2 . Entity < Product > ( VAR0 => { VAR0 . Property ( VAR1 => VAR1 . Id1 ) . ValueGeneratedNever ( ) ; VAR0 . Property ( VAR1 => VAR1 . Id2 ) . ValueGeneratedNever ( ) ; } ) ; VAR2 . Entity < Item > ( VAR0 => VAR0 . Property ( VAR1 => VAR1 . Id ) . ValueGeneratedNever ( ) ) ; VAR2 . Entity < Game > ( VAR0 => VAR0 . Property ( VAR1 => VAR1 . Id ) . ValueGeneratedNever ( ) ) ;
var VAR0 = new VAR7 { VAR1 = - LITERAL , VAR2 = VAR3 } ; var VAR4 = new VAR8 { VAR1 = - LITERAL , VAR2 = VAR5 } ; MarkIdsTemporary ( VAR6 , VAR4 , VAR0 ) ; VAR6 . Add ( VAR4 ) ;
Assert . Null ( VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR0 . VAR3 ) ; Assert . Same ( VAR4 , VAR5 . VAR2 ) ; Assert . Same ( VAR5 , VAR4 . VAR3 ) ; Assert . Null ( VAR1 . VAR6 ) ;
var VAR0 = VAR1 . VAR2 . ToList ( ) ; Assert . Equal ( VAR0 . Count , VAR0 . Count ( VAR3 => VAR3 . VAR4 == LITERAL ) * LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ 0 ] ) . VAR4 ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ 1 ] ) . VAR4 ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ LITERAL ] ) . VAR4 ) ; VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ 1 ] ) . VAR4 = LITERAL ;
var VAR0 = CreateConventionlessModelBuilder ( ) . Model ; var VAR1 = VAR0 . AddEntityType ( typeof ( A ) ) ; SetPrimaryKey ( VAR1 ) ; var VAR2 = CreateKey ( VAR1 ) ; var VAR3 = CreateKey ( VAR1 , startingPropertyIndex : 1 , propertyCount : LITERAL ) ; var VAR4 = VAR0 . AddEntityType ( typeof ( B ) ) ; SetPrimaryKey ( VAR4 ) ; var VAR5 = CreateKey ( VAR4 ) ; var VAR6 = CreateKey ( VAR4 , startingPropertyIndex : 0 , propertyCount : LITERAL ) ;
var VAR0 = CreateConventionlessModelBuilder ( ) . Model ; var VAR1 = VAR0 . AddEntityType ( typeof ( NonNotifyingEntity ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , null ) ; VAR1 . SetPrimaryKey ( VAR2 ) ; VAR0 . SetChangeTrackingStrategy ( VAR3 ) ;
var VAR0 = CreateConventionlessModelBuilder ( ) . Model ; var VAR1 = VAR0 . AddEntityType ( typeof ( NonNotifyingEntity ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , null ) ; VAR1 . SetPrimaryKey ( VAR2 ) ; VAR0 . SetChangeTrackingStrategy ( ChangeTrackingStrategy . Snapshot ) ;
var VAR0 = VAR1 . Metadata . Cosmos ( ) . DiscriminatorProperty ; Assert . NotNull ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Equal ( typeof ( string ) , VAR0 . ClrType ) ; Assert . Equal ( typeof ( Entity ) . VAR2 , VAR1 . Metadata . Cosmos ( ) . DiscriminatorValue ) ;
var VAR6 = VAR7 . Create ( VAR0 , VAR1 ) ; VAR6 . VisitQueryModel ( VAR2 ) ; new NondeterministicResultCheckingVisitor ( VAR3 . Logger , this ) . VisitQueryModel ( VAR2 ) ; OnBeforeNavigationRewrite ( VAR2 ) ; var VAR4 = new IncludeCompiler ( VAR3 , VAR1 ) ; VAR4 . CompileIncludes ( VAR2 , IsTrackingQuery ( VAR2 ) , VAR5 , shouldThrow : false ) ;
VAR0 . AppendLine ( ) ; VAR0 . Append ( LITERAL ) ; Visit ( VAR1 . FromExpression ) ; VAR0 . AppendLine ( ) ; VAR0 . Append ( LITERAL ) ; Visit ( VAR1 . FilterExpression ) ;
Assert . True ( VAR0 . Features == null || VAR0 . Features . Count == 0 ) ; Assert . Same ( VAR1 , VAR2 . Review ) ; Assert . Same ( VAR2 , VAR1 . Features . Single ( ) ) ; Assert . True ( VAR3 . Features == null || VAR3 . Features . Count == 0 ) ; Assert . True ( VAR4 . Features == null || VAR4 . Features . Count == 0 ) ;
VAR6 . Log . Clear ( ) ; VAR1 . VAR2 = LITERAL ; VAR3 . ChangeTracker . DetectChanges ( ) ; Assert . Empty ( VAR6 . Log . Where ( VAR4 => VAR4 . VAR5 . VAR5 == CoreEventId . PropertyChangeDetected . VAR5 ) ) ;
VAR9 . Log . Clear ( ) ; var VAR1 = VAR2 . VAR3 . Single ( VAR4 => VAR4 . VAR5 == LITERAL ) ; VAR1 . VAR6 = LITERAL ; VAR7 . ChangeTracker . DetectChanges ( ) ; var ( level , _ , message , _ , _ ) = VAR9 . Log . Single ( VAR8 => VAR8 . VAR5 . VAR5 == CoreEventId . ForeignKeyChangeDetected . VAR5 ) ;
VAR6 . Log . Clear ( ) ; VAR1 . VAR2 = 1 ; VAR3 . ChangeTracker . DetectChanges ( ) ; ( level , _ , message , _ , _ ) = VAR6 . Log . Single ( VAR4 => VAR4 . VAR5 . VAR5 == CoreEventId . ForeignKeyChangeDetected . VAR5 ) ;
VAR6 . Log . Clear ( ) ; VAR1 . VAR2 . Clear ( ) ; VAR3 . ChangeTracker . DetectChanges ( ) ; var ( level , _ , message , _ , _ ) = VAR6 . Log . Single ( VAR4 => VAR4 . VAR5 . VAR5 == CoreEventId . CollectionChangeDetected . VAR5 ) ;
VAR7 . Log . Clear ( ) ; VAR1 . VAR2 . Add ( VAR3 ) ; VAR4 . ChangeTracker . DetectChanges ( ) ; ( level , _ , message , _ , _ ) = VAR7 . Log . Single ( VAR5 => VAR5 . VAR6 . VAR6 == CoreEventId . CollectionChangeDetected . VAR6 ) ;
VAR7 . Log . Clear ( ) ; VAR1 . VAR2 = VAR3 ; VAR4 . ChangeTracker . DetectChanges ( ) ; ( level , _ , message , _ , _ ) = VAR7 . Log . Single ( VAR5 => VAR5 . VAR6 . VAR6 == CoreEventId . ReferenceChangeDetected . VAR6 ) ;
VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ 1 ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ; VAR0 [ 1 ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ; VAR0 [ 0 ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse2 = VAR1 [ LITERAL ] ;
VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse3 = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse3 = VAR1 [ 1 ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse3 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse3 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse3 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse3 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse3 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse3 = VAR1 [ LITERAL ] ; VAR0 [ 1 ] . OneToOne_Required_FK_Inverse3 = VAR1 [ LITERAL ] ; VAR0 [ 0 ] . OneToOne_Required_FK_Inverse3 = VAR1 [ LITERAL ] ;
VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse4 = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse4 = VAR1 [ 1 ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse4 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse4 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse4 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse4 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse4 = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToOne_Required_FK_Inverse4 = VAR1 [ LITERAL ] ; VAR0 [ 1 ] . OneToOne_Required_FK_Inverse4 = VAR1 [ LITERAL ] ; VAR0 [ 0 ] . OneToOne_Required_FK_Inverse4 = VAR1 [ LITERAL ] ;
VAR0 [ 1 ] . OneToMany_Optional_Inverse4 = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . OneToMany_Optional_Inverse4 = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . OneToMany_Optional_Inverse4 = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . OneToMany_Optional_Inverse4 = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . OneToMany_Optional_Inverse4 = VAR1 [ 0 ] ; VAR1 [ 0 ] . OneToMany_Optional_Self_Inverse3 = VAR1 [ 1 ] ; VAR1 [ LITERAL ] . OneToMany_Optional_Self_Inverse3 = VAR1 [ LITERAL ] ; VAR1 [ LITERAL ] . OneToMany_Optional_Self_Inverse3 = VAR1 [ LITERAL ] ; VAR1 [ LITERAL ] . OneToMany_Optional_Self_Inverse3 = VAR1 [ LITERAL ] ; VAR1 [ LITERAL ] . OneToMany_Optional_Self_Inverse3 = VAR1 [ LITERAL ] ; VAR0 [ 0 ] . OneToMany_Optional_Self_Inverse4 = VAR0 [ 1 ] ; VAR0 [ LITERAL ] . OneToMany_Optional_Self_Inverse4 = VAR0 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToMany_Optional_Self_Inverse4 = VAR0 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToMany_Optional_Self_Inverse4 = VAR0 [ LITERAL ] ; VAR0 [ LITERAL ] . OneToMany_Optional_Self_Inverse4 = VAR0 [ LITERAL ] ;
ValidateDefiningNavigations ( VAR0 ) ; ValidateOwnership ( VAR0 ) ; ValidateNonNullPrimaryKeys ( VAR0 ) ; ValidateNoShadowKeys ( VAR0 ) ; ValidateNoMutableKeys ( VAR0 ) ; ValidateNoCycles ( VAR0 ) ; ValidateClrInheritance ( VAR0 ) ; ValidateChangeTrackingStrategy ( VAR0 ) ; ValidateForeignKeys ( VAR0 ) ;
var VAR0 = VAR2 ? . GetHashCode ( ) ?? 0 ; VAR0 = ( VAR0 * LITERAL ) ^ ( VAR6 ? . GetHashCode ( ) ?? 0 ) ; VAR0 = ( VAR0 * LITERAL ) ^ ( VAR7 ? . GetHashCode ( ) ?? 0 ) ; VAR0 = ( VAR0 * LITERAL ) ^ VAR3 . GetHashCode ( ) ; VAR0 = ( VAR0 * LITERAL ) ^ ( VAR4 ? . GetHashCode ( ) ?? 0 ) ;
var VAR0 = VAR1 ? . MappingHints ; VAR2 = VAR3 . VAR2 ?? VAR0 ? . VAR2 ; VAR4 = VAR3 . VAR4 ?? VAR0 ? . VAR4 ; VAR5 = VAR3 . VAR5 ?? VAR0 ? . VAR5 ; VAR6 = VAR3 . VAR6 ?? VAR0 ? . VAR6 ;
VAR0 . Property ( VAR1 => VAR1 . Enum8 ) . HasConversion < string > ( ) . HasMaxLength ( LITERAL ) ; VAR0 . Property ( VAR1 => VAR1 . EnumU64 ) . HasConversion < long > ( ) ; VAR0 . Property ( VAR1 => VAR1 . EnumU32 ) . HasConversion < long > ( ) ; VAR0 . Property ( VAR1 => VAR1 . EnumU16 ) . HasConversion < long > ( ) ; VAR0 . Property ( VAR1 => VAR1 . EnumS8 ) . HasConversion < string > ( ) . IsUnicode ( false ) ;
Check . NotNull ( VAR10 , nameof ( VAR10 ) ) ; VAR1 = VAR2 ; VAR3 = VAR4 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR11 = VAR10 ;
Check . NotNull ( VAR10 , nameof ( VAR10 ) ) ; VAR1 = VAR2 ; VAR3 = VAR4 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR11 = VAR10 ;
var VAR0 = VAR1 . Create ( VAR2 , false ) ; var VAR3 = VAR0 . FindEntityType ( LITERAL ) . GetProperties ( ) . ToList ( ) ; Assert . Equal ( typeof ( bool ? ) , VAR3 . First ( VAR4 => VAR4 . Name == LITERAL ) . ClrType ) ;
Assert . True ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ;
Assert . True ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . SqlServer ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ;
Assert . True ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ;
var VAR0 = InMemoryTestHelpers . Instance . CreateConventionBuilder ( ) ; var VAR1 = VAR0 . Entity < WithAnnotations > ( ) . Property ( VAR2 => VAR2 . VAR3 ) . Metadata ; VAR1 . SetMaxLength ( LITERAL ) ; var VAR4 = new CSharpHelper ( ) ; var VAR5 = new TestCSharpSnapshotGenerator ( new CSharpSnapshotGeneratorDependencies ( VAR4 ) ) ; VAR1 . SetValueConverter ( VAR6 ) ; var VAR7 = new IndentedStringBuilder ( ) ; VAR5 . TestGeneratePropertyAnnotations ( VAR1 , VAR7 ) ;
Assert . Equal ( VAR7 ? LITERAL : 1 , VAR0 . VAR1 ) ; Assert . Equal ( VAR7 ? LITERAL : 1 , VAR2 . VAR1 ) ; Assert . Equal ( 0 , VAR3 . VAR1 ) ; Assert . Empty ( VAR4 . Metadata . GetEntityTypes ( ) . Where ( VAR5 => VAR5 . HasDefiningNavigation ( ) ) ) ; Assert . Null ( VAR4 . Metadata . FindEntityType ( typeof ( VAR8 ) ) ) ;
var VAR0 = new ForeignKeyIndexConvention ( VAR9 . Logger ) ; var VAR1 = new ValueGeneratorConvention ( ) ; VAR2 . BaseEntityTypeChangedConventions . Add ( VAR3 ) ; VAR2 . BaseEntityTypeChangedConventions . Add ( VAR4 ) ; VAR2 . BaseEntityTypeChangedConventions . Add ( VAR5 ) ; VAR2 . BaseEntityTypeChangedConventions . Add ( VAR6 ) ; VAR2 . BaseEntityTypeChangedConventions . Add ( VAR0 ) ; VAR2 . BaseEntityTypeChangedConventions . Add ( VAR1 ) ; VAR2 . EntityTypeMemberIgnoredConventions . Add ( VAR5 ) ; VAR2 . EntityTypeMemberIgnoredConventions . Add ( VAR6 ) ; var VAR7 = new KeyAttributeConvention ( ) ; var VAR8 = new ForeignKeyPropertyDiscoveryConvention ( VAR9 . Logger ) ;
var VAR7 = VAR1 . GetOrCreateEntry ( new RelatedFakeEntity { VAR2 = LITERAL } ) ; VAR7 . SetEntityState ( EntityState . Added ) ; var VAR3 = ( TestModificationCommandBatchFactory ) VAR4 . GetService < IModificationCommandBatchFactory > ( ) ; var VAR5 = CreateCommandBatchPreparer ( VAR3 ) . BatchCommands ( new [ ] { VAR7 , VAR6 } ) ;
Check . NotNull ( VAR26 , nameof ( VAR26 ) ) ; VAR1 = VAR2 ; VAR3 = VAR4 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR9 = VAR10 ; VAR11 = VAR12 ; VAR13 = VAR14 ; VAR15 = VAR16 ; VAR17 = VAR18 ; VAR19 = VAR20 ; VAR21 = VAR22 ; VAR23 = VAR24 ; VAR27 = VAR26 ;
Assert . True ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ;
var VAR0 = new ModelBuilder ( CreateConventionSet ( ) ) ; VAR0 . Entity < Animal > ( ) ; GenerateMapping ( VAR0 . Entity < Cat > ( ) . Property ( VAR1 => VAR1 . VAR2 ) . HasColumnName ( LITERAL ) . HasMaxLength ( LITERAL ) . Metadata ) ; GenerateMapping ( VAR0 . Entity < Dog > ( ) . Property ( VAR3 => VAR3 . VAR2 ) . HasColumnName ( LITERAL ) . HasMaxLength ( LITERAL ) . Metadata ) ;
Assert . True ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . SqlServer ( ConfigurationSource . DataAnnotation ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ;
var VAR0 = new ModelBuilder ( CreateConventionSet ( ) ) ; VAR0 . Entity < Animal > ( ) ; GenerateMapping ( VAR0 . Entity < Cat > ( ) . Property ( VAR1 => VAR1 . Type ) . HasColumnName ( LITERAL ) . Metadata ) ; GenerateMapping ( VAR0 . Entity < Dog > ( ) . Property ( VAR1 => VAR1 . Type ) . HasColumnName ( LITERAL ) . Metadata ) ;
var VAR0 = new ModelBuilder ( CreateConventionSet ( ) ) ; VAR0 . Entity < Animal > ( ) ; GenerateMapping ( VAR0 . Entity < Cat > ( ) . Property ( VAR1 => VAR1 . Breed ) . HasColumnName ( LITERAL ) . IsUnicode ( false ) . Metadata ) ; GenerateMapping ( VAR0 . Entity < Dog > ( ) . Property ( VAR2 => VAR2 . Breed ) . HasColumnName ( LITERAL ) . IsUnicode ( ) . Metadata ) ;
var VAR0 = new ModelBuilder ( CreateConventionSet ( ) ) ; VAR0 . Entity < Animal > ( ) ; GenerateMapping ( VAR0 . Entity < Cat > ( ) . Property ( VAR1 => VAR1 . Type ) . HasColumnName ( LITERAL ) . Metadata ) ; GenerateMapping ( VAR0 . Entity < Dog > ( ) . Property ( VAR2 => VAR2 . Type ) . HasColumnName ( LITERAL ) . Metadata ) ;
Check . NotNull ( VAR16 , nameof ( VAR16 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR9 = VAR10 ; VAR11 = VAR12 ; VAR13 = VAR14 ; VAR17 = VAR16 ;
var VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 ) , VAR3 ) ; Assert . True ( VAR0 . EnsureCreated ( ) ) ; Assert . False ( VAR0 . EnsureCreated ( ) ) ; Assert . False ( VAR0 . EnsureCreated ( ) ) ; VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 ) , VAR3 ) ;
var VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 ) , VAR3 ) ; Assert . True ( await VAR0 . EnsureCreatedAsync ( ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ; VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 ) , VAR3 ) ;
var VAR0 = CreateStore ( VAR1 ) ; Assert . True ( VAR0 . EnsureDatabaseCreated ( VAR3 ) ) ; Assert . False ( VAR0 . EnsureDatabaseCreated ( VAR3 ) ) ; Assert . False ( VAR0 . EnsureDatabaseCreated ( VAR3 ) ) ; VAR0 = CreateStore ( VAR1 ) ;
await VAR0 . OpenAsync ( default ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; Assert . Equal ( LITERAL , VAR1 . CloseCount ) ; VAR1 . SetState ( ConnectionState . Closed ) ; VAR0 . Close ( ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; Assert . Equal ( LITERAL , VAR1 . CloseCount ) ; await VAR0 . OpenAsync ( default ) ; await VAR0 . OpenAsync ( default ) ;
await VAR0 . OpenAsync ( default ) ; await VAR0 . OpenAsync ( default ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; VAR1 . SetState ( ConnectionState . Closed ) ; await VAR0 . OpenAsync ( default ) ;
Assert . NotEqual ( default , VAR0 ) ; Assert . Equal ( default , VAR1 ) ; VAR2 . SaveChanges ( ) ; VAR3 = VAR4 . VAR5 ; var VAR6 = VAR4 . VAR7 ; Assert . NotEqual ( default , VAR3 ) ; Assert . NotEqual ( default , VAR6 ) ;
VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SingleAsync ( default ) ) ; VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SingleAsync ( VAR1 . Token ) ) ; VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SingleAsync ( VAR2 => true , default ) ) ; VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SingleAsync ( VAR2 => true , VAR1 . Token ) ) ; VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SingleOrDefaultAsync ( default ) ) ; VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SingleOrDefaultAsync ( VAR1 . Token ) ) ; VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SingleOrDefaultAsync ( VAR2 => true , default ) ) ; VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SingleOrDefaultAsync ( VAR2 => true , VAR1 . Token ) ) ; VerifyProducedExpression < int , int > ( VAR0 => VAR0 . SumAsync ( default ) ) ;
var VAR0 = VAR7 . StringMapper . FindMapping ( unicode : true , VAR2 : VAR2 , maxLength : VAR3 . Size ) ; VAR4 = VAR0 . IsUnicode != VAR5 . IsUnicode ? ( bool ? ) VAR5 . IsUnicode : null ; var VAR6 = VAR7 . StringMapper . FindMapping ( VAR3 . IsUnicode , VAR2 , maxLength : null ) ;
var VAR0 = new Order { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = new DateTime ( LITERAL , 1 , LITERAL ) } ; var VAR4 = new Order { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = new DateTime ( LITERAL , LITERAL , LITERAL ) } ; var VAR5 = new Order { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = new DateTime ( LITERAL , LITERAL , LITERAL ) } ; var VAR6 = new Order { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = new DateTime ( LITERAL , LITERAL , LITERAL ) } ; var VAR7 = new Order { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = new DateTime ( LITERAL , LITERAL , LITERAL ) } ; var VAR8 = new Order { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = new DateTime ( LITERAL , LITERAL , LITERAL ) } ;
var VAR0 = VAR1 . ToString ( ) ; const string VAR3 = LITERAL ; Assert . Equal ( VAR3 , VAR0 , ignoreLineEndingDifferences : true ) ;
Assert . Equal ( ( byte ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( int ? ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( long ? ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( short ? ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( byte ? ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( uint ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( ulong ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( ushort ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ;
await ArgumentNullTest ( LITERAL , ( ) => Source < int > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < int ? > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < long > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < long ? > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < float > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < float ? > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < double > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < double ? > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < decimal > ( ) . SumAsync ( null ) ) ; await ArgumentNullTest ( LITERAL , ( ) => Source < decimal ? > ( ) . SumAsync ( null ) ) ;
VAR0 = VAR1 . Set < OptionalSingle1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR0 . VAR5 ) ; VAR6 = ( OptionalSingle1Derived ) VAR1 . Set < OptionalSingle1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; VAR7 = ( OptionalSingle1MoreDerived ) VAR1 . Set < OptionalSingle1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR7 . VAR5 ) ; VAR8 = VAR1 . Set < OptionalSingle2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; VAR10 = ( OptionalSingle2Derived ) VAR1 . Set < OptionalSingle2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; VAR11 = ( OptionalSingle2MoreDerived ) VAR1 . Set < OptionalSingle2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR11 . VAR5 ) ;
var VAR0 = VAR1 . Set < OptionalSingle1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; var VAR7 = VAR1 . Set < OptionalSingle1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; var VAR9 = VAR1 . Set < OptionalSingle1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; var VAR11 = VAR1 . Set < OptionalSingle2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR13 . VAR5 ) ; var VAR14 = VAR1 . Set < OptionalSingle2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR15 . VAR5 ) ; var VAR16 = VAR1 . Set < OptionalSingle2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR17 . VAR5 ) ;
Assert . False ( VAR0 . Set < RequiredNonPkSingle1 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR4 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingle1 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR5 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingle1 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR6 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingle2 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR8 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingle2 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR9 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingle2 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR10 . VAR3 ) ) ;
VAR0 = VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR0 . VAR5 ) ; VAR6 = ( OptionalSingleAk1Derived ) VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; VAR7 = ( OptionalSingleAk1MoreDerived ) VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR7 . VAR5 ) ; VAR8 = VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; VAR10 = VAR1 . Set < OptionalSingleComposite2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; VAR12 = ( OptionalSingleAk2Derived ) VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR12 . VAR5 ) ; VAR13 = ( OptionalSingleAk2MoreDerived ) VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR13 . VAR5 ) ;
var VAR0 = VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; var VAR7 = VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; var VAR9 = VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; var VAR11 = VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR13 . VAR5 ) ; var VAR14 = VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR15 . VAR5 ) ; var VAR16 = VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR17 . VAR5 ) ; var VAR18 = VAR1 . Set < OptionalSingleComposite2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR20 . VAR5 ) ;
VAR0 = VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR0 . VAR5 ) ; VAR6 = ( OptionalSingleAk1Derived ) VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; VAR7 = ( OptionalSingleAk1MoreDerived ) VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR7 . VAR5 ) ; VAR8 = VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; VAR10 = VAR1 . Set < OptionalSingleComposite2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; VAR12 = ( OptionalSingleAk2Derived ) VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR12 . VAR5 ) ; VAR13 = ( OptionalSingleAk2MoreDerived ) VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR13 . VAR5 ) ;
var VAR0 = VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; var VAR7 = VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; var VAR9 = VAR1 . Set < OptionalSingleAk1 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; var VAR11 = VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR13 . VAR5 ) ; var VAR14 = VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR15 . VAR5 ) ; var VAR16 = VAR1 . Set < OptionalSingleAk2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR17 . VAR5 ) ; var VAR18 = VAR1 . Set < OptionalSingleComposite2 > ( ) . VAR3 ( VAR4 => VAR4 . VAR5 == VAR20 . VAR5 ) ;
Assert . False ( VAR0 . Set < RequiredNonPkSingleAk1 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR4 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingleAk1 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR5 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingleAk1 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR6 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingleAk2 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR8 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingleAk2 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR9 . VAR3 ) ) ; Assert . False ( VAR0 . Set < RequiredNonPkSingleAk2 > ( ) . Any ( VAR2 => VAR2 . VAR3 == VAR10 . VAR3 ) ) ;
Assert . Same ( VAR2 . Metadata , VAR1 . Metadata . DeclaringEntityType ) ; VAR1 = new ForeignKeyPropertyDiscoveryConvention ( ) . Apply ( VAR1 ) ; var VAR3 = ( IForeignKey ) VAR2 . Metadata . GetForeignKeys ( ) . Single ( ) ; Assert . Same ( VAR2 . Metadata , VAR3 . DeclaringEntityType ) ; Assert . Same ( VAR3 , VAR1 . Metadata ) ; Assert . Same ( VAR4 , VAR3 . PrincipalKey . Properties . Single ( ) ) ; Assert . True ( VAR3 . IsUnique ) ;
var VAR0 = InMemoryTestHelpers . Instance . CreateContext ( ) ; var VAR1 = new DbSetSource ( ) ; var VAR2 = VAR1 . Create ( VAR0 , typeof ( Random ) ) ;
var VAR0 = new VAR5 ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( VAR2 ) ) ; Assert . Null ( VAR1 . RemoveProperty ( LITERAL ) ) ; var VAR3 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; Assert . False ( VAR3 . IsShadowProperty ) ; Assert . Equal ( LITERAL , VAR3 . VAR4 ) ; Assert . Same ( typeof ( int ) , VAR3 . VAR6 ) ;
var VAR0 = new VAR5 ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( VAR2 ) ) ; var VAR3 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; Assert . False ( VAR3 . IsShadowProperty ) ; Assert . Equal ( LITERAL , VAR3 . VAR4 ) ; Assert . Same ( typeof ( int ) , VAR3 . VAR6 ) ;
VAR0 . VAR4 = true ; Assert . Same ( VAR1 , VAR0 . VAR5 ) ; Assert . Same ( VAR2 , VAR0 . VAR6 . VAR7 . Single ( ) ) ; Assert . Same ( VAR3 , VAR0 . VAR7 . Single ( ) ) ; Assert . True ( VAR0 . VAR4 ) ; Assert . Same ( VAR1 . FindPrimaryKey ( ) , VAR0 . VAR6 ) ;
Assert . Equal ( VAR1 . ClientSetNull , VAR0 . VAR1 ) ; VAR0 . VAR1 = VAR1 . Cascade ; Assert . Equal ( VAR1 . Cascade , VAR0 . VAR1 ) ; VAR0 . VAR1 = VAR1 . Restrict ; Assert . Equal ( VAR1 . Restrict , VAR0 . VAR1 ) ; VAR0 . VAR1 = VAR1 . SetNull ; Assert . Equal ( VAR1 . SetNull , VAR0 . VAR1 ) ; VAR0 . VAR1 = VAR1 . ClientSetNull ; Assert . Equal ( VAR1 . ClientSetNull , VAR0 . VAR1 ) ;
Assert . Same ( VAR0 . VAR1 , VAR0 . ResolveOtherEntityType ( VAR0 . VAR2 ) ) ; Assert . Same ( VAR0 . VAR2 , VAR0 . ResolveOtherEntityType ( VAR0 . VAR1 ) ) ; Assert . Equal ( new [ ] { VAR0 . VAR3 } , VAR0 . FindNavigationsFrom ( VAR0 . VAR1 ) ) ; Assert . Equal ( new [ ] { VAR0 . VAR4 } , VAR0 . FindNavigationsFrom ( VAR0 . VAR2 ) ) ; Assert . Equal ( new [ ] { VAR0 . VAR4 } , VAR0 . FindNavigationsTo ( VAR0 . VAR1 ) ) ; Assert . Equal ( new [ ] { VAR0 . VAR3 } , VAR0 . FindNavigationsTo ( VAR0 . VAR2 ) ) ; Assert . Same ( VAR0 . VAR2 , VAR0 . ResolveEntityTypeInHierarchy ( VAR0 . VAR2 ) ) ; Assert . Same ( VAR0 . VAR1 , VAR0 . ResolveEntityTypeInHierarchy ( VAR0 . VAR1 ) ) ; Assert . Same ( VAR0 . VAR1 , VAR0 . ResolveOtherEntityTypeInHierarchy ( VAR0 . VAR2 ) ) ; Assert . Same ( VAR0 . VAR2 , VAR0 . ResolveOtherEntityTypeInHierarchy ( VAR0 . VAR1 ) ) ; Assert . Equal ( new [ ] { VAR0 . VAR3 } , VAR0 . FindNavigationsFromInHierarchy ( VAR0 . VAR1 ) ) ; Assert . Equal ( new [ ] { VAR0 . VAR4 } , VAR0 . FindNavigationsFromInHierarchy ( VAR0 . VAR2 ) ) ; Assert . Equal ( new [ ] { VAR0 . VAR4 } , VAR0 . FindNavigationsToInHierarchy ( VAR0 . VAR1 ) ) ; Assert . Equal ( new [ ] { VAR0 . VAR3 } , VAR0 . FindNavigationsToInHierarchy ( VAR0 . VAR2 ) ) ;
VAR0 . VAR2 = false ; Assert . False ( VAR0 . VAR2 ) ; Assert . False ( VAR1 . VAR2 ) ; VAR0 . VAR2 = true ; VAR1 . VAR2 = false ; Assert . True ( VAR0 . VAR2 ) ; Assert . False ( VAR1 . VAR2 ) ;
Assert . False ( VAR0 . VAR1 ) ; VAR0 . VAR1 = true ; Assert . True ( VAR0 . VAR1 ) ; VAR0 . VAR1 = false ; Assert . False ( VAR0 . VAR1 ) ;
Assert . False ( ( ( IProperty ) VAR0 ) . VAR1 ) ; VAR0 . VAR2 = VAR2 . OnAddOrUpdate ; Assert . True ( ( ( IProperty ) VAR0 ) . VAR1 ) ; VAR0 . VAR3 = true ; Assert . True ( ( ( IProperty ) VAR0 ) . VAR1 ) ; VAR0 . VAR2 = VAR2 . OnAdd ; Assert . False ( ( ( IProperty ) VAR0 ) . VAR1 ) ; VAR0 . VAR2 = VAR2 . OnAddOrUpdate ; Assert . True ( ( ( IProperty ) VAR0 ) . VAR1 ) ; VAR0 . VAR1 = false ; Assert . False ( ( ( IProperty ) VAR0 ) . VAR1 ) ;
Assert . False ( VAR0 . VAR1 ) ; Assert . False ( VAR0 . VAR2 ) ; VAR0 . VAR1 = true ; VAR0 . VAR2 = true ; Assert . True ( VAR0 . VAR1 ) ; Assert . True ( VAR0 . VAR2 ) ;
Assert . True ( await VAR0 . OpenAsync ( VAR1 ) ) ; Assert . Equal ( 1 , VAR0 . DbConnections . Count ) ; var VAR2 = VAR0 . DbConnections [ 0 ] ; Assert . Equal ( 1 , VAR2 . OpenAsyncCount ) ; Assert . False ( await VAR0 . OpenAsync ( VAR1 ) ) ; Assert . False ( await VAR0 . OpenAsync ( VAR1 ) ) ;
await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; Assert . Equal ( 0 , VAR0 . DbConnections . Count ) ; Assert . Equal ( 1 , VAR1 . OpenCount ) ; VAR0 . Close ( ) ; Assert . Equal ( 1 , VAR1 . OpenCount ) ; Assert . Equal ( 1 , VAR1 . CloseCount ) ; VAR1 . SetState ( ConnectionState . Open ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ;
await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; Assert . Equal ( 1 , VAR1 . OpenCount ) ; Assert . Equal ( 1 , VAR1 . CloseCount ) ; VAR0 . Close ( ) ; Assert . Equal ( 1 , VAR1 . OpenCount ) ; Assert . Equal ( 1 , VAR1 . CloseCount ) ; VAR1 . SetState ( ConnectionState . Closed ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ;
await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; Assert . Equal ( 1 , VAR1 . CloseCount ) ; VAR0 . Close ( ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; Assert . Equal ( LITERAL , VAR1 . CloseCount ) ; VAR1 . SetState ( ConnectionState . Open ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ;
await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; Assert . Equal ( LITERAL , VAR1 . CloseCount ) ; VAR1 . SetState ( ConnectionState . Closed ) ; VAR0 . Close ( ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; Assert . Equal ( LITERAL , VAR1 . CloseCount ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ;
await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; VAR1 . SetState ( ConnectionState . Closed ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ;
Assert . Equal ( LITERAL , VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . StoreType ) ; Assert . Equal ( 1 , VAR0 . StartValue ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . Equal ( - LITERAL , VAR0 . MinValue ) ;
Assert . True ( await VAR0 . OpenAsync ( VAR1 : VAR1 ) ) ; Assert . Equal ( LITERAL , VAR2 . OpenAsyncCount ) ; Assert . True ( VAR0 . Close ( ) ) ; Assert . Equal ( LITERAL , VAR2 . OpenAsyncCount ) ; Assert . Equal ( LITERAL , VAR2 . CloseCount ) ;
Assert . Same ( VAR0 , new RelationshipDiscoveryConvention ( new CoreTypeMapper ( new CoreTypeMapperDependencies ( ) ) ) . Apply ( VAR0 ) ) ; VerifyRelationship ( VAR0 . Metadata . FindNavigation ( VAR1 . VAR2 . Name ) , null , VAR3 : false , VAR4 : false ) ; VerifyRelationship ( VAR0 . Metadata . FindNavigation ( VAR1 . VAR5 . Name ) , nameof ( VAR6 . VAR1 ) , VAR3 : true , VAR4 : false ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Model . GetEntityTypes ( ) . Count ( ) ) ;
Assert . Same ( VAR0 , new RelationshipDiscoveryConvention ( new CoreTypeMapper ( new CoreTypeMapperDependencies ( ) ) ) . Apply ( VAR0 ) ) ; VerifyRelationship ( VAR1 . Metadata . FindNavigation ( VAR2 . VAR3 . Name ) , null , VAR4 : false , VAR5 : false ) ; VerifyRelationship ( VAR1 . Metadata . FindNavigation ( VAR2 . VAR6 . Name ) , nameof ( VAR7 . VAR2 ) , VAR4 : true , VAR5 : false ) ; Assert . Equal ( LITERAL , VAR1 . Metadata . Model . GetEntityTypes ( ) . Count ( ) ) ;
var VAR0 = new ModelBuilder ( new CoreConventionSetBuilder ( new CoreConventionSetBuilderDependencies ( new CoreTypeMapper ( new CoreTypeMapperDependencies ( ) ) ) ) . CreateConventionSet ( ) ) ; var VAR1 = VAR0 . Entity < PrincipalEntity > ( ) ; var VAR2 = VAR0 . Entity < DependentEntity > ( ) ; VAR1 . HasKey ( VAR3 => VAR3 . VAR4 ) ; VAR2 . HasOne ( VAR3 => VAR3 . VAR5 ) . WithOne ( ) . HasForeignKey < DependentEntity > ( VAR3 => VAR3 . VAR6 ) ; VAR2 . HasIndex ( VAR3 => VAR3 . VAR6 ) . IsUnique ( false ) ; VAR1 . HasKey ( VAR3 => VAR3 . VAR7 ) ; var VAR8 = VAR0 . Model . FindEntityType ( typeof ( DependentEntity ) ) ; var VAR9 = VAR8 . FindProperty ( nameof ( DependentEntity . VAR6 ) ) ; var VAR10 = VAR8 . FindIndex ( VAR9 ) ;
var VAR0 = VAR7 . VAR1 . StringMapper . FindMapping ( unicode : true , VAR2 : VAR2 , maxLength : VAR3 . Size ) ; VAR4 = VAR0 . IsUnicode != VAR5 . IsUnicode ? ( bool ? ) VAR5 . IsUnicode : null ; var VAR6 = VAR7 . VAR1 . StringMapper . FindMapping ( unicode : VAR3 . IsUnicode , VAR2 : VAR2 , maxLength : null ) ;
var VAR0 = VAR7 . StringMapper . FindMapping ( unicode : true , VAR2 : VAR2 , maxLength : VAR3 . Size ) ; VAR4 = VAR0 . IsUnicode != VAR5 . IsUnicode ? ( bool ? ) VAR5 . IsUnicode : null ; var VAR6 = VAR7 . StringMapper . FindMapping ( unicode : VAR3 . IsUnicode , VAR2 : VAR2 , maxLength : null ) ;
Assert . Null ( VAR0 [ 0 ] . Nickname ) ; Assert . Null ( VAR0 [ 0 ] . Condition ) ; Assert . Equal ( LITERAL , VAR0 [ LITERAL ] . Nickname ) ; Assert . True ( VAR0 [ LITERAL ] . Condition ) ; Assert . Equal ( LITERAL , VAR0 [ LITERAL ] . Nickname ) ; Assert . False ( VAR0 [ LITERAL ] . Condition ) ;
Assert . False ( VAR0 . IsNullable ) ; Assert . Equal ( DbType . Int32 , VAR0 . DbType ) ; VAR0 = VAR1 . DbConnections [ 0 ] . DbCommands [ 0 ] . Parameters [ 1 ] ; Assert . Equal ( LITERAL , VAR0 . ParameterName ) ; Assert . Equal ( LITERAL , VAR0 . Value ) ; Assert . Equal ( ParameterDirection . Input , VAR0 . Direction ) ; Assert . True ( VAR0 . IsNullable ) ;
var VAR0 = VAR1 . Relational ( ) . GetOrAddSequence ( LITERAL , LITERAL ) ; VAR0 . StartValue = LITERAL ; VAR0 . IncrementBy = LITERAL ; VAR0 . ClrType = typeof ( int ) ; VAR0 = VAR1 . Relational ( ) . GetOrAddSequence ( LITERAL , LITERAL ) ;
VAR0 . BaseEntityTypeChangedConventions . Add ( VAR1 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR2 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR3 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR4 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR5 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR6 ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . SqlServer ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ;
Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . Relational ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . Relational ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . Relational ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . Relational ( ) . DefaultValueSql ) ; Assert . Null ( VAR0 . FindProperty ( LITERAL ) . Relational ( ) . DefaultValueSql ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnName ) ; Assert . True ( VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasColumnName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnName ) ; Assert . False ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasColumnName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnName ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . ColumnName ) ; VAR0 . Relational ( ) . ColumnName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . ColumnName ) ; VAR0 . Relational ( ) . ColumnName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . ColumnName ) ; VAR0 . Relational ( ) . ColumnName = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . ColumnName ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . TableName ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Relational ( ) . TableName ) ; VAR0 . Relational ( ) . TableName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . TableName ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Relational ( ) . TableName ) ; VAR0 . Relational ( ) . TableName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . TableName ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Relational ( ) . TableName ) ; VAR0 . Relational ( ) . TableName = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . TableName ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Relational ( ) . TableName ) ;
Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = null ; Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Relational ( ) . VAR1 ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Relational ( ) . VAR1 ) ;
Assert . Null ( VAR0 . Relational ( ) . FindSequence ( LITERAL ) ) ; Assert . Null ( ( ( IModel ) VAR0 ) . Relational ( ) . FindSequence ( LITERAL ) ) ; var VAR1 = VAR0 . Relational ( ) . GetOrAddSequence ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . FindSequence ( LITERAL ) . VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . FindSequence ( LITERAL ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IModel ) VAR0 ) . Relational ( ) . FindSequence ( LITERAL ) . VAR2 ) ;
Assert . Equal ( PropertySaveBehavior . Save , VAR0 . BeforeSaveBehavior ) ; Assert . Equal ( PropertySaveBehavior . Save , VAR0 . AfterSaveBehavior ) ; VAR0 . ValueGenerated = ValueGenerated . OnUpdate ; Assert . Equal ( PropertySaveBehavior . Save , VAR0 . BeforeSaveBehavior ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR0 . AfterSaveBehavior ) ; VAR0 . BeforeSaveBehavior = PropertySaveBehavior . Throw ; Assert . Equal ( PropertySaveBehavior . Throw , VAR0 . BeforeSaveBehavior ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR0 . AfterSaveBehavior ) ; VAR0 . AfterSaveBehavior = PropertySaveBehavior . Throw ; Assert . Equal ( PropertySaveBehavior . Throw , VAR0 . BeforeSaveBehavior ) ; Assert . Equal ( PropertySaveBehavior . Throw , VAR0 . AfterSaveBehavior ) ;
VAR0 . BeforeSaveBehavior = PropertySaveBehavior . Throw ; var VAR1 = VAR0 . Builder ; Assert . Equal ( ConfigurationSource . Explicit , VAR0 . GetBeforeSaveBehaviorConfigurationSource ( ) ) ; Assert . True ( VAR1 . BeforeSave ( PropertySaveBehavior . Throw , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . BeforeSave ( PropertySaveBehavior . Ignore , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( PropertySaveBehavior . Throw , VAR0 . BeforeSaveBehavior ) ; Assert . True ( VAR1 . BeforeSave ( PropertySaveBehavior . Ignore , ConfigurationSource . Explicit ) ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR0 . BeforeSaveBehavior ) ;
Assert . True ( VAR0 . AfterSave ( PropertySaveBehavior . Throw , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . AfterSave ( PropertySaveBehavior . Ignore , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR1 . AfterSaveBehavior ) ; Assert . False ( VAR0 . AfterSave ( PropertySaveBehavior . Save , ConfigurationSource . Convention ) ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR1 . AfterSaveBehavior ) ;
ReplaceConvention ( VAR0 . BaseEntityTypeChangedConventions , VAR1 ) ; var VAR2 = new SqlServerMemoryOptimizedTablesConvention ( ) ; VAR0 . EntityTypeAnnotationChangedConventions . Add ( VAR2 ) ; ReplaceConvention ( VAR0 . PrimaryKeyChangedConventions , VAR1 ) ;
VAR0 . IndexUniquenessChangedConventions . Add ( VAR1 ) ; VAR0 . IndexAnnotationChangedConventions . Add ( VAR1 ) ; VAR0 . PropertyNullabilityChangedConventions . Add ( VAR1 ) ; VAR0 . PropertyAnnotationChangedConventions . Add ( VAR1 ) ; VAR0 . PropertyAnnotationChangedConventions . Add ( ( SqlServerValueGeneratorConvention ) VAR2 ) ;
var VAR0 = new PropertyNullabilityChangedConvention ( false ) ; var VAR1 = new PropertyNullabilityChangedConvention ( true ) ; var VAR2 = new PropertyNullabilityChangedConvention ( false ) ; VAR3 . PropertyNullabilityChangedConventions . Add ( VAR0 ) ; VAR3 . PropertyNullabilityChangedConventions . Add ( VAR1 ) ; VAR3 . PropertyNullabilityChangedConventions . Add ( VAR2 ) ;
var VAR0 = new IndexAnnotationChangedConvention ( VAR1 : false ) ; var VAR2 = new IndexAnnotationChangedConvention ( VAR1 : true ) ; var VAR3 = new IndexAnnotationChangedConvention ( VAR1 : false ) ; VAR4 . IndexAnnotationChangedConventions . Add ( VAR0 ) ; VAR4 . IndexAnnotationChangedConventions . Add ( VAR2 ) ; VAR4 . IndexAnnotationChangedConventions . Add ( VAR3 ) ;
var VAR0 = new ForeignKeyUniquenessChangedConvention ( VAR1 : false ) ; var VAR2 = new ForeignKeyUniquenessChangedConvention ( VAR1 : true ) ; var VAR3 = new ForeignKeyUniquenessChangedConvention ( VAR1 : false ) ; VAR4 . ForeignKeyUniquenessChangedConventions . Add ( VAR0 ) ; VAR4 . ForeignKeyUniquenessChangedConventions . Add ( VAR2 ) ; VAR4 . ForeignKeyUniquenessChangedConventions . Add ( VAR3 ) ;
var VAR0 = VAR1 . WriteCode ( VAR5 , VAR6 , VAR7 , VAR8 , VAR9 ) ; var VAR3 = VAR7 + FileExtension ;
VAR0 . VAR1 . Add ( new PersonA { VAR2 = LITERAL } ) ; VAR0 . SaveChanges ( ) ; var VAR3 = VAR0 . VAR1 . First ( VAR4 => VAR4 . VAR5 == 1 ) ; VAR0 . VAR1 . Remove ( VAR3 ) ; VAR0 . SaveChanges ( ) ; VAR0 . VAR1 . Add ( new PersonA { VAR2 = LITERAL } ) ;
VAR0 . QueryFilter = VAR1 ; VerifyError ( CoreStrings . BadFilterExpression ( VAR1 , VAR0 . DisplayName ( ) , VAR0 . ClrType ) , VAR2 ) ; Expression < Func < Order , bool > > VAR3 = VAR4 => EF . Property < Customer > ( VAR4 , LITERAL ) . CustomerID == LITERAL ; VAR0 . QueryFilter = VAR3 ;
ValidateNoShadowEntities ( VAR0 ) ; ValidateNonNullPrimaryKeys ( VAR0 ) ; ValidateNoShadowKeys ( VAR0 ) ; ValidateClrInheritance ( VAR0 ) ; ValidateChangeTrackingStrategy ( VAR0 ) ; ValidateOwnership ( VAR0 ) ; ValidateDelegatedIdentityNavigations ( VAR0 ) ; ValidateFieldMapping ( VAR0 ) ;
Assert . Null ( VAR0 . SqlServer ( ) . DefaultValue ) ; Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Null ( VAR0 . SqlServer ( ) . DefaultValueSql ) ; Assert . Equal ( 0 , VAR0 . Relational ( ) . ComputedColumnSql ) ; Assert . Equal ( 0 , VAR0 . SqlServer ( ) . ComputedColumnSql ) ;
Assert . Null ( VAR0 . SqlServer ( ) . ComputedColumnSql ) ; Assert . Null ( VAR0 . Relational ( ) . DefaultValue ) ; Assert . Null ( VAR0 . SqlServer ( ) . DefaultValue ) ; Assert . Equal ( 1 , VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Equal ( 1 , VAR0 . SqlServer ( ) . DefaultValueSql ) ;
Assert . NotNull ( VAR0 . SqlServer ( ) . FindSequence ( LITERAL , LITERAL ) ) ; var VAR1 = VAR0 . Relational ( ) . FindSequence ( LITERAL , LITERAL ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Equal ( LITERAL , VAR1 . Schema ) ; Assert . Equal ( LITERAL , VAR1 . IncrementBy ) ; Assert . Equal ( 1 , VAR1 . StartValue ) ; Assert . Null ( VAR1 . MinValue ) ; Assert . Null ( VAR1 . MaxValue ) ; Assert . Same ( typeof ( long ) , VAR1 . ClrType ) ;
GenerateFluentApiForAnnotation ( ref VAR0 , RelationalAnnotationNames . ColumnName , nameof ( RelationalPropertyBuilderExtensions . HasColumnName ) , VAR1 ) ; GenerateFluentApiForAnnotation ( ref VAR0 , RelationalAnnotationNames . ColumnType , nameof ( RelationalPropertyBuilderExtensions . HasColumnType ) , VAR1 ) ; GenerateFluentApiForAnnotation ( ref VAR0 , RelationalAnnotationNames . DefaultValueSql , nameof ( RelationalPropertyBuilderExtensions . HasDefaultValueSql ) , VAR1 ) ; GenerateFluentApiForAnnotation ( ref VAR0 , RelationalAnnotationNames . ComputedColumnSql , nameof ( RelationalPropertyBuilderExtensions . HasComputedColumnSql ) , VAR1 ) ; GenerateFluentApiForAnnotation ( ref VAR0 , RelationalAnnotationNames . DefaultValue , nameof ( RelationalPropertyBuilderExtensions . HasDefaultValue ) , VAR1 ) ;
VAR0 . Property < string > ( LITERAL ) . ValueGeneratedOnUpdate ( ) ; VAR1 . Entity < Quarks > ( VAR0 => { VAR0 . HasKey ( VAR2 => VAR2 . Id ) ; VAR0 . Property ( VAR2 => VAR2 . Up ) . ValueGeneratedOnAddOrUpdate ( ) ; VAR0 . Property ( VAR2 => VAR2 . Down ) . ValueGeneratedNever ( ) ; VAR0 . Property < int > ( LITERAL ) . ValueGeneratedOnAdd ( ) ; VAR0 . Property < string > ( LITERAL ) . ValueGeneratedNever ( ) ; VAR0 . Property < int > ( LITERAL ) . ValueGeneratedOnAddOrUpdate ( ) ; VAR0 . Property < string > ( LITERAL ) . ValueGeneratedOnUpdate ( ) ; } ) ; var VAR3 = VAR4 . FindEntityType ( typeof ( Quarks ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR3 . FindProperty ( Customer . IdProperty . Name ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAddOrUpdate , VAR3 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . Never , VAR3 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR3 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . Never , VAR3 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAddOrUpdate , VAR3 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnUpdate , VAR3 . FindProperty ( LITERAL ) . ValueGenerated ) ;
var VAR0 = Sequence . GetOrAddSequence ( VAR1 , RelationalAnnotationNames . SequencePrefix , LITERAL , LITERAL ) ; VAR0 . StartValue = LITERAL ; VAR0 . IncrementBy = LITERAL ; VAR0 . MinValue = LITERAL ; VAR0 . MaxValue = LITERAL ; VAR0 . ClrType = typeof ( int ) ; Sequence . GetOrAddSequence ( VAR1 , RelationalAnnotationNames . SequencePrefix , LITERAL , LITERAL ) ;
var VAR0 = Sequence . GetOrAddSequence ( VAR1 , RelationalAnnotationNames . SequencePrefix , LITERAL , LITERAL ) ; VAR0 . StartValue = LITERAL ; VAR0 . IncrementBy = LITERAL ; VAR0 . ClrType = typeof ( int ) ; VAR0 = Sequence . GetOrAddSequence ( VAR1 , RelationalAnnotationNames . SequencePrefix , LITERAL , LITERAL ) ;
var VAR0 = Sequence . GetOrAddSequence ( VAR1 , RelationalAnnotationNames . SequencePrefix , LITERAL , LITERAL ) ; VAR0 . StartValue = LITERAL ; VAR0 . IncrementBy = LITERAL ; VAR0 . MinValue = LITERAL ; VAR0 . MaxValue = LITERAL ; VAR0 . ClrType = typeof ( int ) ; var VAR2 = RelationalAnnotationNames . SequencePrefix + LITERAL ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR0 . AddEntry ( VAR1 ) ; var VAR2 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR2 [ VAR4 ] = LITERAL ; VAR2 . SetEntityState ( EntityState . Modified ) ; var VAR5 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR0 . AddEntry ( VAR1 ) ; var VAR2 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR2 [ VAR4 ] = LITERAL ; VAR2 . SetEntityState ( EntityState . Modified ) ; var VAR5 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR5 . AddEntry ( VAR2 ) ; var VAR6 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR6 [ VAR4 ] = LITERAL ; VAR6 . SetEntityState ( EntityState . Deleted ) ; var VAR7 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR0 . AddEntry ( VAR1 ) ; var VAR2 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR2 [ VAR4 ] = VAR5 ; VAR2 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR6 . AddEntry ( VAR2 ) ; var VAR7 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ;
var VAR0 = ( CommandData ) VAR1 [ 0 ] . Item2 ; var VAR2 = ( CommandErrorData ) VAR1 [ 1 ] . Item2 ; Assert . Equal ( VAR3 . DbCommands [ 0 ] , VAR0 . Command ) ; Assert . Equal ( VAR3 . DbCommands [ 0 ] , VAR2 . Command ) ; Assert . Equal ( VAR4 , VAR0 . ExecuteMethod ) ; Assert . Equal ( VAR4 , VAR2 . ExecuteMethod ) ; Assert . Equal ( VAR5 , VAR0 . Async ) ; Assert . Equal ( VAR5 , VAR2 . Async ) ;
var VAR0 = VAR1 . SqlServer ( ) . TypeAliases . SingleOrDefault ( VAR2 => VAR2 . Key . Contains ( LITERAL ) ) ; Assert . NotNull ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . Key ) ; Assert . Equal ( LITERAL , VAR0 . Value ) ; var VAR3 = VAR1 . SqlServer ( ) . TypeAliases . SingleOrDefault ( VAR2 => VAR2 . Key . Contains ( LITERAL ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ; VAR6 . AddEntry ( VAR3 ) ; var VAR7 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . SetEntityState ( EntityState . Deleted ) ; var VAR8 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ;
WireUpPart1 ( VAR4 , VAR5 , VAR6 , VAR7 ) ; WireUpInversePart1 ( VAR4 , VAR5 , VAR6 , VAR7 ) ; WireUpPart2 ( VAR4 , VAR5 , VAR6 , VAR7 ) ; WireUpInversePart2 ( VAR4 , VAR5 , VAR6 , VAR7 ) ;
VAR0 . VAR1 = VAR1 ; Clear ( ) ; VAR4 . Add ( VAR0 ) ; VAR3 . AddRange ( VAR5 ) ; VAR1 = VAR0 ;
var VAR7 = new ValueGeneratorConvention ( ) ; VAR1 . BaseEntityTypeSetConventions . Add ( VAR2 ) ; VAR1 . BaseEntityTypeSetConventions . Add ( VAR3 ) ; VAR1 . BaseEntityTypeSetConventions . Add ( VAR4 ) ; VAR1 . BaseEntityTypeSetConventions . Add ( VAR5 ) ; VAR1 . BaseEntityTypeSetConventions . Add ( VAR6 ) ; VAR1 . BaseEntityTypeSetConventions . Add ( VAR7 ) ;
VAR0 . ForeignKeyAddedConventions . Add ( VAR5 ) ; VAR0 . ForeignKeyAddedConventions . Add ( VAR2 ) ; VAR0 . ForeignKeyAddedConventions . Add ( VAR3 ) ; VAR0 . ForeignKeyRemovedConventions . Add ( VAR4 ) ; VAR0 . ForeignKeyRemovedConventions . Add ( VAR5 ) ;
Assert . Same ( VAR0 , new ValueGeneratorConvention ( ) . Apply ( VAR0 ) ) ; Assert . False ( VAR1 [ 0 ] . RequiresValueGenerator ( ) ) ; Assert . Equal ( ValueGenerated . Never , VAR1 [ 0 ] . ValueGenerated ) ; VAR2 . RemoveForeignKey ( VAR0 . Metadata , ConfigurationSource . Convention ) ; new ValueGeneratorConvention ( ) . Apply ( VAR2 , VAR0 . Metadata ) ;
var VAR0 = VAR1 . CreateCommand ( ) ; VAR0 . CommandText = LITERAL ; var VAR2 = Assert . Throws < SqliteException > ( ( ) => VAR0 . Prepare ( ) ) ; Assert . Equal ( 1 , VAR2 . SqliteErrorCode ) ;
Assert . NotNull ( VAR0 [ 0 ] = VAR1 . GetService < IInMemoryStoreCache > ( ) ) ; Assert . NotNull ( VAR0 [ 1 ] = VAR1 . GetService < ILoggerFactory > ( ) ) ; Assert . NotNull ( VAR0 [ LITERAL ] = VAR1 . GetService < IMemoryCache > ( ) ) ; Assert . NotNull ( VAR1 . GetService < ILogger < Random > > ( ) ) ; Assert . Same ( VAR0 [ 0 ] , VAR2 . GetService < IInMemoryStoreCache > ( ) ) ;
Assert . NotNull ( VAR0 [ 0 ] = VAR1 . GetService < IInMemoryStoreCache > ( ) ) ; Assert . NotNull ( VAR0 [ 1 ] = VAR1 . GetService < ILoggerFactory > ( ) ) ; Assert . NotNull ( VAR0 [ LITERAL ] = VAR1 . GetService < IMemoryCache > ( ) ) ; Assert . Same ( VAR2 , VAR1 . GetService < IDbContextOptions > ( ) ) ; Assert . NotNull ( VAR1 . GetService < ILogger < Random > > ( ) ) ; Assert . Same ( VAR0 [ 0 ] , VAR3 . GetService < IInMemoryStoreCache > ( ) ) ;
VAR12 = VAR13 ; VAR0 = VAR1 ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = VAR9 ;
VAR0 . AddTable ( VAR1 ) ; var VAR2 = new LeftOuterJoinExpression ( VAR3 ) ; var VAR4 = Expression . Constant ( 1 ) ; VAR2 . Predicate = Expression . Equal ( VAR4 , VAR4 ) ; VAR0 . AddTable ( VAR2 ) ;
var VAR8 = VAR1 . VAR2 . Create ( VAR1 . VAR3 . QueryCompilationContext ) ; VAR8 . SetProjectionExpression ( Expression . Constant ( 1 ) ) ; var VAR4 = VAR1 . VAR5 . Clone ( VAR1 . VAR3 . QueryCompilationContext . CreateUniqueTableAlias ( ) ) ; VAR8 . AddTable ( VAR4 ) ; VAR6 . Alias = VAR1 . VAR3 . QueryCompilationContext . CreateUniqueTableAlias ( ) ; var VAR7 = VAR8 . AddInnerJoin ( VAR6 ) ;
VAR0 . AddTable ( VAR1 ) ; var VAR2 = new LeftOuterJoinExpression ( VAR3 ) ; var VAR4 = Expression . Constant ( 1 ) ; VAR2 . Predicate = Expression . Equal ( VAR4 , VAR4 ) ; VAR0 . AddTable ( VAR2 ) ;
Check . NotNull ( VAR20 , nameof ( VAR20 ) ) ; VAR1 = VAR2 ; VAR3 = VAR4 ; VAR5 = ( IRelationalDatabaseCreator ) VAR6 ; VAR7 = VAR8 ; VAR9 = VAR10 ; VAR11 = VAR12 ; VAR13 = VAR14 ; VAR15 = VAR16 ; VAR17 = VAR18 ; VAR19 = VAR20 . InvariantName ;
var VAR0 = VAR1 . GetModel ( new Context1 ( ) , VAR3 , VAR4 ) ; var VAR2 = VAR1 . GetModel ( new Context2 ( ) , VAR3 , VAR4 ) ; Assert . NotSame ( VAR0 , VAR2 ) ; Assert . Same ( VAR0 , VAR1 . GetModel ( new Context1 ( ) , VAR3 , VAR4 ) ) ; Assert . Same ( VAR2 , VAR1 . GetModel ( new Context2 ( ) , VAR3 , VAR4 ) ) ;
VAR0 . Entity < GeneratedEntity > ( ) . HasAlternateKey ( VAR8 => new { VAR8 . VAR5 , VAR8 . VAR7 } ) ; var VAR1 = VAR0 . Model . FindEntityType ( typeof ( GeneratedEntity ) ) ; var VAR2 = VAR1 . FindProperty ( nameof ( GeneratedEntity . VAR3 ) ) ; Assert . Equal ( ValueGenerated . Never , VAR2 . ValueGenerated ) ; Assert . False ( VAR2 . RequiresValueGenerator ( ) ) ; var VAR4 = VAR1 . FindProperty ( nameof ( GeneratedEntity . VAR5 ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR4 . ValueGenerated ) ; Assert . True ( VAR4 . RequiresValueGenerator ( ) ) ; var VAR6 = VAR1 . FindProperty ( nameof ( GeneratedEntity . VAR7 ) ) ; Assert . Equal ( ValueGenerated . OnAddOrUpdate , VAR6 . ValueGenerated ) ; Assert . True ( VAR6 . RequiresValueGenerator ( ) ) ;
var VAR0 = VAR1 . Builder ; Assert . True ( VAR0 . HasValueGenerator ( VAR2 , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR0 . HasValueGenerator ( ( VAR3 , VAR4 ) => new CustomValueGenerator2 ( ) , ConfigurationSource . DataAnnotation ) ) ; Assert . IsType < CustomValueGenerator1 > ( VAR1 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . True ( VAR1 . RequiresValueGenerator ( ) ) ; Assert . True ( VAR0 . HasValueGenerator ( ( VAR3 , VAR4 ) => new CustomValueGenerator2 ( ) , ConfigurationSource . Explicit ) ) ; Assert . IsType < CustomValueGenerator2 > ( VAR1 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . True ( VAR1 . RequiresValueGenerator ( ) ) ;
Assert . Null ( VAR0 . GetFieldName ( ) ) ; Assert . Null ( VAR0 . FieldInfo ) ; Assert . Same ( VAR1 , VAR0 . MemberInfo ) ; VAR0 . SetFieldInfo ( VAR2 , ConfigurationSource . Explicit ) ; Assert . Equal ( VAR3 , VAR0 . GetFieldName ( ) ) ; Assert . Same ( VAR1 ?? ( MemberInfo ) VAR2 , VAR0 . MemberInfo ) ; VAR0 . SetFieldInfo ( null , ConfigurationSource . Explicit ) ; Assert . Null ( VAR0 . GetFieldName ( ) ) ;
Assert . Equal ( VAR0 , VAR1 . GetFieldName ( ) ) ; Assert . Same ( VAR2 ?? ( MemberInfo ) VAR3 , VAR1 . MemberInfo ) ; VAR1 . SetFieldInfo ( null , ConfigurationSource . Explicit ) ; Assert . Null ( VAR1 . GetFieldName ( ) ) ;
var VAR3 = VAR1 . HasKey ( new [ ] { Order . VAR4 . Name , VAR2 . Metadata . Name } , ConfigurationSource . Convention ) ; Assert . NotNull ( VAR3 ) ; Assert . NotNull ( VAR0 ( VAR1 , VAR2 . Metadata ) ) ; Assert . Equal ( ConfigurationSource . Convention , VAR1 . RemoveKey ( VAR3 . Metadata , ConfigurationSource . DataAnnotation ) ) ;
var VAR0 = VAR1 . First ( VAR2 => VAR2 . OrderID == VAR3 . OrderID ) ; VAR3 . Order = VAR0 ; VAR0 . OrderDetails . Add ( VAR3 ) ; var VAR4 = VAR5 . First ( VAR6 => VAR6 . ProductID == VAR3 . ProductID ) ;
VAR0 . AddTable ( VAR1 , createUniqueAlias : false ) ; var VAR2 = new LeftOuterJoinExpression ( VAR3 ) ; var VAR4 = Expression . Constant ( 1 ) ; VAR2 . Predicate = Expression . Equal ( VAR4 , VAR4 ) ; VAR0 . AddTable ( VAR2 , createUniqueAlias : false ) ;
Assert . Equal ( ( byte ? ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( unchecked ( ( uint ) 1 ) , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( unchecked ( ( ulong ) 1 ) , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( unchecked ( ( ushort ) 1 ) , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( sbyte ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( uint ? ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( ulong ? ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ; Assert . Equal ( ( ushort ? ) 1 , CreateAndUseFactory ( VAR0 . FindProperty ( LITERAL ) ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . ValueGenerated = VAR2 ? ValueGenerated . OnAdd : ValueGenerated . Never ; VAR0 . Relational ( ) . ColumnName = LITERAL ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR3 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . RequiresValueGenerator = true ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeCompositeEntityBase ) ) ; var VAR4 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . IsNullable = false ; VAR1 . GetOrSetPrimaryKey ( new [ ] { VAR0 , VAR2 } ) ; var VAR3 = VAR4 . AddEntityType ( typeof ( SomeEntity ) ) ; VAR3 . HasBaseType ( VAR5 ) ; var VAR6 = VAR3 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . RequiresValueGenerator = true ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeCompositeEntityBase ) ) ; var VAR4 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR5 . IsNullable = false ; VAR2 . GetOrSetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ; var VAR6 = VAR3 . AddEntityType ( typeof ( SomeEntity ) ) ; VAR6 . HasBaseType ( VAR1 ) ; var VAR7 = VAR6 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . IsConcurrencyToken = true ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeDependentEntity ) ) ; VAR2 . HasBaseType ( VAR4 ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . GetOrAddForeignKey ( new [ ] { VAR5 } , VAR1 . FindPrimaryKey ( ) , VAR1 ) ; var VAR6 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR6 . RequiresValueGenerator = true ; var VAR7 = VAR3 . AddEntityType ( typeof ( FullNotificationEntity ) ) ; var VAR8 = VAR7 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR7 . GetOrSetPrimaryKey ( VAR8 ) ; var VAR9 = VAR7 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . GetOrAddForeignKey ( new [ ] { VAR0 } , VAR2 . FindPrimaryKey ( ) , VAR2 ) ; var VAR3 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR3 . RequiresValueGenerator = true ; var VAR4 = VAR5 . AddEntityType ( typeof ( FullNotificationEntity ) ) ; var VAR6 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR4 . GetOrSetPrimaryKey ( VAR6 ) ; var VAR7 = VAR4 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . IsConcurrencyToken = true ; VAR1 . ChangeTrackingStrategy = ChangeTrackingStrategy . ChangedNotifications ; var VAR3 = VAR4 . AddEntityType ( typeof ( SomeMoreDependentEntity ) ) ; VAR3 . HasBaseType ( VAR5 ) ; var VAR6 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR7 = VAR3 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . RequiresValueGenerator = true ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeCompositeEntityBase ) ) ; var VAR4 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . IsNullable = false ; VAR1 . GetOrSetPrimaryKey ( new [ ] { VAR0 , VAR2 } ) ; var VAR3 = VAR4 . AddEntityType ( typeof ( SomeEntity ) ) ; VAR3 . HasBaseType ( VAR5 ) ; var VAR6 = VAR3 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . RequiresValueGenerator = true ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeCompositeEntityBase ) ) ; var VAR4 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR5 . IsNullable = false ; VAR2 . GetOrSetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ; var VAR6 = VAR3 . AddEntityType ( typeof ( SomeEntity ) ) ; VAR6 . HasBaseType ( VAR1 ) ; var VAR7 = VAR6 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . IsConcurrencyToken = false ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeDependentEntity ) ) ; VAR2 . HasBaseType ( VAR4 ) ; var VAR5 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . GetOrAddForeignKey ( new [ ] { VAR5 } , VAR1 . FindPrimaryKey ( ) , VAR1 ) ; var VAR6 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR6 . RequiresValueGenerator = true ; var VAR7 = VAR3 . AddEntityType ( typeof ( FullNotificationEntity ) ) ; var VAR8 = VAR7 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR7 . GetOrSetPrimaryKey ( VAR8 ) ; var VAR9 = VAR7 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . GetOrAddForeignKey ( new [ ] { VAR0 } , VAR2 . FindPrimaryKey ( ) , VAR2 ) ; var VAR3 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR3 . RequiresValueGenerator = true ; var VAR4 = VAR5 . AddEntityType ( typeof ( FullNotificationEntity ) ) ; var VAR6 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR4 . GetOrSetPrimaryKey ( VAR6 ) ; var VAR7 = VAR4 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . IsConcurrencyToken = true ; VAR1 . ChangeTrackingStrategy = ChangeTrackingStrategy . ChangedNotifications ; var VAR3 = VAR4 . AddEntityType ( typeof ( SomeMoreDependentEntity ) ) ; VAR3 . HasBaseType ( VAR5 ) ; var VAR6 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR7 = VAR3 . AddProperty ( LITERAL , typeof ( string ) ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . GetOrAddKey ( new [ ] { VAR3 , VAR0 } ) ; IMutableEntityType VAR4 = VAR5 . AddEntityType ( typeof ( VAR6 ) ) ; VAR4 . BaseType = VAR1 ; var VAR7 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; Assert . False ( VAR0 . IsShadowProperty ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Same ( typeof ( int ) , VAR0 . ClrType ) ; Assert . False ( ( ( IProperty ) VAR0 ) . IsConcurrencyToken ) ; Assert . Same ( VAR1 , VAR0 . DeclaringEntityType ) ; var VAR3 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ;
Assert . Null ( VAR0 . FieldInfo ) ; Assert . Same ( VAR1 , VAR0 . MemberInfo ) ; VAR0 . SetFieldInfo ( VAR2 , ConfigurationSource . Explicit ) ; Assert . Equal ( VAR3 , VAR0 . GetField ( ) ) ; Assert . Same ( VAR1 ?? ( MemberInfo ) VAR2 , VAR0 . MemberInfo ) ; VAR0 . SetFieldInfo ( null , ConfigurationSource . Explicit ) ; Assert . Null ( VAR0 . GetField ( ) ) ; Assert . Null ( VAR0 . FieldInfo ) ;
var VAR0 = VAR1 . Relationship ( VAR2 , LITERAL , null , ConfigurationSource . Convention ) ; VAR0 = new ForeignKeyPropertyDiscoveryConvention ( ) . Apply ( VAR0 ) ; var VAR3 = VAR0 . Metadata ; Assert . Same ( VAR3 , VAR1 . Metadata . GetForeignKeys ( ) . Single ( ) ) ; Assert . Null ( VAR3 . GetForeignKeyPropertiesConfigurationSource ( ) ) ; Assert . Equal ( LITERAL + VAR4 . VAR5 , VAR3 . Properties . Single ( ) . VAR5 ) ;
var VAR0 = VAR1 . Relationship ( VAR2 , LITERAL , null , ConfigurationSource . Convention ) ; VAR0 = new ForeignKeyPropertyDiscoveryConvention ( ) . Apply ( VAR0 ) ; var VAR3 = VAR0 . Metadata ; Assert . Same ( VAR3 , VAR1 . Metadata . GetForeignKeys ( ) . Single ( ) ) ; Assert . Null ( VAR3 . GetForeignKeyPropertiesConfigurationSource ( ) ) ; Assert . Equal ( LITERAL + VAR4 . VAR5 , VAR3 . Properties . Single ( ) . VAR5 ) ; Assert . False ( VAR3 . IsUnique ) ; var VAR6 = VAR1 . Property ( LITERAL , typeof ( int ? ) , ConfigurationSource . Convention ) ;
var VAR2 = VAR1 . GetForeignKeys ( ) . Single ( VAR5 => VAR5 != VAR3 ) ; Assert . NotEqual ( VAR3 . Properties , VAR2 . Properties ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR4 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR4 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
VAR0 . Value . LogDebug ( DesignStrings . WritingMigration ( VAR1 ) ) ; Directory . CreateDirectory ( VAR2 ) ; File . WriteAllText ( VAR1 , VAR3 . MigrationCode , Encoding . UTF8 ) ; File . WriteAllText ( VAR4 , VAR3 . MetadataCode , Encoding . UTF8 ) ; VAR0 . Value . LogDebug ( DesignStrings . WritingSnapshot ( VAR5 ) ) ;
var VAR4 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Equal ( nameof ( Order . Customer ) , VAR4 . DependentToPrincipal . Name ) ; Assert . Equal ( nameof ( Customer . Orders ) , VAR4 . PrincipalToDependent . Name ) ; Assert . NotNull ( VAR1 . GetForeignKeys ( ) . Single ( VAR2 => VAR2 != VAR4 ) ) ; Assert . Same ( VAR4 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR4 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
var VAR0 = VAR1 . Property ( LITERAL , typeof ( int ) , ConfigurationSource . DataAnnotation ) ; VAR0 . IsConcurrencyToken ( true , ConfigurationSource . Convention ) ; VAR0 . HasMaxLength ( 1 , ConfigurationSource . DataAnnotation ) ; var VAR3 = VAR4 . Entity ( typeof ( BackOrder ) , ConfigurationSource . Convention ) ; VAR3 . HasBaseType ( VAR5 . Metadata , ConfigurationSource . Convention ) ; var VAR6 = VAR3 . Property ( LITERAL , typeof ( byte ) , ConfigurationSource . Convention ) ; VAR6 . RequiresValueGenerator ( true , ConfigurationSource . Convention ) ; VAR6 . HasMaxLength ( LITERAL , ConfigurationSource . Convention ) ; var VAR7 = VAR5 . Property ( LITERAL , typeof ( int ) , ConfigurationSource . Convention ) ; Assert . Same ( VAR7 . Metadata , VAR5 . Metadata . FindProperty ( LITERAL ) ) ; Assert . False ( VAR5 . Ignore ( LITERAL , ConfigurationSource . Convention ) ) ;
var VAR0 = VAR1 . Property ( LITERAL , typeof ( byte ) , ConfigurationSource . Convention ) ; VAR0 . RequiresValueGenerator ( true , ConfigurationSource . Convention ) ; VAR0 . HasMaxLength ( LITERAL , ConfigurationSource . Convention ) ; var VAR3 = VAR4 . Property ( LITERAL , typeof ( int ) , ConfigurationSource . Convention ) ; Assert . Same ( VAR3 . Metadata , VAR4 . Metadata . FindProperty ( LITERAL ) ) ; Assert . False ( VAR4 . Ignore ( LITERAL , ConfigurationSource . Convention ) ) ;
Assert . Equal ( VAR4 . Count == 0 ? 0 : 1 , VAR0 ) ; Assert . Equal ( VAR4 . Count == 0 ? 0 : 1 , VAR1 ) ; Assert . Equal ( VAR4 . Count == 0 ? 0 : 1 , VAR2 ) ; Assert . Empty ( VAR3 ) ; VAR3 . Clear ( ) ; Assert . Equal ( VAR4 . Count == 0 ? 0 : 1 , VAR0 ) ; Assert . Equal ( VAR4 . Count == 0 ? 0 : 1 , VAR1 ) ; Assert . Equal ( VAR4 . Count == 0 ? 0 : 1 , VAR2 ) ;
Assert . Equal ( 0 , VAR0 . FindProperty ( Customer . IdProperty . Name ) . GetOriginalValueIndex ( ) ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . GetOriginalValueIndex ( ) ) ; Assert . Equal ( - 1 , VAR0 . FindProperty ( LITERAL ) . GetOriginalValueIndex ( ) ) ; Assert . Equal ( 1 , VAR0 . FindProperty ( LITERAL ) . GetOriginalValueIndex ( ) ) ; Assert . Equal ( - 1 , VAR0 . FindProperty ( LITERAL ) . GetOriginalValueIndex ( ) ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . GetOriginalValueIndex ( ) ) ;
Assert . True ( new KeyConvention ( ) . Apply ( VAR0 , null ) ) ; var VAR1 = VAR0 . Metadata . Properties ; Assert . True ( VAR1 [ 0 ] . RequiresValueGenerator ) ;
Assert . Equal ( VAR0 . VAR1 , VAR2 . VAR3 ) ; Assert . Same ( VAR0 , VAR2 . VAR4 ) ; Assert . Equal ( new [ ] { VAR2 } . ToList ( ) , VAR0 . VAR5 . ToList ( ) ) ; Assert . Equal ( VAR6 , VAR7 . Entry ( VAR0 ) . State ) ; Assert . Equal ( VAR6 , VAR7 . Entry ( VAR2 ) . State ) ; AssertFixup ( VAR7 , ( ) => { Assert . Equal ( VAR0 . VAR1 , VAR2 . VAR3 ) ; Assert . Same ( VAR0 , VAR2 . VAR4 ) ; Assert . Equal ( new [ ] { VAR2 } . ToList ( ) , VAR0 . VAR5 . ToList ( ) ) ; Assert . Equal ( VAR6 , VAR7 . Entry ( VAR0 ) . State ) ; Assert . Equal ( VAR6 , VAR7 . Entry ( VAR2 ) . State ) ; } ) ;
Assert . Equal ( VAR0 . VAR1 , VAR2 . VAR3 ) ; Assert . Equal ( new [ ] { VAR2 } . ToList ( ) , VAR0 . VAR4 . ToList ( ) ) ; Assert . Equal ( VAR5 , VAR6 . Entry ( VAR0 ) . State ) ; Assert . Equal ( VAR5 , VAR6 . Entry ( VAR2 ) . State ) ; AssertFixup ( VAR6 , ( ) => { Assert . Equal ( VAR0 . VAR1 , VAR2 . VAR3 ) ; Assert . Equal ( new [ ] { VAR2 } . ToList ( ) , VAR0 . VAR4 . ToList ( ) ) ; Assert . Equal ( VAR5 , VAR6 . Entry ( VAR0 ) . State ) ; Assert . Equal ( VAR5 , VAR6 . Entry ( VAR2 ) . State ) ; } ) ;
var VAR0 = new VAR1 ( LITERAL ) ; var VAR3 = new VAR4 ( LITERAL , 0 ) ; VAR5 . Entry ( VAR3 ) . State = VAR6 ; VAR3 . SetCategory ( VAR0 ) ; VAR0 . AddProduct ( VAR3 ) ;
var VAR0 = new VAR1 ( LITERAL ) ; var VAR3 = new VAR4 ( LITERAL , 0 ) ; VAR5 . Entry ( VAR3 ) . State = VAR6 ; VAR3 . SetCategoryId ( VAR0 . VAR2 ) ; VAR0 . AddProduct ( VAR3 ) ;
var VAR0 = new VAR1 ( LITERAL ) ; var VAR3 = new VAR4 ( LITERAL , 0 ) ; VAR5 . Entry ( VAR0 ) . State = VAR6 ; VAR3 . SetCategoryId ( VAR0 . VAR2 ) ; VAR0 . AddProduct ( VAR3 ) ;
var VAR0 = new VAR1 ( LITERAL ) ; var VAR3 = new VAR4 ( LITERAL , 0 ) ; VAR5 . Entry ( VAR0 ) . State = VAR6 ; VAR3 . SetCategoryId ( VAR0 . VAR2 ) ; VAR0 . AddProduct ( VAR3 ) ;
var VAR0 = new VAR1 ( LITERAL ) ; var VAR3 = new VAR4 ( LITERAL , 0 ) ; VAR5 . Entry ( VAR3 ) . State = VAR6 ; VAR3 . SetParentId ( VAR0 . VAR2 ) ; VAR3 . SetParent ( VAR0 ) ; VAR0 . SetChild ( VAR3 ) ;
var VAR0 = new VAR1 ( LITERAL ) ; var VAR3 = new VAR4 ( LITERAL , 0 ) ; VAR5 . Entry ( VAR0 ) . State = VAR6 ; VAR3 . SetParentId ( VAR0 . VAR2 ) ; VAR3 . SetParent ( VAR0 ) ; VAR0 . SetChild ( VAR3 ) ;
var VAR0 = new VAR1 ( LITERAL ) ; var VAR3 = new VAR4 ( LITERAL , 0 ) ; VAR5 . Entry ( VAR0 ) . State = VAR6 ; VAR3 . SetParent ( VAR0 ) ; VAR0 . SetChild ( VAR3 ) ;
Assert . Null ( VAR0 . VAR1 ) ; var VAR2 = VAR3 . VAR1 . First ( ) ; VAR3 . VAR1 . Remove ( VAR2 ) ; VAR2 . SetCategory ( VAR0 ) ; VAR0 . AddProduct ( VAR2 ) ; Assert . Equal ( VAR3 . VAR5 , VAR2 . VAR6 ) ; VAR7 . ChangeTracker . DetectChanges ( ) ; Assert . Equal ( VAR0 . VAR5 , VAR2 . VAR6 ) ; Assert . Equal ( VAR3 , VAR3 . VAR1 . Single ( ) . VAR4 ) ; Assert . Equal ( VAR0 , VAR0 . VAR1 . Single ( ) . VAR4 ) ;
Assert . Equal ( TrackingQueryMode . Simple , VAR0 . GetTrackingQueryMode ( VAR1 ) ) ; VAR0 . BeginTrackingQuery ( ) ; Assert . Equal ( TrackingQueryMode . Simple , VAR0 . GetTrackingQueryMode ( VAR1 ) ) ; Assert . Equal ( TrackingQueryMode . Single , VAR0 . GetTrackingQueryMode ( VAR2 ) ) ; Assert . Equal ( TrackingQueryMode . Single , VAR0 . GetTrackingQueryMode ( VAR1 ) ) ;
Check . NotEmpty ( VAR11 , nameof ( VAR11 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR1 ; var VAR7 = new LazyRef < ILogger > ( ( ) => VAR3 . CreateCommandsLogger ( ) ) ; var VAR8 = new StartupInvoker ( VAR7 , VAR9 , VAR10 , VAR11 ) ;
Check . NotEmpty ( VAR10 , nameof ( VAR10 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR1 ; var VAR7 = new StartupInvoker ( VAR8 , VAR9 , VAR10 ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 . Count ( ) ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 . First ( ) . VAR2 . Count ( ) ) ; Assert . Equal ( 1 , VAR0 . VAR3 . Count ( ) ) ; Assert . Equal ( 1 , VAR0 . VAR3 . First ( ) . VAR2 . Count ( ) ) ;
Assert . Equal ( 1 , VAR0 . VAR1 . Count ( ) ) ; Assert . Equal ( 1 , VAR0 . VAR1 . First ( ) . VAR2 . Count ( ) ) ; Assert . Equal ( LITERAL , VAR0 . VAR3 . Count ( ) ) ; Assert . Equal ( LITERAL , VAR0 . VAR3 . First ( ) . VAR2 . Count ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 . Count ( ) ) ; var VAR2 = VAR0 . VAR1 . First ( ) ; VAR3 = VAR2 . VAR4 ; var VAR5 = VAR2 . VAR6 . ToList ( ) ; VAR7 = VAR5 . Select ( VAR8 => VAR8 . VAR4 ) . ToList ( ) ; Assert . Equal ( LITERAL , VAR7 . Count ) ; VAR9 . Remove ( VAR2 ) ; VAR9 . SaveChanges ( ) ; Assert . Equal ( EntityState . Detached , VAR9 . Entry ( VAR2 ) . State ) ; Assert . True ( VAR5 . All ( VAR8 => VAR9 . Entry ( VAR8 ) . State == EntityState . Detached ) ) ; Assert . Equal ( 1 , VAR0 . VAR1 . Count ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 . Count ( ) ) ; var VAR2 = VAR0 . VAR1 . First ( ) ; VAR3 = VAR2 . VAR4 ; var VAR5 = VAR2 . VAR6 . ToList ( ) ; VAR7 = VAR5 . Select ( VAR8 => VAR8 . VAR4 ) . ToList ( ) ; Assert . Equal ( LITERAL , VAR7 . Count ) ; VAR9 . Remove ( VAR2 ) ; VAR9 . SaveChanges ( ) ; Assert . Equal ( EntityState . Detached , VAR9 . Entry ( VAR2 ) . State ) ; Assert . True ( VAR5 . All ( VAR8 => VAR9 . Entry ( VAR8 ) . State == EntityState . Unchanged ) ) ; Assert . Equal ( 1 , VAR0 . VAR1 . Count ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 . Count ( ) ) ; var VAR2 = VAR0 . VAR1 . First ( ) ; VAR3 = VAR2 . VAR4 ; var VAR5 = VAR2 . VAR6 . ToList ( ) ; VAR7 = VAR5 . Select ( VAR8 => VAR8 . VAR4 ) . ToList ( ) ; Assert . Equal ( LITERAL , VAR7 . Count ) ; VAR9 . Remove ( VAR2 ) ; VAR9 . SaveChanges ( ) ; Assert . Equal ( EntityState . Detached , VAR9 . Entry ( VAR2 ) . State ) ; Assert . True ( VAR5 . All ( VAR8 => VAR9 . Entry ( VAR8 ) . State == EntityState . Unchanged ) ) ; Assert . Equal ( 1 , VAR0 . VAR1 . Count ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 . Count ( ) ) ; var VAR2 = VAR0 . VAR1 . First ( ) ; VAR3 = VAR2 . VAR4 ; var VAR5 = VAR2 . VAR6 . ToList ( ) ; VAR7 = VAR5 . Select ( VAR8 => VAR8 . VAR4 ) . ToList ( ) ; Assert . Equal ( LITERAL , VAR7 . Count ) ; var VAR9 = new RequiredAk2 ( ) ; Add ( VAR2 . VAR6 , VAR9 ) ;
var VAR7 = Metadata . AddForeignKey ( VAR1 , VAR2 , VAR3 , VAR4 : null , VAR5 : false ) ; VAR7 . UpdateConfigurationSource ( VAR4 ) ; VAR3 . UpdateConfigurationSource ( VAR4 ) ; HasIndex ( VAR1 , VAR7 . IsUnique , ConfigurationSource . Convention ) ; var VAR6 = VAR7 . Builder ;
Assert . Null ( VAR0 . Relational ( ) . ComputedColumnSql ) ; VAR0 . Relational ( ) . ComputedColumnSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ComputedColumnSql ) ; VAR0 . Relational ( ) . ComputedColumnSql = null ; Assert . Null ( VAR0 . Relational ( ) . ComputedColumnSql ) ;
var VAR4 = VAR5 ; VAR5 = InferTypeMappingFromColumn ( VAR2 . Match ) ?? VAR4 ; Visit ( VAR2 . Match ) ; VAR3 . Append ( LITERAL ) ; Visit ( VAR2 . Pattern ) ; VAR5 = VAR4 ;
var VAR0 = new Model ( ) . AddEntityType ( nameof ( SelfRef ) ) ; var VAR1 = VAR0 . GetOrSetPrimaryKey ( VAR0 . AddProperty ( nameof ( SelfRef . VAR10 ) , typeof ( int ) , shadow : true ) ) ; var VAR3 = VAR0 . AddProperty ( nameof ( SelfRef . VAR11 ) , typeof ( int ? ) , shadow : true ) ; var VAR5 = VAR0 . AddForeignKey ( new [ ] { VAR3 } , VAR1 , VAR0 ) ; VAR5 . IsUnique = true ; var VAR6 = VAR5 . HasDependentToPrincipal ( nameof ( SelfRef . VAR7 ) ) ; var VAR8 = VAR5 . HasPrincipalToDependent ( nameof ( SelfRef . VAR9 ) ) ;
VAR0 . HasPrincipalToDependent ( VAR11 . OrdersProperty ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( SpecialCustomer ) ) ; Assert . Equal ( new [ ] { LITERAL } , VAR3 . GetNavigations ( ) . Select ( VAR4 => VAR4 . VAR5 ) . ToArray ( ) ) ; Assert . Equal ( new string [ 0 ] , VAR1 . GetNavigations ( ) . Select ( VAR4 => VAR4 . VAR5 ) . ToArray ( ) ) ; VAR1 . HasBaseType ( VAR3 ) ; Assert . Equal ( new [ ] { LITERAL } , VAR3 . GetNavigations ( ) . Select ( VAR4 => VAR4 . VAR5 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL } , VAR1 . GetNavigations ( ) . Select ( VAR4 => VAR4 . VAR5 ) . ToArray ( ) ) ; var VAR6 = VAR7 . GetOrAddProperty ( Order . VAR8 ) ; var VAR9 = VAR7 . GetOrAddForeignKey ( VAR6 , VAR10 , VAR1 ) ; VAR9 . HasPrincipalToDependent ( SpecialCustomer . DerivedOrdersProperty ) ;
VAR0 . HasPrincipalToDependent ( VAR10 . OrdersProperty ) ; Assert . Equal ( new [ ] { LITERAL } , VAR1 . GetNavigations ( ) . Select ( VAR2 => VAR2 . VAR3 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL } , VAR4 . GetNavigations ( ) . Select ( VAR2 => VAR2 . VAR3 ) . ToArray ( ) ) ; var VAR5 = VAR6 . GetOrAddProperty ( Order . VAR7 ) ; var VAR8 = VAR6 . GetOrAddForeignKey ( VAR5 , VAR9 , VAR4 ) ; VAR8 . HasPrincipalToDependent ( SpecialCustomer . DerivedOrdersProperty ) ;
VAR0 . HasPrincipalToDependent ( VAR11 . OrdersProperty ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( SpecialCustomer ) ) ; VAR1 . HasBaseType ( VAR3 ) ; var VAR4 = VAR5 . GetOrAddProperty ( Order . VAR6 ) ; var VAR7 = VAR5 . GetOrAddForeignKey ( VAR4 , VAR8 , VAR1 ) ; VAR7 . HasPrincipalToDependent ( SpecialCustomer . DerivedOrdersProperty ) ; VAR1 . HasBaseType ( null ) ; Assert . Equal ( new [ ] { nameof ( VAR11 . VAR12 ) } , VAR3 . GetNavigations ( ) . Select ( VAR9 => VAR9 . VAR10 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { nameof ( SpecialCustomer . VAR13 ) } , VAR1 . GetNavigations ( ) . Select ( VAR9 => VAR9 . VAR10 ) . ToArray ( ) ) ;
VAR0 . HasPrincipalToDependent ( SpecialCustomer . DerivedOrdersProperty ) ; VAR1 . HasBaseType ( null ) ; Assert . Equal ( new [ ] { nameof ( VAR5 . VAR6 ) } , VAR2 . GetNavigations ( ) . Select ( VAR3 => VAR3 . VAR4 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { nameof ( SpecialCustomer . VAR7 ) } , VAR1 . GetNavigations ( ) . Select ( VAR3 => VAR3 . VAR4 ) . ToArray ( ) ) ;
Assert . True ( VAR0 . Photos == null || ! VAR0 . Photos . Any ( ) ) ; var VAR1 = VAR2 . ProductWebFeatures . Single ( VAR3 => VAR3 . Heading . StartsWith ( LITERAL ) ) ; var VAR4 = VAR2 . ProductWebFeatures . Single ( VAR3 => VAR3 . Heading . StartsWith ( LITERAL ) ) ; Assert . Same ( VAR5 , VAR1 . Photo ) ; Assert . Same ( VAR1 , VAR5 . Features . Single ( ) ) ; Assert . Same ( VAR6 , VAR1 . Review ) ; Assert . Same ( VAR1 , VAR6 . Features . Single ( ) ) ; Assert . Null ( VAR4 . Photo ) ; Assert . True ( VAR7 . Features == null || ! VAR7 . Features . Any ( ) ) ;
Assert . Empty ( VAR0 . GetContainingKeys ( ) ) ; var VAR1 = VAR2 . GetOrSetPrimaryKey ( new [ ] { VAR0 , VAR3 } ) ; var VAR4 = VAR2 . GetOrAddKey ( VAR0 ) ; Assert . NotNull ( VAR1 . Builder ) ; Assert . NotNull ( VAR4 . Builder ) ; Assert . Equal ( new [ ] { VAR4 , VAR1 } , VAR2 . GetKeys ( ) . ToArray ( ) ) ; Assert . True ( VAR0 . IsKey ( ) ) ; Assert . Equal ( new [ ] { VAR1 , VAR4 } , VAR0 . GetContainingKeys ( ) . ToArray ( ) ) ;
Assert . Equal ( new [ ] { VAR0 , VAR1 } , VAR2 . GetContainingKeys ( ) . ToArray ( ) ) ; Assert . Same ( VAR0 , VAR3 . RemoveKey ( VAR0 . Properties ) ) ; Assert . Null ( VAR3 . RemoveKey ( VAR0 . Properties ) ) ; Assert . Equal ( new [ ] { VAR1 } , VAR3 . GetKeys ( ) . ToArray ( ) ) ; Assert . Same ( VAR1 , VAR3 . RemoveKey ( new [ ] { VAR2 } ) ) ; Assert . Null ( VAR0 . Builder ) ; Assert . Null ( VAR1 . Builder ) ; Assert . Empty ( VAR3 . GetKeys ( ) ) ; Assert . False ( VAR2 . IsKey ( ) ) ; Assert . Empty ( VAR2 . GetContainingKeys ( ) ) ;
Assert . Empty ( VAR0 . GetContainingForeignKeys ( ) ) ; var VAR1 = VAR2 . AddForeignKey ( VAR0 , VAR3 , VAR4 ) ; var VAR5 = VAR2 . AddForeignKey ( VAR6 , VAR3 , VAR4 ) ; Assert . NotNull ( VAR1 . Builder ) ; Assert . NotNull ( VAR5 . Builder ) ; Assert . Equal ( new [ ] { VAR1 , VAR5 } , VAR2 . GetForeignKeys ( ) . ToArray ( ) ) ; Assert . True ( VAR0 . IsForeignKey ( ) ) ; Assert . Same ( VAR1 , VAR0 . GetContainingForeignKeys ( ) . Single ( ) ) ;
VAR0 . Value . LogDebug ( ToolsCoreStrings . WritingMigration ( VAR1 ) ) ; Directory . CreateDirectory ( VAR2 ) ; File . WriteAllText ( VAR1 , VAR3 . MigrationCode , Encoding . UTF8 ) ; File . WriteAllText ( VAR4 , VAR3 . MetadataCode , Encoding . UTF8 ) ; VAR0 . Value . LogDebug ( ToolsCoreStrings . WritingSnapshot ( VAR5 ) ) ;
Assert . NotNull ( VAR0 [ 0 ] = VAR1 . GetService < IInMemoryStoreSource > ( ) ) ; Assert . NotNull ( VAR0 [ 1 ] = VAR1 . GetService < ILoggerFactory > ( ) ) ; Assert . NotNull ( VAR0 [ LITERAL ] = VAR1 . GetService < IMemoryCache > ( ) ) ; Assert . NotNull ( VAR1 . GetService < ILogger < Random > > ( ) ) ; Assert . Same ( VAR0 [ 0 ] , VAR2 . GetService < IInMemoryStoreSource > ( ) ) ;
Assert . NotNull ( VAR0 [ 0 ] = VAR1 . GetService < IInMemoryStoreSource > ( ) ) ; Assert . NotNull ( VAR0 [ 1 ] = VAR1 . GetService < ILoggerFactory > ( ) ) ; Assert . NotNull ( VAR0 [ LITERAL ] = VAR1 . GetService < IMemoryCache > ( ) ) ; Assert . Same ( VAR2 , VAR1 . GetService < IDbContextOptions > ( ) ) ; Assert . NotNull ( VAR1 . GetService < ILogger < Random > > ( ) ) ; Assert . Same ( VAR0 [ 0 ] , VAR3 . GetService < IInMemoryStoreSource > ( ) ) ;
var VAR0 = VAR1 . For ( VAR2 ) . ToList ( ) ; var VAR3 = VAR4 . IsColumnNullable ( ) ; var VAR5 = VAR2 . IsColumnNullable ( ) ; var VAR6 = VAR3 != VAR5 ; var VAR7 = VAR8 != VAR9 ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadow : true ) ; var VAR2 = VAR1 . GetOrAddKey ( new [ ] { VAR3 , VAR0 } ) ; IMutableEntityType VAR4 = VAR5 . AddEntityType ( typeof ( VAR6 ) ) ; VAR4 . BaseType = VAR1 ; var VAR7 = VAR4 . AddProperty ( LITERAL , typeof ( int ) , shadow : true ) ;
Assert . NotNull ( VAR0 . Property ( Order . VAR1 . Name , typeof ( int ) , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR0 . Ignore ( Order . VAR1 . Name , ConfigurationSource . Convention ) ) ; Assert . NotNull ( VAR2 . FindProperty ( Order . VAR1 . Name ) ) ; Assert . True ( VAR0 . Ignore ( Order . VAR1 . Name , ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR2 . FindProperty ( Order . VAR1 . Name ) ) ; Assert . NotNull ( VAR0 . Property ( Order . VAR1 . Name , typeof ( int ) , ConfigurationSource . Explicit ) ) ;
var VAR0 = new [ ] { LITERAL , LITERAL , null } ; var VAR1 = new int ? [  ] { 0 , 1 , null } ; var VAR2 = new [ ] { false , true , true } ; var VAR3 = new [ ] { LITERAL , LITERAL , LITERAL } ; var VAR4 = new [ ] { 0 , 1 , LITERAL } ;
var VAR0 = new [ ] { LITERAL , LITERAL , null } ; var VAR1 = new int ? [  ] { 0 , 1 , null } ; var VAR2 = new [ ] { false , true , true } ; var VAR3 = new [ ] { LITERAL , LITERAL , LITERAL } ; var VAR4 = new [ ] { 0 , 1 , LITERAL } ;
Assert . True ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasColumnName ( LITERAL ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasColumnType ( LITERAL ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDefaultValue ( 1 ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasGeneratedValueSql ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnType ) ; Assert . Equal ( 1 , VAR0 . Metadata . Relational ( ) . DefaultValue ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . GeneratedValueSql ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasColumnName ( LITERAL ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasColumnType ( LITERAL ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasDefaultValue ( 0 ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasGeneratedValueSql ( LITERAL ) ) ;
Assert . True ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ;
Assert . True ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ;
Assert . Equal ( SqlServerModelBuilderAnnotations . DefaultHiLoSequenceName , VAR0 . HiLoSequenceName ) ; Assert . Null ( VAR0 . HiLoSequenceSchema ) ; Assert . Null ( VAR1 . FindSequence ( SqlServerModelBuilderAnnotations . DefaultHiLoSequenceName ) ) ; Assert . NotNull ( VAR0 . FindSequence ( SqlServerModelBuilderAnnotations . DefaultHiLoSequenceName ) ) ;
Assert . True ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . IsClustered ( true ) ) ; Assert . True ( VAR0 . Metadata . SqlServer ( ) . IsClustered ) ; Assert . True ( VAR0 . SqlServer ( ConfigurationSource . DataAnnotation ) . IsClustered ( false ) ) ; Assert . False ( VAR0 . Metadata . SqlServer ( ) . IsClustered ) ; Assert . False ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . IsClustered ( true ) ) ;
Assert . True ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . SqlServer ( ) . Name ) ; Assert . True ( VAR0 . SqlServer ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . SqlServer ( ) . Name ) ; Assert . False ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ;
Assert . True ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasColumnName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . ColumnName ) ; Assert . True ( VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasColumnName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . ColumnName ) ; Assert . False ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasColumnName ( LITERAL ) ) ;
Assert . True ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . Name ) ; Assert . True ( VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . Name ) ; Assert . False ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ) ;
VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . Name ) ; VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . Name ) ; VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasName ( LITERAL ) ;
Assert . True ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . Name ) ; Assert . True ( VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . Name ) ; Assert . False ( VAR0 . Sqlite ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ;
Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . Sqlite ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . Sqlite ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . Sqlite ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . Sqlite ( ) . DefaultValueSql ) ; Assert . Null ( VAR0 . FindProperty ( LITERAL ) . Sqlite ( ) . DefaultValueSql ) ;
File . WriteAllText ( VAR0 , VAR1 . MigrationCode , Encoding . UTF8 ) ; File . WriteAllText ( VAR2 , VAR1 . MetadataCode , Encoding . UTF8 ) ; VAR3 . Value . LogDebug ( CommandsStrings . WritingSnapshot ( VAR4 ) ) ; Directory . CreateDirectory ( VAR5 ) ; File . WriteAllText ( VAR4 , VAR1 . SnapshotCode , Encoding . UTF8 ) ;
VAR0 . InnerSequence = TransformingVisitor . Visit ( VAR0 . InnerSequence ) ; VAR0 . OuterKeySelector = TransformingVisitor . Visit ( VAR0 . OuterKeySelector ) ; var VAR2 = VAR3 ; VAR3 = true ; VAR0 . InnerKeySelector = TransformingVisitor . Visit ( VAR0 . InnerKeySelector ) ;
VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR1 ) ) . SetEntityState ( EntityState . Added ) ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR2 ) ) . SetEntityState ( EntityState . Added ) ; var VAR3 = VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR4 ) ) ; VAR3 . SetEntityState ( EntityState . Added ) ;
VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR1 ) ) . SetEntityState ( EntityState . Added ) ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR2 ) ) . SetEntityState ( EntityState . Added ) ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR3 ) ) . SetEntityState ( EntityState . Added ) ; var VAR4 = VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR5 ) ) ; VAR4 . SetEntityState ( EntityState . Added ) ;
Assert . Same ( VAR4 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR4 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR4 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR4 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { nameof ( Customer . AlternateKey ) , VAR5 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR3 . GetProperties ( ) . Select ( VAR6 => VAR6 . Name ) ) ; AssertEqual ( new [ ] { nameof ( Order . AnotherCustomerId ) , VAR4 . Properties . Single ( ) . Name , VAR7 . Properties . Single ( ) . Name } , VAR1 . GetProperties ( ) . Select ( VAR6 => VAR6 . Name ) ) ;
var VAR0 = VAR1 . VAR2 . Create ( VAR1 . VAR6 . QueryCompilationContext ) ; VAR0 . SetProjectionExpression ( Expression . Constant ( 1 ) ) ; var VAR3 = VAR1 . VAR4 . Clone ( VAR1 . VAR6 . QueryCompilationContext . CreateUniqueTableAlias ( ) ) ; VAR0 . AddTable ( VAR3 ) ; VAR5 . Alias = VAR1 . VAR6 . QueryCompilationContext . CreateUniqueTableAlias ( ) ;
Assert . Null ( VAR0 . VAR1 ) ; Assert . Null ( VAR2 . VAR1 ) ; Assert . Same ( VAR0 , VAR3 . VAR4 ) ; Assert . Null ( VAR3 . VAR5 ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Same ( VAR3 , VAR0 . VAR5 ) ; Assert . Null ( VAR2 . VAR4 ) ; Assert . Null ( VAR2 . VAR5 ) ;
Assert . Null ( VAR0 . VAR1 ) ; Assert . Null ( VAR2 . VAR1 ) ; Assert . Same ( VAR0 , VAR3 . VAR4 ) ; Assert . Null ( VAR3 . VAR5 ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Same ( VAR3 , VAR0 . VAR5 ) ;
var VAR0 = VAR1 . GetOrAdd ( VAR2 , VAR3 , ( VAR4 , VAR5 ) => new TemporaryIntValueGenerator ( ) ) ; Assert . NotNull ( VAR0 ) ; Assert . Same ( VAR0 , VAR1 . GetOrAdd ( VAR2 , VAR3 , ( VAR4 , VAR5 ) => new TemporaryIntValueGenerator ( ) ) ) ; var VAR6 = VAR1 . GetOrAdd ( VAR7 , VAR3 , ( VAR4 , VAR5 ) => new TemporaryIntValueGenerator ( ) ) ; Assert . NotNull ( VAR6 ) ; Assert . Same ( VAR6 , VAR1 . GetOrAdd ( VAR7 , VAR3 , ( VAR4 , VAR5 ) => new TemporaryIntValueGenerator ( ) ) ) ;
Assert . IsType < TemporaryIntValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryLongValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryShortValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryByteValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryCharValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryIntValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryLongValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryShortValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryByteValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryCharValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryStringValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryGuidValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryBinaryValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ; Assert . IsType < TemporaryIntValueGenerator > ( VAR0 . Select ( VAR1 . FindProperty ( LITERAL ) , VAR1 ) ) ;
VAR0 . Attach ( VAR1 ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR3 . VAR4 . Single ( ) ) ; Assert . Same ( VAR3 , VAR1 . VAR5 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 ) ;
VAR0 . Attach ( VAR1 ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR3 . VAR4 . Single ( ) ) ; Assert . Null ( VAR1 . VAR5 ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 ) ;
VAR0 . Entry ( VAR1 ) . State = EntityState . Unchanged ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR1 . VAR4 . Single ( ) ) ; Assert . Same ( VAR1 , VAR2 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR1 . VAR4 . Single ( ) ) ; Assert . Same ( VAR6 , VAR2 . VAR5 ) ; Assert . Same ( VAR2 , VAR6 . VAR4 . Single ( ) ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > ( ) ; VAR1 . Attach ( VAR5 ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR7 ) ;
var VAR0 = new EntityFrameworkCore . Metadata . Internal . Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( T1 ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . IsShadowProperty = false ; VAR2 . ValueGenerated = VAR3 ? ValueGenerated . OnAdd : ValueGenerated . Never ; VAR2 . Relational ( ) . ColumnName = LITERAL ; VAR1 . GetOrSetPrimaryKey ( VAR2 ) ; var VAR4 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR4 . IsShadowProperty = false ; VAR4 . Relational ( ) . ColumnName = LITERAL ; VAR4 . ValueGenerated = VAR5 ? ValueGenerated . OnAddOrUpdate : ValueGenerated . Never ;
Assert . Equal ( SqlServerModelAnnotations . DefaultHiLoSequenceName , VAR0 . HiLoSequenceName ) ; Assert . Null ( VAR0 . HiLoSequenceSchema ) ; Assert . Null ( VAR1 . FindSequence ( SqlServerModelAnnotations . DefaultHiLoSequenceName ) ) ; Assert . NotNull ( VAR0 . FindSequence ( SqlServerModelAnnotations . DefaultHiLoSequenceName ) ) ;
VAR0 . Relational ( ) . DefaultValue = new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , VAR0 . Relational ( ) . DefaultValue ) ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , VAR0 . SqlServer ( ) . DefaultValue ) ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , ( ( IProperty ) VAR0 ) . SqlServer ( ) . DefaultValue ) ; VAR0 . SqlServer ( ) . DefaultValue = new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , VAR0 . Relational ( ) . DefaultValue ) ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , VAR0 . SqlServer ( ) . DefaultValue ) ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , ( ( IProperty ) VAR0 ) . SqlServer ( ) . DefaultValue ) ; VAR0 . SqlServer ( ) . DefaultValue = null ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , VAR0 . Relational ( ) . DefaultValue ) ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , VAR0 . SqlServer ( ) . DefaultValue ) ; Assert . Equal ( new byte [  ] { LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL } , ( ( IProperty ) VAR0 ) . SqlServer ( ) . DefaultValue ) ;
Assert . True ( VAR0 . Allows ( LITERAL ) ) ; Assert . True ( VAR1 . IsMatched ) ; Assert . True ( VAR2 . IsMatched ) ; Assert . False ( VAR3 . IsMatched ) ; Assert . False ( VAR0 . Allows ( LITERAL ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetRelationshipSnapshotValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetCurrentValue ( VAR1 ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . GetRelationshipSnapshotValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetRelationshipSnapshotValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetCurrentValue ( VAR1 ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . GetRelationshipSnapshotValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ;
Assert . Equal ( 1 , VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR2 ) ) ; Assert . Equal ( 1 , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; VAR0 . SetOriginalValue ( VAR1 , LITERAL ) ; VAR0 . SetOriginalValue ( VAR2 , LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR2 ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; VAR0 [ VAR1 ] = LITERAL ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; VAR0 . SetOriginalValue ( VAR1 , LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ;
Assert . Null ( VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Null ( VAR0 [ VAR1 ] ) ; VAR0 [ VAR1 ] = LITERAL ; Assert . Null ( VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; VAR0 . SetOriginalValue ( VAR1 , LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; VAR0 . SetOriginalValue ( VAR1 , null ) ; Assert . Null ( VAR0 . GetOriginalValue ( VAR1 ) ) ;
VAR0 . SetOriginalValue ( VAR1 , LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetOriginalValue < string > ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetCurrentValue < string > ( VAR1 ) ) ; VAR0 . SetOriginalValue ( VAR1 , null ) ; Assert . Null ( VAR0 . GetOriginalValue < string > ( VAR1 ) ) ; Assert . Equal ( LITERAL , VAR0 . GetCurrentValue < string > ( VAR1 ) ) ;
var VAR0 = new Category { VAR1 = LITERAL , VAR6 = LITERAL } ; var VAR2 = new ValueBuffer ( new object [  ] { LITERAL , LITERAL , LITERAL } ) ; var VAR3 = VAR4 . StartTrackingFromQuery ( VAR5 , VAR0 , VAR2 ) ; Assert . Same ( VAR3 , VAR4 . StartTrackingFromQuery ( VAR5 , VAR0 , VAR2 ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetCurrentValue ( VAR1 ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 , ValueSource . RelationshipSnapshot ) ) ; Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 , ValueSource . Original ) ) ; Assert . Equal ( LITERAL , VAR0 . GetCurrentValue ( VAR1 ) ) ;
Assert . Same ( VAR0 , VAR1 . GetCurrentValue ( VAR2 ) ) ; VAR3 . VAR4 = new CategoryWithChanging ( ) ; Assert . Same ( VAR0 , VAR1 . GetValue ( VAR2 , ValueSource . RelationshipSnapshot ) ) ; Assert . NotSame ( VAR0 , VAR1 . GetCurrentValue ( VAR2 ) ) ;
var VAR0 = new VAR1 { VAR2 = LITERAL , VAR3 = 1 , VAR10 = LITERAL } ; var VAR4 = new VAR5 { VAR2 = Guid . NewGuid ( ) , VAR1 = VAR0 , VAR6 = 1 } ; var VAR7 = VAR8 . GetOrCreateEntry ( VAR4 ) ; VAR7 . SetEntityState ( EntityState . Unchanged ) ; var VAR9 = new VAR1 { VAR2 = LITERAL , VAR3 = LITERAL , VAR10 = LITERAL } ;
var VAR0 = LITERAL ; var VAR1 = new TableSelectionSet ( new List < string > { LITERAL } ) ; var VAR4 = CreateModel ( VAR0 , VAR1 ) ; var VAR3 = Assert . Single ( VAR4 . Tables ) ; Assert . Equal ( LITERAL , VAR3 . Name ) ;
LinqOperatorProvider . _InterceptExceptions < T > ( null , null , null , null ) ; LinqOperatorProvider . _ToEnumerable < T > ( null ) ; LinqOperatorProvider . _ToOrdered < T > ( null ) ; LinqOperatorProvider . _ToSequence ( ( T ) new object ( ) ) ; LinqOperatorProvider . _ToQueryable < T > ( null ) ; LinqOperatorProvider . _TrackEntities < T , object > ( null , null , null , null ) ; LinqOperatorProvider . _Where < T > ( null , null ) ; AsyncLinqOperatorProvider . _InterceptExceptions < T > ( null , null , null , null ) ;
Check . NotNull ( VAR12 , nameof ( VAR12 ) ) ; VAR1 = ( IRelationalDatabaseCreator ) VAR2 ; VAR13 = VAR14 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR9 = VAR10 ; VAR15 = VAR12 ;
Assert . Equal ( 0 , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; VAR0 [ VAR1 ] = LITERAL ; VAR0 [ VAR2 ] = LITERAL ; Assert . Equal ( LITERAL , VAR3 . Id ) ; Assert . Equal ( LITERAL , VAR3 . Name ) ;
var VAR0 = VAR1 . Model . FindEntityType ( typeof ( Nob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; AssertEqual ( new [ ] { VAR0 . FindProperty ( LITERAL ) , VAR0 . FindProperty ( LITERAL ) } , VAR2 . Properties ) ; Assert . False ( VAR2 . IsRequired ) ; var VAR3 = VAR1 . Model . FindEntityType ( typeof ( Hob ) ) ;
VAR0 . AddSingleton ( VAR1 . Object ) ; var VAR2 = InMemoryTestHelpers . Instance . CreateContextServices ( VAR0 , CreateModel ( ) ) ; var VAR3 = new Customer { VAR4 = LITERAL , VAR5 = LITERAL } ; var VAR6 = VAR2 . GetRequiredService < IStateManager > ( ) . GetOrCreateEntry ( VAR3 ) ; VAR6 . SetEntityState ( EntityState . Added ) ; var VAR7 = VAR2 . GetRequiredService < IInMemoryDatabase > ( ) ;
var VAR0 = BuildModel ( ) ; var VAR1 = VAR0 . FindEntityType ( typeof ( SomeEntity ) . FullName ) ; var VAR2 = VAR1 . FindProperty ( LITERAL ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( SomeSimpleEntityBase ) . FullName ) ; var VAR4 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR4 . RequiresValueGenerator = true ; var VAR5 = TestHelpers . Instance . CreateContextServices ( VAR0 ) ;
var VAR3 = new ProductWithChanging { VAR2 = LITERAL } ; var VAR0 = CreateInternalEntry ( VAR1 , VAR3 ) ; Assert . False ( VAR0 . EntityType . UseEagerSnapshots ( ) ) ; Assert . False ( VAR0 . HasRelationshipSnapshot ) ;
Assert . True ( VAR0 . IsShadow ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . IsShadow ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . IsShadowProperty ) ; Assert . False ( VAR0 . IsShadow ( true , ConfigurationSource . Convention ) ) ;
VAR0 . Property ( LITERAL , typeof ( int ) , ConfigurationSource . Convention ) . RequiresValueGenerator ( false , ConfigurationSource . Explicit ) ; var VAR1 = VAR0 . HasKey ( VAR2 , ConfigurationSource . Convention ) ; Assert . Same ( VAR1 , new KeyConvention ( ) . Apply ( VAR1 ) ) ; var VAR3 = VAR1 . Metadata . Properties ; Assert . False ( VAR3 [ 0 ] . RequiresValueGenerator ) ;
var VAR0 = VAR1 . Entity ( typeof ( SampleEntity ) , ConfigurationSource . Convention ) ; var VAR2 = VAR0 . PrimaryKey ( new List < string > { LITERAL } , ConfigurationSource . Convention ) ; var VAR3 = VAR2 . Metadata . Properties . First ( ) ; Assert . Equal ( ValueGenerated . Never , VAR3 . ValueGenerated ) ;
Check . NotNull ( VAR11 , nameof ( VAR11 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = VAR9 ; VAR12 = VAR11 ;
Check . NotNull ( VAR11 , nameof ( VAR11 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = VAR9 ; VAR12 = VAR11 ;
VAR2 . Append ( VAR1 . FunctionName ) ; VAR2 . Append ( LITERAL ) ; VisitJoin ( VAR1 . Arguments . ToList ( ) ) ; VAR2 . Append ( LITERAL ) ;
var VAR0 = new Mock < IDbContextTransaction > ( ) ; IDbContextTransaction VAR1 = null ; VAR2 . Setup ( VAR3 => VAR3 . BeginTransaction ( ) ) . Returns ( ( ) => VAR1 = VAR0 . Object ) ; VAR2 . Setup ( VAR3 => VAR3 . CurrentTransaction ) . Returns ( ( ) => VAR1 ) ;
Check . NotNull ( VAR0 , nameof ( VAR12 ) ) ; Check . NotNull ( VAR12 , nameof ( VAR0 ) ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = VAR9 ; VAR10 = VAR0 ; VAR13 = VAR12 ;
var VAR0 = CreateModel ( ) ; var VAR1 = VAR0 . AddEntityType ( LITERAL ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR1 . AddKey ( VAR2 ) ; var VAR4 = VAR0 . AddEntityType ( LITERAL ) ; var VAR5 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR4 . AddKey ( VAR5 ) ; VAR4 . AddForeignKey ( VAR5 , VAR3 , VAR1 ) ; var VAR7 = VAR0 . AddEntityType ( LITERAL ) ;
var VAR0 = CreateModel ( ) ; var VAR1 = VAR0 . AddEntityType ( LITERAL ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR1 . AddKey ( VAR2 ) ; var VAR4 = VAR0 . AddEntityType ( LITERAL ) ; var VAR5 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR7 = VAR4 . AddKey ( new [ ] { VAR5 , VAR6 } ) ; var VAR8 = VAR0 . AddEntityType ( LITERAL ) ;
var VAR0 = VAR1 . AddEntityType ( LITERAL ) ; var VAR2 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR0 . AddKey ( VAR2 ) ; var VAR4 = VAR1 . AddEntityType ( LITERAL ) ; var VAR5 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR7 = VAR4 . AddKey ( VAR5 ) ;
var VAR0 = new InternalModelBuilder ( new Model ( VAR1 ) ) ; var VAR2 = VAR0 . Entity ( typeof ( VAR3 ) , ConfigurationSource . Convention ) ; var VAR4 = VAR0 . Entity ( typeof ( VAR5 ) , ConfigurationSource . Convention ) ; var VAR6 = VAR4 . Relationship ( VAR2 , nameof ( VAR5 . VAR3 ) , nameof ( VAR3 . VAR5 ) , ConfigurationSource . Convention ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; var VAR2 = VAR0 . EntityType . FindProperty ( LITERAL ) ; var VAR3 = VAR0 . AddSidecar ( VAR4 . Create ( VAR0 , VAR0 . EntityType . GetProperties ( ) ) ) ; VAR3 . TakeSnapshot ( ) ; VAR3 [ VAR2 ] = LITERAL ; VAR5 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR2 ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new KeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ;
var VAR1 = TestHelpers . Instance . CreateConventionBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < Product > ( ) ; VAR1 . Entity < VAR2 > ( ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( VAR2 ) ) ; var VAR4 = VAR0 . FindEntityType ( typeof ( Product ) ) ; var VAR5 = VAR4 . GetOrAddForeignKey ( VAR4 . FindProperty ( LITERAL ) , VAR3 . FindPrimaryKey ( ) , VAR3 ) ; var VAR6 = VAR3 . GetOrAddForeignKey ( VAR3 . FindProperty ( LITERAL ) , VAR4 . FindPrimaryKey ( ) , VAR4 ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < Customer > ( ) ; VAR1 . Entity < Order > ( ) . HasOne < Customer > ( ) . WithMany ( ) . HasForeignKey ( VAR2 => VAR2 . CustomerId ) ; VAR1 . Ignore < OrderDetails > ( ) ; VAR1 . Ignore < CustomerDetails > ( ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( Order ) ) ; var VAR4 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR5 = VAR4 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR3 . GetKeys ( ) . Single ( ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < Customer > ( ) ; VAR1 . Entity < Order > ( ) ; VAR1 . Ignore < OrderDetails > ( ) ; VAR1 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( Order ) ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR4 = VAR2 . FindProperty ( LITERAL ) ; var VAR5 = VAR3 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR2 . GetKeys ( ) . Single ( ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < Customer > ( ) ; VAR1 . Entity < Order > ( ) ; VAR1 . Ignore < OrderDetails > ( ) ; VAR1 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( Order ) ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR4 = VAR2 . FindProperty ( nameof ( Order . CustomerId ) ) ; var VAR5 = VAR3 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR2 . GetKeys ( ) . Single ( ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < Customer > ( ) ; VAR1 . Entity < Order > ( ) ; VAR1 . Ignore < OrderDetails > ( ) ; VAR1 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( Order ) ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR4 = VAR2 . FindProperty ( LITERAL ) ; var VAR5 = VAR3 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR2 . GetKeys ( ) . Single ( ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < PrincipalEntity > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR2 . Properties . Single ( ) . Name ) ; VAR1 . Entity < DependentEntity > ( ) . Property ( VAR3 => VAR3 . PrincipalEntityId ) ; var VAR4 = VAR0 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR4 . Properties . Single ( ) . Name ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < PrincipalEntity > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR2 . Properties . Single ( ) . Name ) ; VAR1 . Entity < DependentEntity > ( ) . Property ( VAR3 => VAR3 . PrincipalEntityId ) ; var VAR4 = VAR0 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR4 . Properties . Single ( ) . Name ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < PrincipalEntity > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR2 . Properties . Single ( ) . Name ) ; VAR1 . Entity < DependentEntity > ( ) . Property ( VAR3 => VAR3 . PrincipalEntityId ) ; var VAR4 = VAR0 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR4 . Properties . Single ( ) . Name ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < Customer > ( ) ; VAR1 . Entity < Order > ( ) ; VAR1 . Ignore < OrderDetails > ( ) ; VAR1 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( Order ) ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR4 = VAR2 . FindProperty ( LITERAL ) ; var VAR5 = VAR3 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR2 . GetKeys ( ) . Single ( ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < Customer > ( ) ; VAR1 . Entity < Order > ( ) ; VAR1 . Ignore < OrderDetails > ( ) ; VAR1 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( Order ) ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR4 = VAR3 . GetKeys ( ) . Single ( ) ; var VAR5 = VAR2 . GetKeys ( ) . Single ( ) ;
var VAR1 = CreateModelBuilder ( ) ; var VAR0 = VAR1 . Model ; VAR1 . Entity < CustomerDetails > ( ) . HasOne ( VAR2 => VAR2 . Customer ) . WithOne ( ) ; VAR1 . Ignore < Order > ( ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( CustomerDetails ) ) ; var VAR4 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR5 = VAR4 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR3 . GetKeys ( ) . Single ( ) ;
VAR0 . IsStoreGeneratedAlways = true ; VAR0 . IsReadOnlyAfterSave = false ; VAR0 . IsReadOnlyBeforeSave = false ; VAR0 = VAR1 . Property ( VAR2 => VAR2 . VAR3 ) . ValueGeneratedOnAdd ( ) . Metadata ; VAR0 . IsStoreGeneratedAlways = true ; VAR0 . IsReadOnlyAfterSave = false ; VAR0 . IsReadOnlyBeforeSave = true ; VAR0 = VAR1 . Property ( VAR2 => VAR2 . VAR4 ) . ValueGeneratedOnAdd ( ) . Metadata ; VAR0 . IsStoreGeneratedAlways = true ;
VAR0 . IsStoreGeneratedAlways = true ; VAR0 . IsReadOnlyAfterSave = false ; VAR0 . IsReadOnlyBeforeSave = false ; VAR0 = VAR1 . Property ( VAR2 => VAR2 . VAR3 ) . ValueGeneratedOnAddOrUpdate ( ) . Metadata ; VAR0 . IsStoreGeneratedAlways = true ; VAR0 . IsReadOnlyAfterSave = false ; VAR0 . IsReadOnlyBeforeSave = true ; VAR0 = VAR1 . Property ( VAR2 => VAR2 . VAR4 ) . ValueGeneratedOnAddOrUpdate ( ) . Metadata ; VAR0 . IsStoreGeneratedAlways = true ;
VAR1 . HasPrincipalToDependent ( LITERAL ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SpecialCustomer ) ) ; VAR2 . BaseType = VAR0 ; var VAR4 = VAR5 . GetOrAddProperty ( Order . VAR6 ) ; var VAR7 = VAR5 . GetOrAddForeignKey ( VAR4 , VAR8 , VAR2 ) ; VAR7 . HasPrincipalToDependent ( LITERAL ) ;
VAR1 . HasDependentToPrincipal ( LITERAL ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SpecialOrder ) ) ; var VAR4 = VAR3 . AddEntityType ( typeof ( SpecialCustomer ) ) ; var VAR5 = VAR2 . GetOrAddProperty ( Order . VAR6 ) ; var VAR7 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR8 = VAR4 . GetOrAddKey ( VAR7 ) ; var VAR9 = VAR2 . GetOrAddForeignKey ( VAR5 , VAR8 , VAR4 ) ; VAR9 . HasDependentToPrincipal ( LITERAL ) ;
VAR1 . HasDependentToPrincipal ( LITERAL ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SpecialOrder ) ) ; VAR2 . BaseType = VAR0 ; var VAR4 = VAR3 . AddEntityType ( typeof ( SpecialCustomer ) ) ; var VAR5 = VAR3 . AddEntityType ( typeof ( VerySpecialOrder ) ) ; var VAR6 = VAR5 . GetOrAddProperty ( Order . VAR7 ) ; var VAR8 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR9 = VAR4 . GetOrAddKey ( VAR8 ) ; var VAR10 = VAR5 . GetOrAddForeignKey ( VAR6 , VAR9 , VAR4 ) ; VAR10 . HasDependentToPrincipal ( LITERAL ) ;
var VAR0 = VAR1 . GetReferencingForeignKeys ( ) ; VAR2 . HasBaseType < Ingredient > ( ) ; var VAR3 = VAR4 . Entity < Ingredient > ( ) ; var VAR5 = VAR3 . Metadata ; Assert . Same ( typeof ( Ingredient ) , VAR6 . BaseType . ClrType ) ; AssertEqual ( VAR7 , VAR6 . GetProperties ( ) , new PropertyComparer ( compareAnnotations : false ) ) ; AssertEqual ( VAR8 , VAR6 . GetKeys ( ) ) ; AssertEqual ( VAR9 , VAR6 . GetIndexes ( ) ) ; AssertEqual ( VAR10 , VAR6 . GetForeignKeys ( ) ) ; AssertEqual ( VAR0 , VAR6 . GetReferencingForeignKeys ( ) ) ;
AssertEqual ( VAR0 , VAR1 . GetReferencingForeignKeys ( ) ) ; VAR2 . HasBaseType ( null ) ; Assert . Null ( VAR1 . BaseType ) ; AssertEqual ( VAR3 , VAR1 . GetProperties ( ) , new PropertyComparer ( compareAnnotations : false ) ) ; AssertEqual ( VAR4 , VAR1 . GetKeys ( ) ) ; AssertEqual ( VAR5 , VAR1 . GetIndexes ( ) ) ; AssertEqual ( VAR6 , VAR1 . GetForeignKeys ( ) ) ; AssertEqual ( VAR0 , VAR1 . GetReferencingForeignKeys ( ) ) ; AssertEqual ( VAR3 , VAR7 . GetProperties ( ) , new PropertyComparer ( compareAnnotations : false ) ) ; AssertEqual ( VAR4 , VAR7 . GetKeys ( ) ) ; AssertEqual ( VAR5 , VAR7 . GetIndexes ( ) ) ; Assert . Equal ( VAR6 . Count ( ) , VAR7 . GetForeignKeys ( ) . Count ( ) ) ; Assert . Equal ( VAR0 . Count ( ) , VAR7 . GetReferencingForeignKeys ( ) . Count ( ) ) ;
var VAR0 = VAR2 . HasDependentToPrincipal ( LITERAL ) ; var VAR3 = VAR2 . HasPrincipalToDependent ( LITERAL ) ; var VAR5 = VAR4 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR1 . GetKeys ( ) . Single ( ) ; VAR7 . Entity < Order > ( ) . HasOne ( VAR8 => VAR8 . Customer ) . WithMany ( VAR8 => VAR8 . Orders ) ; Assert . Same ( VAR2 , VAR1 . GetForeignKeys ( ) . Single ( ) ) ; Assert . Same ( VAR0 , VAR1 . GetNavigations ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR4 . GetNavigations ( ) . Single ( ) ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR4 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR5 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR4 . GetProperties ( ) . Select ( VAR9 => VAR9 . Name ) ) ; AssertEqual ( new [ ] { LITERAL , VAR2 . Properties . Single ( ) . Name , VAR6 . Properties . Single ( ) . Name } , VAR1 . GetProperties ( ) . Select ( VAR9 => VAR9 . Name ) ) ; Assert . Empty ( VAR4 . GetForeignKeys ( ) ) ;
Assert . Equal ( new [ ] { 0 , 1 } , VAR0 . GetProperties ( ) . Select ( VAR1 => VAR1 . GetIndex ( ) ) ) ; Assert . Equal ( new [ ] { 0 , 1 , LITERAL , LITERAL } , VAR2 . GetProperties ( ) . Select ( VAR1 => VAR1 . GetIndex ( ) ) ) ; VAR2 . BaseType = null ; Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR0 . GetProperties ( ) . Select ( VAR1 => VAR1 . VAR3 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR2 . GetProperties ( ) . Select ( VAR1 => VAR1 . VAR3 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { 0 , 1 } , VAR0 . GetProperties ( ) . Select ( VAR1 => VAR1 . GetIndex ( ) ) ) ; Assert . Equal ( new [ ] { 0 , 1 } , VAR2 . GetProperties ( ) . Select ( VAR1 => VAR1 . GetIndex ( ) ) ) ;
Assert . Equal ( 0 , VAR0 . FindProperty ( LITERAL ) . Index ) ; Assert . Equal ( 1 , VAR0 . FindProperty ( LITERAL ) . Index ) ; Assert . Equal ( 0 , VAR0 . FindProperty ( LITERAL ) . GetShadowIndex ( ) ) ; Assert . Equal ( - 1 , VAR0 . FindProperty ( LITERAL ) . GetShadowIndex ( ) ) ; Assert . Equal ( 0 , VAR0 . FindProperty ( LITERAL ) . GetOriginalValueIndex ( ) ) ; Assert . Equal ( - 1 , VAR0 . FindProperty ( LITERAL ) . GetOriginalValueIndex ( ) ) ;
Assert . Equal ( new [ ] { Order . VAR0 . Name , Order . VAR1 . Name } , VAR2 . FindPrimaryKey ( ) . Properties . Select ( VAR3 => VAR3 . Name ) . ToArray ( ) ) ; Assert . NotNull ( VAR4 . PrimaryKey ( new [ ] { Order . VAR0 } , ConfigurationSource . Explicit ) ) ; Assert . Equal ( Order . VAR0 . Name , VAR2 . FindPrimaryKey ( ) . Properties . Single ( ) . Name ) ;
var VAR0 = VAR1 ? . DeclaringEntityType . RemoveNavigation ( VAR1 . Name ) ; Debug . Assert ( VAR0 == VAR1 ) ; var VAR2 = VAR3 . DependentToPrincipal ; VAR0 = VAR2 ? . DeclaringEntityType . RemoveNavigation ( VAR2 . Name ) ; Debug . Assert ( VAR0 == VAR2 ) ; var VAR4 = Metadata . RemoveForeignKey ( VAR3 . VAR5 ) ;
Assert . Same ( VAR0 , VAR1 . Metadata . FindProperty ( LITERAL ) ) ; Assert . Same ( VAR2 , VAR1 . Metadata . FindProperty ( LITERAL ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Null ( VAR2 . ValueGenerated ) ; var VAR3 = VAR1 . PrimaryKey ( new List < string > { LITERAL } , ConfigurationSource . Convention ) ; Assert . Same ( VAR0 , VAR1 . Metadata . FindProperty ( LITERAL ) ) ; Assert . Same ( VAR2 , VAR1 . Metadata . FindProperty ( LITERAL ) ) ; Assert . Same ( VAR3 , new KeyConvention ( ) . Apply ( VAR3 ) ) ; Assert . Same ( VAR0 , VAR1 . Metadata . FindProperty ( LITERAL ) ) ; Assert . Same ( VAR2 , VAR1 . Metadata . FindProperty ( LITERAL ) ) ;
var VAR0 = BuildModel ( VAR1 : false ) . FindEntityType ( typeof ( VAR2 ) ) . GetNavigations ( ) . Single ( VAR3 => VAR3 . Name == LITERAL ) ; Assert . Null ( VAR0 . FindInverse ( ) ) ; var VAR4 = BuildModel ( VAR5 : false ) . FindEntityType ( typeof ( Product ) ) . GetNavigations ( ) . Single ( VAR3 => VAR3 . Name == LITERAL ) ; Assert . Null ( VAR4 . FindInverse ( ) ) ; var VAR6 = BuildModel ( VAR7 : false ) . FindEntityType ( typeof ( Product ) ) . GetNavigations ( ) . Single ( VAR3 => VAR3 . Name == LITERAL ) ; Assert . Null ( VAR6 . FindInverse ( ) ) ; var VAR8 = BuildModel ( VAR9 : false ) . FindEntityType ( typeof ( VAR2 ) ) . GetNavigations ( ) . Single ( VAR3 => VAR3 . Name == LITERAL ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( VAR2 ) ) ; var VAR3 = VAR1 . FindEntityType ( typeof ( Product ) ) ; var VAR4 = VAR3 . GetOrAddForeignKey ( VAR3 . FindProperty ( LITERAL ) , VAR0 . FindPrimaryKey ( ) , VAR0 ) ; var VAR5 = VAR0 . GetOrAddForeignKey ( VAR0 . FindProperty ( LITERAL ) , VAR3 . FindPrimaryKey ( ) , VAR3 ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Pickle ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( BigMak ) ) ; var VAR3 = VAR2 . GetKeys ( ) . Single ( ) ; var VAR4 = VAR0 . GetKeys ( ) . Single ( ) ; var VAR5 = VAR0 . FindProperty ( LITERAL ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Order ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR0 . FindProperty ( LITERAL ) ; var VAR4 = VAR2 . FindProperty ( Customer . IdProperty . Name ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Order ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR0 . FindProperty ( LITERAL ) ; var VAR4 = VAR2 . FindProperty ( Customer . IdProperty . Name ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Order ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR0 . FindProperty ( LITERAL ) ; var VAR4 = VAR2 . FindProperty ( Customer . IdProperty . Name ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Pickle ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( BigMak ) ) ; var VAR3 = VAR0 . FindProperty ( LITERAL ) ; var VAR4 = VAR2 . FindProperty ( LITERAL ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Tomato ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Whoopper ) ) ; var VAR3 = VAR0 . FindProperty ( LITERAL ) ; var VAR4 = VAR0 . FindProperty ( LITERAL ) ; var VAR5 = VAR2 . FindPrimaryKey ( ) ; var VAR6 = VAR0 . FindPrimaryKey ( ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Tomato ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Whoopper ) ) ; var VAR3 = VAR0 . FindProperty ( nameof ( Tomato . BurgerId1 ) ) ; var VAR4 = VAR0 . FindProperty ( nameof ( Tomato . BurgerId2 ) ) ; var VAR5 = VAR2 . FindPrimaryKey ( ) ;
var VAR0 = VAR1 . FindProperty ( LITERAL ) ; var VAR2 = VAR1 . FindProperty ( LITERAL ) ; var VAR3 = VAR1 . GetForeignKeys ( ) . Single ( VAR4 => VAR4 != VAR5 ) ; Assert . Same ( VAR0 , VAR3 . Properties [ 0 ] ) ; Assert . Same ( VAR2 , VAR3 . Properties [ 1 ] ) ; Assert . Empty ( VAR1 . GetNavigations ( ) . Where ( VAR6 => VAR6 . ForeignKey != VAR5 ) ) ; Assert . Empty ( VAR7 . GetNavigations ( ) . Where ( VAR6 => VAR6 . ForeignKey != VAR5 ) ) ; AssertEqual ( VAR8 , VAR7 . GetProperties ( ) ) ; AssertEqual ( VAR9 , VAR1 . GetProperties ( ) ) ; Assert . Empty ( VAR7 . GetForeignKeys ( ) ) ; Assert . Equal ( VAR10 , VAR7 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR11 , VAR1 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR10 , VAR7 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR11 , VAR1 . FindPrimaryKey ( ) ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . FindEntityType ( typeof ( Nob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . True ( VAR2 . IsRequired ) ; var VAR3 = VAR0 . FindProperty ( nameof ( Nob . HobId1 ) ) ; var VAR4 = VAR0 . FindProperty ( nameof ( Nob . HobId2 ) ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . FindEntityType ( typeof ( Hob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . False ( VAR2 . IsRequired ) ; var VAR3 = VAR0 . FindProperty ( nameof ( Hob . NobId1 ) ) ; var VAR4 = VAR0 . FindProperty ( nameof ( Hob . NobId2 ) ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR0 . Properties . Single ( ) . Name ) ; VAR2 . Entity < DependentEntity > ( ) . Property ( VAR3 => VAR3 . PrincipalEntityId ) ; var VAR4 = VAR1 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR0 . Properties . Single ( ) . Name ) ; VAR2 . Entity < DependentEntity > ( ) . Property ( VAR3 => VAR3 . PrincipalEntityId ) ; var VAR4 = VAR1 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR0 . Properties . Single ( ) . Name ) ; VAR2 . Entity < DependentEntity > ( ) . Property ( VAR3 => VAR3 . PrincipalEntityId ) ; var VAR4 = VAR1 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( LITERAL , VAR0 . Properties . Single ( ) . Name ) ; VAR2 . Entity < DependentEntity > ( ) . Property ( VAR3 => VAR3 . PrincipalEntityId ) ; var VAR4 = VAR1 . FindEntityType ( typeof ( DependentEntity ) ) . GetForeignKeys ( ) . Single ( ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; Assert . Equal ( LITERAL , VAR0 . FindPrimaryKey ( ) . Properties . Count ) ; Assert . Equal ( Customer . IdProperty . Name , VAR0 . FindPrimaryKey ( ) . Properties . First ( ) . Name ) ; Assert . Equal ( Customer . NameProperty . Name , VAR0 . FindPrimaryKey ( ) . Properties . Last ( ) . Name ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; Assert . Equal ( LITERAL , VAR0 . FindPrimaryKey ( ) . Properties . Count ) ; Assert . Equal ( Customer . IdProperty . Name , VAR0 . FindPrimaryKey ( ) . Properties . First ( ) . Name ) ; Assert . Equal ( Customer . NameProperty . Name + LITERAL , VAR0 . FindPrimaryKey ( ) . Properties . Last ( ) . Name ) ;
var VAR0 = ( IEntityType ) VAR1 . FindEntityType ( typeof ( Quarks ) ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . True ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . True ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . True ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ;
var VAR0 = ( IEntityType ) VAR1 . FindEntityType ( typeof ( Quarks ) ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ;
var VAR0 = ( IEntityType ) VAR1 . FindEntityType ( typeof ( Quarks ) ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ; Assert . False ( VAR0 . FindProperty ( LITERAL ) . IsNullable ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Quarks ) ) ; Assert . Equal ( false , VAR0 . FindProperty ( Customer . IdProperty . Name ) . RequiresValueGenerator ) ; Assert . Equal ( true , VAR0 . FindProperty ( LITERAL ) . RequiresValueGenerator ) ; Assert . Equal ( true , VAR0 . FindProperty ( LITERAL ) . RequiresValueGenerator ) ; Assert . Equal ( true , VAR0 . FindProperty ( LITERAL ) . RequiresValueGenerator ) ; Assert . Equal ( false , VAR0 . FindProperty ( LITERAL ) . RequiresValueGenerator ) ; Assert . Equal ( true , VAR0 . FindProperty ( LITERAL ) . RequiresValueGenerator ) ; Assert . Equal ( false , VAR0 . FindProperty ( LITERAL ) . RequiresValueGenerator ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Quarks ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . FindProperty ( Customer . IdProperty . Name ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAddOrUpdate , VAR0 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . Never , VAR0 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . Never , VAR0 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAddOrUpdate , VAR0 . FindProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . Never , VAR0 . FindProperty ( LITERAL ) . ValueGenerated ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Quarks ) ) ; Assert . Null ( VAR0 . FindProperty ( Customer . IdProperty . Name ) . GetMaxLength ( ) ) ; Assert . Equal ( 0 , VAR0 . FindProperty ( LITERAL ) . GetMaxLength ( ) ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . GetMaxLength ( ) ) ; Assert . Equal ( 0 , VAR0 . FindProperty ( LITERAL ) . GetMaxLength ( ) ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . GetMaxLength ( ) ) ; Assert . Equal ( 0 , VAR0 . FindProperty ( LITERAL ) . GetMaxLength ( ) ) ; Assert . Equal ( LITERAL , VAR0 . FindProperty ( LITERAL ) . GetMaxLength ( ) ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Order ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR0 . GetForeignKeys ( ) . Single ( ) ; var VAR4 = VAR0 . FindNavigation ( LITERAL ) ; var VAR5 = VAR2 . FindNavigation ( LITERAL ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Order ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR2 . GetKeys ( ) . Single ( ) ; var VAR4 = VAR0 . GetKeys ( ) . Single ( ) ; VAR5 . Entity < Customer > ( ) . HasMany ( VAR6 => VAR6 . Orders ) . WithOne ( VAR6 => VAR6 . Customer ) ; var VAR7 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . Same ( VAR7 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR7 , VAR2 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Empty ( VAR2 . GetForeignKeys ( ) ) ; Assert . Same ( VAR3 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR2 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR4 , VAR0 . FindPrimaryKey ( ) ) ;
Assert . Same ( VAR0 . FindProperty ( nameof ( Order . CustomerId ) ) , VAR1 . Properties . Single ( ) ) ; Assert . Equal ( nameof ( Order . Customer ) , VAR1 . DependentToPrincipal . Name ) ; Assert . Null ( VAR1 . PrincipalToDependent ) ; Assert . NotSame ( VAR1 , VAR2 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR2 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR4 , VAR0 . FindPrimaryKey ( ) ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Order ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR0 . FindProperty ( LITERAL ) ; var VAR4 = VAR2 . FindProperty ( Customer . IdProperty . Name ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Pickle ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( BigMak ) ) ; var VAR3 = VAR0 . FindProperty ( LITERAL ) ; var VAR4 = VAR2 . FindProperty ( LITERAL ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Pickle ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( BigMak ) ) ; var VAR3 = VAR0 . GetKeys ( ) . SingleOrDefault ( ) ; var VAR4 = VAR2 . GetProperties ( ) . ToList ( ) ; var VAR5 = VAR0 . GetProperties ( ) . ToList ( ) ; VAR6 . Entity < BigMak > ( ) . HasKey ( VAR7 => VAR7 . AlternateKey ) ; var VAR8 = VAR0 . GetForeignKeys ( ) . Single ( ) ; var VAR9 = VAR2 . FindProperty ( LITERAL ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( BigMak ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Pickle ) ) ; var VAR3 = VAR0 . GetKeys ( ) . Single ( ) ; var VAR4 = VAR2 . GetKeys ( ) . SingleOrDefault ( ) ; var VAR5 = VAR1 . Clone ( ) ; var VAR6 = VAR5 . FindEntityType ( typeof ( BigMak ) ) . GetProperties ( ) . ToList ( ) ; var VAR7 = VAR5 . FindEntityType ( typeof ( Pickle ) ) . GetProperties ( ) . ToList ( ) ; VAR8 . Entity < BigMak > ( ) . HasKey ( VAR9 => VAR9 . AlternateKey ) ; var VAR10 = VAR0 . FindProperty ( LITERAL ) ;
var VAR0 = VAR1 . FindPrimaryKey ( ) ; Assert . Same ( VAR2 , VAR0 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR1 . GetKeys ( ) . Count ( ) ) ; Assert . True ( VAR1 . GetKeys ( ) . Contains ( VAR3 ) ) ; var VAR4 = ( IProperty ) VAR1 . FindProperty ( nameof ( BigMak . Id ) ) ; var VAR5 = ( IProperty ) VAR1 . FindProperty ( nameof ( BigMak . AlternateKey ) ) ;
Assert . Contains ( VAR0 , VAR1 . GetKeys ( ) ) ; Assert . Contains ( VAR2 . PrincipalKey , VAR1 . GetKeys ( ) ) ; Assert . NotSame ( VAR0 , VAR2 . PrincipalKey ) ; Assert . Same ( VAR3 , VAR4 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR0 , VAR1 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR3 , VAR4 . FindPrimaryKey ( ) ) ;
Assert . Same ( VAR0 . FindProperty ( nameof ( Tomato . BurgerId1 ) ) , VAR1 . Properties [ 0 ] ) ; Assert . Same ( VAR0 . FindProperty ( nameof ( Tomato . BurgerId2 ) ) , VAR1 . Properties [ 1 ] ) ; Assert . Equal ( nameof ( Tomato . Whoopper ) , VAR1 . DependentToPrincipal . Name ) ; Assert . Null ( VAR1 . PrincipalToDependent ) ; Assert . NotSame ( VAR1 , VAR2 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR2 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR4 , VAR0 . FindPrimaryKey ( ) ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Tomato ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Whoopper ) ) ; var VAR3 = VAR0 . GetForeignKeys ( ) . SingleOrDefault ( ) ; var VAR4 = VAR0 . FindProperty ( LITERAL ) ; var VAR5 = VAR0 . FindProperty ( LITERAL ) ; var VAR6 = VAR2 . FindPrimaryKey ( ) ; var VAR7 = VAR0 . FindPrimaryKey ( ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Hob ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Nob ) ) ; var VAR3 = VAR2 . GetKeys ( ) . Single ( ) ; var VAR4 = VAR0 . GetKeys ( ) . Single ( ) ; VAR5 . Entity < Nob > ( ) . HasMany ( VAR6 => VAR6 . Hobs ) . WithOne ( VAR6 => VAR6 . Nob ) ; var VAR7 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . False ( VAR7 . IsUnique ) ; Assert . Equal ( nameof ( Nob . Hobs ) , VAR7 . PrincipalToDependent . Name ) ; Assert . Equal ( nameof ( Hob . Nob ) , VAR7 . DependentToPrincipal . Name ) ; var VAR8 = VAR2 . GetForeignKeys ( ) . Single ( ) ;
Assert . Equal ( nameof ( Nob . Hobs ) , VAR0 . PrincipalToDependent . Name ) ; Assert . Equal ( nameof ( Hob . Nob ) , VAR0 . DependentToPrincipal . Name ) ; var VAR1 = VAR2 . GetForeignKeys ( ) . Single ( ) ; Assert . False ( VAR0 . IsUnique ) ; Assert . Equal ( nameof ( Hob . Nobs ) , VAR1 . PrincipalToDependent . Name ) ; Assert . Equal ( nameof ( Nob . Hob ) , VAR1 . DependentToPrincipal . Name ) ; Assert . Same ( VAR3 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR5 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR2 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR4 , VAR5 . FindPrimaryKey ( ) ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . FindEntityType ( typeof ( Nob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . False ( VAR2 . IsRequired ) ; var VAR3 = VAR0 . FindProperty ( nameof ( Nob . HobId1 ) ) ; var VAR4 = VAR0 . FindProperty ( nameof ( Nob . HobId2 ) ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . FindEntityType ( typeof ( Hob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . True ( VAR2 . IsRequired ) ; var VAR3 = VAR0 . FindProperty ( nameof ( Hob . NobId1 ) ) ; var VAR4 = VAR0 . FindProperty ( nameof ( Hob . NobId2 ) ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . FindEntityType ( typeof ( Nob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . True ( VAR2 . IsRequired ) ; var VAR3 = VAR0 . FindProperty ( nameof ( Nob . HobId1 ) ) ; var VAR4 = VAR0 . FindProperty ( nameof ( Nob . HobId2 ) ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . FindEntityType ( typeof ( Hob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . False ( VAR2 . IsRequired ) ; var VAR3 = VAR0 . FindProperty ( nameof ( Hob . NobId1 ) ) ; var VAR4 = VAR0 . FindProperty ( nameof ( Hob . NobId2 ) ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( CustomerDetails ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR0 . GetForeignKeys ( ) . Single ( ) ; var VAR4 = VAR0 . FindNavigation ( nameof ( CustomerDetails . Customer ) ) ; var VAR5 = VAR2 . FindNavigation ( nameof ( Customer . Details ) ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( CustomerDetails ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR2 . GetKeys ( ) . Single ( ) ; var VAR4 = VAR0 . GetKeys ( ) . Single ( ) ; VAR5 . Entity < Customer > ( ) . HasOne ( VAR6 => VAR6 . Details ) . WithOne ( VAR6 => VAR6 . Customer ) ; Assert . Equal ( 1 , VAR0 . GetForeignKeys ( ) . Count ( ) ) ; Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR3 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR2 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR4 , VAR0 . FindPrimaryKey ( ) ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( CustomerDetails ) ) ; var VAR2 = VAR1 . FindEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR2 . GetKeys ( ) . Single ( ) ; var VAR4 = VAR0 . GetKeys ( ) . Single ( ) ; VAR5 . Entity < CustomerDetails > ( ) . HasOne ( VAR6 => VAR6 . Customer ) . WithOne ( VAR6 => VAR6 . Details ) ; var VAR7 = VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Same ( VAR7 , VAR2 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Equal ( nameof ( CustomerDetails . Customer ) , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( nameof ( Customer . Details ) , VAR2 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR3 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR2 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR4 , VAR0 . FindPrimaryKey ( ) ) ;
Assert . Same ( VAR0 . FindProperty ( nameof ( Customer . Id ) ) , VAR1 . Properties . Single ( ) ) ; Assert . Empty ( VAR0 . GetNavigations ( ) . Where ( VAR2 => VAR2 . ForeignKey == VAR1 ) ) ; Assert . Empty ( VAR3 . GetNavigations ( ) . Where ( VAR2 => VAR2 . ForeignKey == VAR1 ) ) ; Assert . Same ( VAR4 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR5 , VAR3 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR6 , VAR0 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR5 , VAR3 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR6 , VAR0 . FindPrimaryKey ( ) ) ;
VAR0 . GetOrAddForeignKey ( VAR0 . AddProperty ( A . VAR1 ) , VAR2 . FindPrimaryKey ( ) , VAR2 ) ; VAR2 . GetOrAddForeignKey ( VAR2 . AddProperty ( B . VAR1 ) , VAR3 . FindPrimaryKey ( ) , VAR3 ) ; VAR3 . GetOrAddForeignKey ( VAR3 . AddProperty ( C . VAR1 ) , VAR0 . FindPrimaryKey ( ) , VAR0 ) ; VAR0 . GetOrAddForeignKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) , VAR4 . FindPrimaryKey ( ) , VAR4 ) ; VAR4 . GetOrAddForeignKey ( VAR4 . AddProperty ( LITERAL , typeof ( int ) ) , VAR5 . FindPrimaryKey ( ) , VAR5 ) ; VAR5 . GetOrAddForeignKey ( VAR5 . AddProperty ( LITERAL , typeof ( int ) ) , VAR0 . FindPrimaryKey ( ) , VAR0 ) ;
VAR0 [ VAR1 . FindProperty ( LITERAL ) ] = LITERAL ; VAR0 [ VAR1 . FindProperty ( LITERAL ) ] = LITERAL ; VAR0 . SetEntityState ( EntityState . Added ) ; await VAR2 . SaveChangesAsync ( ) ; VAR0 [ VAR1 . FindProperty ( LITERAL ) ] = LITERAL ;
var VAR0 = VAR1 . FindEntityType ( typeof ( AnEntity ) ) ; var VAR2 = SqlServerTestHelpers . Instance . CreateContextServices ( VAR1 ) . GetRequiredService < IValueGeneratorSelector > ( ) ; Assert . IsType < SqlServerSequenceHiLoValueGenerator < int > > ( VAR2 . Select ( VAR0 . FindProperty ( LITERAL ) , VAR0 ) ) ;
var VAR0 = VAR1 . Create ( new DatabaseModel { Tables = { VAR2 } } ) . FindEntityType ( LITERAL ) ; var VAR3 = Assert . Single ( VAR0 . GetForeignKeys ( ) ) ; Assert . True ( VAR3 . IsUnique ) ; Assert . Equal ( VAR0 . FindPrimaryKey ( ) , VAR3 . PrincipalKey ) ;
var VAR0 = VAR1 . FindEntityType ( LITERAL ) ; var VAR2 = VAR1 . FindEntityType ( LITERAL ) ; var VAR3 = Assert . Single ( VAR2 . GetForeignKeys ( ) ) ; Assert . True ( VAR3 . IsUnique ) ; Assert . Equal ( VAR0 . FindPrimaryKey ( ) , VAR3 . PrincipalKey ) ;
var VAR0 = VAR1 . Model . FindEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DiscriminatorProperty . VAR3 ) ; Assert . Equal ( typeof ( string ) , VAR0 . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( 1 , VAR0 . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( LITERAL , VAR1 . Model . FindEntityType ( typeof ( SpecialCustomer ) ) . Relational ( ) . DiscriminatorValue ) ;
var VAR0 = VAR1 . Model . FindEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DiscriminatorProperty . VAR3 ) ; Assert . Equal ( typeof ( string ) , VAR0 . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( 1 , VAR0 . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( LITERAL , VAR1 . Model . FindEntityType ( typeof ( SpecialCustomer ) ) . Relational ( ) . DiscriminatorValue ) ;
var VAR0 = VAR1 . Model . FindEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DiscriminatorProperty . VAR3 ) ; Assert . Equal ( typeof ( string ) , VAR0 . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( 1 , VAR0 . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( LITERAL , VAR1 . Model . FindEntityType ( typeof ( SpecialCustomer ) ) . Relational ( ) . DiscriminatorValue ) ;
var VAR0 = VAR1 . Model . FindEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DiscriminatorProperty . VAR3 ) ; Assert . Equal ( typeof ( string ) , VAR0 . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( 1 , VAR0 . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( LITERAL , VAR1 . Model . FindEntityType ( typeof ( SpecialCustomer ) ) . Relational ( ) . DiscriminatorValue ) ;
var VAR0 = VAR1 . Model . FindEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DiscriminatorProperty . VAR3 ) ; Assert . Equal ( typeof ( string ) , VAR0 . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( 1 , VAR0 . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( LITERAL , VAR1 . Model . FindEntityType ( typeof ( SpecialCustomer ) ) . Relational ( ) . DiscriminatorValue ) ;
var VAR0 = VAR1 . Model . FindEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DiscriminatorProperty . VAR3 ) ; Assert . Equal ( typeof ( string ) , VAR0 . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( 1 , VAR0 . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( LITERAL , VAR1 . Model . FindEntityType ( typeof ( SpecialCustomer ) ) . Relational ( ) . DiscriminatorValue ) ;
var VAR0 = GetModel ( VAR1 ) . FindEntityType ( LITERAL ) ; var VAR2 = VAR0 . FindForeignKey ( new [ ] { VAR0 . FindProperty ( LITERAL ) } ) ; Assert . True ( VAR2 . IsUnique ) ; Assert . Equal ( VAR0 . FindPrimaryKey ( ) , VAR2 . PrincipalKey ) ;
Assert . Equal ( 0 , VAR0 . Metadata . GetProperties ( ) . Count ( ) ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( LITERAL , typeof ( int ? ) ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( int ? ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetProperties ( ) . Single ( ) . Name ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasDiscriminator ( Splot . VAR1 ) ) ; Assert . Equal ( Splot . VAR1 . Name , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( int ? ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( Splot . VAR1 . Name , VAR0 . Metadata . GetProperties ( ) . Single ( ) . Name ) ;
VAR0 . Entity < NestedReferenceDerived > ( ) ; VAR0 . Entity < NestedCollectionDerived > ( ) ; VAR0 . Entity < DerivedReferenceOnBase > ( ) ; VAR0 . Entity < DerivedCollectionOnBase > ( ) ; VAR0 . Entity < DerivedReferenceOnDerived > ( ) ; VAR0 . Entity < DerivedCollectionOnDerived > ( ) ;
var VAR0 = VAR1 . FindEntityType ( VAR2 ) ; var VAR3 = VAR0 . FindPrimaryKey ( ) . Properties ; var VAR4 = VAR5 . GetKeyFactory ( VAR0 . FindPrimaryKey ( ) ) ;
VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . CarNumber ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . Championships ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . Id ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . FastestLaps ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . Name ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . Podiums ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . Poles ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . Races ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . TeamId ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . Version ) ; VAR0 . Add ( VAR1 . FindProperty ( LITERAL ) , VAR2 . Wins ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; var VAR5 = VAR6 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR5 . VAR7 . Item1 ) ; Assert . Same ( VAR0 . EntityType . FindProperty ( LITERAL ) , VAR5 . VAR7 . Item2 ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , LITERAL ) ) ) ; var VAR5 = VAR6 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR5 . VAR7 . Item1 ) ; Assert . Same ( VAR0 . EntityType . FindProperty ( LITERAL ) , VAR5 . VAR7 . Item2 ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; var VAR2 = VAR0 . EntityType . FindProperty ( LITERAL ) ; var VAR3 = VAR0 . AddSidecar ( VAR4 . Create ( VAR0 , VAR0 . EntityType . GetProperties ( ) ) ) ; VAR3 . TakeSnapshot ( ) ; VAR3 [ VAR2 ] = LITERAL ; VAR5 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR2 ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , LITERAL ) ) ) ; var VAR2 = VAR3 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR2 . VAR4 . Item1 ) ; Assert . Same ( VAR0 . EntityType . FindProperty ( LITERAL ) , VAR2 . VAR4 . Item2 ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ;
Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; var VAR1 = VAR2 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR1 . VAR3 . Item1 ) ; Assert . Same ( VAR0 . EntityType . FindProperty ( LITERAL ) , VAR1 . VAR3 . Item2 ) ;
Assert . Equal ( VAR0 , VAR1 . RelationshipsSnapshot [ VAR1 . EntityType . FindNavigation ( LITERAL ) ] ) ; var VAR2 = VAR3 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR1 , VAR2 . VAR4 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindNavigation ( LITERAL ) , VAR2 . VAR4 . Item2 ) ;
Assert . Same ( VAR0 . EntityType . FindNavigation ( LITERAL ) , VAR1 . VAR2 . Item2 ) ; Assert . Equal ( VAR3 , VAR1 . VAR2 . Item3 ) ; Assert . Equal ( VAR4 , VAR1 . VAR2 . Item4 ) ; Assert . Same ( VAR0 , VAR1 . VAR5 . Item1 ) ; Assert . Same ( VAR0 . EntityType . FindProperty ( LITERAL ) , VAR1 . VAR5 . Item2 ) ;
Assert . Equal ( VAR0 , VAR1 . RelationshipsSnapshot [ VAR1 . EntityType . FindNavigation ( LITERAL ) ] ) ; var VAR2 = VAR3 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR1 , VAR2 . VAR4 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindNavigation ( LITERAL ) , VAR2 . VAR4 . Item2 ) ; Assert . Equal ( VAR5 , VAR2 . VAR4 . Item3 ) ; Assert . Equal ( VAR0 , VAR2 . VAR4 . Item4 ) ; Assert . Same ( VAR1 , VAR2 . VAR6 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindProperty ( LITERAL ) , VAR2 . VAR6 . Item2 ) ;
Assert . Equal ( VAR0 , VAR1 . RelationshipsSnapshot [ VAR1 . EntityType . FindNavigation ( LITERAL ) ] ) ; var VAR2 = VAR3 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR1 , VAR2 . VAR4 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindNavigation ( LITERAL ) , VAR2 . VAR4 . Item2 ) ;
Assert . Equal ( VAR0 , VAR1 . RelationshipsSnapshot [ VAR1 . EntityType . FindNavigation ( LITERAL ) ] ) ; var VAR2 = VAR3 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR1 , VAR2 . VAR4 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindNavigation ( LITERAL ) , VAR2 . VAR4 . Item2 ) ; Assert . Equal ( VAR5 , VAR2 . VAR4 . Item3 ) ; Assert . Equal ( VAR0 , VAR2 . VAR4 . Item4 ) ; Assert . Same ( VAR1 , VAR2 . VAR6 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindProperty ( LITERAL ) , VAR2 . VAR6 . Item2 ) ;
Assert . Same ( VAR0 . EntityType . FindNavigation ( LITERAL ) , VAR1 . VAR2 . Item2 ) ; Assert . Empty ( VAR1 . VAR2 . Item3 ) ; Assert . Equal ( new [ ] { VAR3 } , VAR1 . VAR2 . Item4 ) ; Assert . Same ( VAR3 , VAR1 . VAR4 . Item1 . Entity ) ; Assert . Same ( VAR1 . VAR4 . Item1 . EntityType . FindProperty ( LITERAL ) , VAR1 . VAR4 . Item2 ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , LITERAL ) ) ) ; var VAR4 = VAR5 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR4 . VAR6 . Item1 ) ; Assert . Same ( VAR0 . EntityType . FindProperty ( LITERAL ) , VAR4 . VAR6 . Item2 ) ;
Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; var VAR1 = VAR2 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR1 . VAR3 . Item1 ) ; Assert . Same ( VAR0 . EntityType . FindProperty ( LITERAL ) , VAR1 . VAR3 . Item2 ) ;
Assert . Equal ( VAR0 , VAR1 . RelationshipsSnapshot [ VAR1 . EntityType . FindNavigation ( LITERAL ) ] ) ; var VAR2 = VAR3 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR1 , VAR2 . VAR4 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindNavigation ( LITERAL ) , VAR2 . VAR4 . Item2 ) ;
Assert . Same ( VAR0 . EntityType . FindNavigation ( LITERAL ) , VAR1 . VAR2 . Item2 ) ; Assert . Equal ( VAR3 , VAR1 . VAR2 . Item3 ) ; Assert . Equal ( VAR4 , VAR1 . VAR2 . Item4 ) ; Assert . Same ( VAR0 , VAR1 . VAR5 . Item1 ) ; Assert . Same ( VAR0 . EntityType . FindProperty ( LITERAL ) , VAR1 . VAR5 . Item2 ) ;
Assert . Equal ( VAR0 , VAR1 . RelationshipsSnapshot [ VAR1 . EntityType . FindNavigation ( LITERAL ) ] ) ; var VAR2 = VAR3 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR1 , VAR2 . VAR4 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindNavigation ( LITERAL ) , VAR2 . VAR4 . Item2 ) ; Assert . Equal ( VAR5 , VAR2 . VAR4 . Item3 ) ; Assert . Equal ( VAR0 , VAR2 . VAR4 . Item4 ) ; Assert . Same ( VAR1 , VAR2 . VAR6 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindProperty ( LITERAL ) , VAR2 . VAR6 . Item2 ) ;
Assert . Equal ( VAR0 , VAR1 . RelationshipsSnapshot [ VAR1 . EntityType . FindNavigation ( LITERAL ) ] ) ; var VAR2 = VAR3 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR1 , VAR2 . VAR4 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindNavigation ( LITERAL ) , VAR2 . VAR4 . Item2 ) ; Assert . Equal ( VAR5 , VAR2 . VAR4 . Item3 ) ; Assert . Equal ( VAR0 , VAR2 . VAR4 . Item4 ) ; Assert . Same ( VAR1 , VAR2 . VAR6 . Item1 ) ; Assert . Same ( VAR1 . EntityType . FindProperty ( LITERAL ) , VAR2 . VAR6 . Item2 ) ;
Assert . Same ( VAR0 . EntityType . FindNavigation ( LITERAL ) , VAR1 . VAR2 . Item2 ) ; Assert . Equal ( new [ ] { VAR3 } , VAR1 . VAR2 . Item3 ) ; Assert . Empty ( VAR1 . VAR2 . Item4 ) ; Assert . Same ( VAR3 , VAR1 . VAR4 . Item1 . Entity ) ; Assert . Same ( VAR1 . VAR4 . Item1 . EntityType . FindNavigation ( LITERAL ) , VAR1 . VAR4 . Item2 ) ;
Assert . Same ( VAR0 . VAR1 . Item1 . EntityType . FindProperty ( LITERAL ) , VAR0 . VAR1 . Item2 ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 . Item3 ) ; Assert . Null ( VAR0 . VAR1 . Item4 ) ; Assert . Same ( VAR2 , VAR0 . VAR3 . Item1 . Entity ) ; Assert . Same ( VAR0 . VAR3 . Item1 . EntityType . FindNavigation ( LITERAL ) , VAR0 . VAR3 . Item2 ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( SomeEntity ) . FullName ) ; var VAR2 = VAR0 . FindProperty ( LITERAL ) ; VAR2 . IsReadOnlyAfterSave = true ; var VAR3 = TestHelpers . Instance . CreateContextServices ( VAR1 ) ; var VAR4 = CreateInternalEntry ( VAR3 , VAR0 , new SomeEntity ( ) ) ; VAR4 [ VAR0 . FindProperty ( LITERAL ) ] = 1 ;
var VAR0 = VAR1 . FindEntityType ( typeof ( SomeEntity ) . FullName ) ; var VAR2 = VAR0 . FindProperty ( LITERAL ) ; var VAR3 = TestHelpers . Instance . CreateContextServices ( VAR1 ) ; var VAR4 = CreateInternalEntry ( VAR3 , VAR0 , new SomeEntity ( ) ) ; VAR4 [ VAR0 . FindProperty ( LITERAL ) ] = 1 ;
var VAR0 = VAR1 . FindEntityType ( typeof ( SomeEntity ) . FullName ) ; var VAR2 = VAR0 . FindProperty ( LITERAL ) ; var VAR3 = TestHelpers . Instance . CreateContextServices ( VAR1 ) ; var VAR4 = CreateInternalEntry ( VAR3 , VAR0 , new SomeEntity ( ) ) ; VAR4 [ VAR2 ] = LITERAL ; var VAR5 = VAR4 . GetPrimaryKeyValue ( ) ; Assert . IsType < SimpleKeyValue < int > > ( VAR5 ) ; Assert . Equal ( LITERAL , VAR5 . Value ) ; Assert . Same ( VAR0 . FindPrimaryKey ( ) , VAR5 . Key ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( SomeDependentEntity ) . FullName ) ; var VAR2 = new [ ] { VAR0 . FindProperty ( LITERAL ) , VAR0 . FindProperty ( LITERAL ) } ; var VAR3 = TestHelpers . Instance . CreateContextServices ( VAR1 ) ; var VAR4 = CreateInternalEntry ( VAR3 , VAR0 , new SomeDependentEntity ( ) ) ; VAR4 [ VAR2 [ 0 ] ] = LITERAL ; VAR4 [ VAR2 [ 1 ] ] = LITERAL ; var VAR5 = ( CompositeKeyValue ) VAR4 . GetPrimaryKeyValue ( ) ; Assert . Equal ( LITERAL , VAR5 . Value [ 0 ] ) ; Assert . Equal ( LITERAL , VAR5 . Value [ 1 ] ) ; Assert . Same ( VAR0 . FindPrimaryKey ( ) , VAR5 . Key ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( SomeDependentEntity ) . FullName ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; var VAR3 = VAR2 . Properties . Single ( ) ; var VAR4 = TestHelpers . Instance . CreateContextServices ( VAR1 ) ; var VAR5 = CreateInternalEntry ( VAR4 , VAR0 , new SomeDependentEntity ( ) ) ; VAR5 [ VAR3 ] = LITERAL ; VAR5 . RelationshipsSnapshot [ VAR3 ] = LITERAL ; var VAR6 = VAR5 . RelationshipsSnapshot . GetDependentKeyValue ( VAR2 ) ; Assert . IsType < SimpleKeyValue < int > > ( VAR6 ) ; Assert . Equal ( LITERAL , VAR6 . Value ) ; Assert . Same ( VAR2 . PrincipalEntityType . FindPrimaryKey ( ) , VAR6 . Key ) ;
VAR0 . GetOrAddForeignKey ( VAR1 , VAR0 . FindPrimaryKey ( ) , VAR0 ) ; VAR0 = VAR2 . AddEntityType ( typeof ( Kiwi ) ) ; var VAR3 = VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR3 . IsShadowProperty = false ; var VAR4 = VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR4 . IsShadowProperty = false ; VAR0 . GetOrSetPrimaryKey ( VAR3 ) ; VAR0 . GetOrAddForeignKey ( VAR4 , VAR0 . FindPrimaryKey ( ) , VAR0 ) ;
var VAR0 = VAR1 . FindEntityType ( typeof ( Category ) ) ; var VAR2 = CreateStateManager ( VAR1 ) ; var VAR3 = new Category { VAR4 = LITERAL } ; var VAR5 = new SimpleKeyValue < int > ( VAR0 . FindPrimaryKey ( ) , LITERAL ) ;
var VAR0 = CreateModel ( VAR1 ) ; var VAR2 = Assert . Single ( VAR0 . Tables . Single ( VAR3 => VAR3 . ForeignKeys . Count > 0 ) . ForeignKeys ) ; Assert . Equal ( LITERAL , VAR2 . Table . SchemaName ) ; Assert . Equal ( LITERAL , VAR2 . Table . Name ) ; Assert . Equal ( LITERAL , VAR2 . PrincipalTable . SchemaName ) ; Assert . Equal ( LITERAL , VAR2 . PrincipalTable . Name ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR2 . Columns . Select ( VAR4 => VAR4 . Name ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR2 . PrincipalColumns . Select ( VAR4 => VAR4 . Name ) . ToArray ( ) ) ;
Assert . Same ( VAR0 , VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . DataAnnotation ) ) ; Assert . Same ( VAR0 . Metadata , VAR1 . ModelBuilder . Entity ( typeof ( DerivedEntity ) . FullName , ConfigurationSource . Convention ) . Metadata ) ; Assert . True ( new DiscriminatorConvention ( ) . Apply ( VAR0 , oldBaseType : null ) ) ; var VAR2 = VAR1 . Metadata . Relational ( ) . DiscriminatorProperty ; Assert . NotNull ( VAR2 ) ; Assert . Same ( VAR2 , VAR3 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Same ( VAR2 , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Equal ( typeof ( EntityBase ) . VAR4 , VAR3 . Metadata . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( typeof ( Entity ) . VAR4 , VAR1 . Metadata . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( typeof ( DerivedEntity ) . VAR4 , VAR0 . Metadata . Relational ( ) . DiscriminatorValue ) ; VAR1 . HasBaseType ( ( Type ) null , ConfigurationSource . DataAnnotation ) ;
var VAR0 = new ServiceCollection ( ) . AddScoped < ISqlServerConnection , FakeSqlServerConnection > ( ) . AddScoped < IRelationalCommandBuilderFactory , FakeRelationalCommandBuilderFactory > ( ) ; var VAR1 = SqlServerTestHelpers . Instance . CreateContextServices ( VAR0 ) ; var VAR2 = ( FakeSqlServerConnection ) VAR1 . GetRequiredService < ISqlServerConnection > ( ) ; VAR2 . VAR3 = LITERAL ; VAR2 . VAR4 = LITERAL ; var VAR5 = VAR1 . GetRequiredService < IRelationalDatabaseCreator > ( ) ;
Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR0 . GetProperties ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL , LITERAL , LITERAL } , VAR3 . GetProperties ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL , LITERAL , LITERAL } , VAR4 . GetProperties ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { 0 , 1 , LITERAL , LITERAL } , VAR3 . GetProperties ( ) . Select ( VAR1 => VAR1 . Index ) ) ; Assert . Equal ( new [ ] { 0 , 1 , LITERAL , LITERAL } , VAR4 . GetProperties ( ) . Select ( VAR1 => VAR1 . Index ) ) ;
Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR0 . GetProperties ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL , LITERAL } , VAR3 . GetProperties ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { 0 , 1 , LITERAL } , VAR3 . GetProperties ( ) . Select ( VAR1 => VAR1 . Index ) ) ; Assert . Same ( VAR4 , VAR3 . FindPrimaryKey ( new [ ] { VAR3 . GetProperty ( LITERAL ) } ) ) ; Assert . Same ( VAR3 . GetKey ( VAR3 . GetProperty ( LITERAL ) ) , VAR0 . GetKey ( VAR0 . GetProperty ( LITERAL ) ) ) ;
Assert . Equal ( new [ ] { LITERAL } , VAR0 . GetNavigations ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new string [ 0 ] , VAR3 . GetNavigations ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; VAR3 . BaseType = VAR0 ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . GetNavigations ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL } , VAR3 . GetNavigations ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ;
Assert . Equal ( new [ ] { LITERAL } , VAR0 . GetNavigations ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL } , VAR3 . GetNavigations ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; var VAR4 = VAR5 . GetOrAddProperty ( Order . VAR6 ) ; var VAR7 = VAR5 . GetOrAddForeignKey ( VAR4 , VAR8 , VAR3 ) ; VAR3 . AddNavigation ( LITERAL , VAR7 , pointsToPrincipal : false ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . GetNavigations ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR3 . GetNavigations ( ) . Select ( VAR1 => VAR1 . VAR2 ) . ToArray ( ) ) ;
Assert . Null ( VAR0 . RemoveForeignKey ( new [ ] { VAR2 } ) ) ; var VAR5 = VAR0 . AddForeignKey ( VAR6 , VAR3 , VAR4 ) ; var VAR7 = VAR0 . AddForeignKey ( VAR2 , VAR3 , VAR4 ) ; Assert . Equal ( new [ ] { VAR5 , VAR7 } , VAR0 . GetForeignKeys ( ) . ToArray ( ) ) ; Assert . Same ( VAR5 , VAR0 . RemoveForeignKey ( VAR5 . Properties ) ) ; Assert . Null ( VAR0 . RemoveForeignKey ( VAR5 . Properties ) ) ;
Assert . Same ( VAR0 , VAR1 . GetNavigations ( ) . Single ( ) ) ; Assert . Same ( VAR2 , VAR3 . GetNavigations ( ) . Single ( ) ) ; Assert . Same ( VAR0 , VAR1 . RemoveNavigation ( VAR0 . VAR5 ) ) ; Assert . Null ( VAR1 . RemoveNavigation ( VAR0 . VAR5 ) ) ; Assert . Empty ( VAR1 . GetNavigations ( ) ) ; Assert . Same ( VAR2 , VAR3 . RemoveNavigation ( LITERAL ) ) ; Assert . Empty ( VAR3 . GetNavigations ( ) ) ;
Assert . Empty ( VAR0 . Metadata . GetProperties ( ) . Where ( VAR1 => VAR1 . Name == Order . VAR2 . Name ) ) ; var VAR3 = VAR0 . Metadata . GetForeignKeys ( ) . Single ( ) ; Assert . Same ( VAR4 . DeclaringEntityType , VAR3 . DeclaringEntityType ) ; Assert . Same ( VAR4 . PrincipalEntityType , VAR3 . PrincipalEntityType ) ; Assert . Null ( VAR3 . PrincipalToDependent ) ; Assert . Null ( VAR3 . DependentToPrincipal ) ; Assert . NotEqual ( VAR4 . Properties , VAR3 . DeclaringEntityType . GetProperties ( ) ) ; Assert . Same ( VAR4 . PrincipalKey , VAR3 . PrincipalKey ) ; Assert . True ( VAR3 . IsUnique ) ; Assert . True ( VAR3 . IsRequired ) ; Assert . Equal ( DeleteBehavior . Cascade , VAR3 . DeleteBehavior ) ;
Assert . NotEqual ( VAR0 . Properties , VAR1 . DeclaringEntityType . GetProperties ( ) ) ; Assert . Same ( VAR0 . PrincipalKey , VAR1 . PrincipalKey ) ; Assert . True ( VAR1 . IsUnique ) ; Assert . True ( VAR1 . IsRequired ) ; Assert . Equal ( DeleteBehavior . Cascade , VAR1 . DeleteBehavior ) ;
Assert . Contains ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR3 ) ) ; Assert . Contains ( VAR4 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR3 . VAR2 ) ) ; new NotMappedMemberAttributeConvention ( ) . Apply ( VAR0 ) ; Assert . DoesNotContain ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR3 ) ) ; Assert . DoesNotContain ( VAR4 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR3 . VAR2 ) ) ; new RelationshipDiscoveryConvention ( ) . Apply ( VAR4 ) ; Assert . DoesNotContain ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR3 ) ) ; Assert . Contains ( VAR4 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR3 . VAR2 ) ) ;
Assert . Contains ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR3 ) ) ; Assert . Contains ( VAR4 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR3 . VAR2 ) ) ; new NotMappedMemberAttributeConvention ( ) . Apply ( VAR0 ) ; Assert . Contains ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR3 ) ) ; Assert . Contains ( VAR4 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR3 . VAR2 ) ) ;
Assert . Contains ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR3 ) ) ; Assert . DoesNotContain ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR4 ) ) ; Assert . Contains ( VAR5 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR4 . VAR2 ) ) ; new InversePropertyAttributeConvention ( ) . Apply ( VAR5 ) ; Assert . DoesNotContain ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR3 ) ) ; Assert . Contains ( VAR0 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR2 . VAR4 ) ) ; Assert . Contains ( VAR5 . Metadata . GetNavigations ( ) , VAR1 => VAR1 . Name == nameof ( VAR4 . VAR2 ) ) ;
Assert . Empty ( VAR0 . Metadata . GetNavigations ( ) ) ; Assert . Empty ( VAR0 . Metadata . GetForeignKeys ( ) ) ; Assert . Empty ( VAR1 . Metadata . GetNavigations ( ) ) ; Assert . Empty ( VAR1 . Metadata . GetForeignKeys ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Model . GetEntityTypes ( ) . Count ) ;
var VAR0 = VAR1 . Metadata . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Equal ( nameof ( Order . Customer ) , VAR0 . DependentToPrincipal . Name ) ; Assert . Null ( VAR0 . PrincipalToDependent ) ; Assert . Same ( VAR2 . Metadata , VAR0 . PrincipalEntityType ) ; var VAR3 = VAR4 . Metadata . GetNavigations ( ) . Single ( ) . ForeignKey ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; var VAR2 = VAR1 . GetKeys ( ) . Single ( ) ; var VAR3 = VAR4 . GetKeys ( ) . Single ( ) ; VAR5 . Entity < Order > ( ) . HasOne ( VAR6 => VAR6 . Customer ) . WithMany ( VAR6 => VAR6 . Orders ) ; var VAR7 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; AssertEqual ( VAR0 . Properties , VAR7 . Properties ) ; Assert . Same ( VAR7 , VAR4 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Same ( VAR2 , VAR0 . Properties . Single ( ) ) ; Assert . Equal ( nameof ( Order . Customer ) , VAR0 . DependentToPrincipal . Name ) ; Assert . Null ( VAR0 . PrincipalToDependent ) ; Assert . NotSame ( VAR0 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Same ( VAR2 , VAR0 . Properties . Single ( ) ) ; Assert . Equal ( nameof ( Customer . Orders ) , VAR0 . PrincipalToDependent . Name ) ; Assert . Null ( VAR0 . DependentToPrincipal ) ; Assert . NotSame ( VAR0 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR1 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { LITERAL , VAR2 . Properties . Single ( ) . Name , VAR5 . Properties . Single ( ) . Name } , VAR0 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Same ( VAR2 , VAR0 . Properties . Single ( ) ) ; Assert . Equal ( nameof ( BigMak . Pickles ) , VAR0 . PrincipalToDependent . Name ) ; Assert . Null ( VAR0 . DependentToPrincipal ) ; Assert . NotSame ( VAR0 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name } , VAR1 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { VAR5 . Name , LITERAL , VAR6 . Properties . Single ( ) . Name } , VAR0 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; var VAR2 = ( IProperty ) VAR0 . Properties . Single ( ) ; Assert . Equal ( LITERAL , VAR2 . Name ) ; Assert . True ( VAR2 . IsShadowProperty ) ; Assert . Same ( typeof ( int ? ) , VAR2 . ClrType ) ; Assert . Same ( VAR1 , VAR2 . DeclaringEntityType ) ; Assert . Equal ( nameof ( Pickle . BigMak ) , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR0 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . NotSame ( VAR0 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; var VAR2 = ( IProperty ) VAR0 . Properties . Single ( ) ; Assert . Equal ( LITERAL , VAR2 . Name ) ; Assert . True ( VAR2 . IsShadowProperty ) ; Assert . Same ( typeof ( int ? ) , VAR2 . ClrType ) ; Assert . Same ( VAR3 , VAR2 . DeclaringEntityType ) ; Assert . Equal ( nameof ( BigMak . Pickles ) , VAR0 . PrincipalToDependent . Name ) ; Assert . Null ( VAR0 . DependentToPrincipal ) ; Assert . NotSame ( VAR0 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name } , VAR1 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { VAR5 . Name , LITERAL , VAR6 . Properties . Single ( ) . Name } , VAR0 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR1 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { LITERAL , VAR2 . Properties . Single ( ) . Name , VAR5 . Properties . Single ( ) . Name } , VAR0 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR1 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { LITERAL , VAR2 . Properties . Single ( ) . Name , VAR5 . Properties . Single ( ) . Name } , VAR0 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Same ( VAR1 . GetProperty ( nameof ( Order . CustomerId ) ) , VAR0 . Properties . Single ( ) ) ; Assert . Equal ( nameof ( Order . Customer ) , VAR0 . DependentToPrincipal . Name ) ; Assert . Null ( VAR0 . PrincipalToDependent ) ; Assert . NotSame ( VAR0 , VAR2 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR1 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { LITERAL , VAR2 . Properties . Single ( ) . Name , VAR5 . Properties . Single ( ) . Name } , VAR0 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name } , VAR1 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { VAR2 . Properties . Single ( ) . Name , VAR5 . Properties . Single ( ) . Name } , VAR0 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Same ( VAR1 . GetProperty ( nameof ( Pickle . BurgerId ) ) , VAR0 . Properties . Single ( ) ) ; Assert . Equal ( nameof ( Pickle . BigMak ) , VAR0 . DependentToPrincipal . Name ) ; Assert . Null ( VAR0 . PrincipalToDependent ) ; Assert . NotSame ( VAR0 , VAR2 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
var VAR0 = VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ; var VAR2 = ( IProperty ) VAR0 . Properties . Single ( ) ; Assert . Equal ( LITERAL , VAR2 . Name ) ; Assert . True ( VAR2 . IsShadowProperty ) ; Assert . Same ( typeof ( int ? ) , VAR2 . ClrType ) ; Assert . Same ( VAR1 , VAR2 . DeclaringEntityType ) ; Assert . Equal ( nameof ( Pickle . BigMak ) , VAR0 . DependentToPrincipal . Name ) ; Assert . Null ( VAR0 . PrincipalToDependent ) ; Assert . NotSame ( VAR0 , VAR3 . GetNavigations ( ) . Single ( ) . ForeignKey ) ;
Assert . Same ( VAR0 . DependentToPrincipal , VAR1 . GetNavigations ( ) . Single ( ) ) ; Assert . Same ( VAR0 . PrincipalToDependent , VAR2 . GetNavigations ( ) . Single ( ) ) ; AssertEqual ( VAR3 , VAR2 . GetProperties ( ) ) ; VAR4 . Add ( VAR0 . Properties . Single ( ) ) ; AssertEqual ( VAR4 , VAR1 . GetProperties ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . GetNavigations ( ) . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , LITERAL , VAR3 . Properties . Single ( ) . Name } , VAR1 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { VAR5 . Properties . Single ( ) . Name , VAR6 . Name } , VAR0 . GetProperties ( ) . Select ( VAR4 => VAR4 . Name ) ) ;
VerifySingleton < SqliteMigrationsAnnotationProvider > ( ) ; VerifyScoped < SqliteConventionSetBuilder > ( ) ; VerifyScoped < SqliteUpdateSqlGenerator > ( ) ; VerifyScoped < SqliteModificationCommandBatchFactory > ( ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; var VAR2 = VAR0 . EntityType . GetProperty ( LITERAL ) ; var VAR3 = VAR0 . AddSidecar ( VAR4 . Create ( VAR0 , VAR0 . EntityType . GetProperties ( ) ) ) ; VAR3 . TakeSnapshot ( ) ; VAR3 [ VAR2 ] = LITERAL ; VAR5 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR2 ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Equal ( new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) , new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) ) ; Assert . NotEqual ( new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) , new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) ) ; Assert . NotEqual ( new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) , new CompositeKeyValue ( VAR0 , new object [  ] { null , LITERAL } ) . GetHashCode ( ) ) ; Assert . NotEqual ( new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) , new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL , LITERAL } ) . GetHashCode ( ) ) ; Assert . NotEqual ( new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) , new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) ) ; Assert . NotEqual ( new CompositeKeyValue ( VAR0 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) , new CompositeKeyValue ( VAR1 , new object [  ] { LITERAL , LITERAL } ) . GetHashCode ( ) ) ;
Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; VAR0 . SetEntityState ( EntityState . Modified ) ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . True ( VAR0 . IsModified ( VAR2 ) ) ; VAR0 . SetEntityState ( EntityState . Unchanged , true ) ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; VAR0 . SetPropertyModified ( VAR2 ) ; Assert . Equal ( EntityState . Modified , VAR0 . EntityState ) ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . True ( VAR0 . IsModified ( VAR2 ) ) ;
Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; VAR0 . SetEntityState ( EntityState . Added ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR1 ) ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR2 ) ) ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ;
Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; VAR0 . SetEntityState ( EntityState . Added ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR1 ) ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR2 ) ) ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; VAR0 . MarkAsTemporary ( VAR1 ) ; Assert . True ( VAR0 . HasTemporaryValue ( VAR1 ) ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR2 ) ) ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ;
Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; VAR0 . MarkAsTemporary ( VAR2 ) ; VAR0 . MarkAsTemporary ( VAR1 , isTemporary : false ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR1 ) ) ; Assert . True ( VAR0 . HasTemporaryValue ( VAR2 ) ) ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ;
Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; VAR0 . MarkAsTemporary ( VAR1 ) ; VAR0 . MarkAsTemporary ( VAR2 ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR1 ) ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR2 ) ) ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ;
Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; VAR0 [ VAR1 ] = 1 ; VAR0 [ VAR2 ] = LITERAL ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; VAR0 [ VAR2 ] = LITERAL ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . True ( VAR0 . IsModified ( VAR2 ) ) ;
Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsModified ( VAR2 ) ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; VAR0 [ VAR2 ] = LITERAL ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . True ( VAR0 . IsModified ( VAR2 ) ) ;
Assert . False ( VAR0 . IsModified ( VAR1 ) ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; VAR2 . VAR3 = LITERAL ; Assert . False ( VAR0 . IsModified ( VAR1 ) ) ;
Assert . Equal ( LITERAL , VAR3 . Count ) ; Assert . Equal ( RelationalDiagnostics . BeforeExecuteCommand , VAR3 [ 0 ] . Item1 ) ; Assert . Equal ( RelationalDiagnostics . AfterExecuteCommand , VAR3 [ 1 ] . Item1 ) ; dynamic VAR1 = VAR3 [ 0 ] . Item2 ; dynamic VAR2 = VAR3 [ 1 ] . Item2 ;
Assert . Equal ( LITERAL , VAR3 . Count ) ; Assert . Equal ( RelationalDiagnostics . BeforeExecuteCommand , VAR3 [ 0 ] . Item1 ) ; Assert . Equal ( RelationalDiagnostics . CommandExecutionError , VAR3 [ 1 ] . Item1 ) ; dynamic VAR1 = VAR3 [ 0 ] . Item2 ; dynamic VAR2 = VAR3 [ 1 ] . Item2 ;
Assert . Equal ( LITERAL , VAR5 . Count ) ; Assert . Equal ( RelationalDiagnostics . BeforeExecuteCommand , VAR5 [ 0 ] . Item1 ) ; Assert . Equal ( RelationalDiagnostics . CommandExecutionError , VAR5 [ 1 ] . Item1 ) ; dynamic VAR1 = VAR5 [ 0 ] . Item2 ; dynamic VAR2 = VAR5 [ 1 ] . Item2 ; Assert . Equal ( VAR3 . DbCommands [ 0 ] , VAR1 . Command ) ; Assert . Equal ( VAR3 . DbCommands [ 0 ] , VAR2 . Command ) ; Assert . Equal ( VAR6 , VAR1 . ExecuteMethod ) ; Assert . Equal ( VAR6 , VAR2 . ExecuteMethod ) ;
VerifySingleton < ISqlServerValueGeneratorCache > ( ) ; VerifySingleton < SqlServerTypeMapper > ( ) ; VerifySingleton < SqlServerModelSource > ( ) ; VerifySingleton < SqlServerAnnotationProvider > ( ) ; VerifySingleton < SqlServerMigrationsAnnotationProvider > ( ) ; VerifyScoped < SqlServerConventionSetBuilder > ( ) ; VerifyScoped < ISqlServerUpdateSqlGenerator > ( ) ; VerifyScoped < ISqlServerSequenceValueGeneratorFactory > ( ) ;
VAR0 . PrimaryKeySetConventions . Add ( VAR1 ) ; var VAR5 = new CascadeDeleteConvention ( ) ; VAR0 . ForeignKeyAddedConventions . Add ( new ForeignKeyAttributeConvention ( ) ) ; VAR0 . ForeignKeyAddedConventions . Add ( VAR2 ) ; VAR0 . ForeignKeyAddedConventions . Add ( VAR5 ) ; VAR0 . ForeignKeyRemovedConventions . Add ( VAR1 ) ; VAR0 . ModelBuiltConventions . Add ( new ModelCleanupConvention ( ) ) ; VAR0 . ModelBuiltConventions . Add ( VAR3 ) ; VAR0 . NavigationAddedConventions . Add ( new RequiredNavigationAttributeConvention ( ) ) ; VAR0 . NavigationAddedConventions . Add ( VAR2 ) ; VAR0 . NavigationRemovedConventions . Add ( VAR4 ) ; VAR0 . PropertyNullableChangedConventions . Add ( VAR5 ) ;
Assert . Null ( VAR0 . PrincipalToDependent ) ; Assert . Null ( VAR0 . DependentToPrincipal ) ; Assert . NotEqual ( VAR1 . Properties , VAR0 . DeclaringEntityType . Properties ) ; Assert . Same ( VAR1 . PrincipalKey , VAR0 . PrincipalKey ) ; Assert . True ( VAR0 . IsUnique ) ; Assert . True ( VAR0 . IsRequired ) ; Assert . Equal ( DeleteBehavior . Cascade , VAR0 . DeleteBehavior ) ; VAR2 = VAR3 . HasForeignKey ( VAR4 , VAR0 . Properties , ConfigurationSource . Convention ) ;
VAR0 = VAR1 . HasForeignKey ( VAR4 , VAR2 . Properties , ConfigurationSource . Convention ) ; var VAR3 = VAR4 . Property ( LITERAL , typeof ( int ) , ConfigurationSource . Convention ) . Metadata ; Assert . Null ( VAR0 . HasPrincipalKey ( new [ ] { VAR3 . Name , VAR5 . VAR6 . Name } , ConfigurationSource . Convention ) ) ; Assert . Null ( VAR0 . IsUnique ( false , ConfigurationSource . Convention ) ) ; Assert . Null ( VAR0 . IsRequired ( false , ConfigurationSource . Convention ) ) ; Assert . Null ( VAR0 . DependentEntityType ( VAR4 . Metadata , ConfigurationSource . Convention ) ) ;
var VAR0 = VAR1 . HasForeignKey ( VAR3 , VAR2 . Properties , ConfigurationSource . Convention ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ; Assert . Null ( VAR0 . IsUnique ( false , ConfigurationSource . Convention ) ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ;
var VAR0 = CreateConventionModelBuilder ( ) ; VAR0 . ForSqlServerUseIdentityColumns ( ) ; var VAR1 = VAR0 . Model . Relational ( ) ; var VAR2 = VAR0 . Model . SqlServer ( ) ;
VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ; Assert . True ( new DiscriminatorConvention ( ) . Apply ( VAR0 , oldBaseType : null ) ) ; var VAR2 = VAR0 . Metadata . Relational ( ) . DiscriminatorProperty ; Assert . NotNull ( VAR2 ) ; Assert . Same ( VAR2 , VAR1 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Equal ( typeof ( EntityBase ) . VAR3 , VAR1 . Metadata . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( typeof ( Entity ) . VAR3 , VAR0 . Metadata . Relational ( ) . DiscriminatorValue ) ; VAR0 . HasBaseType ( ( Type ) null , ConfigurationSource . Convention ) ;
Assert . Same ( VAR0 , VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ) ; Assert . Same ( VAR0 . Metadata , VAR1 . ModelBuilder . Entity ( typeof ( DerivedEntity ) . FullName , ConfigurationSource . Convention ) . Metadata ) ; Assert . True ( new DiscriminatorConvention ( ) . Apply ( VAR0 , oldBaseType : null ) ) ; var VAR2 = VAR1 . Metadata . Relational ( ) . DiscriminatorProperty ; Assert . NotNull ( VAR2 ) ; Assert . Same ( VAR2 , VAR3 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Same ( VAR2 , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Equal ( typeof ( EntityBase ) . VAR4 , VAR3 . Metadata . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( typeof ( Entity ) . VAR4 , VAR1 . Metadata . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( typeof ( DerivedEntity ) . VAR4 , VAR0 . Metadata . Relational ( ) . DiscriminatorValue ) ; VAR1 . HasBaseType ( ( Type ) null , ConfigurationSource . Convention ) ;
VAR0 . Relational ( ConfigurationSource . Explicit ) . HasDiscriminator ( LITERAL , typeof ( string ) ) ; var VAR1 = VAR0 . ModelBuilder . Entity ( typeof ( EntityBase ) , ConfigurationSource . Convention ) ; VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ; Assert . True ( new DiscriminatorConvention ( ) . Apply ( VAR0 , oldBaseType : null ) ) ; Assert . Null ( VAR0 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Null ( VAR1 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Null ( VAR1 . Metadata . Relational ( ) . DiscriminatorValue ) ; Assert . Null ( VAR0 . Metadata . Relational ( ) . DiscriminatorValue ) ; VAR0 . HasBaseType ( ( Type ) null , ConfigurationSource . Convention ) ;
Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( string ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( ( PropertyInfo ) null ) ) ; Assert . Null ( VAR0 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Equal ( 0 , VAR0 . Metadata . Properties . Count ( ) ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( LITERAL , typeof ( int ? ) ) ) ;
Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( string ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( ( PropertyInfo ) null ) ) ; Assert . Null ( VAR0 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Equal ( 0 , VAR0 . Metadata . Properties . Count ( ) ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( LITERAL , typeof ( int ? ) ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( int ? ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Properties . Single ( ) . Name ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasDiscriminator ( Splot . VAR1 ) ) ;
Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasDiscriminator ( Splot . VAR1 ) ) ; Assert . Equal ( Splot . VAR1 . Name , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( int ? ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( Splot . VAR1 . Name , VAR0 . Metadata . Properties . Single ( ) . Name ) ; Assert . Null ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( LITERAL , typeof ( int ? ) ) ) ; Assert . Equal ( Splot . VAR1 . Name , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( int ? ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasDiscriminator ( typeof ( int ) ) ) ; Assert . Null ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( typeof ( int ? ) ) ) ; Assert . Equal ( Splot . VAR1 . Name , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( int ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Null ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( ( PropertyInfo ) null ) ) ;
Assert . Null ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( LITERAL , typeof ( int ? ) ) ) ; Assert . Equal ( Splot . VAR1 . Name , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( int ? ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . NotNull ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasDiscriminator ( typeof ( int ) ) ) ; Assert . Null ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( typeof ( int ? ) ) ) ; Assert . Equal ( Splot . VAR1 . Name , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . Name ) ; Assert . Equal ( typeof ( int ) , VAR0 . Metadata . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Null ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasDiscriminator ( ( PropertyInfo ) null ) ) ;
VAR0 . Entity < DerivedInheritanceRelationshipEntity > ( ) . HasBaseType < BaseInheritanceRelationshipEntity > ( ) ; VAR0 . Entity < BaseInheritanceRelationshipEntity > ( ) . HasKey ( VAR1 => VAR1 . Id ) ; VAR0 . Entity < NestedReferenceDerived > ( ) . HasBaseType < NestedReferenceBase > ( ) ; VAR0 . Entity < NestedCollectionDerived > ( ) . HasBaseType < NestedCollectionBase > ( ) ; VAR0 . Entity < DerivedReferenceOnBase > ( ) . HasBaseType < BaseReferenceOnBase > ( ) ; VAR0 . Entity < DerivedCollectionOnBase > ( ) . HasBaseType < BaseCollectionOnBase > ( ) ; VAR0 . Entity < DerivedReferenceOnDerived > ( ) . HasBaseType < BaseReferenceOnDerived > ( ) ; VAR0 . Entity < DerivedCollectionOnDerived > ( ) . HasBaseType < BaseCollectionOnDerived > ( ) ;
VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ; VAR0 . Property ( Order . VAR2 , ConfigurationSource . Convention ) ; VAR0 . HasForeignKey ( VAR3 . Metadata . Name , new [ ] { Order . VAR2 . Name } , ConfigurationSource . DataAnnotation ) ; var VAR4 = VAR1 . HasForeignKey ( VAR3 . Metadata . Name , new [ ] { Order . VAR2 . Name } , ConfigurationSource . Convention ) ;
VAR0 . HasIndex ( new [ ] { Order . VAR1 . Name } , ConfigurationSource . Explicit ) ; var VAR2 = VAR3 . Entity ( typeof ( SpecialOrder ) , ConfigurationSource . Convention ) ; VAR2 . HasBaseType ( VAR0 . Metadata , ConfigurationSource . Convention ) ; var VAR4 = VAR2 . HasIndex ( new [ ] { Order . VAR1 . Name } , ConfigurationSource . DataAnnotation ) ;
VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ; var VAR2 = VAR0 . Property ( Order . VAR3 . Name , typeof ( string ) , ConfigurationSource . DataAnnotation ) ; VAR2 . IsConcurrencyToken ( true , ConfigurationSource . Convention ) ; VAR2 . HasMaxLength ( 1 , ConfigurationSource . DataAnnotation ) ; var VAR4 = VAR5 . Entity ( typeof ( BackOrder ) , ConfigurationSource . Convention ) ; VAR4 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ;
var VAR0 = VAR1 . HasForeignKey ( typeof ( VAR2 ) . FullName , new [ ] { Order . VAR3 . Name , Order . VAR4 . Name } , ConfigurationSource . DataAnnotation ) ; var VAR5 = VAR6 . Entity ( typeof ( SpecialCustomer ) , ConfigurationSource . Convention ) ; VAR5 . HasBaseType ( VAR7 . Metadata , ConfigurationSource . Convention ) ; var VAR8 = VAR6 . Entity ( typeof ( SpecialOrder ) , ConfigurationSource . Convention ) ; VAR8 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ;
Assert . True ( VAR0 . HasAnnotation ( LITERAL , 1 , ConfigurationSource . Convention ) ) ; Assert . True ( VAR0 . HasAnnotation ( LITERAL , LITERAL , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( LITERAL , VAR1 . Annotations . Single ( ) . Value ) ; Assert . False ( VAR0 . HasAnnotation ( LITERAL , 1 , ConfigurationSource . Convention ) ) ;
Assert . False ( VAR0 . HasAnnotation ( LITERAL , null , ConfigurationSource . Convention ) ) ; Assert . Equal ( 1 , VAR1 . Annotations . Single ( ) . Value ) ; Assert . True ( VAR0 . HasAnnotation ( LITERAL , null , ConfigurationSource . Explicit ) ) ;
VAR0 = VAR0 . IsUnique ( true , ConfigurationSource . Convention ) ; Assert . NotNull ( VAR0 ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ; VAR0 = VAR0 . IsUnique ( false , ConfigurationSource . DataAnnotation ) ; Assert . NotNull ( VAR0 ) ; Assert . False ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ; Assert . Null ( VAR0 . IsUnique ( true , ConfigurationSource . Convention ) ) ;
VAR0 = VAR0 . IsUnique ( true , ConfigurationSource . Convention ) ; Assert . True ( VAR0 . Metadata . IsUnique . Value ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ; Assert . NotNull ( VAR0 . Metadata . PrincipalToDependent ) ; Assert . Null ( VAR0 . IsUnique ( false , ConfigurationSource . Convention ) ) ; Assert . True ( VAR0 . Metadata . IsUnique . Value ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ; Assert . NotNull ( VAR0 . Metadata . PrincipalToDependent ) ; VAR0 = VAR0 . IsUnique ( false , ConfigurationSource . DataAnnotation ) ;
VAR0 = VAR0 . IsRequired ( true , ConfigurationSource . Convention ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsRequired ) ; VAR0 = VAR0 . IsRequired ( false , ConfigurationSource . DataAnnotation ) ; Assert . False ( ( ( IForeignKey ) VAR0 . Metadata ) . IsRequired ) ; Assert . Null ( VAR0 . IsRequired ( true , ConfigurationSource . Convention ) ) ;
Assert . Null ( VAR0 . IsRequired ( false , ConfigurationSource . Convention ) ) ; Assert . True ( VAR1 . IsRequired ) ; Assert . False ( VAR2 . IsNullable ) ; Assert . False ( VAR3 . IsNullable ) ; VAR0 = VAR0 . IsRequired ( true , ConfigurationSource . Convention ) ;
Assert . Null ( VAR0 . IsRequired ( false , ConfigurationSource . Convention ) ) ; Assert . True ( VAR1 . IsRequired ) ; Assert . False ( VAR2 . IsNullable ) ; Assert . False ( VAR3 . IsNullable ) ; VAR0 = VAR0 . IsRequired ( true , ConfigurationSource . Convention ) ; Assert . NotNull ( VAR0 ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsRequired ) ; Assert . False ( VAR2 . IsNullable ) ; Assert . False ( VAR3 . IsNullable ) ; VAR0 = VAR0 . IsRequired ( false , ConfigurationSource . Explicit ) ;
VerifySingleton < SqliteAnnotationProvider > ( ) ; VerifySingleton < SqliteTypeMapper > ( ) ; VerifySingleton < SqliteModelSource > ( ) ; VerifySingleton < SqliteMigrationsAnnotationProvider > ( ) ; VerifySingleton < SqliteConventionSetBuilder > ( ) ; VerifyScoped < SqliteUpdateSqlGenerator > ( ) ; VerifyScoped < SqliteModificationCommandBatchFactory > ( ) ; VerifyScoped < SqliteDatabaseProviderServices > ( ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR6 . AddEntry ( VAR3 ) ; var VAR7 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . SetEntityState ( EntityState . Deleted ) ; var VAR8 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = CreateDataReaderMock ( ) ; var VAR4 = new ModificationCommandBatchFake ( VAR3 . Object ) ; VAR4 . AddCommand ( VAR0 ) ; var VAR6 = Mock . Of < IRelationalConnection > ( ) ; await VAR4 . ExecuteAsync ( VAR6 , new Mock < ILogger > ( ) . Object ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = new ModificationCommandBatchFake ( CreateDataReaderMock ( new [ ] { LITERAL } , new List < object [  ] > { new object [  ] { LITERAL } } ) . Object ) ; VAR3 . AddCommand ( VAR0 ) ; var VAR5 = Mock . Of < IRelationalConnection > ( ) ; await VAR3 . ExecuteAsync ( VAR5 , new Mock < ILogger > ( ) . Object ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = new ModificationCommandBatchFake ( CreateDataReaderMock ( new [ ] { LITERAL , LITERAL } , new List < object [  ] > { new object [  ] { LITERAL , LITERAL } } ) . Object ) ; VAR3 . AddCommand ( VAR0 ) ; var VAR5 = Mock . Of < IRelationalConnection > ( ) ; await VAR3 . ExecuteAsync ( VAR5 , new Mock < ILogger > ( ) . Object ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = new ModificationCommandBatchFake ( CreateDataReaderMock ( new [ ] { LITERAL } , new List < object [  ] > { new object [  ] { LITERAL } } ) . Object ) ; VAR3 . AddCommand ( VAR0 ) ; var VAR5 = Mock . Of < IRelationalConnection > ( ) ; await VAR3 . ExecuteAsync ( VAR5 , new Mock < ILogger > ( ) . Object ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = new ModificationCommandBatchFake ( CreateDataReaderMock ( new [ ] { LITERAL } , new List < object [  ] > { new object [  ] { LITERAL } } ) . Object ) ; VAR3 . AddCommand ( VAR0 ) ; var VAR5 = Mock . Of < IRelationalConnection > ( ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = new ModificationCommandBatchFake ( CreateDataReaderMock ( new [ ] { LITERAL } , new List < object [  ] > ( ) ) . Object ) ; VAR3 . AddCommand ( VAR0 ) ; var VAR5 = Mock . Of < IRelationalConnection > ( ) ;
Check . NotNull ( VAR18 , nameof ( VAR18 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; Check . NotNull ( VAR6 , nameof ( VAR6 ) ) ; VAR7 = VAR8 ; VAR9 = VAR10 ; VAR11 = ( IRelationalDatabaseCreator ) VAR12 ; VAR19 = VAR18 ; VAR14 = VAR1 ; VAR15 = VAR2 ; VAR16 = VAR3 ; VAR13 = VAR0 ;
VAR10 = VAR11 ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR0 = VAR1 ;
VerifySingleton < SqlServerTypeMapper > ( ) ; VerifySingleton < SqlServerModelSource > ( ) ; VerifySingleton < SqlServerAnnotationProvider > ( ) ; VerifySingleton < SqlServerMigrationsAnnotationProvider > ( ) ; VerifyScoped < ISqlServerUpdateSqlGenerator > ( ) ; VerifyScoped < ISqlServerSequenceValueGeneratorFactory > ( ) ; VerifyScoped < SqlServerModificationCommandBatchFactory > ( ) ;
Assert . True ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . ValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ) ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . Metadata . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . True ( VAR0 . SqlServer ( ConfigurationSource . DataAnnotation ) . ValueGenerationStrategy ( SqlServerValueGenerationStrategy . IdentityColumn ) ) ; Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR0 . Metadata . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . False ( VAR0 . SqlServer ( ConfigurationSource . Convention ) . ValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ) ; Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR0 . Metadata . SqlServer ( ) . ValueGenerationStrategy ) ;
Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IModel ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . SequenceHiLo ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , ( ( IModel ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IModel ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ;
Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . RequiresValueGenerator ) ; Assert . False ( ( ( IProperty ) VAR0 ) . RequiresValueGenerator ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . SequenceHiLo ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . RequiresValueGenerator ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ;
VAR0 . Model . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . IdentityColumn ; Assert . Null ( VAR1 . SqlServer ( ) . FindHiLoSequence ( ) ) ; Assert . Null ( ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) ) ; VAR0 . Model . SqlServer ( ) . ValueGenerationStrategy = null ; VAR1 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . IdentityColumn ;
VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . SequenceHiLo ; VAR0 . SqlServer ( ) . GetOrAddSequence ( SqlServerAnnotationNames . DefaultHiLoSequenceName ) ; var VAR1 = VAR0 . GetEntityType ( typeof ( AnEntity ) ) ; var VAR2 = SqlServerTestHelpers . Instance . CreateContextServices ( VAR0 ) . GetRequiredService < IValueGeneratorSelector > ( ) ; Assert . IsType < SqlServerSequenceHiLoValueGenerator < int > > ( VAR2 . Select ( VAR1 . GetProperty ( LITERAL ) , VAR1 ) ) ;
Check . NotNull ( VAR12 , nameof ( VAR12 ) ) ; VAR1 = VAR2 ; VAR3 = VAR4 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR9 = VAR10 ; VAR13 = VAR12 ;
Check . NotNull ( VAR7 , nameof ( VAR7 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; VAR8 = VAR7 ;
Check . NotNull ( VAR7 , nameof ( VAR7 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; VAR8 = VAR7 ;
var VAR0 = VAR1 . Tags . Include ( VAR2 => VAR2 . Gear . Weapons ) ; var VAR3 = VAR0 . ToList ( ) ; Assert . Equal ( LITERAL , VAR3 . Count ) ; var VAR4 = VAR3 . Select ( VAR2 => VAR2 . Gear ) . Where ( VAR5 => VAR5 != null ) . ToList ( ) ; Assert . Equal ( LITERAL , VAR4 . Count ) ; Assert . True ( VAR4 . All ( VAR5 => VAR5 . Weapons != null ) ) ;
VerifySingleton < SqliteAnnotationProvider > ( ) ; VerifySingleton < SqliteTypeMapper > ( ) ; VerifySingleton < SqliteModelSource > ( ) ; VerifySingleton < SqliteMigrationsAnnotationProvider > ( ) ; VerifySingleton < SqliteConventionSetBuilder > ( ) ; VerifyScoped < SqliteModificationCommandBatchFactory > ( ) ; VerifyScoped < SqliteDatabaseProviderServices > ( ) ; VerifyScoped < SqliteRelationalConnection > ( ) ;
VAR0 . UseSqlite ( LITERAL ) . SuppressForeignKeyEnforcement ( ) ; var VAR1 = VAR0 . Options . Extensions . OfType < SqliteOptionsExtension > ( ) . Single ( ) ; Assert . False ( VAR1 . EnforceForeignKeys ) ;
var VAR0 = VAR1 . PreviousMigrationId + VAR1 . FileExtension ; var VAR2 = GetDirectory ( VAR3 , VAR0 , VAR1 . MigrationSubNamespace ) ; var VAR4 = Path . Combine ( VAR2 , VAR1 . MigrationId + VAR1 . FileExtension ) ; var VAR5 = Path . Combine ( VAR2 , VAR1 . MigrationId + LITERAL + VAR1 . FileExtension ) ; var VAR6 = VAR1 . SnapshotName + VAR1 . FileExtension ; var VAR7 = GetDirectory ( VAR3 , VAR6 , VAR1 . SnapshotSubnamespace ) ;
var VAR0 = VAR1 . PreviousMigrationId + VAR1 . FileExtension ; var VAR2 = GetDirectory ( VAR3 , VAR0 , VAR1 . MigrationSubNamespace ) ; var VAR4 = Path . Combine ( VAR2 , VAR1 . MigrationId + VAR1 . FileExtension ) ; var VAR5 = Path . Combine ( VAR2 , VAR1 . MigrationId + LITERAL + VAR1 . FileExtension ) ; var VAR6 = VAR1 . SnapshotName + VAR1 . FileExtension ; var VAR7 = GetDirectory ( VAR3 , VAR6 , VAR1 . SnapshotSubnamespace ) ; var VAR8 = Path . Combine ( VAR7 , VAR6 ) ; VAR9 . Value . LogVerbose ( Strings . WritingMigration ( VAR4 ) ) ; Directory . CreateDirectory ( VAR2 ) ; File . WriteAllText ( VAR4 , VAR1 . MigrationCode ) ; File . WriteAllText ( VAR5 , VAR1 . MetadataCode ) ; VAR9 . Value . LogVerbose ( Strings . WritingSnapshot ( VAR8 ) ) ; Directory . CreateDirectory ( VAR7 ) ; File . WriteAllText ( VAR8 , VAR1 . SnapshotCode ) ;
VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR2 ) ; VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR3 ) ; VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR4 ) ; VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR5 ) ; VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR6 ) ; VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR7 ) ; VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR8 ) ; VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR9 ) ; VAR0 . HasAlternateKey ( VAR1 => VAR1 . VAR10 ) ; VAR0 . HasAlternateKey ( VAR1 => new { VAR1 . VAR11 , VAR1 . VAR8 } ) ;
Assert . True ( VAR0 . IsConcurrencyToken ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . IsConcurrencyToken ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . IsConcurrencyToken . Value ) ; Assert . False ( VAR0 . IsConcurrencyToken ( true , ConfigurationSource . Convention ) ) ;
Assert . True ( VAR0 . IsConcurrencyToken ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR0 . IsConcurrencyToken ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR1 . IsConcurrencyToken . Value ) ; Assert . True ( VAR0 . IsConcurrencyToken ( false , ConfigurationSource . Explicit ) ) ;
Assert . True ( VAR0 . HasMaxLength ( 1 , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . HasMaxLength ( LITERAL , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( LITERAL , VAR1 . GetMaxLength ( ) . Value ) ; Assert . False ( VAR0 . HasMaxLength ( 1 , ConfigurationSource . Convention ) ) ;
Assert . True ( VAR0 . IsRequired ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . IsRequired ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR1 . IsNullable . Value ) ; Assert . False ( VAR0 . IsRequired ( true , ConfigurationSource . Convention ) ) ;
Assert . True ( VAR0 . IsRequired ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR0 . IsRequired ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . IsNullable . Value ) ; Assert . True ( VAR0 . IsRequired ( false , ConfigurationSource . Explicit ) ) ;
VAR0 . Entity < Order > ( ) . HasOne < Customer > ( ) . WithMany ( ) . ForeignKey ( VAR1 => VAR1 . CustomerId ) ; VAR0 . Ignore < OrderDetails > ( ) ; VAR0 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR3 . GetEntityType ( typeof ( Order ) ) ; var VAR4 = VAR3 . GetEntityType ( typeof ( Customer ) ) ; var VAR5 = VAR2 . GetForeignKeys ( ) . Single ( ) ; var VAR6 = VAR4 . GetKeys ( ) . Single ( ) ; var VAR7 = VAR2 . GetKeys ( ) . Single ( ) ; VAR0 . Entity < Order > ( ) . HasOne ( VAR1 => VAR1 . Customer ) . WithMany ( VAR1 => VAR1 . Orders ) ;
VAR0 . Property ( VAR1 => VAR1 . Up ) . IsConcurrencyToken ( ) ; VAR0 . Property ( VAR1 => VAR1 . Down ) . IsConcurrencyToken ( false ) ; VAR0 . Property < int > ( LITERAL ) . IsConcurrencyToken ( true ) ; VAR0 . Property < string > ( LITERAL ) . IsConcurrencyToken ( false ) ; VAR0 . Property < int > ( LITERAL ) . IsConcurrencyToken ( ) ; VAR0 . Property < string > ( LITERAL ) . IsConcurrencyToken ( false ) ;
VAR0 . Entity < Customer > ( ) . HasMany ( VAR1 => VAR1 . Orders ) . WithOne ( VAR1 => VAR1 . Customer ) ; Assert . Equal ( 1 , VAR2 . GetForeignKeys ( ) . Count ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . Name ) ; Assert . Same ( VAR4 . PrincipalKey , VAR3 . Navigations . Single ( ) . ForeignKey . PrincipalKey ) ; AssertEqual ( new [ ] { LITERAL , VAR5 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR3 . Properties . Select ( VAR6 => VAR6 . Name ) ) ; AssertEqual ( new [ ] { LITERAL , VAR4 . Properties . Single ( ) . Name , VAR7 . Properties . Single ( ) . Name } , VAR2 . Properties . Select ( VAR6 => VAR6 . Name ) ) ; Assert . Empty ( VAR3 . GetForeignKeys ( ) ) ;
VAR0 . HasKey ( VAR1 => VAR1 . BusinessEntityID ) ; VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . Property ( VAR1 => VAR1 . CurrentFlag ) . HasDefaultValue ( true ) ; VAR0 . Property ( VAR1 => VAR1 . Gender ) . IsRequired ( ) ; VAR0 . Property ( VAR1 => VAR1 . JobTitle ) . IsRequired ( ) ; VAR0 . Property ( VAR1 => VAR1 . LoginID ) . IsRequired ( ) ; VAR0 . Property ( VAR1 => VAR1 . MaritalStatus ) . IsRequired ( ) ; VAR0 . Property ( VAR1 => VAR1 . ModifiedDate ) . HasDefaultValueSql ( LITERAL ) ; VAR0 . Property ( VAR1 => VAR1 . NationalIDNumber ) . IsRequired ( ) ;
VAR0 . HasKey ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR1 . Entity ( LITERAL , VAR0 => { VAR0 . Property < int > ( LITERAL ) ; VAR0 . HasKey ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; } ) ; VAR1 . Entity ( LITERAL ) . HasOne ( LITERAL ) . WithMany ( ) . ForeignKey ( LITERAL ) . PrincipalKey ( LITERAL ) ; VAR1 . Entity ( LITERAL ) . HasOne ( LITERAL ) . WithMany ( ) . ForeignKey ( LITERAL ) . PrincipalKey ( LITERAL ) ;
var VAR2 = LITERAL ; var VAR1 = new SqliteConnection ( VAR2 ) ; Assert . Equal ( VAR2 , VAR1 . ConnectionString ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR3 . VAR4 . Single ( ) ) ; Assert . Same ( VAR3 , VAR1 . VAR5 ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , behavior : GraphBehavior . SingleObject ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Empty ( VAR1 . VAR4 ) ; Assert . Same ( VAR1 , VAR2 . VAR5 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 , behavior : GraphBehavior . SingleObject ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Empty ( VAR3 . VAR4 ) ; Assert . Same ( VAR3 , VAR1 . VAR5 ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , behavior : GraphBehavior . SingleObject ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR1 . VAR4 . Single ( ) ) ; Assert . Null ( VAR2 . VAR5 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 , behavior : GraphBehavior . SingleObject ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , behavior : GraphBehavior . SingleObject ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR5 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR7 . VAR8 ) ; Assert . Same ( VAR7 , VAR5 . VAR4 . Single ( ) ) ; Assert . Same ( VAR5 , VAR7 . VAR2 ) ; Assert . Empty ( VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR1 . Entry ( VAR5 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR1 . Entry ( VAR7 ) . State ) ; VAR1 . Attach ( VAR7 , behavior : GraphBehavior . SingleObject ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR1 . VAR4 . Single ( ) ) ; Assert . Same ( VAR1 , VAR2 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 , behavior : GraphBehavior . SingleObject ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , behavior : GraphBehavior . SingleObject ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR7 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR7 . VAR8 ) ; Assert . Same ( VAR7 , VAR5 . VAR4 . Single ( ) ) ; Assert . Same ( VAR0 , VAR7 . VAR2 ) ; Assert . Same ( VAR7 , VAR0 . VAR4 . Single ( ) ) ; Assert . Equal ( EntityState . Detached , VAR1 . Entry ( VAR5 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR1 . Entry ( VAR7 ) . State ) ; VAR1 . Attach ( VAR5 , behavior : GraphBehavior . SingleObject ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , behavior : GraphBehavior . SingleObject ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > ( ) ; VAR1 . Attach ( VAR5 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR7 . VAR8 ) ; Assert . Empty ( VAR5 . VAR4 ) ; Assert . Same ( VAR5 , VAR7 . VAR2 ) ; Assert . Empty ( VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR1 . Entry ( VAR5 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR1 . Entry ( VAR7 ) . State ) ; VAR1 . Attach ( VAR7 , behavior : GraphBehavior . SingleObject ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , behavior : GraphBehavior . SingleObject ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > ( ) ; VAR1 . Attach ( VAR7 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR7 . VAR8 ) ; Assert . Empty ( VAR5 . VAR4 ) ; Assert . Same ( VAR0 , VAR7 . VAR2 ) ; Assert . Same ( VAR7 , VAR0 . VAR4 . Single ( ) ) ; Assert . Equal ( EntityState . Detached , VAR1 . Entry ( VAR5 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR1 . Entry ( VAR7 ) . State ) ; VAR1 . Attach ( VAR5 , behavior : GraphBehavior . SingleObject ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Empty ( VAR3 . VAR4 ) ; Assert . Same ( VAR5 , VAR1 . VAR6 ) ; Assert . Same ( VAR1 , VAR5 . VAR4 . Single ( ) ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , behavior : GraphBehavior . SingleObject ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , behavior : GraphBehavior . SingleObject ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR5 , behavior : GraphBehavior . SingleObject ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , behavior : GraphBehavior . SingleObject ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR7 , behavior : GraphBehavior . SingleObject ) ;
VAR0 . Add ( new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } , behavior : GraphBehavior . SingleObject ) ; VAR0 . Add ( ( object ) new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } , behavior : GraphBehavior . SingleObject ) ; VAR0 . AddRange ( new List < Product > { new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } } , behavior : GraphBehavior . SingleObject ) ; VAR0 . AddRange ( new List < object > { new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } } , behavior : GraphBehavior . SingleObject ) ; VAR0 . Attach ( new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } , behavior : GraphBehavior . SingleObject ) ; VAR0 . Attach ( ( object ) new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } , behavior : GraphBehavior . SingleObject ) ; VAR0 . AttachRange ( new List < Product > { new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } } , behavior : GraphBehavior . SingleObject ) ; VAR0 . AttachRange ( new List < object > { new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } } , behavior : GraphBehavior . SingleObject ) ; VAR0 . Update ( new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } , behavior : GraphBehavior . SingleObject ) ; VAR0 . Update ( ( object ) new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } , behavior : GraphBehavior . SingleObject ) ; VAR0 . UpdateRange ( new List < Product > { new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } } , behavior : GraphBehavior . SingleObject ) ; VAR0 . UpdateRange ( new List < object > { new Product { VAR1 = VAR2 ++ , VAR3 = LITERAL } } , behavior : GraphBehavior . SingleObject ) ;
Check . NotNull ( VAR10 , nameof ( VAR10 ) ) ; VAR1 = VAR2 ; VAR3 = VAR4 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR11 = VAR10 ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedRelationalValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedRelationalValueBufferFactoryFactory ( ) ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR3 . VAR4 . Single ( ) ) ; Assert . Same ( VAR3 , VAR1 . VAR5 ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , includeDependents : false ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Empty ( VAR3 . VAR4 ) ; Assert . Same ( VAR3 , VAR1 . VAR5 ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , includeDependents : false ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR1 . VAR4 . Single ( ) ) ; Assert . Null ( VAR2 . VAR5 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 , includeDependents : false ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , includeDependents : false ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR5 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR7 . VAR8 ) ; Assert . Same ( VAR7 , VAR5 . VAR4 . Single ( ) ) ; Assert . Same ( VAR5 , VAR7 . VAR2 ) ; Assert . Empty ( VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR1 . Entry ( VAR5 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR1 . Entry ( VAR7 ) . State ) ; VAR1 . Attach ( VAR7 , includeDependents : false ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR3 . VAR4 . Single ( ) ) ; Assert . Same ( VAR5 , VAR1 . VAR6 ) ; Assert . Same ( VAR1 , VAR5 . VAR4 . Single ( ) ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , includeDependents : false ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , includeDependents : false ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > ( ) ; VAR1 . Attach ( VAR5 , includeDependents : false ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Empty ( VAR1 . VAR4 ) ; Assert . Same ( VAR1 , VAR2 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 , includeDependents : false ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , includeDependents : false ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > ( ) ; VAR1 . Attach ( VAR7 , includeDependents : false ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Empty ( VAR3 . VAR4 ) ; Assert . Same ( VAR5 , VAR1 . VAR6 ) ; Assert . Same ( VAR1 , VAR5 . VAR4 . Single ( ) ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , includeDependents : false ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR1 . VAR4 . Single ( ) ) ; Assert . Null ( VAR2 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 , includeDependents : false ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR3 . VAR4 . Single ( ) ) ; Assert . Same ( VAR5 , VAR1 . VAR6 ) ; Assert . Same ( VAR1 , VAR5 . VAR4 . Single ( ) ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , includeDependents : false ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Same ( VAR0 , VAR2 . VAR3 . Single ( ) ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR5 . Entry ( VAR0 ) . State ) ; VAR5 . Attach ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Same ( VAR0 , VAR2 . VAR3 . Single ( ) ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Detached , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR0 ) . State ) ; VAR5 . Attach ( VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Same ( VAR0 , VAR2 . VAR3 . Single ( ) ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR0 ) . State ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Same ( VAR0 , VAR2 . VAR3 . Single ( ) ) ; Assert . Null ( VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR0 ) . State ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Same ( VAR0 , VAR2 . VAR3 . Single ( ) ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR5 . Entry ( VAR0 ) . State ) ; VAR5 . Entry ( VAR0 ) . State = EntityState . Unchanged ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Empty ( VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Detached , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR0 ) . State ) ; VAR5 . Entry ( VAR2 ) . State = EntityState . Unchanged ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Empty ( VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR0 ) . State ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Same ( VAR0 , VAR2 . VAR3 . Single ( ) ) ; Assert . Null ( VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR0 ) . State ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Same ( VAR0 , VAR2 . VAR3 . Single ( ) ) ; Assert . Same ( VAR5 , VAR0 . VAR4 ) ; Assert . Same ( VAR0 , VAR5 . VAR3 . Single ( ) ) ; Assert . Equal ( EntityState . Unchanged , VAR6 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR6 . Entry ( VAR0 ) . State ) ;
Assert . Equal ( LITERAL , VAR0 . StartValue ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( 1 , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . True ( VAR0 . IsCyclic ) ;
Assert . Equal ( LITERAL , VAR0 . Name ) ; Assert . Equal ( LITERAL , VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( 1 , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . True ( VAR0 . IsCyclic ) ;
VerifySingleton < SqlServerMigrationsAnnotationProvider > ( ) ; VerifyScoped < ISqlServerSequenceValueGeneratorFactory > ( ) ; VerifyScoped < SqlServerModificationCommandBatchFactory > ( ) ; VerifyScoped < SqlServerValueGeneratorSelector > ( ) ; VerifyScoped < SqlServerDatabaseProviderServices > ( ) ; VerifyScoped < SqlServerDatabase > ( ) ; VerifyScoped < ISqlServerConnection > ( ) ; VerifyScoped < SqlServerMigrationsSqlGenerator > ( ) ;
VerifySingleton < SqliteMigrationsAnnotationProvider > ( ) ; VerifySingleton < SqliteConventionSetBuilder > ( ) ; VerifyScoped < SqliteModificationCommandBatchFactory > ( ) ; VerifyScoped < SqliteDatabaseProviderServices > ( ) ; VerifyScoped < SqliteDatabase > ( ) ; VerifyScoped < SqliteDatabaseConnection > ( ) ; VerifyScoped < SqliteMigrationsSqlGenerator > ( ) ;
VAR0 . Sqlite ( ConfigurationSource . Convention ) . Name ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . Name ) ; VAR0 . Sqlite ( ConfigurationSource . DataAnnotation ) . Name ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Sqlite ( ) . Name ) ; VAR0 . Sqlite ( ConfigurationSource . Convention ) . Name ( LITERAL ) ;
AddColumnNameFacetConfiguration ( VAR0 ) ; AddColumnTypeFacetConfiguration ( VAR0 ) ; AddDefaultValueFacetConfiguration ( VAR0 ) ; AddDefaultExpressionFacetConfiguration ( VAR0 ) ; AddValueGeneratedFacetConfiguration ( VAR0 ) ;
Assert . True ( VAR0 . CanAddNavigation ( Order . VAR1 . Name , ConfigurationSource . Explicit ) ) ; Assert . True ( VAR2 . CanAddNavigation ( VAR3 . VAR4 . Name , ConfigurationSource . Convention ) ) ; Assert . Same ( VAR5 , VAR2 . Navigation ( VAR3 . VAR4 . Name , VAR5 . Metadata , pointsToPrincipal : false , configurationSource : ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR2 . CanAddNavigation ( VAR3 . VAR4 . Name , ConfigurationSource . Explicit ) ) ;
VAR0 . AddProperty ( SomeEntity . EnumProperty ) ; VAR0 . AddProperty ( SomeEntity . FooProperty ) ; VAR0 . AddProperty ( SomeEntity . GooProperty ) ; VAR0 . AddProperty ( SomeEntity . IdProperty ) ; VAR0 . AddProperty ( SomeEntity . MaybeEnumProperty ) ;
VAR0 . AddProperty ( SomeEntityWithFields . EnumProperty ) ; VAR0 . AddProperty ( SomeEntityWithFields . FooProperty ) ; VAR0 . AddProperty ( SomeEntityWithFields . GooProperty ) ; VAR0 . AddProperty ( SomeEntityWithFields . IdProperty ) ; VAR0 . AddProperty ( SomeEntityWithFields . MaybeEnumProperty ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR1 . AddForeignKey ( VAR2 , VAR1 . SetPrimaryKey ( VAR0 ) , VAR1 ) ; Assert . Same ( VAR3 , VAR1 . FindReferencingForeignKeys ( ) . Single ( ) ) ;
VAR0 . AddProperty ( A . VAR3 ) ; VAR0 . AddProperty ( A . VAR4 ) ; VAR1 . AddProperty ( B . VAR5 ) ; VAR1 . AddProperty ( B . VAR6 ) ; VAR2 . AddProperty ( C . VAR5 ) ; VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ;
VAR0 . AddProperty ( A . VAR4 ) ; VAR0 . AddProperty ( A . VAR5 ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR1 . BaseType = VAR0 ; var VAR3 = VAR2 . AddEntityType ( typeof ( D ) ) ; VAR3 . AddProperty ( A . VAR4 ) ; VAR3 . AddProperty ( A . VAR5 ) ;
VAR0 . AddProperty ( A . VAR4 ) ; VAR0 . AddProperty ( A . VAR5 ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( C ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( D ) ) ; VAR3 . AddProperty ( A . VAR4 ) ; VAR3 . AddProperty ( A . VAR5 ) ;
var VAR0 = VAR1 . SetPrimaryKey ( VAR1 . AddProperty ( A . VAR4 ) ) ; VAR1 . AddKey ( VAR1 . AddProperty ( A . VAR5 ) ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( B ) ) ; VAR2 . AddProperty ( B . VAR6 ) ;
VAR0 . AddProperty ( A . VAR3 ) ; VAR0 . AddProperty ( A . VAR4 ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . AddProperty ( B . VAR5 ) ;
VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR4 . AddEntityType ( LITERAL ) ; var VAR5 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ;
VAR0 . AddProperty ( VAR1 . VAR2 ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; Assert . False ( VAR0 . GetProperty ( LITERAL ) . IsShadowProperty ) ; Assert . False ( VAR0 . GetProperty ( LITERAL ) . IsShadowProperty ) ; Assert . Null ( VAR0 . GetProperty ( LITERAL ) . IsShadowProperty ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR3 . AddProperty ( LITERAL , typeof ( int ? ) ) ; var VAR4 = VAR3 . GetOrAddForeignKey ( VAR2 , VAR1 . AddKey ( VAR0 ) , VAR1 ) ; var VAR5 = VAR6 . FindReferencingForeignKeys ( VAR1 ) ; Assert . Same ( VAR4 , VAR5 . Single ( ) ) ; Assert . Same ( VAR4 , VAR1 . FindReferencingForeignKeys ( ) . Single ( ) ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ) ; VAR3 . GetOrAddForeignKey ( VAR3 . AddProperty ( C . VAR4 ) , VAR0 . GetPrimaryKey ( ) , VAR0 ) ; VAR0 . GetOrAddForeignKey ( VAR0 . AddProperty ( A . VAR4 ) , VAR1 . GetPrimaryKey ( ) , VAR1 ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ) ; VAR0 . GetOrAddForeignKey ( VAR0 . AddProperty ( A . VAR4 ) , VAR1 . GetPrimaryKey ( ) , VAR1 ) ; VAR1 . GetOrAddForeignKey ( VAR1 . AddProperty ( B . VAR4 ) , VAR3 . GetPrimaryKey ( ) , VAR3 ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ) ; VAR1 . GetOrAddForeignKey ( VAR1 . AddProperty ( B . VAR4 ) , VAR0 . GetPrimaryKey ( ) , VAR0 ) ; VAR3 . GetOrAddForeignKey ( VAR3 . AddProperty ( C . VAR4 ) , VAR0 . GetPrimaryKey ( ) , VAR0 ) ; VAR1 . GetOrAddForeignKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) ) , VAR3 . GetPrimaryKey ( ) , VAR3 ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ) ; VAR0 . GetOrAddForeignKey ( VAR0 . AddProperty ( A . VAR4 ) , VAR1 . GetPrimaryKey ( ) , VAR1 ) ; VAR1 . GetOrAddForeignKey ( VAR1 . AddProperty ( B . VAR4 ) , VAR0 . GetPrimaryKey ( ) , VAR0 ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ) ; VAR0 . GetOrAddForeignKey ( VAR0 . AddProperty ( A . VAR4 ) , VAR1 . GetPrimaryKey ( ) , VAR1 ) ; VAR1 . GetOrAddForeignKey ( VAR1 . AddProperty ( B . VAR4 ) , VAR3 . GetPrimaryKey ( ) , VAR3 ) ; VAR3 . GetOrAddForeignKey ( VAR3 . AddProperty ( C . VAR4 ) , VAR0 . GetPrimaryKey ( ) , VAR0 ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ) ; VAR1 . GetOrAddForeignKey ( VAR1 . AddProperty ( B . VAR4 ) , VAR3 . GetPrimaryKey ( ) , VAR3 ) ; VAR3 . GetOrAddForeignKey ( VAR3 . AddProperty ( C . VAR4 ) , VAR1 . GetPrimaryKey ( ) , VAR1 ) ; VAR0 . GetOrAddForeignKey ( VAR0 . AddProperty ( A . VAR4 ) , VAR3 . GetPrimaryKey ( ) , VAR3 ) ;
VerifyScoped < IMigrator > ( ) ; VerifyScoped < IMigrationAssembly > ( ) ; VerifyScoped < RelationalQueryContextFactory > ( ) ; VerifyScoped < BatchExecutor > ( ) ; VerifyScoped < ModelDiffer > ( ) ; VerifyScoped < RelationalValueGeneratorSelector > ( ) ; VerifyScoped < RelationalSqlExecutor > ( ) ; VerifyScoped < SqlStatementExecutor > ( ) ; VerifyScoped < CommandBatchPreparer > ( ) ; VerifyScoped < RelationalModelValidator > ( ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ;
Assert . Equal ( SqlServerAnnotationNames . DefaultHiLoSequenceName , VAR0 . HiLoSequenceName ) ; Assert . Null ( VAR0 . HiLoSequenceSchema ) ; Assert . Null ( VAR1 . FindSequence ( SqlServerAnnotationNames . DefaultHiLoSequenceName ) ) ; Assert . NotNull ( VAR0 . FindSequence ( SqlServerAnnotationNames . DefaultHiLoSequenceName ) ) ;
Assert . Equal ( SqlServerAnnotationNames . DefaultHiLoSequenceName , VAR0 . HiLoSequenceName ) ; Assert . Null ( VAR0 . HiLoSequenceSchema ) ; Assert . Null ( VAR1 . FindSequence ( SqlServerAnnotationNames . DefaultHiLoSequenceName ) ) ; Assert . NotNull ( VAR0 . FindSequence ( SqlServerAnnotationNames . DefaultHiLoSequenceName ) ) ;
VAR0 . Model . SqlServer ( ) . GetOrAddSequence ( LITERAL ) ; VAR1 . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR1 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ;
VAR0 . Model . SqlServer ( ) . GetOrAddSequence ( LITERAL ) ; VAR0 . Model . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; VAR1 . SqlServer ( ) . HiLoSequenceName = LITERAL ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ;
VAR0 . Model . SqlServer ( ) . GetOrAddSequence ( LITERAL ) ; VAR0 . Model . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR1 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ;
VAR0 . Model . SqlServer ( ) . GetOrAddSequence ( LITERAL ) ; VAR0 . Model . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; VAR0 . Model . SqlServer ( ) . HiLoSequenceName = LITERAL ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ;
VAR0 . Model . SqlServer ( ) . GetOrAddSequence ( LITERAL , LITERAL ) ; VAR0 . Model . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; VAR1 . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR1 . SqlServer ( ) . HiLoSequenceSchema = LITERAL ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . FindHiLoSequence ( ) . Schema ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) . Schema ) ;
VAR0 . Model . SqlServer ( ) . GetOrAddSequence ( LITERAL , LITERAL ) ; VAR0 . Model . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; VAR0 . Model . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR0 . Model . SqlServer ( ) . HiLoSequenceSchema = LITERAL ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . FindHiLoSequence ( ) . Schema ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . FindHiLoSequence ( ) . Schema ) ;
Assert . Null ( VAR0 . FindSequence ( LITERAL ) ) ; Assert . Null ( ( ( IModel ) VAR1 ) . Relational ( ) . FindSequence ( LITERAL ) ) ; var VAR2 = VAR0 . GetOrAddSequence ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . FindSequence ( LITERAL ) . VAR3 ) ; Assert . Equal ( LITERAL , ( ( IModel ) VAR1 ) . Relational ( ) . FindSequence ( LITERAL ) . VAR3 ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedValueBufferFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedValueBufferFactoryFactory ( ) ) ;
Assert . Same ( typeof ( long ) , VAR0 . ClrType ) ; VAR1 . SqlServer ( ) . AddOrReplaceSequence ( new Sequence ( LITERAL , null , LITERAL , LITERAL , LITERAL , LITERAL , typeof ( int ) ) ) ; Assert . Null ( VAR1 . Relational ( ) . TryGetSequence ( LITERAL ) ) ; VAR0 = VAR1 . SqlServer ( ) . GetOrAddSequence ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Null ( VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( LITERAL , VAR0 . StartValue ) ; Assert . Equal ( LITERAL , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . Same ( typeof ( int ) , VAR0 . ClrType ) ;
Assert . Same ( typeof ( long ) , VAR0 . ClrType ) ; VAR1 . SqlServer ( ) . AddOrReplaceSequence ( new Sequence ( LITERAL , null , LITERAL , LITERAL , LITERAL , LITERAL , typeof ( int ) ) ) ; Assert . Null ( VAR1 . Relational ( ) . TryGetSequence ( LITERAL ) ) ; VAR0 = VAR1 . SqlServer ( ) . TryGetSequence ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Null ( VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( LITERAL , VAR0 . StartValue ) ; Assert . Equal ( LITERAL , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . Same ( typeof ( int ) , VAR0 . ClrType ) ;
Assert . Same ( typeof ( long ) , VAR0 . ClrType ) ; VAR1 . SqlServer ( ) . AddOrReplaceSequence ( new Sequence ( LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , typeof ( int ) ) ) ; Assert . Null ( VAR1 . Relational ( ) . TryGetSequence ( LITERAL , LITERAL ) ) ; VAR0 = VAR1 . SqlServer ( ) . TryGetSequence ( LITERAL , LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( LITERAL , VAR0 . StartValue ) ; Assert . Equal ( LITERAL , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . Same ( typeof ( int ) , VAR0 . ClrType ) ;
var VAR4 = SetupInitialServices ( ) ; var VAR1 = new InMemoryCommandLogger ( LITERAL ) ; VAR4 . AddScoped ( typeof ( ILogger ) , VAR5 => VAR1 ) ; var VAR2 = new InMemoryFileService ( ) ; VAR4 . AddScoped ( typeof ( IFileService ) , VAR5 => VAR2 ) ; var VAR3 = GetMetadataModelProvider ( VAR4 ) ;
var VAR4 = SetupInitialServices ( ) ; var VAR1 = new InMemoryCommandLogger ( LITERAL ) ; VAR4 . AddScoped ( typeof ( ILogger ) , VAR5 => VAR1 ) ; var VAR2 = new InMemoryFileService ( ) ; VAR4 . AddScoped ( typeof ( IFileService ) , VAR5 => VAR2 ) ; InitializeCustomizedTemplates ( VAR2 ) ; var VAR3 = GetMetadataModelProvider ( VAR4 ) ;
var VAR9 = VAR1 . Schema ; var VAR2 = VAR1 . ColumnModifications ; var VAR3 = VAR2 . Where ( VAR4 => VAR4 . IsWrite ) . ToArray ( ) ; var VAR5 = VAR2 . Where ( VAR4 => VAR4 . IsCondition ) . ToArray ( ) ; var VAR6 = VAR2 . Where ( VAR4 => VAR4 . IsRead ) . ToArray ( ) ; AppendUpdateCommand ( VAR7 , VAR8 , VAR9 , VAR3 , VAR5 ) ;
var VAR9 = VAR1 . Schema ; var VAR2 = VAR1 . ColumnModifications ; var VAR3 = VAR2 . Where ( VAR4 => VAR4 . IsWrite ) . ToArray ( ) ; var VAR5 = VAR2 . Where ( VAR4 => VAR4 . IsCondition ) . ToArray ( ) ; var VAR6 = VAR2 . Where ( VAR4 => VAR4 . IsRead ) . ToArray ( ) ; AppendUpdateCommandHeader ( VAR7 , VAR8 , VAR9 , VAR3 ) ;
Assert . Same ( typeof ( long ) , VAR0 . ClrType ) ; VAR1 . AddOrReplaceSequence ( new Sequence ( LITERAL , null , LITERAL , LITERAL , LITERAL , LITERAL , typeof ( int ) ) ) ; VAR0 = VAR1 . GetOrAddSequence ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Null ( VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( LITERAL , VAR0 . StartValue ) ; Assert . Equal ( LITERAL , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . Same ( typeof ( int ) , VAR0 . ClrType ) ;
VAR0 . Relational ( ) . ColumnName = LITERAL ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . Relational ( ) . ColumnName = LITERAL ;
var VAR3 = VAR1 . AddEntityType ( typeof ( C ) ) ; VAR3 . BaseType = VAR2 ; var VAR4 = VAR1 . AddEntityType ( typeof ( D ) ) ; VAR4 . BaseType = VAR3 ; VAR4 . AddProperty ( LITERAL , typeof ( string ) ) ;
Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . ColumnName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . ColumnName ) ; VAR0 . Relational ( ) . ColumnName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . ColumnName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . ColumnName ) ; VAR0 . Sqlite ( ) . ColumnName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . ColumnName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . ColumnName ) ; VAR0 . Sqlite ( ) . ColumnName = null ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . ColumnName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . ColumnName ) ;
Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . TableName ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Sqlite ( ) . TableName ) ; VAR0 . Relational ( ) . TableName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . TableName ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Sqlite ( ) . TableName ) ; VAR0 . Sqlite ( ) . TableName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . TableName ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Sqlite ( ) . TableName ) ; VAR0 . Sqlite ( ) . TableName = null ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . TableName ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Sqlite ( ) . TableName ) ;
Assert . Same ( VAR3 , VAR0 . Navigation ( Order . VAR1 . VAR2 , VAR3 . Metadata , pointsToPrincipal : true , configurationSource : ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR0 . CanAddNavigation ( Order . VAR1 . VAR2 , ConfigurationSource . Explicit ) ) ; Assert . True ( VAR4 . CanAddNavigation ( VAR5 . VAR6 . VAR2 , ConfigurationSource . Convention ) ) ; Assert . Same ( VAR3 , VAR4 . Navigation ( VAR5 . VAR6 . VAR2 , VAR3 . Metadata , pointsToPrincipal : false , configurationSource : ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR4 . CanAddNavigation ( VAR5 . VAR6 . VAR2 , ConfigurationSource . Explicit ) ) ; Assert . Same ( VAR3 , VAR0 . Navigation ( Order . VAR1 . VAR2 , VAR3 . Metadata , pointsToPrincipal : true , configurationSource : ConfigurationSource . Convention ) ) ; Assert . Same ( VAR3 , VAR4 . Navigation ( VAR5 . VAR6 . VAR2 , VAR3 . Metadata , pointsToPrincipal : false , configurationSource : ConfigurationSource . DataAnnotation ) ) ;
Assert . Same ( VAR3 , VAR0 . Navigation ( Order . VAR1 . VAR2 , VAR3 . Metadata , pointsToPrincipal : true , configurationSource : ConfigurationSource . DataAnnotation ) ) ; Assert . Same ( VAR3 , VAR4 . Navigation ( VAR5 . VAR6 . VAR2 , VAR3 . Metadata , pointsToPrincipal : false , configurationSource : ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . Ignore ( Order . VAR1 . VAR2 , ConfigurationSource . Explicit ) ) ; Assert . True ( VAR4 . Ignore ( VAR5 . VAR6 . VAR2 , ConfigurationSource . Explicit ) ) ; Assert . Null ( VAR0 . Metadata . FindNavigation ( Order . VAR1 . VAR2 ) ) ; Assert . Null ( VAR4 . Metadata . FindNavigation ( VAR5 . VAR6 . VAR2 ) ) ; Assert . True ( VAR0 . Ignore ( Order . VAR1 . VAR2 , ConfigurationSource . Convention ) ) ; Assert . True ( VAR4 . Ignore ( VAR5 . VAR6 . VAR2 , ConfigurationSource . Convention ) ) ; Assert . Empty ( VAR0 . Metadata . GetForeignKeys ( ) ) ; VAR3 = VAR0 . ForeignKey ( typeof ( VAR5 ) . FullName , new [ ] { Order . VAR7 . VAR2 , Order . VAR8 . VAR2 } , ConfigurationSource . DataAnnotation ) ; Assert . Null ( VAR0 . Navigation ( Order . VAR1 . VAR2 , VAR3 . Metadata , pointsToPrincipal : true , configurationSource : ConfigurationSource . DataAnnotation ) ) ; Assert . Null ( VAR4 . Navigation ( VAR5 . VAR6 . VAR2 , VAR3 . Metadata , pointsToPrincipal : false , configurationSource : ConfigurationSource . DataAnnotation ) ) ;
Assert . Same ( VAR4 , VAR0 . Navigation ( VAR1 . VAR2 . VAR3 , VAR4 . Metadata , pointsToPrincipal : false , configurationSource : ConfigurationSource . Convention ) ) ; Assert . Same ( VAR4 , VAR5 . Navigation ( Order . VAR6 . VAR3 , VAR4 . Metadata , pointsToPrincipal : true , configurationSource : ConfigurationSource . DataAnnotation ) ) ; var VAR7 = VAR5 . ForeignKey ( typeof ( VAR1 ) . FullName , new [ ] { Order . VAR8 . VAR3 , Order . VAR9 . VAR3 } , ConfigurationSource . Convention ) ; Assert . Null ( VAR5 . Navigation ( Order . VAR6 . VAR3 , VAR7 . Metadata , pointsToPrincipal : true , configurationSource : ConfigurationSource . Convention ) ) ; Assert . Equal ( VAR1 . VAR2 . VAR3 , VAR4 . Metadata . PrincipalToDependent . VAR3 ) ; Assert . Equal ( Order . VAR6 . VAR3 , VAR4 . Metadata . DependentToPrincipal . VAR3 ) ; Assert . Null ( VAR7 . Metadata . PrincipalToDependent ) ; Assert . Null ( VAR7 . Metadata . DependentToPrincipal ) ;
Assert . Null ( VAR0 . IsNullable ) ; Assert . False ( VAR1 . IsNullable . Value ) ; VAR2 = VAR2 . Required ( false , ConfigurationSource . Explicit ) ; Assert . NotNull ( VAR2 ) ; VAR3 = VAR2 . Metadata ; Assert . False ( VAR3 . IsRequired ) ; Assert . Null ( VAR0 . IsNullable ) ;
var VAR12 = VAR4 . ForeignKey . PrincipalKey . Properties [ VAR2 ] ; var VAR3 = VAR4 . ForeignKey . Properties [ VAR2 ] ; var VAR5 = BuildColumnExpression ( VAR6 , VAR7 , VAR3 , VAR8 ) ; var VAR9 = BuildColumnExpression ( VAR10 , VAR11 , VAR12 , VAR8 ) ;
Assert . Equal ( 1 , VAR0 . IncrementBy ) ; Assert . Equal ( 1 , VAR0 . StartValue ) ; Assert . Null ( VAR0 . MinValue ) ; Assert . Null ( VAR0 . MaxValue ) ; Assert . Same ( typeof ( long ) , VAR0 . Type ) ; VAR1 . AddOrReplaceSequence ( new Sequence ( LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , LITERAL , typeof ( int ) ) ) ; VAR0 = VAR1 . GetOrAddSequence ( LITERAL , LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( LITERAL , VAR0 . StartValue ) ; Assert . Equal ( LITERAL , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . Same ( typeof ( int ) , VAR0 . Type ) ;
Assert . Null ( VAR0 . Schema ) ; Assert . Equal ( 1 , VAR0 . IncrementBy ) ; Assert . Equal ( 1 , VAR0 . StartValue ) ; Assert . Null ( VAR0 . MinValue ) ; Assert . Null ( VAR0 . MaxValue ) ; Assert . Same ( typeof ( long ) , VAR0 . Type ) ;
Assert . Null ( VAR0 . SqlServer ( ) . HiLoSequenceName ) ; Assert . Null ( ( ( IModel ) VAR0 ) . SqlServer ( ) . HiLoSequenceName ) ; VAR0 . SqlServer ( ) . HiLoSequenceName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . HiLoSequenceName ) ; Assert . Equal ( LITERAL , ( ( IModel ) VAR0 ) . SqlServer ( ) . HiLoSequenceName ) ; VAR0 . SqlServer ( ) . HiLoSequenceName = null ; Assert . Null ( VAR0 . SqlServer ( ) . HiLoSequenceName ) ; Assert . Null ( ( ( IModel ) VAR0 ) . SqlServer ( ) . HiLoSequenceName ) ;
Assert . Null ( VAR0 . SqlServer ( ) . HiLoSequenceName ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . HiLoSequenceName ) ; VAR0 . SqlServer ( ) . HiLoSequenceName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . HiLoSequenceName ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . SqlServer ( ) . HiLoSequenceName ) ; VAR0 . SqlServer ( ) . HiLoSequenceName = null ; Assert . Null ( VAR0 . SqlServer ( ) . HiLoSequenceName ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . HiLoSequenceName ) ;
Assert . Null ( VAR0 . SqlServer ( ) . HiLoSequenceSchema ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . HiLoSequenceSchema ) ; VAR0 . SqlServer ( ) . HiLoSequenceSchema = LITERAL ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . HiLoSequenceSchema ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . SqlServer ( ) . HiLoSequenceSchema ) ; VAR0 . SqlServer ( ) . HiLoSequenceSchema = null ; Assert . Null ( VAR0 . SqlServer ( ) . HiLoSequenceSchema ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . HiLoSequenceSchema ) ;
VAR0 . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR0 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR1 ) ;
VAR0 . Model . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR1 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR2 ) ;
VAR0 . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR0 . SqlServer ( ) . HiLoSequenceSchema = LITERAL ; VAR0 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR1 ) ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . TryGetHiLoSequence ( ) . Schema ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . SqlServer ( ) . TryGetHiLoSequence ( ) . Schema ) ;
VAR0 . Model . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR0 . Model . SqlServer ( ) . HiLoSequenceSchema = LITERAL ; VAR1 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . TryGetHiLoSequence ( ) . Schema ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . TryGetHiLoSequence ( ) . Schema ) ;
VAR0 . Model . SqlServer ( ) . HiLoSequenceName = LITERAL ; VAR0 . Model . SqlServer ( ) . HiLoSequenceSchema = LITERAL ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . TryGetHiLoSequence ( ) . VAR2 ) ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . TryGetHiLoSequence ( ) . Schema ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR1 ) . SqlServer ( ) . TryGetHiLoSequence ( ) . Schema ) ;
VAR0 . RequiresValueGenerator = true ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeDependentEntity ) ) ; var VAR4 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . GetOrSetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ; var VAR6 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR2 . GetOrAddForeignKey ( new [ ] { VAR6 } , VAR1 . GetPrimaryKey ( ) ) ; var VAR7 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR7 . RequiresValueGenerator = true ;
Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Null ( VAR1 . ValueGenerated ) ; var VAR2 = VAR3 . PrimaryKey ( new List < string > { LITERAL } , ConfigurationSource . Convention ) ; Assert . Same ( VAR2 , new KeyConvention ( ) . Apply ( VAR2 ) ) ; Assert . Null ( VAR0 . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR1 . ValueGenerated ) ;
VAR0 . Property ( typeof ( int ) , LITERAL , ConfigurationSource . Convention ) . ValueGenerated ( ValueGenerated . Never , ConfigurationSource . Explicit ) ; var VAR1 = VAR0 . PrimaryKey ( new List < string > { LITERAL } , ConfigurationSource . Convention ) ; Assert . Same ( VAR1 , new KeyConvention ( ) . Apply ( VAR1 ) ) ; var VAR2 = VAR1 . Metadata . Properties . First ( ) ; Assert . Equal ( ValueGenerated . Never , VAR2 . ValueGenerated ) ;
Assert . Null ( VAR0 . ValueGenerated ) ; VAR1 . RemoveRelationship ( VAR2 . Metadata , ConfigurationSource . Convention ) ; Assert . Same ( VAR3 , new KeyConvention ( ) . Apply ( VAR3 ) ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ;
VAR0 . ValueGenerated ( ValueGenerated . Never , ConfigurationSource . Explicit ) ; VAR0 . ConcurrencyToken ( false , ConfigurationSource . Explicit ) ; new TimestampAttributeConvention ( ) . Apply ( VAR0 ) ; Assert . Equal ( ValueGenerated . Never , VAR0 . Metadata . ValueGenerated ) ;
VAR0 . Property ( VAR1 => VAR1 . Id ) . Metadata . RequiresValueGenerator = false ; VAR0 . Property ( VAR1 => VAR1 . Up ) . Metadata . RequiresValueGenerator = true ; VAR0 . Property ( VAR1 => VAR1 . Down ) . Metadata . RequiresValueGenerator = true ; VAR0 . Property < int > ( LITERAL ) . Metadata . RequiresValueGenerator = true ; VAR0 . Property < string > ( LITERAL ) . Metadata . RequiresValueGenerator = false ; VAR0 . Property < int > ( LITERAL ) . Metadata . RequiresValueGenerator = true ; VAR0 . Property < string > ( LITERAL ) . Metadata . RequiresValueGenerator = false ;
Assert . Equal ( ValueGenerated . OnAdd , VAR0 . GetProperty ( Customer . IdProperty . Name ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAddOrUpdate , VAR0 . GetProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . Never , VAR0 . GetProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . GetProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . Never , VAR0 . GetProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . OnAddOrUpdate , VAR0 . GetProperty ( LITERAL ) . ValueGenerated ) ; Assert . Equal ( ValueGenerated . Never , VAR0 . GetProperty ( LITERAL ) . ValueGenerated ) ;
VAR0 . Entity < NullSemanticsEntity1 > ( ) . Property ( VAR1 => VAR1 . Id ) . ValueGeneratedNever ( ) ; VAR0 . Entity < NullSemanticsEntity1 > ( ) . Property ( VAR1 => VAR1 . StringA ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity1 > ( ) . Property ( VAR1 => VAR1 . StringB ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity1 > ( ) . Property ( VAR1 => VAR1 . StringC ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity2 > ( ) . Property ( VAR1 => VAR1 . Id ) . ValueGeneratedNever ( ) ; VAR0 . Entity < NullSemanticsEntity2 > ( ) . Property ( VAR1 => VAR1 . StringA ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity2 > ( ) . Property ( VAR1 => VAR1 . StringB ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity2 > ( ) . Property ( VAR1 => VAR1 . StringC ) . Required ( ) ;
VAR0 . ValueGenerated = VAR1 ? ValueGenerated . OnAdd : ValueGenerated . Never ; VAR0 . Relational ( ) . Column = LITERAL ; VAR2 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR3 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR3 . IsConcurrencyToken = VAR4 ; VAR3 . Relational ( ) . Column = LITERAL ; VAR3 . ValueGenerated = VAR4 ? ValueGenerated . OnAddOrUpdate : ValueGenerated . Never ;
VAR0 . ValueGenerated = VAR1 ? ValueGenerated . OnAdd : ValueGenerated . Never ; VAR0 . Relational ( ) . Column = LITERAL ; VAR2 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR3 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR3 . Relational ( ) . Column = LITERAL ; VAR3 . ValueGenerated = VAR4 ? ValueGenerated . OnAddOrUpdate : ValueGenerated . Never ;
Assert . Null ( VAR0 . RequiresValueGenerator ) ; Assert . False ( ( ( IProperty ) VAR0 ) . RequiresValueGenerator ) ; VAR0 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo , VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo , ( ( IProperty ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( VAR0 . RequiresValueGenerator ) ;
Assert . Null ( VAR0 . RequiresValueGenerator ) ; VAR0 . SqlServer ( ) . IdentityStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( VAR0 . RequiresValueGenerator ) ;
VAR0 . GetOrAddForeignKey ( VAR1 , VAR0 . GetPrimaryKey ( ) , VAR0 ) ; VAR0 = VAR2 . AddEntityType ( typeof ( Kiwi ) ) ; VAR3 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR1 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . GetOrSetPrimaryKey ( VAR3 ) ; VAR0 . GetOrAddForeignKey ( VAR1 , VAR0 . GetPrimaryKey ( ) , VAR0 ) ;
var VAR0 = VAR1 . AddForeignKey ( VAR2 , VAR3 , VAR9 ) ; var VAR4 = new EntityType ( LITERAL , VAR5 ) ; var VAR6 = VAR4 . AddProperty ( LITERAL , typeof ( int ) , true ) ; var VAR7 = VAR4 . AddForeignKey ( VAR6 , VAR8 , VAR1 ) ;
var VAR0 = VAR1 . AddForeignKey ( VAR2 , VAR3 , VAR12 ) ; var VAR4 = VAR1 . AddForeignKey ( new [ ] { VAR5 , VAR2 } , VAR6 , VAR13 ) ; var VAR7 = new EntityType ( LITERAL , VAR8 ) ; var VAR9 = VAR7 . AddProperty ( LITERAL , typeof ( int ) , true ) ; var VAR10 = VAR7 . AddForeignKey ( VAR9 , VAR11 , VAR1 ) ;
VAR0 ? . DeclaringEntityType . RemoveNavigation ( VAR0 ) ; VAR1 . RemoveNavigation ( VAR2 ) ; var VAR3 = VAR2 . ForeignKey ; VAR3 . DeclaringEntityType . RemoveForeignKey ( VAR3 ) ;
VAR0 . RequiresValueGenerator = true ; var VAR1 = VAR2 . SetPrimaryKey ( VAR0 ) ; VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ; var VAR3 = VAR4 . AddEntityType ( typeof ( Animal ) ) ; var VAR5 = VAR3 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR5 . RequiresValueGenerator = true ;
VAR0 . Entity < Chassis > ( ) . ToTable ( LITERAL ) ; VAR0 . Entity < Team > ( ) . ToTable ( LITERAL ) . Property ( VAR1 => VAR1 . Id ) . StoreGeneratedPattern ( StoreGeneratedPattern . None ) ; VAR0 . Entity < Driver > ( ) . ToTable ( LITERAL ) ; VAR0 . Entity < Engine > ( ) . ToTable ( LITERAL ) ; VAR0 . Entity < EngineSupplier > ( ) . ToTable ( LITERAL ) ; VAR0 . Entity < Gearbox > ( ) . ToTable ( LITERAL ) ; VAR0 . Entity < Sponsor > ( ) . ToTable ( LITERAL ) ; VAR0 . Entity < TestDriver > ( ) . ToTable ( LITERAL ) ; VAR0 . Entity < TitleSponsor > ( ) . ToTable ( LITERAL ) ;
var VAR8 = VAR1 . TableName ; var VAR2 = VAR1 . SchemaName ; var VAR3 = VAR1 . ColumnModifications ; var VAR4 = VAR3 . Where ( VAR5 => VAR5 . IsWrite ) . ToArray ( ) ; var VAR6 = VAR3 . Where ( VAR5 => VAR5 . IsRead ) . ToArray ( ) ; AppendInsertCommand ( VAR7 , VAR8 , VAR2 , VAR4 ) ;
Assert . Null ( VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( ( ( IModel ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ; VAR0 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo , VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo , ( ( IModel ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ; VAR0 . SqlServer ( ) . IdentityStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( ( ( IModel ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ;
VAR0 . Model . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . IdentityColumn ; Assert . Null ( VAR1 . SqlServer ( ) . TryGetSequence ( ) ) ; Assert . Null ( ( ( IProperty ) VAR1 ) . SqlServer ( ) . TryGetSequence ( ) ) ; VAR0 . Model . SqlServer ( ) . IdentityStrategy = null ; VAR1 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . IdentityColumn ; Assert . Null ( VAR1 . SqlServer ( ) . TryGetSequence ( ) ) ; Assert . Null ( ( ( IProperty ) VAR1 ) . SqlServer ( ) . TryGetSequence ( ) ) ;
var VAR0 = new ServiceCollection ( ) . AddInstance ( VAR1 . Object ) . AddInstance ( VAR2 . Object ) . AddInstance ( VAR3 . Object ) . AddInstance ( VAR4 . Object ) . AddInstance ( VAR5 . Object ) . AddInstance ( VAR6 . Object ) . AddInstance ( VAR7 . Object ) . AddScoped < FakeRelationalDatabase > ( ) ; var VAR8 = RelationalTestHelpers . Instance . CreateContextServices ( VAR0 ) ; var VAR10 = VAR8 . GetRequiredService < FakeRelationalDatabase > ( ) ;
var VAR0 = new ServiceCollection ( ) . AddInstance ( VAR1 . Object ) . AddInstance ( VAR2 . Object ) . AddInstance ( VAR3 . Object ) . AddInstance ( VAR4 . Object ) . AddInstance ( VAR5 . Object ) . AddInstance ( VAR6 . Object ) . AddInstance ( VAR7 . Object ) . AddScoped < FakeRelationalDatabase > ( ) ; var VAR8 = RelationalTestHelpers . Instance . CreateContextServices ( VAR0 ) ; var VAR13 = VAR8 . GetRequiredService < FakeRelationalDatabase > ( ) ; var VAR10 = new List < InternalEntityEntry > ( ) ; var VAR11 = new CancellationTokenSource ( ) . Token ; await VAR13 . SaveChangesAsync ( VAR10 , VAR11 ) ; VAR2 . Verify ( VAR12 => VAR12 . BatchCommands ( VAR10 , VAR13 . DbContextOptions ) ) ;
VerifyScoped < IDatabaseProviderServices > ( ) ; VerifyScoped < IDatabase > ( ) ; VerifyScoped < IQueryContextFactory > ( ) ; VerifyScoped < IDatabaseConnection > ( ) ; VerifyScoped < IValueGeneratorSelector > ( ) ; VerifyScoped < IDatabaseCreator > ( ) ; VerifyOptionalScoped < IConventionSetBuilder > ( ) ; VerifyScoped < IValueGeneratorCache > ( ) ; VerifyScoped < IModelSource > ( ) ; VerifyScoped < IModelValidator > ( ) ; VerifySingleton < IDatabaseProvider > ( VAR0 : true ) ;
VAR0 . AddEntityFramework ( ) . AddInMemoryDatabase ( ) ; var VAR1 = VAR0 . BuildServiceProvider ( ) ; var VAR2 = new DbContextOptionsBuilder ( ) ; VAR2 . UseInMemoryDatabase ( ) ;
var VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 , VAR2 : false ) , VAR3 ) ; Assert . True ( VAR0 . EnsureCreated ( ) ) ; Assert . False ( VAR0 . EnsureCreated ( ) ) ; Assert . False ( VAR0 . EnsureCreated ( ) ) ; VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 , VAR2 : false ) , VAR3 ) ;
var VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 , VAR2 : true ) , VAR3 ) ; Assert . True ( await VAR0 . EnsureCreatedAsync ( ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ; VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 , VAR2 : true ) , VAR3 ) ;
var VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 , VAR2 : false ) , VAR3 ) ; Assert . True ( await VAR0 . EnsureCreatedAsync ( ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ; VAR0 = new InMemoryDatabaseCreator ( CreateStore ( VAR1 , VAR2 : false ) , VAR3 ) ;
var VAR6 = VAR1 . GetRequiredService < IInMemoryDatabase > ( ) ; await VAR6 . SaveChangesAsync ( new [ ] { VAR2 } ) ; VAR3 . VAR4 = LITERAL ; VAR2 . SetEntityState ( EntityState . Modified ) ; await VAR6 . SaveChangesAsync ( new [ ] { VAR2 } ) ; Assert . Equal ( 1 , VAR6 . Store . SelectMany ( VAR5 => VAR5 ) . Count ( ) ) ; Assert . Equal ( new object [  ] { LITERAL , LITERAL } , VAR6 . Store . Single ( ) . Single ( ) ) ;
VerifySingleton < IInMemoryStore > ( ) ; VerifySingleton < InMemoryModelSource > ( ) ; VerifyScoped < InMemoryValueGeneratorSelector > ( ) ; VerifyScoped < InMemoryQueryContextFactory > ( ) ; VerifyScoped < InMemoryDatabaseProviderServices > ( ) ; VerifyScoped < IInMemoryDatabase > ( ) ; VerifyScoped < InMemoryConnection > ( ) ; VerifyScoped < InMemoryDatabaseCreator > ( ) ;
VerifyScoped < SqlServerDatabaseProviderServices > ( ) ; VerifyScoped < SqlServerDatabase > ( ) ; VerifyScoped < ISqlServerConnection > ( ) ; VerifyScoped < SqlServerModelDiffer > ( ) ; VerifyScoped < SqlServerMigrationSqlGenerator > ( ) ; VerifyScoped < SqlServerDatabaseCreator > ( ) ;
Assert . Equal ( ConnectionState . Closed , VAR0 . Database . GetDbConnection ( ) . State ) ; Assert . False ( VAR1 ? await VAR2 . ExistsAsync ( ) : VAR2 . Exists ( ) ) ; Assert . Equal ( ConnectionState . Closed , VAR0 . Database . GetDbConnection ( ) . State ) ;
var VAR0 = VAR1 . Database . GetRelationalConnection ( ) ; var VAR2 = VAR3 . Build ( VAR0 , new Dictionary < string , object > ( ) ) ; Assert . Equal ( LITERAL , VAR2 . CommandTimeout ) ; VAR1 . Database . GetRelationalConnection ( ) . CommandTimeout = LITERAL ;
VAR0 . Database . GetRelationalConnection ( ) . CommandTimeout = LITERAL ; var VAR1 = VAR0 . Database . GetRelationalConnection ( ) ; var VAR2 = VAR3 . Build ( VAR1 , new Dictionary < string , object > ( ) ) ; Assert . Equal ( LITERAL , VAR2 . CommandTimeout ) ; VAR0 . Database . GetRelationalConnection ( ) . CommandTimeout = LITERAL ; VAR1 = VAR0 . Database . GetRelationalConnection ( ) ;
Assert . Equal ( ConnectionState . Closed , VAR0 . Database . GetRelationalConnection ( ) . DbConnection . State ) ; Assert . False ( VAR1 ? await VAR2 . ExistsAsync ( ) : VAR2 . Exists ( ) ) ; Assert . Equal ( ConnectionState . Closed , VAR0 . Database . GetRelationalConnection ( ) . DbConnection . State ) ;
VAR0 . Entity < VAR1 > ( ) . Property ( VAR2 => VAR2 . VAR3 ) . DefaultValueSql ( LITERAL ) ; var VAR4 = VAR0 . Model . GetEntityType ( typeof ( VAR1 ) ) . GetProperty ( LITERAL ) ; Assert . Equal ( LITERAL , VAR4 . Relational ( ) . DefaultValueSql ) ;
Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = null ; Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ;
VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . AlternateKey ( LITERAL ) . KeyName ( LITERAL ) ;
VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Reference ( LITERAL ) . InverseCollection ( ) . ForeignKey ( LITERAL ) . ConstraintName ( LITERAL ) ;
VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . AlternateKey ( LITERAL ) . ForSqlServer ( ) . KeyName ( LITERAL ) ;
VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Reference ( LITERAL ) . InverseCollection ( ) . ForeignKey ( LITERAL ) . ForSqlServer ( ) . ConstraintName ( LITERAL ) ;
VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Index ( LITERAL ) . ForSqlServer ( ) . IndexName ( LITERAL ) ;
VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Index ( LITERAL ) . ForSqlServer ( ) . IndexName ( LITERAL ) ;
VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Index ( LITERAL ) . ForSqlServer ( ) . IndexName ( LITERAL ) ;
Assert . Null ( VAR0 . Sqlite ( ) . DefaultValueSql ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . Sqlite ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . DefaultValueSql ) ; VAR0 . Sqlite ( ) . DefaultValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . DefaultValueSql ) ; VAR0 . Sqlite ( ) . DefaultValueSql = null ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . DefaultValueSql ) ;
Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; Assert . False ( ( ( IProperty ) VAR0 ) . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . Sequence ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ;
Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ;
Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; Assert . False ( ( ( IProperty ) VAR0 ) . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . Sequence ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ;
Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; Assert . False ( ( ( IProperty ) VAR0 ) . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . Sequence ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ;
Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; Assert . False ( ( ( IProperty ) VAR0 ) . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . Sequence ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ;
VerifySingleton < ICoreConventionSetBuilder > ( ) ; VerifySingleton < LoggingModelValidator > ( ) ; VerifySingleton < IMemoryCache > ( ) ; VerifyScoped < IKeyPropagator > ( ) ; VerifyScoped < INavigationFixer > ( ) ;
var VAR0 = VAR1 . GetModel ( new Context1 ( ) , null , new LoggingModelValidator ( new LoggerFactory ( ) ) ) ; var VAR2 = VAR1 . GetModel ( new Context2 ( ) , null , new LoggingModelValidator ( new LoggerFactory ( ) ) ) ; Assert . NotSame ( VAR0 , VAR2 ) ; Assert . Same ( VAR0 , VAR1 . GetModel ( new Context1 ( ) , null , new LoggingModelValidator ( new LoggerFactory ( ) ) ) ) ; Assert . Same ( VAR2 , VAR1 . GetModel ( new Context2 ( ) , null , new LoggingModelValidator ( new LoggerFactory ( ) ) ) ) ;
VAR0 . IsValueGeneratedOnAdd = true ; var VAR1 = VAR2 . SetPrimaryKey ( VAR0 ) ; VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ; var VAR3 = VAR4 . AddEntityType ( typeof ( Animal ) ) ; var VAR5 = VAR3 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR5 . IsValueGeneratedOnAdd = true ;
VAR0 . IsValueGeneratedOnAdd = true ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeDependentEntity ) ) ; var VAR4 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . GetOrSetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ; var VAR6 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR2 . GetOrAddForeignKey ( new [ ] { VAR6 } , VAR1 . GetPrimaryKey ( ) ) ; var VAR7 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR7 . IsValueGeneratedOnAdd = true ;
VAR0 . IsValueGeneratedOnAdd = true ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) . IsConcurrencyToken = true ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeDependentEntity ) . FullName ) ; var VAR4 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR5 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) ; VAR2 . GetOrSetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ; var VAR6 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR2 . GetOrAddForeignKey ( new [ ] { VAR6 } , VAR1 . GetPrimaryKey ( ) ) ; var VAR7 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR7 . IsValueGeneratedOnAdd = true ;
VAR0 . IsValueGeneratedOnAdd = true ; Assert . True ( VAR1 . GenerateValueOnAdd ( true , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . GenerateValueOnAdd ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( true , VAR0 . IsValueGeneratedOnAdd ) ; Assert . True ( VAR1 . GenerateValueOnAdd ( false , ConfigurationSource . Explicit ) ) ; Assert . Equal ( false , VAR0 . IsValueGeneratedOnAdd ) ;
var VAR0 = VAR1 . Single ( VAR2 => VAR2 . Name == LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . OneToMany_Optional . Count ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; var VAR3 = VAR0 . OneToMany_Optional . Single ( VAR2 => VAR2 . Name == LITERAL ) ;
var VAR0 = new InMemoryDataStoreCreator ( CreateStore ( VAR1 , VAR2 : true ) , VAR3 ) ; Assert . True ( await VAR0 . EnsureCreatedAsync ( ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ; VAR0 = new InMemoryDataStoreCreator ( CreateStore ( VAR1 , VAR2 : true ) , VAR3 ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( ) ) ;
var VAR0 = new Mock < RelationalDataStoreCreator > ( VAR2 ) ; VAR0 . Setup ( VAR1 => VAR1 . Exists ( ) ) . Returns ( true ) ; VAR0 . Setup ( VAR1 => VAR1 . HasTables ( ) ) . Returns ( true ) ; VAR0 . Setup ( VAR1 => VAR1 . EnsureCreated ( ) ) . Returns ( true ) ; VAR0 . Setup ( VAR1 => VAR1 . EnsureDeleted ( ) ) . Returns ( true ) ;
var VAR0 = new Mock < RelationalDataStoreCreator > ( VAR3 ) ; VAR0 . Setup ( VAR1 => VAR1 . ExistsAsync ( VAR2 ) ) . Returns ( Task . FromResult ( true ) ) ; VAR0 . Setup ( VAR1 => VAR1 . HasTablesAsync ( VAR2 ) ) . Returns ( Task . FromResult ( true ) ) ; VAR0 . Setup ( VAR1 => VAR1 . EnsureCreatedAsync ( VAR2 ) ) . Returns ( Task . FromResult ( true ) ) ; VAR0 . Setup ( VAR1 => VAR1 . EnsureDeletedAsync ( VAR2 ) ) . Returns ( Task . FromResult ( true ) ) ;
VAR0 . Verify ( VAR1 => VAR1 . CreateTablesAsync ( VAR3 ) , Times . Once ) ; Assert . True ( await VAR4 . HasTablesAsync ( VAR3 ) ) ; VAR0 . Verify ( VAR1 => VAR1 . HasTablesAsync ( VAR3 ) , Times . Once ) ; await VAR4 . DeleteAsync ( VAR3 ) ; VAR0 . Verify ( VAR1 => VAR1 . DeleteAsync ( VAR3 ) , Times . Once ) ; Assert . True ( await VAR4 . EnsureCreatedAsync ( VAR3 ) ) ; VAR0 . Verify ( VAR1 => VAR1 . EnsureCreatedAsync ( VAR3 ) , Times . Once ) ; Assert . True ( await VAR4 . EnsureDeletedAsync ( VAR3 ) ) ; VAR0 . Verify ( VAR1 => VAR1 . EnsureDeletedAsync ( VAR3 ) , Times . Once ) ;
var VAR0 = new SqlServerTypeMapper ( ) . MapPropertyType ( VAR1 ) ; Assert . Null ( VAR0 . StoreType ) ; Assert . Equal ( LITERAL , VAR0 . DefaultTypeName ) ; Assert . Equal ( LITERAL , VAR0 . CreateParameter ( new TestCommand ( ) , LITERAL , LITERAL ) . Size ) ;
var VAR0 = new SqlServerTypeMapper ( ) . MapPropertyType ( VAR1 ) ; Assert . Null ( VAR0 . StoreType ) ; Assert . Equal ( LITERAL , VAR0 . DefaultTypeName ) ; Assert . Equal ( LITERAL , VAR0 . CreateParameter ( new TestCommand ( ) , LITERAL , LITERAL ) . Size ) ;
var VAR0 = new SqlServerTypeMapper ( ) . MapPropertyType ( VAR1 ) ; Assert . Equal ( DbType . Binary , VAR0 . StoreType ) ; Assert . Equal ( LITERAL , VAR0 . DefaultTypeName ) ; Assert . Equal ( LITERAL , VAR0 . CreateParameter ( new TestCommand ( ) , LITERAL , new byte [ LITERAL ] ) . Size ) ;
var VAR0 = new SqlServerTypeMapper ( ) . MapPropertyType ( VAR1 ) ; Assert . Equal ( DbType . Binary , VAR0 . StoreType ) ; Assert . Equal ( LITERAL , VAR0 . DefaultTypeName ) ; Assert . Equal ( LITERAL , VAR0 . CreateParameter ( new TestCommand ( ) , LITERAL , new byte [ LITERAL ] ) . Size ) ;
var VAR0 = VAR1 . GetModel ( new Context1 ( ) , new ModelBuilderFactory ( ) , new LoggingModelValidator ( new LoggerFactory ( ) ) ) ; var VAR2 = VAR1 . GetModel ( new Context2 ( ) , new ModelBuilderFactory ( ) , new LoggingModelValidator ( new LoggerFactory ( ) ) ) ; Assert . NotSame ( VAR0 , VAR2 ) ; Assert . Same ( VAR0 , VAR1 . GetModel ( new Context1 ( ) , new ModelBuilderFactory ( ) , new LoggingModelValidator ( new LoggerFactory ( ) ) ) ) ; Assert . Same ( VAR2 , VAR1 . GetModel ( new Context2 ( ) , new ModelBuilderFactory ( ) , new LoggingModelValidator ( new LoggerFactory ( ) ) ) ) ;
AssertSpousesConsistent ( VAR0 , VAR2 ) ; AssertSpousesConsistent ( VAR1 , null ) ; AssertSpousesConsistent ( null , VAR3 ) ; AssertSpousesConsistent ( null , VAR0 ) ; AssertSpousesConsistent ( null , VAR1 ) ; VAR0 . HusbandId = VAR1 . CustomerId ;
var VAR0 = new DbContextOptionsBuilder ( ) ; Assert . Null ( VAR0 . Options . FindExtension < FakeDbContextOptionsExtension1 > ( ) ) ; Assert . Empty ( VAR0 . Options . Extensions ) ; var VAR1 = new FakeDbContextOptionsExtension1 ( ) ; var VAR2 = new FakeDbContextOptionsExtension2 ( ) ; ( ( IDbContextOptionsBuilderInfrastructure ) VAR0 ) . AddOrUpdateExtension ( VAR1 ) ; ( ( IDbContextOptionsBuilderInfrastructure ) VAR0 ) . AddOrUpdateExtension ( VAR2 ) ;
var VAR0 = new PredicateNegationExpressionOptimizer ( ) . Visit ( VAR1 ) ; VAR1 = VAR0 ; var VAR2 = new ParameterExpressionDetectingVisitor ( ) ; VAR2 . Visit ( VAR1 ) ;
VerifySingleton < ISqlServerSqlGenerator > ( ) ; VerifySingleton < ISqlStatementExecutor > ( ) ; VerifySingleton < SqlServerTypeMapper > ( ) ; VerifySingleton < SqlServerModelSource > ( ) ; VerifySingleton < SqlServerMetadataExtensionProvider > ( ) ; VerifyScoped < SqlServerModificationCommandBatchFactory > ( ) ; VerifyScoped < ISqlServerSequenceValueGeneratorFactory > ( ) ; VerifyScoped < SqlServerValueGeneratorSelector > ( ) ; VerifyScoped < SqlServerDataStoreServices > ( ) ;
Assert . Equal ( DbType . Int16 , GetTypeMapping ( typeof ( ShortEnum ) ) . StoreType ) ; Assert . Equal ( DbType . Int64 , GetTypeMapping ( typeof ( LongEnum ) ) . StoreType ) ; Assert . Equal ( DbType . Int32 , GetTypeMapping ( typeof ( IntEnum ? ) ) . StoreType ) ; Assert . Equal ( DbType . Byte , GetTypeMapping ( typeof ( ByteEnum ? ) ) . StoreType ) ; Assert . Null ( GetTypeMapping ( typeof ( SByteEnum ? ) ) . StoreType ) ; Assert . Null ( GetTypeMapping ( typeof ( UShortEnum ? ) ) . StoreType ) ; Assert . Null ( GetTypeMapping ( typeof ( UIntEnum ? ) ) . StoreType ) ; Assert . Null ( GetTypeMapping ( typeof ( ULongEnum ? ) ) . StoreType ) ; Assert . Equal ( DbType . Int16 , GetTypeMapping ( typeof ( ShortEnum ? ) ) . StoreType ) ; Assert . Equal ( DbType . Int64 , GetTypeMapping ( typeof ( LongEnum ? ) ) . StoreType ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Relational ( ) . VAR1 ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Relational ( ) . VAR1 ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Relational ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Relational ( ) . VAR1 ) ;
Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Sqlite ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IKey ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Sqlite ( ) . VAR1 = null ;
Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Sqlite ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IForeignKey ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Sqlite ( ) . VAR1 = null ;
Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Relational ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Sqlite ( ) . VAR1 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IIndex ) VAR0 ) . Sqlite ( ) . VAR1 ) ; VAR0 . Sqlite ( ) . VAR1 = null ;
var VAR0 = VAR1 . GetForeignKeys ( ) . Single ( ) ; var VAR2 = CreateInternalEntry ( ) ; var VAR3 = CreateSidecar ( VAR2 ) ; VAR3 [ VAR0 . Properties . Single ( ) ] = LITERAL ; var VAR4 = VAR3 . GetDependentKeyValue ( VAR0 ) ; Assert . IsType < SimpleEntityKey < int > > ( VAR4 ) ;
var VAR0 = VAR1 . GetForeignKeys ( ) . Single ( ) ; var VAR2 = CreateInternalEntry ( ) ; var VAR3 = CreateSidecar ( VAR2 ) ; VAR3 [ VAR0 . PrincipalKey . Properties . Single ( ) ] = LITERAL ; var VAR4 = VAR3 . GetPrincipalKeyValue ( VAR0 ) ; Assert . IsType < SimpleEntityKey < int > > ( VAR4 ) ;
Assert . Same ( VAR0 , VAR1 . GetForeignKeys ( ) . Single ( ) ) ; var VAR2 = VAR1 . AddForeignKey ( VAR3 , VAR4 ) ; Assert . Same ( VAR2 , VAR1 . GetForeignKey ( VAR3 ) ) ; Assert . Same ( VAR2 , VAR1 . FindForeignKey ( VAR3 ) ) ; Assert . Same ( VAR2 , VAR1 . GetOrAddForeignKey ( VAR3 , new Key ( new [ ] { VAR5 } ) ) ) ; Assert . Equal ( new [ ] { VAR0 , VAR2 } , VAR1 . GetForeignKeys ( ) . ToArray ( ) ) ;
var VAR0 = new ModelBuilder ( new ConventionSet ( ) ) ; var VAR1 = VAR0 . Model ; Assert . Null ( VAR1 . Relational ( ) . TryGetSequence ( LITERAL ) ) ; Assert . Null ( ( ( IModel ) VAR1 ) . Relational ( ) . TryGetSequence ( LITERAL ) ) ; Assert . Null ( VAR1 . SqlServer ( ) . TryGetSequence ( LITERAL ) ) ; Assert . Null ( ( ( IModel ) VAR1 ) . SqlServer ( ) . TryGetSequence ( LITERAL ) ) ; var VAR2 = VAR1 . SqlServer ( ) . GetOrAddSequence ( LITERAL ) ; Assert . Null ( VAR1 . Relational ( ) . TryGetSequence ( LITERAL ) ) ; Assert . Null ( ( ( IModel ) VAR1 ) . Relational ( ) . TryGetSequence ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR1 . SqlServer ( ) . TryGetSequence ( LITERAL ) . VAR3 ) ; Assert . Equal ( LITERAL , ( ( IModel ) VAR1 ) . SqlServer ( ) . TryGetSequence ( LITERAL ) . VAR3 ) ;
VerifySingleton < ModelBuilderFactory > ( ) ; VerifySingleton < InMemoryValueGeneratorCache > ( ) ; VerifySingleton < IInMemoryDatabase > ( ) ; VerifySingleton < InMemoryModelSource > ( ) ; VerifyScoped < InMemoryValueGeneratorSelector > ( ) ; VerifyScoped < InMemoryQueryContextFactory > ( ) ; VerifyScoped < InMemoryDataStoreServices > ( ) ; VerifyScoped < InMemoryDatabaseFactory > ( ) ; VerifyScoped < IInMemoryDataStore > ( ) ; VerifyScoped < InMemoryConnection > ( ) ; VerifyScoped < InMemoryDataStoreCreator > ( ) ;
var VAR0 = VAR1 . GetOrAdd ( VAR2 , VAR3 => new TemporaryNumberValueGenerator < int > ( ) ) ; Assert . NotNull ( VAR0 ) ; Assert . Same ( VAR0 , VAR1 . GetOrAdd ( VAR2 , VAR3 => new TemporaryNumberValueGenerator < int > ( ) ) ) ; var VAR4 = VAR1 . GetOrAdd ( VAR5 , VAR3 => new TemporaryNumberValueGenerator < int > ( ) ) ; Assert . NotNull ( VAR4 ) ; Assert . Same ( VAR4 , VAR1 . GetOrAdd ( VAR5 , VAR3 => new TemporaryNumberValueGenerator < int > ( ) ) ) ;
Assert . Same ( VAR0 , VAR1 . Metadata . GetForeignKeys ( ) . Single ( ) ) ; Assert . Same ( VAR2 . Metadata , VAR0 . Properties [ 0 ] ) ; Assert . Same ( VAR3 . Metadata , VAR0 . Properties [ 1 ] ) ; Assert . Same ( VAR4 [ 0 ] , VAR0 . PrincipalKey . Properties [ 0 ] ) ; Assert . Same ( VAR4 [ 1 ] , VAR0 . PrincipalKey . Properties [ 1 ] ) ; Assert . False ( VAR0 . IsUnique ) ;
Assert . Same ( VAR0 , VAR1 . Metadata . GetForeignKeys ( ) . Single ( ) ) ; Assert . Equal ( LITERAL + VAR2 [ 0 ] . VAR3 , VAR0 . Properties [ 0 ] . VAR3 ) ; Assert . Equal ( LITERAL + VAR2 [ 1 ] . VAR3 , VAR0 . Properties [ 1 ] . VAR3 ) ; Assert . Same ( VAR2 [ 0 ] , VAR0 . PrincipalKey . Properties [ 0 ] ) ; Assert . Same ( VAR2 [ 1 ] , VAR0 . PrincipalKey . Properties [ 1 ] ) ; Assert . True ( VAR0 . IsUnique ) ;
Assert . Same ( VAR0 , VAR1 . Metadata . GetForeignKeys ( ) . Single ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Properties . Count ) ; Assert . NotSame ( VAR2 , VAR0 . Properties [ 0 ] ) ; Assert . NotSame ( VAR2 , VAR0 . Properties [ 1 ] ) ; Assert . Same ( VAR3 [ 0 ] , VAR0 . PrincipalKey . Properties [ 0 ] ) ; Assert . Same ( VAR3 [ 1 ] , VAR0 . PrincipalKey . Properties [ 1 ] ) ; Assert . True ( VAR0 . IsUnique ) ;
var VAR0 = ( IForeignKey ) VAR1 . Metadata . GetForeignKeys ( ) . Single ( ) ; Assert . Same ( VAR0 , VAR2 . Metadata ) ; Assert . Same ( VAR3 , VAR0 . Properties . Single ( ) ) ; Assert . Same ( VAR4 . Metadata . GetPrimaryKey ( ) , VAR0 . PrincipalKey ) ; Assert . True ( VAR0 . IsUnique ) ; Assert . False ( VAR0 . IsRequired ) ; Assert . Empty ( VAR4 . Metadata . GetForeignKeys ( ) ) ;
var VAR0 = ( IForeignKey ) VAR1 . Metadata . GetForeignKeys ( ) . Single ( ) ; Assert . Same ( VAR0 , VAR2 . Metadata ) ; Assert . Same ( VAR3 , VAR0 . PrincipalKey . Properties . Single ( ) ) ; Assert . True ( VAR0 . IsUnique ) ; Assert . True ( VAR0 . IsRequired ) ; Assert . Empty ( VAR4 . Metadata . GetForeignKeys ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new UntypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new UntypedValueBufferFactoryFactory ( ) ) ; VAR6 . AddEntry ( VAR3 ) ; var VAR7 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . SetEntityState ( EntityState . Deleted ) ; var VAR8 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new UntypedValueBufferFactoryFactory ( ) ) ;
VAR6 = VAR7 ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; Check . NotNull ( VAR7 , nameof ( VAR7 ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new NonTypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new NonTypedValueBufferFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new NonTypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new NonTypedValueBufferFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new NonTypedValueReaderFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new NonTypedValueReaderFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new NonTypedValueReaderFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new NonTypedValueReaderFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new NonTypedValueReaderFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new NonTypedValueReaderFactoryFactory ( ) ) ; VAR6 . AddEntry ( VAR3 ) ; var VAR7 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . SetEntityState ( EntityState . Deleted ) ; var VAR8 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new NonTypedValueReaderFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new TestValueReaderFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new TestValueReaderFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new TestValueReaderFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new TestValueReaderFactoryFactory ( ) ) ; VAR6 . AddEntry ( VAR3 ) ; var VAR7 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . SetEntityState ( EntityState . Deleted ) ; var VAR8 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) , new TestValueReaderFactoryFactory ( ) ) ;
Assert . Same ( Sequence . DefaultName , VAR0 . DefaultSequenceName ) ; Assert . Null ( VAR0 . DefaultSequenceSchema ) ; Assert . Null ( VAR1 . TryGetSequence ( Sequence . DefaultName ) ) ; Assert . NotNull ( VAR0 . TryGetSequence ( Sequence . DefaultName ) ) ;
Assert . Same ( Sequence . DefaultName , VAR0 . DefaultSequenceName ) ; Assert . Null ( VAR0 . DefaultSequenceSchema ) ; Assert . Null ( VAR1 . TryGetSequence ( Sequence . DefaultName ) ) ; Assert . NotNull ( VAR0 . TryGetSequence ( Sequence . DefaultName ) ) ;
var VAR0 = Assert . Throws < ArgumentException > ( ( ) => new SqliteConnectionStringBuilder ( ) [ null ] ) ; Assert . Equal ( Strings . FormatArgumentIsNullOrWhitespace ( LITERAL ) , VAR0 . Message ) ; VAR0 = Assert . Throws < ArgumentException > ( ( ) => new SqliteConnectionStringBuilder ( ) [ null ] = 0 ) ; Assert . Equal ( Strings . FormatArgumentIsNullOrWhitespace ( LITERAL ) , VAR0 . Message ) ; VAR0 = Assert . Throws < ArgumentException > ( ( ) => new SqliteConnectionStringBuilder ( ) [ LITERAL ] ) ; Assert . Equal ( Strings . FormatKeywordNotSupported ( LITERAL ) , VAR0 . Message ) ; VAR0 = Assert . Throws < ArgumentException > ( ( ) => new SqliteConnectionStringBuilder ( ) [ LITERAL ] = 0 ) ;
var VAR0 = new ServiceCollection ( ) . AddSingleton < IComparer < ModificationCommand > , FakeModificationCommandComparer > ( ) ; VAR0 . AddEntityFramework ( ) . AddRelational ( ) ; var VAR1 = VAR0 . BuildServiceProvider ( ) ; Assert . IsType < FakeModificationCommandComparer > ( VAR1 . GetRequiredService < IComparer < ModificationCommand > > ( ) ) ;
var VAR0 = ModelBuilder . Entity ( VAR1 . PrincipalEntityType . Name , ConfigurationSource . Convention ) ; var VAR2 = VAR1 . GetNavigationToDependent ( ) ; VAR2 ? . EntityType . RemoveNavigation ( VAR2 ) ; var VAR3 = VAR1 . GetNavigationToPrincipal ( ) ; VAR3 ? . EntityType . RemoveNavigation ( VAR3 ) ; Metadata . RemoveForeignKey ( VAR1 ) ; ModelBuilder . ConventionDispatcher . OnForeignKeyRemoved ( this , VAR1 ) ; RemoveShadowPropertiesIfUnused ( VAR1 . Properties ) ; VAR0 . RemoveKeyIfUnused ( VAR1 . PrincipalKey ) ;
var VAR8 = VAR1 ; var VAR2 = VAR8 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR8 . SetPrimaryKey ( VAR2 ) ; var VAR4 = VAR1 . AddForeignKey ( VAR5 , VAR3 ) ; VAR4 . IsUnique = true ; var VAR6 = VAR8 . AddNavigation ( LITERAL , VAR4 , pointsToPrincipal : false ) ; var VAR7 = VAR8 . AddNavigation ( LITERAL , VAR4 , pointsToPrincipal : true ) ;
Assert . Same ( VAR0 , VAR1 . PrincipalEntityType ) ; Assert . Same ( VAR2 , VAR1 . ReferencedProperties . Single ( ) ) ; Assert . Same ( VAR3 , VAR1 . Properties . Single ( ) ) ; Assert . False ( VAR1 . IsUnique . Value ) ; Assert . Same ( VAR4 , VAR1 . PrincipalKey ) ;
Assert . Null ( VAR0 . FindAnnotation ( LITERAL ) ) ; Assert . Null ( VAR0 . RemoveAnnotation ( new Annotation ( LITERAL , LITERAL ) ) ) ; var VAR1 = VAR0 . AddAnnotation ( LITERAL , LITERAL ) ; Assert . NotNull ( VAR1 ) ; Assert . Equal ( LITERAL , VAR1 . Value ) ; Assert . Equal ( LITERAL , VAR0 [ LITERAL ] ) ; Assert . Same ( VAR1 , VAR0 . FindAnnotation ( LITERAL ) ) ;
Assert . Same ( VAR0 , VAR1 . FindAnnotation ( LITERAL ) ) ; Assert . Same ( VAR0 , VAR1 . GetOrAddAnnotation ( LITERAL , LITERAL ) ) ; Assert . Equal ( new [ ] { VAR0 } , VAR1 . Annotations . ToArray ( ) ) ; Assert . Same ( VAR0 , VAR1 . RemoveAnnotation ( VAR0 ) ) ; Assert . Empty ( VAR1 . Annotations ) ; Assert . Null ( VAR1 . RemoveAnnotation ( VAR0 ) ) ; Assert . Null ( VAR1 [ LITERAL ] ) ; Assert . Null ( VAR1 . FindAnnotation ( LITERAL ) ) ;
Assert . Same ( VAR0 , VAR1 . FindPrimaryKey ( ) ) ; Assert . Equal ( LITERAL , VAR1 . Keys . Count ) ; Assert . Same ( VAR2 , VAR1 . GetKey ( VAR2 . Properties ) ) ; Assert . Same ( VAR0 , VAR1 . GetKey ( VAR0 . Properties ) ) ; Assert . Null ( VAR1 . GetOrSetPrimaryKey ( ( Property ) null ) ) ; Assert . Null ( VAR1 . FindPrimaryKey ( ) ) ;
Assert . Same ( VAR0 , VAR1 . FindIndex ( VAR2 ) ) ; Assert . Same ( VAR2 , VAR0 . Properties [ 0 ] ) ; var VAR3 = VAR1 . AddIndex ( new [ ] { VAR2 , VAR4 } ) ; Assert . Equal ( LITERAL , VAR3 . Properties . Count ) ; Assert . Same ( VAR3 , VAR1 . GetOrAddIndex ( new [ ] { VAR2 , VAR4 } ) ) ; Assert . Same ( VAR3 , VAR1 . FindIndex ( new [ ] { VAR2 , VAR4 } ) ) ;
Assert . Same ( VAR0 . Metadata , VAR1 . Metadata . FindNavigation ( Order . VAR2 . VAR3 ) . ForeignKey ) ; Assert . Same ( VAR0 . Metadata , VAR4 . Metadata . FindNavigation ( VAR5 . VAR6 . VAR3 ) . ForeignKey ) ; Assert . True ( VAR1 . Navigation ( Order . VAR2 . VAR3 , VAR7 . Metadata , pointsToPrincipal : true , configurationSource : ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR4 . Navigation ( VAR5 . VAR6 . VAR3 , VAR7 . Metadata , pointsToPrincipal : false , configurationSource : ConfigurationSource . DataAnnotation ) ) ; Assert . Same ( VAR7 . Metadata , VAR1 . Metadata . FindNavigation ( Order . VAR2 . VAR3 ) . ForeignKey ) ; Assert . Same ( VAR7 . Metadata , VAR4 . Metadata . FindNavigation ( VAR5 . VAR6 . VAR3 ) . ForeignKey ) ;
Assert . Null ( VAR0 . FindEntityType ( typeof ( Customer ) ) ) ; Assert . Null ( VAR0 . RemoveEntityType ( new EntityType ( typeof ( Customer ) , VAR0 ) ) ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( Customer ) ) ; Assert . Equal ( typeof ( Customer ) , VAR1 . ClrType ) ; Assert . NotNull ( VAR0 . FindEntityType ( typeof ( Customer ) ) ) ;
Assert . Null ( VAR0 . FindEntityType ( typeof ( Customer ) . FullName ) ) ; Assert . Null ( VAR0 . RemoveEntityType ( new EntityType ( typeof ( Customer ) . FullName , VAR0 ) ) ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( Customer ) . FullName ) ; Assert . Null ( VAR1 . ClrType ) ; Assert . Equal ( typeof ( Customer ) . FullName , VAR1 . VAR2 ) ; Assert . NotNull ( VAR0 . FindEntityType ( typeof ( Customer ) . FullName ) ) ;
Assert . Null ( VAR0 . FindInverse ( ) ) ; var VAR1 = BuildModel ( VAR2 : false ) . GetEntityType ( typeof ( Product ) ) . GetNavigations ( ) . Single ( VAR3 => VAR3 . Name == LITERAL ) ; Assert . Null ( VAR1 . FindInverse ( ) ) ; var VAR4 = BuildModel ( VAR5 : false ) . GetEntityType ( typeof ( Product ) ) . GetNavigations ( ) . Single ( VAR3 => VAR3 . Name == LITERAL ) ; Assert . Null ( VAR4 . FindInverse ( ) ) ; var VAR6 = BuildModel ( VAR7 : false ) . GetEntityType ( typeof ( VAR8 ) ) . GetNavigations ( ) . Single ( VAR3 => VAR3 . Name == LITERAL ) ; Assert . Null ( VAR6 . FindInverse ( ) ) ;
var VAR0 = VAR1 . SetPrimaryKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) , true ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) , true ) ; var VAR3 = VAR4 . AddEntityType ( LITERAL ) ; var VAR5 = VAR3 . SetPrimaryKey ( VAR3 . AddProperty ( LITERAL , typeof ( int ) , true ) ) ;
VAR0 . Collection ( VAR1 => VAR1 . VAR2 ) . InverseReference ( VAR1 => VAR1 . VAR3 ) ; VAR0 . Reference ( VAR1 => VAR1 . VAR4 ) . InverseReference ( VAR1 => VAR1 . VAR3 ) . ForeignKey < ProductDetail > ( VAR1 => VAR1 . VAR5 ) ; VAR6 . Entity < VAR3 > ( VAR0 => { VAR0 . Collection ( VAR1 => VAR1 . VAR2 ) . InverseReference ( VAR1 => VAR1 . VAR3 ) ; VAR0 . Reference ( VAR1 => VAR1 . VAR4 ) . InverseReference ( VAR1 => VAR1 . VAR3 ) . ForeignKey < ProductDetail > ( VAR1 => VAR1 . VAR5 ) ; } ) ; VAR6 . Entity < VAR7 > ( ) . Collection ( VAR1 => VAR1 . VAR8 ) . InverseReference ( VAR1 => VAR1 . VAR7 ) ; VAR6 . Entity < ProductDetail > ( ) ; VAR6 . Entity < VAR9 > ( ) . Collection ( VAR1 => VAR1 . VAR2 ) . InverseReference ( VAR1 => VAR1 . VAR9 ) ;
VAR0 . SetMaxLength ( 1 ) ; Assert . True ( VAR1 . MaxLength ( 1 , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . MaxLength ( LITERAL , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( 1 , VAR0 . GetMaxLength ( ) . Value ) ; Assert . True ( VAR1 . MaxLength ( LITERAL , ConfigurationSource . Explicit ) ) ; Assert . Equal ( LITERAL , VAR0 . GetMaxLength ( ) . Value ) ;
var VAR0 = VAR1 . GetRequiredService < IStateManager > ( ) ; var VAR2 = new VAR3 { VAR4 = LITERAL } ; var VAR5 = new VAR6 { VAR4 = LITERAL } ; VAR2 . VAR7 . Add ( VAR5 ) ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR2 ) ) ; var VAR8 = VAR0 . GetOrCreateEntry ( VAR5 ) ; var VAR9 = VAR10 . GetEntityType ( typeof ( VAR6 ) ) . GetProperty ( LITERAL ) ; PropagateValue ( VAR1 . GetRequiredService < IKeyPropagator > ( ) , VAR8 , VAR9 ) ;
var VAR0 = VAR1 . GetRequiredService < IStateManager > ( ) ; var VAR2 = new ProductDetail ( ) ; var VAR3 = new VAR4 { VAR5 = LITERAL , VAR6 = VAR2 } ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR3 ) ) ; var VAR7 = VAR0 . GetOrCreateEntry ( VAR2 ) ; var VAR8 = VAR9 . GetEntityType ( typeof ( ProductDetail ) ) . GetProperty ( LITERAL ) ; PropagateValue ( VAR1 . GetRequiredService < IKeyPropagator > ( ) , VAR7 , VAR8 ) ;
var VAR0 = VAR1 . GetRequiredService < IStateManager > ( ) . GetOrCreateEntry ( VAR2 ) ; var VAR3 = VAR4 . GetEntityType ( typeof ( OrderLineDetail ) ) . GetProperty ( LITERAL ) ; var VAR5 = VAR4 . GetEntityType ( typeof ( OrderLineDetail ) ) . GetProperty ( LITERAL ) ; var VAR6 = VAR1 . GetRequiredService < IKeyPropagator > ( ) ;
var VAR0 = VAR1 . GetRequiredService < IStateManager > ( ) ; var VAR2 = new OrderLineDetail ( ) ; var VAR3 = new VAR4 { VAR5 = LITERAL , VAR6 = LITERAL , VAR7 = VAR2 } ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR3 ) ) ; var VAR8 = VAR0 . GetOrCreateEntry ( VAR2 ) ; var VAR9 = VAR10 . GetEntityType ( typeof ( OrderLineDetail ) ) . GetProperty ( LITERAL ) ; var VAR11 = VAR10 . GetEntityType ( typeof ( OrderLineDetail ) ) . GetProperty ( LITERAL ) ; var VAR12 = VAR1 . GetRequiredService < IKeyPropagator > ( ) ;
VAR0 . AddEntityFramework ( ) . ServiceCollection ( ) . AddSingleton < IModelSource , FakeModelSource > ( ) . AddScoped < IStateManager , FakeStateManager > ( ) ; var VAR1 = VAR0 . BuildServiceProvider ( ) ; var VAR2 = new EarlyLearningCenter ( VAR1 ) ; var VAR3 = ( ( IAccessor < IServiceProvider > ) VAR2 ) . Service ; var VAR4 = VAR3 . GetRequiredService < IModelSource > ( ) ; VAR2 . Dispose ( ) ; VAR2 = new EarlyLearningCenter ( VAR1 ) ; VAR3 = ( ( IAccessor < IServiceProvider > ) VAR2 ) . Service ; var VAR5 = VAR3 . GetRequiredService < IStateManager > ( ) ; Assert . Same ( VAR5 , VAR3 . GetRequiredService < IStateManager > ( ) ) ;
VerifyScoped < IKeyPropagator > ( ) ; VerifyScoped < INavigationFixer > ( ) ; VerifyScoped < IStateManager > ( ) ; VerifyScoped < IInternalEntityEntryFactory > ( ) ; VerifyScoped < IInternalEntityEntryNotifier > ( ) ; VerifyScoped < IInternalEntityEntrySubscriber > ( ) ; VerifyScoped < IValueGenerationManager > ( ) ; VerifyScoped < IEntityQueryProvider > ( ) ; VerifyScoped < ChangeTracker > ( ) ; VerifyScoped < IChangeDetector > ( ) ; VerifyScoped < IEntityEntryGraphIterator > ( ) ; VerifyScoped < IDbContextServices > ( ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) ) ;
var VAR3 = new DbContextOptionsBuilder ( ) ; var VAR1 = new SqlConnection ( ) ; VAR3 . UseSqlServer ( VAR1 ) ; var VAR2 = VAR3 . Options . Extensions . OfType < SqlServerOptionsExtension > ( ) . Single ( ) ;
var VAR3 = new DbContextOptionsBuilder < DbContext > ( ) ; var VAR1 = new SqlConnection ( ) ; VAR3 . UseSqlServer ( VAR1 ) ; var VAR2 = VAR3 . Options . Extensions . OfType < SqlServerOptionsExtension > ( ) . Single ( ) ;
var VAR3 = new DbContextOptionsBuilder ( ) ; VAR3 . UseSqlServer ( ) . MaxBatchSize ( 1 ) ; var VAR1 = VAR2 . Create ( VAR3 . Options ) ;
var VAR3 = new DbContextOptionsBuilder ( ) ; VAR3 . UseSqlServer ( ) ; var VAR1 = VAR2 . Create ( VAR3 . Options ) ;
var VAR0 = VAR1 . Database . AsRelational ( ) . Connection ; var VAR2 = VAR3 . Build ( VAR0 , new Dictionary < string , object > ( ) ) ; Assert . Equal ( LITERAL , VAR2 . CommandTimeout ) ; VAR1 . Database . AsRelational ( ) . Connection . CommandTimeout = LITERAL ; VAR0 = VAR1 . Database . AsRelational ( ) . Connection ;
VAR0 = VAR1 . GetRequiredService < IDataStore > ( ) ; VAR2 = VAR1 . GetRequiredService < IDataStoreCreator > ( ) ; VAR3 = VAR1 . GetRequiredService < IDataStoreConnection > ( ) ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < IDataStore > ( ) ) ; Assert . Same ( VAR2 , VAR1 . GetRequiredService < IDataStoreCreator > ( ) ) ; Assert . Same ( VAR3 , VAR1 . GetRequiredService < IDataStoreConnection > ( ) ) ;
var VAR0 = new Mock < IDataStoreCreator > ( ) ; VAR0 . Setup ( VAR1 => VAR1 . EnsureCreated ( VAR2 ) ) . Returns ( true ) ; VAR0 . Setup ( VAR1 => VAR1 . EnsureDeleted ( VAR2 ) ) . Returns ( true ) ; var VAR3 = Mock . Of < IDataStoreConnection > ( ) ;
var VAR0 = VAR1 . GetRequiredService < IModelSource > ( ) ; VAR2 . Dispose ( ) ; VAR2 = new EarlyLearningCenter ( VAR3 ) ; VAR1 = ( ( IAccessor < IServiceProvider > ) VAR2 ) . Service ; var VAR4 = VAR1 . GetRequiredService < StateManager > ( ) ; Assert . Same ( VAR4 , VAR1 . GetRequiredService < StateManager > ( ) ) ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < IModelSource > ( ) ) ;
Assert . Same ( VAR0 , VAR1 . GetRequiredService < IModelSource > ( ) ) ; VAR2 . Dispose ( ) ; VAR2 = new EarlyLearningCenter ( VAR3 ) ; VAR1 = ( ( IAccessor < IServiceProvider > ) VAR2 ) . Service ; Assert . NotSame ( VAR4 , VAR1 . GetRequiredService < StateManager > ( ) ) ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < IModelSource > ( ) ) ;
VerifyScoped < IDataStoreSource > ( VAR0 : true ) ; Assert . NotNull ( VerifyCached < IModel > ( ) ) ; Assert . NotNull ( VerifyScoped < DbContext > ( ) ) ; Assert . NotNull ( VerifyScoped < IDbContextOptions > ( ) ) ; Assert . NotNull ( VerifyScoped < IDataStore > ( ) ) ; Assert . NotNull ( VerifyScoped < IDataStoreConnection > ( ) ) ; Assert . NotNull ( VerifyScoped < Database > ( ) ) ; Assert . NotNull ( VerifyScoped < IValueGeneratorSelector > ( ) ) ; Assert . NotNull ( VerifyScoped < IDataStoreCreator > ( ) ) ; Assert . NotNull ( VerifySingleton < IModelBuilderFactory > ( ) ) ;
VAR0 = VAR1 . GetType ( ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = VAR9 ; VAR10 = VAR11 ; VAR12 = VAR13 ; VAR14 = new LazyRef < ILogger > ( VAR15 . Create < MigrationScaffolder > ) ;
var VAR0 = ( IRelationalConnection ) VAR1 . Database . Connection ; var VAR2 = VAR3 . Build ( VAR0 , new Dictionary < string , object > ( ) ) ; Assert . Equal ( LITERAL , VAR2 . CommandTimeout ) ; VAR1 . Database . AsRelational ( ) . Connection . CommandTimeout = LITERAL ; VAR0 = ( IRelationalConnection ) VAR1 . Database . Connection ;
var VAR0 = ( FakeSqlServerConnection ) VAR1 . GetRequiredService < ISqlServerConnection > ( ) ; VAR0 . VAR2 = VAR3 ; VAR0 . VAR4 = LITERAL ; var VAR5 = VAR1 . GetRequiredService < ISqlServerDataStoreCreator > ( ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ;
VerifySingleton < InMemoryIntegerValueGeneratorFactory > ( ) ; VerifySingleton < InMemoryDatabase > ( ) ; VerifySingleton < InMemoryModelSource > ( ) ; VerifyScoped < InMemoryValueGeneratorSelector > ( ) ; VerifyScoped < InMemoryDataStoreServices > ( ) ; VerifyScoped < InMemoryDatabaseFacade > ( ) ;
VerifySingleton < SqlServerSequenceValueGeneratorFactory > ( ) ; VerifySingleton < SqlServerSqlGenerator > ( ) ; VerifySingleton < SqlStatementExecutor > ( ) ; VerifySingleton < SqlServerTypeMapper > ( ) ; VerifySingleton < SqlServerModificationCommandBatchFactory > ( ) ; VerifySingleton < SqlServerCommandBatchPreparer > ( ) ; VerifySingleton < SqlServerModelSource > ( ) ; VerifyScoped < SqlServerValueGeneratorSelector > ( ) ; VerifyScoped < SqlServerBatchExecutor > ( ) ; VerifyScoped < SqlServerDataStoreServices > ( ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ;
Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = new ServiceProvider ( VAR0 ) ; var VAR3 = new LoggerFactory ( ) ; VAR3 . AddProvider ( VAR1 ) ; var VAR4 = new LazyRef < ILogger > ( ( ) => VAR3 . Create < DatabaseTool > ( ) ) ; VAR2 . AddService ( typeof ( ILogger ) , VAR4 . Value ) ; VAR2 . AddService ( typeof ( CSharpCodeGeneratorHelper ) , new CSharpCodeGeneratorHelper ( ) ) ;
GenerateUsings ( VAR0 ) ; VAR3 . CSharpCodeGeneratorHelper . BeginNamespace ( VAR1 , VAR0 ) ; VAR3 . CSharpCodeGeneratorHelper . BeginClass ( AccessModifier . Public , VAR2 , isPartial : true , VAR0 : VAR0 ) ; GenerateConstructors ( VAR0 ) ; GenerateProperties ( VAR0 ) ; VAR3 . CSharpCodeGeneratorHelper . EndClass ( VAR0 ) ; VAR3 . CSharpCodeGeneratorHelper . EndNamespace ( VAR0 ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; var VAR2 = VAR1 . TableName ; var VAR3 = VAR1 . SchemaName ; var VAR4 = VAR1 . ColumnModifications ; var VAR5 = VAR4 . Where ( VAR6 => VAR6 . IsWrite ) . ToArray ( ) ; var VAR7 = VAR4 . Where ( VAR6 => VAR6 . IsCondition ) . ToArray ( ) ; var VAR8 = VAR4 . Where ( VAR6 => VAR6 . IsRead ) . ToArray ( ) ;
Assert . Equal ( - 1 , VAR0 . Next ( ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( ) ) ;
TrackEntity ( VAR0 , VAR1 : false ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . State ) ; Assert . Equal ( LITERAL , VAR0 . Entity . VAR2 ) ; VAR0 = VAR3 . Entry ( new Stoat { VAR2 = LITERAL } ) ; TrackEntity ( VAR0 , VAR1 : true ) ;
TrackEntity ( VAR0 , VAR1 : false ) ; Assert . Equal ( EntityState . Added , VAR0 . State ) ; Assert . NotEqual ( Guid . NewGuid ( ) , VAR0 . Entity . VAR2 ) ; Assert . NotEqual ( Guid . NewGuid ( ) , Guid . Parse ( VAR0 . Entity . VAR3 ) ) ; var VAR4 = Guid . NewGuid ( ) ; VAR0 = VAR5 . Entry ( new CompositeStoat { VAR2 = VAR4 } ) ; TrackEntity ( VAR0 , VAR1 : false ) ;
TrackEntity ( VAR0 , VAR1 : false ) ; Assert . Equal ( EntityState . Added , VAR0 . State ) ; Assert . NotEqual ( Guid . NewGuid ( ) , VAR0 . Entity . VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . Entity . VAR3 ) ; VAR0 = VAR4 . Entry ( new CompositeStoat { VAR2 = VAR5 , VAR3 = LITERAL } ) ; TrackEntity ( VAR0 , VAR1 : false ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasMany ( typeof ( VAR8 ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR10 , VAR3 . Navigations . Single ( ) ) ; Assert . Same ( VAR11 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasMany ( typeof ( VAR8 ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR10 , VAR3 . Navigations . Single ( ) ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasMany ( typeof ( VAR8 ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR10 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasMany ( typeof ( VAR8 ) , LITERAL ) . WithOne ( LITERAL ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR11 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasMany ( typeof ( VAR8 ) , LITERAL ) . WithOne ( null ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasMany ( typeof ( VAR8 ) , null ) . WithOne ( LITERAL ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR11 ) ; Assert . Empty ( VAR1 . Navigations ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( VAR8 ) , LITERAL ) . WithMany ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR10 , VAR3 . Navigations . Single ( ) ) ; Assert . Same ( VAR11 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( VAR8 ) , LITERAL ) . WithMany ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR10 , VAR3 . Navigations . Single ( ) ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( VAR8 ) , LITERAL ) . WithMany ( LITERAL ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR11 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( VAR8 ) , null ) . WithMany ( LITERAL ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( VAR8 ) , null ) . WithMany ( null ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Empty ( VAR1 . Navigations ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( CustomerDetails ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) ) ; Assert . Same ( VAR10 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( CustomerDetails ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( CustomerDetails ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR9 ) ; Assert . Same ( VAR10 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( CustomerDetails ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR9 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR9 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( CustomerDetails ) , null ) . WithOne ( null ) ; var VAR8 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR9 , VAR8 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Empty ( VAR1 . Navigations ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasMany ( typeof ( VAR8 ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR10 , VAR3 . Navigations . Single ( ) ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasMany ( typeof ( VAR8 ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR11 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasMany ( typeof ( VAR8 ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR10 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasMany ( typeof ( VAR8 ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR11 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasMany ( typeof ( VAR8 ) . FullName , LITERAL ) . WithOne ( null ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
Assert . Same ( VAR0 , VAR1 . Properties . Single ( ) ) ; Assert . Same ( VAR2 , VAR1 . ReferencedProperties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR4 ) ; Assert . Equal ( LITERAL , VAR5 . Navigations . Single ( ) . VAR4 ) ; Assert . Same ( VAR1 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR1 , VAR5 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR6 , VAR5 . PropertyCount ) ; Assert . Equal ( VAR7 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( VAR8 ) . FullName , LITERAL ) . WithMany ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR10 , VAR3 . Navigations . Single ( ) ) ; Assert . Same ( VAR11 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( VAR8 ) . FullName , LITERAL ) . WithMany ( LITERAL ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR11 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( VAR8 ) . FullName , null ) . WithMany ( LITERAL ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR11 ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( VAR8 ) . FullName , null ) . WithMany ( null ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Empty ( VAR1 . Navigations ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( CustomerDetails ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) ) ; Assert . Same ( VAR10 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( CustomerDetails ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( CustomerDetails ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR9 ) ; Assert . Same ( VAR10 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( CustomerDetails ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR9 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR9 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( OrderDetails ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR9 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR9 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( CustomerDetails ) . FullName , LITERAL ) . WithOne ( null ) ; var VAR8 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR9 , VAR8 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = VAR1 . PropertyCount ; var VAR2 = VAR3 . PropertyCount ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( CustomerDetails ) . FullName , null ) . WithOne ( null ) ; var VAR8 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR9 , VAR8 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Empty ( VAR1 . Navigations ) ; Assert . Equal ( VAR0 , VAR1 . PropertyCount ) ; Assert . Equal ( VAR2 , VAR3 . PropertyCount ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ; VAR6 . AddEntry ( VAR3 ) ; var VAR7 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . SetEntityState ( EntityState . Deleted ) ; var VAR8 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ;
VAR14 = VAR1 ; VAR15 = VAR3 ; VAR16 = VAR5 ; VAR17 = VAR7 ; VAR18 = VAR9 ; VAR19 = VAR11 ; VAR20 = VAR13 ;
VAR0 . Protected ( ) . Verify ( LITERAL , Times . Once ( ) , true ) ; Assert . Equal ( 1 , VAR1 . VAR2 ) ; VAR0 = Mock . Get ( VAR1 . DbConnection ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; VAR1 . Open ( ) ; VAR1 . Close ( ) ; VAR1 . Dispose ( ) ; VAR0 . Verify ( VAR3 => VAR3 . Open ( ) , Times . Once ) ; VAR0 . Verify ( VAR3 => VAR3 . Close ( ) , Times . Once ) ; VAR0 . Protected ( ) . Verify ( LITERAL , Times . Once ( ) , true ) ;
VAR0 . AddRange ( VAR1 ) ; VAR0 . AddRange ( VAR1 ) ; VAR0 . AddRange ( new List < Product > { VAR1 } ) ; VAR0 . AddRange ( new List < object > { VAR1 } ) ; VAR0 . Attach ( VAR1 ) ; VAR0 . Attach ( ( object ) VAR1 ) ; VAR0 . AttachRange ( VAR1 ) ; VAR0 . AttachRange ( VAR1 ) ;
VAR0 . AddRange ( VAR1 ) ; VAR0 . AddRange ( VAR1 ) ; VAR0 . AddRange ( new List < Product > { VAR1 } ) ; VAR0 . AddRange ( new List < object > { VAR1 } ) ; VAR0 . Attach ( VAR1 ) ; VAR0 . Attach ( ( object ) VAR1 ) ; VAR0 . AttachRange ( VAR1 ) ; VAR0 . AttachRange ( VAR1 ) ; VAR0 . AttachRange ( new List < Product > { VAR1 } ) ; VAR0 . AttachRange ( new List < object > { VAR1 } ) ; VAR0 . Update ( VAR1 ) ; VAR0 . Update ( ( object ) VAR1 ) ; VAR0 . UpdateRange ( VAR1 ) ; VAR0 . UpdateRange ( VAR1 ) ;
VAR0 . AttachRange ( VAR1 ) ; VAR0 . AttachRange ( VAR1 ) ; VAR0 . AttachRange ( new List < Product > { VAR1 } ) ; VAR0 . AttachRange ( new List < object > { VAR1 } ) ; VAR0 . Update ( VAR1 ) ; VAR0 . Update ( ( object ) VAR1 ) ; VAR0 . UpdateRange ( VAR1 ) ; VAR0 . UpdateRange ( VAR1 ) ;
VAR0 . AttachRange ( VAR1 ) ; VAR0 . AttachRange ( VAR1 ) ; VAR0 . AttachRange ( new List < Product > { VAR1 } ) ; VAR0 . AttachRange ( new List < object > { VAR1 } ) ; VAR0 . Update ( VAR1 ) ; VAR0 . Update ( ( object ) VAR1 ) ; VAR0 . UpdateRange ( VAR1 ) ; VAR0 . UpdateRange ( VAR1 ) ; VAR0 . UpdateRange ( new List < Product > { VAR1 } ) ; VAR0 . UpdateRange ( new List < object > { VAR1 } ) ; VAR0 . Remove ( VAR1 ) ; VAR0 . Remove ( ( object ) VAR1 ) ; VAR0 . RemoveRange ( VAR1 ) ; VAR0 . RemoveRange ( VAR1 ) ;
var VAR5 = new List < InternalEntityEntry > ( ) ; var VAR1 = new CancellationTokenSource ( ) . Token ; await VAR2 . SaveChangesAsync ( VAR5 , VAR1 ) ; VAR3 . Verify ( VAR4 => VAR4 . BatchCommands ( VAR5 , VAR2 . DbContextOptions ) ) ;
var VAR7 = VAR1 . GetOrCreateEntry ( new FakeEntity { VAR2 = LITERAL , VAR3 = LITERAL } ) ; VAR7 . SetEntityState ( EntityState . Added ) ; var VAR4 = CreateCommandBatchPreparer ( ) . BatchCommands ( new [ ] { VAR7 } , new DbContextOptions ( ) ) . ToArray ( ) ; Assert . Equal ( 1 , VAR4 . Count ( ) ) ; Assert . Equal ( 1 , VAR4 . First ( ) . ModificationCommands . Count ( ) ) ; var VAR5 = VAR4 . First ( ) . ModificationCommands . Single ( ) ; Assert . Equal ( EntityState . Added , VAR5 . EntityState ) ; Assert . Equal ( LITERAL , VAR5 . ColumnModifications . Count ) ; var VAR6 = VAR5 . ColumnModifications [ 0 ] ; Assert . Equal ( LITERAL , VAR6 . ColumnName ) ; Assert . Same ( VAR7 , VAR6 . Entry ) ;
var VAR5 = VAR1 . GetOrCreateEntry ( new FakeEntity { VAR2 = LITERAL , VAR3 = LITERAL } ) ; VAR5 . SetEntityState ( EntityState . Modified ) ; VAR5 . SetPropertyModified ( VAR5 . EntityType . GetPrimaryKey ( ) . Properties . Single ( ) , isModified : false ) ; var VAR4 = CreateCommandBatchPreparer ( ) . BatchCommands ( new [ ] { VAR5 } , new DbContextOptions ( ) ) . ToArray ( ) ;
var VAR5 = VAR1 . GetOrCreateEntry ( VAR2 ) ; VAR5 . SetEntityState ( EntityState . Added ) ; var VAR6 = VAR1 . GetOrCreateEntry ( new RelatedFakeEntity { VAR4 = LITERAL } ) ; VAR6 . SetEntityState ( EntityState . Added ) ;
var VAR5 = Createentry ( EntityState . Added , VAR1 : true ) ; VAR5 . MarkAsTemporary ( VAR5 . EntityType . GetPrimaryKey ( ) . Properties [ 0 ] ) ; var VAR2 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) , VAR3 => VAR3 . Relational ( ) ) ; VAR2 . AddEntry ( VAR5 ) ; Assert . Equal ( LITERAL , VAR2 . SchemaQualifiedName ) ; Assert . Equal ( EntityState . Added , VAR2 . EntityState ) ; Assert . Equal ( LITERAL , VAR2 . ColumnModifications . Count ) ; var VAR4 = VAR2 . ColumnModifications [ 0 ] ; Assert . Equal ( LITERAL , VAR4 . ColumnName ) ; Assert . Same ( VAR5 , VAR4 . Entry ) ;
Assert . Same ( VAR4 , VAR1 . Entry ) ; Assert . Equal ( LITERAL , VAR1 . Property . VAR2 ) ; Assert . False ( VAR1 . IsCondition ) ; Assert . True ( VAR1 . IsKey ) ; Assert . True ( VAR1 . IsRead ) ; Assert . False ( VAR1 . IsWrite ) ; VAR1 = VAR3 . ColumnModifications [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . ColumnName ) ; Assert . Same ( VAR4 , VAR1 . Entry ) ;
var VAR4 = Createentry ( EntityState . Added , VAR1 : true ) ; VAR4 . MarkAsTemporary ( VAR4 . EntityType . GetPrimaryKey ( ) . Properties [ 0 ] , isTemporary : false ) ; var VAR2 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) , VAR3 => VAR3 . Relational ( ) ) ; VAR2 . AddEntry ( VAR4 ) ;
var VAR5 = Createentry ( EntityState . Added , VAR1 : true ) ; VAR5 . MarkAsTemporary ( VAR5 . EntityType . GetPrimaryKey ( ) . Properties [ 0 ] , isTemporary : false ) ; var VAR2 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) , VAR3 => VAR3 . Relational ( ) ) ; VAR2 . AddEntry ( VAR5 ) ; Assert . Equal ( LITERAL , VAR2 . SchemaQualifiedName ) ; Assert . Equal ( EntityState . Added , VAR2 . EntityState ) ; Assert . Equal ( LITERAL , VAR2 . ColumnModifications . Count ) ; var VAR4 = VAR2 . ColumnModifications [ 0 ] ; Assert . Equal ( LITERAL , VAR4 . ColumnName ) ; Assert . Same ( VAR5 , VAR4 . Entry ) ;
var VAR4 = Createentry ( EntityState . Added , VAR1 : true ) ; VAR4 . MarkAsTemporary ( VAR4 . EntityType . GetPrimaryKey ( ) . Properties [ 0 ] ) ; var VAR2 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) , VAR3 => VAR3 . Relational ( ) ) ; VAR2 . AddEntry ( VAR4 ) ;
var VAR4 = VAR1 . Entry ( VAR2 ) . InternalEntry ; Assert . False ( VAR3 . GetterCalled ) ; Assert . False ( VAR3 . SetterCalled ) ; Assert . Equal ( 0 , VAR4 [ VAR3 ] ) ; Assert . True ( VAR3 . GetterCalled ) ; VAR4 [ VAR3 ] = LITERAL ; Assert . True ( VAR3 . SetterCalled ) ; Assert . Equal ( LITERAL , VAR4 [ VAR3 ] ) ;
Assert . Equal ( 0 , VAR2 [ VAR1 ] ) ; Assert . True ( VAR1 . GetterCalled ) ; VAR2 [ VAR1 ] = LITERAL ; Assert . True ( VAR1 . SetterCalled ) ; Assert . Equal ( LITERAL , VAR2 [ VAR1 ] ) ;
VAR0 . ChangeTracker . TrackGraph ( CreateSimpleGraph ( 1 ) ) ; VAR0 . ChangeTracker . TrackGraph ( CreateSimpleGraph ( LITERAL ) , VAR1 => VAR1 . State = EntityState . Unchanged ) ; VAR0 . ChangeTracker . UpdateGraph ( CreateSimpleGraph ( LITERAL ) ) ; VAR0 . ChangeTracker . TrackGraph ( CreateSimpleGraph ( LITERAL ) ) ; VAR0 . ChangeTracker . TrackGraph ( CreateSimpleGraph ( LITERAL ) , VAR1 => VAR1 . State = EntityState . Unchanged ) ;
var VAR3 = VAR1 . Add ( VAR2 ) . InternalEntry ; VAR1 . Entry ( VAR2 ) . State = EntityState . Modified ; Assert . Equal ( EntityState . Modified , VAR3 . EntityState ) ; Assert . Equal ( EntityState . Modified , VAR1 . Entry ( VAR2 ) . State ) ; VAR1 . Entry ( ( object ) VAR2 ) . State = EntityState . Unchanged ; Assert . Equal ( EntityState . Unchanged , VAR3 . EntityState ) ;
ChangeStateOnEntry ( EntityState . Detached , EntityState . Detached ) ; ChangeStateOnEntry ( EntityState . Unchanged , EntityState . Detached ) ; ChangeStateOnEntry ( EntityState . Deleted , EntityState . Detached ) ; ChangeStateOnEntry ( EntityState . Modified , EntityState . Detached ) ; ChangeStateOnEntry ( EntityState . Added , EntityState . Detached ) ;
var VAR4 = CreateInternalEntryMock ( VAR1 ) ; var VAR2 = new Mock < Sidecar > ( ) ; VAR4 . Setup ( VAR3 => VAR3 . OriginalValues ) . Returns ( VAR2 . Object ) ; new PropertyEntry ( VAR4 . Object , LITERAL ) . OriginalValue = LITERAL ;
ChangeStateWithMethod ( ( VAR0 , VAR1 ) => VAR0 . VAR2 . Remove ( VAR1 ) , EntityState . Detached , EntityState . Deleted ) ; ChangeStateWithMethod ( ( VAR0 , VAR1 ) => VAR0 . VAR2 . Remove ( VAR1 ) , EntityState . Unchanged , EntityState . Deleted ) ; ChangeStateWithMethod ( ( VAR0 , VAR1 ) => VAR0 . VAR2 . Remove ( VAR1 ) , EntityState . Deleted , EntityState . Deleted ) ; ChangeStateWithMethod ( ( VAR0 , VAR1 ) => VAR0 . VAR2 . Remove ( VAR1 ) , EntityState . Modified , EntityState . Deleted ) ; ChangeStateWithMethod ( ( VAR0 , VAR1 ) => VAR0 . VAR2 . Remove ( VAR1 ) , EntityState . Added , EntityState . Detached ) ;
VerifySingleton < EntityEntryMetadataServices > ( ) ; VerifySingleton < ICompiledQueryCache > ( ) ; VerifySingleton < ILoggerFactory > ( ) ; VerifySingleton < ITypeActivator > ( ) ; VerifyScoped < ForeignKeyValuePropagator > ( ) ; VerifyScoped < NavigationFixer > ( ) ; VerifyScoped < StateManager > ( ) ; VerifyScoped < InternalEntityEntryFactory > ( ) ; VerifyScoped < InternalEntityEntryNotifier > ( ) ; VerifyScoped < InternalEntityEntrySubscriber > ( ) ;
var VAR6 = VAR1 . ChangeTracker . StateManager . CreateNewEntry ( VAR2 ) ; VAR3 = ( T ) VAR6 . Entity ; VAR6 [ VAR4 ] = LITERAL ; VAR6 [ VAR5 ] = LITERAL ; VAR6 . SetEntityState ( EntityState . Added ) ;
var VAR0 = new VAR1 { VAR14 = Guid . NewGuid ( ) , VAR2 = LITERAL } ; var VAR3 = new VAR1 { VAR14 = Guid . NewGuid ( ) , VAR2 = LITERAL } ; var VAR4 = new VAR5 { VAR14 = 1 , VAR6 = LITERAL , VAR7 = { VAR0 , VAR3 } } ; var VAR8 = VAR9 . GetOrCreateEntry ( VAR4 ) ; VAR8 . SetEntityState ( EntityState . Unchanged ) ; var VAR10 = new VAR1 { VAR11 = new ProductTag ( ) } ; VAR4 . VAR7 . Add ( VAR10 ) ; VAR12 . DetectChanges ( VAR9 ) ; Assert . Equal ( EntityState . Unchanged , VAR8 . EntityState ) ; Assert . Equal ( VAR4 . VAR6 , VAR10 . VAR2 ) ; Assert . Same ( VAR4 , VAR10 . VAR5 ) ; Assert . Equal ( new [ ] { VAR0 , VAR3 , VAR10 } . OrderBy ( VAR13 => VAR13 . VAR14 ) , VAR4 . VAR7 . OrderBy ( VAR13 => VAR13 . VAR14 ) . ToArray ( ) ) ;
var VAR0 = new NotifyingCategory { VAR8 = LITERAL , VAR1 = 1 } ; var VAR2 = new NotifyingProduct { VAR8 = Guid . NewGuid ( ) , VAR3 = VAR0 , VAR4 = 1 } ; var VAR5 = VAR6 . GetOrCreateEntry ( VAR2 ) ; VAR5 . SetEntityState ( EntityState . Unchanged ) ; var VAR7 = new NotifyingCategory { VAR8 = LITERAL , VAR1 = LITERAL } ;
var VAR0 = new NotifyingCategory { VAR5 = 1 , VAR1 = LITERAL } ; var VAR2 = VAR3 . GetOrCreateEntry ( VAR0 ) ; VAR2 . SetEntityState ( EntityState . Unchanged ) ; var VAR4 = new NotifyingCategoryTag { VAR5 = LITERAL } ;
var VAR0 = new ProductDetail { VAR1 = LITERAL } ; var VAR2 = VAR3 . StartTracking ( VAR3 . GetOrCreateEntry ( VAR4 ) ) ; var VAR5 = VAR3 . StartTracking ( VAR3 . GetOrCreateEntry ( VAR0 ) ) ; var VAR6 = CreateNavigationFixer ( VAR7 ) ; VAR2 . SetEntityState ( EntityState . Added ) ; Assert . Null ( VAR0 . VAR8 ) ; Assert . Null ( VAR4 . VAR9 ) ; VAR0 . VAR1 = LITERAL ; VAR6 . ForeignKeyPropertyChanged ( VAR5 , VAR10 . GetEntityType ( typeof ( ProductDetail ) ) . GetProperty ( LITERAL ) , LITERAL , LITERAL ) ;
var VAR0 = VAR1 . Build ( VAR2 , new Dictionary < string , object > ( ) ) ; Assert . Equal ( LITERAL , VAR0 . CommandTimeout ) ; VAR3 . Database . AsRelational ( ) . Connection . CommandTimeout = LITERAL ; var VAR4 = VAR1 . Build ( VAR2 , new Dictionary < string , object > ( ) ) ;
var VAR0 = VAR1 . GetRequiredService < ModelSource > ( ) ; VAR2 . Dispose ( ) ; VAR2 = new EarlyLearningCenter ( VAR3 ) ; VAR1 = ( ( IAccessor < IServiceProvider > ) VAR2 ) . Service ; var VAR4 = VAR1 . GetRequiredService < StateManager > ( ) ; Assert . Same ( VAR4 , VAR1 . GetRequiredService < StateManager > ( ) ) ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < ModelSource > ( ) ) ;
Assert . Same ( VAR0 , VAR1 . GetRequiredService < ModelSource > ( ) ) ; VAR2 . Dispose ( ) ; VAR2 = new EarlyLearningCenter ( VAR3 ) ; VAR1 = ( ( IAccessor < IServiceProvider > ) VAR2 ) . Service ; Assert . NotSame ( VAR4 , VAR1 . GetRequiredService < StateManager > ( ) ) ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < ModelSource > ( ) ) ;
var VAR0 = ( ( IAccessor < IServiceProvider > ) VAR1 ) . Service ; var VAR2 = VAR0 . GetRequiredService < IModelSource > ( ) ; VAR1 . Dispose ( ) ; VAR1 = new EarlyLearningCenter ( VAR3 ) ; VAR0 = ( ( IAccessor < IServiceProvider > ) VAR1 ) . Service ; var VAR4 = VAR0 . GetRequiredService < StateManager > ( ) ; Assert . Same ( VAR4 , VAR0 . GetRequiredService < StateManager > ( ) ) ; Assert . Same ( VAR2 , VAR0 . GetRequiredService < IModelSource > ( ) ) ; VAR1 . Dispose ( ) ; VAR1 = new EarlyLearningCenter ( VAR3 ) ; VAR0 = ( ( IAccessor < IServiceProvider > ) VAR1 ) . Service ;
VAR0 = ( ( IAccessor < IServiceProvider > ) VAR1 ) . Service ; var VAR2 = VAR0 . GetRequiredService < StateManager > ( ) ; Assert . Same ( VAR2 , VAR0 . GetRequiredService < StateManager > ( ) ) ; Assert . Same ( VAR3 , VAR0 . GetRequiredService < IModelSource > ( ) ) ; VAR1 . Dispose ( ) ; VAR1 = new EarlyLearningCenter ( VAR4 ) ; VAR0 = ( ( IAccessor < IServiceProvider > ) VAR1 ) . Service ;
VAR0 . Sponsors . RemoveRange ( VAR0 . Sponsors ) ; VAR0 . Set < TitleSponsor > ( ) . RemoveRange ( VAR0 . Set < TitleSponsor > ( ) ) ; VAR0 . Drivers . RemoveRange ( VAR0 . Drivers ) ; VAR0 . Set < TestDriver > ( ) . RemoveRange ( VAR0 . Set < TestDriver > ( ) ) ; VAR0 . Teams . RemoveRange ( VAR0 . Teams ) ; VAR0 . Engines . RemoveRange ( VAR0 . Engines ) ; VAR0 . EngineSuppliers . RemoveRange ( VAR0 . EngineSuppliers ) ;
VAR0 . Set < OrderDetail > ( ) . RemoveRange ( VAR0 . Set < OrderDetail > ( ) ) ; VAR0 . Set < Product > ( ) . RemoveRange ( VAR0 . Set < Product > ( ) ) ; VAR0 . Set < Order > ( ) . RemoveRange ( VAR0 . Set < Order > ( ) ) ; VAR0 . Set < Employee > ( ) . RemoveRange ( VAR0 . Set < Employee > ( ) ) ; VAR0 . Set < Customer > ( ) . RemoveRange ( VAR0 . Set < Customer > ( ) ) ;
VAR0 . Entry ( VAR1 ) . State = EntityState . Unchanged ; Assert . Equal ( 1 , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR3 . VAR4 . Single ( ) ) ; Assert . Same ( VAR3 , VAR1 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unknown , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Modified , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Entry ( VAR3 ) . State = EntityState . Unchanged ;
VAR0 . Entry ( VAR1 ) . State = EntityState . Unchanged ; Assert . Equal ( 1 , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR3 . VAR4 . Single ( ) ) ; Assert . Same ( VAR3 , VAR1 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unknown , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Modified , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Entry ( VAR3 ) . State = EntityState . Unchanged ;
VAR0 . Entry ( VAR1 ) . State = EntityState . Unchanged ; Assert . Equal ( 1 , VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR1 . VAR4 . Single ( ) ) ; Assert . Same ( VAR1 , VAR2 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Unknown , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Entry ( VAR2 ) . State = EntityState . Unchanged ;
var VAR0 = VAR1 . GetRequiredService < StateManager > ( ) . GetOrCreateEntry ( VAR2 ) ; VAR0 . SetEntityState ( EntityState . Added ) ; var VAR3 = VAR1 . GetRequiredService < InMemoryDataStore > ( ) ; await VAR3 . SaveChangesAsync ( new [ ] { VAR0 } ) ; VAR2 . VAR4 = LITERAL ; VAR0 . SetEntityState ( EntityState . Modified ) ;
var VAR0 = VAR1 . GetOrCreateEntry ( new FakeEntity { VAR2 = LITERAL , VAR3 = LITERAL } ) ; VAR0 . SetEntityState ( EntityState . Added ) ; var VAR4 = VAR1 . GetOrCreateEntry ( new RelatedFakeEntity { VAR2 = LITERAL } ) ; VAR4 . SetEntityState ( EntityState . Added ) ;
var VAR0 = VAR1 . GetOrCreateEntry ( new FakeEntity { VAR2 = LITERAL , VAR3 = LITERAL } ) ; VAR0 . SetEntityState ( EntityState . Added ) ; var VAR4 = VAR1 . GetOrCreateEntry ( new RelatedFakeEntity { VAR2 = LITERAL } ) ; VAR4 . SetEntityState ( EntityState . Modified ) ;
var VAR0 = VAR1 . GetOrCreateEntry ( new FakeEntity { VAR2 = LITERAL , VAR3 = LITERAL } ) ; VAR0 . SetEntityState ( EntityState . Deleted ) ; var VAR4 = VAR1 . GetOrCreateEntry ( new FakeEntity { VAR2 = LITERAL , VAR3 = LITERAL } ) ; VAR4 . SetEntityState ( EntityState . Added ) ; var VAR5 = VAR1 . GetOrCreateEntry ( new RelatedFakeEntity { VAR2 = 1 , VAR6 = LITERAL } ) ; VAR5 . SetEntityState ( EntityState . Modified ) ; VAR5 . OriginalValues [ VAR5 . EntityType . GetProperty ( LITERAL ) ] = LITERAL ; VAR5 . SetPropertyModified ( VAR5 . EntityType . GetPrimaryKey ( ) . Properties . Single ( ) , isModified : false ) ;
var VAR0 = VAR1 . Add ( new Unicorn { VAR2 = VAR3 , VAR4 = LITERAL } ) . Entity ; Assert . True ( VAR0 . VAR5 < 0 ) ; Assert . NotEqual ( Guid . Empty , VAR0 . VAR6 ) ; await VAR1 . SaveChangesAsync ( ) ; Assert . True ( VAR0 . VAR5 > 0 ) ; VAR7 = VAR0 . VAR5 ; VAR8 = VAR0 . VAR6 ;
VAR1 . SetEntityState ( EntityState . Added ) ; Assert . Same ( VAR2 , VAR3 . VAR4 ) ; Assert . Same ( VAR3 , VAR2 . VAR5 ) ; Assert . Null ( VAR6 . VAR5 ) ; Assert . Null ( VAR7 . VAR4 ) ; VAR8 . SetEntityState ( EntityState . Added ) ; VAR9 . SetEntityState ( EntityState . Added ) ;
VAR1 . SetEntityState ( EntityState . Added ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Null ( VAR4 . VAR3 ) ; Assert . Null ( VAR5 . VAR3 ) ; Assert . Same ( VAR4 , VAR2 . VAR6 ) ; Assert . Null ( VAR2 . VAR7 ) ; Assert . Same ( VAR5 , VAR4 . VAR6 ) ; Assert . Same ( VAR2 , VAR4 . VAR7 ) ; Assert . Null ( VAR5 . VAR6 ) ; Assert . Null ( VAR5 . VAR7 ) ; VAR8 . SetEntityState ( EntityState . Added ) ;
VAR1 . SetEntityState ( EntityState . Added ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Null ( VAR4 . VAR3 ) ; Assert . Null ( VAR5 . VAR3 ) ; Assert . Same ( VAR4 , VAR2 . VAR6 ) ; Assert . Null ( VAR2 . VAR7 ) ; Assert . Null ( VAR4 . VAR6 ) ; Assert . Same ( VAR2 , VAR4 . VAR7 ) ; Assert . Null ( VAR5 . VAR6 ) ; Assert . Same ( VAR4 , VAR5 . VAR7 ) ; VAR8 . SetEntityState ( EntityState . Added ) ;
var VAR0 = new InternalModelBuilder ( new Model ( ) , new ConventionsDispatcher ( ) ) ; var VAR1 = VAR0 . Entity ( typeof ( VAR2 ) , ConfigurationSource . Explicit ) ; VAR1 . PrimaryKey ( new [ ] { VAR2 . VAR3 , VAR2 . VAR4 } , ConfigurationSource . Explicit ) ; var VAR5 = VAR0 . Entity ( typeof ( Order ) , ConfigurationSource . Explicit ) ; VAR5 . PrimaryKey ( new [ ] { Order . VAR3 } , ConfigurationSource . Explicit ) ;
var VAR0 = new InternalModelBuilder ( new Model ( ) , new ConventionsDispatcher ( ) ) ; var VAR1 = VAR0 . Entity ( typeof ( VAR2 ) , ConfigurationSource . Explicit ) ; VAR1 . PrimaryKey ( new [ ] { VAR2 . VAR3 , VAR2 . VAR4 } , ConfigurationSource . Explicit ) ; var VAR5 = VAR0 . Entity ( typeof ( Order ) , ConfigurationSource . Explicit ) ; VAR5 . PrimaryKey ( new [ ] { Order . VAR3 } , ConfigurationSource . Explicit ) ;
VAR0 . HasMany ( VAR1 => VAR1 . VAR2 ) . WithOne ( VAR1 => VAR1 . VAR3 ) ; VAR0 . HasOne ( VAR1 => VAR1 . VAR4 ) . WithOne ( VAR1 => VAR1 . VAR3 ) . ForeignKey < ProductDetail > ( VAR1 => VAR1 . VAR9 ) ; VAR5 . Entity < VAR3 > ( VAR0 => { VAR0 . HasMany ( VAR1 => VAR1 . VAR2 ) . WithOne ( VAR1 => VAR1 . VAR3 ) ; VAR0 . HasOne ( VAR1 => VAR1 . VAR4 ) . WithOne ( VAR1 => VAR1 . VAR3 ) . ForeignKey < ProductDetail > ( VAR1 => VAR1 . VAR9 ) ; } ) ; VAR5 . Entity < VAR6 > ( ) . HasMany ( VAR1 => VAR1 . VAR7 ) . WithOne ( VAR1 => VAR1 . VAR6 ) ; VAR5 . Entity < ProductDetail > ( ) ; VAR5 . Entity < VAR8 > ( ) . HasMany ( VAR1 => VAR1 . VAR2 ) . WithOne ( VAR1 => VAR1 . VAR8 ) ;
Assert . Equal ( - 1 , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; VAR0 [ VAR1 ] = LITERAL ; VAR0 [ VAR2 ] = LITERAL ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; Assert . Equal ( - 1 , VAR3 . VAR4 ) ;
Assert . Equal ( - 1 , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; VAR0 [ VAR1 ] = LITERAL ; VAR0 [ VAR2 ] = LITERAL ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; Assert . Equal ( - 1 , VAR3 . VAR4 ) ;
Assert . Equal ( - 1 , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; VAR0 [ VAR2 ] = LITERAL ; Assert . Equal ( - 1 , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; Assert . Equal ( - 1 , VAR3 . VAR4 ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . HasMany ( typeof ( VAR2 ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR3 , VAR4 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR5 , VAR4 . Navigations . Single ( ) ) ; Assert . Same ( VAR6 , VAR7 . Navigations . Single ( ) ) ; Assert . Same ( VAR3 , VAR4 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR7 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR8 , VAR7 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . HasMany ( typeof ( VAR2 ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR3 , VAR4 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR4 . Navigations . Single ( ) . VAR5 ) ; Assert . Equal ( LITERAL , VAR6 . Navigations . Single ( ) . VAR5 ) ; Assert . Same ( VAR3 , VAR4 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR6 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR7 , VAR6 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . HasOne ( typeof ( VAR2 ) , LITERAL ) . WithMany ( LITERAL ) ; Assert . Same ( VAR3 , VAR4 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR5 , VAR4 . Navigations . Single ( ) ) ; Assert . Same ( VAR6 , VAR7 . Navigations . Single ( ) ) ; Assert . Same ( VAR3 , VAR4 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR7 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR8 , VAR7 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . HasOne ( typeof ( VAR2 ) , LITERAL ) . WithMany ( LITERAL ) ; Assert . Same ( VAR3 , VAR4 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR5 , VAR4 . Navigations . Single ( ) ) ; Assert . Equal ( LITERAL , VAR6 . Navigations . Single ( ) . VAR7 ) ; Assert . Same ( VAR3 , VAR4 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR6 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR8 , VAR6 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . HasOne ( typeof ( VAR2 ) , LITERAL ) . WithMany ( LITERAL ) ; Assert . Same ( VAR3 , VAR4 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR4 . Navigations . Single ( ) . VAR5 ) ; Assert . Equal ( LITERAL , VAR6 . Navigations . Single ( ) . VAR5 ) ; Assert . Same ( VAR3 , VAR4 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR6 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR7 , VAR6 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . HasOne ( typeof ( CustomerDetails ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR2 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR4 , VAR3 . Navigations . Single ( ) ) ; Assert . Same ( VAR5 , VAR6 . Navigations . Single ( ) ) ; Assert . Same ( VAR2 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR6 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR7 , VAR6 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . HasOne ( typeof ( CustomerDetails ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR2 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Same ( VAR4 , VAR3 . Navigations . Single ( ) ) ; Assert . Equal ( LITERAL , VAR5 . Navigations . Single ( ) . VAR6 ) ; Assert . Same ( VAR2 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR5 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR7 , VAR5 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . HasOne ( typeof ( CustomerDetails ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR2 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR4 ) ; Assert . Same ( VAR5 , VAR6 . Navigations . Single ( ) ) ; Assert . Same ( VAR2 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR6 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR7 , VAR6 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) . FullName ) . HasMany ( typeof ( VAR2 ) . FullName , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR3 , VAR4 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR4 . Navigations . Single ( ) . VAR5 ) ; Assert . Equal ( LITERAL , VAR6 . Navigations . Single ( ) . VAR5 ) ; Assert . Same ( VAR3 , VAR4 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR6 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR7 , VAR6 . Properties . Count ) ;
var VAR0 = CreateModelBuilder ( VAR1 ) ; VAR0 . Entity < VAR2 > ( ) ; VAR0 . Entity < VAR3 > ( ) ; VAR0 . Ignore < OrderDetails > ( ) ; VAR0 . Ignore < CustomerDetails > ( ) ; var VAR4 = VAR1 . GetEntityType ( typeof ( VAR3 ) ) ; var VAR5 = VAR1 . GetEntityType ( typeof ( VAR2 ) ) ; var VAR6 = VAR4 . GetProperty ( LITERAL ) ; var VAR7 = VAR5 . Keys . Single ( ) ; var VAR8 = VAR4 . Keys . Single ( ) ;
var VAR0 = CreateModelBuilder ( VAR1 ) ; VAR0 . Entity < VAR2 > ( ) ; VAR0 . Entity < VAR3 > ( ) ; VAR0 . Ignore < OrderDetails > ( ) ; VAR0 . Ignore < CustomerDetails > ( ) ; var VAR4 = VAR1 . GetEntityType ( typeof ( VAR3 ) ) ; var VAR5 = VAR1 . GetEntityType ( typeof ( VAR2 ) ) ; var VAR6 = VAR4 . GetProperty ( LITERAL ) ; var VAR7 = VAR5 . Keys . Single ( ) ; var VAR8 = VAR4 . Keys . Single ( ) ;
var VAR0 = CreateModelBuilder ( VAR1 ) ; VAR0 . Entity < VAR2 > ( ) ; VAR0 . Entity < VAR3 > ( ) ; VAR0 . Ignore < OrderDetails > ( ) ; VAR0 . Ignore < CustomerDetails > ( ) ; var VAR4 = VAR1 . GetEntityType ( typeof ( VAR3 ) ) ; var VAR5 = VAR1 . GetEntityType ( typeof ( VAR2 ) ) ; var VAR6 = VAR4 . GetProperty ( LITERAL ) ; var VAR7 = VAR4 . ForeignKeys . Single ( ) ; Assert . Same ( VAR6 , VAR7 . Properties . Single ( ) ) ; var VAR8 = VAR5 . Keys . Single ( ) ; var VAR9 = VAR4 . Keys . Single ( ) ;
var VAR0 = CreateModelBuilder ( VAR1 ) ; VAR0 . Entity < VAR2 > ( ) ; VAR0 . Entity < VAR3 > ( ) ; VAR0 . Ignore < OrderDetails > ( ) ; VAR0 . Ignore < CustomerDetails > ( ) ; var VAR4 = VAR1 . GetEntityType ( typeof ( VAR3 ) ) ; var VAR5 = VAR1 . GetEntityType ( typeof ( VAR2 ) ) ; var VAR6 = VAR4 . GetProperty ( LITERAL ) ; var VAR7 = VAR5 . Keys . Single ( ) ; var VAR8 = VAR4 . Keys . Single ( ) ;
Assert . Same ( VAR0 , new RelationshipDiscoveryConvention ( ) . Apply ( VAR0 ) ) ; var VAR1 = VAR0 . Metadata ; var VAR2 = VAR1 . ForeignKeys . Single ( ) ; Assert . Null ( VAR2 . IsRequired ) ; Assert . False ( ( ( IForeignKey ) VAR2 ) . IsUnique ) ; VAR2 . IsRequired = true ; VAR2 . IsUnique = true ; Assert . Same ( VAR0 , new RelationshipDiscoveryConvention ( ) . Apply ( VAR0 ) ) ;
VAR10 = VAR1 ; VAR11 = VAR3 ; VAR12 = VAR5 ; VAR13 = VAR7 ; VAR14 = VAR9 ;
var VAR0 = VAR1 . SimpleEntities . Add ( new SimpleEntity { StringProperty = LITERAL } ) . Entity ; SetPartitionId ( VAR0 , VAR1 ) ; Assert . Equal ( 1 , VAR1 . SaveChanges ( ) ) ; var VAR2 = VAR1 . SimpleEntities . Add ( new SimpleEntity { Id = LITERAL , StringProperty = LITERAL } ) . Entity ; var VAR3 = VAR1 . Model . GetEntityType ( typeof ( SimpleEntity ) ) . GetProperty ( SimpleEntity . ShadowPropertyName ) ; VAR1 . ChangeTracker . Entry ( VAR2 ) . StateEntry [ VAR3 ] = LITERAL ; SetPartitionId ( VAR2 , VAR1 ) ;
VAR0 . Sponsors . Remove ( VAR0 . Sponsors . ToArray ( ) ) ; VAR0 . Set < TitleSponsor > ( ) . Remove ( VAR0 . Set < TitleSponsor > ( ) . ToArray ( ) ) ; VAR0 . Drivers . Remove ( VAR0 . Drivers . ToArray ( ) ) ; VAR0 . Set < TestDriver > ( ) . Remove ( VAR0 . Set < TestDriver > ( ) . ToArray ( ) ) ; VAR0 . Teams . Remove ( VAR0 . Teams . ToArray ( ) ) ; VAR0 . Engines . Remove ( VAR0 . Engines . ToArray ( ) ) ; VAR0 . EngineSuppliers . Remove ( VAR0 . EngineSuppliers . ToArray ( ) ) ;
VAR0 . Entity < VAR1 > ( ) . ForeignKey < VAR2 > ( VAR3 => VAR3 . VAR4 ) ; VAR0 . Ignore < OrderDetails > ( ) ; VAR0 . Ignore < CustomerDetails > ( ) ; var VAR5 = VAR6 . GetEntityType ( typeof ( VAR1 ) ) ; var VAR7 = VAR6 . GetEntityType ( typeof ( VAR2 ) ) ; var VAR8 = VAR5 . ForeignKeys . Single ( ) ; var VAR9 = VAR7 . GetOrAddNavigation ( LITERAL , VAR8 , pointsToPrincipal : false ) ; var VAR12 = VAR7 . Keys . Single ( ) ;
VAR0 . Entity < VAR1 > ( ) ; VAR0 . Ignore < OrderDetails > ( ) ; VAR0 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR3 . GetEntityType ( typeof ( VAR1 ) ) ; var VAR4 = VAR3 . GetEntityType ( typeof ( VAR5 ) ) ; var VAR6 = VAR2 . GetProperty ( LITERAL ) ; var VAR9 = VAR4 . Keys . Single ( ) ;
VAR0 . Entity < VAR1 > ( ) ; VAR0 . Ignore < OrderDetails > ( ) ; VAR0 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR3 . GetEntityType ( typeof ( VAR1 ) ) ; var VAR4 = VAR3 . GetEntityType ( typeof ( VAR5 ) ) ; var VAR6 = VAR2 . GetProperty ( LITERAL ) ; var VAR9 = VAR4 . Keys . Single ( ) ;
VAR0 . Set < OrderDetail > ( ) . Remove ( VAR0 . Set < OrderDetail > ( ) . ToArray ( ) ) ; VAR0 . Set < Product > ( ) . Remove ( VAR0 . Set < Product > ( ) . ToArray ( ) ) ; VAR0 . Set < Order > ( ) . Remove ( VAR0 . Set < Order > ( ) . ToArray ( ) ) ; VAR0 . Set < Employee > ( ) . Remove ( VAR0 . Set < Employee > ( ) . ToArray ( ) ) ; VAR0 . Set < Customer > ( ) . Remove ( VAR0 . Set < Customer > ( ) . ToArray ( ) ) ;
var VAR0 = ( await VAR1 . AddAsync ( new Unicorn { VAR2 = VAR3 , VAR4 = LITERAL } ) ) . Entity ; Assert . True ( VAR0 . VAR5 > 0 ) ; Assert . NotEqual ( Guid . Empty , VAR0 . VAR6 ) ; await VAR1 . SaveChangesAsync ( ) ; VAR7 = VAR0 . VAR5 ; VAR8 = VAR0 . VAR6 ;
var VAR0 = ( await VAR1 . AddAsync ( new Unicorn { VAR2 = VAR3 , VAR4 = LITERAL } ) ) . Entity ; Assert . True ( VAR0 . VAR5 < 0 ) ; Assert . NotEqual ( Guid . Empty , VAR0 . VAR6 ) ; await VAR1 . SaveChangesAsync ( ) ; Assert . True ( VAR0 . VAR5 > 0 ) ; VAR7 = VAR0 . VAR5 ; VAR8 = VAR0 . VAR6 ;
var VAR0 = VAR1 . VAR2 . ToArray ( ) ; Assert . Equal ( VAR0 . Length , VAR0 . Count ( VAR3 => VAR3 . VAR4 == LITERAL ) * LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ 0 ] ) . VAR4 ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ 1 ] ) . VAR4 ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ LITERAL ] ) . VAR4 ) ; VAR1 . VAR2 . Remove ( VAR0 ) ;
VAR0 = await VAR1 . NextAsync ( VAR2 , new DbContextService < DataStoreServices > ( ( ) => null ) ) ; Assert . Equal ( 1 , VAR0 . Value ) ; Assert . False ( VAR0 . IsTemporary ) ; VAR0 = await VAR1 . NextAsync ( VAR2 , new DbContextService < DataStoreServices > ( ( ) => null ) ) ;
VAR0 = VAR1 . GetRequiredService < DbContextService < DataStore > > ( ) . Service ; VAR2 = VAR1 . GetRequiredService < DbContextService < DataStoreCreator > > ( ) . Service ; VAR3 = VAR1 . GetRequiredService < DbContextService < DataStoreConnection > > ( ) . Service ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < DbContextService < DataStore > > ( ) . Service ) ; Assert . Same ( VAR2 , VAR1 . GetRequiredService < DbContextService < DataStoreCreator > > ( ) . Service ) ; Assert . Same ( VAR3 , VAR1 . GetRequiredService < DbContextService < DataStoreConnection > > ( ) . Service ) ;
VAR0 = VAR1 . GetRequiredService < DbContextService < DataStore > > ( ) . Service ; VAR2 = VAR1 . GetRequiredService < DbContextService < DataStoreCreator > > ( ) . Service ; VAR3 = VAR1 . GetRequiredService < DbContextService < DataStoreConnection > > ( ) . Service ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < DbContextService < DataStore > > ( ) . Service ) ; Assert . Same ( VAR2 , VAR1 . GetRequiredService < DbContextService < DataStoreCreator > > ( ) . Service ) ; Assert . Same ( VAR3 , VAR1 . GetRequiredService < DbContextService < DataStoreConnection > > ( ) . Service ) ;
var VAR0 = VAR1 . GetRequiredService < ContextService < IDbContextOptions > > ( ) ; var VAR2 = VAR1 . GetRequiredService < ILoggerFactory > ( ) ; VAR2 . AddProvider ( VAR3 ) ; var VAR4 = RelationalOptionsExtension . Extract ( VAR0 . Service ) ;
VAR0 = VAR1 . GetRequiredService < ContextService < DataStore > > ( ) . Service ; VAR2 = VAR1 . GetRequiredService < ContextService < DataStoreCreator > > ( ) . Service ; VAR3 = VAR1 . GetRequiredService < ContextService < DataStoreConnection > > ( ) . Service ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < ContextService < DataStore > > ( ) . Service ) ; Assert . Same ( VAR2 , VAR1 . GetRequiredService < ContextService < DataStoreCreator > > ( ) . Service ) ; Assert . Same ( VAR3 , VAR1 . GetRequiredService < ContextService < DataStoreConnection > > ( ) . Service ) ;
Assert . True ( VAR0 . Ignore ( typeof ( VAR1 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR0 . Entity ( typeof ( VAR1 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . NotNull ( VAR0 . Entity ( typeof ( VAR1 ) , ConfigurationSource . Explicit ) ) ; Assert . False ( VAR0 . Ignore ( typeof ( VAR1 ) , ConfigurationSource . DataAnnotation ) ) ;
var VAR0 = VAR1 . Entity ( typeof ( Order ) , ConfigurationSource . Convention ) ; Assert . NotNull ( VAR0 . ForeignKey ( typeof ( VAR2 ) , new [ ] { Order . VAR3 } , ConfigurationSource . Explicit ) ) ; Assert . False ( VAR1 . Ignore ( typeof ( VAR2 ) , ConfigurationSource . DataAnnotation ) ) ;
var VAR5 = TestHelpers . CreateContextServices ( VAR1 ) ; var VAR2 = CreateStateEntry ( VAR5 , VAR3 , new SomeEntity ( ) ) ; VAR2 [ VAR4 ] = 1 ; VAR2 . EntityState = EntityState . Added ; VAR2 . EntityState = EntityState . Unknown ; Assert . Equal ( EntityState . Unknown , VAR2 . EntityState ) ; Assert . DoesNotContain ( VAR2 , VAR5 . GetRequiredService < StateManager > ( ) . StateEntries ) ;
var VAR5 = TestHelpers . CreateContextServices ( VAR1 ) ; var VAR2 = CreateStateEntry ( VAR5 , VAR3 , new SomeEntity ( ) ) ; VAR2 [ VAR4 ] = 1 ; VAR2 . EntityState = EntityState . Added ; VAR2 . EntityState = EntityState . Deleted ; Assert . Equal ( EntityState . Unknown , VAR2 . EntityState ) ; Assert . DoesNotContain ( VAR2 , VAR5 . GetRequiredService < StateManager > ( ) . StateEntries ) ;
var VAR0 = CreateContextServices ( VAR1 ) . GetRequiredService < StateManager > ( ) ; var VAR2 = new VAR3 { VAR4 = LITERAL } ; var VAR5 = new VAR6 { VAR4 = LITERAL } ; VAR2 . VAR7 . Add ( VAR5 ) ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR2 ) ) ; var VAR8 = VAR0 . GetOrCreateEntry ( VAR5 ) ; var VAR9 = VAR1 . GetEntityType ( typeof ( VAR6 ) ) . GetProperty ( LITERAL ) ;
var VAR0 = CreateContextServices ( VAR1 ) . GetRequiredService < StateManager > ( ) ; var VAR2 = new OrderLineDetail ( ) ; var VAR3 = new VAR4 { VAR5 = LITERAL , VAR6 = LITERAL , VAR7 = VAR2 } ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR3 ) ) ; var VAR8 = VAR0 . GetOrCreateEntry ( VAR2 ) ; var VAR9 = VAR1 . GetEntityType ( typeof ( OrderLineDetail ) ) . GetProperty ( LITERAL ) ; var VAR10 = VAR1 . GetEntityType ( typeof ( OrderLineDetail ) ) . GetProperty ( LITERAL ) ;
VAR0 . Key ( VAR2 . IdProperty . VAR7 ) ; VAR1 . Entity < VAR2 > ( VAR0 => { VAR0 . Property ( VAR3 => VAR3 . VAR4 ) ; VAR0 . Key ( VAR2 . IdProperty . VAR7 ) ; } ) ; var VAR5 = VAR6 . GetEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( 1 , VAR5 . GetPrimaryKey ( ) . Properties . Count ( ) ) ; Assert . Equal ( VAR2 . IdProperty . VAR7 , VAR5 . GetPrimaryKey ( ) . Properties . First ( ) . VAR7 ) ;
VAR0 . Key ( VAR2 . IdProperty . VAR5 , VAR2 . NameProperty . VAR5 ) ; VAR1 . Entity < VAR2 > ( VAR0 => { VAR0 . Property ( VAR3 => VAR3 . VAR4 ) ; VAR0 . Property ( VAR3 => VAR3 . VAR5 ) ; VAR0 . Key ( VAR2 . IdProperty . VAR5 , VAR2 . NameProperty . VAR5 ) ; } ) ; var VAR6 = VAR7 . GetEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR6 . GetPrimaryKey ( ) . Properties . Count ( ) ) ; Assert . Equal ( VAR2 . IdProperty . VAR5 , VAR6 . GetPrimaryKey ( ) . Properties . First ( ) . VAR5 ) ; Assert . Equal ( VAR2 . NameProperty . VAR5 , VAR6 . GetPrimaryKey ( ) . Properties . Last ( ) . VAR5 ) ;
VAR0 . Property < int > ( VAR2 . IdProperty . VAR5 ) ; VAR0 . Property < string > ( VAR2 . NameProperty . VAR5 ) ; VAR0 . Key ( VAR2 . IdProperty . VAR5 , VAR2 . NameProperty . VAR5 ) ; VAR1 . Entity ( typeof ( VAR2 ) . FullName , VAR0 => { VAR0 . Property < int > ( VAR2 . IdProperty . VAR5 ) ; VAR0 . Property < string > ( VAR2 . NameProperty . VAR5 ) ; VAR0 . Key ( VAR2 . IdProperty . VAR5 , VAR2 . NameProperty . VAR5 ) ; } ) ; var VAR3 = VAR4 . GetEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR3 . GetPrimaryKey ( ) . Properties . Count ( ) ) ; Assert . Equal ( VAR2 . IdProperty . VAR5 , VAR3 . GetPrimaryKey ( ) . Properties . First ( ) . VAR5 ) ; Assert . Equal ( VAR2 . NameProperty . VAR5 , VAR3 . GetPrimaryKey ( ) . Properties . Last ( ) . VAR5 ) ;
VAR0 . Entity < VAR10 > ( ) . Property ( VAR2 => VAR2 . VAR11 ) ; var VAR4 = VAR5 . GetEntityType ( typeof ( VAR10 ) ) ; var VAR6 = VAR5 . GetEntityType ( typeof ( VAR12 ) ) ; var VAR8 = VAR4 . GetProperty ( LITERAL ) ; var VAR9 = VAR6 . GetProperty ( VAR12 . IdProperty . VAR13 ) ;
var VAR5 = CreateConfiguration ( VAR1 ) . ScopedServiceProvider . GetRequiredService < StateManager > ( ) ; var VAR2 = new object [  ] { LITERAL , LITERAL , LITERAL } ; var VAR3 = VAR1 . GetEntityType ( typeof ( IntKeysPoco ) ) ; var VAR4 = VAR5 . GetOrMaterializeEntry ( VAR3 , new AtsObjectArrayValueReader ( VAR2 ) ) ;
var VAR9 = TestHelpers . CreateContextConfiguration ( VAR1 ) . ScopedServiceProvider . GetRequiredService < StateManager > ( ) ; var VAR2 = new Random ( ) ; var VAR3 = new Banana { VAR4 = LITERAL , VAR5 = LITERAL , VAR6 = VAR2 } ; var VAR7 = VAR9 . GetOrCreateEntry ( VAR3 ) ;
var VAR9 = TestHelpers . CreateContextConfiguration ( VAR1 ) . ScopedServiceProvider . GetRequiredService < StateManager > ( ) ; var VAR2 = new Random ( ) ; var VAR3 = new Banana { VAR4 = LITERAL , VAR5 = LITERAL , VAR6 = VAR2 } ; var VAR7 = VAR9 . GetOrCreateEntry ( VAR3 ) ;
var VAR9 = TestHelpers . CreateContextConfiguration ( VAR1 ) . ScopedServiceProvider . GetRequiredService < StateManager > ( ) ; var VAR2 = new Random ( ) ; var VAR3 = new Banana { VAR4 = LITERAL , VAR5 = null , VAR6 = VAR2 } ; var VAR7 = VAR9 . GetOrCreateEntry ( VAR3 ) ;
var VAR4 = VAR1 . ScopedServiceProvider . GetRequiredService < StateManager > ( ) ; var VAR0 = VAR1 . ScopedServiceProvider . GetRequiredService < StateEntryFactory > ( ) ; var VAR2 = VAR0 . Create ( VAR4 , VAR3 , new Random ( ) ) ; Assert . IsType < ShadowStateEntry > ( VAR2 ) ; Assert . Same ( VAR4 , VAR2 . StateManager ) ;
Assert . Equal ( LITERAL , VAR0 . TableName ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR0 . Columns . Select ( VAR1 => VAR1 . Name ) ) ; Assert . Equal ( new [ ] { typeof ( int ) , typeof ( int ) } , VAR0 . Columns . Select ( VAR1 => VAR1 . ClrType ) ) ; Assert . Equal ( 1 , VAR0 . ForeignKeys . Count ) ; Assert . Equal ( LITERAL , VAR0 . ForeignKeys [ 0 ] . ForeignKeyName ) ; Assert . Equal ( LITERAL , VAR0 . ForeignKeys [ 0 ] . ReferencedTableName ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . ForeignKeys [ 0 ] . ColumnNames ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . ForeignKeys [ 0 ] . ReferencedColumnNames ) ;
Assert . Equal ( typeof ( int ) , VAR0 . Type ) ; Assert . Equal ( LITERAL , VAR0 . StartWith ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; var VAR1 = VAR2 . Sequences [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( typeof ( short ) , VAR1 . Type ) ;
Assert . Equal ( typeof ( long ) , VAR0 . Type ) ; Assert . Equal ( 1 , VAR0 . StartWith ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; var VAR1 = VAR2 . Sequences [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( typeof ( long ) , VAR0 . Type ) ;
Assert . Equal ( typeof ( long ) , VAR0 . Type ) ; Assert . Equal ( 1 , VAR0 . StartWith ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; var VAR1 = VAR2 . Sequences [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( typeof ( long ) , VAR0 . Type ) ;
Assert . Equal ( typeof ( long ) , VAR0 . Type ) ; Assert . Equal ( 1 , VAR0 . StartWith ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; var VAR1 = VAR2 . Sequences [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( typeof ( long ) , VAR0 . Type ) ;
Assert . Equal ( typeof ( long ) , VAR0 . Type ) ; Assert . Equal ( 1 , VAR0 . StartWith ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; var VAR1 = VAR2 . Sequences [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( typeof ( long ) , VAR0 . Type ) ;
Assert . Equal ( typeof ( long ) , VAR0 . Type ) ; Assert . Equal ( 1 , VAR0 . StartWith ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; var VAR1 = VAR2 . Sequences [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( typeof ( long ) , VAR0 . Type ) ;
Assert . Contains ( Strings . DatabaseErrorPage_PendingMigrationsTitle ( typeof ( BloggingContextWithMigrations ) . Name ) , VAR0 ) ; Assert . Contains ( Strings . DatabaseErrorPage_ApplyMigrationsCommand . Replace ( LITERAL , LITERAL ) , VAR0 ) ; Assert . Contains ( LITERAL , VAR0 ) ; Assert . Contains ( LITERAL , VAR0 ) ; Assert . DoesNotContain ( Strings . DatabaseErrorPage_AddMigrationCommand . Replace ( LITERAL , LITERAL ) , VAR0 ) ;
var VAR0 = new Mock < DbContextConfiguration > ( ) ; var VAR1 = new Mock < RedisDatabase > ( VAR0 . Object , new LoggerFactory ( ) ) ; var VAR2 = new SimpleValueGeneratorFactory < GuidValueGenerator > ( ) ; var VAR3 = new RedisValueGeneratorFactory ( VAR1 . Object ) ;
VAR0 . GenerateValueOnAdd = VAR5 ; VAR0 . Relational ( ) . Column = LITERAL ; VAR2 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR3 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR3 . IsConcurrencyToken = VAR6 ; VAR3 . Relational ( ) . Column = LITERAL ; VAR3 . IsStoreComputed = VAR6 ;
VAR0 . GenerateValueOnAdd = true ; var VAR1 = VAR2 . GetProperty ( LITERAL ) ; VAR1 . GenerateValueOnAdd = true ; var VAR3 = VAR4 . Model . GetEntityType ( typeof ( EarthPony ) ) ; var VAR5 = VAR3 . GetProperty ( LITERAL ) ; VAR5 . GenerateValueOnAdd = true ;
Assert . Null ( VAR0 . GenerateValueOnAdd ) ; Assert . False ( ( ( IProperty ) VAR0 ) . GenerateValueOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . Sequence ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( true , VAR0 . GenerateValueOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . GenerateValueOnAdd ) ;
Assert . Equal ( true , VAR0 . GenerateValueOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . GenerateValueOnAdd ) ;
Assert . Null ( VAR0 . GenerateValueOnAdd ) ; Assert . False ( ( ( IProperty ) VAR0 ) . GenerateValueOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . Sequence ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( true , VAR0 . GenerateValueOnAdd ) ;
Assert . Null ( VAR0 . GenerateValueOnAdd ) ; Assert . False ( ( ( IProperty ) VAR0 ) . GenerateValueOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . Sequence ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( true , VAR0 . GenerateValueOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . GenerateValueOnAdd ) ;
Assert . Equal ( true , VAR0 . GenerateValueOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . GenerateValueOnAdd ) ;
Assert . Equal ( false , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( false , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( false , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ;
VAR0 . GenerateValueOnAdd = true ; var VAR1 = VAR2 . GetEntityType ( typeof ( DbProductModel ) ) . GetProperty ( LITERAL ) ; VAR1 . GenerateValueOnAdd = true ; var VAR3 = VAR2 . GetEntityType ( typeof ( DbWorkOrder ) ) . GetProperty ( LITERAL ) ; VAR3 . GenerateValueOnAdd = true ; var VAR4 = VAR2 . GetEntityType ( typeof ( DbProductSubcategory ) ) . GetProperty ( LITERAL ) ; VAR4 . GenerateValueOnAdd = true ;
VAR0 . GenerateValueOnAdd = true ; var VAR1 = VAR2 . GetEntityType ( typeof ( ProductWebFeature ) ) . GetProperty ( LITERAL ) ; VAR1 . GenerateValueOnAdd = true ; var VAR3 = VAR2 . GetEntityType ( typeof ( ProductReview ) ) . GetProperty ( LITERAL ) ; VAR3 . GenerateValueOnAdd = true ; var VAR4 = VAR2 . GetEntityType ( typeof ( ProductPhoto ) ) . GetProperty ( LITERAL ) ; VAR4 . GenerateValueOnAdd = true ;
VAR0 . GenerateValueOnAdd = true ; var VAR1 = VAR2 . GetEntityType ( typeof ( ProductPhoto ) ) . GetProperty ( LITERAL ) ; VAR1 . GenerateValueOnAdd = true ; var VAR3 = VAR2 . GetEntityType ( typeof ( ComputerDetail ) ) . GetProperty ( LITERAL ) ; VAR3 . GenerateValueOnAdd = false ; var VAR4 = VAR2 . GetEntityType ( typeof ( Resolution ) ) . GetProperty ( LITERAL ) ; VAR4 . GenerateValueOnAdd = false ; var VAR5 = VAR2 . GetEntityType ( typeof ( CustomerInfo ) ) . GetProperty ( LITERAL ) ; VAR5 . GenerateValueOnAdd = false ;
Assert . Equal ( typeof ( int ? ) , VAR0 . Properties . Single ( ) . PropertyType ) ; Assert . True ( VAR0 . Properties . Single ( ) . IsShadowProperty ) ; Assert . False ( VAR0 . Properties . Single ( ) . IsConcurrencyToken ) ; Assert . Same ( VAR1 , VAR0 . ReferencedProperties . Single ( ) ) ; Assert . False ( VAR0 . IsUnique ) ; Assert . False ( VAR0 . IsRequired ) ;
var VAR2 = CreateInternalEntityBuilder < EntityWithTypeId > ( ) ; new KeyConvention ( ) . Apply ( VAR2 ) ; var VAR1 = VAR2 . Metadata . TryGetPrimaryKey ( ) ;
var VAR0 = new TestDatabaseBuilder ( ) . GetDatabase ( VAR1 . Model ) ; var VAR2 = VAR0 . Tables [ 0 ] ; Assert . Equal ( LITERAL , VAR2 . UniqueConstraints . Count ) ; Assert . Equal ( LITERAL , VAR2 . UniqueConstraints [ 0 ] . Name ) ; Assert . Equal ( LITERAL , VAR2 . UniqueConstraints [ 1 ] . Name ) ; VAR1 . Entity ( LITERAL ) . ForRelational ( ) . Table ( LITERAL , LITERAL ) ; VAR0 = new TestDatabaseBuilder ( ) . GetDatabase ( VAR1 . Model ) ;
VAR0 . GetPrimaryKey ( ) [ LITERAL ] = LITERAL ; var VAR1 = VAR0 . GetOrAddForeignKey ( VAR2 , VAR3 . GetPrimaryKey ( ) ) ; VAR1 . Relational ( ) . Name = LITERAL ; VAR1 [ LITERAL ] = LITERAL ; var VAR4 = VAR5 . AddEntityType ( typeof ( Order ) ) ; var VAR6 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR7 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR4 . Relational ( ) . Schema = LITERAL ; VAR4 . GetOrSetPrimaryKey ( VAR6 ) ; VAR4 . Relational ( ) . Table = LITERAL ; VAR4 . GetOrAddForeignKey ( VAR7 , VAR0 . GetPrimaryKey ( ) ) ; VAR4 [ LITERAL ] = LITERAL ;
VAR0 . GetEntityType ( typeof ( Customer ) ) . Relational ( ) . Table = LITERAL ; VAR0 . GetEntityType ( typeof ( Employee ) ) . Relational ( ) . Table = LITERAL ; VAR0 . GetEntityType ( typeof ( Product ) ) . Relational ( ) . Table = LITERAL ; VAR0 . GetEntityType ( typeof ( Order ) ) . Relational ( ) . Table = LITERAL ; VAR0 . GetEntityType ( typeof ( OrderDetail ) ) . Relational ( ) . Table = LITERAL ;
var VAR0 = VAR1 . Property < long > ( LITERAL ) . ForRelational ( VAR7 => VAR7 . Column ( LITERAL ) ) . Metadata ; var VAR2 = VAR1 . Property < string > ( LITERAL ) . Metadata ; VAR1 . Key ( LITERAL ) . ForRelational ( ) . Name ( LITERAL ) ; VAR1 . Metadata . AddKey ( new [ ] { VAR3 , VAR0 } ) ; VAR1 . Metadata . AddKey ( new [ ] { VAR2 } ) ; VAR4 . Entity ( LITERAL , VAR1 => { var VAR3 = VAR1 . Property < int > ( LITERAL ) . Metadata ; var VAR0 = VAR1 . Property < long > ( LITERAL ) . ForRelational ( VAR7 => VAR7 . Column ( LITERAL ) ) . Metadata ; var VAR2 = VAR1 . Property < string > ( LITERAL ) . Metadata ; VAR1 . Key ( LITERAL ) . ForRelational ( ) . Name ( LITERAL ) ; VAR1 . Metadata . AddKey ( new [ ] { VAR3 , VAR0 } ) ; VAR1 . Metadata . AddKey ( new [ ] { VAR2 } ) ; } ) ; var VAR5 = new DatabaseBuilder ( ) . GetDatabase ( VAR4 . Model ) ; var VAR6 = VAR5 . Tables [ 0 ] ; Assert . Equal ( LITERAL , VAR6 . UniqueConstraints . Count ) ; Assert . Equal ( LITERAL , VAR6 . UniqueConstraints [ 0 ] . Name ) ; Assert . Equal ( LITERAL , VAR6 . UniqueConstraints [ 1 ] . Name ) ; VAR4 . Entity ( LITERAL ) . ForRelational ( ) . Table ( LITERAL , LITERAL ) ;
VAR0 . Relational ( ) . Schema = LITERAL ; VAR0 . Relational ( ) . Table = LITERAL ; var VAR1 = VAR2 . AddEntityType ( LITERAL ) ; VAR1 . Relational ( ) . Schema = LITERAL ; VAR1 . Relational ( ) . Table = LITERAL ;
var VAR0 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) , VAR7 => VAR7 . Relational ( ) ) ; VAR0 . AddStateEntry ( VAR1 ) ; var VAR2 = new MixedStateEntry ( VAR3 , VAR4 , new object ( ) ) ; VAR2 [ VAR5 ] = 1 ; VAR2 . EntityState = EntityState . Modified ; var VAR6 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) , VAR7 => VAR7 . Relational ( ) ) ;
var VAR0 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) , VAR2 => VAR2 . Relational ( ) ) ; VAR0 . AddStateEntry ( VAR1 ) ; Assert . Equal ( LITERAL , VAR0 . SchemaQualifiedName ) ; Assert . Equal ( EntityState . Added , VAR0 . EntityState ) ;
VAR0 . Relational ( ) . Column = LITERAL ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . Relational ( ) . Column = LITERAL ; VAR2 . ValueGeneration = VAR3 ;
Assert . False ( ( ( IProperty ) VAR0 ) . IsReadOnly ) ; Assert . False ( ( ( IProperty ) VAR1 ) . IsReadOnly ) ; VAR2 . GetOrAddKey ( new [ ] { VAR0 , VAR1 } ) ; Assert . True ( ( ( IProperty ) VAR0 ) . IsReadOnly ) ; Assert . True ( ( ( IProperty ) VAR1 ) . IsReadOnly ) ;
VAR0 . AddNavigation ( LITERAL , VAR1 , pointsToPrincipal : true ) ; VAR2 . AddNavigation ( LITERAL , VAR1 , pointsToPrincipal : false ) ; var VAR3 = VAR4 . ForeignKeys . Single ( ) ; VAR4 . AddNavigation ( LITERAL , VAR3 , pointsToPrincipal : true ) ; VAR5 . AddNavigation ( LITERAL , VAR3 , pointsToPrincipal : false ) ;
VAR0 . GetOrSetPrimaryKey ( new [ ] { VAR1 , VAR2 } ) ; VAR0 . GetPrimaryKey ( ) . SetKeyName ( LITERAL ) ; VAR0 . GetPrimaryKey ( ) . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR0 . GetPrimaryKey ( ) . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR3 . AddEntityType ( VAR0 ) ; var VAR4 = new EntityType ( LITERAL ) ; var VAR5 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR5 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR5 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; var VAR6 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR6 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR4 . GetOrSetPrimaryKey ( new [ ] { VAR5 , VAR6 } ) ;
VAR0 . GetOrSetPrimaryKey ( new [ ] { VAR1 , VAR2 } ) ; VAR0 . GetPrimaryKey ( ) . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR0 . GetPrimaryKey ( ) . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR3 . AddEntityType ( VAR0 ) ; var VAR4 = new EntityType ( LITERAL ) ; var VAR5 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR6 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR4 . GetOrSetPrimaryKey ( new [ ] { VAR5 , VAR6 } ) ;
var VAR0 = VAR1 . GetOrAddForeignKey ( new [ ] { VAR1 . GetProperty ( LITERAL ) } , VAR2 . GetPrimaryKey ( ) ) ; var VAR3 = VAR2 . GetOrAddForeignKey ( new [ ] { VAR2 . GetProperty ( LITERAL ) } , VAR1 . GetPrimaryKey ( ) ) ; var VAR4 = VAR2 . GetOrAddForeignKey ( new [ ] { VAR2 . GetProperty ( LITERAL ) } , VAR5 . GetPrimaryKey ( ) ) ; var VAR6 = VAR5 . GetOrAddForeignKey ( new [ ] { VAR5 . GetProperty ( LITERAL ) } , VAR7 . GetPrimaryKey ( ) ) ; var VAR8 = VAR9 . GetOrAddForeignKey ( new [ ] { VAR9 . GetProperty ( LITERAL ) } , VAR10 . GetPrimaryKey ( ) ) ; VAR1 . AddNavigation ( LITERAL , VAR0 , pointsToPrincipal : true ) ; VAR1 . AddNavigation ( LITERAL , VAR3 , pointsToPrincipal : false ) ; VAR2 . AddNavigation ( LITERAL , VAR3 , pointsToPrincipal : true ) ; VAR2 . AddNavigation ( LITERAL , VAR0 , pointsToPrincipal : false ) ; VAR2 . AddNavigation ( LITERAL , VAR4 , pointsToPrincipal : true ) ; VAR5 . AddNavigation ( LITERAL , VAR4 , pointsToPrincipal : false ) ; VAR5 . AddNavigation ( LITERAL , VAR6 , pointsToPrincipal : true ) ; VAR7 . AddNavigation ( LITERAL , VAR6 , pointsToPrincipal : false ) ; VAR10 . AddNavigation ( LITERAL , VAR8 , pointsToPrincipal : false ) ; VAR9 . AddNavigation ( LITERAL , VAR8 , pointsToPrincipal : true ) ;
VAR0 . GetOrAddForeignKey ( VAR2 , new Key ( new [ ] { VAR1 } ) ) ; VAR3 . AddEntityType ( VAR0 ) ; var VAR4 = new EntityType ( typeof ( SomeDependentEntity ) ) ; VAR3 . AddEntityType ( VAR4 ) ; var VAR5 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR4 . GetOrSetPrimaryKey ( new [ ] { VAR5 , VAR6 } ) ; var VAR7 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR4 . GetOrAddForeignKey ( new [ ] { VAR7 } , VAR0 . GetPrimaryKey ( ) ) ;
VAR0 . GetOrSetPrimaryKey ( new [ ] { VAR1 , VAR2 } ) ; var VAR3 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . GetOrAddForeignKey ( new [ ] { VAR3 } , VAR4 . GetPrimaryKey ( ) ) ; var VAR5 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR5 . ValueGeneration = ValueGeneration . OnAdd ; var VAR6 = new EntityType ( typeof ( SomeMoreDependentEntity ) ) ; VAR7 . AddEntityType ( VAR6 ) ; var VAR8 = VAR6 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR6 . GetOrSetPrimaryKey ( VAR8 ) ; var VAR9 = VAR6 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR10 = VAR6 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR6 . GetOrAddForeignKey ( new [ ] { VAR9 , VAR10 } , VAR0 . GetPrimaryKey ( ) ) ;
var VAR0 = new NamedEntityType ( typeof ( B ) ) ; VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR1 = new NamedEntityType ( typeof ( C ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR0 . GetOrAddForeignKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR2 . GetPrimaryKey ( ) ) ; VAR1 . GetOrAddForeignKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR2 . GetPrimaryKey ( ) ) ; VAR0 . GetOrAddForeignKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR1 . GetPrimaryKey ( ) ) ; var VAR3 = new EntityTypeGraph ( ) ; VAR3 . Populate ( VAR2 , VAR0 , VAR1 ) ;
VAR0 . GetOrAddForeignKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR1 . GetPrimaryKey ( ) ) ; VAR1 . GetOrAddForeignKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR2 . GetPrimaryKey ( ) ) ; VAR2 . GetOrAddForeignKey ( VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR0 . GetPrimaryKey ( ) ) ; VAR0 . GetOrAddForeignKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR3 . GetPrimaryKey ( ) ) ; VAR3 . GetOrAddForeignKey ( VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR4 . GetPrimaryKey ( ) ) ; VAR4 . GetOrAddForeignKey ( VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR0 . GetPrimaryKey ( ) ) ;
VAR0 . Property ( VAR1 => VAR1 . VAR2 ) . GenerateValuesOnAdd ( ) ; VAR3 . Entity < Customer > ( VAR0 => { VAR0 . Key ( VAR1 => VAR1 . VAR2 ) ; VAR0 . Property ( VAR1 => VAR1 . VAR2 ) . GenerateValuesOnAdd ( ) ; } ) ; var VAR4 = new IndentedStringBuilder ( ) ; new CSharpModelCodeGenerator ( ) . Generate ( VAR3 . Model , VAR4 ) ;
var VAR0 = new Banana { VAR2 = LITERAL , VAR3 = LITERAL } ; var VAR4 = CreateStateEntry ( VAR0 ) ; var VAR5 = VAR4 . AddSidecar ( CreateSidecar ( VAR4 ) ) ; VAR5 [ VAR6 ] = LITERAL ; VAR5 . Rollback ( ) ; Assert . Null ( VAR4 . TryGetSidecar ( VAR5 . VAR2 ) ) ; Assert . Equal ( 1 , VAR0 . VAR1 ) ;
var VAR0 = new Banana { VAR2 = LITERAL , VAR3 = LITERAL } ; var VAR4 = CreateSidecar ( CreateStateEntry ( VAR0 ) ) ; VAR4 . EnsureSnapshot ( VAR5 ) ; Assert . True ( VAR4 . HasValue ( VAR5 ) ) ; Assert . Equal ( 1 , VAR4 [ VAR5 ] ) ;
var VAR3 = TestHelpers . CreateStateEntry < AnEntity > ( VAR4 , EntityState . Added ) ; var VAR5 = VAR3 . EntityType . GetProperty ( LITERAL ) ; var VAR6 = VAR3 . EntityType . GetProperty ( LITERAL ) ; var VAR7 = VAR3 . EntityType . GetProperty ( LITERAL ) ; var VAR8 = VAR3 . EntityType . GetProperty ( LITERAL ) ;
VAR0 . ValueGeneration = VAR1 ; VAR0 . SetColumnName ( LITERAL ) ; VAR2 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR3 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR3 . SetColumnName ( LITERAL ) ; VAR3 . ValueGeneration = VAR4 ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . ValueGenerationOnSave = ValueGenerationOnSave . WhenInserting ; VAR0 . ValueGenerationOnAdd = ValueGenerationOnAdd . Client ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) . IsConcurrencyToken = true ; var VAR2 = new EntityType ( typeof ( SomeDependentEntity ) ) ; VAR3 . AddEntityType ( VAR2 ) ; var VAR4 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . GetOrSetPrimaryKey ( VAR4 , VAR5 ) ; var VAR6 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , new [ ] { VAR6 } ) ; var VAR7 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( string ) ) . IsConcurrencyToken = true ; var VAR1 = new EntityType ( typeof ( ChangedOnlyEntity ) ) ; VAR2 . AddEntityType ( VAR1 ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) . IsConcurrencyToken = true ; var VAR3 = new EntityType ( typeof ( SomeMoreDependentEntity ) ) ; VAR2 . AddEntityType ( VAR3 ) ; var VAR4 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR4 ) ; var VAR5 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR3 . GetOrAddForeignKey ( VAR7 . GetPrimaryKey ( ) , new [ ] { VAR5 , VAR6 } ) ;
VAR0 . GetOrAddForeignKey ( new Key ( new [ ] { VAR1 . GetProperty ( LITERAL ) } ) , VAR0 . GetProperty ( LITERAL ) ) ; var VAR2 = new EntityType ( LITERAL ) ; var VAR3 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) ; VAR2 . GetOrSetPrimaryKey ( VAR3 ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR2 . AddEntityType ( VAR1 ) ; var VAR3 = new EntityType ( typeof ( Customer ) ) ; var VAR4 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR5 . SetColumnName ( LITERAL ) ; VAR3 . SetSchema ( LITERAL ) ; VAR3 . SetTableName ( LITERAL ) ; VAR3 . GetOrSetPrimaryKey ( VAR4 ) ; VAR3 . GetPrimaryKey ( ) . SetKeyName ( LITERAL ) ; VAR3 . GetPrimaryKey ( ) . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; var VAR6 = VAR3 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , VAR5 ) ;
var VAR0 = new EntityType ( typeof ( Order ) ) ; var VAR1 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . SetSchema ( LITERAL ) ; VAR0 . GetOrSetPrimaryKey ( VAR1 ) ; VAR0 . SetTableName ( LITERAL ) ; VAR0 . GetOrAddForeignKey ( VAR3 . GetPrimaryKey ( ) , VAR2 ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR0 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; var VAR2 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR2 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 , VAR2 ) ; VAR1 . GetPrimaryKey ( ) . SetKeyName ( LITERAL ) ; VAR1 . GetPrimaryKey ( ) . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR1 . GetPrimaryKey ( ) . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( Guid ) ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . AddEntityType ( VAR1 ) ; var VAR3 = new EntityType ( typeof ( KoolEntity2 ) ) ; VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR3 . GetOrAddProperty ( LITERAL , typeof ( Guid ) ) ; VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . AddEntityType ( VAR3 ) ; var VAR4 = new EntityType ( typeof ( KoolEntity3 ) ) ; VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; var VAR3 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( Random ) ) ; var VAR4 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; var VAR6 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( Random ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 , VAR2 , VAR3 ) ; VAR1 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , VAR6 , VAR4 , VAR5 ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . ValueGenerationOnSave = ValueGenerationOnSave . WhenInserting ; VAR0 . ValueGenerationOnAdd = ValueGenerationOnAdd . Client ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; var VAR2 = new EntityType ( typeof ( SomeDependentEntity ) ) ; VAR3 . AddEntityType ( VAR2 ) ; var VAR4 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . GetOrSetPrimaryKey ( VAR4 , VAR5 ) ; var VAR6 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR2 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , new [ ] { VAR6 } ) ; var VAR7 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . ValueGenerationOnSave = ValueGenerationOnSave . WhenInserting ; VAR0 . ValueGenerationOnAdd = ValueGenerationOnAdd . Client ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) . IsConcurrencyToken = true ; var VAR2 = new EntityType ( typeof ( SomeDependentEntity ) . FullName ) ; VAR3 . AddEntityType ( VAR2 ) ; var VAR4 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR5 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) ; VAR2 . GetOrSetPrimaryKey ( VAR4 , VAR5 ) ; var VAR6 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR2 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , new [ ] { VAR6 } ) ; var VAR7 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) . IsConcurrencyToken = true ; var VAR1 = new EntityType ( typeof ( ChangedOnlyEntity ) ) ; VAR2 . AddEntityType ( VAR1 ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) . IsConcurrencyToken = true ; var VAR3 = new EntityType ( typeof ( SomeMoreDependentEntity ) . FullName ) ; VAR2 . AddEntityType ( VAR3 ) ; var VAR4 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR3 . GetOrSetPrimaryKey ( VAR4 ) ; var VAR5 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR6 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) ; VAR3 . GetOrAddForeignKey ( VAR7 . GetPrimaryKey ( ) , new [ ] { VAR5 , VAR6 } ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 , VAR2 ) ; var VAR3 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . GetOrAddForeignKey ( VAR4 . GetPrimaryKey ( ) , new [ ] { VAR3 } ) ; var VAR5 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; var VAR2 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR1 . GetOrAddForeignKey ( VAR4 . GetPrimaryKey ( ) , new [ ] { VAR2 , VAR3 } ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ? ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , VAR2 ) ; VAR3 . AddEntityType ( VAR1 ) ;
VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( Guid ? ) ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( Guid ) , shadowProperty : true ) ;
var VAR0 = new EntityType ( typeof ( Customer ) ) ; var VAR1 = VAR0 . GetOrAddProperty ( Customer . VAR2 ) ; var VAR3 = VAR0 . GetOrAddProperty ( Customer . VAR4 ) ; VAR1 . EntityType = new EntityType ( typeof ( Customer ) ) ; VAR3 . EntityType = new EntityType ( typeof ( Order ) ) ;
Assert . True ( VAR0 . GetProperty ( LITERAL ) . IsShadowProperty ) ; Assert . True ( VAR0 . GetProperty ( LITERAL ) . IsShadowProperty ) ; Assert . Equal ( LITERAL , VAR0 . GetProperty ( LITERAL ) . ShadowIndex ) ; Assert . Equal ( 0 , VAR0 . GetProperty ( LITERAL ) . ShadowIndex ) ; Assert . Equal ( LITERAL , VAR0 . GetProperty ( LITERAL ) . ShadowIndex ) ; Assert . Equal ( 1 , VAR0 . GetProperty ( LITERAL ) . ShadowIndex ) ; Assert . Equal ( LITERAL , VAR0 . GetProperty ( LITERAL ) . ShadowIndex ) ;
VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR1 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR2 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR3 = VAR0 . GetOrAddForeignKey ( VAR4 . GetPrimaryKey ( ) , VAR1 , VAR2 ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR2 = VAR1 . GetOrAddForeignKey ( VAR3 . GetPrimaryKey ( ) , VAR0 ) ;
VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR1 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ;
var VAR0 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR2 = VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR1 = new NamedEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR2 = new NamedEntityType ( typeof ( C ) ) ; VAR2 . GetOrSetPrimaryKey ( VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR2 . GetOrAddForeignKey ( VAR0 . GetPrimaryKey ( ) , VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR0 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR1 = new NamedEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR2 = new NamedEntityType ( typeof ( C ) ) ; VAR2 . GetOrSetPrimaryKey ( VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR1 . GetOrAddForeignKey ( VAR0 . GetPrimaryKey ( ) , VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR2 . GetOrAddForeignKey ( VAR0 . GetPrimaryKey ( ) , VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR1 . GetOrAddForeignKey ( VAR2 . GetPrimaryKey ( ) , VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR1 = new NamedEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR2 = new NamedEntityType ( typeof ( C ) ) ; VAR2 . GetOrSetPrimaryKey ( VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR0 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR1 . GetOrAddForeignKey ( VAR0 . GetPrimaryKey ( ) , VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR1 = new NamedEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR2 = new NamedEntityType ( typeof ( C ) ) ; VAR2 . GetOrSetPrimaryKey ( VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR0 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR1 . GetOrAddForeignKey ( VAR2 . GetPrimaryKey ( ) , VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR2 . GetOrAddForeignKey ( VAR0 . GetPrimaryKey ( ) , VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR1 = new NamedEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR2 = new NamedEntityType ( typeof ( C ) ) ; VAR2 . GetOrSetPrimaryKey ( VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR1 . GetOrAddForeignKey ( VAR2 . GetPrimaryKey ( ) , VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR2 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ; VAR0 . GetOrAddForeignKey ( VAR2 . GetPrimaryKey ( ) , VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ) ;
Assert . True ( ( new List < IProperty > { VAR0 } ) . SequenceEqual ( VAR1 . SelectedProperties ) ) ; Assert . Equal ( 0 , VAR1 . GetProjectionIndex ( VAR0 ) ) ; var VAR2 = VAR3 . GetProperty ( LITERAL ) ; VAR1 . AddProperty ( VAR2 ) ; Assert . True ( ( new List < IProperty > { VAR0 , VAR2 } ) . SequenceEqual ( VAR1 . SelectedProperties ) ) ;
Assert . True ( ( new List < IProperty > { VAR0 , VAR1 } ) . SequenceEqual ( VAR2 . SelectedProperties ) ) ; Assert . Equal ( 0 , VAR2 . GetProjectionIndex ( VAR0 ) ) ; Assert . Equal ( 1 , VAR2 . GetProjectionIndex ( VAR1 ) ) ; VAR2 . AddProperty ( VAR0 ) ; Assert . True ( ( new List < IProperty > { VAR0 , VAR1 , VAR0 } ) . SequenceEqual ( VAR2 . SelectedProperties ) ) ;
Assert . True ( ( new List < IProperty > { VAR0 } ) . SequenceEqual ( VAR1 . SelectedProperties ) ) ; Assert . Equal ( 0 , VAR1 . GetProjectionIndex ( VAR0 ) ) ; var VAR2 = VAR3 . GetProperty ( LITERAL ) ; VAR1 . AddProperty ( VAR2 ) ; Assert . True ( ( new List < IProperty > { VAR0 , VAR2 } ) . SequenceEqual ( VAR1 . SelectedProperties ) ) ; Assert . Equal ( 0 , VAR1 . GetProjectionIndex ( VAR0 ) ) ; Assert . Equal ( 1 , VAR1 . GetProjectionIndex ( VAR2 ) ) ; VAR1 . AddProperty ( VAR0 ) ; Assert . True ( ( new List < IProperty > { VAR0 , VAR2 , VAR0 } ) . SequenceEqual ( VAR1 . SelectedProperties ) ) ;
VAR0 . Entity < VAR1 > ( ) . ForeignKey < VAR3 > ( VAR4 => VAR4 . VAR5 ) ; var VAR6 = VAR7 . GetEntityType ( typeof ( VAR1 ) ) ; var VAR8 = VAR7 . GetEntityType ( typeof ( VAR3 ) ) ; var VAR9 = VAR6 . ForeignKeys . Single ( ) ; var VAR10 = new Navigation ( VAR9 , LITERAL , true ) ; VAR6 . AddNavigation ( VAR10 ) ; var VAR11 = new Navigation ( VAR9 , LITERAL , false ) ;
VAR0 . Entity < VAR1 > ( ) . ForeignKey < VAR3 > ( VAR4 => VAR4 . VAR5 ) ; var VAR6 = VAR7 . GetEntityType ( typeof ( VAR1 ) ) ; var VAR8 = VAR7 . GetEntityType ( typeof ( VAR3 ) ) ; var VAR9 = VAR6 . ForeignKeys . Single ( ) ; var VAR10 = new Navigation ( VAR9 , LITERAL , true ) ;
VAR0 . Entity < VAR1 > ( ) . ForeignKey < VAR3 > ( VAR4 => VAR4 . VAR5 ) ; var VAR6 = VAR7 . GetEntityType ( typeof ( VAR1 ) ) ; var VAR8 = VAR7 . GetEntityType ( typeof ( VAR3 ) ) ; var VAR9 = VAR6 . ForeignKeys . Single ( ) ; var VAR10 = new Navigation ( VAR9 , LITERAL , false ) ;
var VAR0 = new EntityType ( typeof ( SomeEntity ) . FullName ) ; VAR1 . AddEntityType ( VAR0 ) ; var VAR2 = VAR0 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ; VAR2 . ValueGenerationOnSave = ValueGenerationOnSave . WhenInserting ; VAR2 . ValueGenerationOnAdd = ValueGenerationOnAdd . Client ; VAR0 . SetKey ( VAR2 ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) , shadowProperty : true , concurrencyToken : true ) ; var VAR3 = new EntityType ( typeof ( SomeDependentEntity ) . FullName ) ;
var VAR0 = Add ( new TAnOrder { CustomerId = VAR1 . CustomerId , Username = VAR2 . Username , AlternateId = LITERAL } ) ; var VAR3 = Add ( new TAnOrder { CustomerId = VAR4 . CustomerId , Username = VAR5 . Username , AlternateId = LITERAL } ) ; var VAR6 = Add ( new TAnOrder { CustomerId = VAR7 . CustomerId , Username = VAR8 . Username , AlternateId = LITERAL } ) ; var VAR9 = Add ( new TOrderNote { Note = LITERAL , OrderId = VAR15 ? VAR0 . AlternateId : VAR0 . AnOrderId } ) ; var VAR10 = Add ( new TOrderNote { Note = LITERAL , OrderId = VAR15 ? VAR0 . AlternateId : VAR0 . AnOrderId } ) ; var VAR11 = Add ( new TOrderNote { Note = LITERAL , OrderId = VAR15 ? VAR0 . AlternateId : VAR0 . AnOrderId } ) ; var VAR12 = Add ( new TOrderQualityCheck { OrderId = VAR15 ? VAR0 . AlternateId : VAR0 . AnOrderId , CheckedBy = LITERAL } ) ; var VAR13 = Add ( new TOrderQualityCheck { OrderId = VAR15 ? VAR3 . AlternateId : VAR3 . AnOrderId , CheckedBy = LITERAL } ) ; var VAR14 = Add ( new TOrderQualityCheck { OrderId = VAR15 ? VAR6 . AlternateId : VAR6 . AnOrderId , CheckedBy = LITERAL } ) ;
var VAR0 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) ) ; VAR0 . AddStateEntry ( VAR1 ) ; var VAR2 = new EntityType ( typeof ( object ) ) ; var VAR3 = VAR2 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ; VAR2 . SetKey ( VAR3 ) ; var VAR4 = new MixedStateEntry ( VAR5 , VAR2 , new object ( ) ) ; VAR4 [ VAR3 ] = 0 ; VAR4 . EntityState = EntityState . Modified ; var VAR6 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) ) ;
Assert . Same ( VAR2 , VAR1 . GetService < CommandBatchPreparer > ( ) ) ; Assert . Same ( VAR3 , VAR1 . GetService < ModificationCommandBatchFactory > ( ) ) ; Assert . NotSame ( VAR0 , VAR1 . GetService < SqlServerBatchExecutor > ( ) ) ; Assert . NotSame ( VAR4 , VAR1 . GetService < DataStoreSource > ( ) ) ; Assert . NotSame ( VAR5 , VAR1 . GetService < SqlServerDataStore > ( ) ) ; Assert . NotSame ( VAR6 , VAR1 . GetService < SqlServerConnection > ( ) ) ; Assert . NotSame ( VAR7 , VAR1 . GetService < ModelDiffer > ( ) ) ; Assert . NotSame ( VAR8 , VAR1 . GetService < SqlServerMigrationOperationSqlGeneratorFactory > ( ) ) ; Assert . NotSame ( VAR9 , VAR1 . GetService < SqlServerDataStoreCreator > ( ) ) ; Assert . NotSame ( VAR10 , VAR1 . GetService < MigrationAssembly > ( ) ) ; Assert . NotSame ( VAR11 , VAR1 . GetService < HistoryRepository > ( ) ) ; Assert . NotSame ( VAR12 , VAR1 . GetService < Migrator > ( ) ) ;
VAR11 = new LazyRef < DataStoreServices > ( ( ) => VAR1 . DataStoreSelector . SelectDataStore ( this ) ) ; VAR2 = new LazyRef < IModel > ( ( ) => VAR1 . ModelSource . GetModel ( VAR3 , VAR11 . Value . ModelBuilderFactory ) ) ; VAR4 = new LazyRef < VAR5 > ( ( ) => VAR11 . Value . Store ) ; VAR6 = new LazyRef < DataStoreConnection > ( ( ) => VAR11 . Value . VAR12 ) ; VAR7 = new LazyRef < ILoggerFactory > ( ( ) => VAR8 . TryGetService < ILoggerFactory > ( ) ?? new NullLoggerFactory ( ) ) ; VAR9 = new LazyRef < VAR10 > ( ( ) => VAR11 . Value . VAR10 ) ;
var VAR0 = new DefaultModelSource ( new DbSetFinder ( ) ) ; var VAR1 = VAR0 . GetModel ( new Context1 ( ) , new ModelBuilderFactory ( ) ) ; var VAR2 = VAR0 . GetModel ( new Context2 ( ) , new ModelBuilderFactory ( ) ) ; Assert . NotSame ( VAR1 , VAR2 ) ; Assert . Same ( VAR1 , VAR0 . GetModel ( new Context1 ( ) , new ModelBuilderFactory ( ) ) ) ; Assert . Same ( VAR2 , VAR0 . GetModel ( new Context2 ( ) , new ModelBuilderFactory ( ) ) ) ;
Assert . Equal ( 1 , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( long ) ) ) ) ; Assert . Equal ( LITERAL , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( int ) ) ) ) ; Assert . Equal ( ( short ) LITERAL , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( short ) ) ) ) ; Assert . Equal ( ( byte ) LITERAL , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( byte ) ) ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( long ) ) ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( int ) ) ) ) ; Assert . Equal ( ( short ) LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( short ) ) ) ) ; Assert . Equal ( ( byte ) LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( byte ) ) ) ) ;
var VAR4 = Mock . Of < StateEntry > ( ) ; var VAR1 = Mock . Of < IProperty > ( ) ; var VAR2 = new Mock < SimpleValueGenerator > { CallBase = true } ; VAR2 . Setup ( VAR3 => VAR3 . Next ( VAR4 , VAR1 ) ) . Returns ( LITERAL ) ; Assert . Equal ( LITERAL , await VAR2 . Object . NextAsync ( VAR4 , VAR1 ) ) ;
Assert . Equal ( - 1 , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , VAR1 ) ) ; Assert . Equal ( - LITERAL , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , VAR1 ) ) ; Assert . Equal ( - LITERAL , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , VAR1 ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , VAR1 ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , VAR1 ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , VAR1 ) ) ;
Assert . Equal ( - 1 , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( long ) ) ) ) ; Assert . Equal ( - LITERAL , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( int ) ) ) ) ; Assert . Equal ( ( short ) - LITERAL , await VAR0 . NextAsync ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( short ) ) ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( long ) ) ) ) ; Assert . Equal ( - LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( int ) ) ) ) ; Assert . Equal ( ( short ) - LITERAL , VAR0 . Next ( Mock . Of < StateEntry > ( ) , CreateProperty ( typeof ( short ) ) ) ) ;
var VAR0 = LoadAssembly ( VAR5 ) ; LoadReferences ( VAR6 . Get ( Constants . VAR7 ) ) ; var VAR2 = VAR6 . Get ( Constants . VAR8 ) ;
var VAR0 = new Banana { VAR1 = LITERAL , VAR2 = LITERAL , VAR7 = LITERAL } ; var VAR4 = CreateStateEntry ( VAR0 ) ; var VAR5 = VAR4 . AddSidecar ( CreateSidecar ( VAR4 ) ) ; VAR5 [ VAR8 ] = LITERAL ;
Assert . Equal ( VAR7 . ProductId , VAR1 . ProductId ) ; Assert . Equal ( VAR2 . PhotoId , VAR1 . PhotoId ) ; Assert . Null ( VAR1 . Photo ) ; AssertReviewsConsistent ( VAR3 ) ; AssertReviewsConsistent ( VAR4 ) ; AssertReviewsConsistent ( VAR5 , VAR6 ) ;
VAR0 . SetColumnName ( LITERAL ) ; var VAR1 = new ModelDiffer ( new DatabaseBuilder ( ) ) . Diff ( VAR2 , VAR3 ) ; Assert . Equal ( 1 , VAR1 . Count ) ; Assert . IsType < DropColumnOperation > ( VAR1 [ 0 ] ) ; var VAR4 = ( DropColumnOperation ) VAR1 [ 0 ] ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) ) ; VAR0 . AddStateEntry ( VAR1 ) ; var VAR2 = new EntityType ( typeof ( object ) ) ; var VAR3 = VAR2 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ; VAR2 . SetKey ( VAR3 ) ; var VAR4 = new MixedStateEntry ( VAR5 , VAR2 , new object ( ) ) ; VAR4 [ VAR3 ] = 0 ; VAR4 . EntityState = EntityState . Modified ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) ) ;
VAR0 . Setup ( VAR1 => VAR1 . EnsureDeletedAsync ( null , VAR2 : VAR2 ) ) . Returns ( Task . FromResult ( true ) ) ; var VAR3 = new Mock < DbContextConfiguration > ( ) ; VAR3 . Setup ( VAR1 => VAR1 . DataStoreCreator ) . Returns ( VAR0 . Object ) ; VAR3 . Setup ( VAR1 => VAR1 . Model ) . Returns ( VAR4 ) ; var VAR5 = new Database ( VAR3 . Object ) ; Assert . True ( await VAR5 . EnsureCreatedAsync ( VAR2 ) ) ; VAR0 . Verify ( VAR1 => VAR1 . EnsureCreatedAsync ( VAR4 , VAR2 ) , Times . Once ) ; Assert . True ( await VAR5 . EnsureDeletedAsync ( VAR2 ) ) ; VAR0 . Verify ( VAR1 => VAR1 . EnsureDeletedAsync ( null , VAR2 : VAR2 ) , Times . Once ) ;
VAR0 . AddNavigation ( new Navigation ( VAR1 , LITERAL , pointsToPrincipal : true ) ) ; VAR0 . AddNavigation ( new Navigation ( VAR2 , LITERAL , pointsToPrincipal : false ) ) ; VAR3 . AddNavigation ( new Navigation ( VAR2 , LITERAL , pointsToPrincipal : true ) ) ; VAR3 . AddNavigation ( new Navigation ( VAR1 , LITERAL , pointsToPrincipal : false ) ) ; VAR3 . AddNavigation ( new Navigation ( VAR4 , LITERAL , pointsToPrincipal : true ) ) ; VAR5 . AddNavigation ( new Navigation ( VAR4 , LITERAL , pointsToPrincipal : false ) ) ; VAR5 . AddNavigation ( new Navigation ( VAR6 , LITERAL , pointsToPrincipal : true ) ) ; VAR7 . AddNavigation ( new Navigation ( VAR6 , LITERAL , pointsToPrincipal : false ) ) ; VAR8 . AddNavigation ( new Navigation ( VAR9 , LITERAL , pointsToPrincipal : false ) ) ; VAR10 . AddNavigation ( new Navigation ( VAR9 , LITERAL , pointsToPrincipal : true ) ) ;
Assert . Equal ( ConnectionState . Closed , VAR0 . Database . AsRelational ( ) . Connection . DbConnection . State ) ; Assert . False ( VAR1 ? await VAR0 . Database . AsRelational ( ) . ExistsAsync ( ) : VAR0 . Database . AsRelational ( ) . Exists ( ) ) ; Assert . Equal ( ConnectionState . Closed , VAR0 . Database . AsRelational ( ) . Connection . DbConnection . State ) ;
VAR0 . VAR1 . Add ( new Blog { VAR3 = LITERAL } ) ; VAR0 . SaveChanges ( ) ; var VAR4 = VAR0 . VAR1 . SingleOrDefault ( ) ; Assert . NotEqual ( 0 , VAR4 . VAR2 ) ;
VAR0 . VAR1 . Add ( new Blog { VAR3 = LITERAL } ) ; VAR0 . SaveChanges ( ) ; var VAR4 = VAR0 . VAR1 . SingleOrDefault ( ) ; Assert . NotEqual ( 0 , VAR4 . VAR2 ) ;
VAR0 . VAR1 . Add ( new Blog { VAR3 = LITERAL } ) ; VAR0 . SaveChanges ( ) ; var VAR4 = VAR0 . VAR1 . SingleOrDefault ( ) ; Assert . NotEqual ( 0 , VAR4 . VAR2 ) ;
Assert . Equal ( ValueGenerationOnSave . None , VAR0 . Columns [ 0 ] . ValueGenerationStrategy ) ; Assert . NotNull ( VAR1 . PrimaryKey . Name ) ; Assert . Equal ( LITERAL , VAR0 . PrimaryKey . Name ) ; Assert . Same ( VAR0 . Columns [ 0 ] , VAR0 . PrimaryKey . Columns [ 0 ] ) ; Assert . Equal ( 1 , VAR0 . ForeignKeys . Count ) ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( 1 , VAR1 . Columns . Count ) ; Assert . Equal ( LITERAL , VAR1 . Columns [ 0 ] . Name ) ; Assert . Equal ( LITERAL , VAR1 . Columns [ 0 ] . DataType ) ; Assert . Equal ( ValueGenerationOnSave . WhenInserting , VAR1 . Columns [ 0 ] . ValueGenerationStrategy ) ;
VAR0 . ValueGenerationOnSave = VAR1 ; VAR2 . SetKey ( VAR0 ) ; var VAR3 = VAR2 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR3 . ValueGenerationOnSave = VAR4 ;
await VAR0 . SetEntityStateAsync ( EntityState . Added ) ; var VAR1 = new InMemoryDataStore ( VAR2 , new InMemoryDatabase ( new NullLoggerFactory ( ) ) ) ; await VAR1 . SaveChangesAsync ( new [ ] { VAR0 } ) ; VAR3 . VAR4 = LITERAL ; await VAR0 . SetEntityStateAsync ( EntityState . Modified ) ;
await VAR0 . SaveChangesAsync ( new [ ] { VAR1 } ) ; VAR3 . VAR4 = LITERAL ; await VAR1 . SetEntityStateAsync ( EntityState . Modified , CancellationToken . None ) ; await VAR0 . SaveChangesAsync ( new [ ] { VAR1 } ) ;
ContextSets VAR14 ; StateManager VAR1 ; IEntityStateListener VAR2 ; var VAR3 = new EarlyLearningCenter ( VAR4 ) ; var VAR5 = VAR3 . Configuration ; var VAR6 = VAR5 . Services . ActiveIdentityGenerators ; var VAR7 = VAR5 . Services . ServiceProvider . GetService < ClrCollectionAccessorSource > ( ) ; var VAR8 = VAR5 . Services . ClrPropertyGetterSource ; var VAR9 = VAR5 . Services . ClrPropertySetterSource ; var VAR10 = VAR5 . Services . EntityKeyFactorySource ; var VAR11 = VAR5 . Services . ServiceProvider . GetService < EntityMaterializerSource > ( ) ; var VAR15 = VAR5 . Services . ServiceProvider . GetService < DbSetFinder > ( ) ; var VAR16 = VAR5 . Services . ServiceProvider . GetService < DbSetInitializer > ( ) ;
var VAR11 = VAR1 . Services . ServiceProvider . GetService < DbSetFinder > ( ) ; var VAR12 = VAR1 . Services . ServiceProvider . GetService < DbSetInitializer > ( ) ; var VAR3 = VAR1 . Services . ServiceProvider . GetService < IdentityGeneratorFactory > ( ) ; var VAR4 = VAR1 . Services . ServiceProvider . GetService < ILoggerFactory > ( ) ; var VAR5 = VAR1 . Services . ModelSource ; VAR6 . Dispose ( ) ; VAR6 = new EarlyLearningCenter ( VAR7 ) ; VAR1 = VAR6 . Configuration ; VAR8 = VAR1 . Services . StateEntryFactory ; VAR9 = VAR1 . Services . StateEntryNotifier ; VAR13 = VAR1 . Services . ContextSets ;
VAR6 = VAR1 . Services . ContextSets ; VAR2 = VAR1 . Services . StateManager ; VAR3 = VAR1 . Services . EntityStateListeners . OfType < FakeNavigationFixer > ( ) . Single ( ) ; Assert . Same ( VAR4 , VAR1 . Services . StateEntryFactory ) ; Assert . Same ( VAR5 , VAR1 . Services . StateEntryNotifier ) ; Assert . Same ( VAR6 , VAR1 . Services . ContextSets ) ;
Assert . Same ( VAR12 , VAR1 . Services . ContextSets ) ; Assert . Same ( VAR2 , VAR1 . Services . StateManager ) ; Assert . Same ( VAR3 , VAR1 . Services . EntityStateListeners . OfType < FakeNavigationFixer > ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR1 . Services . ActiveIdentityGenerators ) ; Assert . Same ( VAR5 , VAR1 . Services . ServiceProvider . GetService < ClrCollectionAccessorSource > ( ) ) ; Assert . Same ( VAR6 , VAR1 . Services . ClrPropertyGetterSource ) ; Assert . Same ( VAR7 , VAR1 . Services . ClrPropertySetterSource ) ; Assert . Same ( VAR8 , VAR1 . Services . EntityKeyFactorySource ) ; Assert . Same ( VAR9 , VAR1 . Services . ServiceProvider . GetService < EntityMaterializerSource > ( ) ) ; Assert . Same ( VAR13 , VAR1 . Services . ServiceProvider . GetService < DbSetFinder > ( ) ) ; Assert . Same ( VAR14 , VAR1 . Services . ServiceProvider . GetService < DbSetInitializer > ( ) ) ;
Assert . Same ( VAR11 , VAR1 . Services . ServiceProvider . GetService < DbSetFinder > ( ) ) ; Assert . Same ( VAR12 , VAR1 . Services . ServiceProvider . GetService < DbSetInitializer > ( ) ) ; Assert . Same ( VAR3 , VAR1 . Services . ServiceProvider . GetService < IdentityGeneratorFactory > ( ) ) ; Assert . Same ( VAR4 , VAR1 . Services . ServiceProvider . GetService < ILoggerFactory > ( ) ) ; Assert . Same ( VAR5 , VAR1 . Services . ModelSource ) ; VAR6 . Dispose ( ) ; VAR6 = new EarlyLearningCenter ( VAR7 ) ; VAR1 = VAR6 . Configuration ; Assert . NotSame ( VAR8 , VAR1 . Services . StateEntryFactory ) ; Assert . NotSame ( VAR9 , VAR1 . Services . StateEntryNotifier ) ; Assert . NotSame ( VAR13 , VAR1 . Services . ContextSets ) ;
Assert . Equal ( 0 , VAR0 [ VAR1 ] ) ; Assert . True ( VAR1 . GetterCalled ) ; VAR0 [ VAR1 ] = LITERAL ; Assert . True ( VAR1 . SetterCalled ) ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ;
Assert . Null ( VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ; VAR0 [ VAR1 ] = LITERAL ; VAR0 [ VAR2 ] = LITERAL ; Assert . Equal ( LITERAL , VAR3 . Id ) ; Assert . Equal ( LITERAL , VAR3 . Name ) ;
VAR0 [ VAR1 ] = LITERAL ; VAR0 [ VAR2 ] = LITERAL ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 [ VAR2 ] ) ;
VAR0 [ VAR1 ] = LITERAL ; VAR0 . OriginalValues [ VAR1 ] = LITERAL ; VAR0 . AcceptChanges ( ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 . OriginalValues [ VAR1 ] ) ;
VAR0 [ VAR1 ] = LITERAL ; VAR0 . AcceptChanges ( ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; Assert . Equal ( LITERAL , VAR0 [ VAR1 ] ) ; Assert . Equal ( LITERAL , VAR0 . OriginalValues [ VAR1 ] ) ;
VAR0 [ VAR1 . GetProperty ( LITERAL ) ] = LITERAL ; VAR0 [ VAR1 . GetProperty ( LITERAL ) ] = LITERAL ; await VAR0 . SetEntityStateAsync ( EntityState . Added , CancellationToken . None ) ; await VAR2 . SaveChangesAsync ( ) ; VAR0 [ VAR1 . GetProperty ( LITERAL ) ] = LITERAL ;
var VAR0 = VAR1 . GetOrMaterializeEntry ( VAR2 , new ObjectArrayValueReader ( new object [  ] { LITERAL , LITERAL } ) ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; Assert . Same ( VAR0 , VAR1 . GetOrMaterializeEntry ( VAR2 , new ObjectArrayValueReader ( new object [  ] { LITERAL , LITERAL } ) ) ) ; VAR0 . EntityState = EntityState . Modified ; Assert . Same ( VAR0 , VAR1 . GetOrMaterializeEntry ( VAR2 , new ObjectArrayValueReader ( new object [  ] { LITERAL , LITERAL } ) ) ) ; Assert . Equal ( EntityState . Modified , VAR0 . EntityState ) ; Assert . NotSame ( VAR0 , VAR1 . GetOrMaterializeEntry ( VAR2 , new ObjectArrayValueReader ( new object [  ] { LITERAL , LITERAL } ) ) ) ;
VAR0 . EntityState = EntityState . Unchanged ; Assert . False ( VAR0 . IsPropertyModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR2 ) ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; VAR0 . SetPropertyValue ( VAR1 , 1 ) ; VAR0 . SetPropertyValue ( VAR2 , LITERAL ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR2 ) ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . EntityState ) ; VAR0 . SetPropertyValue ( VAR1 , LITERAL ) ; VAR0 . SetPropertyValue ( VAR2 , LITERAL ) ;
Assert . Equal ( StoreValueGenerationStrategy . None , VAR0 . Columns [ 0 ] . ValueGenerationStrategy ) ; Assert . NotNull ( VAR1 . PrimaryKey . Name ) ; Assert . Equal ( LITERAL , VAR0 . PrimaryKey . Name ) ; Assert . Same ( VAR0 . Columns [ 0 ] , VAR0 . PrimaryKey . Columns [ 0 ] ) ; Assert . Equal ( 1 , VAR0 . ForeignKeys . Count ) ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( 1 , VAR1 . Columns . Count ) ; Assert . Equal ( LITERAL , VAR1 . Columns [ 0 ] . Name ) ; Assert . Equal ( LITERAL , VAR1 . Columns [ 0 ] . DataType ) ; Assert . Equal ( StoreValueGenerationStrategy . Identity , VAR1 . Columns [ 0 ] . ValueGenerationStrategy ) ;
VAR0 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR0 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; var VAR1 = VAR0 . AddProperty ( VAR0 . Type . GetProperty ( LITERAL + VAR2 ) ) ; VAR1 . Annotations . Add ( new Annotation ( LITERAL + VAR2 + LITERAL , LITERAL + VAR2 + LITERAL ) ) ; VAR1 . Annotations . Add ( new Annotation ( LITERAL + VAR2 + LITERAL , LITERAL + VAR2 + LITERAL ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . StorageName = LITERAL ; VAR1 . SetKey ( VAR0 ) ; VAR1 . AddProperty ( LITERAL , typeof ( Guid ) ) . StorageName = LITERAL ; VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . AddEntityType ( VAR1 ) ; var VAR3 = new EntityType ( typeof ( KoolEntity2 ) ) ; VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR3 . AddProperty ( LITERAL , typeof ( Guid ) ) ; VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . AddEntityType ( VAR3 ) ; var VAR4 = new EntityType ( typeof ( KoolEntity3 ) ) ; VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ;
var VAR0 = new SomeEntity { Id = LITERAL , Name = LITERAL } ; var VAR1 = CreateStateEntry ( VAR2 , VAR3 , VAR0 ) ; Assert . Equal ( LITERAL , VAR1 . GetPropertyValue ( VAR4 ) ) ; Assert . Equal ( LITERAL , VAR1 . GetPropertyValue ( VAR5 ) ) ; VAR1 . SetPropertyValue ( VAR4 , LITERAL ) ; VAR1 . SetPropertyValue ( VAR5 , LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Id ) ; Assert . Equal ( LITERAL , VAR0 . Name ) ;
VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) , shadowProperty : true , concurrencyToken : false ) ; VAR0 . AddProperty ( LITERAL , typeof ( Guid ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( Guid ) , shadowProperty : true , concurrencyToken : false ) ;
VAR0 . SetKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ) ; var VAR1 = new Model ( ) ; VAR1 . AddEntityType ( VAR0 ) ; VAR0 . AddForeignKey ( VAR0 . GetKey ( ) , VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ;
var VAR3 = Mock . Of < ContextConfiguration > ( ) ; var VAR1 = new StateEntryFactory ( VAR3 ) . Create ( VAR2 . Object , new Random ( ) ) ; Assert . IsType < ShadowStateEntry > ( VAR1 ) ; Assert . Same ( VAR3 , VAR1 . Configuration ) ;
var VAR4 = Mock . Of < ContextConfiguration > ( ) ; var VAR1 = new Random ( ) ; var VAR2 = new StateEntryFactory ( VAR4 ) . Create ( VAR3 . Object , VAR1 ) ; Assert . IsType < ClrStateEntry > ( VAR2 ) ; Assert . Same ( VAR4 , VAR2 . Configuration ) ;
var VAR4 = Mock . Of < ContextConfiguration > ( ) ; var VAR1 = new Random ( ) ; var VAR2 = new StateEntryFactory ( VAR4 ) . Create ( VAR3 . Object , VAR1 ) ; Assert . IsType < MixedStateEntry > ( VAR2 ) ; Assert . Same ( VAR4 , VAR2 . Configuration ) ;
var VAR3 = Mock . Of < ContextConfiguration > ( ) ; var VAR1 = new StateEntryFactory ( VAR3 ) . Create ( VAR2 . Object , new object [  ] { LITERAL } ) ; Assert . IsType < ClrStateEntry > ( VAR1 ) ; Assert . Same ( VAR3 , VAR1 . Configuration ) ;
var VAR7 = CreateConfiguration ( ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Customer ) ) ; var VAR3 = new Customer { VAR4 = LITERAL , VAR5 = LITERAL } ; var VAR6 = new ClrStateEntry ( VAR7 , VAR2 , VAR3 ) ;
var VAR7 = CreateConfiguration ( ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Customer ) ) ; var VAR3 = new Customer { VAR4 = LITERAL , VAR5 = LITERAL } ; var VAR6 = new ClrStateEntry ( VAR7 , VAR2 , VAR3 ) ;
var VAR7 = CreateConfiguration ( ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Customer ) ) ; var VAR3 = new Customer { VAR4 = LITERAL , VAR5 = LITERAL } ; var VAR6 = new ClrStateEntry ( VAR7 , VAR2 , VAR3 ) ;
VAR0 . Setup ( VAR1 => VAR1 . IsClrProperty ) . Returns ( false ) ; var VAR2 = new [ ] { VAR0 . Object } ; VAR3 = VAR3 ?? new Mock < IProperty > ( ) ; VAR3 . Setup ( VAR1 => VAR1 . Index ) . Returns ( 1 ) ; VAR3 . Setup ( VAR1 => VAR1 . ShadowIndex ) . Returns ( - 1 ) ; VAR3 . Setup ( VAR1 => VAR1 . IsClrProperty ) . Returns ( true ) ;
VAR0 . Setup ( VAR1 => VAR1 . ReferencedEntityType ) . Returns ( VAR2 . Object ) ; VAR0 . Setup ( VAR1 => VAR1 . EntityType ) . Returns ( VAR3 . Object ) ; VAR0 . Setup ( VAR1 => VAR1 . ReferencedProperties ) . Returns ( VAR4 ) ; VAR0 . Setup ( VAR1 => VAR1 . Properties ) . Returns ( VAR5 ) ; var VAR6 = CreateStateEntry ( VAR7 . Object , VAR2 . Object , new Random ( ) ) ; VAR6 . SetPropertyValue ( VAR8 . Object , LITERAL ) ; var VAR9 = VAR6 . GetPrincipalKeyValue ( VAR0 . Object ) ; Assert . IsType < SimpleEntityKey < string > > ( VAR9 ) ; Assert . Equal ( LITERAL , VAR9 . Value ) ; VAR7 . Verify ( VAR1 => VAR1 . CreateKey ( VAR2 . Object , VAR0 . Object . ReferencedProperties , VAR6 ) ) ;
Assert . Same ( VAR0 , VAR1 . IdentityGeneratorFactory . Create ( new Property ( LITERAL , typeof ( int ) , shadowProperty : false ) ) ) ; VAR2 . Verify ( VAR3 => VAR3 . Create ( It . IsAny < IProperty > ( ) ) , Times . Once ) ; VAR4 . Verify ( VAR3 => VAR3 . Create ( It . IsAny < IProperty > ( ) ) , Times . Never ) ; Assert . Same ( VAR5 , VAR1 . IdentityGeneratorFactory . Create ( new Property ( LITERAL , typeof ( int ) , shadowProperty : false ) ) ) ;
VAR0 . AddProperty ( Customer . VAR1 ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; Assert . Equal ( 0 , VAR0 . GetProperty ( LITERAL ) . Index ) ; Assert . Equal ( 1 , VAR0 . GetProperty ( LITERAL ) . Index ) ; Assert . Equal ( 0 , VAR0 . GetProperty ( LITERAL ) . ShadowIndex ) ; Assert . Equal ( - 1 , VAR0 . GetProperty ( LITERAL ) . ShadowIndex ) ; Assert . Equal ( 1 , VAR0 . ShadowPropertyCount ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ;
Assert . Same ( VAR0 , VAR1 . IdentityGeneratorFactory . Create ( new Property ( LITERAL , typeof ( int ) , hasClrProperty : true ) ) ) ; VAR2 . Verify ( VAR3 => VAR3 . Create ( It . IsAny < IProperty > ( ) ) , Times . Once ) ; VAR4 . Verify ( VAR3 => VAR3 . Create ( It . IsAny < IProperty > ( ) ) , Times . Never ) ; Assert . Same ( VAR5 , VAR1 . IdentityGeneratorFactory . Create ( new Property ( LITERAL , typeof ( int ) , hasClrProperty : true ) ) ) ; VAR2 . Verify ( VAR3 => VAR3 . Create ( It . IsAny < IProperty > ( ) ) , Times . Exactly ( LITERAL ) ) ;
VAR0 . SetKey ( new Key ( new [ ] { VAR1 , VAR2 } ) ) ; Assert . Equal ( LITERAL , VAR0 . GetKey ( ) . Properties . Count ( ) ) ; VAR0 . SetKey ( null ) ; Assert . Null ( VAR0 . TryGetKey ( ) ) ;
Assert . Equal ( Strings . FormatArgumentIsNullOrWhitespace ( LITERAL ) , VAR0 . Message ) ; VAR0 = Assert . Throws < ArgumentException > ( ( ) => new SQLiteConnectionStringBuilder ( ) [ null ] = 0 ) ; Assert . Equal ( Strings . FormatArgumentIsNullOrWhitespace ( LITERAL ) , VAR0 . Message ) ; VAR0 = Assert . Throws < ArgumentException > ( ( ) => new SQLiteConnectionStringBuilder ( ) [ LITERAL ] ) ; Assert . Equal ( Strings . FormatKeywordNotSupported ( LITERAL ) , VAR0 . Message ) ; VAR0 = Assert . Throws < ArgumentException > ( ( ) => new SQLiteConnectionStringBuilder ( ) [ LITERAL ] = 0 ) ; Assert . Equal ( Strings . FormatKeywordNotSupported ( LITERAL ) , VAR0 . Message ) ;
VAR0 . AddEntityType ( new EntityType ( typeof ( Customer ) ) ) ; var VAR3 = VAR0 . EntityType ( new Customer ( ) ) ; Assert . NotNull ( VAR3 ) ; Assert . Equal ( LITERAL , VAR3 . VAR2 ) ; Assert . Same ( VAR3 , VAR0 . EntityType ( typeof ( Customer ) ) ) ;
var VAR0 = VAR1 . ChangeTracker . Entry ( VAR2 ) ; Assert . Same ( VAR2 , VAR0 . Entity ) ; Assert . Equal ( VAR3 , VAR0 . State ) ; VAR0 = VAR1 . ChangeTracker . Entry ( VAR4 ) ; Assert . Same ( VAR4 , VAR0 . Entity ) ; Assert . Equal ( VAR3 , VAR0 . State ) ; var VAR5 = VAR1 . ChangeTracker . Entry ( VAR6 ) ;
VAR0 = VAR1 . Connection ; await VAR0 . OpenAsync ( VAR2 ) ; VAR3 = VAR0 . DbConnection . CreateCommand ( ) ; VAR3 . CommandText = VAR4 ; VAR1 . Logger . WriteSql ( VAR4 ) ;
