VAR0 = await VAR1 . ReadAsync < AGInfo > ( ) . ConfigureAwait ( false ) . AsList ( ) ; var VAR2 = await VAR1 . ReadAsync < AGReplica > ( ) . ConfigureAwait ( false ) . AsList ( ) ; var VAR3 = await VAR1 . ReadAsync < AGDatabaseReplica > ( ) . ConfigureAwait ( false ) . AsList ( ) ; var VAR4 = await VAR1 . ReadAsync < AGListener > ( ) . ConfigureAwait ( false ) . AsList ( ) ; var VAR5 = await VAR1 . ReadAsync < AGLisenerIPAddress > ( ) . ConfigureAwait ( false ) . AsList ( ) ;
VAR0 [ LITERAL ] . CityOrBirthName = VAR1 [ LITERAL ] . Name ; VAR0 [ LITERAL ] . Squad = VAR2 [ 0 ] ; VAR0 [ LITERAL ] . Tag = VAR3 [ LITERAL ] ; VAR0 [ LITERAL ] . VAR4 = new List < Weapon > { VAR5 [ LITERAL ] , VAR5 [ LITERAL ] } ; ( ( Officer ) VAR0 [ LITERAL ] ) . Reports = new List < Gear > { VAR0 [ LITERAL ] } ; VAR0 [ LITERAL ] . CityOfBirth = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . CityOrBirthName = VAR1 [ 0 ] . Name ;
VAR0 [ LITERAL ] . CityOrBirthName = VAR1 [ LITERAL ] . Name ; VAR0 [ LITERAL ] . Squad = VAR2 [ 1 ] ; VAR0 [ LITERAL ] . Tag = VAR3 [ LITERAL ] ; VAR0 [ LITERAL ] . VAR4 = new List < Weapon > { VAR5 [ LITERAL ] } ; VAR0 [ LITERAL ] . AssignedCity = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . CityOfBirth = VAR1 [ LITERAL ] ; VAR0 [ LITERAL ] . CityOrBirthName = VAR1 [ LITERAL ] . Name ; VAR0 [ LITERAL ] . Squad = VAR2 [ 0 ] ; VAR0 [ LITERAL ] . Tag = VAR3 [ LITERAL ] ; VAR0 [ LITERAL ] . VAR4 = new List < Weapon > { VAR5 [ LITERAL ] , VAR5 [ LITERAL ] } ; ( ( Officer ) VAR0 [ LITERAL ] ) . Reports = new List < Gear > { VAR0 [ LITERAL ] } ; VAR0 [ LITERAL ] . CityOfBirth = VAR1 [ 0 ] ; VAR0 [ LITERAL ] . CityOrBirthName = VAR1 [ 0 ] . Name ;
VAR0 . AddEntry ( VAR1 ) ; var VAR2 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR2 [ VAR4 ] = LITERAL ; VAR2 . SetEntityState ( EntityState . Modified ) ; var VAR5 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , false , null ) ; VAR5 . AddEntry ( VAR2 ) ;
Assert . Equal ( 1 , VAR0 . Count ) ; Assert . Equal ( 0 , VAR1 . Count ) ; AssertTrackedEvent ( VAR2 , 1 , EntityState . Modified , VAR0 [ 0 ] , VAR3 : false ) ; VAR2 . Entry ( new VAR4 ( LITERAL ) ) . State = EntityState . Modified ; Assert . Equal ( LITERAL , VAR0 . Count ) ; Assert . Equal ( 0 , VAR1 . Count ) ;
Assert . Equal ( 1 , VAR0 . Count ) ; Assert . Equal ( 1 , VAR1 . Count ) ; AssertChangedEvent ( VAR2 , LITERAL , EntityState . Unchanged , EntityState . Modified , VAR1 [ 0 ] ) ; VAR2 . Entry ( VAR3 ) . Property ( VAR4 => VAR4 . VAR5 ) . IsModified = false ; Assert . Equal ( 1 , VAR0 . Count ) ;
Assert . Equal ( 1 , VAR0 . ChangeTracker . Entries ( ) . Count ( ) ) ; VAR0 . Entry ( VAR1 ) . State = EntityState . Detached ; Assert . Equal ( 0 , VAR0 . ChangeTracker . Entries ( ) . Count ( ) ) ; VAR0 . ChangeTracker . DetectChanges ( ) ; Assert . Equal ( 0 , VAR0 . ChangeTracker . Entries ( ) . Count ( ) ) ; VAR0 . Entry ( VAR1 ) ; Assert . Equal ( 0 , VAR0 . ChangeTracker . Entries ( ) . Count ( ) ) ;
Assert . Equal ( nameof ( Customer ) , VAR0 . GetCosmosContainer ( ) ) ; ( ( IConventionEntityType ) VAR0 ) . SetCosmosContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetCosmosContainer ( ) ) ; Assert . Equal ( ConfigurationSource . Convention , ( ( IConventionEntityType ) VAR0 ) . GetCosmosContainerConfigurationSource ( ) ) ; VAR0 . SetCosmosContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetCosmosContainer ( ) ) ; Assert . Equal ( ConfigurationSource . Explicit , ( ( IConventionEntityType ) VAR0 ) . GetCosmosContainerConfigurationSource ( ) ) ; VAR0 . SetCosmosContainer ( null ) ; Assert . Equal ( nameof ( Customer ) , VAR0 . GetCosmosContainer ( ) ) ; Assert . Null ( ( ( IConventionEntityType ) VAR0 ) . GetCosmosContainerConfigurationSource ( ) ) ; ( ( IConventionModel ) VAR1 . Model ) . Builder . HasDefaultContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . GetCosmosContainer ( ) ) ;
Assert . Equal ( 1 , VAR0 . DeclaringEntityType . GetForeignKeys ( ) . Count ( ) ) ; var VAR1 = VAR2 . FindNavigation ( nameof ( Order . Details ) ) . ForeignKey ; var VAR3 = VAR1 . DeclaringEntityType ; Assert . True ( VAR1 . IsOwnership ) ; Assert . True ( VAR1 . IsUnique ) ; Assert . Equal ( nameof ( OrderDetails . OrderId ) , VAR3 . FindPrimaryKey ( ) . Properties . Single ( ) . Name ) ; Assert . Empty ( VAR3 . GetIndexes ( ) ) ; Assert . Equal ( - 1 , VAR3 . GetSeedData ( ) . Single ( ) [ nameof ( OrderDetails . OrderId ) ] ) ; Assert . Equal ( nameof ( OrderDetails . OrderId ) , VAR1 . Properties . Single ( ) . Name ) ; Assert . Equal ( nameof ( OrderDetails . Order ) , VAR1 . DependentToPrincipal . Name ) ;
Assert . Equal ( 1 , VAR0 . RequiredChildren . Count ( ) ) ; Assert . DoesNotContain ( VAR1 , VAR0 . RequiredChildren . Select ( VAR2 => VAR2 . Id ) ) ; Assert . Empty ( VAR3 . Set < Required1 > ( ) . Where ( VAR2 => VAR2 . Id == VAR1 ) ) ; Assert . Empty ( VAR3 . Set < Required2 > ( ) . Where ( VAR2 => VAR4 . Contains ( VAR2 . Id ) ) ) ; Assert . Same ( VAR0 , VAR5 . Parent ) ; Assert . Equal ( 0 , VAR5 . Children . Count ( ) ) ;
Assert . Equal ( null , VAR0 . Single ( VAR1 => VAR1 . Name == LITERAL ) . ComputedColumnSql ) ; Assert . Equal ( null , VAR0 . Single ( VAR1 => VAR1 . Name == LITERAL ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR1 => VAR1 . Name == LITERAL ) . ComputedColumnSql ) ; Assert . Equal ( null , VAR0 . Single ( VAR1 => VAR1 . Name == LITERAL ) . DefaultValueSql ) ;
Assert . Null ( VAR0 . Metadata . GetDiscriminatorProperty ( ) ) ; Assert . Null ( VAR0 . Metadata . GetDiscriminatorValue ( ) ) ; var VAR1 = VAR0 . ModelBuilder . Entity ( typeof ( EntityBase ) , ConfigurationSource . Explicit ) ; Assert . Same ( VAR0 , VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . DataAnnotation ) ) ; RunConvention ( VAR0 , null ) ; var VAR2 = VAR0 . Metadata . GetDiscriminatorProperty ( ) ; Assert . NotNull ( VAR2 ) ; Assert . Same ( VAR2 , VAR1 . Metadata . GetDiscriminatorProperty ( ) ) ;
var VAR0 = UnwrapLambdaFromQuoteExpression ( groupJoinMethod . Arguments [ LITERAL ] ) ; var VAR1 = UnwrapLambdaFromQuoteExpression ( groupJoinMethod . Arguments [ LITERAL ] ) ; var VAR2 = UnwrapLambdaFromQuoteExpression ( groupJoinMethod . Arguments [ LITERAL ] ) ; var VAR3 = UnwrapLambdaFromQuoteExpression ( VAR4 . Arguments [ 1 ] ) ;
VAR0 . SetSqlServerValueGenerationStrategy ( SqlServerValueGenerationStrategy . IdentityColumn ) ; VAR0 . SetSqlServerIdentitySeed ( VAR1 ) ; VAR0 . SetSqlServerIdentityIncrement ( VAR2 ) ; VAR0 . SetSqlServerHiLoSequenceName ( null ) ; VAR0 . SetSqlServerHiLoSequenceSchema ( null ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . IdentityColumn , VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ; VAR0 . SetSqlServerValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ; VAR0 . SetSqlServerValueGenerationStrategy ( null ) ; Assert . Null ( VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ;
Assert . Null ( VAR0 . FindSqlServerHiLoSequence ( ) ) ; VAR0 . SetSqlServerHiLoSequenceName ( LITERAL ) ; Assert . Null ( VAR0 . FindSqlServerHiLoSequence ( ) ) ; VAR1 . Model . SetSqlServerValueGenerationStrategy ( SqlServerValueGenerationStrategy . IdentityColumn ) ; Assert . Null ( VAR0 . FindSqlServerHiLoSequence ( ) ) ; VAR1 . Model . SetSqlServerValueGenerationStrategy ( null ) ; VAR0 . SetSqlServerValueGenerationStrategy ( SqlServerValueGenerationStrategy . IdentityColumn ) ; Assert . Null ( VAR0 . FindSqlServerHiLoSequence ( ) ) ;
VAR0 . SetSqlServerHiLoSequenceName ( LITERAL ) ; VAR0 . SetSqlServerHiLoSequenceSchema ( LITERAL ) ; VAR0 . SetSqlServerValueGenerationStrategy ( SqlServerValueGenerationStrategy . SequenceHiLo ) ; Assert . Equal ( LITERAL , VAR0 . FindSqlServerHiLoSequence ( ) . VAR1 ) ; Assert . Equal ( LITERAL , VAR0 . FindSqlServerHiLoSequence ( ) . Schema ) ;
SetForeignKeyProperties ( VAR0 , VAR1 , VAR2 , VAR3 : true ) ; SetNavigation ( VAR0 , VAR4 , VAR1 ) ;
var VAR0 = CreateCommand ( VAR1 , VAR2 . ParameterValues ) ; await VAR1 . OpenAsync ( VAR3 ) ; var VAR4 = Guid . NewGuid ( ) ; var VAR5 = DateTimeOffset . UtcNow ; var VAR6 = Stopwatch . StartNew ( ) ;
Assert . Equal ( nameof ( DbContext ) , VAR0 . Metadata . GetCosmosContainerName ( ) ) ; VAR0 . ForCosmosToContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetCosmosContainerName ( ) ) ; VAR0 . ForCosmosToContainer ( null ) ; Assert . Equal ( nameof ( DbContext ) , VAR0 . Metadata . GetCosmosContainerName ( ) ) ; VAR1 . ForCosmosHasDefaultContainerName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . GetCosmosContainerName ( ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . IsConcurrencyToken = VAR2 ; VAR0 . SetColumnName ( LITERAL ) ; VAR0 . ValueGenerated = VAR2 ? ValueGenerated . OnAddOrUpdate : ValueGenerated . Never ; var VAR3 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ;
Assert . Null ( VAR0 . GetSqlServerValueGenerationStrategy ( ) ) ; var VAR1 = VAR2 . FindProperty ( nameof ( GeneratedEntityNonInteger . DateTime ) ) ; Assert . Null ( VAR1 . GetSqlServerValueGenerationStrategy ( ) ) ; var VAR3 = VAR2 . FindProperty ( nameof ( GeneratedEntityNonInteger . Guid ) ) ; Assert . Null ( VAR3 . GetSqlServerValueGenerationStrategy ( ) ) ;
var VAR0 = new ForeignKeyPropertyDiscoveryConvention ( VAR1 ) ; VAR2 . EntityTypeMemberIgnoredConventions . Add ( VAR3 ) ; VAR2 . EntityTypeMemberIgnoredConventions . Add ( VAR4 ) ; VAR2 . EntityTypeMemberIgnoredConventions . Add ( VAR0 ) ; VAR2 . EntityTypeMemberIgnoredConventions . Add ( VAR5 ) ; var VAR6 = new KeyAttributeConvention ( VAR1 ) ; var VAR7 = new BackingFieldConvention ( VAR1 ) ; var VAR8 = new ConcurrencyCheckAttributeConvention ( VAR1 ) ; var VAR9 = new DatabaseGeneratedAttributeConvention ( VAR1 ) ; var VAR10 = new RequiredPropertyAttributeConvention ( VAR1 ) ; var VAR11 = new NonNullableReferencePropertyConvention ( VAR1 ) ; var VAR12 = new MaxLengthAttributeConvention ( VAR1 ) ; var VAR13 = new StringLengthAttributeConvention ( VAR1 ) ; var VAR14 = new TimestampAttributeConvention ( VAR1 ) ;
VAR0 . BaseEntityTypeChangedConventions . Add ( VAR1 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR2 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR3 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR4 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR5 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR6 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR7 ) ; VAR0 . BaseEntityTypeChangedConventions . Add ( VAR8 ) ;
Assert . Equal ( LITERAL , VAR0 . GetOutgoingNeighbours ( VAR1 ) . Count ( ) ) ; Assert . Equal ( LITERAL , VAR0 . GetOutgoingNeighbours ( VAR1 ) . Intersect ( new [ ] { VAR2 , VAR3 } ) . Count ( ) ) ; Assert . Equal ( LITERAL , VAR0 . GetIncomingNeighbours ( VAR3 ) . Count ( ) ) ; Assert . Equal ( LITERAL , VAR0 . GetIncomingNeighbours ( VAR3 ) . Intersect ( new [ ] { VAR1 , VAR2 } ) . Count ( ) ) ;
var VAR0 = VAR1 . Entry ( VAR2 ) . Collection ( VAR3 => VAR3 . VAR4 ) . GetTargetEntry ( VAR5 ) ; VAR2 . VAR6 = VAR2 . VAR4 ; VAR2 . VAR4 = null ; VAR1 . ChangeTracker . DetectChanges ( ) ; Assert . Equal ( VAR7 == EntityState . Added ? LITERAL : LITERAL , VAR1 . ChangeTracker . Entries ( ) . Count ( ) ) ; Assert . Null ( VAR2 . VAR4 ) ; Assert . Contains ( VAR5 , VAR2 . VAR6 ) ; Assert . Equal ( VAR7 , VAR1 . Entry ( VAR2 ) . State ) ; Assert . Equal ( VAR7 == EntityState . Added ? EntityState . Detached : EntityState . Deleted , VAR0 . State ) ; var VAR8 = VAR1 . Entry ( VAR2 ) . Collection ( VAR3 => VAR3 . VAR6 ) . GetTargetEntry ( VAR5 ) ;
var VAR0 = VAR1 . Entry ( VAR2 ) . Collection ( VAR3 => VAR3 . VAR4 ) . GetTargetEntry ( VAR5 ) ; VAR2 . VAR6 = VAR2 . VAR4 ; VAR2 . VAR4 = null ; VAR1 . ChangeTracker . DetectChanges ( ) ; Assert . Equal ( VAR7 == EntityState . Added ? LITERAL : LITERAL , VAR1 . ChangeTracker . Entries ( ) . Count ( ) ) ; Assert . Null ( VAR2 . VAR4 ) ; Assert . Same ( VAR2 , VAR5 . VAR8 ) ; Assert . Contains ( VAR5 , VAR2 . VAR6 ) ; Assert . Equal ( VAR7 , VAR1 . Entry ( VAR2 ) . State ) ; Assert . Equal ( VAR7 == EntityState . Added ? EntityState . Detached : EntityState . Deleted , VAR0 . State ) ; var VAR9 = VAR1 . Entry ( VAR2 ) . Collection ( VAR3 => VAR3 . VAR6 ) . GetTargetEntry ( VAR5 ) ;
Assert . Equal ( nameof ( Customer ) , VAR0 . Metadata . Cosmos ( ) . ContainerName ) ; VAR0 . ToContainer ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Cosmos ( ) . ContainerName ) ; VAR0 . ToContainer ( null ) ; Assert . Equal ( nameof ( Customer ) , VAR0 . Metadata . Cosmos ( ) . ContainerName ) ; VAR1 . HasDefaultContainerName ( LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Cosmos ( ) . ContainerName ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . HiLoSequenceName ) ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . HiLoSequenceSchema ) ; ValidateSchemaNamedSpecificSequence ( VAR1 . Relational ( ) . FindSequence ( LITERAL , LITERAL ) ) ; ValidateSchemaNamedSpecificSequence ( VAR1 . SqlServer ( ) . FindSequence ( LITERAL , LITERAL ) ) ;
Assert . Equal ( SqlServerValueGenerationStrategy . SequenceHiLo , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR0 . ValueGenerated ) ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . HiLoSequenceName ) ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . HiLoSequenceSchema ) ; ValidateSchemaNamedSpecificSequence ( VAR1 . Relational ( ) . FindSequence ( LITERAL , LITERAL ) ) ; ValidateSchemaNamedSpecificSequence ( VAR1 . SqlServer ( ) . FindSequence ( LITERAL , LITERAL ) ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ColumnName ) ; Assert . Equal ( typeof ( string ) , VAR0 . ClrType ) ; Assert . False ( VAR0 . IsColumnNullable ( ) ) ; Assert . Null ( VAR0 . GetMaxLength ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DefaultValueSql ) ;
Assert . Null ( VAR0 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Null ( VAR1 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Null ( VAR1 . Metadata . Relational ( ) . DiscriminatorValue ) ; Assert . Null ( VAR0 . Metadata . Relational ( ) . DiscriminatorValue ) ; VAR0 . HasBaseType ( ( Type ) null , ConfigurationSource . DataAnnotation ) ; Assert . True ( new DiscriminatorConvention ( VAR2 ) . Apply ( VAR0 , oldBaseType : VAR1 . Metadata ) ) ; Assert . Null ( VAR1 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . NotNull ( VAR0 . Metadata . Relational ( ) . DiscriminatorProperty ) ; Assert . Null ( VAR1 . Metadata . Relational ( ) . DiscriminatorValue ) ; Assert . Null ( VAR0 . Metadata . Relational ( ) . DiscriminatorValue ) ;
Assert . Null ( VAR0 . Relational ( ) . Schema ) ; VAR1 . Model . Relational ( ) . DefaultSchema = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . Schema ) ; VAR1 . Model . Relational ( ) . DefaultSchema = null ; Assert . Null ( VAR0 . Relational ( ) . Schema ) ;
Assert . Null ( VAR0 . Relational ( ) . ColumnType ) ; VAR0 . Relational ( ) . ColumnType = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ColumnType ) ; VAR0 . Relational ( ) . ColumnType = null ; Assert . Null ( VAR0 . Relational ( ) . ColumnType ) ;
Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = null ; Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ;
VAR0 . Relational ( ) . DiscriminatorProperty = VAR1 ; Assert . Null ( VAR0 . Relational ( ) . DiscriminatorValue ) ; VAR0 . Relational ( ) . DiscriminatorValue = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DiscriminatorValue ) ; VAR0 . Relational ( ) . DiscriminatorValue = null ; Assert . Null ( VAR0 . Relational ( ) . DiscriminatorValue ) ;
VAR0 . AddProperty ( LITERAL , typeof ( bool ? ) ) . Relational ( ) . DefaultValue = false ; VAR0 . AddProperty ( LITERAL , typeof ( bool ) ) . Relational ( ) . DefaultValue = false ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( bool ) ) ; VAR1 . Relational ( ) . DefaultValue = false ;
VAR0 . AddProperty ( LITERAL , typeof ( bool ? ) ) . Relational ( ) . DefaultValue = true ; VAR0 . AddProperty ( LITERAL , typeof ( bool ) ) . Relational ( ) . DefaultValue = true ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( bool ) ) ; VAR1 . Relational ( ) . DefaultValue = true ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ; Assert . Equal ( LITERAL , VAR1 . Relational ( ) . ConstraintName ) ; var VAR2 = VAR0 . DeclaringEntityType . GetDeclaredIndexes ( ) . Single ( ) ; var VAR3 = VAR1 . DeclaringEntityType . GetDeclaredIndexes ( ) . Single ( ) ; Assert . NotSame ( VAR2 , VAR3 ) ; Assert . NotEqual ( VAR2 . Relational ( ) . VAR4 , VAR3 . Relational ( ) . VAR4 ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . ConstraintName ) ; Assert . Equal ( LITERAL , VAR1 . Relational ( ) . ConstraintName ) ; var VAR2 = VAR0 . DeclaringEntityType . GetDeclaredIndexes ( ) . Single ( ) ; var VAR3 = VAR1 . DeclaringEntityType . GetDeclaredIndexes ( ) . Single ( ) ; Assert . NotSame ( VAR2 , VAR3 ) ; Assert . NotEqual ( VAR2 . Relational ( ) . VAR4 , VAR3 . Relational ( ) . VAR4 ) ;
Assert . True ( VAR0 . HasValueGenerator ( ( VAR1 , VAR2 ) => new CustomValueGenerator1 ( ) , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . HasValueGenerator ( ( VAR1 , VAR2 ) => new CustomValueGenerator2 ( ) , ConfigurationSource . DataAnnotation ) ) ; Assert . IsType < CustomValueGenerator2 > ( VAR3 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . True ( VAR3 . RequiresValueGenerator ( ) ) ; Assert . False ( VAR0 . HasValueGenerator ( ( VAR1 , VAR2 ) => new CustomValueGenerator1 ( ) , ConfigurationSource . Convention ) ) ;
Assert . False ( VAR0 . HasValueGenerator ( ( Func < IProperty , IEntityType , ValueGenerator > ) null , ConfigurationSource . Convention ) ) ; Assert . IsType < CustomValueGenerator1 > ( VAR1 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . Equal ( ValueGenerated . Never , VAR1 . ValueGenerated ) ; Assert . True ( VAR1 . RequiresValueGenerator ( ) ) ; Assert . True ( VAR0 . HasValueGenerator ( ( Func < IProperty , IEntityType , ValueGenerator > ) null , ConfigurationSource . Explicit ) ) ; Assert . Null ( VAR1 . GetValueGeneratorFactory ( ) ) ;
Assert . True ( VAR0 . HasValueGenerator ( typeof ( CustomValueGenerator1 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . IsType < CustomValueGenerator1 > ( VAR1 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . Equal ( ValueGenerated . Never , VAR1 . ValueGenerated ) ; Assert . True ( VAR1 . RequiresValueGenerator ( ) ) ; Assert . False ( VAR0 . HasValueGenerator ( ( Type ) null , ConfigurationSource . Convention ) ) ; Assert . IsType < CustomValueGenerator1 > ( VAR1 . GetValueGeneratorFactory ( ) ( null , null ) ) ; Assert . Equal ( ValueGenerated . Never , VAR1 . ValueGenerated ) ; Assert . True ( VAR1 . RequiresValueGenerator ( ) ) ; Assert . True ( VAR0 . HasValueGenerator ( ( Type ) null , ConfigurationSource . Explicit ) ) ; Assert . Null ( VAR1 . GetValueGeneratorFactory ( ) ) ;
var VAR0 = new Model ( ) . AddEntityType ( typeof ( SomeEntity ) ) ; VAR0 . AddProperty ( SomeEntity . VAR1 ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) , ConfigurationSource . Explicit , ConfigurationSource . Explicit ) ; VAR0 . AddProperty ( SomeEntity . VAR2 ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) , ConfigurationSource . Explicit , ConfigurationSource . Explicit ) ; VAR0 . AddProperty ( SomeEntity . VAR3 ) ; VAR0 . AddProperty ( LITERAL , typeof ( Guid ) , ConfigurationSource . Explicit , ConfigurationSource . Explicit ) ;
Assert . Equal ( CoreResources . LogSaveChangesStarting ( new TestLogger < LoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ; ( level , _ , message , _ , _ ) = VAR0 . Log . Single ( VAR1 => VAR1 . VAR2 . VAR2 == CoreEventId . SaveChangesCompleted . VAR2 ) ; Assert . Equal ( LogLevel . Debug , level ) ; Assert . Equal ( CoreResources . LogSaveChangesCompleted ( new TestLogger < LoggingDefinitions > ( ) ) . GenerateMessage ( nameof ( LikeAZooContext ) , 1 ) , message ) ;
VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( SomeEntity . VAR1 ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . AddProperty ( SomeEntity . VAR2 ) ; VAR0 . AddProperty ( LITERAL , typeof ( Guid ) ) ;
var VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( A ) ) ; var VAR2 = VAR0 . AddEntityType ( typeof ( C ) ) ; VAR2 . HasBaseType ( VAR1 ) ; var VAR3 = VAR0 . AddEntityType ( typeof ( D ) ) ; VAR3 . HasBaseType ( VAR2 ) ;
var VAR0 = new Model ( ) . AddEntityType ( LITERAL ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . GetOrSetPrimaryKey ( VAR1 ) ;
var VAR0 = new Model ( ) . AddEntityType ( typeof ( Customer ) ) ; var VAR1 = VAR0 . GetOrAddProperty ( Customer . VAR2 ) ; var VAR3 = VAR0 . GetOrAddProperty ( Customer . VAR4 ) ; var VAR5 = VAR0 . AddIndex ( new [ ] { VAR1 , VAR3 } , ConfigurationSource . Convention ) ;
VAR0 . SetFieldInfo ( VAR1 , ConfigurationSource . Explicit ) ; Assert . Equal ( VAR2 , VAR0 . GetFieldName ( ) ) ; Assert . Same ( VAR3 ?? ( MemberInfo ) VAR1 , VAR0 . GetIdentifyingMemberInfo ( ) ) ; VAR0 . SetFieldInfo ( null , ConfigurationSource . Explicit ) ;
Assert . True ( VAR0 . Properties . Single ( ) . IsShadowProperty ) ; Assert . False ( VAR0 . IsUnique ) ; var VAR1 = VAR2 . Property ( DependentEntity . VAR3 , ConfigurationSource . Convention ) ; Assert . Same ( VAR1 , VAR4 . Apply ( VAR1 ) ) ; var VAR5 = VAR2 . Metadata . GetForeignKeys ( ) . Single ( ) ; Assert . NotSame ( VAR0 , VAR5 ) ;
Assert . Equal ( PropertySaveBehavior . Save , VAR0 . BeforeSaveBehavior ) ; Assert . Equal ( PropertySaveBehavior . Save , VAR0 . AfterSaveBehavior ) ; VAR0 . ValueGenerated = ValueGenerated . OnAddOrUpdate ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR0 . BeforeSaveBehavior ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR0 . AfterSaveBehavior ) ; VAR0 . BeforeSaveBehavior = PropertySaveBehavior . Save ; Assert . Equal ( PropertySaveBehavior . Save , VAR0 . BeforeSaveBehavior ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR0 . AfterSaveBehavior ) ; VAR0 . AfterSaveBehavior = PropertySaveBehavior . Save ; Assert . Equal ( PropertySaveBehavior . Save , VAR0 . BeforeSaveBehavior ) ; Assert . Equal ( PropertySaveBehavior . Save , VAR0 . AfterSaveBehavior ) ;
Assert . False ( VAR0 . IsShadowProperty ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Same ( typeof ( string ) , VAR0 . VAR2 ) ; Assert . Same ( VAR3 , VAR0 . DeclaringEntityType ) ; Assert . Same ( HiddenFieldBase . VAR4 , VAR0 . FieldInfo ) ; Assert . Null ( VAR0 . PropertyInfo ) ;
VAR0 . AfterSaveBehavior = PropertySaveBehavior . Throw ; var VAR1 = VAR0 . Builder ; Assert . Equal ( ConfigurationSource . Explicit , VAR0 . GetAfterSaveBehaviorConfigurationSource ( ) ) ; Assert . True ( VAR1 . AfterSave ( PropertySaveBehavior . Throw , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . AfterSave ( PropertySaveBehavior . Ignore , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( PropertySaveBehavior . Throw , VAR0 . AfterSaveBehavior ) ; Assert . True ( VAR1 . AfterSave ( PropertySaveBehavior . Ignore , ConfigurationSource . Explicit ) ) ; Assert . Equal ( PropertySaveBehavior . Ignore , VAR0 . AfterSaveBehavior ) ;
Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . HasConstraintName ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . Name ) ;
Assert . Same ( VAR0 , new ValueGeneratorConvention ( new TestLogger < DbLoggerCategory . Model > ( ) ) . Apply ( VAR0 ) ) ; Assert . False ( VAR1 [ 0 ] . RequiresValueGenerator ( ) ) ; Assert . Equal ( ValueGenerated . Never , VAR1 [ 0 ] . ValueGenerated ) ; VAR2 . RemoveForeignKey ( VAR0 . Metadata , ConfigurationSource . Convention ) ; new ValueGeneratorConvention ( new TestLogger < DbLoggerCategory . Model > ( ) ) . Apply ( VAR2 , VAR0 . Metadata ) ;
Assert . Same ( VAR0 , new ValueGeneratorConvention ( new TestLogger < DbLoggerCategory . Model > ( ) ) . Apply ( VAR0 ) ) ; Assert . Equal ( ValueGenerated . Never , ( ( IProperty ) VAR1 ) . ValueGenerated ) ; VAR2 . RemoveForeignKey ( VAR0 . Metadata , ConfigurationSource . Convention ) ; Assert . True ( new ValueGeneratorConvention ( new TestLogger < DbLoggerCategory . Model > ( ) ) . Apply ( VAR2 , ( Key ) null ) ) ;
VAR0 . StartTracking ( VAR1 ) ; VAR0 . StopTracking ( VAR1 ) ; var VAR2 = VAR0 . GetOrCreateEntry ( VAR3 ) ; VAR0 . StartTracking ( VAR2 ) ;
new DerivedTypeDiscoveryConvention ( ) . Apply ( VAR0 ) ; Assert . Same ( VAR0 . Metadata , VAR1 . Metadata . BaseType ) ; Assert . Same ( VAR0 . Metadata , VAR2 . Metadata . BaseType ) ; new DerivedTypeDiscoveryConvention ( ) . Apply ( VAR1 ) ;
var VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( A ) ) ; SetPrimaryKey ( VAR1 ) ; var VAR2 = VAR0 . AddEntityType ( typeof ( C ) ) ; VAR2 . HasBaseType ( VAR1 ) ;
var VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( A ) ) ; SetPrimaryKey ( VAR1 ) ; var VAR2 = VAR0 . AddEntityType ( typeof ( D ) ) ; VAR2 . HasBaseType ( VAR1 ) ;
var VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( ChangedOnlyEntity ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL ) ; VAR1 . SetPrimaryKey ( VAR2 ) ; VAR0 . ChangeTrackingStrategy = VAR3 ;
Assert . Equal ( LITERAL , VAR0 . CosmosSql ( ) . CollectionName ) ; VAR0 . CosmosSql ( ) . CollectionName = LITERAL ; Assert . Equal ( LITERAL , VAR0 . CosmosSql ( ) . CollectionName ) ; VAR0 . CosmosSql ( ) . CollectionName = null ; Assert . Equal ( LITERAL , VAR0 . CosmosSql ( ) . CollectionName ) ;
Assert . True ( VAR0 . Photos == null || ! VAR0 . Photos . Any ( ) ) ; var VAR1 = VAR2 . ProductWebFeatures . Single ( VAR3 => VAR3 . Heading . StartsWith ( LITERAL ) ) ; var VAR4 = VAR2 . ProductWebFeatures . Single ( VAR3 => VAR3 . Heading . StartsWith ( LITERAL ) ) ; Assert . Same ( VAR5 , VAR1 . Photo ) ; Assert . Same ( VAR1 , VAR5 . Features . Single ( ) ) ; Assert . Same ( VAR6 , VAR1 . Review ) ; Assert . Same ( VAR1 , VAR6 . Features . Single ( ) ) ; Assert . Null ( VAR4 . Photo ) ; Assert . True ( VAR7 . Features == null || ! VAR7 . Features . Any ( ) ) ;
VAR0 . Clear ( ) ; VAR1 . SaveChanges ( ) ; var ( level , _ , message ) = VAR0 . Single ( VAR2 => VAR2 . VAR3 . VAR3 == CoreEventId . DetectChangesStarting . VAR3 ) ; Assert . Equal ( LogLevel . Debug , level ) ; Assert . Equal ( CoreStrings . LogDetectChangesStarting . GenerateMessage ( nameof ( LikeAZooContext ) ) , message ) ; ( level , _ , message ) = VAR0 . Single ( VAR2 => VAR2 . VAR3 . VAR3 == CoreEventId . DetectChangesCompleted . VAR3 ) ;
VAR0 . Clear ( ) ; VAR1 . VAR2 = null ; VAR3 . ChangeTracker . DetectChanges ( ) ; var ( level , _ , message ) = VAR0 . Single ( VAR4 => VAR4 . VAR5 . VAR5 == CoreEventId . ReferenceChangeDetected . VAR5 ) ;
var VAR0 = CreateModel ( ) ; var VAR1 = new InMemoryDatabaseCreator ( CreateStore ( VAR2 ) , VAR0 ) ; Assert . True ( VAR1 . EnsureCreated ( ) ) ; Assert . False ( VAR1 . EnsureCreated ( ) ) ; Assert . False ( VAR1 . EnsureCreated ( ) ) ; VAR1 = new InMemoryDatabaseCreator ( CreateStore ( VAR2 ) , VAR0 ) ;
VAR0 . Process ( BenchmarkRunner . Run < InitializationTests > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < DbSetOperationTests . AddDataVariations > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < DbSetOperationTests . ExistingDataVariations > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < FixupTests . ChildVariations > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < FixupTests . ParentVariations > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < FuncletizationTests > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < NavigationsQueryTests > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < QueryCompilationTests > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < RawSqlQueryTests > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < SimpleQueryTests > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < SimpleUpdatePipelineTests . Insert > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < SimpleUpdatePipelineTests . Update > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < SimpleUpdatePipelineTests . Delete > ( ) ) ; VAR0 . Process ( BenchmarkRunner . Run < SimpleUpdatePipelineTests . Mixed > ( ) ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; VAR1 = VAR2 ; VAR3 = VAR4 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR9 = VAR0 ;
var VAR0 = VAR1 . Create ( VAR2 ) ; var VAR3 = VAR0 . FindEntityType ( LITERAL ) . GetProperties ( ) . ToList ( ) ; Assert . Equal ( typeof ( bool ? ) , VAR3 . First ( VAR4 => VAR4 . Name == LITERAL ) . ClrType ) ;
Assert . False ( VAR0 . OwnedEntity ( typeof ( VAR1 ) , ConfigurationSource . Convention ) ) ; Assert . NotNull ( VAR2 . Owns ( typeof ( VAR1 ) , nameof ( VAR3 . VAR1 ) , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . OwnedEntity ( typeof ( VAR1 ) , ConfigurationSource . Convention ) ) ; Assert . True ( VAR0 . OwnedEntity ( typeof ( VAR1 ) , ConfigurationSource . DataAnnotation ) ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; VAR6 = VAR7 ; VAR8 = VAR9 ; VAR10 = VAR11 ; VAR12 = VAR13 ; VAR14 = VAR15 ; VAR16 = VAR0 ;
var VAR0 = new ModelBuilder ( TestRelationalConventionSetBuilder . Build ( ) ) ; VAR0 . Entity < Animal > ( ) ; GenerateMapping ( VAR0 . Entity < Cat > ( ) . Property ( VAR1 => VAR1 . VAR2 ) . Metadata ) ; GenerateMapping ( VAR0 . Entity < Dog > ( ) . Property ( VAR3 => VAR3 . VAR2 ) . Metadata ) ;
await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; Assert . Equal ( 1 , VAR1 . OpenCount ) ; Assert . Equal ( 1 , VAR1 . CloseCount ) ; VAR0 . Close ( ) ; Assert . Equal ( 1 , VAR1 . OpenCount ) ; Assert . Equal ( 1 , VAR1 . CloseCount ) ; VAR1 . SetState ( ConnectionState . Closed ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ;
await VAR0 . OpenAsync ( default ( CancellationToken ) ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; Assert . Equal ( 1 , VAR1 . CloseCount ) ; VAR0 . Close ( ) ; Assert . Equal ( LITERAL , VAR1 . OpenCount ) ; Assert . Equal ( LITERAL , VAR1 . CloseCount ) ; VAR1 . SetState ( ConnectionState . Open ) ; await VAR0 . OpenAsync ( default ( CancellationToken ) ) ;
Assert . Equal ( LITERAL , VAR0 . SqlStatements . Count ) ; Assert . Contains ( LITERAL , VAR0 . SqlStatements [ 0 ] ) ; Assert . Contains ( LITERAL , VAR0 . SqlStatements [ 1 ] ) ; Assert . Contains ( LITERAL + VAR1 , VAR0 . SqlStatements [ LITERAL ] ) ; Assert . Contains ( LITERAL , VAR0 . SqlStatements [ LITERAL ] ) ; Assert . Contains ( LITERAL , VAR0 . SqlStatements [ LITERAL ] ) ; Assert . Contains ( LITERAL , VAR0 . SqlStatements [ LITERAL ] ) ;
VAR0 = VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR0 . VAR5 ) ; VAR6 = ( Optional1Derived ) VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; VAR7 = ( Optional1MoreDerived ) VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR7 . VAR5 ) ; VAR8 = VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; VAR10 = VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; VAR11 = ( Optional2Derived ) VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR11 . VAR5 ) ; VAR12 = ( Optional2MoreDerived ) VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR12 . VAR5 ) ;
VAR0 = VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR0 . VAR5 ) ; VAR6 = ( Required1Derived ) VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; VAR7 = ( Required1MoreDerived ) VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR7 . VAR5 ) ; VAR8 = VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; VAR10 = VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; VAR11 = ( Required2Derived ) VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR11 . VAR5 ) ; VAR12 = ( Required2MoreDerived ) VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR12 . VAR5 ) ;
VAR0 = VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR0 . VAR5 ) ; VAR6 = ( OptionalAk1Derived ) VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR6 . VAR5 ) ; VAR7 = ( OptionalAk1MoreDerived ) VAR1 . VAR2 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR7 . VAR5 ) ; VAR8 = VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR8 . VAR5 ) ; VAR10 = VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR10 . VAR5 ) ; VAR11 = VAR1 . VAR12 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR11 . VAR5 ) ; VAR13 = VAR1 . VAR12 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR13 . VAR5 ) ; VAR14 = ( OptionalAk2Derived ) VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR14 . VAR5 ) ; VAR15 = ( OptionalAk2MoreDerived ) VAR1 . VAR9 . VAR3 ( VAR4 => VAR4 . VAR5 == VAR15 . VAR5 ) ;
Assert . Equal ( LogLevel . Warning , VAR0 [ 0 ] . Item1 ) ; Assert . Equal ( CoreStrings . LogSensitiveDataLoggingEnabled . GenerateMessage ( ) , VAR0 [ 0 ] . Item3 ) ; Assert . Equal ( LogLevel . Debug , VAR0 [ 1 ] . Item1 ) ; Assert . Equal ( LogLevel . Information , VAR0 [ LITERAL ] . Item1 ) ;
var VAR0 = new Model ( ) ; var VAR1 = VAR0 . AddEntityType ( typeof ( BaseType ) ) ; var VAR2 = VAR1 . GetOrAddProperty ( VAR3 . VAR4 ) ; VAR2 . ValueGenerated = ValueGenerated . OnAdd ; var VAR5 = VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR1 . GetOrAddKey ( new [ ] { VAR2 , VAR5 } ) ; IMutableEntityType VAR7 = VAR0 . AddEntityType ( typeof ( VAR3 ) ) ; VAR7 . BaseType = VAR1 ;
Assert . Same ( typeof ( int ) , VAR0 . ClrType ) ; Assert . Same ( VAR1 , VAR0 . DeclaringEntityType ) ; Assert . Same ( VAR0 , VAR1 . GetOrAddProperty ( VAR2 . VAR3 ) ) ; Assert . Same ( VAR0 , VAR1 . FindProperty ( LITERAL ) ) ; Assert . False ( VAR0 . IsShadowProperty ) ; var VAR4 = VAR1 . AddProperty ( LITERAL ) ; Assert . False ( ( ( IProperty ) VAR4 ) . IsShadowProperty ) ; Assert . Equal ( LITERAL , VAR4 . VAR5 ) ; Assert . Same ( typeof ( string ) , VAR4 . ClrType ) ;
Assert . Equal ( LITERAL , VAR0 . Table . SchemaName ) ; Assert . Equal ( LITERAL , VAR0 . Table . Name ) ; Assert . Equal ( LITERAL , VAR0 . PrincipalTable . SchemaName ) ; Assert . Equal ( LITERAL , VAR0 . PrincipalTable . Name ) ; Assert . Equal ( LITERAL , VAR0 . Columns . Single ( ) . Column . Name ) ; Assert . Equal ( LITERAL , VAR0 . Columns . Single ( ) . PrincipalColumn . Name ) ;
Assert . Equal ( true , VAR0 . FindProperty ( LITERAL ) . IsUnicode ( ) ) ; Assert . Equal ( false , VAR0 . FindProperty ( LITERAL ) . IsUnicode ( ) ) ; Assert . Equal ( true , VAR0 . FindProperty ( LITERAL ) . IsUnicode ( ) ) ; Assert . Equal ( false , VAR0 . FindProperty ( LITERAL ) . IsUnicode ( ) ) ; Assert . Equal ( true , VAR0 . FindProperty ( LITERAL ) . IsUnicode ( ) ) ; Assert . Equal ( false , VAR0 . FindProperty ( LITERAL ) . IsUnicode ( ) ) ;
Assert . Null ( VAR0 . Sqlite ( ) . Schema ) ; Assert . Null ( ( ( IEntityType ) VAR0 ) . Sqlite ( ) . Schema ) ; VAR0 . Relational ( ) . Schema = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . Schema ) ; Assert . Equal ( LITERAL , ( ( IEntityType ) VAR0 ) . Sqlite ( ) . Schema ) ;
Assert . True ( VAR0 . BeforeSave ( PropertyValueBehavior . Throw , ConfigurationSource . DataAnnotation ) ) ; Assert . True ( VAR0 . BeforeSave ( PropertyValueBehavior . Ignore , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( PropertyValueBehavior . Ignore , VAR1 . BeforeSaveBehavior ) ; Assert . False ( VAR0 . BeforeSave ( PropertyValueBehavior . UseValue , ConfigurationSource . Convention ) ) ; Assert . Equal ( PropertyValueBehavior . Ignore , VAR1 . BeforeSaveBehavior ) ;
VAR0 . AfterSaveBehavior = PropertyValueBehavior . Throw ; var VAR1 = VAR0 . Builder ; Assert . Equal ( ConfigurationSource . Explicit , VAR0 . GetAfterSaveBehaviorConfigurationSource ( ) ) ; Assert . True ( VAR1 . AfterSave ( PropertyValueBehavior . Throw , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR1 . AfterSave ( PropertyValueBehavior . Ignore , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( PropertyValueBehavior . Throw , VAR0 . AfterSaveBehavior ) ; Assert . True ( VAR1 . AfterSave ( PropertyValueBehavior . Ignore , ConfigurationSource . Explicit ) ) ; Assert . Equal ( PropertyValueBehavior . Ignore , VAR0 . AfterSaveBehavior ) ;
var VAR0 = new PropertyAnnotationSetConvention ( false ) ; var VAR1 = new PropertyAnnotationSetConvention ( true ) ; var VAR2 = new PropertyAnnotationSetConvention ( false ) ; VAR3 . PropertyAnnotationSetConventions . Add ( VAR0 ) ; VAR3 . PropertyAnnotationSetConventions . Add ( VAR1 ) ; VAR3 . PropertyAnnotationSetConventions . Add ( VAR2 ) ;
var VAR0 = new PrimaryKeyConvention ( VAR1 : false ) ; var VAR2 = new PrimaryKeyConvention ( VAR1 : true ) ; var VAR3 = new PrimaryKeyConvention ( VAR1 : false ) ; VAR4 . PrimaryKeySetConventions . Add ( VAR0 ) ; VAR4 . PrimaryKeySetConventions . Add ( VAR2 ) ; VAR4 . PrimaryKeySetConventions . Add ( VAR3 ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ; VAR0 . AddEntry ( VAR1 ) ; var VAR2 = VAR3 . GetOrCreateEntry ( new object ( ) ) ; VAR2 [ VAR4 ] = LITERAL ; VAR2 . SetEntityState ( EntityState . Deleted ) ; var VAR5 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) . GenerateNext , new TestAnnotationProvider ( ) , false , null ) ;
var VAR0 = new InterceptingLogger < LoggerCategory . Database > ( VAR1 , new LoggingOptions ( ) ) ; var VAR2 = new InterceptingLogger < LoggerCategory . Database . Sql > ( VAR1 , new LoggingOptions ( ) ) ; var VAR3 = new InterceptingLogger < LoggerCategory . Query > ( VAR1 , new LoggingOptions ( ) ) ; var VAR4 = VAR1 . CreateLogger ( LITERAL ) ; VAR0 . LogInformation ( 1 , LITERAL ) ; VAR2 . LogInformation ( LITERAL , LITERAL ) ; VAR3 . LogInformation ( LITERAL , LITERAL ) ; VAR4 . LogInformation ( LITERAL , LITERAL ) ; VAR0 . LogInformation ( 1 , LITERAL ) ; VAR2 . LogInformation ( LITERAL , LITERAL ) ; VAR3 . LogInformation ( LITERAL , LITERAL ) ;
VAR0 . LogInformation ( LITERAL ) ; VAR1 . LogInformation ( LITERAL ) ; VAR2 . LogInformation ( LITERAL ) ; VAR3 . LogInformation ( LITERAL ) ; VAR0 . LogInformation ( LITERAL ) ; VAR1 . LogInformation ( LITERAL ) ; VAR2 . LogInformation ( LITERAL ) ; VAR3 . LogInformation ( LITERAL ) ;
VAR0 . CompileIncludes ( VAR1 , VAR2 , TrackResults ( VAR1 ) , VAR3 ) ; VAR1 . TransformExpressions ( new CollectionNavigationSubqueryInjector ( this ) . Visit ) ; var VAR4 = VAR5 . Create ( this ) ; VAR4 . Rewrite ( VAR1 , parentQueryModel : null ) ; VAR0 . CompileIncludes ( VAR1 , VAR2 , TrackResults ( VAR1 ) , VAR3 ) ;
Visit ( VAR0 . Test ) ; VAR1 . AppendLine ( ) ; VAR1 . Append ( LITERAL ) ; var VAR2 = VAR0 . IfTrue as ConstantExpression ;
VAR0 = null ; VAR1 = null ; ClearTables ( ) ; ClearProjection ( ) ; ClearOrderBy ( ) ; VAR2 . Add ( VAR3 ) ; VAR0 = VAR3 . Alias ;
var VAR0 = VAR1 . VAR2 . Create ( VAR1 . VAR3 . QueryCompilationContext ) ; VAR0 . SetProjectionExpression ( Expression . Constant ( 1 ) ) ; var VAR4 = VAR1 . VAR5 . Clone ( VAR1 . VAR3 . QueryCompilationContext . CreateUniqueTableAlias ( ) ) ; VAR0 . AddTable ( VAR4 ) ; VAR6 . Alias = VAR1 . VAR3 . QueryCompilationContext . CreateUniqueTableAlias ( ) ; var VAR7 = VAR0 . AddInnerJoin ( VAR6 ) ;
var VAR0 = CreateInternalPropertyBuilder ( VAR1 ) ; Assert . Equal ( ConfigurationSource . Explicit , VAR1 . GetValueGeneratedConfigurationSource ( ) ) ; Assert . True ( VAR0 . ValueGenerated ( ValueGenerated . OnAddOrUpdate , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR0 . ValueGenerated ( ValueGenerated . Never , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( ValueGenerated . OnAddOrUpdate , VAR1 . ValueGenerated ) ;
var VAR0 = ( IProperty ) VAR1 . FindProperty ( nameof ( BigMak . Id ) ) ; var VAR2 = ( IProperty ) VAR1 . FindProperty ( nameof ( BigMak . AlternateKey ) ) ; Assert . False ( VAR0 . RequiresValueGenerator ) ; Assert . Equal ( ValueGenerated . Never , VAR0 . ValueGenerated ) ; Assert . True ( VAR2 . RequiresValueGenerator ) ; Assert . Equal ( ValueGenerated . OnAdd , VAR2 . ValueGenerated ) ; Assert . Same ( VAR3 , VAR4 . GetKeys ( ) . SingleOrDefault ( ) ) ; Assert . Same ( VAR3 , VAR4 . FindPrimaryKey ( ) ) ;
AssertEqual ( VAR0 , VAR1 . GetProperties ( ) , new PropertyComparer ( compareAnnotations : false ) ) ; AssertEqual ( VAR2 , VAR1 . GetKeys ( ) ) ; AssertEqual ( VAR3 , VAR1 . GetIndexes ( ) ) ; AssertEqual ( VAR4 , VAR1 . GetForeignKeys ( ) ) ; AssertEqual ( VAR5 , VAR1 . GetReferencingForeignKeys ( ) ) ; VAR6 . HasBaseType ( null ) ; Assert . Null ( VAR1 . BaseType ) ; AssertEqual ( VAR0 , VAR1 . GetProperties ( ) , new PropertyComparer ( compareAnnotations : false ) ) ; AssertEqual ( VAR2 , VAR1 . GetKeys ( ) ) ; AssertEqual ( VAR3 , VAR1 . GetIndexes ( ) ) ; AssertEqual ( VAR4 , VAR1 . GetForeignKeys ( ) ) ; AssertEqual ( VAR5 , VAR1 . GetReferencingForeignKeys ( ) ) ; AssertEqual ( VAR0 , VAR7 . GetProperties ( ) , new PropertyComparer ( compareAnnotations : false ) ) ;
Assert . Null ( VAR0 . GetField ( ) ) ; Assert . Null ( VAR0 . FieldInfo ) ; Assert . Same ( VAR1 , VAR0 . MemberInfo ) ; VAR0 . SetField ( VAR2 , ConfigurationSource . Explicit ) ; Assert . Equal ( VAR2 , VAR0 . GetField ( ) ) ;
Assert . True ( VAR0 . FindIndex ( VAR1 . Properties ) . IsUnique ) ; VAR2 . HasBaseType < Order > ( ) ; Assert . True ( VAR3 . GetIndexes ( ) . Single ( ) . IsUnique ) ; Assert . True ( VAR0 . GetDeclaredForeignKeys ( ) . Single ( ) . IsUnique ) ;
Assert . Null ( VAR0 . GetFieldInfo ( ) ) ; Assert . Same ( VAR1 , VAR0 . MemberInfo ) ; VAR0 . SetField ( VAR2 , ConfigurationSource . Explicit ) ; Assert . Equal ( VAR2 , VAR0 . GetField ( ) ) ; var VAR3 = VAR0 . GetFieldInfo ( ) ;
Assert . Null ( VAR0 . GetFieldInfo ( ) ) ; Assert . Same ( VAR1 , VAR0 . MemberInfo ) ; VAR0 . SetField ( VAR2 , ConfigurationSource . Explicit ) ; Assert . Equal ( VAR2 , VAR0 . GetField ( ) ) ; var VAR3 = VAR0 . GetFieldInfo ( ) ; Assert . Equal ( VAR2 , VAR3 . Name ) ; Assert . Same ( VAR1 ?? ( MemberInfo ) VAR3 , VAR0 . MemberInfo ) ; VAR0 . SetField ( null , ConfigurationSource . Explicit ) ; Assert . Null ( VAR0 . GetField ( ) ) ; Assert . Null ( VAR0 . GetFieldInfo ( ) ) ;
var VAR0 = VAR1 . Relationship ( VAR2 , LITERAL , LITERAL , ConfigurationSource . Convention ) . HasPrincipalKey ( VAR2 . Metadata . FindPrimaryKey ( ) . Properties , ConfigurationSource . DataAnnotation ) . IsUnique ( true , ConfigurationSource . DataAnnotation ) ; Assert . Same ( VAR0 , new ForeignKeyPropertyDiscoveryConvention ( ) . Apply ( VAR0 ) ) ; var VAR3 = ( IForeignKey ) VAR0 . Metadata ; Assert . Same ( VAR3 , VAR1 . Metadata . GetForeignKeys ( ) . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Properties . Count ) ;
var VAR0 = new VAR1 { VAR2 = LITERAL } ; var VAR3 = new VAR4 { VAR2 = LITERAL } ; VAR5 . Entry ( VAR3 ) . State = VAR6 ; VAR3 . VAR7 = VAR0 . VAR2 ; VAR3 . VAR1 = VAR0 ; VAR0 . VAR8 . Add ( VAR3 ) ;
var VAR0 = new VAR1 { VAR2 = LITERAL } ; var VAR3 = new VAR4 { VAR2 = LITERAL } ; VAR5 . Entry ( VAR3 ) . State = VAR6 ; VAR3 . VAR7 = VAR0 . VAR2 ; VAR3 . VAR1 = VAR0 ;
var VAR0 = new VAR1 { VAR2 = LITERAL } ; var VAR3 = new VAR4 { VAR2 = LITERAL } ; VAR5 . Entry ( VAR3 ) . State = VAR6 ; VAR3 . VAR1 = VAR0 ; VAR0 . VAR4 = VAR3 ;
var VAR0 = new VAR1 { VAR2 = LITERAL } ; var VAR3 = new VAR4 { VAR2 = LITERAL } ; VAR5 . Entry ( VAR0 ) . State = VAR6 ; VAR3 . VAR7 = VAR0 . VAR2 ; VAR3 . VAR1 = VAR0 ;
var VAR0 = VAR1 . StartTrackingFromQuery ( VAR2 , new Category { VAR3 = LITERAL , VAR4 = LITERAL } , new ValueBuffer ( new object [  ] { LITERAL , LITERAL , LITERAL } ) ) ; Assert . True ( VAR1 . IsSingleQueryMode ( VAR2 ) ) ; VAR0 . SetEntityState ( EntityState . Added ) ; Assert . False ( VAR1 . IsSingleQueryMode ( VAR2 ) ) ;
VAR0 . Value . LogDebug ( ToolsCoreStrings . WritingMigration ( VAR1 ) ) ; Directory . CreateDirectory ( VAR2 ) ; File . WriteAllText ( VAR1 , VAR3 . MigrationCode , Encoding . UTF8 ) ; File . WriteAllText ( VAR4 , VAR3 . MetadataCode , Encoding . UTF8 ) ; VAR0 . Value . LogDebug ( ToolsCoreStrings . WritingSnapshot ( VAR5 ) ) ; Directory . CreateDirectory ( VAR6 ) ; File . WriteAllText ( VAR5 , VAR3 . SnapshotCode , Encoding . UTF8 ) ;
Check . NotEmpty ( VAR0 , nameof ( VAR0 ) ) ; VAR1 = VAR2 ; VAR3 = VAR4 ; VAR5 = VAR6 ; VAR7 = VAR8 ; VAR9 = VAR0 ; VAR10 = new LazyRef < ILogger > ( ( ) => VAR1 . CreateCommandsLogger ( ) ) ; var VAR11 = new StartupInvoker ( VAR10 , VAR6 , VAR8 , VAR0 ) ;
Assert . Equal ( LITERAL , VAR0 . VAR1 . Count ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 . First ( ) . VAR2 . Count ) ; Assert . Equal ( 1 , VAR0 . VAR3 . Count ) ; Assert . Equal ( 1 , VAR0 . VAR3 . First ( ) . VAR2 . Count ) ;
var VAR0 = GetDirectory ( VAR1 , VAR2 , VAR3 . MigrationSubNamespace ) ; var VAR4 = Path . Combine ( VAR0 , VAR3 . MigrationId + VAR3 . FileExtension ) ; var VAR5 = Path . Combine ( VAR0 , VAR3 . MigrationId + LITERAL + VAR3 . FileExtension ) ; var VAR6 = VAR3 . SnapshotName + VAR3 . FileExtension ; var VAR7 = GetDirectory ( VAR1 , VAR6 , VAR3 . SnapshotSubnamespace ) ;
Assert . Same ( VAR0 , VAR1 . FindContainingForeignKeys ( ) . Single ( ) ) ; Assert . Same ( VAR0 , VAR2 . RemoveForeignKey ( VAR0 . Properties , VAR0 . PrincipalKey , VAR0 . PrincipalEntityType ) ) ; Assert . Null ( VAR2 . RemoveForeignKey ( VAR0 . Properties , VAR0 . PrincipalKey , VAR0 . PrincipalEntityType ) ) ; Assert . Equal ( new [ ] { VAR3 } , VAR2 . GetForeignKeys ( ) . ToArray ( ) ) ; Assert . False ( VAR1 . IsForeignKey ( ) ) ; Assert . Empty ( VAR1 . FindContainingForeignKeys ( ) ) ;
Assert . NotNull ( VAR0 [ 0 ] = VAR1 . GetService < IInMemoryStore > ( ) ) ; Assert . NotNull ( VAR0 [ 1 ] = VAR1 . GetService < ILoggerFactory > ( ) ) ; Assert . NotNull ( VAR0 [ LITERAL ] = VAR1 . GetService < IMemoryCache > ( ) ) ; Assert . Same ( VAR2 , VAR1 . GetService < IDbContextOptions > ( ) ) ; Assert . NotNull ( VAR1 . GetService < ILogger < Random > > ( ) ) ; Assert . Same ( VAR0 [ 0 ] , VAR3 . GetService < IInMemoryStore > ( ) ) ;
Assert . Null ( VAR0 . VAR1 ) ; Assert . Null ( VAR0 . VAR2 ) ; VAR3 . VAR4 = LITERAL ; Assert . Null ( VAR0 . VAR1 ) ; Assert . Null ( VAR0 . VAR2 ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) ) ;
var VAR0 = VAR1 . AddEntityType ( typeof ( Abstract ) ) ; VAR0 . HasBaseType ( VAR2 ) ; var VAR3 = VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . Relational ( ) . DiscriminatorProperty = VAR3 ; VAR0 . Relational ( ) . DiscriminatorValue = 1 ;
Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . ColumnName ( LITERAL ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . ColumnType ( LITERAL ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . DefaultValue ( 0 ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . GeneratedValueSql ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnType ) ; Assert . Equal ( 0 , VAR0 . Metadata . Relational ( ) . DefaultValue ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . GeneratedValueSql ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . ColumnName ( LITERAL ) ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . ColumnType ( LITERAL ) ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . DefaultValue ( 1 ) ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . GeneratedValueSql ( LITERAL ) ) ;
var VAR0 = new DerivedCollectionOnBase { Name = LITERAL , NestedReference = VAR1 , NestedCollection = new List < NestedCollectionBase > { VAR2 } } ; var VAR3 = new DerivedCollectionOnBase { Name = LITERAL , NestedReference = VAR4 , NestedCollection = new List < NestedCollectionBase > { VAR5 } } ; var VAR6 = new DerivedCollectionOnBase { Name = LITERAL } ; var VAR7 = new DerivedCollectionOnBase { Name = LITERAL , NestedReference = VAR8 , NestedCollection = new List < NestedCollectionBase > { VAR9 , VAR10 } } ; var VAR11 = new DerivedCollectionOnBase { Name = LITERAL } ; var VAR12 = new DerivedCollectionOnBase { Name = LITERAL } ; var VAR13 = new DerivedCollectionOnBase { Name = LITERAL , NestedReference = VAR14 , NestedCollection = new List < NestedCollectionBase > { VAR15 , VAR16 } } ; var VAR17 = new DerivedCollectionOnBase { Name = LITERAL } ;
Assert . Null ( VAR0 . Sqlite ( ) . GeneratedValueSql ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . Sqlite ( ) . GeneratedValueSql ) ; VAR0 . Relational ( ) . GeneratedValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . GeneratedValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . GeneratedValueSql ) ; VAR0 . Sqlite ( ) . GeneratedValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . GeneratedValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . GeneratedValueSql ) ; VAR0 . Sqlite ( ) . GeneratedValueSql = null ; Assert . Equal ( LITERAL , VAR0 . Sqlite ( ) . GeneratedValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Sqlite ( ) . GeneratedValueSql ) ;
VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR1 ) ) ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR2 ) ) ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR3 ) ) ; var VAR4 = VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR5 ) ) ; VAR4 . SetEntityState ( EntityState . Added ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Empty ( VAR3 . VAR4 ) ; Assert . Same ( VAR3 , VAR1 . VAR5 ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , behavior : GraphBehavior . SingleObject ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , behavior : GraphBehavior . SingleObject ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR7 , behavior : GraphBehavior . SingleObject ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Empty ( VAR1 . VAR4 ) ; Assert . Same ( VAR1 , VAR2 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 , behavior : GraphBehavior . SingleObject ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , behavior : GraphBehavior . SingleObject ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL , VAR2 = VAR5 } ; VAR5 . VAR4 = new List < Product > ( ) ; VAR1 . Attach ( VAR7 , behavior : GraphBehavior . SingleObject ) ;
VAR0 . Attach ( VAR1 , behavior : GraphBehavior . SingleObject ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Empty ( VAR3 . VAR4 ) ; Assert . Same ( VAR5 , VAR1 . VAR6 ) ; Assert . Same ( VAR1 , VAR5 . VAR4 . Single ( ) ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR3 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; VAR0 . Attach ( VAR3 , behavior : GraphBehavior . SingleObject ) ;
Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . DefaultValue ( LITERAL ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . GeneratedValueSql ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnType ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . DefaultValue ) ;
Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . DefaultValue ( LITERAL ) ) ; Assert . True ( VAR0 . Relational ( ConfigurationSource . DataAnnotation ) . GeneratedValueSql ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnType ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . DefaultValue ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . GeneratedValueSql ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . ColumnName ( LITERAL ) ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . ColumnType ( LITERAL ) ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . DefaultValue ( 1 ) ) ; Assert . False ( VAR0 . Relational ( ConfigurationSource . Convention ) . GeneratedValueSql ( LITERAL ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnName ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . ColumnType ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Relational ( ) . DefaultValue ) ;
VAR0 = VAR1 ?? new Func < FakeDbCommand , int > ( VAR2 => - 1 ) ; VAR3 = VAR4 ?? new Func < FakeDbCommand , object > ( VAR2 => null ) ; VAR5 = VAR6 ?? new Func < FakeDbCommand , CommandBehavior , DbDataReader > ( ( VAR2 , VAR7 ) => new FakeDbDataReader ( ) ) ; VAR8 = VAR9 ?? new Func < FakeDbCommand , CancellationToken , Task < int > > ( ( VAR2 , VAR10 ) => Task . FromResult ( - 1 ) ) ; VAR11 = VAR12 ?? new Func < FakeDbCommand , CancellationToken , Task < object > > ( ( VAR2 , VAR10 ) => Task . FromResult < object > ( null ) ) ; VAR13 = VAR14 ?? new Func < FakeDbCommand , CommandBehavior , CancellationToken , Task < DbDataReader > > ( ( VAR2 , VAR10 , VAR7 ) => Task . FromResult < DbDataReader > ( new FakeDbDataReader ( ) ) ) ;
Assert . True ( SqlServerTableSelectionSetExtensions . Allows ( VAR0 , LITERAL , LITERAL ) ) ; Assert . True ( VAR1 . IsMatched ) ; Assert . True ( VAR2 . IsMatched ) ; Assert . False ( VAR3 . IsMatched ) ; Assert . False ( VAR4 . IsMatched ) ; Assert . True ( VAR5 . IsMatched ) ; Assert . True ( VAR6 . IsMatched ) ; Assert . False ( VAR7 . IsMatched ) ; Assert . False ( VAR8 . IsMatched ) ; Assert . False ( SqlServerTableSelectionSetExtensions . Allows ( VAR0 , LITERAL , LITERAL ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 , ValueSource . RelationshipSnapshot ) ) ; Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 , ValueSource . Original ) ) ; Assert . Equal ( LITERAL , VAR0 . GetCurrentValue ( VAR1 ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 , ValueSource . RelationshipSnapshot ) ) ; Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 , ValueSource . Original ) ) ;
Assert . Same ( VAR0 , VAR1 . GetValue ( VAR2 , ValueSource . RelationshipSnapshot ) ) ; Assert . Same ( VAR0 , VAR1 . GetCurrentValue ( VAR2 ) ) ; VAR3 . VAR4 = new CategoryWithChanging ( ) ; Assert . Same ( VAR0 , VAR1 . GetValue ( VAR2 , ValueSource . RelationshipSnapshot ) ) ;
Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 , ValueSource . RelationshipSnapshot ) ) ; Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 , ValueSource . Original ) ) ; Assert . Equal ( LITERAL , VAR0 . GetValue ( VAR1 ) ) ;
Assert . True ( ( ( IForeignKey ) VAR0 ) . IsRequired ) ; VAR1 . Entity < SelfRef > ( ) . HasOne ( VAR2 => VAR2 . SelfRef2 ) . WithOne ( VAR2 => VAR2 . SelfRef1 ) ; VAR0 = VAR3 . GetForeignKeys ( ) . Single ( ) ; Assert . Equal ( VAR4 . Properties , VAR0 . Properties ) ; Assert . Equal ( VAR4 . PrincipalKey , VAR0 . PrincipalKey ) ; Assert . Equal ( VAR5 . Name , VAR0 . PrincipalToDependent . Name ) ; Assert . Equal ( VAR6 . Name , VAR0 . DependentToPrincipal . Name ) ; Assert . True ( ( ( IForeignKey ) VAR0 ) . IsRequired ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . FindEntityType ( typeof ( Hob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; AssertEqual ( new [ ] { VAR0 . FindProperty ( LITERAL ) , VAR0 . FindProperty ( LITERAL ) } , VAR2 . Properties ) ; Assert . True ( VAR2 . IsRequired ) ; var VAR3 = ( IEntityType ) VAR1 . Model . FindEntityType ( typeof ( Nob ) ) ;
var VAR0 = new EntityType ( LITERAL , VAR1 ) ; var VAR2 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR3 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR4 = VAR0 . AddKey ( VAR2 ) ; VAR0 . AddForeignKey ( VAR2 , VAR5 , VAR6 ) ; VAR0 . AddForeignKey ( new [ ] { VAR3 , VAR2 } , VAR7 , VAR8 ) ; var VAR9 = new EntityType ( LITERAL , VAR1 ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . FindProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . FindPrimaryKey ( ) , - 1 ) ) ) ;
Assert . Equal ( new [ ] { VAR0 } , VAR1 . Annotations . ToArray ( ) ) ; Assert . Same ( VAR0 , VAR1 . RemoveAnnotation ( VAR0 . Name ) ) ; Assert . Empty ( VAR1 . Annotations ) ; Assert . Null ( VAR1 . RemoveAnnotation ( VAR0 . Name ) ) ; Assert . Null ( VAR1 [ LITERAL ] ) ; Assert . Null ( VAR1 . FindAnnotation ( LITERAL ) ) ;
var VAR0 = new Model ( ) ; var VAR1 = CreateModelBuilder ( VAR0 ) ; VAR1 . Entity < Customer > ( ) ; VAR1 . Entity < Order > ( ) ; VAR1 . Ignore < OrderDetails > ( ) ; VAR1 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( Order ) ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR4 = VAR2 . FindProperty ( nameof ( Order . CustomerId ) ) ; var VAR5 = VAR3 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR2 . GetKeys ( ) . Single ( ) ;
var VAR0 = new Model ( ) ; var VAR1 = CreateModelBuilder ( VAR0 ) ; VAR1 . Entity < Customer > ( ) ; VAR1 . Entity < Order > ( ) ; VAR1 . Ignore < OrderDetails > ( ) ; VAR1 . Ignore < CustomerDetails > ( ) ; var VAR2 = VAR0 . FindEntityType ( typeof ( Order ) ) ; var VAR3 = VAR0 . FindEntityType ( typeof ( Customer ) ) ; var VAR4 = VAR2 . FindProperty ( LITERAL ) ; var VAR5 = VAR3 . GetKeys ( ) . Single ( ) ; var VAR6 = VAR2 . GetKeys ( ) . Single ( ) ;
VAR0 . AddNavigation ( LITERAL , VAR1 , pointsToPrincipal : true ) ; var VAR2 = VAR3 . AddEntityType ( typeof ( SpecialOrder ) ) ; var VAR4 = VAR3 . AddEntityType ( typeof ( SpecialCustomer ) ) ; var VAR5 = VAR3 . AddEntityType ( typeof ( VerySpecialOrder ) ) ; var VAR6 = VAR5 . GetOrAddProperty ( Order . VAR7 ) ; var VAR8 = VAR4 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR9 = VAR4 . GetOrAddKey ( VAR8 ) ; var VAR10 = VAR5 . GetOrAddForeignKey ( VAR6 , VAR9 , VAR4 ) ; VAR5 . AddNavigation ( LITERAL , VAR10 , pointsToPrincipal : true ) ;
Assert . Same ( VAR0 . PrincipalToDependent , VAR0 . FindNavigationFrom ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . DependentToPrincipal , VAR0 . FindNavigationFrom ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . DependentToPrincipal , VAR0 . FindNavigationTo ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . PrincipalToDependent , VAR0 . FindNavigationTo ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . DeclaringEntityType , VAR0 . ResolveEntityTypeInHierarchy ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . PrincipalEntityType , VAR0 . ResolveEntityTypeInHierarchy ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . PrincipalEntityType , VAR0 . ResolveOtherEntityTypeInHierarchy ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . DeclaringEntityType , VAR0 . ResolveOtherEntityTypeInHierarchy ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . PrincipalToDependent , VAR0 . FindNavigationFromInHierarchy ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . DependentToPrincipal , VAR0 . FindNavigationFromInHierarchy ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . DependentToPrincipal , VAR0 . FindNavigationToInHierarchy ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . PrincipalToDependent , VAR0 . FindNavigationToInHierarchy ( VAR0 . DeclaringEntityType ) ) ;
Assert . Same ( VAR0 . PrincipalToDependent , VAR0 . FindNavigationFrom ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . DependentToPrincipal , VAR0 . FindNavigationFrom ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . DependentToPrincipal , VAR0 . FindNavigationTo ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . PrincipalToDependent , VAR0 . FindNavigationTo ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . DeclaringEntityType , VAR0 . ResolveEntityTypeInHierarchy ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . PrincipalEntityType , VAR0 . ResolveEntityTypeInHierarchy ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . PrincipalEntityType , VAR0 . ResolveOtherEntityTypeInHierarchy ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . DeclaringEntityType , VAR0 . ResolveOtherEntityTypeInHierarchy ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . PrincipalToDependent , VAR0 . FindNavigationFromInHierarchy ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . DependentToPrincipal , VAR0 . FindNavigationFromInHierarchy ( VAR0 . DeclaringEntityType ) ) ; Assert . Same ( VAR0 . DependentToPrincipal , VAR0 . FindNavigationToInHierarchy ( VAR0 . PrincipalEntityType ) ) ; Assert . Same ( VAR0 . PrincipalToDependent , VAR0 . FindNavigationToInHierarchy ( VAR0 . DeclaringEntityType ) ) ;
AssertEqual ( VAR0 , VAR1 . FindReferencingForeignKeys ( ) ) ; VAR2 . HasBaseType ( null ) ; Assert . Null ( VAR1 . BaseType ) ; AssertEqual ( VAR3 , VAR1 . GetProperties ( ) , new PropertyComparer ( compareAnnotations : false ) ) ; AssertEqual ( VAR4 , VAR1 . GetKeys ( ) ) ; AssertEqual ( VAR5 , VAR1 . GetIndexes ( ) ) ; AssertEqual ( VAR6 , VAR1 . GetForeignKeys ( ) ) ; AssertEqual ( VAR0 , VAR1 . FindReferencingForeignKeys ( ) ) ;
Assert . False ( ( ( IProperty ) VAR0 ) . StoreGeneratedAlways ) ; VAR0 . ValueGenerated = ValueGenerated . OnAddOrUpdate ; Assert . False ( ( ( IProperty ) VAR0 ) . StoreGeneratedAlways ) ; VAR0 . IsConcurrencyToken = true ; Assert . True ( ( ( IProperty ) VAR0 ) . StoreGeneratedAlways ) ; VAR0 . ValueGenerated = ValueGenerated . OnAdd ; Assert . False ( ( ( IProperty ) VAR0 ) . StoreGeneratedAlways ) ; VAR0 . ValueGenerated = ValueGenerated . OnAddOrUpdate ; Assert . True ( ( ( IProperty ) VAR0 ) . StoreGeneratedAlways ) ; VAR0 . StoreGeneratedAlways = false ; Assert . False ( ( ( IProperty ) VAR0 ) . StoreGeneratedAlways ) ;
Assert . Same ( VAR0 , VAR1 . GetPrimaryKey ( ) ) ; Assert . Same ( VAR0 , VAR1 . FindPrimaryKey ( ) ) ; Assert . Same ( VAR0 , VAR1 . GetKeys ( ) . Single ( ) ) ; var VAR2 = VAR1 . SetPrimaryKey ( VAR3 ) ; Assert . NotNull ( VAR2 ) ; Assert . Same ( VAR2 , VAR1 . GetPrimaryKey ( ) ) ; Assert . Same ( VAR2 , VAR1 . FindPrimaryKey ( ) ) ; Assert . Equal ( LITERAL , VAR1 . GetKeys ( ) . Count ( ) ) ; Assert . Same ( VAR0 , VAR1 . GetKey ( VAR0 . Properties ) ) ; Assert . Same ( VAR2 , VAR1 . GetKey ( VAR2 . Properties ) ) ;
Assert . Same ( VAR0 , VAR1 . GetPrimaryKey ( ) ) ; Assert . Same ( VAR0 , VAR1 . FindPrimaryKey ( ) ) ; Assert . Equal ( LITERAL , VAR1 . GetKeys ( ) . Count ( ) ) ; Assert . Same ( VAR2 , VAR1 . GetKey ( VAR2 . Properties ) ) ; Assert . Same ( VAR0 , VAR1 . GetKey ( VAR0 . Properties ) ) ;
Assert . Same ( VAR0 , VAR1 . GetForeignKey ( VAR2 ) ) ; Assert . Same ( VAR0 , VAR1 . FindForeignKey ( VAR2 ) ) ; Assert . Same ( VAR0 , VAR1 . GetOrAddForeignKey ( VAR2 , new Key ( new [ ] { VAR3 } ) , VAR1 ) ) ; Assert . Same ( VAR0 , VAR1 . GetForeignKeys ( ) . Single ( ) ) ; var VAR4 = VAR1 . AddForeignKey ( VAR5 , VAR6 , VAR7 ) ; Assert . Same ( VAR4 , VAR1 . GetForeignKey ( VAR5 ) ) ;
Assert . Equal ( 0 , VAR0 . GetProperty ( LITERAL ) . Index ) ; Assert . Equal ( 1 , VAR0 . GetProperty ( LITERAL ) . Index ) ; Assert . Equal ( LITERAL , VAR0 . GetProperty ( LITERAL ) . Index ) ; Assert . Equal ( 0 , VAR0 . GetProperty ( LITERAL ) . GetShadowIndex ( ) ) ; Assert . Equal ( 1 , VAR0 . GetProperty ( LITERAL ) . GetShadowIndex ( ) ) ; Assert . Equal ( - 1 , VAR0 . GetProperty ( LITERAL ) . GetShadowIndex ( ) ) ;
Assert . Same ( VAR0 . Metadata , VAR1 . Metadata . GetPrimaryKey ( ) ) ; Assert . Equal ( LITERAL , VAR2 . GetKeys ( ) . Count ( ) ) ; Assert . NotNull ( VAR1 . PrimaryKey ( new [ ] { Order . VAR3 , Order . VAR4 } , ConfigurationSource . Explicit ) ) ; Assert . Null ( VAR1 . PrimaryKey ( new [ ] { Order . VAR3 } , ConfigurationSource . DataAnnotation ) ) ; Assert . Same ( VAR0 . Metadata , VAR1 . Metadata . GetPrimaryKey ( ) ) ;
Assert . Same ( VAR0 , VAR1 . Metadata . GetProperty ( LITERAL ) ) ; Assert . Same ( VAR2 , VAR1 . Metadata . GetProperty ( LITERAL ) ) ; Assert . Same ( VAR3 , new KeyConvention ( ) . Apply ( VAR3 ) ) ; Assert . Same ( VAR0 , VAR1 . Metadata . GetProperty ( LITERAL ) ) ; Assert . Same ( VAR2 , VAR1 . Metadata . GetProperty ( LITERAL ) ) ;
Assert . Same ( VAR0 . GetEntityType ( typeof ( BookLabel ) ) , VAR0 . GetEntityType ( typeof ( SpecialBookLabel ) ) . BaseType ) ; Assert . Empty ( VAR0 . GetEntityType ( typeof ( SpecialBookLabel ) ) . GetDeclaredNavigations ( ) ) ; Assert . Contains ( LITERAL , VAR0 . GetEntityType ( typeof ( BookLabel ) ) . GetNavigations ( ) . Select ( VAR1 => VAR1 . Name ) ) ; Assert . Equal ( LITERAL , VAR0 . GetEntityType ( typeof ( BookLabel ) ) . FindNavigation ( LITERAL ) . ForeignKey . PrincipalToDependent . Name ) ; Assert . Contains ( LITERAL , VAR0 . GetEntityType ( typeof ( Book ) ) . GetNavigations ( ) . Select ( VAR1 => VAR1 . Name ) ) ; Assert . Null ( VAR0 . GetEntityType ( typeof ( Book ) ) . FindNavigation ( LITERAL ) . ForeignKey . PrincipalToDependent ) ; VAR2 . Entity < SpecialBookLabel > ( ) . HasBaseType ( null ) ; Assert . Null ( VAR0 . GetEntityType ( typeof ( SpecialBookLabel ) ) . GetNavigations ( ) . Single ( VAR3 => VAR3 . Name == LITERAL ) . FindInverse ( ) ) ; Assert . Contains ( LITERAL , VAR0 . GetEntityType ( typeof ( BookLabel ) ) . GetNavigations ( ) . Select ( VAR1 => VAR1 . Name ) ) ; Assert . Equal ( LITERAL , VAR0 . GetEntityType ( typeof ( BookLabel ) ) . FindNavigation ( LITERAL ) . ForeignKey . PrincipalToDependent . Name ) ; Assert . Contains ( LITERAL , VAR0 . GetEntityType ( typeof ( Book ) ) . GetNavigations ( ) . Select ( VAR1 => VAR1 . Name ) ) ; Assert . Null ( VAR0 . GetEntityType ( typeof ( Book ) ) . FindNavigation ( LITERAL ) . ForeignKey . PrincipalToDependent ) ;
Assert . Null ( VAR0 . GetEntityType ( typeof ( AuthorDetails ) ) . FindNavigation ( LITERAL ) . ForeignKey . PrincipalToDependent ) ; Assert . Equal ( LITERAL , VAR0 . GetEntityType ( typeof ( Post ) ) . FindNavigation ( LITERAL ) . ForeignKey . Properties . First ( ) . Name ) ; Assert . Null ( VAR0 . GetEntityType ( typeof ( Author ) ) . FindNavigation ( LITERAL ) . ForeignKey . PrincipalToDependent ) ; Assert . Equal ( LITERAL , VAR0 . GetEntityType ( typeof ( Author ) ) . FindNavigation ( LITERAL ) . ForeignKey . Properties . First ( ) . Name ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( Order ) ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Customer ) ) ; var VAR3 = VAR2 . GetKeys ( ) . Single ( ) ; var VAR4 = VAR0 . GetKeys ( ) . Single ( ) ; VAR5 . Entity < Order > ( ) . HasOne ( VAR6 => VAR6 . Customer ) . WithMany ( VAR6 => VAR6 . Orders ) ; var VAR7 = VAR0 . GetNavigations ( ) . Single ( ) . ForeignKey ; Assert . Equal ( nameof ( Order . CustomerId ) , VAR7 . Properties . Single ( ) . Name ) ; Assert . Same ( VAR7 , VAR2 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Empty ( VAR2 . GetForeignKeys ( ) ) ; Assert . Same ( VAR3 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR2 . GetPrimaryKey ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetPrimaryKey ( ) ) ;
Assert . Same ( VAR0 . GetProperty ( nameof ( Pickle . BurgerId ) ) , VAR1 . Properties . Single ( ) ) ; Assert . Equal ( nameof ( Pickle . BigMak ) , VAR1 . DependentToPrincipal . Name ) ; Assert . Null ( VAR1 . PrincipalToDependent ) ; Assert . NotSame ( VAR1 , VAR2 . GetNavigations ( ) . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR3 , VAR2 . GetPrimaryKey ( ) ) ; Assert . Same ( VAR4 , VAR0 . GetPrimaryKey ( ) ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( Pickle ) ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( BigMak ) ) ; var VAR3 = VAR0 . GetProperty ( LITERAL ) ; var VAR4 = VAR2 . GetProperty ( LITERAL ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( Tomato ) ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Whoopper ) ) ; var VAR3 = VAR0 . GetForeignKeys ( ) . SingleOrDefault ( ) ; var VAR4 = VAR2 . GetProperties ( ) . ToList ( ) ; var VAR5 = VAR0 . GetProperties ( ) . ToList ( ) ; var VAR6 = VAR2 . GetPrimaryKey ( ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . GetEntityType ( typeof ( Nob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . False ( VAR2 . IsRequired ) ; var VAR3 = VAR0 . GetProperty ( nameof ( Nob . HobId1 ) ) ; var VAR4 = VAR0 . GetProperty ( nameof ( Nob . HobId2 ) ) ;
var VAR0 = ( IEntityType ) VAR1 . Model . GetEntityType ( typeof ( Hob ) ) ; var VAR2 = VAR0 . GetForeignKeys ( ) . Single ( ) ; Assert . True ( VAR2 . IsRequired ) ; var VAR3 = VAR0 . GetProperty ( nameof ( Hob . NobId1 ) ) ; var VAR4 = VAR0 . GetProperty ( nameof ( Hob . NobId2 ) ) ;
var VAR0 = ( IEntityType ) VAR1 . GetEntityType ( typeof ( EntityWithoutId ) ) ; Assert . Null ( VAR0 . FindPrimaryKey ( ) ) ; VAR2 . Property < int > ( LITERAL ) ; Assert . NotNull ( VAR0 . GetPrimaryKey ( ) ) ; AssertEqual ( new [ ] { LITERAL } , VAR0 . GetPrimaryKey ( ) . Properties . Select ( VAR3 => VAR3 . Name ) ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( Pickle ) ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( BigMak ) ) ; var VAR3 = VAR2 . GetKeys ( ) . Single ( ) ; var VAR4 = VAR0 . GetKeys ( ) . Single ( ) ; var VAR5 = VAR0 . GetProperty ( LITERAL ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( BigMak ) ) . GetProperties ( ) . ToList ( ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Pickle ) ) . GetProperties ( ) . ToList ( ) ; VAR3 . Entity < BigMak > ( ) . HasKey ( VAR4 => VAR4 . AlternateKey ) ; var VAR5 = VAR6 . GetProperty ( LITERAL ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( Tomato ) ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Whoopper ) ) ; var VAR3 = VAR0 . GetProperty ( LITERAL ) ; var VAR4 = VAR0 . GetProperty ( LITERAL ) ; var VAR5 = VAR2 . GetPrimaryKey ( ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( Tomato ) ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Whoopper ) ) ; var VAR3 = VAR0 . GetProperty ( LITERAL ) ; var VAR4 = VAR0 . GetProperty ( LITERAL ) ; var VAR5 = VAR2 . GetProperty ( LITERAL ) ; var VAR6 = VAR2 . GetProperty ( LITERAL ) ; var VAR7 = VAR2 . GetPrimaryKey ( ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( Tomato ) ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( Whoopper ) ) ; var VAR3 = VAR0 . GetProperty ( nameof ( Tomato . BurgerId1 ) ) ; var VAR4 = VAR0 . GetProperty ( nameof ( Tomato . BurgerId2 ) ) ; var VAR5 = VAR2 . GetPrimaryKey ( ) ;
var VAR0 = VAR1 . GetEntityType ( LITERAL ) ; Assert . NotEmpty ( VAR0 . FindReferencingForeignKeys ( ) ) ; Assert . NotEmpty ( VAR0 . GetForeignKeys ( ) ) ; var VAR2 = VAR0 . GetForeignKey ( VAR0 . FindProperty ( LITERAL ) ) . PrincipalKey ;
var VAR0 = VAR1 . Model . GetEntityType ( typeof ( VAR2 ) ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DiscriminatorProperty . VAR3 ) ; Assert . Equal ( typeof ( string ) , VAR0 . Relational ( ) . DiscriminatorProperty . ClrType ) ; Assert . Equal ( 1 , VAR0 . Relational ( ) . DiscriminatorValue ) ; Assert . Equal ( LITERAL , VAR1 . Model . GetEntityType ( typeof ( SpecialCustomer ) ) . Relational ( ) . DiscriminatorValue ) ;
Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; var VAR1 = VAR2 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR1 . VAR3 . Item1 ) ; Assert . Same ( VAR0 . EntityType . GetProperty ( LITERAL ) , VAR1 . VAR3 . Item2 ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; var VAR1 = VAR2 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR1 . VAR3 . Item1 ) ; Assert . Same ( VAR0 . EntityType . GetProperty ( LITERAL ) , VAR1 . VAR3 . Item2 ) ;
Assert . Same ( VAR0 . EntityType . GetNavigation ( LITERAL ) , VAR1 . VAR2 . Item2 ) ; Assert . Equal ( VAR3 , VAR1 . VAR2 . Item3 ) ; Assert . Equal ( VAR4 , VAR1 . VAR2 . Item4 ) ; Assert . Same ( VAR0 , VAR1 . VAR5 . Item1 ) ; Assert . Same ( VAR0 . EntityType . GetProperty ( LITERAL ) , VAR1 . VAR5 . Item2 ) ;
Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; var VAR1 = VAR2 . GetRequiredService < TestRelationshipListener > ( ) ; Assert . Same ( VAR0 , VAR1 . VAR3 . Item1 ) ; Assert . Same ( VAR0 . EntityType . GetProperty ( LITERAL ) , VAR1 . VAR3 . Item2 ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleKeyValue < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , LITERAL ) ) ) ;
Assert . Same ( VAR0 . EntityType . GetNavigation ( LITERAL ) , VAR1 . VAR2 . Item2 ) ; Assert . Equal ( VAR3 , VAR1 . VAR2 . Item3 ) ; Assert . Equal ( VAR4 , VAR1 . VAR2 . Item4 ) ; Assert . Same ( VAR0 , VAR1 . VAR5 . Item1 ) ; Assert . Same ( VAR0 . EntityType . GetProperty ( LITERAL ) , VAR1 . VAR5 . Item2 ) ;
Assert . Same ( VAR0 . EntityType . GetNavigation ( LITERAL ) , VAR1 . VAR2 . Item2 ) ; Assert . Empty ( VAR1 . VAR2 . Item3 ) ; Assert . Equal ( new [ ] { VAR3 } , VAR1 . VAR2 . Item4 ) ; Assert . Same ( VAR3 , VAR1 . VAR4 . Item1 . Entity ) ; Assert . Same ( VAR1 . VAR4 . Item1 . EntityType . GetProperty ( LITERAL ) , VAR1 . VAR4 . Item2 ) ;
Assert . Same ( VAR0 . EntityType . GetNavigation ( LITERAL ) , VAR1 . VAR2 . Item2 ) ; Assert . Empty ( VAR1 . VAR2 . Item3 ) ; Assert . Equal ( new [ ] { VAR3 } , VAR1 . VAR2 . Item4 ) ; Assert . Same ( VAR3 , VAR1 . VAR4 . Item1 . Entity ) ; Assert . Same ( VAR1 . VAR4 . Item1 . EntityType . GetProperty ( LITERAL ) , VAR1 . VAR4 . Item2 ) ; Assert . Equal ( LITERAL , VAR1 . VAR4 . Item3 ) ; Assert . Null ( VAR1 . VAR4 . Item4 ) ; Assert . Same ( VAR3 , VAR1 . VAR5 . Item1 . Entity ) ; Assert . Same ( VAR1 . VAR5 . Item1 . EntityType . GetNavigation ( LITERAL ) , VAR1 . VAR5 . Item2 ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( SomeDependentEntity ) . FullName ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( SomeMoreDependentEntity ) . FullName ) ; var VAR3 = new [ ] { VAR0 . GetProperty ( LITERAL ) , VAR0 . GetProperty ( LITERAL ) } ; var VAR4 = TestHelpers . Instance . CreateContextServices ( VAR1 ) ; var VAR5 = CreateInternalEntry ( VAR4 , VAR0 , new SomeDependentEntity ( ) ) ; VAR5 [ VAR3 [ 0 ] ] = LITERAL ; VAR5 [ VAR3 [ 1 ] ] = LITERAL ; var VAR6 = ( CompositeKeyValue ) VAR5 . GetPrincipalKeyValue ( VAR2 . GetForeignKeys ( ) . Single ( ) ) ; Assert . Equal ( LITERAL , VAR6 . Value [ 0 ] ) ; Assert . Equal ( LITERAL , VAR6 . Value [ 1 ] ) ; Assert . Same ( VAR0 . GetPrimaryKey ( ) , VAR6 . Key ) ;
var VAR0 = VAR1 . ModelBuilder . Entity ( typeof ( EntityBase ) , ConfigurationSource . Convention ) ; VAR1 . HasBaseType ( VAR0 . Metadata , ConfigurationSource . Convention ) ; Assert . True ( new DiscriminatorConvention ( ) . Apply ( VAR1 , oldBaseType : null ) ) ; var VAR2 = VAR1 . Metadata . Relational ( ) . DiscriminatorProperty ;
Assert . Same ( VAR0 , VAR0 . HasBaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ) ; Assert . True ( new DiscriminatorConvention ( ) . Apply ( VAR0 , oldBaseType : null ) ) ; var VAR2 = VAR0 . ModelBuilder . Entity ( typeof ( DerivedEntity ) , ConfigurationSource . Explicit ) ; Assert . Same ( VAR2 , VAR2 . HasBaseType ( VAR0 . Metadata , ConfigurationSource . Convention ) ) ;
Assert . Empty ( VAR0 . Metadata . Navigations ) ; Assert . Empty ( VAR0 . Metadata . GetForeignKeys ( ) ) ; Assert . Empty ( VAR1 . Metadata . Navigations ) ; Assert . Empty ( VAR1 . Metadata . GetForeignKeys ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Metadata . Model . EntityTypes . Count ) ;
var VAR0 = VAR1 . Navigations . Single ( ) . ForeignKey ; Assert . Equal ( nameof ( Order . Customer ) , VAR0 . DependentToPrincipal . Name ) ; Assert . Equal ( nameof ( Customer . Orders ) , VAR0 . PrincipalToDependent . Name ) ; Assert . NotNull ( VAR1 . GetForeignKeys ( ) . Single ( VAR2 => VAR2 != VAR0 ) ) ; Assert . Same ( VAR0 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR0 , VAR3 . Navigations . Single ( ) . ForeignKey ) ;
Assert . Equal ( LITERAL , VAR0 . Navigations . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR1 . Properties . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { LITERAL , VAR2 . Properties . Single ( ) . Name , VAR5 . Properties . Single ( ) . Name } , VAR0 . Properties . Select ( VAR4 => VAR4 . Name ) ) ;
Assert . Equal ( LITERAL , VAR0 . Navigations . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name } , VAR1 . Properties . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { VAR2 . Properties . Single ( ) . Name , VAR5 . Properties . Single ( ) . Name } , VAR0 . Properties . Select ( VAR4 => VAR4 . Name ) ) ;
Assert . Equal ( LITERAL , VAR0 . Navigations . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR1 . Properties . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { LITERAL , VAR5 . Name , VAR6 . Properties . Single ( ) . Name } , VAR0 . Properties . Select ( VAR4 => VAR4 . Name ) ) ;
var VAR0 = VAR1 . Navigations . Single ( ) . ForeignKey ; var VAR2 = VAR1 . GetKeys ( ) . Single ( ) ; var VAR3 = VAR4 . GetKeys ( ) . Single ( ) ; VAR5 . Entity < Customer > ( ) . HasMany ( VAR6 => VAR6 . Orders ) . WithOne ( VAR6 => VAR6 . Customer ) ; var VAR7 = VAR1 . Navigations . Single ( ) . ForeignKey ; AssertEqual ( VAR0 . Properties , VAR7 . Properties ) ; Assert . Same ( VAR7 , VAR4 . Navigations . Single ( ) . ForeignKey ) ;
Assert . Equal ( LITERAL , VAR0 . Navigations . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name } , VAR1 . Properties . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { VAR2 . Properties . Single ( ) . Name , VAR5 . Properties . Single ( ) . Name } , VAR0 . Properties . Select ( VAR4 => VAR4 . Name ) ) ;
Assert . Equal ( LITERAL , VAR0 . Navigations . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR0 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , VAR3 . Properties . Single ( ) . Name } , VAR1 . Properties . Select ( VAR4 => VAR4 . Name ) ) ; AssertEqual ( new [ ] { VAR2 . Properties . Single ( ) . Name , LITERAL , VAR5 . Properties . Single ( ) . Name } , VAR0 . Properties . Select ( VAR4 => VAR4 . Name ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType . GetPrimaryKey ( ) , - 1 ) ) ) ;
Assert . False ( VAR0 . IsPropertyModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR2 ) ) ; VAR0 . MarkAsTemporary ( VAR1 ) ; Assert . True ( VAR0 . HasTemporaryValue ( VAR1 ) ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR2 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR2 ) ) ;
Assert . False ( VAR0 . IsPropertyModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR2 ) ) ; VAR0 [ VAR2 ] = LITERAL ; VAR0 . SetEntityState ( EntityState . Unchanged ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR1 ) ) ; Assert . False ( VAR0 . HasTemporaryValue ( VAR2 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR2 ) ) ;
Assert . True ( new SimpleEntityKey < int > ( VAR0 , LITERAL ) . Equals ( new SimpleEntityKey < int > ( VAR0 , LITERAL ) ) ) ; Assert . False ( new SimpleEntityKey < int > ( VAR0 , LITERAL ) . Equals ( null ) ) ; Assert . False ( new SimpleEntityKey < int > ( VAR0 , LITERAL ) . Equals ( new CompositeEntityKey ( VAR0 , new object [  ] { LITERAL } ) ) ) ; Assert . False ( new SimpleEntityKey < int > ( VAR0 , LITERAL ) . Equals ( new SimpleEntityKey < int > ( VAR0 , LITERAL ) ) ) ; Assert . False ( new SimpleEntityKey < int > ( VAR0 , LITERAL ) . Equals ( new SimpleEntityKey < long > ( VAR0 , LITERAL ) ) ) ; Assert . False ( new SimpleEntityKey < int > ( VAR0 , LITERAL ) . Equals ( new SimpleEntityKey < int > ( VAR1 , LITERAL ) ) ) ;
Assert . Equal ( LITERAL , VAR0 . Count ) ; Assert . Equal ( RelationalTelemetry . BeforeExecuteCommand , VAR0 [ 0 ] . Item1 ) ; Assert . Equal ( RelationalTelemetry . AfterExecuteCommand , VAR0 [ 1 ] . Item1 ) ; dynamic VAR1 = VAR0 [ 0 ] . Item2 ; dynamic VAR2 = VAR0 [ 1 ] . Item2 ; Assert . Equal ( VAR3 . DbConnections [ 0 ] . DbCommands [ 0 ] , VAR1 . Command ) ; Assert . Equal ( VAR3 . DbConnections [ 0 ] . DbCommands [ 0 ] , VAR2 . Command ) ; Assert . Equal ( VAR4 , VAR1 . ExecuteMethod ) ; Assert . Equal ( VAR4 , VAR2 . ExecuteMethod ) ;
VAR0 . Entity < Order > ( ) . HasOne ( VAR1 => VAR1 . Details ) . WithOne ( VAR1 => VAR1 . Order ) . ForeignKey < OrderDetails > ( VAR1 => VAR1 . OrderId ) ; var VAR2 = VAR3 . GetForeignKeys ( ) . Single ( ) ; Assert . Same ( VAR4 , VAR2 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR5 . Navigations . Single ( ) . Name ) ; Assert . Same ( VAR2 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR2 , VAR5 . Navigations . Single ( ) . ForeignKey ) ; AssertEqual ( new [ ] { LITERAL , LITERAL , VAR6 . Properties . Single ( ) . Name } , VAR5 . Properties . Select ( VAR7 => VAR7 . Name ) ) ; AssertEqual ( new [ ] { VAR8 . Properties . Single ( ) . Name , VAR4 . Name } , VAR3 . Properties . Select ( VAR7 => VAR7 . Name ) ) ; Assert . Empty ( VAR5 . GetForeignKeys ( ) ) ;
Assert . Null ( VAR0 . PrincipalToDependent ) ; Assert . Null ( VAR0 . DependentToPrincipal ) ; Assert . NotEqual ( VAR1 . Properties , VAR0 . DeclaringEntityType . Properties ) ; Assert . Same ( VAR1 . PrincipalKey , VAR0 . PrincipalKey ) ; Assert . True ( VAR0 . IsUnique ) ; Assert . True ( VAR0 . IsRequired ) ; Assert . Equal ( DeleteBehavior . Cascade , VAR0 . DeleteBehavior ) ; VAR2 = VAR3 . Relationship ( VAR0 , true , ConfigurationSource . Convention ) ; var VAR4 = VAR5 . Property ( LITERAL , typeof ( int ) , ConfigurationSource . Convention ) . Metadata ; Assert . Null ( VAR2 . HasPrincipalKey ( new [ ] { VAR4 . Name , VAR6 . VAR7 . Name } , ConfigurationSource . Convention ) ) ; Assert . Null ( VAR2 . IsUnique ( false , ConfigurationSource . Convention ) ) ; Assert . Null ( VAR2 . IsRequired ( false , ConfigurationSource . Convention ) ) ; Assert . Null ( VAR2 . Invert ( ConfigurationSource . Convention ) ) ;
VAR0 . Entity < Kiwi > ( ) . BaseType < Bird > ( ) ; VAR0 . Entity < Eagle > ( ) . BaseType < Bird > ( ) ; VAR0 . Entity < Bird > ( ) . BaseType < Animal > ( ) ; VAR0 . Entity < Animal > ( ) . HasKey ( VAR1 => VAR1 . Species ) ; VAR0 . Entity < Rose > ( ) . BaseType < Flower > ( ) ; VAR0 . Entity < Daisy > ( ) . BaseType < Flower > ( ) ; VAR0 . Entity < Flower > ( ) . BaseType < Plant > ( ) ;
VAR0 . BaseType ( VAR1 . Metadata , ConfigurationSource . Convention ) ; VAR0 . Property ( Order . VAR2 , ConfigurationSource . Convention ) ; VAR0 . Index ( new [ ] { Order . VAR2 . Name } , ConfigurationSource . DataAnnotation ) ; var VAR3 = VAR1 . Index ( new [ ] { Order . VAR2 . Name } , ConfigurationSource . Convention ) ;
Assert . Null ( VAR0 . VAR1 ( false , ConfigurationSource . Convention ) ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ; VAR0 = VAR0 . VAR1 ( true , ConfigurationSource . Convention ) ; Assert . NotNull ( VAR0 ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ; VAR0 = VAR0 . VAR1 ( false , ConfigurationSource . Explicit ) ;
Assert . Null ( VAR0 . VAR1 ( false , ConfigurationSource . Convention ) ) ; Assert . True ( VAR0 . Metadata . IsUnique . Value ) ; Assert . True ( ( ( IForeignKey ) VAR0 . Metadata ) . IsUnique ) ; Assert . NotNull ( VAR0 . Metadata . PrincipalToDependent ) ; VAR0 = VAR0 . VAR1 ( false , ConfigurationSource . DataAnnotation ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = VAR3 . CreateCommandsLogger ( ) ; VAR4 = VAR5 ; VAR6 = VAR0 ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedRelationalValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedRelationalValueBufferFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedRelationalValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedRelationalValueBufferFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedRelationalValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . TableName ) ; Assert . Null ( VAR0 . Schema ) ; Assert . Equal ( EntityState . Added , VAR0 . EntityState ) ; Assert . Equal ( LITERAL , VAR0 . ColumnModifications . Count ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ;
Assert . Null ( VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( VAR0 . RequiresValueGenerator ) ; Assert . False ( ( ( IProperty ) VAR0 ) . RequiresValueGenerator ) ; VAR0 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo , VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo , ( ( IProperty ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( VAR0 . RequiresValueGenerator ) ; VAR0 . SqlServer ( ) . IdentityStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; VAR6 = VAR7 ; VAR8 = VAR9 ; VAR10 = VAR11 ; VAR12 = VAR0 ;
Check . NotNull ( VAR0 , nameof ( VAR0 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ; VAR2 = VAR3 ; VAR4 = VAR5 ; VAR6 = VAR7 ; VAR8 = VAR0 ;
Assert . True ( VAR0 . MaxLength ( 1 , ConfigurationSource . DataAnnotation ) ) ; Assert . False ( VAR0 . MaxLength ( LITERAL , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( 1 , VAR1 . GetMaxLength ( ) . Value ) ; Assert . True ( VAR0 . MaxLength ( LITERAL , ConfigurationSource . Explicit ) ) ;
VAR0 . Property ( PrincipalEntityWithCompositeKey . VAR1 , ConfigurationSource . Explicit ) . Required ( true , ConfigurationSource . Explicit ) ; var VAR2 = VAR3 . Entity ( typeof ( DependentEntityWithCompositeKey ) , ConfigurationSource . Explicit ) ; VAR2 . VAR4 ( new [ ] { LITERAL , LITERAL } , ConfigurationSource . Explicit ) ; VAR2 . Property ( LITERAL , typeof ( string ) , ConfigurationSource . Explicit ) . Required ( true , ConfigurationSource . Explicit ) ;
VAR0 . Entity < CustomerDetails > ( ) . Reference ( VAR1 => VAR1 . Customer ) . InverseReference ( ) ; VAR0 . Ignore < Order > ( ) ; var VAR2 = VAR3 . GetEntityType ( typeof ( CustomerDetails ) ) ; var VAR4 = VAR3 . GetEntityType ( typeof ( Customer ) ) ; var VAR5 = VAR4 . Properties . ToList ( ) ; var VAR6 = VAR2 . Properties . ToList ( ) ; var VAR7 = VAR4 . GetKeys ( ) . Single ( ) ; var VAR8 = VAR2 . GetKeys ( ) . Single ( ) ; VAR0 . Entity < Customer > ( ) . Reference ( VAR9 => VAR9 . Details ) . InverseReference ( VAR9 => VAR9 . Customer ) ;
VAR0 . Entity < Customer > ( ) . Reference ( VAR1 => VAR1 . Details ) . InverseReference ( VAR1 => VAR1 . Customer ) ; Assert . Equal ( 1 , VAR2 . GetForeignKeys ( ) . Count ( ) ) ; Assert . Equal ( LITERAL , VAR2 . Navigations . Single ( ) . Name ) ; Assert . Same ( VAR3 . PrincipalKey , VAR4 . Navigations . Single ( ) . ForeignKey . PrincipalKey ) ; AssertEqual ( new [ ] { LITERAL , VAR5 . Properties . Single ( ) . Name , Customer . NameProperty . Name } , VAR4 . Properties . Select ( VAR6 => VAR6 . Name ) ) ; AssertEqual ( new [ ] { VAR7 . Properties . Single ( ) . Name } , VAR2 . Properties . Select ( VAR6 => VAR6 . Name ) ) ; Assert . Empty ( VAR4 . GetForeignKeys ( ) ) ; Assert . Same ( VAR5 , VAR4 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR7 , VAR2 . GetKeys ( ) . Single ( ) ) ; Assert . Same ( VAR5 , VAR4 . GetPrimaryKey ( ) ) ;
VAR0 . Entity < NullSemanticsEntity1 > ( ) . Property ( VAR1 => VAR1 . StringA ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity1 > ( ) . Property ( VAR1 => VAR1 . StringB ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity1 > ( ) . Property ( VAR1 => VAR1 . StringC ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity2 > ( ) . Property ( VAR1 => VAR1 . Id ) . ValueGeneratedNever ( ) ; VAR0 . Entity < NullSemanticsEntity2 > ( ) . Property ( VAR1 => VAR1 . StringA ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity2 > ( ) . Property ( VAR1 => VAR1 . StringB ) . Required ( ) ; VAR0 . Entity < NullSemanticsEntity2 > ( ) . Property ( VAR1 => VAR1 . StringC ) . Required ( ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } , includeDependents : false ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR5 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR7 . VAR8 ) ; Assert . Same ( VAR7 , VAR5 . VAR4 . Single ( ) ) ; Assert . Null ( VAR7 . VAR2 ) ; Assert . Empty ( VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR1 . Entry ( VAR5 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR1 . Entry ( VAR7 ) . State ) ; VAR1 . Attach ( VAR7 , includeDependents : false ) ;
VAR0 . Attach ( VAR1 , includeDependents : false ) ; Assert . Equal ( LITERAL , VAR2 . VAR3 ) ; Assert . Same ( VAR2 , VAR1 . VAR4 . Single ( ) ) ; Assert . Null ( VAR2 . VAR5 ) ; Assert . Empty ( VAR6 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . Entry ( VAR1 ) . State ) ; Assert . Equal ( EntityState . Detached , VAR0 . Entry ( VAR2 ) . State ) ; VAR0 . Attach ( VAR2 , includeDependents : false ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . TestProvider ( ) , new UntypedValueBufferFactoryFactory ( ) ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR5 ) ;
var VAR0 = VAR1 . Attach ( new VAR2 { VAR3 = LITERAL , VAR4 = new List < Product > ( ) } ) . Entity ; var VAR5 = new VAR2 { VAR3 = 1 , VAR6 = LITERAL } ; var VAR7 = new Product { VAR3 = 1 , VAR8 = LITERAL , VAR6 = LITERAL } ; VAR5 . VAR4 = new List < Product > { VAR7 } ; VAR1 . Attach ( VAR7 ) ;
Assert . Equal ( 1 , VAR0 . VAR1 ) ; Assert . Same ( VAR0 , VAR2 . VAR3 . Single ( ) ) ; Assert . Same ( VAR2 , VAR0 . VAR4 ) ; Assert . Equal ( EntityState . Unchanged , VAR5 . Entry ( VAR2 ) . State ) ; Assert . Equal ( EntityState . Modified , VAR5 . Entry ( VAR0 ) . State ) ;
Assert . Equal ( LITERAL , VAR0 . StartWith ) ; Assert . Equal ( 1 , VAR0 . IncrementBy ) ; Assert . Equal ( LITERAL , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . True ( VAR0 . Cycle ) ;
Assert . Equal ( LITERAL , VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . Table ) ; Assert . Equal ( LITERAL , VAR0 . Name ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . Columns ) ; Assert . Equal ( LITERAL , VAR0 . ReferencedSchema ) ; Assert . Equal ( LITERAL , VAR0 . ReferencedTable ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . ReferencedColumns ) ; Execute ( VAR1 => VAR1 . Entity ( LITERAL , VAR2 => { VAR2 . ToTable ( LITERAL , LITERAL ) ; VAR2 . Property < int > ( LITERAL ) ; VAR2 . Key ( LITERAL ) ; VAR2 . Property < int > ( LITERAL ) ; VAR2 . Reference ( LITERAL ) . InverseCollection ( ) . ForeignKey ( LITERAL ) ; } ) , VAR3 => VAR3 . Entity ( LITERAL , VAR2 => { VAR2 . ToTable ( LITERAL , LITERAL ) ; VAR2 . Property < int > ( LITERAL ) ; VAR2 . Key ( LITERAL ) ; VAR2 . Property < int > ( LITERAL ) ; VAR2 . Reference ( LITERAL ) . InverseCollection ( ) . ForeignKey ( LITERAL ) . ConstraintName ( LITERAL ) ; } ) , VAR4 => { Assert . Equal ( LITERAL , VAR4 . Count ) ; var VAR5 = Assert . IsType < DropForeignKeyOperation > ( VAR4 [ 0 ] ) ; Assert . Equal ( LITERAL , VAR5 . Schema ) ; Assert . Equal ( LITERAL , VAR5 . Table ) ; Assert . Equal ( LITERAL , VAR5 . Name ) ; var VAR0 = Assert . IsType < AddForeignKeyOperation > ( VAR4 [ 1 ] ) ; Assert . Equal ( LITERAL , VAR0 . Schema ) ; Assert . Equal ( LITERAL , VAR0 . Table ) ; Assert . Equal ( LITERAL , VAR0 . Name ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . Columns ) ; Assert . Equal ( LITERAL , VAR0 . ReferencedSchema ) ; Assert . Equal ( LITERAL , VAR0 . ReferencedTable ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . ReferencedColumns ) ; } ) ;
Assert . Equal ( LITERAL , VAR0 . StartWith ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; Assert . Equal ( 1 , VAR0 . MinValue ) ; Assert . Equal ( LITERAL , VAR0 . MaxValue ) ; Assert . True ( VAR0 . Cycle ) ;
var VAR0 = VAR1 . GetProperty ( LITERAL ) ; var VAR2 = VAR1 . GetProperty ( LITERAL ) ; var VAR3 = CreateKeyFactorySource ( ) ; Assert . NotSame ( VAR3 . GetKeyFactory ( new [ ] { VAR0 } ) , VAR3 . GetKeyFactory ( new [ ] { VAR2 } ) ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) , true ) ; var VAR2 = VAR1 . AddKey ( VAR0 ) ; var VAR3 = new EntityType ( LITERAL , VAR4 ) ; var VAR5 = VAR3 . AddProperty ( LITERAL , typeof ( int ) , true ) ; var VAR6 = VAR3 . AddKey ( VAR5 ) ; var VAR7 = VAR3 . AddForeignKey ( VAR5 , VAR2 , VAR1 ) ; var VAR8 = new EntityType ( LITERAL , VAR4 ) ; var VAR9 = VAR8 . AddProperty ( LITERAL , typeof ( int ) , true ) ; var VAR10 = VAR8 . AddForeignKey ( VAR9 , VAR6 , VAR3 ) ; VAR0 . RequiresValueGenerator = true ;
VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( string ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( Guid ? ) ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( Guid ) , shadowProperty : true ) ;
VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . AddProperty ( LITERAL , typeof ( string ) , true ) ; VAR3 . AddProperty ( LITERAL , typeof ( string ) , true ) ;
VAR0 . SetPrimaryKey ( VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ) ; VAR0 . AddKey ( VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ;
VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR1 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR2 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ;
VAR0 . GetOrSetPrimaryKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR1 = VAR2 . AddEntityType ( typeof ( B ) ) ; VAR1 . GetOrSetPrimaryKey ( VAR1 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; var VAR3 = VAR2 . AddEntityType ( typeof ( C ) ) ; VAR3 . GetOrSetPrimaryKey ( VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ) ; VAR3 . GetOrAddForeignKey ( VAR3 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR0 . GetPrimaryKey ( ) , VAR0 ) ; VAR0 . GetOrAddForeignKey ( VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) , VAR1 . GetPrimaryKey ( ) , VAR1 ) ;
var VAR0 = VAR1 . Entity < Plant > ( ) . Metadata ; var VAR2 = VAR0 . AddProperty ( LITERAL , typeof ( PlantGenus ) ) ; VAR2 . IsNullable = false ; VAR2 . IsReadOnlyAfterSave = true ; VAR2 . RequiresValueGenerator = true ; VAR0 . Relational ( ) . DiscriminatorProperty = VAR2 ; var VAR3 = VAR1 . Entity < Rose > ( ) . Metadata ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType , - 1 ) ) ) ; var VAR2 = VAR0 . EntityType . GetProperty ( LITERAL ) ; var VAR3 = VAR0 . AddSidecar ( VAR4 . Create ( VAR0 , VAR0 . EntityType . GetProperties ( ) ) ) ; VAR3 . TakeSnapshot ( ) ; VAR3 [ VAR2 ] = LITERAL ; VAR5 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR2 ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType , LITERAL ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; VAR4 . DetectChanges ( VAR0 ) ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType , - 1 ) ) ) ;
Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType , - 1 ) ) ) ; VAR2 . VAR3 = LITERAL ; Assert . Equal ( LITERAL , VAR0 . RelationshipsSnapshot [ VAR0 . EntityType . GetProperty ( LITERAL ) ] ) ; Assert . Same ( VAR0 , VAR1 . TryGetEntry ( new SimpleEntityKey < int > ( VAR0 . EntityType , LITERAL ) ) ) ;
Assert . Null ( VAR0 . Sqlite ( ) . TryGetSequence ( LITERAL ) ) ; Assert . Null ( ( ( IModel ) VAR0 ) . Sqlite ( ) . TryGetSequence ( LITERAL ) ) ; var VAR1 = VAR0 . Relational ( ) . GetOrAddSequence ( LITERAL ) ; Assert . Null ( VAR0 . Sqlite ( ) . TryGetSequence ( LITERAL ) ) ; Assert . Null ( ( ( IModel ) VAR0 ) . Sqlite ( ) . TryGetSequence ( LITERAL ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new UntypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new UntypedValueBufferFactoryFactory ( ) ) ; VAR6 . AddEntry ( VAR3 ) ; var VAR7 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . SetEntityState ( EntityState . Deleted ) ; var VAR8 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new UntypedValueBufferFactoryFactory ( ) ) ;
Assert . Equal ( LITERAL , VAR0 . Relational ( ) . Column ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . Column ) ; VAR0 . Relational ( ) . Column = LITERAL ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . VAR1 ) ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . Column ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . Column ) ; VAR0 . Relational ( ) . Column = null ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . Column ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . Column ) ;
Assert . Null ( ( ( IModel ) VAR0 ) . Relational ( ) . FindSequence ( LITERAL ) ) ; var VAR1 = VAR2 . GetOrAddSequence ( LITERAL ) ; Assert . Equal ( LITERAL , VAR2 . FindSequence ( LITERAL ) . VAR3 ) ; Assert . Equal ( LITERAL , ( ( IModel ) VAR0 ) . Relational ( ) . FindSequence ( LITERAL ) . VAR3 ) ;
Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Equal ( LITERAL , ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ; VAR0 . Relational ( ) . DefaultValueSql = null ; Assert . Null ( VAR0 . Relational ( ) . DefaultValueSql ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . Relational ( ) . DefaultValueSql ) ;
Assert . Equal ( SqlServerAnnotationNames . Prefix + RelationalAnnotationNames . Sequence + LITERAL + Sequence . DefaultName , VAR0 . ElementAt ( LITERAL ) . Name ) ; Assert . Equal ( new Sequence ( Sequence . DefaultName ) . Serialize ( ) , VAR0 . ElementAt ( LITERAL ) . Value ) ; Assert . Equal ( SqlServerAnnotationNames . Prefix + SqlServerAnnotationNames . ValueGenerationStrategy , VAR0 . ElementAt ( 1 ) . Name ) ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo . ToString ( ) , VAR0 . ElementAt ( 1 ) . Value ) ;
Assert . Null ( VAR0 . SqlServer ( ) . DefaultSequenceSchema ) ; Assert . Null ( ( ( IModel ) VAR0 ) . SqlServer ( ) . DefaultSequenceSchema ) ; VAR0 . SqlServer ( ) . DefaultSequenceSchema = LITERAL ; Assert . Equal ( LITERAL , VAR0 . SqlServer ( ) . DefaultSequenceSchema ) ; Assert . Equal ( LITERAL , ( ( IModel ) VAR0 ) . SqlServer ( ) . DefaultSequenceSchema ) ; VAR0 . SqlServer ( ) . DefaultSequenceSchema = null ; Assert . Null ( VAR0 . SqlServer ( ) . DefaultSequenceSchema ) ; Assert . Null ( ( ( IModel ) VAR0 ) . SqlServer ( ) . DefaultSequenceSchema ) ;
var VAR0 = VAR1 . EntityType . Model ; var VAR2 = VAR1 . PrincipalEntityType . FindPrimaryKey ( ) ; var VAR3 = VAR1 . PrincipalKey == VAR2 ? 1 : 0 ; var VAR4 = VAR2 != null && VAR0 . GetReferencingForeignKeys ( VAR2 ) . Count > VAR3 ; var VAR5 = VAR1 . EntityType . FindPrimaryKey ( ) ;
VAR0 . StoreGeneratedPattern ( StoreGeneratedPattern . None , ConfigurationSource . Explicit ) ; new DatabaseGeneratedAttributeConvention ( ) . Apply ( VAR0 ) ; Assert . Equal ( StoreGeneratedPattern . None , VAR0 . Metadata . StoreGeneratedPattern ) ;
VAR0 . StoreGeneratedPattern ( StoreGeneratedPattern . None , ConfigurationSource . Convention ) ; VAR0 . ConcurrencyToken ( false , ConfigurationSource . Convention ) ; new TimestampAttributeConvention ( ) . Apply ( VAR0 ) ; Assert . Equal ( StoreGeneratedPattern . Computed , VAR0 . Metadata . StoreGeneratedPattern ) ;
Assert . Equal ( false , VAR0 . GetProperty ( Customer . IdProperty . Name ) . IsValueGeneratedOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . IsValueGeneratedOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . IsValueGeneratedOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . IsValueGeneratedOnAdd ) ; Assert . Equal ( false , VAR0 . GetProperty ( LITERAL ) . IsValueGeneratedOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . IsValueGeneratedOnAdd ) ; Assert . Equal ( false , VAR0 . GetProperty ( LITERAL ) . IsValueGeneratedOnAdd ) ;
Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; Assert . False ( ( ( IProperty ) VAR0 ) . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . IdentityStrategy = SqlServerIdentityStrategy . SequenceHiLo ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo , VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Equal ( SqlServerIdentityStrategy . SequenceHiLo , ( ( IProperty ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ; VAR0 . SqlServer ( ) . IdentityStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . IdentityStrategy ) ; Assert . Null ( VAR0 . IsValueGeneratedOnAdd ) ;
VAR0 . Entity < Customer > ( ) . Table ( LITERAL ) ; VAR0 . Entity < Employee > ( ) . Table ( LITERAL ) ; VAR0 . Entity < Product > ( ) . Table ( LITERAL ) ; VAR0 . Entity < Product > ( ) . Ignore ( VAR1 => VAR1 . SupplierID ) ; VAR0 . Entity < Order > ( ) . Table ( LITERAL ) ; VAR0 . Entity < OrderDetail > ( ) . Table ( LITERAL ) ;
var VAR0 = VAR1 . TableName ; var VAR2 = VAR1 . SchemaName ; var VAR3 = VAR1 . ColumnModifications ; var VAR4 = VAR3 . Where ( VAR5 => VAR5 . IsWrite ) . ToArray ( ) ; var VAR6 = VAR3 . Where ( VAR5 => VAR5 . IsCondition ) . ToArray ( ) ; var VAR7 = VAR3 . Where ( VAR5 => VAR5 . IsRead ) . ToArray ( ) ; AppendUpdateCommand ( VAR8 , VAR0 , VAR2 , VAR4 , VAR6 ) ;
VerifySingleton < SqlServerMetadataExtensionProvider > ( ) ; VerifyScoped < ISqlServerSequenceValueGeneratorFactory > ( ) ; VerifyScoped < SqlServerModificationCommandBatchFactory > ( ) ; VerifyScoped < SqlServerValueGeneratorSelector > ( ) ; VerifyScoped < SqlServerDatabaseProviderServices > ( ) ; VerifyScoped < SqlServerDatabase > ( ) ; VerifyScoped < ISqlServerConnection > ( ) ; VerifyScoped < SqlServerModelDiffer > ( ) ; VerifyScoped < SqlServerMigrationSqlGenerator > ( ) ;
var VAR0 = VAR1 . TableName ; var VAR2 = VAR1 . SchemaName ; var VAR3 = VAR1 . ColumnModifications ; var VAR4 = VAR3 . Where ( VAR5 => VAR5 . IsWrite ) . ToArray ( ) ; var VAR6 = VAR3 . Where ( VAR5 => VAR5 . IsCondition ) . ToArray ( ) ; var VAR7 = VAR3 . Where ( VAR5 => VAR5 . IsRead ) . ToArray ( ) ; AppendUpdateCommandHeader ( VAR8 , VAR0 , VAR2 , VAR4 ) ;
VerifyScoped < IDataStoreServices > ( ) ; VerifyScoped < IDataStore > ( ) ; VerifyScoped < IQueryContextFactory > ( ) ; VerifyScoped < IDataStoreConnection > ( ) ; VerifyScoped < IValueGeneratorSelector > ( ) ; VerifyScoped < IDataStoreCreator > ( ) ;
var VAR0 = new InMemoryDataStoreCreator ( CreateStore ( VAR1 , VAR2 : true ) , VAR3 ) ; Assert . True ( VAR0 . EnsureCreated ( ) ) ; Assert . False ( VAR0 . EnsureCreated ( ) ) ; Assert . False ( VAR0 . EnsureCreated ( ) ) ; VAR0 = new InMemoryDataStoreCreator ( CreateStore ( VAR1 , VAR2 : true ) , VAR3 ) ;
var VAR0 = VAR1 . GetRequiredService < IInMemoryDataStore > ( ) ; await VAR0 . SaveChangesAsync ( new [ ] { VAR2 } ) ; Assert . Equal ( 1 , VAR0 . Database . SelectMany ( VAR3 => VAR3 ) . Count ( ) ) ; Assert . Equal ( new object [  ] { LITERAL , LITERAL } , VAR0 . Database . Single ( ) . Single ( ) ) ;
var VAR0 = VAR1 . GetRequiredService < IInMemoryDataStore > ( ) ; await VAR0 . SaveChangesAsync ( new [ ] { VAR2 } ) ; VAR2 . SetEntityState ( EntityState . Unchanged ) ; VAR3 . VAR4 = LITERAL ; VAR2 . SetEntityState ( EntityState . Deleted ) ; await VAR0 . SaveChangesAsync ( new [ ] { VAR2 } ) ; Assert . Equal ( 0 , VAR0 . Database . SelectMany ( VAR5 => VAR5 ) . Count ( ) ) ;
Assert . Equal ( ConnectionState . Closed , VAR0 . Database . GetRelationalConnection ( ) . DbConnection . State ) ; Assert . False ( VAR1 ? await VAR2 . ExistsAsync ( ) : VAR2 . Exists ( ) ) ; Assert . Equal ( ConnectionState . Closed , VAR0 . Database . GetRelationalConnection ( ) . DbConnection . State ) ;
Assert . Null ( VAR0 . Database . AsRelational ( ) . Connection . CommandTimeout ) ; VAR0 . Database . AsRelational ( ) . Connection . CommandTimeout = LITERAL ; Assert . Equal ( LITERAL , VAR0 . Database . AsRelational ( ) . Connection . CommandTimeout ) ; VAR0 . Database . AsRelational ( ) . Connection . CommandTimeout = null ; Assert . Null ( VAR0 . Database . AsRelational ( ) . Connection . CommandTimeout ) ;
VAR0 . Entity < VAR1 > ( ) . Property ( VAR2 => VAR2 . VAR3 ) . DefaultExpression ( LITERAL ) ; var VAR4 = VAR0 . Model . GetEntityType ( typeof ( VAR1 ) ) . GetProperty ( LITERAL ) ; Assert . Equal ( LITERAL , VAR4 . Relational ( ) . DefaultExpression ) ;
VAR0 . Table ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Reference ( LITERAL ) . InverseCollection ( ) . ForeignKey ( LITERAL ) . Name ( LITERAL ) ;
VAR0 . Table ( LITERAL , LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Key ( LITERAL ) ; VAR0 . Property < int > ( LITERAL ) ; VAR0 . Reference ( LITERAL ) . InverseCollection ( ) . ForeignKey ( LITERAL ) . Name ( LITERAL ) ;
Assert . Equal ( false , VAR0 . GetProperty ( VAR1 . VAR2 . VAR3 ) . GenerateValueOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( false , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( true , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ; Assert . Equal ( false , VAR0 . GetProperty ( LITERAL ) . GenerateValueOnAdd ) ;
Assert . Equal ( true , VAR0 . GenerateValueOnAdd ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = null ; Assert . Null ( VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Null ( VAR0 . GenerateValueOnAdd ) ;
VAR0 . GenerateValueOnAdd = true ; VAR1 . GetOrSetPrimaryKey ( VAR0 ) ; VAR1 . GetOrAddProperty ( LITERAL , typeof ( string ) ) . IsConcurrencyToken = true ; var VAR2 = VAR3 . AddEntityType ( typeof ( SomeDependentEntity ) ) ; var VAR4 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR5 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( string ) ) ; VAR2 . GetOrSetPrimaryKey ( new [ ] { VAR4 , VAR5 } ) ; var VAR6 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR2 . GetOrAddForeignKey ( new [ ] { VAR6 } , VAR1 . GetPrimaryKey ( ) ) ; var VAR7 = VAR2 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR7 . GenerateValueOnAdd = true ;
var VAR0 = VAR1 . Where ( VAR2 => VAR2 . Name == LITERAL ) . Single ( ) ; Assert . Equal ( LITERAL , VAR0 . OneToMany_Optional . Count ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; Assert . True ( VAR0 . OneToMany_Optional . Select ( VAR2 => VAR2 . Name ) . Contains ( LITERAL ) ) ; var VAR3 = VAR0 . OneToMany_Optional . Where ( VAR2 => VAR2 . Name == LITERAL ) . Single ( ) ;
var VAR0 = new InMemoryDataStoreCreator ( CreateStore ( VAR1 , VAR2 : false ) ) ; Assert . True ( VAR0 . EnsureCreated ( VAR3 ) ) ; Assert . False ( VAR0 . EnsureCreated ( VAR3 ) ) ; Assert . False ( VAR0 . EnsureCreated ( VAR3 ) ) ; VAR0 = new InMemoryDataStoreCreator ( CreateStore ( VAR1 , VAR2 : false ) ) ; Assert . True ( VAR0 . EnsureCreated ( VAR3 ) ) ; Assert . False ( VAR0 . EnsureCreated ( VAR3 ) ) ; Assert . False ( VAR0 . EnsureCreated ( VAR3 ) ) ;
var VAR0 = new InMemoryDataStoreCreator ( CreateStore ( VAR1 , VAR2 : false ) ) ; Assert . True ( await VAR0 . EnsureCreatedAsync ( VAR3 ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( VAR3 ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( VAR3 ) ) ; VAR0 = new InMemoryDataStoreCreator ( CreateStore ( VAR1 , VAR2 : false ) ) ; Assert . True ( await VAR0 . EnsureCreatedAsync ( VAR3 ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( VAR3 ) ) ; Assert . False ( await VAR0 . EnsureCreatedAsync ( VAR3 ) ) ;
var VAR0 = new DbContextOptionsBuilder ( ) ; Assert . Null ( VAR0 . Options . FindExtension < FakeDbContextOptionsExtension1 > ( ) ) ; Assert . Empty ( VAR0 . Options . Extensions ) ; var VAR1 = new FakeDbContextOptionsExtension1 ( ) ; var VAR2 = new FakeDbContextOptionsExtension2 ( ) ;
Assert . Same ( VAR0 , VAR1 . Keys . Single ( ) ) ; var VAR2 = VAR1 . SetPrimaryKey ( VAR3 ) ; Assert . NotNull ( VAR2 ) ; Assert . Same ( VAR2 , VAR1 . GetPrimaryKey ( ) ) ; Assert . Same ( VAR2 , VAR1 . FindPrimaryKey ( ) ) ; Assert . Equal ( LITERAL , VAR1 . Keys . Count ) ;
Assert . Same ( VAR0 , VAR1 . Metadata . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR0 . Properties . Count ) ; Assert . NotSame ( VAR2 , VAR0 . Properties [ 0 ] ) ; Assert . NotSame ( VAR3 , VAR0 . Properties [ 1 ] ) ; Assert . NotSame ( VAR2 , VAR0 . Properties [ 1 ] ) ; Assert . NotSame ( VAR3 , VAR0 . Properties [ 0 ] ) ; Assert . Same ( VAR4 [ 0 ] , VAR0 . PrincipalKey . Properties [ 0 ] ) ; Assert . Same ( VAR4 [ 1 ] , VAR0 . PrincipalKey . Properties [ 1 ] ) ; Assert . True ( VAR0 . IsUnique ) ;
var VAR0 = ( IForeignKey ) VAR1 . Metadata . ForeignKeys . Single ( ) ; Assert . Same ( VAR0 , VAR2 . Metadata ) ; Assert . Same ( VAR3 , VAR0 . PrincipalKey . Properties . Single ( ) ) ; Assert . True ( VAR0 . IsUnique ) ; Assert . True ( VAR0 . IsRequired ) ; Assert . Empty ( VAR4 . Metadata . ForeignKeys ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new NonTypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new NonTypedValueBufferFactoryFactory ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new NonTypedValueBufferFactoryFactory ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Deleted ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new NonTypedValueBufferFactoryFactory ( ) ) ;
VAR0 . Entity < Customer > ( ) . ForRelational ( ) . Table ( LITERAL ) ; VAR0 . Entity < Employee > ( ) . ForRelational ( ) . Table ( LITERAL ) ; VAR0 . Entity < Product > ( ) . ForRelational ( ) . Table ( LITERAL ) ; VAR0 . Entity < Product > ( ) . Ignore ( VAR1 => VAR1 . SupplierID ) ; VAR0 . Entity < Order > ( ) . ForRelational ( ) . Table ( LITERAL ) ; VAR0 . Entity < OrderDetail > ( ) . ForRelational ( ) . Table ( LITERAL ) ;
var VAR0 = new ObjectArrayValueReader ( new object [  ] { LITERAL , LITERAL , null } ) ; var VAR1 = VAR2 . StartTracking ( VAR3 , VAR4 , VAR0 ) ; Assert . Same ( VAR1 , VAR2 . StartTracking ( VAR3 , VAR4 , VAR0 ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) , new BoxedValueReaderSource ( ) ) ;
VAR0 = VAR1 ; Check . NotNull ( VAR2 , nameof ( VAR2 ) ) ; Check . NotNull ( VAR3 , nameof ( VAR3 ) ) ; Check . NotNull ( VAR4 , nameof ( VAR4 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; Check . NotNull ( VAR5 , nameof ( VAR5 ) ) ; Check . NotNull ( VAR1 , nameof ( VAR1 ) ) ;
Assert . True ( VAR0 . PointsToPrincipal ) ; Assert . False ( VAR0 . IsCollection ( ) ) ; Assert . Same ( VAR1 , VAR0 . GetTargetType ( ) ) ; Assert . Same ( VAR0 , VAR2 . GetOrAddNavigation ( LITERAL , VAR3 , pointsToPrincipal : false ) ) ; Assert . True ( VAR0 . PointsToPrincipal ) ;
var VAR0 = new Mock < Sidecar > ( ) ; VAR0 . Setup ( VAR1 => VAR1 . VAR2 ) . Returns ( LITERAL ) ; VAR0 . Setup ( VAR1 => VAR1 . VAR3 ) . Returns ( true ) ; var VAR4 = new Mock < Sidecar > ( ) ;
VerifySingleton < SqlServerSequenceValueGeneratorFactory > ( ) ; VerifySingleton < ISqlServerSqlGenerator > ( ) ; VerifySingleton < SqlStatementExecutor > ( ) ; VerifySingleton < SqlServerTypeMapper > ( ) ; VerifySingleton < SqlServerModificationCommandBatchFactory > ( ) ; VerifySingleton < SqlServerCommandBatchPreparer > ( ) ; VerifySingleton < ISqlServerModelSource > ( ) ; VerifyScoped < ISqlServerQueryContextFactory > ( ) ; VerifyScoped < ISqlServerValueGeneratorSelector > ( ) ; VerifyScoped < SqlServerBatchExecutor > ( ) ;
Assert . Same ( VAR0 , VAR1 . ReferencedProperties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR2 . Navigations . Single ( ) . VAR3 ) ; Assert . Equal ( LITERAL , VAR4 . Navigations . Single ( ) . VAR3 ) ; Assert . Same ( VAR1 , VAR2 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR1 , VAR4 . Navigations . Single ( ) . ForeignKey ) ;
Assert . Same ( VAR0 , VAR1 . ReferencedEntityType ) ; Assert . Same ( VAR2 , VAR1 . ReferencedProperties . Single ( ) ) ; Assert . Same ( VAR3 , VAR1 . Properties . Single ( ) ) ; Assert . True ( VAR1 . IsUnique . Value ) ; Assert . Same ( VAR0 . GetPrimaryKey ( ) , VAR1 . ReferencedKey ) ;
Assert . Same ( VAR0 , VAR1 . TryGetForeignKey ( VAR2 ) ) ; Assert . Same ( VAR0 , VAR1 . GetOrAddForeignKey ( VAR2 , new Key ( new [ ] { VAR3 } ) ) ) ; Assert . Same ( VAR0 , VAR1 . ForeignKeys . Single ( ) ) ; var VAR4 = VAR1 . AddForeignKey ( VAR5 , VAR6 ) ; Assert . Same ( VAR4 , VAR1 . GetForeignKey ( VAR5 ) ) ; Assert . Same ( VAR4 , VAR1 . TryGetForeignKey ( VAR5 ) ) ;
var VAR0 = new EntityType ( typeof ( VAR1 ) , new Model ( ) ) ; var VAR2 = VAR0 . GetOrAddProperty ( VAR1 . VAR3 ) ; Assert . Same ( VAR2 , VAR0 . TryGetProperty ( VAR1 . VAR3 ) ) ; Assert . Same ( VAR2 , VAR0 . TryGetProperty ( LITERAL ) ) ; Assert . Same ( VAR2 , VAR0 . GetProperty ( VAR1 . VAR3 ) ) ; Assert . Same ( VAR2 , VAR0 . GetProperty ( LITERAL ) ) ; Assert . Null ( VAR0 . TryGetProperty ( LITERAL ) ) ;
Assert . NotNull ( VAR0 . TryGetEntityType ( typeof ( Customer ) . FullName ) ) ; Assert . Same ( VAR0 , VAR1 . Model ) ; Assert . Same ( VAR1 , VAR0 . GetOrAddEntityType ( typeof ( Customer ) . FullName ) ) ; Assert . Equal ( new [ ] { VAR1 } , VAR0 . EntityTypes . ToArray ( ) ) ; Assert . Same ( VAR1 , VAR0 . RemoveEntityType ( VAR1 ) ) ; Assert . Null ( VAR0 . RemoveEntityType ( VAR1 ) ) ; Assert . Null ( VAR0 . TryGetEntityType ( typeof ( Customer ) . FullName ) ) ;
var VAR0 = VAR1 . GetOrAddProperty ( VAR1 . Type . GetProperty ( LITERAL + VAR2 ) ) ; VAR0 [ LITERAL + VAR2 + LITERAL ] = LITERAL + VAR2 + LITERAL ; VAR0 [ LITERAL + VAR2 + LITERAL ] = LITERAL + VAR2 + LITERAL ; var VAR3 = VAR1 . GetOrAddProperty ( VAR1 . Type . GetProperty ( LITERAL + VAR2 ) ) ;
var VAR0 = VAR1 . GetRequiredService < StateManager > ( ) ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < StateManager > ( ) ) ; Assert . Same ( VAR2 , VAR1 . GetRequiredService < IModelSource > ( ) ) ; VAR3 . Dispose ( ) ; VAR3 = new EarlyLearningCenter ( VAR4 ) ; VAR1 = ( ( IAccessor < IServiceProvider > ) VAR3 ) . Service ; Assert . NotSame ( VAR0 , VAR1 . GetRequiredService < StateManager > ( ) ) ;
var VAR0 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ; VAR0 . AddEntry ( VAR2 ) ; var VAR3 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR3 [ VAR5 ] = LITERAL ; VAR3 . SetEntityState ( EntityState . Modified ) ; var VAR6 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ; VAR6 . AddEntry ( VAR3 ) ; var VAR7 = VAR4 . GetOrCreateEntry ( new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . SetEntityState ( EntityState . Deleted ) ; var VAR8 = new ModificationCommand ( LITERAL , null , new ParameterNameGenerator ( ) , VAR1 => VAR1 . Relational ( ) ) ;
VerifyScoped < DataStoreSelector > ( ) ; VerifyScoped < DataStore > ( ) ; VerifyScoped < DataStoreConnection > ( ) ; VerifyScoped < Database > ( ) ; VerifyScoped < IValueGeneratorSelector > ( ) ; VerifyScoped < DataStoreCreator > ( ) ;
VerifySingleton < InMemoryModelBuilderFactory > ( ) ; VerifySingleton < InMemoryValueGeneratorCache > ( ) ; VerifySingleton < InMemoryIntegerValueGeneratorFactory > ( ) ; VerifySingleton < InMemoryDatabase > ( ) ; VerifySingleton < InMemoryModelSource > ( ) ; VerifyScoped < InMemoryQueryContextFactory > ( ) ; VerifyScoped < InMemoryValueGeneratorSelector > ( ) ; VerifyScoped < InMemoryDataStoreServices > ( ) ; VerifyScoped < InMemoryDatabaseFacade > ( ) ; VerifyScoped < InMemoryDataStore > ( ) ; VerifyScoped < InMemoryConnection > ( ) ; VerifyScoped < InMemoryDataStoreCreator > ( ) ;
var VAR0 = ( FakeSqlServerConnection ) VAR1 . GetRequiredService < SqlServerConnection > ( ) ; VAR0 . VAR2 = LITERAL ; VAR0 . VAR3 = LITERAL ; var VAR4 = VAR1 . GetRequiredService < SqlServerDataStoreCreator > ( ) ;
VerifySingleton < SqlServerModelSource > ( ) ; VerifyScoped < SqlServerQueryContextFactory > ( ) ; VerifyScoped < SqlServerValueGeneratorSelector > ( ) ; VerifyScoped < SqlServerBatchExecutor > ( ) ; VerifyScoped < SqlServerDataStoreServices > ( ) ; VerifyScoped < SqlServerDataStore > ( ) ; VerifyScoped < SqlServerConnection > ( ) ; VerifyScoped < SqlServerModelDiffer > ( ) ; VerifyScoped < SqlServerDatabase > ( ) ; VerifyScoped < SqlServerMigrationSqlGenerator > ( ) ; VerifyScoped < SqlServerDataStoreCreator > ( ) ; VerifyScoped < SqlServerHistoryRepository > ( ) ;
VerifyScoped < DbContextService < IHistoryRepository > > ( ) ; VerifyScoped < Migrator > ( ) ; VerifySingleton < MigrationIdGenerator > ( ) ; VerifyScoped < DbContextService < ModelDiffer > > ( ) ; VerifyScoped < DbContextService < MigrationSqlGenerator > > ( ) ;
var VAR0 = new Mock < ValueGeneratorCache > ( ) ; VAR0 . Setup ( VAR1 => VAR1 . GetGenerator ( It . IsAny < IProperty > ( ) ) ) . Returns ( Mock . Of < ValueGenerator > ( ) ) ; var VAR2 = new Mock < DataStoreServices > ( ) ; VAR2 . Setup ( VAR1 => VAR1 . Store ) . Returns ( VAR3 . Object ) ; VAR2 . Setup ( VAR1 => VAR1 . ValueGeneratorCache ) . Returns ( VAR0 . Object ) ;
HandleEntity ( VAR0 , VAR1 : false ) ; Assert . Equal ( EntityState . Added , VAR0 . State ) ; Assert . Equal ( VAR2 , VAR0 . Entity . VAR3 ) ; Assert . NotEqual ( Guid . NewGuid ( ) , Guid . Parse ( VAR0 . Entity . VAR4 ) ) ; VAR0 = VAR5 . Entry ( new CompositeStoat { VAR4 = LITERAL } ) ; HandleEntity ( VAR0 , VAR1 : false ) ;
Assert . Equal ( 1 , VAR0 . Properties . Count ) ; Assert . Equal ( 1 , VAR0 . Keys . Count ) ; Assert . Empty ( VAR0 . ForeignKeys ) ; Assert . Equal ( VAR1 . VAR2 . Name , VAR0 . Navigations . Single ( ) . Name ) ; Assert . Equal ( LITERAL , VAR3 . Properties . Count ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasMany ( typeof ( VAR8 ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR11 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ; Assert . Equal ( VAR2 , VAR3 . Properties . Count ) ;
var VAR0 = VAR1 . GetEntityType ( typeof ( Pickle ) ) ; var VAR2 = VAR1 . GetEntityType ( typeof ( VAR3 ) ) ; var VAR4 = VAR2 . Properties . Count ; var VAR5 = VAR0 . Properties . Count ; var VAR6 = VAR2 . Keys . Single ( ) ; var VAR7 = VAR0 . Keys . Single ( ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( VAR8 ) , LITERAL ) . WithMany ( LITERAL ) ; Assert . Same ( VAR9 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR11 , VAR1 . Navigations . Single ( ) ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR9 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ; Assert . Equal ( VAR2 , VAR3 . Properties . Count ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( VAR8 ) , LITERAL ) . WithMany ( null ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR11 ) ; Assert . Empty ( VAR1 . Navigations ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ; Assert . Equal ( VAR2 , VAR3 . Properties . Count ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( CustomerDetails ) , LITERAL ) . WithOne ( LITERAL ) ; var VAR8 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR9 , VAR8 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR10 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ; Assert . Equal ( VAR2 , VAR3 . Properties . Count ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( OrderDetails ) , LITERAL ) . WithOne ( LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR9 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR9 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ; Assert . Equal ( VAR2 , VAR3 . Properties . Count ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . HasOne ( typeof ( OrderDetails ) , LITERAL ) . WithOne ( LITERAL ) ; var VAR8 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR9 , VAR8 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR10 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR10 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ; Assert . Equal ( VAR2 , VAR3 . Properties . Count ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasMany ( typeof ( VAR8 ) . FullName , null ) . WithOne ( null ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Empty ( VAR3 . Navigations ) ; Assert . Empty ( VAR1 . Navigations ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ; Assert . Equal ( VAR2 , VAR3 . Properties . Count ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) . FullName ) . HasOne ( typeof ( VAR8 ) . FullName , LITERAL ) . WithMany ( null ) ; var VAR9 = VAR3 . ForeignKeys . Single ( ) ; Assert . Same ( VAR10 , VAR9 . Properties . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR11 ) ; Assert . Empty ( VAR1 . Navigations ) ; Assert . Same ( VAR9 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ; Assert . Equal ( VAR2 , VAR3 . Properties . Count ) ;
var VAR0 = new Model ( ) ; var VAR1 = new ModelBuilder ( VAR0 ) ; VAR1 . Entity < VAR2 > ( ) . Key ( VAR3 => VAR3 . VAR4 ) ; VAR1 . Entity < CustomerDetails > ( ) . Key ( VAR5 => VAR5 . VAR4 ) ; var VAR6 = VAR0 . GetEntityType ( typeof ( CustomerDetails ) . FullName ) ; var VAR7 = VAR0 . GetEntityType ( typeof ( VAR2 ) . FullName ) ; var VAR8 = VAR6 . GetProperty ( LITERAL ) ; var VAR9 = VAR7 . Properties . Count ; var VAR10 = VAR6 . Properties . Count ; var VAR11 = VAR7 . Keys . Single ( ) ; var VAR12 = VAR6 . Keys . Single ( ) ;
Check . NotNull ( VAR0 , LITERAL ) ; Check . NotNull ( VAR1 , LITERAL ) ; Check . NotNull ( VAR2 , LITERAL ) ; Check . NotNull ( VAR3 , LITERAL ) ; Check . NotNull ( VAR4 , LITERAL ) ;
Assert . Same ( VAR0 , VAR1 . StateEntry ) ; Assert . Equal ( LITERAL , VAR1 . Property . Name ) ; Assert . True ( VAR1 . IsCondition ) ; Assert . True ( VAR1 . IsKey ) ; Assert . False ( VAR1 . IsRead ) ; Assert . False ( VAR1 . IsWrite ) ; VAR1 = VAR2 . ColumnModifications [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . ColumnName ) ; Assert . Same ( VAR0 , VAR1 . StateEntry ) ;
var VAR0 = VAR1 . GetOrCreateEntry ( new FakeEntity { VAR2 = LITERAL , VAR3 = LITERAL } ) ; VAR0 . SetEntityState ( EntityState . Deleted ) ; var VAR4 = CreateCommandBatchPreparer ( ) . BatchCommands ( new [ ] { VAR0 } , new DbContextOptions ( ) ) . ToArray ( ) ; Assert . Equal ( 1 , VAR4 . Count ( ) ) ; Assert . Equal ( 1 , VAR4 . First ( ) . ModificationCommands . Count ( ) ) ; var VAR5 = VAR4 . First ( ) . ModificationCommands . Single ( ) ; Assert . Equal ( EntityState . Deleted , VAR5 . EntityState ) ; Assert . Equal ( 1 , VAR5 . ColumnModifications . Count ) ; var VAR6 = VAR5 . ColumnModifications [ 0 ] ; Assert . Equal ( LITERAL , VAR6 . ColumnName ) ; Assert . Same ( VAR0 , VAR6 . StateEntry ) ;
var VAR0 = VAR1 . GetOrCreateEntry ( VAR2 ) ; VAR0 . SetEntityState ( EntityState . Added ) ; var VAR3 = VAR1 . GetOrCreateEntry ( new RelatedFakeEntity { VAR4 = LITERAL } ) ; VAR3 . SetEntityState ( EntityState . Added ) ; var VAR5 = new Mock < ModificationCommandBatchFactory > ( ) ; var VAR6 = new Mock < IDbContextOptions > ( ) . Object ; var VAR7 = CreateCommandBatchPreparer ( VAR5 . Object ) . BatchCommands ( new [ ] { VAR3 , VAR0 } , VAR6 ) ;
Assert . Same ( VAR0 , VAR1 . StateEntry ) ; Assert . Equal ( LITERAL , VAR1 . Property . VAR2 ) ; Assert . False ( VAR1 . IsCondition ) ; Assert . True ( VAR1 . IsKey ) ; Assert . False ( VAR1 . IsRead ) ; Assert . True ( VAR1 . IsWrite ) ; VAR1 = VAR3 . ColumnModifications [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . ColumnName ) ; Assert . Same ( VAR0 , VAR1 . StateEntry ) ;
var VAR0 = VAR1 . StateEntries . Single ( ) ; Assert . IsAssignableFrom < Driver > ( VAR0 . Entity ) ; var VAR2 = VAR0 . GetDatabaseValues ( VAR3 ) ; Assert . Null ( VAR2 ) ; VAR0 . SetEntityState ( EntityState . Unknown ) ;
var VAR0 = CreateStateEntryMock ( VAR1 ) ; var VAR2 = new Mock < Sidecar > ( ) ; VAR0 . Setup ( VAR3 => VAR3 . OriginalValues ) . Returns ( VAR2 . Object ) ; new PropertyEntry ( VAR0 . Object , LITERAL ) . OriginalValue = null ;
var VAR0 = VAR1 . Build ( VAR2 ) ; Assert . Equal ( LITERAL , VAR0 . CommandTimeout ) ; VAR3 . Database . AsRelational ( ) . Connection . CommandTimeout = LITERAL ; VAR2 = ( RelationalConnection ) VAR3 . Database . Connection ; var VAR4 = VAR1 . Build ( VAR2 ) ;
VAR0 [ VAR1 ] = 0 ; VAR0 . SetEntityState ( EntityState . Added ) ; var VAR2 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) , VAR3 => VAR3 . Relational ( ) ) ; VAR2 . AddStateEntry ( VAR0 ) ; var VAR4 = VAR5 . GetOrCreateEntry ( new object ( ) ) ; VAR4 [ VAR1 ] = 1 ; VAR4 . SetEntityState ( EntityState . Modified ) ;
var VAR0 = VAR1 . GetOrCreateEntry ( new FakeEntity { VAR2 = LITERAL , VAR3 = LITERAL } ) ; await VAR0 . SetEntityStateAsync ( EntityState . Added ) ; var VAR4 = VAR1 . GetOrCreateEntry ( new RelatedFakeEntity { VAR2 = 1 } ) ; await VAR4 . SetEntityStateAsync ( EntityState . Added ) ;
VAR0 . StateChanged ( VAR1 , EntityState . Unknown ) ; Assert . Same ( VAR2 , VAR3 . VAR4 ) ; Assert . Null ( VAR3 . VAR5 ) ; Assert . Null ( VAR2 . VAR4 ) ; Assert . Same ( VAR3 , VAR2 . VAR5 ) ; Assert . Null ( VAR6 . VAR4 ) ; Assert . Null ( VAR6 . VAR5 ) ; VAR0 . StateChanged ( VAR7 , EntityState . Unknown ) ;
VAR0 . Entity ( typeof ( VAR1 ) ) . ManyToOne ( typeof ( VAR2 ) , LITERAL , LITERAL ) ; Assert . Same ( VAR3 , VAR4 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR4 . Navigations . Single ( ) . VAR5 ) ; Assert . Same ( VAR6 , VAR7 . Navigations . Single ( ) ) ; Assert . Same ( VAR3 , VAR4 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR7 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR8 , VAR7 . Properties . Count ) ;
var VAR0 = VAR1 . Properties . Count ; var VAR2 = VAR3 . Properties . Count ; var VAR4 = VAR1 . Keys . Single ( ) ; var VAR5 = VAR3 . Keys . Single ( ) ; VAR6 . Entity ( typeof ( VAR7 ) ) . OneToOne ( typeof ( CustomerDetails ) , LITERAL , LITERAL ) ; Assert . Same ( VAR8 , VAR3 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR3 . Navigations . Single ( ) . VAR9 ) ; Assert . Equal ( LITERAL , VAR1 . Navigations . Single ( ) . VAR9 ) ; Assert . Same ( VAR8 , VAR3 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR8 , VAR1 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR0 , VAR1 . Properties . Count ) ;
VAR0 . Entity ( typeof ( VAR1 ) . FullName ) . OneToMany ( typeof ( VAR2 ) . FullName , LITERAL , LITERAL ) ; Assert . Same ( VAR3 , VAR4 . ForeignKeys . Single ( ) ) ; Assert . Equal ( LITERAL , VAR4 . Navigations . Single ( ) . VAR5 ) ; Assert . Same ( VAR6 , VAR7 . Navigations . Single ( ) ) ; Assert . Same ( VAR3 , VAR4 . Navigations . Single ( ) . ForeignKey ) ; Assert . Same ( VAR3 , VAR7 . Navigations . Single ( ) . ForeignKey ) ; Assert . Equal ( VAR8 , VAR7 . Properties . Count ) ;
var VAR0 = new Model ( ) ; var VAR1 = new ModelBuilder ( VAR0 ) ; VAR1 . Entity < VAR2 > ( ) . Key ( VAR3 => VAR3 . VAR4 ) ; VAR1 . Entity < VAR5 > ( ) . Property ( VAR6 => VAR6 . VAR7 ) ; var VAR8 = VAR0 . GetEntityType ( typeof ( VAR5 ) . FullName ) ; var VAR9 = VAR0 . GetEntityType ( typeof ( VAR2 ) . FullName ) ; var VAR10 = VAR8 . GetProperty ( LITERAL ) ; var VAR11 = VAR9 . Properties . Count ; var VAR12 = VAR8 . Properties . Count ; var VAR13 = VAR9 . Keys . Single ( ) ; var VAR14 = VAR8 . Keys . Single ( ) ; VAR1 . Entity ( typeof ( VAR2 ) . FullName ) . OneToMany ( typeof ( VAR5 ) . FullName , LITERAL ) ;
VAR0 . ChangeTracker . Entry ( VAR1 ) . State = EntityState . Unknown ; var VAR2 = await CreateBlogDatabaseAsync < Blog > ( VAR0 ) ; var VAR3 = VAR2 [ 0 ] ; VAR3 . VAR4 = LITERAL ; VAR5 = VAR3 . VAR6 ; var VAR7 = VAR2 [ 1 ] ; VAR7 . VAR4 = LITERAL ; VAR8 = VAR7 . VAR6 ; VAR0 . Remove ( VAR7 ) ; VAR0 . ChangeTracker . Entry ( VAR1 ) . State = EntityState . Added ;
VAR0 . ChangeTracker . Entry ( VAR1 ) . State = EntityState . Added ; await VAR0 . SaveChangesAsync ( ) ; VAR2 = VAR1 . VAR3 ; Assert . NotEqual ( 0 , VAR2 ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . ChangeTracker . Entry ( VAR4 ) . State ) ; Assert . Equal ( EntityState . Unchanged , VAR0 . ChangeTracker . Entry ( VAR1 ) . State ) ;
var VAR0 = VAR1 . VAR2 . ToList ( ) ; Assert . Equal ( VAR0 . Count , VAR0 . Count ( VAR3 => VAR3 . VAR4 == LITERAL ) * LITERAL ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ 0 ] ) . VAR4 ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ 1 ] ) . VAR4 ) ; Assert . Equal ( LITERAL , VAR0 . Single ( VAR3 => VAR3 . VAR5 == VAR6 [ LITERAL ] ) . VAR4 ) ; VAR1 . VAR2 . RemoveRange ( VAR0 ) ;
var VAR0 = VAR1 . Add ( new KettleChips { VAR2 = LITERAL } ) ; VAR1 . SaveChanges ( ) ; Assert . Equal ( new DateTime ( LITERAL , LITERAL , LITERAL ) , VAR0 . VAR3 ) ; var VAR4 = VAR1 . Add ( new KettleChips { VAR2 = LITERAL , VAR3 = new DateTime ( LITERAL , 1 , LITERAL ) } ) ;
VAR0 = VAR1 . GetRequiredService < LazyRef < DataStore > > ( ) . Value ; VAR2 = VAR1 . GetRequiredService < LazyRef < DataStoreCreator > > ( ) . Value ; VAR3 = VAR1 . GetRequiredService < LazyRef < DataStoreConnection > > ( ) . Value ; Assert . Same ( VAR0 , VAR1 . GetRequiredService < LazyRef < DataStore > > ( ) . Value ) ; Assert . Same ( VAR2 , VAR1 . GetRequiredService < LazyRef < DataStoreCreator > > ( ) . Value ) ; Assert . Same ( VAR3 , VAR1 . GetRequiredService < LazyRef < DataStoreConnection > > ( ) . Value ) ;
var VAR0 = CreateContextConfiguration ( VAR1 ) . StateManager ; var VAR2 = new ProductDetail ( ) ; var VAR3 = new VAR4 { VAR5 = LITERAL , VAR6 = VAR2 } ; VAR0 . StartTracking ( VAR0 . GetOrCreateEntry ( VAR3 ) ) ; var VAR7 = VAR0 . GetOrCreateEntry ( VAR2 ) ; var VAR8 = VAR1 . GetEntityType ( typeof ( ProductDetail ) ) . GetProperty ( LITERAL ) ;
Assert . False ( VAR0 . GetProperty ( LITERAL ) . IsConcurrencyToken ) ; Assert . True ( VAR0 . GetProperty ( LITERAL ) . IsConcurrencyToken ) ; Assert . False ( VAR0 . GetProperty ( LITERAL ) . IsConcurrencyToken ) ; Assert . True ( VAR0 . GetProperty ( LITERAL ) . IsConcurrencyToken ) ; Assert . False ( VAR0 . GetProperty ( LITERAL ) . IsConcurrencyToken ) ; Assert . True ( VAR0 . GetProperty ( LITERAL ) . IsConcurrencyToken ) ; Assert . False ( VAR0 . GetProperty ( LITERAL ) . IsConcurrencyToken ) ; Assert . Equal ( - 1 , VAR0 . GetProperty ( LITERAL ) . OriginalValueIndex ) ;
var VAR0 = TestHelpers . CreateContextConfiguration ( VAR1 ) . ScopedServiceProvider . GetRequiredService < StateEntryFactory > ( ) ; var VAR2 = new Random ( ) ; var VAR3 = new Banana { VAR4 = LITERAL , VAR5 = VAR2 } ; var VAR6 = VAR0 . Create ( VAR7 , VAR3 ) ;
var VAR0 = VAR1 . ScopedServiceProvider . GetRequiredService < StateEntryFactory > ( ) ; var VAR2 = new RedHook ( ) ; var VAR3 = VAR0 . Create ( VAR4 , VAR2 ) ; Assert . IsType < MixedStateEntry > ( VAR3 ) ; Assert . Same ( VAR1 , VAR3 . Configuration ) ;
var VAR0 = VAR1 . ScopedServiceProvider . GetRequiredService < StateEntryFactory > ( ) ; var VAR2 = VAR0 . Create ( VAR3 , new ObjectArrayValueReader ( new object [  ] { LITERAL , LITERAL } ) ) ; Assert . IsType < ShadowStateEntry > ( VAR2 ) ; Assert . Same ( VAR1 , VAR2 . Configuration ) ;
var VAR0 = new Mock < ChangeDetector > ( ) ; new StateEntrySubscriber ( VAR0 . Object ) . SnapshotAndSubscribe ( VAR1 . Object ) ; VAR2 . VAR3 = LITERAL ; VAR0 . Verify ( VAR4 => VAR4 . VAR5 ( It . IsAny < StateEntry > ( ) , It . IsAny < IProperty > ( ) ) , Times . Never ) ; VAR0 . Verify ( VAR4 => VAR4 . VAR6 ( It . IsAny < StateEntry > ( ) , It . IsAny < IProperty > ( ) ) , Times . Never ) ;
Assert . Equal ( LITERAL , VAR0 . Table . Name ) ; Assert . Equal ( new [ ] { LITERAL , LITERAL } , VAR0 . Table . Columns . Select ( VAR1 => VAR1 . Name ) ) ; Assert . Equal ( new [ ] { typeof ( int ) , typeof ( int ) } , VAR0 . Table . Columns . Select ( VAR1 => VAR1 . ClrType ) ) ; Assert . Equal ( 1 , VAR0 . Table . ForeignKeys . Count ) ; Assert . Equal ( LITERAL , VAR0 . Table . ForeignKeys [ 0 ] . Name ) ; Assert . Equal ( LITERAL , VAR0 . Table . ForeignKeys [ 0 ] . ReferencedTable . Name ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . Table . ForeignKeys [ 0 ] . Columns . Select ( VAR1 => VAR1 . Name ) ) ; Assert . Equal ( new [ ] { LITERAL } , VAR0 . Table . ForeignKeys [ 0 ] . ReferencedColumns . Select ( VAR1 => VAR1 . Name ) ) ;
Assert . Equal ( LITERAL , VAR0 . DataType ) ; Assert . Equal ( 1 , VAR0 . StartWith ) ; Assert . Equal ( LITERAL , VAR0 . IncrementBy ) ; var VAR1 = VAR2 . Sequences [ 1 ] ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Equal ( LITERAL , VAR0 . DataType ) ;
var VAR0 = new ProductDetail { VAR1 = VAR2 } ; var VAR3 = CreateContextConfiguration ( VAR4 ) . StateManager . GetOrCreateEntry ( VAR0 ) ; var VAR5 = VAR4 . GetEntityType ( typeof ( ProductDetail ) ) . GetProperty ( LITERAL ) ; CreateValueGenerator ( ) . Next ( VAR3 , VAR5 ) ;
Assert . Same ( VAR0 , VAR1 . Select ( CreateProperty ( typeof ( long ) , ValueGeneration . OnAdd ) ) ) ; Assert . Same ( VAR0 , VAR1 . Select ( CreateProperty ( typeof ( int ) , ValueGeneration . OnAdd ) ) ) ; Assert . Same ( VAR0 , VAR1 . Select ( CreateProperty ( typeof ( short ) , ValueGeneration . OnAdd ) ) ) ; Assert . Same ( VAR0 , VAR1 . Select ( CreateProperty ( typeof ( byte ) , ValueGeneration . OnAdd ) ) ) ; Assert . Same ( VAR0 , VAR1 . Select ( CreateProperty ( typeof ( ulong ) , ValueGeneration . OnAdd ) ) ) ; Assert . Same ( VAR0 , VAR1 . Select ( CreateProperty ( typeof ( uint ) , ValueGeneration . OnAdd ) ) ) ; Assert . Same ( VAR0 , VAR1 . Select ( CreateProperty ( typeof ( ushort ) , ValueGeneration . OnAdd ) ) ) ; Assert . Same ( VAR0 , VAR1 . Select ( CreateProperty ( typeof ( sbyte ) , ValueGeneration . OnAdd ) ) ) ;
Assert . Null ( VAR0 . ValueGeneration ) ; Assert . Equal ( ValueGeneration . None , ( ( IProperty ) VAR0 ) . ValueGeneration ) ; VAR0 . SqlServer ( ) . ValueGenerationStrategy = SqlServerValueGenerationStrategy . Sequence ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , VAR0 . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( SqlServerValueGenerationStrategy . Sequence , ( ( IProperty ) VAR0 ) . SqlServer ( ) . ValueGenerationStrategy ) ; Assert . Equal ( ValueGeneration . OnAdd , VAR0 . ValueGeneration ) ;
VAR0 . ValueGeneration = ValueGeneration . OnAddAndUpdate ; Assert . False ( VAR1 . StoreComputed ( false , ConfigurationSource . DataAnnotation ) ) ; Assert . Equal ( ValueGeneration . OnAddAndUpdate , VAR0 . ValueGeneration . Value ) ; Assert . True ( VAR1 . StoreComputed ( false , ConfigurationSource . Explicit ) ) ; Assert . Equal ( ValueGeneration . None , VAR0 . ValueGeneration . Value ) ;
Assert . Equal ( ValueGeneration . None , VAR0 . GetProperty ( LITERAL ) . ValueGeneration ) ; Assert . Equal ( ValueGeneration . OnAdd , VAR0 . GetProperty ( LITERAL ) . ValueGeneration ) ; Assert . Equal ( ValueGeneration . OnAdd , VAR0 . GetProperty ( LITERAL ) . ValueGeneration ) ; Assert . Equal ( ValueGeneration . OnAdd , VAR0 . GetProperty ( LITERAL ) . ValueGeneration ) ; Assert . Equal ( ValueGeneration . None , VAR0 . GetProperty ( LITERAL ) . ValueGeneration ) ; Assert . Equal ( ValueGeneration . OnAdd , VAR0 . GetProperty ( LITERAL ) . ValueGeneration ) ; Assert . Equal ( ValueGeneration . None , VAR0 . GetProperty ( LITERAL ) . ValueGeneration ) ;
VAR0 . ValueGeneration = ValueGeneration . None ; new KeyConvention ( ) . Apply ( VAR1 ) ; Assert . Equal ( ValueGeneration . None , VAR0 . ValueGeneration ) ;
var VAR0 = CreateEntityType < EntityWithNoId > ( ) ; new KeyConvention ( ) . Apply ( VAR0 ) ; var VAR1 = VAR0 . TryGetPrimaryKey ( ) ;
var VAR0 = CreateEntityType < EntityWithIdAndTypeId > ( ) ; new KeyConvention ( ) . Apply ( VAR0 ) ; var VAR1 = VAR0 . TryGetPrimaryKey ( ) ;
VAR0 . Property < string > ( LITERAL ) . ColumnName ( LITERAL ) ; VAR0 . Key ( LITERAL ) . KeyName ( LITERAL ) ; VAR0 . ToTable ( LITERAL , LITERAL ) ; VAR0 . ForeignKey ( LITERAL , LITERAL ) . KeyName ( LITERAL ) . CascadeDelete ( true ) ; VAR0 . Index ( LITERAL ) . IsUnique ( ) . IndexName ( LITERAL ) . IsUnique ( ) ;
var VAR0 = VAR1 . Property < long > ( LITERAL ) . ColumnName ( LITERAL ) . Metadata ; var VAR2 = VAR1 . Property < string > ( LITERAL ) . Metadata ; VAR1 . Key ( LITERAL ) . KeyName ( LITERAL ) ; VAR1 . Metadata . AddKey ( new [ ] { VAR3 , VAR0 } ) . SetKeyName ( LITERAL ) ; VAR1 . Metadata . AddKey ( new [ ] { VAR2 } ) . SetKeyName ( LITERAL ) ;
var VAR0 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) ) ; VAR0 . AddStateEntry ( VAR1 ) ; var VAR2 = new MixedStateEntry ( VAR3 , VAR4 , new object ( ) ) ; VAR2 [ VAR5 ] = LITERAL ; VAR2 . EntityState = EntityState . Deleted ; var VAR6 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) ) ;
var VAR0 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) ) ; VAR0 . AddStateEntry ( VAR1 ) ; var VAR2 = new MixedStateEntry ( VAR3 , VAR4 , new object ( ) ) ; VAR2 [ VAR5 ] = 1 ; VAR2 . EntityState = EntityState . Modified ; var VAR6 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) ) ; VAR6 . AddStateEntry ( VAR2 ) ; var VAR7 = new MixedStateEntry ( VAR3 , VAR4 , new object ( ) ) ; VAR7 [ VAR5 ] = LITERAL ; VAR7 . EntityState = EntityState . Deleted ; var VAR8 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) ) ;
var VAR0 = new EntityType ( typeof ( Customer ) ) ; var VAR1 = VAR0 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = new ClrPropertyGetterSource ( ) ; var VAR3 = VAR2 . GetAccessor ( typeof ( Customer ) , LITERAL ) ; Assert . Same ( VAR3 , VAR2 . GetAccessor ( typeof ( Customer ) , LITERAL ) ) ; Assert . Same ( VAR3 , VAR2 . GetAccessor ( VAR1 ) ) ;
var VAR0 = new EntityType ( typeof ( VAR1 ) ) ; var VAR2 = VAR0 . GetOrAddProperty ( VAR1 . VAR3 ) ; var VAR4 = VAR0 . GetOrAddKey ( VAR2 ) ; var VAR5 = new EntityType ( typeof ( Order ) ) ; var VAR6 = VAR5 . GetOrAddProperty ( Order . VAR7 ) ;
var VAR0 = VAR1 . GetOrAddForeignKey ( VAR2 . GetPrimaryKey ( ) , VAR3 ) ; VAR0 . SetKeyName ( LITERAL ) ; VAR0 . Annotations . Add ( new Annotation ( LITERAL , LITERAL ) ) ; VAR4 . AddEntityType ( VAR1 ) ; var VAR5 = new EntityType ( typeof ( Order ) ) ; var VAR6 = VAR5 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; var VAR7 = VAR5 . GetOrAddProperty ( LITERAL , typeof ( int ) ) ; VAR5 . SetSchema ( LITERAL ) ; VAR5 . GetOrSetPrimaryKey ( VAR6 ) ; VAR5 . SetTableName ( LITERAL ) ; VAR5 . GetOrAddForeignKey ( VAR1 . GetPrimaryKey ( ) , VAR7 ) ;
VAR0 . GetOrSetPrimaryKey ( VAR1 , VAR2 ) ; VAR0 . GetPrimaryKey ( ) . SetKeyName ( LITERAL ) ; VAR3 . AddEntityType ( VAR0 ) ; var VAR4 = new EntityType ( LITERAL ) ; var VAR5 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; var VAR6 = VAR4 . GetOrAddProperty ( LITERAL , typeof ( int ) , shadowProperty : true ) ; VAR4 . GetOrSetPrimaryKey ( VAR5 , VAR6 ) ;
var VAR0 = new Banana { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = LITERAL } ; var VAR4 = CreateSidecar ( CreateStateEntry ( VAR0 ) ) ; Assert . Equal ( LITERAL , VAR4 [ VAR5 ] ) ; Assert . Equal ( LITERAL , VAR4 [ VAR6 ] ) ; VAR4 [ VAR5 ] = LITERAL ; VAR4 [ VAR6 ] = LITERAL ; Assert . Equal ( LITERAL , VAR4 [ VAR5 ] ) ; Assert . Equal ( LITERAL , VAR4 [ VAR6 ] ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ;
var VAR0 = new Banana { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = LITERAL } ; var VAR4 = CreateSidecar ( CreateStateEntry ( VAR0 ) ) ; VAR4 [ VAR5 ] = LITERAL ; VAR4 . Commit ( ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ;
var VAR0 = new Banana { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = LITERAL } ; var VAR4 = CreateSidecar ( CreateStateEntry ( VAR0 ) ) ; VAR4 . TakeSnapshot ( ) ; Assert . Equal ( LITERAL , VAR4 [ VAR5 ] ) ;
var VAR0 = new Banana { VAR1 = LITERAL , VAR2 = LITERAL , VAR3 = LITERAL } ; var VAR4 = CreateSidecar ( CreateStateEntry ( VAR0 ) ) ; VAR4 . TakeSnapshot ( ) ; Assert . Equal ( LITERAL , VAR4 [ VAR5 ] ) ; Assert . Equal ( LITERAL , VAR4 [ VAR6 ] ) ; VAR4 [ VAR5 ] = LITERAL ; VAR4 [ VAR6 ] = LITERAL ; Assert . Equal ( LITERAL , VAR4 [ VAR5 ] ) ; Assert . Equal ( LITERAL , VAR4 [ VAR6 ] ) ; Assert . Equal ( LITERAL , VAR0 . VAR1 ) ;
Assert . Equal ( ValueGenerationOnSave . WhenInserting , VAR0 . Columns [ 0 ] . ValueGenerationStrategy ) ; Assert . NotNull ( VAR0 . PrimaryKey . Name ) ; Assert . Equal ( LITERAL , VAR0 . PrimaryKey . Name ) ; Assert . Same ( VAR0 . Columns [ 0 ] , VAR0 . PrimaryKey . Columns [ 0 ] ) ; Assert . Equal ( 0 , VAR0 . ForeignKeys . Count ) ; var VAR1 = VAR2 . ForeignKeys [ 0 ] ; Assert . Equal ( LITERAL , VAR1 . Name ) ; Assert . Same ( VAR2 , VAR1 . Table ) ; Assert . Same ( VAR0 , VAR1 . ReferencedTable ) ; Assert . Same ( VAR2 . Columns [ 0 ] , VAR1 . Columns [ 0 ] ) ; Assert . Same ( VAR0 . Columns [ 0 ] , VAR1 . ReferencedColumns [ 0 ] ) ; Assert . True ( VAR1 . CascadeDelete ) ;
VAR0 . AddProperty ( LITERAL , typeof ( int ) , false , false ) ; VAR1 . Apply ( VAR0 ) ; var VAR2 = VAR0 . GetProperty ( LITERAL ) ; Assert . NotNull ( VAR2 ) ; Assert . False ( VAR2 . IsShadowProperty ) ; Assert . False ( VAR2 . IsConcurrencyToken ) ;
VAR0 . AddProperty ( VAR1 , typeof ( string ) ) ; VAR2 . Apply ( VAR0 ) ; Assert . Equal ( 1 , VAR0 . Properties . Count ) ; Assert . Null ( VAR0 . TryGetKey ( ) ) ;
var VAR0 = new EntityType ( LITERAL ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . SetTableName ( LITERAL ) ; VAR0 . SetSchema ( LITERAL ) ; VAR0 . SetKey ( VAR1 ) ; VAR0 . GetKey ( ) . SetKeyName ( LITERAL ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ; VAR1 . SetKey ( VAR0 ) ; var VAR2 = new MixedStateEntry ( VAR3 , VAR1 , new object ( ) ) ; VAR2 [ VAR0 ] = 0 ; VAR2 . EntityState = EntityState . Added ; var VAR4 = new ModificationCommand ( new SchemaQualifiedName ( LITERAL ) , new ParameterNameGenerator ( ) ) ; VAR4 . AddStateEntry ( VAR2 ) ; var VAR5 = new EntityType ( typeof ( object ) ) ; var VAR6 = VAR5 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ; VAR5 . SetKey ( VAR6 ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . ValueGenerationOnSave = VAR2 ; VAR0 . SetColumnName ( LITERAL ) ; VAR1 . SetKey ( VAR0 ) ; var VAR3 = VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ;
VAR0 . SetKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) , shadowProperty : false , concurrencyToken : true ) ; var VAR1 = new EntityType ( typeof ( ChangedOnlyEntity ) ) ; VAR2 . AddEntityType ( VAR1 ) ; VAR1 . SetKey ( VAR1 . AddProperty ( LITERAL , typeof ( int ) , shadowProperty : true , concurrencyToken : false ) ) ; VAR1 . AddProperty ( LITERAL , typeof ( string ) , shadowProperty : false , concurrencyToken : true ) ; var VAR3 = new EntityType ( typeof ( SomeMoreDependentEntity ) ) ; VAR2 . AddEntityType ( VAR3 ) ; var VAR4 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR3 . SetKey ( VAR4 ) ; var VAR5 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR6 = VAR3 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR3 . AddForeignKey ( VAR7 . GetKey ( ) , new [ ] { VAR5 , VAR6 } ) ;
var VAR0 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR1 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR1 . SetKey ( VAR0 ) ; var VAR3 = VAR1 . AddForeignKey ( VAR1 . GetKey ( ) , VAR2 ) ; VAR1 . AddProperty ( LITERAL , typeof ( string ) ) ;
VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( Guid ) ) ; var VAR1 = new EntityMaterializerSource ( new MemberMapper ( new FieldMatcher ( ) ) ) . GetMaterializer ( VAR0 ) ; var VAR2 = Guid . NewGuid ( ) ; var VAR3 = ( SomeEntity ) VAR1 ( new ObjectArrayValueReader ( new object [  ] { LITERAL , VAR2 , LITERAL } ) ) ;
VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( string ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( Guid ) ) ; var VAR1 = new EntityMaterializerSource ( new MemberMapper ( new FieldMatcher ( ) ) ) . GetMaterializer ( VAR0 ) ; var VAR2 = Guid . NewGuid ( ) ; var VAR3 = ( SomeEntityWithFields ) VAR1 ( new ObjectArrayValueReader ( new object [  ] { LITERAL , VAR2 , LITERAL } ) ) ;
VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR1 = VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ; var VAR2 = VAR3 . AddProperty ( LITERAL , typeof ( int ) ) ;
VAR0 . SetKey ( VAR0 . AddProperty ( LITERAL , typeof ( int ) ) ) ; VAR1 . AddEntityType ( VAR0 ) ; var VAR2 = new EntityType ( typeof ( DependentEntity ) ) ; VAR2 . SetKey ( VAR2 . AddProperty ( LITERAL , typeof ( int ) ) ) ;
var VAR0 = new Mock < StateManager > ( ) ; var VAR1 = new RedisQueryContext ( VAR2 , VAR3 , VAR0 . Object , VAR4 . Object ) ; var VAR5 = QueryTestType . EntityType ( ) ; var VAR6 = new RedisQuery ( VAR5 ) ; VAR1 . GetResultsFromRedis < QueryTestType > ( VAR5 ) ; VAR4 . Verify ( VAR7 => VAR7 . GetMaterializedResults < QueryTestType > ( VAR5 ) , Times . Once ) ;
var VAR0 = new Mock < StateManager > ( ) ; var VAR1 = new RedisQueryContext ( VAR2 , VAR3 , VAR0 . Object , VAR4 . Object ) ; var VAR5 = QueryTestType . EntityType ( ) ; var VAR6 = new RedisQuery ( VAR5 ) ; VAR1 . GetResultsFromRedis ( VAR6 ) ; VAR4 . Verify ( VAR7 => VAR7 . GetResults ( VAR6 ) , Times . Once ) ; VAR4 . Verify ( VAR7 => VAR7 . GetMaterializedResults < QueryTestType > ( VAR5 ) , Times . Never ) ;
Assert . Equal ( 1 , await VAR0 . NextAsync ( Mock . Of < DbContextConfiguration > ( ) , VAR1 . Object ) ) ; Assert . Equal ( LITERAL , await VAR0 . NextAsync ( Mock . Of < DbContextConfiguration > ( ) , VAR1 . Object ) ) ; Assert . Equal ( LITERAL , await VAR0 . NextAsync ( Mock . Of < DbContextConfiguration > ( ) , VAR1 . Object ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( Mock . Of < DbContextConfiguration > ( ) , VAR1 . Object ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( Mock . Of < DbContextConfiguration > ( ) , VAR1 . Object ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( Mock . Of < DbContextConfiguration > ( ) , VAR1 . Object ) ) ; VAR0 = new InMemoryValueGenerator ( ) ; Assert . Equal ( 1 , await VAR0 . NextAsync ( Mock . Of < DbContextConfiguration > ( ) , VAR1 . Object ) ) ; Assert . Equal ( LITERAL , VAR0 . Next ( Mock . Of < DbContextConfiguration > ( ) , VAR1 . Object ) ) ;
Assert . Equal ( VAR0 . ProductId , VAR1 . ProductId ) ; Assert . Equal ( VAR2 . PhotoId , VAR1 . PhotoId ) ; Assert . Null ( VAR1 . Photo ) ; AssertReviewsConsistent ( VAR3 ) ; AssertReviewsConsistent ( VAR4 ) ; AssertReviewsConsistent ( VAR5 , VAR6 ) ; Assert . Equal ( VAR0 . ProductId , VAR1 . ProductId ) ;
VAR0 . Setup ( VAR1 => VAR1 . EnsureDeletedAsync ( null , VAR2 : VAR2 ) ) . Returns ( Task . FromResult ( true ) ) ; var VAR3 = new Mock < DbContextConfiguration > ( ) ; VAR3 . Setup ( VAR1 => VAR1 . DataStoreCreator ) . Returns ( VAR0 . Object ) ; VAR3 . Setup ( VAR1 => VAR1 . Model ) . Returns ( VAR4 ) ; var VAR5 = new Database ( VAR3 . Object ) ; Assert . True ( await VAR5 . EnsureCreatedAsync ( VAR2 ) ) ; VAR0 . Verify ( VAR1 => VAR1 . EnsureCreatedAsync ( VAR4 , VAR2 ) , Times . Once ) ; Assert . True ( await VAR5 . EnsureDeletedAsync ( VAR2 ) ) ; VAR0 . Verify ( VAR1 => VAR1 . EnsureDeletedAsync ( null , VAR2 : VAR2 ) , Times . Once ) ;
VAR0 . Setup ( VAR1 => VAR1 . EnsureDeleted ( ) ) . Returns ( true ) ; var VAR2 = Mock . Of < DataStoreConnection > ( ) ; var VAR3 = new Mock < DbContextConfiguration > ( ) ; VAR3 . Setup ( VAR1 => VAR1 . DataStoreCreator ) . Returns ( VAR0 . Object ) ; VAR3 . Setup ( VAR1 => VAR1 . Model ) . Returns ( VAR4 ) ; VAR3 . Setup ( VAR1 => VAR1 . Connection ) . Returns ( VAR2 ) ; var VAR5 = new Database ( VAR3 . Object ) ; Assert . True ( VAR5 . EnsureCreated ( ) ) ; VAR0 . Verify ( VAR1 => VAR1 . EnsureCreated ( VAR4 ) , Times . Once ) ; Assert . True ( VAR5 . EnsureDeleted ( ) ) ; VAR0 . Verify ( VAR1 => VAR1 . EnsureDeleted ( ) , Times . Once ) ;
Assert . True ( VAR0 . IsPropertyModified ( VAR1 ) ) ; Assert . True ( VAR0 . IsPropertyModified ( VAR2 ) ) ; VAR0 . EntityState = EntityState . Unchanged ; Assert . False ( VAR0 . IsPropertyModified ( VAR1 ) ) ; Assert . False ( VAR0 . IsPropertyModified ( VAR2 ) ) ;
await VAR0 . SetEntityStateAsync ( EntityState . Added , CancellationToken . None ) ; var VAR1 = new InMemoryDataStore ( VAR2 , new InMemoryDatabase ( new NullLoggerFactory ( ) ) ) ; await VAR1 . SaveChangesAsync ( new [ ] { VAR0 } ) ; VAR3 . VAR4 = LITERAL ; await VAR0 . SetEntityStateAsync ( EntityState . Deleted , CancellationToken . None ) ;
await VAR0 . SaveChangesAsync ( new [ ] { VAR1 } , VAR2 ) ; VAR3 . VAR4 = LITERAL ; await VAR1 . SetEntityStateAsync ( EntityState . Deleted , CancellationToken . None ) ; await VAR0 . SaveChangesAsync ( new [ ] { VAR1 } , VAR2 ) ;
Assert . NotSame ( VAR0 , VAR1 . Services . ContextEntitySets ) ; Assert . NotSame ( VAR2 , VAR1 . Services . StateManager ) ; Assert . NotSame ( VAR3 , VAR1 . Services . EntityStateListeners . OfType < FakeNavigationFixer > ( ) . Single ( ) ) ; Assert . Same ( VAR4 , VAR1 . Services . ActiveIdentityGenerators ) ; Assert . Same ( VAR5 , VAR1 . Services . ServiceProvider . GetService < ClrCollectionAccessorSource > ( ) ) ; Assert . Same ( VAR6 , VAR1 . Services . ClrPropertyGetterSource ) ; Assert . Same ( VAR7 , VAR1 . Services . ClrPropertySetterSource ) ; Assert . Same ( VAR8 , VAR1 . Services . EntityKeyFactorySource ) ; Assert . Same ( VAR9 , VAR1 . Services . ServiceProvider . GetService < EntityMaterializerSource > ( ) ) ; Assert . Same ( VAR10 , VAR1 . Services . ServiceProvider . GetService < EntitySetFinder > ( ) ) ; Assert . Same ( VAR11 , VAR1 . Services . ServiceProvider . GetService < EntitySetInitializer > ( ) ) ;
var VAR0 = CreateConfiguration ( VAR1 ) ; var VAR2 = CreateStateEntry ( VAR0 , VAR3 , new SomeEntity ( ) ) ; VAR2 [ VAR4 ] = 1 ; VAR2 . EntityState = EntityState . Added ; VAR2 . EntityState = EntityState . Unknown ; Assert . Equal ( EntityState . Unknown , VAR2 . EntityState ) ; Assert . DoesNotContain ( VAR2 , VAR0 . StateManager . StateEntries ) ;
VAR0 . AddAnnotation ( VAR1 ) ; Assert . Equal ( LITERAL , VAR0 [ LITERAL ] ) ; VAR0 . RemoveAnnotation ( VAR1 ) ; Assert . Null ( VAR0 [ LITERAL ] ) ; VAR0 . RemoveAnnotation ( VAR1 ) ;
VAR0 . Setup ( VAR1 => VAR1 . PrincipalType ) . Returns ( VAR2 . Object ) ; VAR0 . Setup ( VAR1 => VAR1 . DependentType ) . Returns ( VAR3 . Object ) ; VAR0 . Setup ( VAR1 => VAR1 . PrincipalProperties ) . Returns ( VAR4 ) ; VAR0 . Setup ( VAR1 => VAR1 . DependentProperties ) . Returns ( VAR5 ) ; var VAR6 = CreateStateEntry ( VAR7 . Object , VAR3 . Object , new Random ( ) ) ; VAR6 . SetPropertyValue ( VAR8 . Object , LITERAL ) ; var VAR9 = VAR6 . GetDependentKeyValue ( VAR0 . Object ) ; Assert . IsType < SimpleEntityKey < string > > ( VAR9 ) ; Assert . Equal ( LITERAL , VAR9 . Value ) ; VAR7 . Verify ( VAR1 => VAR1 . CreateKey ( VAR2 . Object , VAR0 . Object . DependentProperties , VAR6 ) ) ;
VAR0 . Setup ( VAR1 => VAR1 . HasClrProperty ) . Returns ( true ) ; var VAR2 = new [ ] { VAR0 . Object } ; VAR3 = VAR3 ?? new Mock < IProperty > ( ) ; VAR3 . Setup ( VAR1 => VAR1 . Index ) . Returns ( 1 ) ; VAR3 . Setup ( VAR1 => VAR1 . HasClrProperty ) . Returns ( true ) ;
var VAR0 = new EntityType ( typeof ( Customer ) ) ; VAR1 . AddEntity ( VAR0 ) ; Assert . NotNull ( VAR1 . Entity ( new Customer ( ) ) ) ; VAR1 . RemoveEntity ( VAR0 ) ; Assert . Null ( VAR1 . Entity ( new Customer ( ) ) ) ;
VAR0 . AddEntity ( new EntityType ( typeof ( Customer ) ) ) ; var VAR1 = VAR0 . Entity ( typeof ( Customer ) ) ; Assert . NotNull ( VAR1 ) ; Assert . Equal ( LITERAL , VAR1 . VAR2 ) ; Assert . Same ( VAR1 , VAR0 . Entity ( typeof ( Customer ) ) ) ;
