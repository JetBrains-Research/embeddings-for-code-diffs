/home/mikhail/anaconda3/envs/embeddings-for-code-diffs/bin/python /home/mikhail/Documents/Development/embeddings-for-code-diffs/neural_editor/seq2seq/analyze.py /home/mikhail/Documents/Development/embeddings-for-code-diffs-data/experiment_2_basic_seq2seq
{'ADDITION_TOKEN': 'добавление',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 3,
 'DATASET_ROOT': '/home/mikhail/Documents/Development/embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '/home/mikhail/Documents/Development/embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': 'удаление',
 'DEVICE': device(type='cpu'),
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 10,
 'EDIT_REPRESENTATION_SIZE': 512,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '/home/mikhail/Documents/Development/embeddings-for-code-diffs-data/last_execution',
 'PADDING_TOKEN': 'паддинг',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': 'замена',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TUFANO_LABELED_PATH': '/home/mikhail/Documents/Development/embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'UNCHANGED_TOKEN': 'равенство',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 46680
valid 5835
test 5835

First training example:
src: public java.lang.String METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) . format ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] . getTime ( ) ) ; }
trg: public java.lang.String METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) . format ( VAR_1 [ ( ( type ) - 1 ) ] . getTime ( ) ) ; }
diff_alignment: равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство удаление удаление замена равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство равенство
diff_prev: public java.lang.String METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) . format ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] . getTime ( ) ) ; }
diff_updated: public java.lang.String METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) . format ( VAR_1 [ ( ( паддинг паддинг type ) - 1 ) ] . getTime ( ) ) ; }

Most common words:
 равенство    1232667
         (     759658
         )     759658
         ;     379192
   паддинг     303839
     VAR_1     300792
         .     293592
         {     243120
         }     243120
  удаление     217186

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 равенство
05 (
06 )
07 ;
08 паддинг
09 VAR_1

Special words frequency and ids:
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
замена 33822 34
удаление 217186 13
добавление 86653 23
равенство 1232667 4
паддинг 303839 8
Number of words (types): 438
Start conducting accuracy calculation experiment for Test dataset 25...
Top-1 accuracy: 4 / 25 = 0.16
Top-3 accuracy: 9 / 25 = 0.36
Start conducting accuracy calculation experiment for Tufano Labeled Code Changes...
Top-1 accuracy: 36 / 388 = 0.09278350515463918
Top-3 accuracy: 61 / 388 = 0.15721649484536082
Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 60 / 300 = 0.2
Top-3 accuracy: 97 / 300 = 0.3233333333333333
Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 44 / 300 = 0.14666666666666667
Top-3 accuracy: 88 / 300 = 0.29333333333333333
Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 89 / 300 = 0.2966666666666667
Top-3 accuracy: 142 / 300 = 0.47333333333333333
===Defects4J EXAMPLES===
Example #1
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }
Pred: public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case 0 : return 0L ; case 1 : return VAR_1 ; case 1 : return VAR_1 ; } return VAR_3 ; }
Example #2
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }
Pred: public VAR_1 ( int VAR_2 , int VAR_3 ) { super . METHOD_1 ( VAR_2 , VAR_3 ) ; this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }
Example #3
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }
Pred: void add ( java.lang.CharSequence VAR_1 ) { METHOD_1 ( ) ; }
Example #4
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 ) ; }
Example #5
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_2 = VAR_3 ; VAR_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 ) { VAR_2 . METHOD_4 ( VAR_1 ) ; } TYPE_4 VAR_5 = VAR_6 ; VAR_5 . METHOD_5 ( VAR_1 ) ; for ( TYPE_5 VAR_7 : VAR_8 ) { VAR_7 . METHOD_6 ( VAR_1 ) ; } if ( VAR_9 ) { VAR_10 = true ; } METHOD_7 ( VAR_1 ) ; return VAR_1 ; }
Trg : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; TYPE_3 VAR_2 = VAR_3 ; VAR_2 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 ) { VAR_2 . METHOD_4 ( VAR_1 ) ; } TYPE_4 VAR_5 = VAR_6 ; VAR_5 . METHOD_5 ( VAR_1 ) ; for ( TYPE_5 VAR_7 : VAR_8 ) { VAR_7 . METHOD_6 ( VAR_1 ) ; } VAR_10 = VAR_9 ; METHOD_7 ( VAR_1 ) ; return VAR_1 ; }
Pred: protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( new TYPE_2 ( ) ) ; VAR_2 . METHOD_3 ( VAR_1 ) ; }
Example #6
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return METHOD_2 ( VAR_2 ) ; }
Example #7
Src : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }
Trg : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . answer ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }
Pred: public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }
Example #8
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 , VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; }
Example #9
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! ( VAR_2 ) ) { VAR_4 = VAR_3 ; } } }
Example #10
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }
Pred: boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } else if ( VAR_3 ) { return false ; } }
Example #11
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . getClass ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }
Pred: public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( ) ; }
Example #12
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }
Pred: public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int sum = 0 ; for ( int i = 0 ; i < VAR_1 ; i VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; return TYPE_1 . METHOD_2 ( sum ) ; }
Example #13
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }
Pred: static float METHOD_1 ( java.lang.CharSequence VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }
Example #14
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }
Pred: public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_3 ) { } }
Example #15
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }
Pred: public double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { return VAR_5 / new TYPE_4 ( 0 , 1 ) ; }
Example #16
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }
Pred: public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != ( this . VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }
Example #17
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }
Example #18
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( ( TYPE_2 ) > ) ) ; }
Example #19
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { return VAR_1 . METHOD_1 ( ) ; }
Example #20
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }
Pred: public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }
Accuracy on Defects4J: 0.0
Start conducting one shot learning experiment for Tufano Labeled Code Changes...
Accuracy on Tufano Labeled Code Changes for same edit representations: 7 / 64 = 0.109375
Top-3 accuracy on Tufano Labeled Code Changes for same edit representations: 11 / 64 = 0.171875
Accuracy on Tufano Labeled Code Changes for other edit representations: 15 / 324 = 0.046296296296296294
Top-3 accuracy on Tufano Labeled Code Changes for same edit representations: 36 / 324 = 0.1111111111111111
================
Correct Examples
Class: Add null check
Golden example (False):
Example #1
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }
Pred: public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }
+++++++++++++++
Example #1
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }
Pred: void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }
---------------
Class: Add/Remove this qualifier
Golden example (False):
Example #1
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }
Pred: public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }
+++++++++++++++
Example #1
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }
Pred: public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }
---------------
Class: Broad method visibility
Golden example (False):
Example #1
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;
Pred: abstract TYPE_1 id ( java.lang.String VAR_1 ) ;
+++++++++++++++
Example #1
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
Example #2
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }
Example #3
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }
Example #4
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }
Pred: public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }
---------------
Class: Narrow method visibility
Golden example (True):
Example #1
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }
+++++++++++++++
Example #1
Src : protected synchronized void METHOD_1 ( ) { }
Trg : public synchronized void METHOD_1 ( ) { }
Pred: public synchronized void METHOD_1 ( ) { }
---------------
Class: Remove statement
Golden example (True):
Example #1
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }
Trg : public void METHOD_1 ( ) { }
Pred: public void METHOD_1 ( ) { }
+++++++++++++++
Example #1
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }
Example #2
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }
Pred: public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }
Example #3
Src : public void METHOD_1 ( int VAR_1 ) { <unk> ( VAR_2 . <unk> , ( STRING_1 + VAR_1 ) ) ; }
Trg : public void METHOD_1 ( int VAR_1 ) { }
Pred: public void METHOD_1 ( int VAR_1 ) { }
Example #4
Src : public void METHOD_1 ( ) { <unk> ( STRING_1 ) ; }
Trg : public void METHOD_1 ( ) { }
Pred: public void METHOD_1 ( ) { }
Example #5
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }
Example #6
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }
Example #7
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }
Example #8
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }
Pred: public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (False):
Example #1
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }
Trg : abstract void METHOD_1 ( int index , short value ) ;
Pred: void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }
+++++++++++++++
Example #1
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }
Trg : public abstract java.lang.String METHOD_1 ( ) ;
Pred: public java.lang.String METHOD_1 ( ) { return new TYPE_1 ( ) ; }
Example #2
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }
Trg : public abstract boolean METHOD_1 ( ) ;
Pred: public synchronized boolean METHOD_1 ( ) { return false ; }
Example #3
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }
Trg : public abstract java.lang.String METHOD_1 ( java.lang.String url ) ;
Pred: public java.lang.String METHOD_1 ( java.lang.String url ) { return null ; }
Example #4
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }
Trg : abstract float METHOD_1 ( int index ) ;
Pred: float METHOD_1 ( int index ) { return METHOD_1 ( index ) ; }
Example #5
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > <unk> ) { throw new TYPE_3 ( ) ; }
Trg : public abstract void METHOD_1 ( TYPE_1 < TYPE_2 > <unk> ) ;
Pred: public void METHOD_1 ( TYPE_1 < TYPE_2 > message ) { }
---------------
Class: Add invoked method
Golden example (False):
Example #1
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( <unk> <unk> ) { } }
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( <unk> <unk> ) { } }
Pred: public void METHOD_1 ( ) { }
+++++++++++++++
Example #1
Src : public <unk> . <unk> METHOD_1 ( ) { return new <unk> ( <unk> . <unk> ) ; }
Trg : public <unk> . <unk> METHOD_1 ( ) { return new <unk> ( <unk> . get ( ) . <unk> ) ; }
Pred: public java.lang.Void iterator ( ) { return t ; }
Example #2
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( <unk> ) ) , value ) ; }
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( <unk> ) ) , value ) ; }
Pred: final void METHOD_1 ( int offset , int value ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_2 ( ( offset + ( end ) ) , value ) ; } }
Example #3
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( ) ; <unk> . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( <unk> , VAR_2 class ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( ) ; <unk> . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( <unk> , VAR_2 class ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { }
Example #4
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 <unk> ) { TYPE_1 <unk> = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return <unk> ; }
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 <unk> ) { TYPE_1 <unk> = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return <unk> ; }
Pred: static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 t ) { TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return query ; }
Example #5
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . <unk> ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception <unk> ) { return VAR_2 ; } }
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . <unk> ( ( ( java.lang.String ) ( TYPE_2 . <unk> ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception <unk> ) { return VAR_2 ; } }
Pred: private TYPE_1 METHOD_1 ( ) { return TYPE_1 . assertNotNull ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; }
---------------
Class: Add null check
Golden example (False):
Example #1
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }
Pred: public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }
+++++++++++++++
Example #1
Src : public void <unk> ( ) { VAR_1 . METHOD_1 ( this , status ) ; }
Trg : public void <unk> ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }
Pred: public void execute ( ) { VAR_1 . METHOD_1 ( this , status ) ; }
Example #2
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > <unk> ) { VAR_1 . METHOD_2 ( <unk> . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > <unk> ) { VAR_1 . METHOD_2 ( <unk> . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }
Pred: void METHOD_1 ( TYPE_1 < TYPE_2 > params ) { VAR_1 . METHOD_2 ( state . getValue ( ) ) ; }
Example #3
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }
Pred: public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }
Example #4
Src : public void METHOD_1 ( ) { VAR_1 . <unk> ( ) ; }
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . <unk> ( ) ; } }
Pred: public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . execute ( ) ; } }
Example #5
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }
Pred: public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; }
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
Example #1
Src : public void <unk> ( TYPE_1 result ) { TYPE_2 . <unk> ( TYPE_3 . METHOD_1 ( VAR_1 . <unk> ( ) ) ) ; }
Trg : public void <unk> ( TYPE_1 result ) { TYPE_2 . <unk> ( TYPE_3 . METHOD_1 ( <unk> , VAR_1 . <unk> ( ) ) ) ; }
Pred: public void delete ( TYPE_1 result ) { TYPE_2 . assertTrue ( this . METHOD_1 ( VAR_1 . execute ( ) ) ) ; }
+++++++++++++++
Example #1
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , <unk> <unk> ) { TYPE_1 params = new TYPE_1 ( VAR_1 , <unk> ) ; params . METHOD_2 ( TYPE_2 . <unk> ( ) . METHOD_3 ( ) ) ; return params ; }
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , <unk> <unk> ) { TYPE_1 params = new TYPE_1 ( VAR_1 , <unk> , true ) ; params . METHOD_2 ( TYPE_2 . <unk> ( ) . METHOD_3 ( ) ) ; return params ; }
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.Throwable t ) { TYPE_1 params = new TYPE_1 ( VAR_1 , params ) ; params . METHOD_2 ( TYPE_2 . query ( ) . METHOD_3 ( ) ) ; return params ; }
Example #2
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . <unk> ) ) ; }
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . <unk> ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . <unk> ) ) ; }
Pred: public TYPE_1 list ( ) { return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; }
Example #3
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; }
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; }
Pred: public void METHOD_1 ( ) { }
Example #4
Src : private <unk> METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }
Trg : private <unk> METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }
Pred: private static METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( query . METHOD_3 ( ) , name , true , null , null , null , false , null , null ) ; }
Example #5
Src : private <unk> METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }
Trg : private <unk> METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }
Pred: private static METHOD_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( params . METHOD_3 ( ) , VAR_1 , false , null , VAR_2 , true ) ; }
Example #6
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( <unk> VAR_5 ) { } }
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( <unk> VAR_5 ) { } }
Pred: public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( java.lang.Throwable VAR_5 ) { } }
Example #7
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; }
Example #8
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 <unk> ) { } }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 <unk> ) { } }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; } catch ( TYPE_3 t ) { } }
Example #9
Src : public void METHOD_1 ( ) { java.util.List < <unk> . <unk> > result = <unk> . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }
Trg : public void METHOD_1 ( ) { java.util.List < <unk> . <unk> > result = <unk> . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }
Pred: public void METHOD_1 ( ) { }
Example #10
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , <unk> VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , <unk> VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , TYPE_5 VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }
Example #11
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( <unk> . get ( ) , 1 ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( <unk> . get ( ) , 1 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; }
Example #12
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; }
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; }
Pred: public void METHOD_1 ( ) { }
Example #13
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }
Pred: private static void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) ; } }
Example #14
Src : public void METHOD_1 ( int VAR_1 , <unk> <unk> , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }
Trg : public void METHOD_1 ( int VAR_1 , <unk> <unk> , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }
Pred: public void METHOD_1 ( int VAR_1 , java.util.Map < java.lang.String , java.lang.Object value ) { if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } }
Example #15
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 <unk> ) { } }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 <unk> ) { } }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 t ) { } }
Example #16
Src : private TYPE_1 . <unk> METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }
Trg : private TYPE_1 . <unk> METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }
Pred: private TYPE_1 [ ] METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }
Example #17
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( <unk> VAR_4 ) { } }
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( <unk> VAR_4 ) { } }
Pred: public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( java.lang.Exception VAR_4 ) { } }
Example #18
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }
Pred: public static void METHOD_1 ( short [ ] a ) { if ( a != null ) { TYPE_1 . METHOD_1 ( a ) ; } }
Example #19
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , true ) ; }
Example #20
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( <unk> ) ; }
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; }
Example #21
Src : private java.util.List < TYPE_1 > METHOD_1 ( <unk> VAR_1 , TYPE_2 VAR_2 ) { return <unk> ( VAR_3 . <unk> class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }
Trg : private java.util.List < TYPE_1 > METHOD_1 ( <unk> VAR_1 , TYPE_2 VAR_2 ) { return <unk> ( VAR_3 . <unk> class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }
Pred: private java.util.List < TYPE_1 > METHOD_1 ( java.lang.Throwable VAR_1 , TYPE_2 VAR_2 ) { return query ( VAR_3 . format class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }
---------------
Class: Add statement,Remove thrown exception
Golden example (False):
Example #1
Src : public TYPE_1 METHOD_1 ( java.lang.String <unk> ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( <unk> ) ; } catch ( TYPE_3 <unk> ) { throw new TYPE_2 ( <unk> ( ) ) ; } }
Trg : public java.lang.String METHOD_1 ( java.lang.String <unk> ) { return <unk> ; }
Pred: public TYPE_1 METHOD_1 ( java.lang.String query ) throws TYPE_2 { return TYPE_1 . METHOD_2 ( params ) ; }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws <unk> { }
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { }
---------------
Class: Add/Remove parameter
Golden example (False):
Example #1
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( <unk> , type , arg ) ; }
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( <unk> , type , arg ) ; }
Pred: protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { }
+++++++++++++++
Example #1
Src : public void <unk> ( java.lang.Object VAR_1 , java.lang.Object <unk> ) { this . <unk> ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ) ; }
Trg : public void <unk> ( java.lang.Object <unk> ) { this . <unk> ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ) ; }
Pred: public void execute ( java.lang.Object VAR_1 , java.lang.Object obj ) { this . delete ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 ) != null ) ) ) ; }
Example #2
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int <unk> ) throws TYPE_2 ;
Pred: TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;
Example #3
Src : public void METHOD_1 ( <unk> <unk> , TYPE_1 event , <unk> <unk> ) { }
Trg : public void METHOD_1 ( TYPE_1 event , <unk> <unk> ) { }
Pred: public void METHOD_1 ( java.lang.Throwable t , TYPE_1 event ) { }
Example #4
Src : public static native void METHOD_1 ( long <unk> , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;
Trg : public static native void METHOD_1 ( long <unk> , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;
Pred: public static void METHOD_1 ( long params , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) { }
Example #5
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws <unk> { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }
Trg : public TYPE_1 METHOD_1 ( ) throws <unk> { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.lang.Exception { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }
Example #6
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 <unk> , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 <unk> , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }
Example #7
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;
Trg : void METHOD_1 ( int type , int VAR_2 ) ;
Pred: void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;
Example #8
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return listener ; }
Example #9
Src : public void <unk> ( java.lang.Object <unk> , java.lang.Object VAR_1 ) { <unk> ( ( ( TYPE_1 < <unk> > ) ( ( ( TYPE_2 . <unk> ) ( VAR_1 ) ) . <unk> ( ) ) ) ) ; }
Trg : public void <unk> ( java.lang.Object VAR_1 ) { <unk> ( ( ( TYPE_1 < <unk> > ) ( ( ( TYPE_2 . <unk> ) ( VAR_1 ) ) . <unk> ( ) ) ) ) ; }
Pred: public void execute ( java.lang.Object arg , java.lang.Object VAR_1 ) { }
Example #10
Src : void METHOD_1 ( TYPE_1 . <unk> <unk> , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;
Trg : void METHOD_1 ( TYPE_1 . <unk> <unk> , java.util.List < TYPE_2 > VAR_1 ) ;
Pred: void METHOD_1 ( TYPE_1 query , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;
Example #11
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . <unk> ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( <unk> . <unk> ( ) ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . <unk> ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( <unk> . <unk> ( ) ) ; }
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 ( ) ) ; METHOD_3 ( ) ; METHOD_5 ( false ) ; }
Example #12
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;
Pred: void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;
Example #13
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }
Pred: public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }
Example #14
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , null , null ) ; }
Example #15
Src : native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] <unk> , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;
Trg : native boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] <unk> , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;
Pred: native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] args , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;
Example #16
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( VAR_1 ) ; }
Example #17
Src : private TYPE_1 METHOD_1 ( TYPE_2 <unk> , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }
Pred: private TYPE_1 METHOD_1 ( TYPE_2 query , java.lang.String VAR_1 , java.lang.String path ) { return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }
Example #18
Src : void METHOD_1 ( boolean VAR_1 ) ;
Trg : void METHOD_1 ( ) ;
Pred: void METHOD_1 ( boolean VAR_1 ) ;
Example #19
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (False):
Example #1
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 <unk> = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . <unk> ( id ) . view ( STRING_1 ) . METHOD_3 ( <unk> , VAR_1 ) ; }
Trg : public static void METHOD_1 ( java.lang.String <unk> , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 <unk> = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . <unk> ( <unk> , id ) . view ( STRING_1 ) . METHOD_3 ( <unk> , VAR_1 ) ; }
Pred: public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { }
+++++++++++++++
Example #1
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , <unk> <unk> , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , <unk> , VAR_2 , null , 0 ) ; }
Trg : public static java.lang.String METHOD_1 ( <unk> <unk> , TYPE_1 VAR_1 , <unk> <unk> , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , <unk> , VAR_1 , <unk> , VAR_2 , null , 0 ) ; }
Pred: public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , java.lang.Throwable t , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , args , VAR_2 , null , null ) ; }
Example #2
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , <unk> , STRING_1 , true , VAR_2 ) ; }
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( <unk> , STRING_1 , VAR_1 , true , VAR_2 ) ; }
Pred: private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , null , STRING_1 , true , false ) ; }
Example #3
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . <unk> ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }
Trg : public static TYPE_1 METHOD_1 ( java.lang.String <unk> , int id , java.lang.String VAR_1 ) { return TYPE_2 . <unk> ( <unk> , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }
Pred: public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return null ; }
Example #4
Src : public static void METHOD_1 ( <unk> id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . <unk> ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }
Trg : public static void METHOD_1 ( java.lang.String <unk> , <unk> id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . <unk> ( <unk> , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }
Pred: public static void METHOD_1 ( java.lang.Throwable id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { }
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (False):
Example #1
Src : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( java.lang.Integer ) ( <unk> ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }
Trg : public void <unk> ( java.lang.Integer <unk> ) { VAR_1 = <unk> ; METHOD_1 ( ) ; METHOD_2 ( ) ; }
Pred: public void execute ( java.lang.Object target , java.lang.Object message ) { VAR_1 = ( ( java.lang.Integer ) ( format ) ) ; METHOD_1 ( ) ; }
+++++++++++++++
Example #1
Src : public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { METHOD_1 ( ( ( java.lang.Boolean ) ( <unk> ) ) ) ; }
Trg : public void <unk> ( java.lang.Boolean <unk> ) { METHOD_1 ( <unk> ) ; }
Pred: public void execute ( java.lang.Object arg , java.lang.Object arg ) { METHOD_1 ( args ) ; }
---------------
Class: Add/Remove this qualifier
Golden example (False):
Example #1
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }
Pred: public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }
Pred: public void METHOD_1 ( boolean VAR_2 ) { this . VAR_2 = VAR_1 ; }
---------------
Class: Broad method visibility
Golden example (False):
Example #1
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;
Pred: abstract TYPE_1 id ( java.lang.String VAR_1 ) ;
+++++++++++++++
Example #1
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }
Pred: private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { VAR_3 . METHOD_3 ( VAR_1 ) ; }
Example #2
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }
Pred: protected void METHOD_1 ( ) throws java.lang.Exception { }
Example #3
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . <unk> ( ) ) ) && ( <unk> ( VAR_1 . METHOD_3 ( ) ) ) ; }
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . <unk> ( ) ) ) && ( <unk> ( VAR_1 . METHOD_3 ( ) ) ) ; }
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . query ( ) ) ) && ( ( ( VAR_1 . METHOD_3 ( ) ) ) != null ) ; }
Example #4
Src : private boolean METHOD_1 ( TYPE_1 . <unk> <unk> ) { return <unk> ( METHOD_2 ( <unk> ) . METHOD_3 ( TYPE_2 . <unk> ( ) . METHOD_4 ( ) ) ) ; }
Trg : protected boolean METHOD_1 ( TYPE_1 . <unk> <unk> ) { return <unk> ( METHOD_2 ( <unk> ) . METHOD_3 ( TYPE_2 . <unk> ( ) . METHOD_4 ( ) ) ) ; }
Pred: private boolean METHOD_1 ( TYPE_1 . t ) { return t ; }
Example #5
Src : protected <unk> <unk> ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . <unk> ( ) ; }
Trg : public <unk> <unk> ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . <unk> ( ) ; }
Pred: protected java.lang.Exception execute ( ) { return super . execute ( ) ; }
Example #6
Src : private boolean METHOD_1 ( java.util.List < <unk> > VAR_1 ) { for ( <unk> <unk> : VAR_1 ) { if ( ( <unk> . <unk> ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }
Trg : protected boolean METHOD_1 ( java.util.List < <unk> > VAR_1 ) { for ( <unk> <unk> : VAR_1 ) { if ( ( <unk> . <unk> ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }
Pred: private boolean METHOD_1 ( java.util.List < java.lang.Void > VAR_1 ) { return true ; }
Example #7
Src : private static TYPE_1 <unk> ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }
Trg : public static TYPE_1 <unk> ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }
Pred: private static TYPE_1 delete ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }
Example #8
Src : protected TYPE_1 . <unk> METHOD_1 ( ) { return <unk> ( ) ; }
Trg : public TYPE_1 . <unk> METHOD_1 ( ) { return <unk> ( ) ; }
Pred: protected TYPE_1 METHOD_1 ( ) { return null ; }
Example #9
Src : protected void METHOD_1 ( final <unk> value ) { <unk> = value ; }
Trg : public void METHOD_1 ( final <unk> value ) { <unk> = value ; }
Pred: protected void METHOD_1 ( final java.lang.String value ) { }
Example #10
Src : private static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;
Trg : public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;
Pred: private static void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) { }
Example #11
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }
Pred: protected java.lang.String METHOD_1 ( ) { return VAR_1 ; }
---------------
Class: Change method invocation as result of a move method
Golden example (False):
Example #1
Src : private void METHOD_1 ( ) { TYPE_1 . <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( VAR_2 ) ; }
Trg : private void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( VAR_2 ) ; }
Pred: private void METHOD_1 ( ) { }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }
Example #2
Src : protected void METHOD_1 ( ) { <unk> ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }
Pred: protected void METHOD_1 ( ) { }
Example #3
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }
Example #4
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }
Pred: protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) ) ) != null ; }
Example #5
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , <unk> ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , <unk> ) ; return METHOD_3 ( VAR_1 ) ; }
Pred: public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { return VAR_2 . get ( key . METHOD_2 ( ) , arg ) ; }
Example #6
Src : private void METHOD_1 ( <unk> <unk> ) { TYPE_1 . <unk> ( VAR_1 . get ( VAR_2 . <unk> < <unk> > <unk> ( VAR_3 . <unk> class ) ) ) . <unk> ( <unk> ) ; }
Trg : private void METHOD_1 ( <unk> <unk> ) { <unk> ( VAR_1 . get ( VAR_2 . <unk> < <unk> > <unk> ( VAR_3 . <unk> class ) ) ) . <unk> ( <unk> ) ; }
Pred: private void METHOD_1 ( java.lang.Throwable t ) { }
---------------
Class: Change method return value
Golden example (False):
Example #1
Src : public TYPE_1 METHOD_1 ( ) { return false ; }
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }
Pred: public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; }
+++++++++++++++
Example #1
Src : public final TYPE_1 METHOD_1 ( ) { return this . <unk> ; }
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }
Pred: public final TYPE_1 METHOD_1 ( ) { return this ; }
Example #2
Src : public boolean METHOD_1 ( ) { return false ; }
Trg : public boolean METHOD_1 ( ) { return true ; }
Pred: public boolean METHOD_1 ( ) { return false ; }
Example #3
Src : protected java.lang.String <unk> ( ) { return STRING_1 ; }
Trg : protected java.lang.String <unk> ( ) { return <unk> ; }
Pred: protected java.lang.String execute ( ) { return STRING_1 ; }
---------------
Class: Change method return value,Change return type
Golden example (False):
Example #1
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }
Pred: public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }
+++++++++++++++
Example #1
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }
Pred: public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }
---------------
Class: Change parameter type
Golden example (False):
Example #1
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 , VAR_2 , VAR_3 ) ; }
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 , VAR_2 , VAR_3 ) ; }
Pred: synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { return METHOD_3 ( intent , VAR_1 , VAR_2 , VAR_3 ) ; }
+++++++++++++++
Example #1
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] <unk> , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 , count , <unk> , VAR_3 ) ; }
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] <unk> , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 , count , <unk> , VAR_3 ) ; }
Pred: synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] args , int VAR_3 ) { METHOD_3 ( intent , id , VAR_1 , VAR_3 , VAR_3 , VAR_3 ) ; }
Example #2
Src : public boolean METHOD_1 ( <unk> . <unk> <unk> ) { return <unk> . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }
Trg : public boolean METHOD_1 ( <unk> <unk> ) { return <unk> . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }
Pred: public boolean METHOD_1 ( java.lang.Throwable t ) { return obj . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }
Example #3
Src : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return <unk> . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }
Trg : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return <unk> . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }
Pred: public boolean METHOD_1 ( java.lang.Throwable t ) { return ( ( VAR_1 . METHOD_3 ( ) ) != null ) && ( obj . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ; }
Example #4
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . <unk> VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . <unk> ( VAR_1 . <unk> ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }
Trg : private TYPE_1 METHOD_1 ( final <unk> . <unk> VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . <unk> ( VAR_1 . <unk> ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }
Pred: public TYPE_1 METHOD_1 ( final TYPE_2 . VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . format ( VAR_1 . execute ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }
Example #5
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }
Pred: static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }
Example #6
Src : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }
Trg : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }
Pred: public boolean METHOD_1 ( java.lang.Throwable t ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }
Example #7
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 <unk> = new TYPE_1 ( ) ; <unk> . <unk> ( <unk> . METHOD_2 ( ) ) ; <unk> . METHOD_3 ( STRING_1 ) ; return <unk> ; }
Trg : private static <unk> METHOD_1 ( ) { <unk> <unk> = new <unk> ( ) ; <unk> . <unk> ( <unk> . METHOD_2 ( ) ) ; <unk> . METHOD_3 ( STRING_1 ) ; return <unk> ; }
Pred: private static TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; }
Example #8
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 ) ; }
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 ) ; }
Pred: synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_1 , VAR_1 ) ; }
Example #9
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }
Pred: static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }
Example #10
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }
Pred: static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }
Example #11
Src : private static void METHOD_1 ( final TYPE_1 <unk> , final TYPE_2 . <unk> <unk> ) { TYPE_3 . METHOD_2 ( <unk> , STRING_1 , <unk> . get ( ) ) ; }
Trg : private static void METHOD_1 ( final java.lang.StringBuilder <unk> , final TYPE_2 . <unk> <unk> ) { TYPE_3 . METHOD_2 ( <unk> , STRING_1 , <unk> . get ( ) ) ; }
Pred: private static void METHOD_1 ( final TYPE_1 < java.lang.Void , TYPE_2 [ ] { }
Example #12
Src : public java.lang.String getValue ( <unk> . <unk> <unk> ) { return <unk> . METHOD_1 ( ) ; }
Trg : public java.lang.String getValue ( <unk> . <unk> <unk> ) { return <unk> . METHOD_1 ( ) ; }
Pred: public java.lang.String getValue ( ) { return delete ( ) . METHOD_1 ( ) ; }
Example #13
Src : public java.lang.String getValue ( <unk> <unk> ) { return <unk> ( <unk> . METHOD_1 ( ) . size ( ) ) ; }
Trg : public java.lang.String getValue ( java.lang.Object <unk> ) { return <unk> ( ( ( <unk> ) ( <unk> ) ) . METHOD_1 ( ) . size ( ) ) ; }
Pred: public java.lang.String getValue ( ) { return delete ( arg . METHOD_1 ( ) . size ( ) ) ; }
Example #14
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }
Pred: synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_3 ( intent , id , VAR_1 , VAR_2 ) ; METHOD_2 ( ) ; }
Example #15
Src : public static native byte [ ] METHOD_1 ( int VAR_1 ) ;
Trg : public static native byte [ ] METHOD_1 ( long VAR_1 ) ;
Pred: public static native byte [ ] METHOD_1 ( int VAR_1 ) ;
Example #16
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > <unk> , TYPE_2 . <unk> VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , <unk> . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , <unk> , VAR_2 ) ; }
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > <unk> , TYPE_2 . <unk> VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , <unk> . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , <unk> , VAR_2 ) ; }
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > params , TYPE_2 VAR_2 ) { return TYPE_4 . METHOD_4 ( VAR_1 , args , VAR_2 ) ; }
Example #17
Src : public java.lang.String getValue ( <unk> <unk> ) { return ( <unk> ( <unk> . METHOD_1 ( ) ) ) + STRING_1 ; }
Trg : public java.lang.String getValue ( java.lang.Object <unk> ) { return ( <unk> ( ( ( <unk> ) ( <unk> ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }
Pred: public java.lang.String getValue ( ) { return ( arg != null ) && ( ( args.length ( arg . METHOD_1 ( ) ) ) + STRING_1 ) ; }
Example #18
Src : native void METHOD_1 ( int VAR_1 , int VAR_2 ) ;
Trg : native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;
Pred: void METHOD_1 ( int VAR_1 , int VAR_2 ) { }
Example #19
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }
Pred: synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }
Example #20
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }
Pred: final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }
Example #21
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }
Pred: synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_3 ( intent , id , VAR_1 , VAR_2 ) ; METHOD_2 ( ) ; }
Example #22
Src : public boolean METHOD_1 ( TYPE_1 <unk> ) { return ( <unk> . METHOD_2 ( ) ) == ( VAR_1 ) ; }
Trg : public boolean METHOD_1 ( <unk> <unk> ) { return ( <unk> . METHOD_2 ( ) ) == ( VAR_1 ) ; }
Pred: public boolean METHOD_1 ( TYPE_1 t ) { return ( ( TYPE_1 . METHOD_2 ( ) ) == ( VAR_1 ) ) || ( ( t . METHOD_2 ( ) ) == ( VAR_1 ) ) ; }
Example #23
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }
Pred: synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_3 ( intent , id , VAR_1 , VAR_2 ) ; METHOD_2 ( ) ; }
Example #24
Src : public static native void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;
Trg : public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;
Pred: public static native void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;
Example #25
Src : protected TYPE_1 METHOD_1 ( TYPE_1 <unk> , <unk> . <unk> <unk> ) { return VAR_1 . METHOD_2 ( <unk> , <unk> , VAR_2 , VAR_3 ) ; }
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 <unk> , <unk> <unk> ) { return VAR_1 . METHOD_2 ( <unk> , <unk> , VAR_2 , VAR_3 ) ; }
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 query , java.lang.Throwable t ) { return VAR_1 . METHOD_2 ( query , query , VAR_2 , VAR_2 , VAR_3 ) ; }
Example #26
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int <unk> ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , VAR_1 , VAR_2 , <unk> ) ; }
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long <unk> ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , VAR_1 , VAR_2 , <unk> ) ; }
Pred: synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int format ) { METHOD_3 ( intent , VAR_1 , VAR_2 , args ) ; METHOD_2 ( ) ; }
Example #27
Src : public static native void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;
Trg : public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;
Pred: public static native void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;
Example #28
Src : native void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;
Trg : native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;
Pred: native void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;
Example #29
Src : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( <unk> ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }
Trg : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( <unk> ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }
Pred: public boolean METHOD_1 ( java.lang.Throwable t ) { return VAR_1 . METHOD_2 ( ) . equals ( obj . METHOD_3 ( ) . METHOD_4 ( ) ) ; }
---------------
Class: Change parameter value of invoked method
Golden example (False):
Example #1
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . <unk> , VAR_1 ) ; }
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }
+++++++++++++++
Example #1
Src : protected java.util.List < <unk> > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }
Trg : protected java.util.List < <unk> > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new <unk> ( VAR_2 ) ) ; }
Pred: protected java.util.List < java.lang.Void > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }
Example #2
Src : public TYPE_1 METHOD_1 ( <unk> id ) { return <unk> ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }
Trg : public TYPE_1 METHOD_1 ( <unk> id ) { return <unk> ( VAR_1 class , VAR_2 , new <unk> ( id ) , id . toString ( ) ) ; }
Pred: public TYPE_1 METHOD_1 ( TYPE_1 id ) { return super . METHOD_1 ( id class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }
Example #3
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; <unk> = TYPE_3 . METHOD_3 ( args . <unk> , t ) ; }
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; <unk> = TYPE_3 . METHOD_3 ( args . <unk> , t ) ; }
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t = TYPE_3 . METHOD_3 ( args . t , t ) ; }
Example #4
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( <unk> , INT_1 , false ) ; <unk> = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( <unk> , INT_1 , false ) ; <unk> = TYPE_3 . METHOD_3 ( args . <unk> , t ) ; }
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; t . METHOD_2 ( params , INT_1 , false ) ; }
Example #5
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( ) ; }
Example #6
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . <unk> ( STRING_2 , VAR_1 ) ) ; }
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . <unk> , METHOD_4 ( ) . <unk> ( STRING_2 , VAR_1 ) ) ; }
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . METHOD_7 ( ) , VAR_1 ) ; }
---------------
Class: Change parameters order in method invocation
Golden example (False):
Example #1
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = <unk> . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , <unk> ) ; }
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = <unk> . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( <unk> , VAR_1 . size ( ) ) ; }
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = params . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , VAR_1 ) ; }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }
---------------
Class: Change return type
Golden example (False):
Example #1
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }
Pred: public void METHOD_1 ( ) { }
+++++++++++++++
Example #1
Src : protected <unk> . <unk> METHOD_1 ( java.lang.String name ) { for ( <unk> . <unk> <unk> : METHOD_2 ( ) ) { if ( <unk> . getName ( ) . equals ( name ) ) { return <unk> ; } } return null ; }
Trg : protected <unk> METHOD_1 ( java.lang.String name ) { for ( <unk> <unk> : METHOD_2 ( ) ) { if ( <unk> . getName ( ) . equals ( name ) ) { return <unk> ; } } return null ; }
Pred: protected java.lang.Void ( ) { return null ; }
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
Example #1
Src : public static boolean METHOD_1 ( <unk> <unk> ) { return ! ( TYPE_1 . METHOD_2 ( <unk> ) . isEmpty ( ) ) ; }
Trg : public boolean METHOD_1 ( <unk> <unk> ) { return ! ( METHOD_2 ( <unk> ) . isEmpty ( ) ) ; }
Pred: public static boolean METHOD_1 ( java.lang.Throwable t ) { return TYPE_1 . METHOD_2 ( params ) ; }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = <unk> . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }
Pred: public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; }
Example #2
Src : public static TYPE_1 METHOD_1 ( <unk> <unk> , <unk> VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( <unk> , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }
Trg : public TYPE_1 METHOD_1 ( <unk> <unk> , <unk> VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( <unk> , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }
Pred: public static TYPE_1 METHOD_1 ( java.lang.Throwable t , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( query , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }
Example #3
Src : public static TYPE_1 METHOD_1 ( <unk> <unk> , <unk> VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( <unk> , VAR_1 , true , false , VAR_2 , false ) ; }
Trg : public TYPE_1 METHOD_1 ( <unk> <unk> , <unk> VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( <unk> , VAR_1 , true , false , VAR_2 , false ) ; }
Pred: public static TYPE_1 METHOD_1 ( java.lang.Throwable t , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( query , VAR_1 , true , false , VAR_2 , false ) ; }
Example #4
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }
Pred: public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }
---------------
Class: Forbid overriding: add final to method
Golden example (False):
Example #1
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }
Pred: public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_3 ( i , VAR_2 ) ) ; }
+++++++++++++++
Example #1
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }
Pred: public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( ) ) ) ; }
---------------
Class: Merge variable definition & initialization
Golden example (False):
Example #1
Src : public java.util.List < TYPE_1 > METHOD_1 ( <unk> VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . <unk> ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }
Trg : public java.util.List < TYPE_1 > METHOD_1 ( <unk> VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . <unk> ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_2 = METHOD_2 ( ) . params ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }
+++++++++++++++
Example #1
Src : public java.util.List < TYPE_1 > METHOD_1 ( <unk> <unk> ) { TYPE_2 VAR_1 = METHOD_2 ( ) . <unk> ( STRING_1 , <unk> ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }
Trg : public java.util.List < TYPE_1 > METHOD_1 ( <unk> <unk> ) { TYPE_2 VAR_1 = METHOD_2 ( ) . <unk> ( STRING_1 , <unk> ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Throwable t ) { java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }
Example #2
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }
Example #3
Src : private TYPE_1 METHOD_1 ( <unk> VAR_1 , <unk> VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . <unk> ( STRING_1 , VAR_1 ) . <unk> ( STRING_2 , VAR_2 ) ; return VAR_3 ; }
Trg : private TYPE_1 METHOD_1 ( <unk> VAR_1 , <unk> VAR_2 ) { return METHOD_2 ( ) . <unk> ( STRING_1 , VAR_1 ) . <unk> ( STRING_2 , VAR_2 ) ; }
Pred: private TYPE_1 METHOD_1 ( java.lang.Throwable t , TYPE_1 VAR_2 ) { return METHOD_2 ( ) . params ( STRING_1 , VAR_1 ) . execute ( STRING_1 , VAR_1 ) . execute ( STRING_2 , VAR_2 ) ; }
Example #4
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }
Pred: public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }
---------------
Class: Move existing statements out of try block
Golden example (False):
Example #1
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }
Pred: public static long METHOD_1 ( ) { try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( <unk> ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( <unk> ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }
Example #2
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( <unk> ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( <unk> ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }
---------------
Class: Narrow method visibility
Golden example (True):
Example #1
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }
+++++++++++++++
Example #1
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
Example #2
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }
Pred: public TYPE_1 METHOD_1 ( java.lang.String id ) { return VAR_1 ; }
Example #3
Src : public TYPE_1 METHOD_1 ( ) { return <unk> ; }
Trg : private TYPE_1 METHOD_1 ( ) { return <unk> ; }
Pred: public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; }
Example #4
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }
Pred: protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_2 ) ; }
---------------
Class: Remove condition
Golden example (False):
Example #1
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }
Pred: public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }
Pred: public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }
Example #2
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }
Pred: public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }
Example #3
Src : public static TYPE_1 <unk> ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }
Trg : public static TYPE_1 <unk> ( ) { return VAR_1 ; }
Pred: public static TYPE_1 < ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }
Example #4
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }
Pred: public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }
---------------
Class: Remove invoked method
Golden example (False):
Example #1
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }
Pred: void METHOD_1 ( byte [ ] a ) { TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }
+++++++++++++++
Example #1
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = <unk> ; VAR_2 = <unk> ; <unk> = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . <unk> ) ) ) ; }
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = <unk> ; VAR_2 = <unk> ; <unk> = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . <unk> ) ) ) ; }
Pred: public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = params ; }
Example #2
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }
Example #3
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = <unk> . METHOD_2 ( FLOAT_1 ) ; b = <unk> . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = a . METHOD_2 ( FLOAT_1 ) ; b = t . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }
Example #4
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = <unk> . get ( VAR_3 ) ; VAR_4 = <unk> . get ( VAR_5 ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = VAR_1 . METHOD_3 ( ) ; VAR_2 = <unk> . get ( VAR_3 ) ; VAR_4 = <unk> . get ( VAR_5 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; }
Example #5
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . <unk> <unk> ) { TYPE_2 type = TYPE_2 . METHOD_2 ( <unk> . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . <unk> <unk> ) { TYPE_2 type = <unk> . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }
Pred: public static synchronized boolean METHOD_1 ( TYPE_1 query ) { TYPE_2 type = TYPE_2 . METHOD_2 ( t . toString ( ) ) ; return type == ( VAR_1 ) ; }
Example #6
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }
Pred: public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }
Example #7
Src : public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }
Trg : public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return INT_1 ; } return source ; }
Pred: public java.lang.Object execute ( java.lang.Object source , java.lang.Throwable t ) { return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }
Example #8
Src : public TYPE_1 get ( ) { TYPE_1 <unk> = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( <unk> , <unk> ) ; TYPE_2 . METHOD_4 ( <unk> , TYPE_3 . METHOD_5 ( <unk> ) ) ; return <unk> ; }
Trg : public TYPE_1 get ( ) { TYPE_1 <unk> = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( <unk> , <unk> ) ; TYPE_2 . METHOD_4 ( <unk> , <unk> ) ; return <unk> ; }
Pred: public TYPE_1 get ( ) { TYPE_1 . METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( params , CHAR_2 ) ; return query ; }
Example #9
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }
Pred: protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }
Example #10
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }
Example #11
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }
Pred: public java.lang.Object METHOD_1 ( java.lang.Object source , java.lang.Throwable t ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : null ; }
Example #12
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . <unk> ( ) . METHOD_3 ( ) , TYPE_4 . <unk> ( ) . METHOD_4 ( ) ) ; }
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . getConfig ( ) . METHOD_3 ( ) ) ; }
Example #13
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }
Pred: public void METHOD_1 ( TYPE_1 value ) { if ( value != null ) { status = value . getValue ( ) ; } }
Example #14
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = <unk> . METHOD_2 ( FLOAT_1 ) ; b = <unk> . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = a . METHOD_2 ( FLOAT_1 ) ; b = t . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }
Example #15
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }
Example #16
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = <unk> . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = VAR_1 . METHOD_3 ( ) ; VAR_2 = <unk> . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; }
---------------
Class: Remove parameter from the method invocation
Golden example (False):
Example #1
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }
+++++++++++++++
Example #1
Src : private <unk> . <unk> METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }
Trg : private <unk> . <unk> METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }
Pred: private java.lang.Void METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( query . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }
Example #2
Src : private void METHOD_1 ( ) { <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( VAR_2 . <unk> class ) , TYPE_1 . <unk> ( VAR_3 class ) ) ; <unk> . METHOD_3 ( VAR_4 ) ; }
Trg : private void METHOD_1 ( ) { <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( ) , TYPE_1 . <unk> ( ) ) ; <unk> . METHOD_3 ( VAR_4 ) ; }
Pred: private void METHOD_1 ( ) { }
Example #3
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 <unk> , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 <unk> , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 element , java.lang.String value ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_2 ( ) ; } }
Example #4
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }
Example #5
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( <unk> , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( <unk> ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( <unk> ) ; VAR_1 . METHOD_2 ( <unk> ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }
Pred: public void METHOD_1 ( ) { METHOD_3 ( ) ; }
Example #6
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }
Pred: public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; TYPE_2 . METHOD_1 ( null ) ; }
Example #7
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > <unk> , java.lang.String <unk> ) throws java.lang.Exception { return METHOD_2 ( <unk> , null , null , <unk> , null , null ) ; }
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > <unk> , java.lang.String <unk> ) throws java.lang.Exception { return METHOD_2 ( <unk> , null , <unk> , null , null ) ; }
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > params , java.lang.String params ) throws java.lang.Exception { return METHOD_2 ( query , null , null , null , null , null ) ; }
Example #8
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }
Example #9
Src : public TYPE_1 <unk> ( ) { return new TYPE_1 ( this , null ) ; }
Trg : public TYPE_1 <unk> ( ) { return new TYPE_1 ( this ) ; }
Pred: public TYPE_1 < ( ) { return new TYPE_1 ( this , null ) ; }
Example #10
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }
Example #11
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; assertEquals ( STRING_3 , STRING_4 , result ) ; }
Example #12
Src : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }
Trg : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }
Pred: public TYPE_1 delete ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }
Example #13
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; }
Example #14
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new <unk> ( ) , null , new java.util.ArrayList < <unk> . <unk> > ( ) ) , false , VAR_2 ) ; }
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new <unk> ( ) , null , new java.util.ArrayList < <unk> . <unk> > ( ) , null ) , false , VAR_2 ) ; }
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new java.awt.Font ( ) , null , new java.util.ArrayList < java.lang.Void > ( ) ) , false , VAR_2 ) ; }
Example #15
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( <unk> ) ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( <unk> ) ) ; }
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; }
Example #16
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , <unk> ) ; }
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , null ) ; }
Example #17
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }
Example #18
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws <unk> { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws <unk> { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }
Pred: public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws java.lang.Exception { synchronized ( VAR_3 ) { return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }
Example #19
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }
Example #20
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }
Example #21
Src : public void METHOD_1 ( ) { <unk> ( null ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( VAR_1 . <unk> class ) ) ; TYPE_2 . METHOD_3 ( <unk> . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }
Trg : public void METHOD_1 ( ) { <unk> ( null ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( ) ) ; TYPE_2 . METHOD_3 ( <unk> . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }
Pred: public void METHOD_1 ( ) { }
Example #22
Src : protected TYPE_1 < TYPE_2 > <unk> ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }
Trg : protected TYPE_1 < TYPE_2 > <unk> ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }
Pred: protected TYPE_1 < TYPE_2 > execute ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }
Example #23
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . <unk> { METHOD_2 ( VAR_1 , null ) ; }
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . <unk> { METHOD_2 ( VAR_1 ) ; }
Pred: public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 { METHOD_2 ( VAR_1 , null ) ; }
Example #24
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }
Example #25
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }
Pred: public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }
Example #26
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . <unk> ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . <unk> ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . assertTrue ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }
Example #27
Src : private java.util.List < <unk> > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }
Trg : private java.util.List < <unk> > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }
Pred: private java.util.List < java.lang.Void > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }
Example #28
Src : public void METHOD_1 ( ) { <unk> ( VAR_1 . get ( TYPE_1 . <unk> ( VAR_2 . <unk> class ) ) ) . <unk> ( null ) ; TYPE_2 . METHOD_2 ( <unk> , VAR_3 ) ; }
Trg : public void METHOD_1 ( ) { <unk> ( VAR_1 . get ( TYPE_1 . <unk> ( ) ) ) . <unk> ( null ) ; TYPE_2 . METHOD_2 ( <unk> , VAR_3 ) ; }
Pred: public void METHOD_1 ( ) { }
Example #29
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }
Example #30
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 <unk> = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( <unk> . METHOD_3 ( ) ) ; }
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 <unk> = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( <unk> . METHOD_3 ( ) ) ; }
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( ) ; }
---------------
Class: Remove redundant initialization
Golden example (False):
Example #1
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }
Pred: public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }
Pred: public void METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; }
---------------
Class: Remove statement
Golden example (True):
Example #1
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }
Trg : public void METHOD_1 ( ) { }
Pred: public void METHOD_1 ( ) { }
+++++++++++++++
Example #1
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }
Pred: private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }
Example #2
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } <unk> ( TYPE_1 , msg ) ; }
Trg : public void info ( java.lang.String msg ) { <unk> ( TYPE_1 , msg ) ; }
Pred: public void info ( java.lang.String msg ) { }
Example #3
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }
Pred: public static long METHOD_1 ( long arg ) { return arg ; }
Example #4
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( <unk> . get ( ) , 0 ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( <unk> . get ( ) , 0 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; }
Example #5
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; <unk> ( VAR_1 ) . <unk> ( VAR_2 ) . METHOD_6 ( ) ; }
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }
Example #6
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( <unk> , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( <unk> , <unk> ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( <unk> , <unk> ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }
Pred: public void METHOD_1 ( ) { }
Example #7
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }
Pred: public void METHOD_1 ( ) { }
Example #8
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; }
Example #9
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }
Pred: public static int METHOD_1 ( int x , int y ) { return VAR_2 ; }
Example #10
Src : private void METHOD_1 ( ) { <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( ) ) ; <unk> ( VAR_1 . METHOD_3 ( ) ) . <unk> ( VAR_2 ) ; }
Trg : private void METHOD_1 ( ) { <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( ) ) ; }
Pred: private void METHOD_1 ( ) { }
Example #11
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }
Pred: public static long METHOD_1 ( long arg ) { return VAR_1 ; }
Example #12
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; <unk> VAR_2 = <unk> . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; <unk> VAR_2 = <unk> . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { }
Example #13
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; }
Example #14
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( <unk> ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( <unk> . get ( ) , 1 ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( <unk> ( 1 ) ) ) ; METHOD_7 ( <unk> . get ( ) , 1 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { }
Example #15
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }
Pred: public void METHOD_1 ( ) { }
Example #16
Src : protected TYPE_1 METHOD_1 ( TYPE_1 <unk> , <unk> <unk> ) { VAR_1 . METHOD_2 ( <unk> , <unk> ) ; VAR_1 . METHOD_3 ( <unk> ) ; return <unk> ; }
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 <unk> , <unk> <unk> ) { VAR_1 . METHOD_2 ( <unk> , <unk> ) ; return <unk> ; }
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 query , java.lang.Throwable t ) { VAR_1 . METHOD_3 ( params ) ; return query ; }
Example #17
Src : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( <unk> . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }
Trg : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( true ) ; TYPE_1 . METHOD_4 ( <unk> . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }
Pred: public void METHOD_1 ( ) { METHOD_3 ( VAR_2 ) ; }
Example #18
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }
Pred: public void METHOD_1 ( ) { }
Example #19
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; }
Example #20
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }
Pred: public static int METHOD_1 ( int x , int y ) { return VAR_2 ; }
Example #21
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; <unk> . METHOD_7 ( new TYPE_1 ( ) ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; <unk> . METHOD_7 ( new TYPE_1 ( ) ) ; }
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; }
Example #22
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { }
Example #23
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
Pred: void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_3 ( ) ; }
Example #24
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; <unk> VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = <unk> . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }
Trg : public void METHOD_1 ( ) { <unk> VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = <unk> . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }
Pred: public void METHOD_1 ( ) { }
Example #25
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }
Example #26
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( ) ; }
Example #27
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }
Pred: public static void METHOD_1 ( ) { }
Example #28
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( <unk> . get ( ) , INT_1 ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( <unk> . get ( ) , INT_1 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; }
Example #29
Src : public void METHOD_1 ( ) { if ( ( <unk> ( ) ) != null ) { super . METHOD_1 ( ) ; } else { <unk> ( null ) ; } }
Trg : public void METHOD_1 ( ) { if ( ( <unk> ( ) ) != null ) { super . METHOD_1 ( ) ; } }
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; }
Example #30
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; <unk> . METHOD_3 ( ) ; }
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { <unk> . METHOD_3 ( ) ; }
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { }
Example #31
Src : public static int METHOD_1 ( int <unk> , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - <unk> ) - VAR_1 ; }
Trg : public static int METHOD_1 ( int <unk> , int VAR_1 ) { return ( - <unk> ) - VAR_1 ; }
Pred: public static int METHOD_1 ( int i , int VAR_1 ) { return VAR_1 ; }
Example #32
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; <unk> . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = <unk> . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; <unk> . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = <unk> . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; }
Example #33
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; }
Example #34
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . <unk> ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( <unk> . <unk> ( ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . <unk> ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( <unk> . <unk> ( ) ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { parameters . delete ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; }
Example #35
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; <unk> . METHOD_4 ( ) ; }
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; <unk> . METHOD_4 ( ) ; }
Pred: public void METHOD_1 ( ) { METHOD_3 ( null ) ; }
Example #36
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }
Pred: private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
Example #37
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( <unk> . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( <unk> . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }
Pred: public static int METHOD_1 ( int i ) { return VAR_1 ; }
Example #38
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }
Pred: public static byte METHOD_1 ( short value ) { return new TYPE_1 ( ) ; }
Example #39
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( <unk> ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( <unk> ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; }
Example #40
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }
Pred: public void METHOD_1 ( ) { }
Example #41
Src : public void METHOD_1 ( ) throws java.lang.Exception { <unk> <unk> = new <unk> ( ) ; <unk> ( VAR_1 . METHOD_2 ( <unk> , VAR_2 ) ) . <unk> ( true ) ; TYPE_1 . METHOD_3 ( <unk> . METHOD_4 ( <unk> ) , VAR_3 ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { <unk> ( VAR_1 . METHOD_2 ( <unk> , VAR_2 ) ) . <unk> ( true ) ; TYPE_1 . METHOD_3 ( <unk> . METHOD_4 ( <unk> ) , VAR_3 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { }
Example #42
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }
Pred: public static long METHOD_1 ( long arg ) { return VAR_1 ; }
Example #43
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; }
Example #44
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( <unk> . get ( ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( <unk> . get ( ) ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; }
Example #45
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }
Example #46
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( <unk> , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , <unk> ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , <unk> ) ; }
Pred: public void METHOD_1 ( ) { }
Example #47
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }
Example #48
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }
Example #49
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }
Pred: public static float METHOD_1 ( ) { return new TYPE_1 ( ) ; }
Example #50
Src : public static long METHOD_1 ( long <unk> , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( <unk> + VAR_3 ) | ( <unk> + VAR_3 ) ; }
Trg : public static long METHOD_1 ( long <unk> , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( <unk> + VAR_3 ) | ( <unk> + VAR_3 ) ; }
Pred: public static long METHOD_1 ( long params , long VAR_1 ) { return VAR_3 ; }
Example #51
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( <unk> . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( <unk> . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }
Pred: public static int METHOD_1 ( int i ) { return VAR_1 ; }
Example #52
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }
Pred: public void METHOD_1 ( final java.lang.String VAR_1 ) { }
Example #53
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; <unk> . METHOD_3 ( new TYPE_2 ( ) ) ; }
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { <unk> . METHOD_3 ( new TYPE_2 ( ) ) ; }
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) { }
Example #54
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; }
Example #55
Src : protected void METHOD_1 ( <unk> VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }
Trg : protected void METHOD_1 ( <unk> VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }
Pred: protected void METHOD_1 ( java.lang.Void VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; }
Example #56
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . <unk> ( ) . equals ( VAR_2 ) ) ; }
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . <unk> ( ) . equals ( VAR_2 ) ) ; }
Pred: public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return true ; }
---------------
Class: Rename method
Golden example (False):
Example #1
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 <unk> = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( <unk> ) ) ; METHOD_2 ( ) ; }
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 <unk> = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( <unk> ) ) ; METHOD_2 ( ) ; }
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object arg ) { TYPE_1 . assertTrue ( ( ( TYPE_1 ) ( target ) ) ) ; }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( java.lang.Object <unk> , java.lang.Object result ) { java.util.List < <unk> > VAR_1 = ( ( java.util.List < <unk> > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . <unk> ( VAR_1 ) ; }
Trg : public void <unk> ( java.lang.Object <unk> , java.lang.Object result ) { java.util.List < <unk> > VAR_1 = ( ( java.util.List < <unk> > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . <unk> ( VAR_1 ) ; }
Pred: public void METHOD_1 ( java.lang.Object arg , java.lang.Object result ) { java.util.List < java.lang.Void > VAR_1 = ( ( java.util.List < > > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; }
Example #2
Src : public void METHOD_1 ( java.lang.Object <unk> , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }
Trg : public void <unk> ( java.lang.Object <unk> , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }
Pred: public void METHOD_1 ( java.lang.Object arg , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }
Example #3
Src : public void METHOD_1 ( java.lang.Object <unk> , java.lang.Object <unk> ) { java.util.List < <unk> > VAR_1 = ( ( java.util.List < <unk> > ) ( ( ( TYPE_1 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ; VAR_2 = VAR_1 ; }
Trg : public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { java.util.List < <unk> > VAR_1 = ( ( java.util.List < <unk> > ) ( ( ( TYPE_1 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ; VAR_2 = VAR_1 ; }
Pred: public void METHOD_1 ( java.lang.Object arg , java.lang.Object arg ) { java.util.List < java.lang.Void > VAR_1 = ( ( java.util.List < java.lang.Void > ) ( ( ( TYPE_1 . getTime ( ) ) > arg ) ) ) ; VAR_2 = VAR_1 ; }
Example #4
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 . METHOD_2 ( target ) ; }
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 . METHOD_2 ( target ) ; }
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object arg ) { TYPE_1 . METHOD_2 ( target ) ; }
Example #5
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( <unk> ) ) ) ; VAR_1 . METHOD_3 ( ) ; }
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( <unk> ) ) ) ; VAR_1 . METHOD_3 ( ) ; }
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object arg ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( t ) ) ) ; }
Example #6
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( <unk> ) ) ) ; }
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( <unk> ) ) ) ; }
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object arg ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( arg ) ) ) ; }
Example #7
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }
Example #8
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < <unk> > <unk> = ( ( java.util.ArrayList < <unk> > ) ( <unk> ) ) ; VAR_1 . METHOD_2 ( <unk> ) ; }
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < <unk> > <unk> = ( ( java.util.ArrayList < <unk> > ) ( <unk> ) ) ; VAR_1 . METHOD_2 ( <unk> ) ; }
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object arg ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; }
Example #9
Src : boolean METHOD_1 ( ) ;
Trg : boolean <unk> ( ) ;
Pred: boolean METHOD_1 ( ) { return false ; }
Example #10
Src : public void METHOD_1 ( ) { <unk> . <unk> result = <unk> . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }
Trg : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }
Pred: public void METHOD_1 ( ) { }
Example #11
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( TYPE_1 ) ( <unk> ) ) ; METHOD_2 ( ) ; }
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( TYPE_1 ) ( <unk> ) ) ; METHOD_2 ( ) ; }
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object arg ) { VAR_1 = ( ( TYPE_1 ) ( arg ) ) ; METHOD_2 ( ) ; }
Example #12
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; <unk> VAR_2 = ( ( <unk> ) ( <unk> ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; <unk> VAR_2 = ( ( <unk> ) ( <unk> ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object arg ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; }
---------------
Class: Rename parameter
Golden example (False):
Example #1
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , <unk> ;
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , <unk> ;
Pred: public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 ;
+++++++++++++++
Example #1
Src : public native boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , <unk> ;
Trg : public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , <unk> ;
Pred: public native boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 ;
Example #2
Src : public void METHOD_1 ( <unk> type ) { }
Trg : public void METHOD_1 ( <unk> method ) { }
Pred: public void METHOD_1 ( java.lang.String type ) { this . type = type ; }
Example #3
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;
Pred: TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;
Example #4
Src : public int METHOD_1 ( int VAR_1 , <unk> . <unk> <unk> ) ;
Trg : public int METHOD_1 ( int VAR_1 , <unk> . <unk> <unk> ) ;
Pred: public int METHOD_1 ( int VAR_1 , java.lang.Throwable t ) ;
---------------
Class: Rename variable
Golden example (True):
Example #1
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }
+++++++++++++++
Example #1
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }
Trg : private native java.lang.String METHOD_1 ( ) ;
Pred: public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
Example #1
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; <unk> . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; <unk> ( VAR_5 ) . METHOD_4 ( <unk> ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; <unk> ( VAR_5 ) . METHOD_4 ( <unk> ( VAR_1 ) ) ; <unk> ( VAR_2 , true ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; }
Example #2
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }
Trg : public void METHOD_1 ( ) { <unk> ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }
Pred: public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }
Example #3
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; <unk> ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }
Pred: public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - 1 ) ) ; }
Example #4
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 <unk> ) { VAR_2 . <unk> ( STRING_1 ) ; } }
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 <unk> ) { java.lang.System.out.println ( STRING_1 ) ; } }
Pred: public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 t ) { VAR_2 . error ( STRING_1 ) ; } }
Example #5
Src : private void METHOD_1 ( TYPE_1 <unk> ) throws java.lang.Exception { TYPE_2 <unk> = new TYPE_2 ( ) ; <unk> . METHOD_2 ( <unk> , <unk> ) ; assertEquals ( VAR_1 , <unk> . <unk> ( ) ) ; }
Trg : private void METHOD_1 ( TYPE_1 <unk> ) throws java.lang.Exception { TYPE_2 <unk> = new TYPE_2 ( ) ; <unk> . METHOD_2 ( <unk> , <unk> ) ; <unk> ( VAR_1 , <unk> . <unk> ( ) ) ; }
Pred: private void METHOD_1 ( TYPE_1 query ) throws java.lang.Exception { TYPE_2 . delete ( ) ; }
Example #6
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; <unk> ( ( STRING_1 + length ) , 0 , length ) ; }
Pred: private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
Example #1
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) ) ; }
+++++++++++++++
Example #1
Src : protected TYPE_1 METHOD_1 ( ) { return <unk> ( new TYPE_2 < <unk> > ( VAR_1 , VAR_2 . <unk> class ) , false ) ; }
Trg : protected TYPE_1 METHOD_1 ( ) { return <unk> ( new TYPE_2 ( VAR_1 , VAR_2 . <unk> class ) , false ) ; }
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( new TYPE_2 < java.lang.Void > ( VAR_1 , VAR_2 . format class ) ) ; }
Example #2
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new <unk> ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new <unk> ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , VAR_3 ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }
Example #3
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < <unk> > ( VAR_3 , VAR_4 . <unk> class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . <unk> class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < java.lang.Void > ( VAR_3 , VAR_4 . class ) ; return METHOD_2 ( VAR_1 , VAR_2 ) ; }
Example #4
Src : public TYPE_1 < java.lang.String > METHOD_1 ( <unk> id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( <unk> id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) ) ) ; }
Example #5
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . <unk> ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . <unk> ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }
Example #6
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , <unk> . <unk> <unk> , TYPE_1 <unk> ) { return new TYPE_2 < TYPE_1 > ( value , <unk> . toString ( ) , <unk> ) ; }
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , <unk> . <unk> <unk> , TYPE_1 <unk> ) { return new TYPE_2 ( value , <unk> . toString ( ) , <unk> ) ; }
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , java.util.Map < java.lang.Void , TYPE_1 > ) { return new TYPE_2 < TYPE_1 > ( value , null ) ; }
Example #7
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . <unk> ( VAR_1 ) ; value . <unk> ( STRING_1 ) ; return value ; }
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . <unk> ( VAR_1 ) ; value . <unk> ( STRING_1 ) ; return value ; }
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . execute ( ) ; return value ; }
---------------
Class: Replace invoked method
Golden example (False):
Example #1
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . get ( STRING_1 ) ; <unk> ( VAR_2 , <unk> . METHOD_2 ( ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . get ( STRING_1 ) ; <unk> ( <unk> . METHOD_2 ( ) ) . <unk> ( VAR_2 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . set ( VAR_1 . get ( STRING_1 ) ) ; }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . METHOD_2 ( STRING_1 ) ; <unk> ( VAR_2 , <unk> . METHOD_3 ( ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . METHOD_2 ( STRING_1 ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( VAR_2 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { }
Example #2
Src : public void METHOD_1 ( ) throws java.lang.Exception { <unk> ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { <unk> ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . <unk> ( VAR_1 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { }
Example #3
Src : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }
Trg : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }
Pred: public void METHOD_1 ( ) { }
Example #4
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 <unk> = VAR_2 . put ( STRING_2 , <unk> ) ; <unk> ( VAR_3 , <unk> . METHOD_2 ( ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 <unk> = VAR_2 . put ( STRING_2 , <unk> ) ; <unk> ( <unk> . METHOD_2 ( ) ) . <unk> ( VAR_3 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { }
Example #5
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( <unk> ) ) ) ; }
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( <unk> ) ) ) ; }
Pred: final byte METHOD_1 ( int offset ) { return ( ( VAR_1 ) + ( ( java.lang.Math.random ( ) ) + 1 ) ) + ( ( this . length ) + 1 ) ; }
Example #6
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 <unk> = METHOD_3 ( STRING_1 ) ; <unk> ( STRING_2 , <unk> . METHOD_4 ( ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 <unk> = METHOD_3 ( STRING_1 ) ; <unk> ( <unk> . METHOD_4 ( ) ) . <unk> ( STRING_2 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; }
Example #7
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }
Pred: public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > ) ; }
Example #8
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . delete ( METHOD_2 ( ) ) ; <unk> ( VAR_2 , <unk> . METHOD_3 ( ) ) ; }
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . delete ( METHOD_2 ( ) ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( VAR_2 ) ; }
Pred: public void METHOD_1 ( ) throws java.lang.Exception { }
Example #9
Src : public void METHOD_1 ( ) { <unk> ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }
Trg : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . <unk> ( STRING_1 ) ; }
Pred: public void METHOD_1 ( ) { }
Example #10
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , <unk> . <unk> VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , <unk> . <unk> VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , java.lang.Throwable t ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }
Example #11
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . <unk> ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . <unk> ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }
Pred: protected void METHOD_1 ( ) { VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }
Example #12
Src : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }
Trg : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }
Pred: public void METHOD_1 ( ) { }
Example #13
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }
Trg : public void METHOD_1 ( <unk> item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }
Pred: public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { }
Example #14
Src : public TYPE_1 . <unk> METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( <unk> . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . <unk> ( VAR_3 ) ; } return VAR_4 ; }
Trg : public TYPE_1 . <unk> METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( <unk> . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . <unk> ( VAR_3 ) ; } return VAR_4 ; }
Pred: public TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) ; }
Example #15
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }
Pred: public void METHOD_1 ( TYPE_1 value ) { if ( value != null ) { this . VAR_1 . METHOD_2 ( value ) ; } }
Example #16
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 ; }
Example #17
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }
Pred: public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; } else { return null ; } }
Example #18
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < <unk> > <unk> = ( ( TYPE_2 < <unk> > ) ( <unk> ) ) ; VAR_1 . METHOD_2 ( <unk> ) ; }
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < <unk> > <unk> = ( ( TYPE_2 < <unk> > ) ( <unk> ) ) ; VAR_1 . METHOD_2 ( <unk> ) ; }
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object arg ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; }
Example #19
Src : public void METHOD_1 ( ) { java.util.List < <unk> > result = <unk> . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }
Trg : public void METHOD_1 ( ) { java.util.List < <unk> > result = <unk> . METHOD_2 ( VAR_1 . <unk> ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }
Pred: public void METHOD_1 ( ) { java.util.List < java.lang.Void > result = METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }
Example #20
Src : protected void METHOD_1 ( ) { if ( ( <unk> ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new <unk> ( METHOD_2 ( ) . getId ( ) ) ) ; }
Trg : protected void METHOD_1 ( ) { if ( ( <unk> ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new <unk> ( <unk> ( ) . getId ( ) ) ) ; }
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; }
Example #21
Src : private TYPE_1 METHOD_1 ( TYPE_2 <unk> ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( <unk> ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , <unk> ) ; }
Trg : private TYPE_1 METHOD_1 ( TYPE_2 <unk> ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( <unk> ( ) . <unk> ( ) ) ; return METHOD_5 ( VAR_2 , params , <unk> ) ; }
Pred: private TYPE_1 METHOD_1 ( TYPE_2 t ) { return METHOD_5 ( VAR_2 , params ) ; }
Example #22
Src : public int METHOD_1 ( <unk> VAR_1 , <unk> VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }
Trg : public int METHOD_1 ( <unk> VAR_1 , <unk> VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }
Pred: public int METHOD_1 ( java.lang.Throwable VAR_1 , java.lang.Throwable VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }
Example #23
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }
Pred: protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }
Example #24
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . <unk> VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . <unk> VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }
Pred: protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }
Example #25
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; <unk> ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . <unk> ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; <unk> ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . <unk> ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; }
Example #26
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }
Pred: public java.lang.String METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { return null ; } return VAR_1 . METHOD_2 ( ) ; }
Example #27
Src : protected java.lang.String METHOD_1 ( <unk> <unk> ) { return <unk> . METHOD_2 ( ) ; }
Trg : protected java.lang.String METHOD_1 ( <unk> <unk> ) { return <unk> . getName ( ) ; }
Pred: protected java.lang.String METHOD_1 ( java.lang.Throwable t ) { return t . METHOD_2 ( ) ; }
Example #28
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }
Pred: public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }
Example #29
Src : public void METHOD_1 ( java.lang.String <unk> ) { METHOD_2 ( ) . METHOD_3 ( <unk> ) ; }
Trg : public void METHOD_1 ( java.lang.String <unk> ) { METHOD_2 ( ) . METHOD_1 ( <unk> ) ; }
Pred: public void METHOD_1 ( java.lang.String message ) { if ( ( METHOD_2 ( ) ) != null ) { METHOD_2 ( ) . METHOD_3 ( t ) ; } }
Example #30
Src : public boolean METHOD_1 ( <unk> VAR_1 ) { return <unk> . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }
Trg : public boolean METHOD_1 ( <unk> VAR_1 ) { return <unk> . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }
Pred: public boolean METHOD_1 ( java.lang.Void VAR_1 ) { return ( ( VAR_1 . METHOD_2 ( ) ) != null ) && ( obj . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ; }
Example #31
Src : public void METHOD_1 ( ) { <unk> . METHOD_2 ( VAR_1 ) ; <unk> result = <unk> . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }
Trg : public void METHOD_1 ( ) { <unk> . METHOD_2 ( VAR_1 ) ; <unk> result = <unk> . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }
Pred: public void METHOD_1 ( ) { }
---------------
Class: Replace statement
Golden example (True):
Example #1
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }
Pred: public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . <unk> ( ) ) . METHOD_3 ( ) ; }
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; }
Example #2
Src : public static long METHOD_1 ( ) { long VAR_1 = <unk> . METHOD_2 ( INT_1 ) ; int VAR_2 = <unk> . METHOD_3 ( <unk> ) ; return VAR_1 & VAR_2 ; }
Trg : public static long METHOD_1 ( ) { long VAR_1 = <unk> ; int VAR_2 = <unk> ; return VAR_1 & VAR_2 ; }
Pred: public static long METHOD_1 ( ) { return VAR_1 . METHOD_2 ( INT_1 ) ; }
Example #3
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }
Pred: public boolean METHOD_1 ( ) { return ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ; }
---------------
Class: unclear
Golden example (False):
Example #1
Src : public void METHOD_1 ( ) { <unk> = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( <unk> . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( <unk> . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }
+++++++++++++++
Example #1
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }
Trg : protected native byte METHOD_1 ( ) throws java.io.IOException ;
Pred: protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }
Example #2
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . <unk> ) ; }
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . <unk> ) ; }
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . args ) ; }
Example #3
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; return null ; }
---------------
================
Start conducting one shot learning experiment for Defects4J...
Accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
Example #1
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }
Pred: public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { return 0 ; }
+++++++++++++++
Example #1
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }
Pred: public void ( int VAR_2 , int VAR_3 ) { this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
Example #1
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }
Pred: void add ( java.lang.CharSequence VAR_1 ) { METHOD_1 ( ) ; }
+++++++++++++++
Example #1
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }
---------------
Class: ['condBlockRetAdd']
Golden example (False):
Example #1
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { return METHOD_2 ( VAR_2 ) ; }
+++++++++++++++
Example #1
Src : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }
Trg : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . answer ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }
Pred: public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }
Example #2
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 ) ; }
Example #3
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { }
Example #4
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }
Pred: boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } else if ( VAR_3 ) { return false ; } }
---------------
Class: ['notClassified']
Golden example (False):
Example #1
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . getClass ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }
Pred: public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( ) ; }
+++++++++++++++
Example #1
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }
Pred: public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int sum = 0 ; for ( int i = 0 ; i < VAR_1 ; i VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; return TYPE_1 . METHOD_2 ( sum ) ; }
---------------
Class: ['singleLine']
Golden example (False):
Example #1
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }
Pred: static float METHOD_1 ( java.lang.CharSequence VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }
+++++++++++++++
Example #1
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }
Pred: public void METHOD_1 ( TYPE_1 data ) { VAR_1 . start ( ) ; }
Example #2
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }
Pred: public double METHOD_1 ( final double VAR_1 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { return VAR_5 ; }
---------------
Class: ['wrapsIf']
Golden example (False):
Example #1
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }
Pred: public void METHOD_1 ( ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }
+++++++++++++++
Example #1
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } return VAR_1 . equals ( VAR_2 ) ; }
---------------
Class: ['wrapsIfElse']
Golden example (False):
Example #1
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { }
+++++++++++++++
Example #1
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { return VAR_1 ; }
Example #2
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }
Pred: public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }
---------------
================

Process finished with exit code 0