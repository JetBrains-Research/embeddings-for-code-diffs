
====STARTING TRAINING====
{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 25,
 'EDIT_REPRESENTATION_SIZE': 16,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LEAVE_ONLY_CHANGED': True,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_25/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEACHER_FORCING_RATIO': 0.9,
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'TUFANO_LABELED_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/50_100',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_COPYING_MECHANISM': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: –∑–∞–º–µ–Ω–∞
diff_prev: org.junit.Assert.assertEquals
diff_updated: assertEquals 

Most common words:
         )     194026
         (     193976
         .      92332
         ;      82530
   –ø–∞–¥–¥–∏–Ω–≥      54790
         ,      54180
         {      42036
         }      41868
     VAR_1      41750
  —É–¥–∞–ª–µ–Ω–∏–µ      41184 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 )
05 (
06 .
07 ;
08 –ø–∞–¥–¥–∏–Ω–≥
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 35
—É–¥–∞–ª–µ–Ω–∏–µ 41184 13
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 23
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 54790 8
Number of words (types): 758
Epoch 0 / 1000
Epoch Step: 5 / 138 Loss: 216.38101196289062 Tokens per Sec: 10446.748400907441
Epoch Step: 10 / 138 Loss: 267.2052307128906 Tokens per Sec: 12808.027903549242
Epoch Step: 15 / 138 Loss: 337.49432373046875 Tokens per Sec: 13168.729600155662
Epoch Step: 20 / 138 Loss: 250.2272491455078 Tokens per Sec: 12707.05169235858
Epoch Step: 25 / 138 Loss: 214.90777587890625 Tokens per Sec: 12571.474593324367
Epoch Step: 30 / 138 Loss: 226.2093505859375 Tokens per Sec: 13160.372205869831
Epoch Step: 35 / 138 Loss: 196.55023193359375 Tokens per Sec: 12894.475507405476
Epoch Step: 40 / 138 Loss: 240.62603759765625 Tokens per Sec: 13774.804460261363
Epoch Step: 45 / 138 Loss: 296.1644287109375 Tokens per Sec: 13240.977950894017
Epoch Step: 50 / 138 Loss: 194.11026000976562 Tokens per Sec: 13610.049547133114
Epoch Step: 55 / 138 Loss: 274.1614074707031 Tokens per Sec: 13592.340005490838
Epoch Step: 60 / 138 Loss: 185.4157257080078 Tokens per Sec: 13139.246429749564
Epoch Step: 65 / 138 Loss: 280.27520751953125 Tokens per Sec: 13817.958959904092
Epoch Step: 70 / 138 Loss: 212.2186737060547 Tokens per Sec: 13204.911328399921
Epoch Step: 75 / 138 Loss: 196.8460235595703 Tokens per Sec: 13457.815199959156
Epoch Step: 80 / 138 Loss: 175.3417205810547 Tokens per Sec: 13528.078460749783
Epoch Step: 85 / 138 Loss: 267.6544494628906 Tokens per Sec: 13457.411769085209
Epoch Step: 90 / 138 Loss: 218.45582580566406 Tokens per Sec: 12975.706223865553
Epoch Step: 95 / 138 Loss: 202.85964965820312 Tokens per Sec: 13226.754846276519
Epoch Step: 100 / 138 Loss: 213.64964294433594 Tokens per Sec: 13116.35644418199
Epoch Step: 105 / 138 Loss: 196.13990783691406 Tokens per Sec: 13287.044964646118
Epoch Step: 110 / 138 Loss: 224.2670135498047 Tokens per Sec: 12854.99593227818
Epoch Step: 115 / 138 Loss: 259.76287841796875 Tokens per Sec: 12755.81397257481
Epoch Step: 120 / 138 Loss: 288.05523681640625 Tokens per Sec: 12388.679461369366
Epoch Step: 125 / 138 Loss: 270.1688537597656 Tokens per Sec: 13251.6714172379
Epoch Step: 130 / 138 Loss: 181.47267150878906 Tokens per Sec: 12834.719026281306
Epoch Step: 135 / 138 Loss: 164.94210815429688 Tokens per Sec: 12736.220759606958
Epoch ended with duration 0:00:48.978095
Train perplexity: 24.027640083302984
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ] , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 , , , , , , , , , , , , , , , , , , , , , , ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )[0m
Epoch ended with duration 0:00:03.870313
Validation perplexity: 16.777292167108843
Model saved best_on_validation!
Model saved checkpoint!
Epoch 1 / 1000
Epoch Step: 5 / 138 Loss: 162.13955688476562 Tokens per Sec: 13401.065779754184
Epoch Step: 10 / 138 Loss: 194.86361694335938 Tokens per Sec: 13993.421135672863
Epoch Step: 15 / 138 Loss: 209.0928192138672 Tokens per Sec: 12772.941233569354
Epoch Step: 20 / 138 Loss: 219.72976684570312 Tokens per Sec: 13184.444399814105
Epoch Step: 25 / 138 Loss: 195.36639404296875 Tokens per Sec: 13214.181184469724
Epoch Step: 30 / 138 Loss: 247.5592803955078 Tokens per Sec: 13651.322565043156
Epoch Step: 35 / 138 Loss: 138.23793029785156 Tokens per Sec: 12825.802707994491
Epoch Step: 40 / 138 Loss: 132.42726135253906 Tokens per Sec: 13898.081432815858
Epoch Step: 45 / 138 Loss: 206.53611755371094 Tokens per Sec: 13563.796244172609
Epoch Step: 50 / 138 Loss: 151.57508850097656 Tokens per Sec: 13044.106728298219
Epoch Step: 55 / 138 Loss: 167.2943878173828 Tokens per Sec: 13119.696861914577
Epoch Step: 60 / 138 Loss: 163.08566284179688 Tokens per Sec: 13566.92310438296
Epoch Step: 65 / 138 Loss: 165.5845489501953 Tokens per Sec: 13366.759674560504
Epoch Step: 70 / 138 Loss: 162.6084747314453 Tokens per Sec: 12784.748919875388
Epoch Step: 75 / 138 Loss: 161.8588409423828 Tokens per Sec: 12855.921688660572
Epoch Step: 80 / 138 Loss: 225.75436401367188 Tokens per Sec: 12831.404540031795
Epoch Step: 85 / 138 Loss: 213.9798583984375 Tokens per Sec: 12711.247356140237
Epoch Step: 90 / 138 Loss: 214.31509399414062 Tokens per Sec: 12956.910950786929
Epoch Step: 95 / 138 Loss: 190.69520568847656 Tokens per Sec: 13041.37369157504
Epoch Step: 100 / 138 Loss: 180.65602111816406 Tokens per Sec: 13145.87461575953
Epoch Step: 105 / 138 Loss: 174.58323669433594 Tokens per Sec: 12487.631181375746
Epoch Step: 110 / 138 Loss: 153.40013122558594 Tokens per Sec: 12783.802308174452
Epoch Step: 115 / 138 Loss: 253.02142333984375 Tokens per Sec: 12941.910182918225
Epoch Step: 120 / 138 Loss: 174.3863067626953 Tokens per Sec: 12644.985369510927
Epoch Step: 125 / 138 Loss: 197.81932067871094 Tokens per Sec: 13232.09877290518
Epoch Step: 130 / 138 Loss: 145.122802734375 Tokens per Sec: 12945.915159018503
Epoch Step: 135 / 138 Loss: 152.0789794921875 Tokens per Sec: 12911.639205906025
Epoch ended with duration 0:00:48.720088
Train perplexity: 12.036186405931339
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { [ ( ] ] , , , , , , , , ) { < ) { < ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { , , , , , , , , , , , , , , , , ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { ( ( ( ( ( ) ) ) ) ) ) ) ) ) ) ) ) ) ) ; } ) ; }[0m
Epoch ended with duration 0:00:03.973528
Validation perplexity: 9.791210585621393
Model saved best_on_validation!
Epoch 2 / 1000
Epoch Step: 5 / 138 Loss: 139.4429168701172 Tokens per Sec: 13394.41229190765
Epoch Step: 10 / 138 Loss: 186.19569396972656 Tokens per Sec: 13178.732615823526
Epoch Step: 15 / 138 Loss: 128.10665893554688 Tokens per Sec: 12862.822946624827
Epoch Step: 20 / 138 Loss: 157.66807556152344 Tokens per Sec: 13194.527837178604
Epoch Step: 25 / 138 Loss: 118.27287292480469 Tokens per Sec: 12884.411571759132
Epoch Step: 30 / 138 Loss: 104.68783569335938 Tokens per Sec: 12699.03743684971
Epoch Step: 35 / 138 Loss: 168.53683471679688 Tokens per Sec: 13347.258955691275
Epoch Step: 40 / 138 Loss: 203.87074279785156 Tokens per Sec: 13384.777399582794
Epoch Step: 45 / 138 Loss: 140.2528533935547 Tokens per Sec: 13450.562395935945
Epoch Step: 50 / 138 Loss: 128.12474060058594 Tokens per Sec: 13583.85319182126
Epoch Step: 55 / 138 Loss: 144.86341857910156 Tokens per Sec: 13765.220211349068
Epoch Step: 60 / 138 Loss: 129.81324768066406 Tokens per Sec: 13284.510712758058
Epoch Step: 65 / 138 Loss: 150.1988067626953 Tokens per Sec: 13915.602911831156
Epoch Step: 70 / 138 Loss: 174.8252716064453 Tokens per Sec: 13951.326560052285
Epoch Step: 75 / 138 Loss: 139.6300811767578 Tokens per Sec: 13051.455294992946
Epoch Step: 80 / 138 Loss: 119.89822387695312 Tokens per Sec: 13396.050765504111
Epoch Step: 85 / 138 Loss: 173.9639434814453 Tokens per Sec: 13872.654813219006
Epoch Step: 90 / 138 Loss: 151.0690155029297 Tokens per Sec: 14359.412508305477
Epoch Step: 95 / 138 Loss: 166.60430908203125 Tokens per Sec: 12795.905174195117
Epoch Step: 100 / 138 Loss: 106.91101837158203 Tokens per Sec: 13999.789977383138
Epoch Step: 105 / 138 Loss: 134.01197814941406 Tokens per Sec: 12832.88965883372
Epoch Step: 110 / 138 Loss: 200.8767547607422 Tokens per Sec: 12305.20687567585
Epoch Step: 115 / 138 Loss: 156.16400146484375 Tokens per Sec: 13308.203201487606
Epoch Step: 120 / 138 Loss: 144.5089111328125 Tokens per Sec: 13013.160645872947
Epoch Step: 125 / 138 Loss: 181.91952514648438 Tokens per Sec: 13221.039730582233
Epoch Step: 130 / 138 Loss: 177.353515625 Tokens per Sec: 13366.980441526683
Epoch Step: 135 / 138 Loss: 136.812744140625 Tokens per Sec: 13016.678648613484
Epoch ended with duration 0:00:47.897769
Train perplexity: 8.445443760711505
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( ) { [ ] VAR_1 , , , , , , TYPE_2 . METHOD_2 ( ) { java.lang.String ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( ) { , [ ] VAR_2 , , , , , , , boolean boolean ( ) ; if ( ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { ( ( ( ( VAR_1 ) ) ) ) ) ) ) ) ) ) ; ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Epoch ended with duration 0:00:03.804438
Validation perplexity: 7.459015360873544
Model saved best_on_validation!
Epoch 3 / 1000
Epoch Step: 5 / 138 Loss: 147.04859924316406 Tokens per Sec: 13904.885973853912
Epoch Step: 10 / 138 Loss: 124.14454650878906 Tokens per Sec: 13942.06050461842
Epoch Step: 15 / 138 Loss: 181.6654815673828 Tokens per Sec: 14445.302551229184
Epoch Step: 20 / 138 Loss: 139.11338806152344 Tokens per Sec: 13602.9778945445
Epoch Step: 25 / 138 Loss: 164.87753295898438 Tokens per Sec: 14047.434586960688
Epoch Step: 30 / 138 Loss: 128.20350646972656 Tokens per Sec: 13867.490081406519
Epoch Step: 35 / 138 Loss: 98.27656555175781 Tokens per Sec: 13744.448279678376
Epoch Step: 40 / 138 Loss: 159.46646118164062 Tokens per Sec: 13800.024413654068
Epoch Step: 45 / 138 Loss: 89.35740661621094 Tokens per Sec: 12984.220097545449
Epoch Step: 50 / 138 Loss: 176.73219299316406 Tokens per Sec: 13601.60608248075
Epoch Step: 55 / 138 Loss: 121.79896545410156 Tokens per Sec: 13520.282232648537
Epoch Step: 60 / 138 Loss: 176.9253692626953 Tokens per Sec: 13909.440484239673
Epoch Step: 65 / 138 Loss: 195.95724487304688 Tokens per Sec: 13845.455178884773
Epoch Step: 70 / 138 Loss: 195.990478515625 Tokens per Sec: 12776.9004494215
Epoch Step: 75 / 138 Loss: 119.61177062988281 Tokens per Sec: 12969.28959115841
Epoch Step: 80 / 138 Loss: 176.21046447753906 Tokens per Sec: 13722.940265323197
Epoch Step: 85 / 138 Loss: 228.27696228027344 Tokens per Sec: 13633.528966482585
Epoch Step: 90 / 138 Loss: 150.86724853515625 Tokens per Sec: 13578.345614938693
Epoch Step: 95 / 138 Loss: 191.79122924804688 Tokens per Sec: 13923.047233072482
Epoch Step: 100 / 138 Loss: 155.31736755371094 Tokens per Sec: 13273.739749968589
Epoch Step: 105 / 138 Loss: 147.00559997558594 Tokens per Sec: 13592.110778535809
Epoch Step: 110 / 138 Loss: 96.19694519042969 Tokens per Sec: 12840.723112400809
Epoch Step: 115 / 138 Loss: 122.9317626953125 Tokens per Sec: 13079.878007476196
Epoch Step: 120 / 138 Loss: 98.32839965820312 Tokens per Sec: 12644.665203667551
Epoch Step: 125 / 138 Loss: 160.9992218017578 Tokens per Sec: 13546.147469714553
Epoch Step: 130 / 138 Loss: 102.51495361328125 Tokens per Sec: 13000.68831507546
Epoch Step: 135 / 138 Loss: 109.35163879394531 Tokens per Sec: 13244.945319605353
Epoch ended with duration 0:00:47.321106
Train perplexity: 6.939609102221523
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] , , TYPE_2 VAR_2 ) { java.util.List < java.lang.String ) ; VAR_3 ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( VAR_1 VAR_1 , TYPE_2 [ ] , , , , , , , , boolean boolean boolean ( ) ; TYPE_5 . METHOD_2 ( ) ; if ( ) ; } ) ; } ) ; } ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { ( ) ; VAR_2 ) ; ) ; if ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Epoch ended with duration 0:00:03.861692
Validation perplexity: 7.162957385614476
Model saved best_on_validation!
Epoch 4 / 1000
Epoch Step: 5 / 138 Loss: 126.62875366210938 Tokens per Sec: 12910.997426815291
Epoch Step: 10 / 138 Loss: 95.50320434570312 Tokens per Sec: 14053.665076254545
Epoch Step: 15 / 138 Loss: 149.78765869140625 Tokens per Sec: 12792.00211778284
Epoch Step: 20 / 138 Loss: 152.97109985351562 Tokens per Sec: 13348.523221079451
Epoch Step: 25 / 138 Loss: 98.78324890136719 Tokens per Sec: 14046.980825621007
Epoch Step: 30 / 138 Loss: 87.30667114257812 Tokens per Sec: 14085.85757650837
Epoch Step: 35 / 138 Loss: 114.77690124511719 Tokens per Sec: 13807.745269628324
Epoch Step: 40 / 138 Loss: 153.55657958984375 Tokens per Sec: 13809.140901530953
Epoch Step: 45 / 138 Loss: 117.23731994628906 Tokens per Sec: 12919.823690048659
Epoch Step: 50 / 138 Loss: 119.87577819824219 Tokens per Sec: 14662.73274077901
Epoch Step: 55 / 138 Loss: 136.31040954589844 Tokens per Sec: 13900.219239532631
Epoch Step: 60 / 138 Loss: 163.82077026367188 Tokens per Sec: 13847.03005801188
Epoch Step: 65 / 138 Loss: 104.0374984741211 Tokens per Sec: 13196.8571589896
Epoch Step: 70 / 138 Loss: 167.80841064453125 Tokens per Sec: 12665.555808468132
Epoch Step: 75 / 138 Loss: 165.43882751464844 Tokens per Sec: 13956.233439039761
Epoch Step: 80 / 138 Loss: 167.05404663085938 Tokens per Sec: 13541.35502453437
Epoch Step: 85 / 138 Loss: 123.95471954345703 Tokens per Sec: 13405.391109536691
Epoch Step: 90 / 138 Loss: 161.28811645507812 Tokens per Sec: 13484.415976528095
Epoch Step: 95 / 138 Loss: 154.2622833251953 Tokens per Sec: 13610.424049408577
Epoch Step: 100 / 138 Loss: 212.35736083984375 Tokens per Sec: 13358.61149645895
Epoch Step: 105 / 138 Loss: 120.91606903076172 Tokens per Sec: 13437.338743983732
Epoch Step: 110 / 138 Loss: 152.6614227294922 Tokens per Sec: 12703.4066563526
Epoch Step: 115 / 138 Loss: 237.35914611816406 Tokens per Sec: 12882.206510098416
Epoch Step: 120 / 138 Loss: 164.01171875 Tokens per Sec: 13179.536458031966
Epoch Step: 125 / 138 Loss: 173.0518341064453 Tokens per Sec: 12054.329645063946
Epoch Step: 130 / 138 Loss: 217.11135864257812 Tokens per Sec: 12566.118944484639
Epoch Step: 135 / 138 Loss: 120.97457885742188 Tokens per Sec: 13516.01885678745
Epoch ended with duration 0:00:47.639680
Train perplexity: 6.390251888732522
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > ( = new TYPE_1 . METHOD_2 ( ) ; java.util.List < TYPE_1 . < TYPE_1 . > ( ) ; } ( ) ; } ) ; } ) ; } ) ; } ) ; } ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , , , , , , , boolean boolean boolean boolean VAR_6 TYPE_5 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( ) ; if ( ) ; rule ( ) ; } , , , , , , , , , , , , , , , ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ; != null ) ; for ( ) ; : ( ) ; java.lang.String ) ; } ( ) ; + ( ) ; } + ( ) ; } ) ; }[0m
Epoch ended with duration 0:00:03.899913
Validation perplexity: 5.612162961874353
Model saved best_on_validation!
Epoch 5 / 1000
Epoch Step: 5 / 138 Loss: 172.79588317871094 Tokens per Sec: 12106.005545601429
Epoch Step: 10 / 138 Loss: 112.1905288696289 Tokens per Sec: 13481.413795519746
Epoch Step: 15 / 138 Loss: 126.68871307373047 Tokens per Sec: 14443.396595475288
Epoch Step: 20 / 138 Loss: 147.21365356445312 Tokens per Sec: 13710.338399565804
Epoch Step: 25 / 138 Loss: 160.22732543945312 Tokens per Sec: 14159.887906224469
Epoch Step: 30 / 138 Loss: 140.3957061767578 Tokens per Sec: 14106.36249797923
Epoch Step: 35 / 138 Loss: 146.20327758789062 Tokens per Sec: 13848.90372935315
Epoch Step: 40 / 138 Loss: 102.99087524414062 Tokens per Sec: 13791.30651445947
Epoch Step: 45 / 138 Loss: 146.24844360351562 Tokens per Sec: 13831.818732041624
Epoch Step: 50 / 138 Loss: 92.11371612548828 Tokens per Sec: 12277.566677779407
Epoch Step: 55 / 138 Loss: 159.5248260498047 Tokens per Sec: 13075.042597443638
Epoch Step: 60 / 138 Loss: 84.33688354492188 Tokens per Sec: 13582.958007461122
Epoch Step: 65 / 138 Loss: 135.78939819335938 Tokens per Sec: 12947.071349665834
Epoch Step: 70 / 138 Loss: 111.93754577636719 Tokens per Sec: 14084.105384833383
Epoch Step: 75 / 138 Loss: 106.68479919433594 Tokens per Sec: 13857.460441318064
Epoch Step: 80 / 138 Loss: 80.26549530029297 Tokens per Sec: 13812.59934364033
Epoch Step: 85 / 138 Loss: 110.43110656738281 Tokens per Sec: 13261.886841409854
Epoch Step: 90 / 138 Loss: 128.05763244628906 Tokens per Sec: 14212.027764172784
Epoch Step: 95 / 138 Loss: 112.7468490600586 Tokens per Sec: 13711.67085079382
Epoch Step: 100 / 138 Loss: 119.79048156738281 Tokens per Sec: 13714.981213539879
Epoch Step: 105 / 138 Loss: 168.66563415527344 Tokens per Sec: 12196.781165237584
Epoch Step: 110 / 138 Loss: 83.08357238769531 Tokens per Sec: 13303.50358565258
Epoch Step: 115 / 138 Loss: 84.50556945800781 Tokens per Sec: 13059.45530235058
Epoch Step: 120 / 138 Loss: 110.5618896484375 Tokens per Sec: 13206.069814161992
Epoch Step: 125 / 138 Loss: 88.24209594726562 Tokens per Sec: 13120.465853473039
Epoch Step: 130 / 138 Loss: 98.27853393554688 Tokens per Sec: 12900.239558131552
Epoch Step: 135 / 138 Loss: 92.48341369628906 Tokens per Sec: 13150.01742332215
Epoch ended with duration 0:00:47.530311
Train perplexity: 5.893962316655721
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long ] ] values , VAR_2 VAR_2 ) { java.util.List < java.lang.String VAR_3 VAR_3 = new TYPE_3 . METHOD_2 ( VAR_1 ) ; < TYPE_1 < TYPE_1 > ( ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; } ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , , , , , , , boolean boolean boolean boolean VAR_6 VAR_6 TYPE_5 . METHOD_2 ( ) ; VAR_1 ) ; if ( ) ; if ( ) { rule ( ) ; } , , , , , , , , , , , , , catch ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ; != null ) ; for ( ) ; : ( ) ; } ) ; + ( + ( + ( + ( + ( ) ; } ) ; } ) ; } mContext ( ) ; }[0m
Epoch ended with duration 0:00:03.838940
Validation perplexity: 5.812269285398027
Model saved checkpoint!
Epoch 6 / 1000
Epoch Step: 5 / 138 Loss: 103.29639434814453 Tokens per Sec: 13594.10488266115
Epoch Step: 10 / 138 Loss: 154.75665283203125 Tokens per Sec: 13559.972948608893
Epoch Step: 15 / 138 Loss: 103.16738891601562 Tokens per Sec: 13547.556282047924
Epoch Step: 20 / 138 Loss: 125.43583679199219 Tokens per Sec: 13879.257189386575
Epoch Step: 25 / 138 Loss: 142.75457763671875 Tokens per Sec: 13102.788951563889
Epoch Step: 30 / 138 Loss: 80.83026123046875 Tokens per Sec: 14159.97071298656
Epoch Step: 35 / 138 Loss: 105.45991516113281 Tokens per Sec: 13555.221973710371
Epoch Step: 40 / 138 Loss: 106.85428619384766 Tokens per Sec: 13614.588686565783
Epoch Step: 45 / 138 Loss: 134.8352508544922 Tokens per Sec: 13011.485858354705
Epoch Step: 50 / 138 Loss: 108.83740234375 Tokens per Sec: 13856.474261740232
Epoch Step: 55 / 138 Loss: 114.7344970703125 Tokens per Sec: 14163.83741445122
Epoch Step: 60 / 138 Loss: 120.2481460571289 Tokens per Sec: 13907.828417862966
Epoch Step: 65 / 138 Loss: 111.15153503417969 Tokens per Sec: 13233.438537680215
Epoch Step: 70 / 138 Loss: 131.94532775878906 Tokens per Sec: 13696.700240335791
Epoch Step: 75 / 138 Loss: 143.87098693847656 Tokens per Sec: 13525.673713482502
Epoch Step: 80 / 138 Loss: 91.95523834228516 Tokens per Sec: 13387.252066608433
Epoch Step: 85 / 138 Loss: 153.72955322265625 Tokens per Sec: 14230.343900686874
Epoch Step: 90 / 138 Loss: 176.55186462402344 Tokens per Sec: 12608.092442596198
Epoch Step: 95 / 138 Loss: 104.60929107666016 Tokens per Sec: 12850.626429325968
Epoch Step: 100 / 138 Loss: 99.0511474609375 Tokens per Sec: 13183.248884521812
Epoch Step: 105 / 138 Loss: 142.36874389648438 Tokens per Sec: 13443.746677225
Epoch Step: 110 / 138 Loss: 131.6096649169922 Tokens per Sec: 13040.973768280282
Epoch Step: 115 / 138 Loss: 112.07649993896484 Tokens per Sec: 12232.837158627119
Epoch Step: 120 / 138 Loss: 99.95553588867188 Tokens per Sec: 13140.441944124845
Epoch Step: 125 / 138 Loss: 90.04878234863281 Tokens per Sec: 12907.790258992683
Epoch Step: 130 / 138 Loss: 114.60151672363281 Tokens per Sec: 13120.997787413009
Epoch Step: 135 / 138 Loss: 80.5047836303711 Tokens per Sec: 13445.418900103463
Epoch ended with duration 0:00:47.621511
Train perplexity: 5.646258111578379
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > ( TYPE_3 . TYPE_3 . METHOD_2 ( VAR_1 ) ; < TYPE_1 . > ( ) { > ( ) ; } ) ; } ) ; } ) ; } ) ; } value ( ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , VAR_3 , , , , boolean boolean boolean boolean boolean VAR_6 TYPE_5 . TYPE_5 . METHOD_2 ( ) ; if ( ) ; if ( ) { rule rule rule rule rule rule rule , VAR_1 , VAR_1 , , , , , , , , , , VAR_2 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ; != null ) ; for ( node ) ; : VAR_2 ) { VAR_3 ) ; + ( + ( + ( + ( ) ; } ) ; } mContext ( ) ; }[0m
Epoch ended with duration 0:00:03.804614
Validation perplexity: 5.037229222914501
Model saved best_on_validation!
Epoch 7 / 1000
Epoch Step: 5 / 138 Loss: 120.59172821044922 Tokens per Sec: 13394.265125625998
Epoch Step: 10 / 138 Loss: 94.52896881103516 Tokens per Sec: 13684.20092575514
Epoch Step: 15 / 138 Loss: 140.6410369873047 Tokens per Sec: 12873.171597247883
Epoch Step: 20 / 138 Loss: 100.12276458740234 Tokens per Sec: 14246.711262325445
Epoch Step: 25 / 138 Loss: 109.98072814941406 Tokens per Sec: 13052.565099142137
Epoch Step: 30 / 138 Loss: 105.68683624267578 Tokens per Sec: 13565.160271330147
Epoch Step: 35 / 138 Loss: 96.58302307128906 Tokens per Sec: 14228.598781080258
Epoch Step: 40 / 138 Loss: 100.38333129882812 Tokens per Sec: 13251.68619130475
Epoch Step: 45 / 138 Loss: 107.34453582763672 Tokens per Sec: 13811.852091256234
Epoch Step: 50 / 138 Loss: 148.6962432861328 Tokens per Sec: 14318.366382007307
Epoch Step: 55 / 138 Loss: 132.85662841796875 Tokens per Sec: 13731.879170693857
Epoch Step: 60 / 138 Loss: 84.27876281738281 Tokens per Sec: 13371.917378187247
Epoch Step: 65 / 138 Loss: 90.7248764038086 Tokens per Sec: 13517.99862300744
Epoch Step: 70 / 138 Loss: 148.0950927734375 Tokens per Sec: 13278.494592874906
Epoch Step: 75 / 138 Loss: 143.261962890625 Tokens per Sec: 14244.22399679978
Epoch Step: 80 / 138 Loss: 89.12458801269531 Tokens per Sec: 13826.6795677962
Epoch Step: 85 / 138 Loss: 119.59705352783203 Tokens per Sec: 13754.389887049829
Epoch Step: 90 / 138 Loss: 140.73289489746094 Tokens per Sec: 13780.214416292325
Epoch Step: 95 / 138 Loss: 88.36880493164062 Tokens per Sec: 13714.42466710605
Epoch Step: 100 / 138 Loss: 95.04402923583984 Tokens per Sec: 12943.24155138861
Epoch Step: 105 / 138 Loss: 100.9935302734375 Tokens per Sec: 12933.26497219526
Epoch Step: 110 / 138 Loss: 118.01757049560547 Tokens per Sec: 13325.125614266886
Epoch Step: 115 / 138 Loss: 199.81704711914062 Tokens per Sec: 13083.963687171257
Epoch Step: 120 / 138 Loss: 96.17539978027344 Tokens per Sec: 13166.470418269408
Epoch Step: 125 / 138 Loss: 235.3179168701172 Tokens per Sec: 12157.903110709838
Epoch Step: 130 / 138 Loss: 84.34994506835938 Tokens per Sec: 12941.284894673026
Epoch Step: 135 / 138 Loss: 77.1467056274414 Tokens per Sec: 13175.425250367089
Epoch ended with duration 0:00:47.360088
Train perplexity: 5.173116975778161
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] values , VAR_2 VAR_2 ) { java.util.List < java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 < TYPE_1 > ( > ( > ( ) ; > ( ) ; } ) ; } : : : : VAR_4 ) ; } value ( ) ; } return TYPE_5 . TYPE_5 . METHOD_4 ( ) ; } , , , , , , , , , , , , , , , , , , , , , , , , ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , VAR_3 , , , boolean boolean boolean boolean VAR_6 VAR_6 TYPE_5 TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ; if ( ) { != null ) { rule rule rule rule ( rule , VAR_1 , VAR_1 , , , , , , , , , VAR_6 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ) ) ; ) ; for ( node ) { : VAR_2 ) { VAR_3 = new TYPE_2 ( + ( + ( + ( + ( + ( ) ; } mContext ( ) ; } , mContext ( ) ; }[0m
Epoch ended with duration 0:00:03.820540
Validation perplexity: 5.119810172016176
Epoch 8 / 1000
Epoch Step: 5 / 138 Loss: 133.9429168701172 Tokens per Sec: 13244.74879510295
Epoch Step: 10 / 138 Loss: 232.6294708251953 Tokens per Sec: 13140.581464859019
Epoch Step: 15 / 138 Loss: 87.16707611083984 Tokens per Sec: 12839.544141051578
Epoch Step: 20 / 138 Loss: 161.5428466796875 Tokens per Sec: 12592.62673673843
Epoch Step: 25 / 138 Loss: 94.1644058227539 Tokens per Sec: 13771.541957294616
Epoch Step: 30 / 138 Loss: 82.5450210571289 Tokens per Sec: 14000.913924132281
Epoch Step: 35 / 138 Loss: 112.10044860839844 Tokens per Sec: 14251.48102773852
Epoch Step: 40 / 138 Loss: 78.99409484863281 Tokens per Sec: 13394.915838124552
Epoch Step: 45 / 138 Loss: 81.07122802734375 Tokens per Sec: 13723.083729658967
Epoch Step: 50 / 138 Loss: 137.2501678466797 Tokens per Sec: 13890.176142972832
Epoch Step: 55 / 138 Loss: 95.0852279663086 Tokens per Sec: 13233.654680768037
Epoch Step: 60 / 138 Loss: 139.7021484375 Tokens per Sec: 13746.450967521849
Epoch Step: 65 / 138 Loss: 124.41253662109375 Tokens per Sec: 13603.091703221693
Epoch Step: 70 / 138 Loss: 93.449951171875 Tokens per Sec: 12690.372684425043
Epoch Step: 75 / 138 Loss: 198.62619018554688 Tokens per Sec: 13171.38275999402
Epoch Step: 80 / 138 Loss: 73.56008911132812 Tokens per Sec: 13428.652319898805
Epoch Step: 85 / 138 Loss: 80.5975341796875 Tokens per Sec: 14244.128773818455
Epoch Step: 90 / 138 Loss: 77.16690826416016 Tokens per Sec: 14011.21669391176
Epoch Step: 95 / 138 Loss: 87.3084716796875 Tokens per Sec: 13383.56568474496
Epoch Step: 100 / 138 Loss: 94.08370971679688 Tokens per Sec: 14132.249531866984
Epoch Step: 105 / 138 Loss: 147.1034393310547 Tokens per Sec: 12350.753453682035
Epoch Step: 110 / 138 Loss: 133.19174194335938 Tokens per Sec: 13483.325049756146
Epoch Step: 115 / 138 Loss: 144.62747192382812 Tokens per Sec: 13690.443949887755
Epoch Step: 120 / 138 Loss: 138.93992614746094 Tokens per Sec: 13418.897756219836
Epoch Step: 125 / 138 Loss: 146.23724365234375 Tokens per Sec: 12595.003528584637
Epoch Step: 130 / 138 Loss: 114.54203033447266 Tokens per Sec: 13228.040685011427
Epoch Step: 135 / 138 Loss: 95.01943969726562 Tokens per Sec: 12970.857076922157
Epoch ended with duration 0:00:47.555689
Train perplexity: 5.049584014235297
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long ] ] values , VAR_2 VAR_2 ) { java.util.List < java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 TYPE_4 . > ( > ( ) ; > ( ) ; for ( ) ; } ) ; } VAR_4 ) ; } value ( ) ; } value ( ) ; } TYPE_5 . TYPE_5 . TYPE_5 . METHOD_4 ( ) ; } , , , , , , , , , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , VAR_3 , TYPE_4 , boolean boolean boolean boolean VAR_6 VAR_6 TYPE_5 TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ; if ( ) { rule rule rule rule rule rule rule rule , VAR_1 , VAR_1 , , , , , , , VAR_5 ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) ) ) ) { for ( node node , VAR_2 ) { java.lang.String , VAR_3 = new + ( + ( + ( + ( + ( ) ; } mContext ) ; } VAR_4 ) ; }[0m
Epoch ended with duration 0:00:03.843597
Validation perplexity: 4.891460821842657
Model saved best_on_validation!
Epoch 9 / 1000
Epoch Step: 5 / 138 Loss: 93.57500457763672 Tokens per Sec: 12749.494075483955
Epoch Step: 10 / 138 Loss: 125.02050018310547 Tokens per Sec: 13188.588750159559
Epoch Step: 15 / 138 Loss: 162.087158203125 Tokens per Sec: 13370.453508505116
Epoch Step: 20 / 138 Loss: 75.8847427368164 Tokens per Sec: 13504.028130287346
Epoch Step: 25 / 138 Loss: 145.3592529296875 Tokens per Sec: 13431.57823869629
Epoch Step: 30 / 138 Loss: 76.79962158203125 Tokens per Sec: 13858.821828999298
Epoch Step: 35 / 138 Loss: 131.1708984375 Tokens per Sec: 13861.026087390408
Epoch Step: 40 / 138 Loss: 107.12010192871094 Tokens per Sec: 13403.514922144896
Epoch Step: 45 / 138 Loss: 130.9237060546875 Tokens per Sec: 14082.438618958136
Epoch Step: 50 / 138 Loss: 79.84199523925781 Tokens per Sec: 13627.290206515148
Epoch Step: 55 / 138 Loss: 125.97957611083984 Tokens per Sec: 13673.499561511382
Epoch Step: 60 / 138 Loss: 142.1121368408203 Tokens per Sec: 13563.840698636008
Epoch Step: 65 / 138 Loss: 123.37909698486328 Tokens per Sec: 14426.9809640383
Epoch Step: 70 / 138 Loss: 74.07726287841797 Tokens per Sec: 13495.534185152344
Epoch Step: 75 / 138 Loss: 107.47814178466797 Tokens per Sec: 13672.000224061152
Epoch Step: 80 / 138 Loss: 134.77725219726562 Tokens per Sec: 13334.625788022546
Epoch Step: 85 / 138 Loss: 142.75401306152344 Tokens per Sec: 14071.884334434504
Epoch Step: 90 / 138 Loss: 122.03804016113281 Tokens per Sec: 13010.463253547561
Epoch Step: 95 / 138 Loss: 104.19389343261719 Tokens per Sec: 13473.648527569174
Epoch Step: 100 / 138 Loss: 142.84426879882812 Tokens per Sec: 13900.617095911346
Epoch Step: 105 / 138 Loss: 153.80360412597656 Tokens per Sec: 12295.444368891378
Epoch Step: 110 / 138 Loss: 135.38726806640625 Tokens per Sec: 12898.946931047716
Epoch Step: 115 / 138 Loss: 147.15362548828125 Tokens per Sec: 13315.796717053925
Epoch Step: 120 / 138 Loss: 139.5071258544922 Tokens per Sec: 13414.736530480983
Epoch Step: 125 / 138 Loss: 87.02599334716797 Tokens per Sec: 13078.776618903183
Epoch Step: 130 / 138 Loss: 138.7632598876953 Tokens per Sec: 13648.757570336398
Epoch Step: 135 / 138 Loss: 94.24542236328125 Tokens per Sec: 13090.918197016226
Epoch ended with duration 0:00:47.459487
Train perplexity: 4.826113899290721
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > ( TYPE_3 . TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 . > ( > ( ) ) ; for ( ) ; for ( ) ; : VAR_1 . VAR_4 ) ; } value ( ) ; } TYPE_5 . TYPE_5 . TYPE_5 . TYPE_5 ) ; } , VAR_5 , VAR_5 , , , , , , , , , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , , boolean boolean , boolean VAR_6 VAR_6 TYPE_5 TYPE_5 . rule ( VAR_1 . METHOD_3 ( ) ) { rule ) { rule ( rule rule rule ) { VAR_1 , VAR_1 , VAR_2 , , , , , VAR_5 , VAR_6 ) ; } catch ( ) ; } ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { ( VAR_2 ) ) ) ) { for ( for ( node ) { VAR_2 ) { VAR_3 = new + ( + ( + ( + ( + ( ) ) ) ; mContext ( ) ; } mContext ( ) ; } node , node , node , VAR_3 ) ; }[0m
Epoch ended with duration 0:00:03.804867
Validation perplexity: 4.355919807071152
Model saved best_on_validation!
Epoch 10 / 1000
Epoch Step: 5 / 138 Loss: 93.56133270263672 Tokens per Sec: 13905.311522400803
Epoch Step: 10 / 138 Loss: 128.8421630859375 Tokens per Sec: 13429.322736947093
Epoch Step: 15 / 138 Loss: 102.48674774169922 Tokens per Sec: 13951.218224584512
Epoch Step: 20 / 138 Loss: 100.5677719116211 Tokens per Sec: 14040.254774432227
Epoch Step: 25 / 138 Loss: 110.0069351196289 Tokens per Sec: 13441.991724662841
Epoch Step: 30 / 138 Loss: 137.60275268554688 Tokens per Sec: 13916.784845124022
Epoch Step: 35 / 138 Loss: 121.55413818359375 Tokens per Sec: 13543.137304073067
Epoch Step: 40 / 138 Loss: 77.94808197021484 Tokens per Sec: 13989.179455050556
Epoch Step: 45 / 138 Loss: 61.493900299072266 Tokens per Sec: 13769.24243999494
Epoch Step: 50 / 138 Loss: 80.11131286621094 Tokens per Sec: 14251.658235938947
Epoch Step: 55 / 138 Loss: 211.10394287109375 Tokens per Sec: 13041.763243034484
Epoch Step: 60 / 138 Loss: 119.91236114501953 Tokens per Sec: 13888.281219014323
Epoch Step: 65 / 138 Loss: 80.27241516113281 Tokens per Sec: 14330.50128965408
Epoch Step: 70 / 138 Loss: 90.05854797363281 Tokens per Sec: 13353.008244843204
Epoch Step: 75 / 138 Loss: 94.63937377929688 Tokens per Sec: 13736.257987310908
Epoch Step: 80 / 138 Loss: 108.73267364501953 Tokens per Sec: 13467.747296757647
Epoch Step: 85 / 138 Loss: 120.6695556640625 Tokens per Sec: 14043.789694424171
Epoch Step: 90 / 138 Loss: 106.35443878173828 Tokens per Sec: 13143.382205713935
Epoch Step: 95 / 138 Loss: 73.03705596923828 Tokens per Sec: 13811.950102219955
Epoch Step: 100 / 138 Loss: 88.34708404541016 Tokens per Sec: 12901.90439400465
Epoch Step: 105 / 138 Loss: 231.28140258789062 Tokens per Sec: 12659.268395068508
Epoch Step: 110 / 138 Loss: 81.40919494628906 Tokens per Sec: 13532.83707992597
Epoch Step: 115 / 138 Loss: 82.55538940429688 Tokens per Sec: 12862.046224468797
Epoch Step: 120 / 138 Loss: 83.73744201660156 Tokens per Sec: 13378.60683200484
Epoch Step: 125 / 138 Loss: 89.51905822753906 Tokens per Sec: 12938.44942943061
Epoch Step: 130 / 138 Loss: 102.1976318359375 Tokens per Sec: 13312.476864252792
Epoch Step: 135 / 138 Loss: 73.2752456665039 Tokens per Sec: 12386.027975645773
Epoch ended with duration 0:00:47.167715
Train perplexity: 4.267730130133282
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 VAR_2 ) { java.util.List < java.lang.String VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_1 TYPE_4 . VAR_4 = new TYPE_2 . > ( ) ; for ( ) { : VAR_1 . VAR_4 . VAR_4 ) ; } value ( ) ; } TYPE_5 . TYPE_5 . TYPE_5 . TYPE_5 ) , VAR_5 , VAR_2 , VAR_2 , VAR_2 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , , boolean , boolean boolean boolean VAR_6 VAR_6 TYPE_5 . rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) { != null ) { rule ( rule rule , VAR_1 , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , catch ( ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { ( VAR_2 ) ) ) { for ( for ( node , : VAR_2 ) { VAR_3 = new + ( + ( + ( + ( + ( ) ) ) ) ; } VAR_4 . VAR_4 . mContext ( ) ; }[0m
Epoch ended with duration 0:00:03.933009
Validation perplexity: 5.252271128098221
Model saved checkpoint!
Epoch 11 / 1000
Epoch Step: 5 / 138 Loss: 124.45085144042969 Tokens per Sec: 13231.248500243913
Epoch Step: 10 / 138 Loss: 86.24713897705078 Tokens per Sec: 14049.540801323967
Epoch Step: 15 / 138 Loss: 120.13858032226562 Tokens per Sec: 13848.051679660693
Epoch Step: 20 / 138 Loss: 85.02281188964844 Tokens per Sec: 13402.007331826726
Epoch Step: 25 / 138 Loss: 75.58705139160156 Tokens per Sec: 13771.160711270275
Epoch Step: 30 / 138 Loss: 88.40563201904297 Tokens per Sec: 13636.751966843516
Epoch Step: 35 / 138 Loss: 81.55584716796875 Tokens per Sec: 13444.137186462498
Epoch Step: 40 / 138 Loss: 59.87456512451172 Tokens per Sec: 13302.274264009116
Epoch Step: 45 / 138 Loss: 92.21947479248047 Tokens per Sec: 14625.57715068414
Epoch Step: 50 / 138 Loss: 109.5557632446289 Tokens per Sec: 13190.736036846996
Epoch Step: 55 / 138 Loss: 82.73908996582031 Tokens per Sec: 13575.093077731748
Epoch Step: 60 / 138 Loss: 135.01837158203125 Tokens per Sec: 14620.323363588466
Epoch Step: 65 / 138 Loss: 87.67901611328125 Tokens per Sec: 13717.348497090603
Epoch Step: 70 / 138 Loss: 111.86083221435547 Tokens per Sec: 13623.69270621295
Epoch Step: 75 / 138 Loss: 77.95330810546875 Tokens per Sec: 14122.383532805456
Epoch Step: 80 / 138 Loss: 118.61509704589844 Tokens per Sec: 13611.1714300863
Epoch Step: 85 / 138 Loss: 64.69157409667969 Tokens per Sec: 13354.835692055005
Epoch Step: 90 / 138 Loss: 83.5096206665039 Tokens per Sec: 13563.280415872987
Epoch Step: 95 / 138 Loss: 131.97093200683594 Tokens per Sec: 12849.690558709954
Epoch Step: 100 / 138 Loss: 111.0710678100586 Tokens per Sec: 14259.116204213009
Epoch Step: 105 / 138 Loss: 127.99608612060547 Tokens per Sec: 13367.442887203544
Epoch Step: 110 / 138 Loss: 189.37399291992188 Tokens per Sec: 12841.834108216084
Epoch Step: 115 / 138 Loss: 116.11927795410156 Tokens per Sec: 12337.50318319301
Epoch Step: 120 / 138 Loss: 79.3501968383789 Tokens per Sec: 13073.518421142193
Epoch Step: 125 / 138 Loss: 193.45181274414062 Tokens per Sec: 12750.526978827624
Epoch Step: 130 / 138 Loss: 127.5921859741211 Tokens per Sec: 13344.669778667845
Epoch Step: 135 / 138 Loss: 75.06465148925781 Tokens per Sec: 12935.417188955205
Epoch ended with duration 0:00:47.275344
Train perplexity: 4.264018371910928
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 ( > ( VAR_4 ) ; > ( > ( for ( for ( ) ) ) { : VAR_4 . VAR_4 . METHOD_3 ( value ) ; } return return TYPE_5 . TYPE_5 . TYPE_5 , VAR_5 , , , , , , , , , , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , boolean , boolean boolean boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; rule ( rule ) { rule rule rule rule rule rule , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( ) ; } STRING_1 , STRING_1 , rule ( ) . METHOD_7 ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { VAR_2 ) { != null ) { for ( node node : : VAR_2 = java.lang.String java.lang.String = new + ( + ( + ( + ( + ( + ( mContext ) ) ) , VAR_4 , node , mContext ( ) , node , VAR_3 ) ; }[0m
Epoch ended with duration 0:00:03.799772
Validation perplexity: 3.961774758074347
Model saved best_on_validation!
Epoch 12 / 1000
Epoch Step: 5 / 138 Loss: 110.97962188720703 Tokens per Sec: 14053.148501163636
Epoch Step: 10 / 138 Loss: 123.91707611083984 Tokens per Sec: 13738.248600458242
Epoch Step: 15 / 138 Loss: 97.17635345458984 Tokens per Sec: 13281.404454451986
Epoch Step: 20 / 138 Loss: 129.5904541015625 Tokens per Sec: 14020.335456712131
Epoch Step: 25 / 138 Loss: 95.66938018798828 Tokens per Sec: 13947.264497216027
Epoch Step: 30 / 138 Loss: 106.58476257324219 Tokens per Sec: 13396.651855742239
Epoch Step: 35 / 138 Loss: 82.46495056152344 Tokens per Sec: 13074.083690890879
Epoch Step: 40 / 138 Loss: 108.44114685058594 Tokens per Sec: 13840.272929306127
Epoch Step: 45 / 138 Loss: 69.91671752929688 Tokens per Sec: 13314.617129154763
Epoch Step: 50 / 138 Loss: 122.82499694824219 Tokens per Sec: 13545.791994720563
Epoch Step: 55 / 138 Loss: 90.19163513183594 Tokens per Sec: 14008.49938914471
Epoch Step: 60 / 138 Loss: 120.97003173828125 Tokens per Sec: 13935.527082145172
Epoch Step: 65 / 138 Loss: 80.42848205566406 Tokens per Sec: 13167.043720678188
Epoch Step: 70 / 138 Loss: 61.22505187988281 Tokens per Sec: 12878.457905934782
Epoch Step: 75 / 138 Loss: 73.79772186279297 Tokens per Sec: 14084.099862935453
Epoch Step: 80 / 138 Loss: 120.57023620605469 Tokens per Sec: 13326.541909784713
Epoch Step: 85 / 138 Loss: 103.4579849243164 Tokens per Sec: 13695.32625848101
Epoch Step: 90 / 138 Loss: 88.5709228515625 Tokens per Sec: 12464.567301282757
Epoch Step: 95 / 138 Loss: 82.08521270751953 Tokens per Sec: 13446.25153811654
Epoch Step: 100 / 138 Loss: 70.09915161132812 Tokens per Sec: 13529.856397765441
Epoch Step: 105 / 138 Loss: 104.01529693603516 Tokens per Sec: 13490.82763215865
Epoch Step: 110 / 138 Loss: 115.12258911132812 Tokens per Sec: 13352.916007707996
Epoch Step: 115 / 138 Loss: 80.1619873046875 Tokens per Sec: 13118.780834001476
Epoch Step: 120 / 138 Loss: 106.10807037353516 Tokens per Sec: 12514.533150385178
Epoch Step: 125 / 138 Loss: 59.3255500793457 Tokens per Sec: 13196.625873674724
Epoch Step: 130 / 138 Loss: 124.84534454345703 Tokens per Sec: 13556.405928699485
Epoch Step: 135 / 138 Loss: 192.06231689453125 Tokens per Sec: 12232.391230666834
Epoch ended with duration 0:00:47.593134
Train perplexity: 4.279407106611446
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = new VAR_4 = new java.util.ArrayList < TYPE_1 ( for ( for ( ) ) ) { VAR_4 . VAR_4 . METHOD_3 ( ) ; } return return TYPE_5 . TYPE_5 . TYPE_5 , VAR_5 , VAR_5 , 0 , VAR_2 , VAR_2 , , , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , boolean , boolean boolean boolean VAR_6 ) { TYPE_5 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) { rule ( != null ) { rule rule ( VAR_1 , VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception ) { STRING_1 , STRING_1 , rule ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { ( VAR_2 ) ) { ) { for ( node node : VAR_2 ) { java.lang.String = VAR_3 = ( + ( + ( + ( + ( ) ) ) , VAR_4 , VAR_4 , VAR_4 , mContext ( ) , node , node , VAR_3 ) ; }[0m
Epoch ended with duration 0:00:03.930789
Validation perplexity: 4.826008108187848
Epoch 13 / 1000
Epoch Step: 5 / 138 Loss: 237.2059783935547 Tokens per Sec: 13445.943430235742
Epoch Step: 10 / 138 Loss: 92.29632568359375 Tokens per Sec: 13809.881298785594
Epoch Step: 15 / 138 Loss: 106.01008605957031 Tokens per Sec: 13093.286152631737
Epoch Step: 20 / 138 Loss: 97.69483947753906 Tokens per Sec: 13811.109275885052
Epoch Step: 25 / 138 Loss: 56.57490539550781 Tokens per Sec: 14255.62821608582
Epoch Step: 30 / 138 Loss: 120.36100769042969 Tokens per Sec: 13154.023201984774
Epoch Step: 35 / 138 Loss: 105.44928741455078 Tokens per Sec: 13911.729134671368
Epoch Step: 40 / 138 Loss: 72.91217803955078 Tokens per Sec: 13917.285865026508
Epoch Step: 45 / 138 Loss: 123.09010314941406 Tokens per Sec: 14021.27326330429
Epoch Step: 50 / 138 Loss: 120.19219207763672 Tokens per Sec: 13338.910556022844
Epoch Step: 55 / 138 Loss: 105.94792938232422 Tokens per Sec: 14106.342874244194
Epoch Step: 60 / 138 Loss: 82.3514404296875 Tokens per Sec: 12847.123394131577
Epoch Step: 65 / 138 Loss: 222.5183868408203 Tokens per Sec: 13015.160930781309
Epoch Step: 70 / 138 Loss: 87.22898864746094 Tokens per Sec: 13340.22419417124
Epoch Step: 75 / 138 Loss: 61.86355972290039 Tokens per Sec: 13988.488000377743
Epoch Step: 80 / 138 Loss: 102.69294738769531 Tokens per Sec: 13065.906444432841
Epoch Step: 85 / 138 Loss: 120.85338592529297 Tokens per Sec: 13808.194842098448
Epoch Step: 90 / 138 Loss: 58.2588005065918 Tokens per Sec: 14016.262928230848
Epoch Step: 95 / 138 Loss: 132.85198974609375 Tokens per Sec: 13138.200811202836
Epoch Step: 100 / 138 Loss: 89.62830352783203 Tokens per Sec: 13206.054416914967
Epoch Step: 105 / 138 Loss: 67.85700988769531 Tokens per Sec: 12988.00466930452
Epoch Step: 110 / 138 Loss: 113.96578216552734 Tokens per Sec: 13258.219285920788
Epoch Step: 115 / 138 Loss: 107.19557189941406 Tokens per Sec: 12493.76103869316
Epoch Step: 120 / 138 Loss: 111.77688598632812 Tokens per Sec: 12995.224430737127
Epoch Step: 125 / 138 Loss: 91.23109436035156 Tokens per Sec: 13196.367610265508
Epoch Step: 130 / 138 Loss: 104.6209487915039 Tokens per Sec: 13101.997901090213
Epoch Step: 135 / 138 Loss: 72.4283218383789 Tokens per Sec: 13556.66174996612
Epoch ended with duration 0:00:47.474468
Train perplexity: 4.002298930188894
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = new VAR_4 = new java.util.ArrayList < > ( for ( for ( ) ) ) { : VAR_4 . VAR_4 . METHOD_3 ( ) ; } return return TYPE_5 . TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , 0 , VAR_2 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean , boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { rule rule ( VAR_1 , VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_5 ) ; } catch ( ) { java.lang.Exception { STRING_1 , STRING_1 , STRING_1 . METHOD_6 ( ) . e.toString ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) ) { VAR_2 ) { != null ) { for ( for ( node ) { VAR_2 = java.lang.String VAR_3 = VAR_3 = ( + ( + ( + ( + ( ) ) ) , VAR_4 , VAR_4 , node , mContext , METHOD_3 ( ) , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.816971
Validation perplexity: 3.6417724238314992
Model saved best_on_validation!
Epoch 14 / 1000
Epoch Step: 5 / 138 Loss: 78.35568237304688 Tokens per Sec: 14512.647378110198
Epoch Step: 10 / 138 Loss: 83.39105987548828 Tokens per Sec: 13894.564469246547
Epoch Step: 15 / 138 Loss: 83.69528198242188 Tokens per Sec: 13954.79335652323
Epoch Step: 20 / 138 Loss: 226.75526428222656 Tokens per Sec: 13871.453213285868
Epoch Step: 25 / 138 Loss: 116.31906127929688 Tokens per Sec: 13857.683526958976
Epoch Step: 30 / 138 Loss: 81.07276916503906 Tokens per Sec: 13634.258331308103
Epoch Step: 35 / 138 Loss: 209.4307403564453 Tokens per Sec: 13104.584898249961
Epoch Step: 40 / 138 Loss: 77.77983856201172 Tokens per Sec: 13862.479257205168
Epoch Step: 45 / 138 Loss: 108.9581527709961 Tokens per Sec: 13387.510148207126
Epoch Step: 50 / 138 Loss: 80.53695678710938 Tokens per Sec: 13003.356648695342
Epoch Step: 55 / 138 Loss: 111.95380401611328 Tokens per Sec: 12895.39640513512
Epoch Step: 60 / 138 Loss: 157.03353881835938 Tokens per Sec: 13274.55909243225
Epoch Step: 65 / 138 Loss: 78.29989624023438 Tokens per Sec: 13765.669065359036
Epoch Step: 70 / 138 Loss: 88.2617416381836 Tokens per Sec: 14079.337389442642
Epoch Step: 75 / 138 Loss: 109.47340393066406 Tokens per Sec: 13165.640022640753
Epoch Step: 80 / 138 Loss: 75.21717071533203 Tokens per Sec: 13139.041489806592
Epoch Step: 85 / 138 Loss: 107.42515563964844 Tokens per Sec: 14074.688608247394
Epoch Step: 90 / 138 Loss: 84.83885192871094 Tokens per Sec: 12670.593703946564
Epoch Step: 95 / 138 Loss: 136.71189880371094 Tokens per Sec: 13290.885735171702
Epoch Step: 100 / 138 Loss: 113.42420959472656 Tokens per Sec: 14549.802760040371
Epoch Step: 105 / 138 Loss: 98.02178192138672 Tokens per Sec: 12758.84630801336
Epoch Step: 110 / 138 Loss: 89.83663940429688 Tokens per Sec: 13540.132691929492
Epoch Step: 115 / 138 Loss: 82.97486877441406 Tokens per Sec: 12934.556712268974
Epoch Step: 120 / 138 Loss: 92.43453216552734 Tokens per Sec: 13245.726525208445
Epoch Step: 125 / 138 Loss: 77.70979309082031 Tokens per Sec: 13131.635369686728
Epoch Step: 130 / 138 Loss: 215.65744018554688 Tokens per Sec: 13097.783129453923
Epoch Step: 135 / 138 Loss: 77.31327819824219 Tokens per Sec: 13337.536461123937
Epoch ended with duration 0:00:47.475113
Train perplexity: 3.7897161975465483
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < TYPE_1 ( > ( for ( for ( ) ) ) { : VAR_4 . VAR_4 . METHOD_3 ( ) ; } return TYPE_5 . TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , 0 , 0 , VAR_2 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean , boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { rule ( rule , VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception ( ) { STRING_1 , STRING_1 . METHOD_6 ( ) . e.toString ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 = java.lang.String VAR_3 = VAR_3 = ( + ( + ( + ( + ( ) ) ) , VAR_4 , VAR_4 , node , mContext ( ) , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.765802
Validation perplexity: 3.1888031258814307
Model saved best_on_validation!
Epoch 15 / 1000
Epoch Step: 5 / 138 Loss: 58.571571350097656 Tokens per Sec: 13315.852040332595
Epoch Step: 10 / 138 Loss: 73.50845336914062 Tokens per Sec: 13351.362010099583
Epoch Step: 15 / 138 Loss: 55.12038803100586 Tokens per Sec: 13323.87679395344
Epoch Step: 20 / 138 Loss: 90.45405578613281 Tokens per Sec: 13862.695369791261
Epoch Step: 25 / 138 Loss: 58.26702880859375 Tokens per Sec: 13984.650634901305
Epoch Step: 30 / 138 Loss: 113.35940551757812 Tokens per Sec: 13882.17058762688
Epoch Step: 35 / 138 Loss: 65.59922790527344 Tokens per Sec: 13061.02374683471
Epoch Step: 40 / 138 Loss: 87.39207458496094 Tokens per Sec: 13136.269142558236
Epoch Step: 45 / 138 Loss: 82.03067016601562 Tokens per Sec: 13393.602671091634
Epoch Step: 50 / 138 Loss: 72.7551498413086 Tokens per Sec: 13733.002640477178
Epoch Step: 55 / 138 Loss: 74.1888656616211 Tokens per Sec: 13389.81868875687
Epoch Step: 60 / 138 Loss: 68.3447494506836 Tokens per Sec: 13558.917511908583
Epoch Step: 65 / 138 Loss: 65.68490600585938 Tokens per Sec: 13320.070837958585
Epoch Step: 70 / 138 Loss: 115.32003021240234 Tokens per Sec: 14140.859959215237
Epoch Step: 75 / 138 Loss: 58.72306823730469 Tokens per Sec: 14297.522773986095
Epoch Step: 80 / 138 Loss: 79.7403793334961 Tokens per Sec: 13696.985331378806
Epoch Step: 85 / 138 Loss: 108.44683837890625 Tokens per Sec: 13667.301754128259
Epoch Step: 90 / 138 Loss: 60.122310638427734 Tokens per Sec: 13821.444335616183
Epoch Step: 95 / 138 Loss: 73.25885009765625 Tokens per Sec: 13822.933052395565
Epoch Step: 100 / 138 Loss: 90.61441040039062 Tokens per Sec: 13909.403387522
Epoch Step: 105 / 138 Loss: 51.58517837524414 Tokens per Sec: 13450.487830984095
Epoch Step: 110 / 138 Loss: 88.01658630371094 Tokens per Sec: 12801.897602706875
Epoch Step: 115 / 138 Loss: 168.13157653808594 Tokens per Sec: 13276.924481315595
Epoch Step: 120 / 138 Loss: 108.18396759033203 Tokens per Sec: 13359.906725479816
Epoch Step: 125 / 138 Loss: 79.51309967041016 Tokens per Sec: 13390.894838241067
Epoch Step: 130 / 138 Loss: 104.8117446899414 Tokens per Sec: 12989.812391985592
Epoch Step: 135 / 138 Loss: 99.71038818359375 Tokens per Sec: 12380.872381786061
Epoch ended with duration 0:00:47.340616
Train perplexity: 3.561674288276693
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : : VAR_4 ) ; } value ( value ) ; } return TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_2 , 0 , VAR_2 , VAR_2 , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) { != null ) { try { rule rule ( METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ) ; } catch ( java.lang.Exception ( ) { STRING_1 , STRING_1 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { ) { for ( for ( node ) { VAR_2 = VAR_3 = STRING_1 ; ( ( + ( + ( + ( + ( ) ) , METHOD_2 ( VAR_4 , VAR_4 , node , mContext , node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.862682
Validation perplexity: 4.112191190087413
Model saved checkpoint!
Epoch 16 / 1000
Epoch Step: 5 / 138 Loss: 85.9024887084961 Tokens per Sec: 13017.39691562367
Epoch Step: 10 / 138 Loss: 67.4136734008789 Tokens per Sec: 14205.156025374303
Epoch Step: 15 / 138 Loss: 76.34578704833984 Tokens per Sec: 13742.172603142119
Epoch Step: 20 / 138 Loss: 105.57794189453125 Tokens per Sec: 14009.031396125585
Epoch Step: 25 / 138 Loss: 62.260032653808594 Tokens per Sec: 13524.499525508918
Epoch Step: 30 / 138 Loss: 109.08717346191406 Tokens per Sec: 13908.414146801166
Epoch Step: 35 / 138 Loss: 115.9116439819336 Tokens per Sec: 13352.962634905456
Epoch Step: 40 / 138 Loss: 110.7930679321289 Tokens per Sec: 13726.441327242213
Epoch Step: 45 / 138 Loss: 114.30066680908203 Tokens per Sec: 13470.581700841913
Epoch Step: 50 / 138 Loss: 111.45989227294922 Tokens per Sec: 13964.621452621453
Epoch Step: 55 / 138 Loss: 120.73406982421875 Tokens per Sec: 13504.7221542829
Epoch Step: 60 / 138 Loss: 80.07881927490234 Tokens per Sec: 13640.16886264401
Epoch Step: 65 / 138 Loss: 136.56195068359375 Tokens per Sec: 13512.958560924517
Epoch Step: 70 / 138 Loss: 88.77964782714844 Tokens per Sec: 13320.962527744327
Epoch Step: 75 / 138 Loss: 79.76227569580078 Tokens per Sec: 13282.922304263062
Epoch Step: 80 / 138 Loss: 116.22066497802734 Tokens per Sec: 13470.446956853855
Epoch Step: 85 / 138 Loss: 73.22309875488281 Tokens per Sec: 13764.728577936414
Epoch Step: 90 / 138 Loss: 170.36122131347656 Tokens per Sec: 13849.51584085759
Epoch Step: 95 / 138 Loss: 56.63081741333008 Tokens per Sec: 13073.68166937983
Epoch Step: 100 / 138 Loss: 194.23831176757812 Tokens per Sec: 13242.033030468268
Epoch Step: 105 / 138 Loss: 112.53304290771484 Tokens per Sec: 12063.071749401224
Epoch Step: 110 / 138 Loss: 89.557861328125 Tokens per Sec: 13228.307154329535
Epoch Step: 115 / 138 Loss: 54.68546676635742 Tokens per Sec: 13030.351476899608
Epoch Step: 120 / 138 Loss: 59.10018539428711 Tokens per Sec: 12966.203500383186
Epoch Step: 125 / 138 Loss: 74.58415222167969 Tokens per Sec: 13396.430374666537
Epoch Step: 130 / 138 Loss: 75.91502380371094 Tokens per Sec: 13013.312191733961
Epoch Step: 135 / 138 Loss: 99.71644592285156 Tokens per Sec: 12989.892676992167
Epoch ended with duration 0:00:47.585587
Train perplexity: 3.656203210616307
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < TYPE_1 ( ) ; for ( for ( : : : : values ) { VAR_4 . METHOD_3 ( ) ; } return return TYPE_5 . TYPE_5 . VAR_5 , STRING_1 , 0 , 0 , VAR_2 , VAR_2 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule ) { try { try { rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception ) { STRING_1 , STRING_1 . rule ( ) . METHOD_7 ( ) . e.toString ( ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 ) { VAR_3 = STRING_1 ; ( ( + ( + + + + ( STRING_4 ) , VAR_4 , VAR_4 , VAR_4 , node , mContext , node , node , VAR_3 ) ; }[0m
Epoch ended with duration 0:00:03.895308
Validation perplexity: 3.7108375646681453
Epoch 17 / 1000
Epoch Step: 5 / 138 Loss: 172.48789978027344 Tokens per Sec: 13505.062280843964
Epoch Step: 10 / 138 Loss: 91.09754180908203 Tokens per Sec: 13610.855149443136
Epoch Step: 15 / 138 Loss: 107.44965362548828 Tokens per Sec: 13754.423696499549
Epoch Step: 20 / 138 Loss: 76.66829681396484 Tokens per Sec: 13734.653965372194
Epoch Step: 25 / 138 Loss: 59.12959289550781 Tokens per Sec: 13460.889204761728
Epoch Step: 30 / 138 Loss: 60.27063751220703 Tokens per Sec: 13372.985404844945
Epoch Step: 35 / 138 Loss: 66.49542236328125 Tokens per Sec: 13216.364905759898
Epoch Step: 40 / 138 Loss: 104.67186737060547 Tokens per Sec: 13996.83271351933
Epoch Step: 45 / 138 Loss: 111.92633819580078 Tokens per Sec: 13608.122044007285
Epoch Step: 50 / 138 Loss: 62.703861236572266 Tokens per Sec: 13002.782882461095
Epoch Step: 55 / 138 Loss: 62.82294845581055 Tokens per Sec: 12835.975089215335
Epoch Step: 60 / 138 Loss: 69.7260971069336 Tokens per Sec: 13999.087223909033
Epoch Step: 65 / 138 Loss: 73.07080078125 Tokens per Sec: 13250.181192259191
Epoch Step: 70 / 138 Loss: 96.29025268554688 Tokens per Sec: 13147.223069417843
Epoch Step: 75 / 138 Loss: 172.41578674316406 Tokens per Sec: 13444.434296635865
Epoch Step: 80 / 138 Loss: 73.56275177001953 Tokens per Sec: 14267.973066105484
Epoch Step: 85 / 138 Loss: 68.35479736328125 Tokens per Sec: 14454.943539741274
Epoch Step: 90 / 138 Loss: 95.17657470703125 Tokens per Sec: 14273.55298630015
Epoch Step: 95 / 138 Loss: 62.30181884765625 Tokens per Sec: 13478.274167833295
Epoch Step: 100 / 138 Loss: 102.21233367919922 Tokens per Sec: 13612.295889129291
Epoch Step: 105 / 138 Loss: 60.5025520324707 Tokens per Sec: 12852.695998489562
Epoch Step: 110 / 138 Loss: 85.89126586914062 Tokens per Sec: 13679.94637565269
Epoch Step: 115 / 138 Loss: 93.04502868652344 Tokens per Sec: 12483.828997042416
Epoch Step: 120 / 138 Loss: 68.59208679199219 Tokens per Sec: 13516.515297966045
Epoch Step: 125 / 138 Loss: 74.08125305175781 Tokens per Sec: 12819.487172646765
Epoch Step: 130 / 138 Loss: 143.24102783203125 Tokens per Sec: 12445.925106692965
Epoch Step: 135 / 138 Loss: 59.42645263671875 Tokens per Sec: 13444.799964960172
Epoch ended with duration 0:00:47.400954
Train perplexity: 3.435336448498905
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( for ( ) ) { for ( : : : VAR_4 ) { METHOD_3 ( value ) ; } return return TYPE_5 . TYPE_5 . TYPE_5 ( VAR_5 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean boolean boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( != null ) { try { rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( catch ( e ) { STRING_1 , STRING_1 . rule ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 ) { VAR_3 = VAR_3 = ( ( + ( + + + ( STRING_4 ) ) , VAR_4 , VAR_4 , node , mContext , METHOD_3 ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.929381
Validation perplexity: 3.999484956014689
Epoch 18 / 1000
Epoch Step: 5 / 138 Loss: 105.75748443603516 Tokens per Sec: 13556.150606896537
Epoch Step: 10 / 138 Loss: 52.91979217529297 Tokens per Sec: 14098.231254319244
Epoch Step: 15 / 138 Loss: 68.09678649902344 Tokens per Sec: 14333.812117407333
Epoch Step: 20 / 138 Loss: 77.51932525634766 Tokens per Sec: 13347.704221106864
Epoch Step: 25 / 138 Loss: 105.02149963378906 Tokens per Sec: 13509.40323950257
Epoch Step: 30 / 138 Loss: 71.94493865966797 Tokens per Sec: 12663.417964008111
Epoch Step: 35 / 138 Loss: 121.91706848144531 Tokens per Sec: 14152.567366885172
Epoch Step: 40 / 138 Loss: 59.275718688964844 Tokens per Sec: 13669.167219480989
Epoch Step: 45 / 138 Loss: 100.8613052368164 Tokens per Sec: 13937.548771026852
Epoch Step: 50 / 138 Loss: 119.16980743408203 Tokens per Sec: 13132.04707780661
Epoch Step: 55 / 138 Loss: 64.77054595947266 Tokens per Sec: 13856.433816283161
Epoch Step: 60 / 138 Loss: 116.22815704345703 Tokens per Sec: 13619.915829619831
Epoch Step: 65 / 138 Loss: 90.42842864990234 Tokens per Sec: 13627.57353756274
Epoch Step: 70 / 138 Loss: 46.64641189575195 Tokens per Sec: 13609.309719456605
Epoch Step: 75 / 138 Loss: 93.6982192993164 Tokens per Sec: 12775.866114946157
Epoch Step: 80 / 138 Loss: 69.68003845214844 Tokens per Sec: 13346.006063956509
Epoch Step: 85 / 138 Loss: 100.03784942626953 Tokens per Sec: 14050.769795172913
Epoch Step: 90 / 138 Loss: 78.5886459350586 Tokens per Sec: 14060.002197192149
Epoch Step: 95 / 138 Loss: 53.687469482421875 Tokens per Sec: 12650.413256818476
Epoch Step: 100 / 138 Loss: 67.93546295166016 Tokens per Sec: 14426.411603673208
Epoch Step: 105 / 138 Loss: 75.4892578125 Tokens per Sec: 13600.254129467028
Epoch Step: 110 / 138 Loss: 65.1716537475586 Tokens per Sec: 13404.02611979934
Epoch Step: 115 / 138 Loss: 68.66645050048828 Tokens per Sec: 12810.163476788239
Epoch Step: 120 / 138 Loss: 82.02933502197266 Tokens per Sec: 12002.392427111197
Epoch Step: 125 / 138 Loss: 58.73859405517578 Tokens per Sec: 13166.232609097311
Epoch Step: 130 / 138 Loss: 73.63221740722656 Tokens per Sec: 13223.057726368432
Epoch Step: 135 / 138 Loss: 43.91950988769531 Tokens per Sec: 13777.60216306179
Epoch ended with duration 0:00:47.250277
Train perplexity: 3.3537253745356965
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : : values ) ; METHOD_3 ( METHOD_3 ( value ) ; } return TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule ) { != null ; rule rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( METHOD_5 ( STRING_1 , STRING_1 , METHOD_6 ( ) ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 ) { VAR_3 = VAR_3 = ( ( + ( + + + + + STRING_4 ) ) , METHOD_2 ( VAR_4 , VAR_4 , node , METHOD_3 ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.872220
Validation perplexity: 3.442343755000731
Epoch 19 / 1000
Epoch Step: 5 / 138 Loss: 74.61666107177734 Tokens per Sec: 13325.108388285254
Epoch Step: 10 / 138 Loss: 104.60653686523438 Tokens per Sec: 13950.906397827013
Epoch Step: 15 / 138 Loss: 46.07566452026367 Tokens per Sec: 13565.204975509174
Epoch Step: 20 / 138 Loss: 44.31301498413086 Tokens per Sec: 13990.53422455951
Epoch Step: 25 / 138 Loss: 84.67121887207031 Tokens per Sec: 13396.674169459831
Epoch Step: 30 / 138 Loss: 73.85525512695312 Tokens per Sec: 14465.593259703335
Epoch Step: 35 / 138 Loss: 155.57257080078125 Tokens per Sec: 12453.103005940171
Epoch Step: 40 / 138 Loss: 42.158390045166016 Tokens per Sec: 13148.261884572341
Epoch Step: 45 / 138 Loss: 103.18135070800781 Tokens per Sec: 13122.69149544422
Epoch Step: 50 / 138 Loss: 74.7375259399414 Tokens per Sec: 13892.647485049161
Epoch Step: 55 / 138 Loss: 89.35576629638672 Tokens per Sec: 13565.406291164334
Epoch Step: 60 / 138 Loss: 50.18815612792969 Tokens per Sec: 13835.511122178274
Epoch Step: 65 / 138 Loss: 56.11225128173828 Tokens per Sec: 14021.779414035042
Epoch Step: 70 / 138 Loss: 88.991943359375 Tokens per Sec: 13914.40410669353
Epoch Step: 75 / 138 Loss: 92.13016510009766 Tokens per Sec: 13571.253324982232
Epoch Step: 80 / 138 Loss: 95.6286849975586 Tokens per Sec: 13880.918650043677
Epoch Step: 85 / 138 Loss: 49.03227615356445 Tokens per Sec: 13655.444378423635
Epoch Step: 90 / 138 Loss: 94.32406616210938 Tokens per Sec: 13018.976516701037
Epoch Step: 95 / 138 Loss: 104.0230941772461 Tokens per Sec: 13947.113085461146
Epoch Step: 100 / 138 Loss: 81.73234558105469 Tokens per Sec: 13452.557286093786
Epoch Step: 105 / 138 Loss: 89.9452896118164 Tokens per Sec: 13566.38571567392
Epoch Step: 110 / 138 Loss: 98.03889465332031 Tokens per Sec: 13276.980020888308
Epoch Step: 115 / 138 Loss: 55.152313232421875 Tokens per Sec: 12833.727164373286
Epoch Step: 120 / 138 Loss: 55.257572174072266 Tokens per Sec: 13552.391721644439
Epoch Step: 125 / 138 Loss: 76.93501281738281 Tokens per Sec: 12931.177280500804
Epoch Step: 130 / 138 Loss: 93.8533935546875 Tokens per Sec: 13256.760566378503
Epoch Step: 135 / 138 Loss: 57.411643981933594 Tokens per Sec: 12196.129246289785
Epoch ended with duration 0:00:47.364314
Train perplexity: 3.148006595821118
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : values ) { VAR_4 . METHOD_3 ( value ) ; } return TYPE_5 . TYPE_5 . VAR_5 , VAR_5 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 ) { VAR_6 = TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule ) { try { rule rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; } catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( VAR_2 ) ) { != null ) { for ( node node : VAR_2 ) { VAR_3 = STRING_1 = ( ( + ( + + + + STRING_4 ) ) , METHOD_2 ( VAR_4 , node , mContext , METHOD_3 ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.799310
Validation perplexity: 2.93408908957239
Model saved best_on_validation!
Epoch 20 / 1000
Epoch Step: 5 / 138 Loss: 79.27759552001953 Tokens per Sec: 13049.850580072574
Epoch Step: 10 / 138 Loss: 89.63109588623047 Tokens per Sec: 13246.755776669124
Epoch Step: 15 / 138 Loss: 66.24884796142578 Tokens per Sec: 14030.622043062303
Epoch Step: 20 / 138 Loss: 102.94145202636719 Tokens per Sec: 13014.850804216403
Epoch Step: 25 / 138 Loss: 43.21376419067383 Tokens per Sec: 13879.641032166237
Epoch Step: 30 / 138 Loss: 47.54644775390625 Tokens per Sec: 14094.593224568513
Epoch Step: 35 / 138 Loss: 96.19029235839844 Tokens per Sec: 13269.972790421749
Epoch Step: 40 / 138 Loss: 95.28792572021484 Tokens per Sec: 14011.93041526283
Epoch Step: 45 / 138 Loss: 86.54947662353516 Tokens per Sec: 14068.636274039938
Epoch Step: 50 / 138 Loss: 88.41370391845703 Tokens per Sec: 13908.574742456733
Epoch Step: 55 / 138 Loss: 178.1591796875 Tokens per Sec: 12500.310211736234
Epoch Step: 60 / 138 Loss: 194.2401123046875 Tokens per Sec: 13534.468279277296
Epoch Step: 65 / 138 Loss: 161.9961700439453 Tokens per Sec: 13864.030159577522
Epoch Step: 70 / 138 Loss: 50.387027740478516 Tokens per Sec: 13878.68936625335
Epoch Step: 75 / 138 Loss: 79.01841735839844 Tokens per Sec: 13625.50446391842
Epoch Step: 80 / 138 Loss: 101.15829467773438 Tokens per Sec: 13846.944685265478
Epoch Step: 85 / 138 Loss: 87.99588775634766 Tokens per Sec: 13314.441401330898
Epoch Step: 90 / 138 Loss: 46.397239685058594 Tokens per Sec: 13622.012322687164
Epoch Step: 95 / 138 Loss: 58.90892791748047 Tokens per Sec: 14162.373571355887
Epoch Step: 100 / 138 Loss: 83.09811401367188 Tokens per Sec: 13501.464710412527
Epoch Step: 105 / 138 Loss: 63.97852325439453 Tokens per Sec: 13269.733881616023
Epoch Step: 110 / 138 Loss: 146.0571746826172 Tokens per Sec: 13473.239627670342
Epoch Step: 115 / 138 Loss: 91.3958740234375 Tokens per Sec: 13411.897531058316
Epoch Step: 120 / 138 Loss: 56.48508834838867 Tokens per Sec: 13333.603654380546
Epoch Step: 125 / 138 Loss: 69.42718505859375 Tokens per Sec: 13081.984013314132
Epoch Step: 130 / 138 Loss: 87.56400299072266 Tokens per Sec: 13564.45357063709
Epoch Step: 135 / 138 Loss: 88.13290405273438 Tokens per Sec: 12413.729250482116
Epoch ended with duration 0:00:47.229441
Train perplexity: 3.0579790308630623
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 . TYPE_5 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 ) { VAR_6 = TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; catch ( catch ( e ) { METHOD_5 ( STRING_1 , STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) . }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ) ) { for ( for ( node node ) { VAR_2 ) { VAR_3 = + ( ( + + + + + + STRING_4 ) ) ; METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.827959
Validation perplexity: 2.8591156180155064
Model saved best_on_validation!
Model saved checkpoint!
Epoch 21 / 1000
Epoch Step: 5 / 138 Loss: 61.966156005859375 Tokens per Sec: 13109.9449098436
Epoch Step: 10 / 138 Loss: 81.27455139160156 Tokens per Sec: 13973.839990444589
Epoch Step: 15 / 138 Loss: 84.89834594726562 Tokens per Sec: 13026.463659441728
Epoch Step: 20 / 138 Loss: 135.38876342773438 Tokens per Sec: 13433.339382321525
Epoch Step: 25 / 138 Loss: 74.20329284667969 Tokens per Sec: 13105.388538191199
Epoch Step: 30 / 138 Loss: 63.25294494628906 Tokens per Sec: 13767.92272369221
Epoch Step: 35 / 138 Loss: 52.5103645324707 Tokens per Sec: 14259.42170451158
Epoch Step: 40 / 138 Loss: 56.34840393066406 Tokens per Sec: 13709.316530714746
Epoch Step: 45 / 138 Loss: 57.51655960083008 Tokens per Sec: 13825.565378943691
Epoch Step: 50 / 138 Loss: 89.78028869628906 Tokens per Sec: 13749.250047105013
Epoch Step: 55 / 138 Loss: 71.68712615966797 Tokens per Sec: 13988.50513374378
Epoch Step: 60 / 138 Loss: 77.71321105957031 Tokens per Sec: 14206.168613849295
Epoch Step: 65 / 138 Loss: 90.76927947998047 Tokens per Sec: 12552.406007725871
Epoch Step: 70 / 138 Loss: 96.51966094970703 Tokens per Sec: 13559.19180409452
Epoch Step: 75 / 138 Loss: 86.61279296875 Tokens per Sec: 13210.715941804841
Epoch Step: 80 / 138 Loss: 62.357181549072266 Tokens per Sec: 13682.733394692612
Epoch Step: 85 / 138 Loss: 45.49060821533203 Tokens per Sec: 13946.837839759472
Epoch Step: 90 / 138 Loss: 50.9040641784668 Tokens per Sec: 14069.798148332098
Epoch Step: 95 / 138 Loss: 43.297664642333984 Tokens per Sec: 13654.487150923827
Epoch Step: 100 / 138 Loss: 80.91280364990234 Tokens per Sec: 13660.024897302363
Epoch Step: 105 / 138 Loss: 85.48491668701172 Tokens per Sec: 11657.766710991187
Epoch Step: 110 / 138 Loss: 69.15612030029297 Tokens per Sec: 12907.88347495155
Epoch Step: 115 / 138 Loss: 58.27568435668945 Tokens per Sec: 13251.496281610773
Epoch Step: 120 / 138 Loss: 90.730224609375 Tokens per Sec: 13013.34006125266
Epoch Step: 125 / 138 Loss: 74.39178466796875 Tokens per Sec: 13752.516676221634
Epoch Step: 130 / 138 Loss: 52.434364318847656 Tokens per Sec: 13349.399802002703
Epoch Step: 135 / 138 Loss: 53.05246353149414 Tokens per Sec: 13047.203219464269
Epoch ended with duration 0:00:47.378110
Train perplexity: 2.9567703933727123
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : : values ) ) { VAR_4 . METHOD_3 ( value ) ; return new TYPE_1 . TYPE_5 ( VAR_5 , VAR_5 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( if ( != null ) { rule rule rule METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 = ( ( STRING_2 ) ) ; + mContext . mContext ( VAR_4 , VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , null ) ) ; }[0m
Epoch ended with duration 0:00:03.866662
Validation perplexity: 3.388427656724242
Epoch 22 / 1000
Epoch Step: 5 / 138 Loss: 69.91545104980469 Tokens per Sec: 13806.733173259312
Epoch Step: 10 / 138 Loss: 68.97915649414062 Tokens per Sec: 12640.828006347605
Epoch Step: 15 / 138 Loss: 122.59321594238281 Tokens per Sec: 13641.209804493292
Epoch Step: 20 / 138 Loss: 90.05001831054688 Tokens per Sec: 13602.377693510076
Epoch Step: 25 / 138 Loss: 69.1617431640625 Tokens per Sec: 13793.806805747543
Epoch Step: 30 / 138 Loss: 88.25122833251953 Tokens per Sec: 13992.566112994235
Epoch Step: 35 / 138 Loss: 84.71935272216797 Tokens per Sec: 13593.44864466074
Epoch Step: 40 / 138 Loss: 45.954917907714844 Tokens per Sec: 14106.448253015338
Epoch Step: 45 / 138 Loss: 50.81309127807617 Tokens per Sec: 13865.726136322637
Epoch Step: 50 / 138 Loss: 53.24525451660156 Tokens per Sec: 14051.092527786433
Epoch Step: 55 / 138 Loss: 85.69032287597656 Tokens per Sec: 13631.129160723318
Epoch Step: 60 / 138 Loss: 64.20813751220703 Tokens per Sec: 13473.840141848746
Epoch Step: 65 / 138 Loss: 64.74755096435547 Tokens per Sec: 13773.115409875129
Epoch Step: 70 / 138 Loss: 92.83430480957031 Tokens per Sec: 13358.64543367158
Epoch Step: 75 / 138 Loss: 90.97335815429688 Tokens per Sec: 13650.066599790083
Epoch Step: 80 / 138 Loss: 45.67453384399414 Tokens per Sec: 13144.61821870945
Epoch Step: 85 / 138 Loss: 54.160701751708984 Tokens per Sec: 13525.23820718454
Epoch Step: 90 / 138 Loss: 69.15662384033203 Tokens per Sec: 14603.47674128938
Epoch Step: 95 / 138 Loss: 83.49801635742188 Tokens per Sec: 13656.92240151948
Epoch Step: 100 / 138 Loss: 78.4902572631836 Tokens per Sec: 13816.83658295925
Epoch Step: 105 / 138 Loss: 170.6292724609375 Tokens per Sec: 12057.969074623405
Epoch Step: 110 / 138 Loss: 198.3876953125 Tokens per Sec: 13091.574398257835
Epoch Step: 115 / 138 Loss: 45.273128509521484 Tokens per Sec: 12940.514699849582
Epoch Step: 120 / 138 Loss: 145.39517211914062 Tokens per Sec: 12920.550130430742
Epoch Step: 125 / 138 Loss: 72.37732696533203 Tokens per Sec: 13597.49955558928
Epoch Step: 130 / 138 Loss: 81.64865112304688 Tokens per Sec: 13400.115480148603
Epoch Step: 135 / 138 Loss: 60.62852096557617 Tokens per Sec: 13436.969091586328
Epoch ended with duration 0:00:47.183791
Train perplexity: 2.8808713761297065
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = > VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( : : : values ) ) { VAR_4 . METHOD_3 ( value ) ; return return new TYPE_1 . TYPE_5 ( VAR_5 , VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 , METHOD_5 ( VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 = rule = VAR_1 . VAR_1 . METHOD_3 ( ) ; if ( rule != null ) { try { rule rule METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) { ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( ( + + + + + STRING_4 ) ) , METHOD_2 ( VAR_4 , node , mContext , METHOD_3 ( node , node , VAR_3 , null ) ) ; }[0m
Epoch ended with duration 0:00:03.830892
Validation perplexity: 2.8084930343320678
Model saved best_on_validation!
Epoch 23 / 1000
Epoch Step: 5 / 138 Loss: 65.57659149169922 Tokens per Sec: 13397.005327399016
Epoch Step: 10 / 138 Loss: 58.43041229248047 Tokens per Sec: 13645.489417508299
Epoch Step: 15 / 138 Loss: 44.06508255004883 Tokens per Sec: 14473.116609182063
Epoch Step: 20 / 138 Loss: 67.41246032714844 Tokens per Sec: 13480.37380040879
Epoch Step: 25 / 138 Loss: 70.98131561279297 Tokens per Sec: 13844.248968298269
Epoch Step: 30 / 138 Loss: 82.5873031616211 Tokens per Sec: 13012.677589948016
Epoch Step: 35 / 138 Loss: 53.60518264770508 Tokens per Sec: 13432.881555158474
Epoch Step: 40 / 138 Loss: 36.54627227783203 Tokens per Sec: 13850.34847287187
Epoch Step: 45 / 138 Loss: 169.62916564941406 Tokens per Sec: 13330.47569655197
Epoch Step: 50 / 138 Loss: 61.871742248535156 Tokens per Sec: 13936.77502094052
Epoch Step: 55 / 138 Loss: 46.78727722167969 Tokens per Sec: 13048.570420731148
Epoch Step: 60 / 138 Loss: 53.92491149902344 Tokens per Sec: 13536.590054815922
Epoch Step: 65 / 138 Loss: 87.07218933105469 Tokens per Sec: 14230.561865212389
Epoch Step: 70 / 138 Loss: 71.82518005371094 Tokens per Sec: 13809.356699862898
Epoch Step: 75 / 138 Loss: 79.7420883178711 Tokens per Sec: 13615.429136906403
Epoch Step: 80 / 138 Loss: 92.54420471191406 Tokens per Sec: 13213.456385357124
Epoch Step: 85 / 138 Loss: 51.49715042114258 Tokens per Sec: 12557.562265417406
Epoch Step: 90 / 138 Loss: 61.002017974853516 Tokens per Sec: 13557.729159077933
Epoch Step: 95 / 138 Loss: 82.82772064208984 Tokens per Sec: 13309.479981977276
Epoch Step: 100 / 138 Loss: 69.53182220458984 Tokens per Sec: 14004.36082012351
Epoch Step: 105 / 138 Loss: 84.00641632080078 Tokens per Sec: 13172.678115176672
Epoch Step: 110 / 138 Loss: 71.71915435791016 Tokens per Sec: 13435.565643089443
Epoch Step: 115 / 138 Loss: 53.0386848449707 Tokens per Sec: 13212.008097877495
Epoch Step: 120 / 138 Loss: 79.64793395996094 Tokens per Sec: 12013.562346211502
Epoch Step: 125 / 138 Loss: 52.69563674926758 Tokens per Sec: 12989.689105717374
Epoch Step: 130 / 138 Loss: 62.93345642089844 Tokens per Sec: 12885.29308540667
Epoch Step: 135 / 138 Loss: 50.74557113647461 Tokens per Sec: 13528.08228967361
Epoch ended with duration 0:00:47.566556
Train perplexity: 3.058628829144338
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : : values ) { VAR_4 . METHOD_3 ( value ) ; return return new TYPE_1 ( TYPE_5 . VAR_5 , VAR_5 , STRING_1 , STRING_2 , 0 , 0 , VAR_2 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 ) { TYPE_5 TYPE_5 = rule = METHOD_2 ( METHOD_3 ( ) ) ; if ( rule != null ) { try { rule rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_2 ) ) ; ( mContext ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , null ) ) ; }[0m
Epoch ended with duration 0:00:03.800198
Validation perplexity: 2.596441345098639
Model saved best_on_validation!
Epoch 24 / 1000
Epoch Step: 5 / 138 Loss: 90.50192260742188 Tokens per Sec: 13202.389514583203
Epoch Step: 10 / 138 Loss: 52.91520309448242 Tokens per Sec: 14355.427155286594
Epoch Step: 15 / 138 Loss: 60.368892669677734 Tokens per Sec: 13551.009042355568
Epoch Step: 20 / 138 Loss: 68.50334167480469 Tokens per Sec: 13146.7523775368
Epoch Step: 25 / 138 Loss: 210.47891235351562 Tokens per Sec: 13125.1770244175
Epoch Step: 30 / 138 Loss: 62.30836868286133 Tokens per Sec: 13559.85185358646
Epoch Step: 35 / 138 Loss: 170.72801208496094 Tokens per Sec: 13984.925950888426
Epoch Step: 40 / 138 Loss: 202.37417602539062 Tokens per Sec: 13632.03153011091
Epoch Step: 45 / 138 Loss: 56.46001434326172 Tokens per Sec: 13436.961896821582
Epoch Step: 50 / 138 Loss: 56.17286682128906 Tokens per Sec: 13197.223608815939
Epoch Step: 55 / 138 Loss: 85.62483978271484 Tokens per Sec: 13605.97488347579
Epoch Step: 60 / 138 Loss: 74.00695037841797 Tokens per Sec: 13712.498813194057
Epoch Step: 65 / 138 Loss: 85.28524017333984 Tokens per Sec: 14316.53033825482
Epoch Step: 70 / 138 Loss: 53.594032287597656 Tokens per Sec: 12937.301478320473
Epoch Step: 75 / 138 Loss: 87.03443908691406 Tokens per Sec: 13157.986428647386
Epoch Step: 80 / 138 Loss: 81.32532501220703 Tokens per Sec: 14224.991880921392
Epoch Step: 85 / 138 Loss: 53.826202392578125 Tokens per Sec: 14528.85660600154
Epoch Step: 90 / 138 Loss: 71.89158630371094 Tokens per Sec: 13847.18457307513
Epoch Step: 95 / 138 Loss: 92.6656723022461 Tokens per Sec: 12600.992869268073
Epoch Step: 100 / 138 Loss: 33.8160285949707 Tokens per Sec: 12920.051051277733
Epoch Step: 105 / 138 Loss: 48.0557861328125 Tokens per Sec: 13163.184046723341
Epoch Step: 110 / 138 Loss: 47.88079071044922 Tokens per Sec: 13470.249753946662
Epoch Step: 115 / 138 Loss: 86.3983383178711 Tokens per Sec: 11962.722713679881
Epoch Step: 120 / 138 Loss: 83.51587677001953 Tokens per Sec: 13494.030208396456
Epoch Step: 125 / 138 Loss: 72.73516845703125 Tokens per Sec: 13539.403188706892
Epoch Step: 130 / 138 Loss: 50.98725509643555 Tokens per Sec: 13146.629427452246
Epoch Step: 135 / 138 Loss: 64.83444213867188 Tokens per Sec: 13447.950656655825
Epoch ended with duration 0:00:47.396863
Train perplexity: 2.875426355883203
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : : values ) { VAR_4 . METHOD_3 ( value ) ; return return new TYPE_1 ( TYPE_5 . VAR_5 , VAR_5 , STRING_1 , STRING_2 , STRING_2 , 0 , VAR_2 , METHOD_5 ( METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.832173
Validation perplexity: 2.82416944362275
Epoch 25 / 1000
Epoch Step: 5 / 138 Loss: 61.2730712890625 Tokens per Sec: 13845.341835612358
Epoch Step: 10 / 138 Loss: 73.51145935058594 Tokens per Sec: 13417.599343427628
Epoch Step: 15 / 138 Loss: 147.74818420410156 Tokens per Sec: 14048.91437091548
Epoch Step: 20 / 138 Loss: 65.49620819091797 Tokens per Sec: 13596.043071426007
Epoch Step: 25 / 138 Loss: 59.7738037109375 Tokens per Sec: 13630.698870922432
Epoch Step: 30 / 138 Loss: 44.19630432128906 Tokens per Sec: 13684.664474447523
Epoch Step: 35 / 138 Loss: 36.307456970214844 Tokens per Sec: 13764.876211854951
Epoch Step: 40 / 138 Loss: 73.62088012695312 Tokens per Sec: 13995.480400371394
Epoch Step: 45 / 138 Loss: 84.43171691894531 Tokens per Sec: 13149.787108563949
Epoch Step: 50 / 138 Loss: 52.211021423339844 Tokens per Sec: 13218.046374407097
Epoch Step: 55 / 138 Loss: 76.31627655029297 Tokens per Sec: 13619.017556188097
Epoch Step: 60 / 138 Loss: 50.25023651123047 Tokens per Sec: 13716.6416360679
Epoch Step: 65 / 138 Loss: 45.75440979003906 Tokens per Sec: 13844.120982349028
Epoch Step: 70 / 138 Loss: 38.022586822509766 Tokens per Sec: 13526.566434741095
Epoch Step: 75 / 138 Loss: 54.874229431152344 Tokens per Sec: 13533.319579160627
Epoch Step: 80 / 138 Loss: 80.31913757324219 Tokens per Sec: 13654.768521263557
Epoch Step: 85 / 138 Loss: 76.51010131835938 Tokens per Sec: 13394.01885813406
Epoch Step: 90 / 138 Loss: 57.80430603027344 Tokens per Sec: 13500.474230754935
Epoch Step: 95 / 138 Loss: 40.50796890258789 Tokens per Sec: 13840.62154349969
Epoch Step: 100 / 138 Loss: 63.886383056640625 Tokens per Sec: 14210.300434678393
Epoch Step: 105 / 138 Loss: 54.8759880065918 Tokens per Sec: 13461.990690124383
Epoch Step: 110 / 138 Loss: 51.572689056396484 Tokens per Sec: 13314.241475805393
Epoch Step: 115 / 138 Loss: 48.88572692871094 Tokens per Sec: 12437.171928216605
Epoch Step: 120 / 138 Loss: 77.04439544677734 Tokens per Sec: 13261.824250162574
Epoch Step: 125 / 138 Loss: 68.14822387695312 Tokens per Sec: 13703.0245930262
Epoch Step: 130 / 138 Loss: 58.96017837524414 Tokens per Sec: 12705.174908207035
Epoch Step: 135 / 138 Loss: 39.22134780883789 Tokens per Sec: 13289.75436397519
Epoch ended with duration 0:00:47.165521
Train perplexity: 2.55254051307655
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( for ( value ) { : : values ( values ) ; METHOD_3 ( value ) ; return return new TYPE_1 ( TYPE_5 . VAR_5 , VAR_5 , STRING_1 , STRING_2 , 0 , 0 , VAR_2 , METHOD_5 ( METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( for ( node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node . mContext ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.842684
Validation perplexity: 2.8260750658975415
Model saved checkpoint!
Epoch 26 / 1000
Epoch Step: 5 / 138 Loss: 62.73389434814453 Tokens per Sec: 13514.0381450836
Epoch Step: 10 / 138 Loss: 60.11921691894531 Tokens per Sec: 13180.217584756405
Epoch Step: 15 / 138 Loss: 79.03238677978516 Tokens per Sec: 14205.304965771522
Epoch Step: 20 / 138 Loss: 161.48443603515625 Tokens per Sec: 13058.077509520273
Epoch Step: 25 / 138 Loss: 57.15287780761719 Tokens per Sec: 13184.20108531713
Epoch Step: 30 / 138 Loss: 77.08367919921875 Tokens per Sec: 13375.443241826077
Epoch Step: 35 / 138 Loss: 52.84104919433594 Tokens per Sec: 14175.201500265968
Epoch Step: 40 / 138 Loss: 76.31909942626953 Tokens per Sec: 13286.627663372406
Epoch Step: 45 / 138 Loss: 120.6919174194336 Tokens per Sec: 14002.146754510255
Epoch Step: 50 / 138 Loss: 195.42764282226562 Tokens per Sec: 13900.596754437123
Epoch Step: 55 / 138 Loss: 58.84942626953125 Tokens per Sec: 13781.692114226746
Epoch Step: 60 / 138 Loss: 65.42216491699219 Tokens per Sec: 13536.357723326457
Epoch Step: 65 / 138 Loss: 68.03926086425781 Tokens per Sec: 13714.543834198264
Epoch Step: 70 / 138 Loss: 75.32927703857422 Tokens per Sec: 13888.56715869294
Epoch Step: 75 / 138 Loss: 65.65669250488281 Tokens per Sec: 14277.654710534245
Epoch Step: 80 / 138 Loss: 39.29746627807617 Tokens per Sec: 13561.315839520561
Epoch Step: 85 / 138 Loss: 52.3777961730957 Tokens per Sec: 13229.379312728432
Epoch Step: 90 / 138 Loss: 53.398345947265625 Tokens per Sec: 13135.579057976693
Epoch Step: 95 / 138 Loss: 120.64678192138672 Tokens per Sec: 13982.030824964017
Epoch Step: 100 / 138 Loss: 78.37400817871094 Tokens per Sec: 13670.621276385045
Epoch Step: 105 / 138 Loss: 164.35189819335938 Tokens per Sec: 12688.188794083917
Epoch Step: 110 / 138 Loss: 60.121456146240234 Tokens per Sec: 13141.143698881906
Epoch Step: 115 / 138 Loss: 52.573360443115234 Tokens per Sec: 13674.262145981358
Epoch Step: 120 / 138 Loss: 55.56081008911133 Tokens per Sec: 12886.164386059792
Epoch Step: 125 / 138 Loss: 90.42892456054688 Tokens per Sec: 13261.887820126054
Epoch Step: 130 / 138 Loss: 76.57817840576172 Tokens per Sec: 12615.338429464906
Epoch Step: 135 / 138 Loss: 63.726966857910156 Tokens per Sec: 13347.094396175726
Epoch ended with duration 0:00:47.300995
Train perplexity: 2.654911422993115
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; return return new TYPE_1 . TYPE_5 ( METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , METHOD_5 ( METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( TYPE_1 node node : VAR_2 ) { VAR_3 = STRING_1 ; ( ( ( + + + + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , null ) ) ; } }[0m
Epoch ended with duration 0:00:03.791357
Validation perplexity: 2.5994354405101854
Epoch 27 / 1000
Epoch Step: 5 / 138 Loss: 64.26518249511719 Tokens per Sec: 13706.227991152778
Epoch Step: 10 / 138 Loss: 65.07688903808594 Tokens per Sec: 13274.372873128443
Epoch Step: 15 / 138 Loss: 73.28811645507812 Tokens per Sec: 13977.815524340875
Epoch Step: 20 / 138 Loss: 35.9948616027832 Tokens per Sec: 13778.539568869759
Epoch Step: 25 / 138 Loss: 47.587310791015625 Tokens per Sec: 13478.51516124867
Epoch Step: 30 / 138 Loss: 38.38788986206055 Tokens per Sec: 13752.873328324484
Epoch Step: 35 / 138 Loss: 49.28668212890625 Tokens per Sec: 13478.348318989023
Epoch Step: 40 / 138 Loss: 53.508079528808594 Tokens per Sec: 13209.100674152924
Epoch Step: 45 / 138 Loss: 230.76205444335938 Tokens per Sec: 13898.779143234571
Epoch Step: 50 / 138 Loss: 49.03946304321289 Tokens per Sec: 13734.566294106255
Epoch Step: 55 / 138 Loss: 244.1814422607422 Tokens per Sec: 13744.826623533863
Epoch Step: 60 / 138 Loss: 53.12672805786133 Tokens per Sec: 14494.322726120272
Epoch Step: 65 / 138 Loss: 76.29633331298828 Tokens per Sec: 13595.744254393581
Epoch Step: 70 / 138 Loss: 41.18031311035156 Tokens per Sec: 12610.807299750892
Epoch Step: 75 / 138 Loss: 62.16697311401367 Tokens per Sec: 13102.208066289179
Epoch Step: 80 / 138 Loss: 47.52684020996094 Tokens per Sec: 13521.137483120694
Epoch Step: 85 / 138 Loss: 149.26327514648438 Tokens per Sec: 13463.169257383599
Epoch Step: 90 / 138 Loss: 94.8640365600586 Tokens per Sec: 13176.425048802625
Epoch Step: 95 / 138 Loss: 47.558990478515625 Tokens per Sec: 13844.29711842016
Epoch Step: 100 / 138 Loss: 67.32562255859375 Tokens per Sec: 14006.294135882374
Epoch Step: 105 / 138 Loss: 81.00759887695312 Tokens per Sec: 13459.0659905494
Epoch Step: 110 / 138 Loss: 161.80006408691406 Tokens per Sec: 11533.150810321506
Epoch Step: 115 / 138 Loss: 56.693294525146484 Tokens per Sec: 13339.477105393094
Epoch Step: 120 / 138 Loss: 58.91719055175781 Tokens per Sec: 13645.720010370982
Epoch Step: 125 / 138 Loss: 70.5524673461914 Tokens per Sec: 12775.90528279569
Epoch Step: 130 / 138 Loss: 63.55077362060547 Tokens per Sec: 12972.985898489182
Epoch Step: 135 / 138 Loss: 66.32321166992188 Tokens per Sec: 13602.691037987934
Epoch ended with duration 0:00:47.432087
Train perplexity: 2.6664706823691646
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( TYPE_1 node node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ; }[0m
Epoch ended with duration 0:00:03.859531
Validation perplexity: 2.7251854248713414
Epoch 28 / 1000
Epoch Step: 5 / 138 Loss: 53.98872756958008 Tokens per Sec: 13010.856684289825
Epoch Step: 10 / 138 Loss: 78.5186767578125 Tokens per Sec: 13515.294927174182
Epoch Step: 15 / 138 Loss: 145.95423889160156 Tokens per Sec: 13459.9623405132
Epoch Step: 20 / 138 Loss: 75.05538177490234 Tokens per Sec: 12867.28003351652
Epoch Step: 25 / 138 Loss: 38.50495147705078 Tokens per Sec: 13500.735965276515
Epoch Step: 30 / 138 Loss: 64.98895263671875 Tokens per Sec: 13459.360518724743
Epoch Step: 35 / 138 Loss: 63.24079895019531 Tokens per Sec: 13674.111486916709
Epoch Step: 40 / 138 Loss: 79.0566177368164 Tokens per Sec: 14035.533426990305
Epoch Step: 45 / 138 Loss: 79.40547943115234 Tokens per Sec: 12366.97130668194
Epoch Step: 50 / 138 Loss: 65.93750762939453 Tokens per Sec: 13656.956036887694
Epoch Step: 55 / 138 Loss: 51.74799346923828 Tokens per Sec: 14220.897996520975
Epoch Step: 60 / 138 Loss: 43.4028205871582 Tokens per Sec: 13452.015731636166
Epoch Step: 65 / 138 Loss: 81.294921875 Tokens per Sec: 13604.618046761681
Epoch Step: 70 / 138 Loss: 38.546875 Tokens per Sec: 13818.141477203188
Epoch Step: 75 / 138 Loss: 67.73736572265625 Tokens per Sec: 14149.306321633727
Epoch Step: 80 / 138 Loss: 91.36438751220703 Tokens per Sec: 13636.36721899569
Epoch Step: 85 / 138 Loss: 44.433921813964844 Tokens per Sec: 13437.322601538077
Epoch Step: 90 / 138 Loss: 139.1781005859375 Tokens per Sec: 13240.595759824664
Epoch Step: 95 / 138 Loss: 208.9370574951172 Tokens per Sec: 13545.71887166552
Epoch Step: 100 / 138 Loss: 73.59998321533203 Tokens per Sec: 13467.872061387801
Epoch Step: 105 / 138 Loss: 145.26275634765625 Tokens per Sec: 13192.20057306512
Epoch Step: 110 / 138 Loss: 66.42097473144531 Tokens per Sec: 12980.597294203215
Epoch Step: 115 / 138 Loss: 55.33626174926758 Tokens per Sec: 13219.080236375574
Epoch Step: 120 / 138 Loss: 71.17034149169922 Tokens per Sec: 13464.86316402122
Epoch Step: 125 / 138 Loss: 35.928794860839844 Tokens per Sec: 11902.221765262098
Epoch Step: 130 / 138 Loss: 50.74201965332031 Tokens per Sec: 13476.76589835098
Epoch Step: 135 / 138 Loss: 41.598995208740234 Tokens per Sec: 13389.38511050694
Epoch ended with duration 0:00:47.590795
Train perplexity: 2.7253577224218493
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( TYPE_1 node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; + mContext ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node . mContext ( node , node , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.835535
Validation perplexity: 2.572573972065849
Model saved best_on_validation!
Epoch 29 / 1000
Epoch Step: 5 / 138 Loss: 95.64824676513672 Tokens per Sec: 12868.051126129272
Epoch Step: 10 / 138 Loss: 37.865928649902344 Tokens per Sec: 13791.58140741923
Epoch Step: 15 / 138 Loss: 49.462528228759766 Tokens per Sec: 13228.919285730584
Epoch Step: 20 / 138 Loss: 43.36937713623047 Tokens per Sec: 13484.548662914682
Epoch Step: 25 / 138 Loss: 60.4484977722168 Tokens per Sec: 14047.68887718421
Epoch Step: 30 / 138 Loss: 52.970035552978516 Tokens per Sec: 13029.766529463874
Epoch Step: 35 / 138 Loss: 61.89922332763672 Tokens per Sec: 13981.228216230269
Epoch Step: 40 / 138 Loss: 58.67025375366211 Tokens per Sec: 13799.567798700047
Epoch Step: 45 / 138 Loss: 72.8897933959961 Tokens per Sec: 14229.935657065338
Epoch Step: 50 / 138 Loss: 35.05644989013672 Tokens per Sec: 13544.691821686703
Epoch Step: 55 / 138 Loss: 76.5197982788086 Tokens per Sec: 13443.697123333905
Epoch Step: 60 / 138 Loss: 57.44942855834961 Tokens per Sec: 13688.120845749523
Epoch Step: 65 / 138 Loss: 54.370601654052734 Tokens per Sec: 13625.216413392
Epoch Step: 70 / 138 Loss: 41.325462341308594 Tokens per Sec: 13431.09325316345
Epoch Step: 75 / 138 Loss: 72.60136413574219 Tokens per Sec: 13398.12000420074
Epoch Step: 80 / 138 Loss: 205.69749450683594 Tokens per Sec: 12971.325990699748
Epoch Step: 85 / 138 Loss: 67.3788070678711 Tokens per Sec: 14290.055320165602
Epoch Step: 90 / 138 Loss: 45.2749137878418 Tokens per Sec: 13571.677671381392
Epoch Step: 95 / 138 Loss: 43.937744140625 Tokens per Sec: 12881.170475523528
Epoch Step: 100 / 138 Loss: 41.765384674072266 Tokens per Sec: 13039.536152468712
Epoch Step: 105 / 138 Loss: 61.22974395751953 Tokens per Sec: 12098.194368882567
Epoch Step: 110 / 138 Loss: 54.70577621459961 Tokens per Sec: 13125.882022296031
Epoch Step: 115 / 138 Loss: 52.31636428833008 Tokens per Sec: 12879.35543769833
Epoch Step: 120 / 138 Loss: 72.6529541015625 Tokens per Sec: 13566.631618924093
Epoch Step: 125 / 138 Loss: 54.814414978027344 Tokens per Sec: 13499.288774190325
Epoch Step: 130 / 138 Loss: 63.069637298583984 Tokens per Sec: 12658.783514145849
Epoch Step: 135 / 138 Loss: 69.11183166503906 Tokens per Sec: 12850.984304062611
Epoch ended with duration 0:00:47.642240
Train perplexity: 2.718242875894523
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 = VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , VAR_4 , VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) ) { for ( TYPE_1 node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 ) , }[0m
Epoch ended with duration 0:00:03.894552
Validation perplexity: 3.1982113500426417
Epoch 30 / 1000
Epoch Step: 5 / 138 Loss: 43.721187591552734 Tokens per Sec: 13548.930582483687
Epoch Step: 10 / 138 Loss: 51.50798416137695 Tokens per Sec: 13574.09100328635
Epoch Step: 15 / 138 Loss: 40.32374954223633 Tokens per Sec: 13838.061157643413
Epoch Step: 20 / 138 Loss: 45.589630126953125 Tokens per Sec: 13941.444270460162
Epoch Step: 25 / 138 Loss: 39.281307220458984 Tokens per Sec: 14150.754265597578
Epoch Step: 30 / 138 Loss: 46.79772186279297 Tokens per Sec: 13136.158276365763
Epoch Step: 35 / 138 Loss: 74.63652801513672 Tokens per Sec: 14152.540145157238
Epoch Step: 40 / 138 Loss: 57.20389938354492 Tokens per Sec: 12981.541638592818
Epoch Step: 45 / 138 Loss: 41.08705520629883 Tokens per Sec: 14353.544061882638
Epoch Step: 50 / 138 Loss: 62.29867935180664 Tokens per Sec: 13686.081934545375
Epoch Step: 55 / 138 Loss: 66.56912994384766 Tokens per Sec: 13250.648226576877
Epoch Step: 60 / 138 Loss: 58.66857147216797 Tokens per Sec: 13312.56328577793
Epoch Step: 65 / 138 Loss: 35.29855728149414 Tokens per Sec: 12888.927204971953
Epoch Step: 70 / 138 Loss: 43.63673782348633 Tokens per Sec: 13837.079115172253
Epoch Step: 75 / 138 Loss: 64.40927124023438 Tokens per Sec: 13651.788648753962
Epoch Step: 80 / 138 Loss: 72.09147644042969 Tokens per Sec: 14121.302587214319
Epoch Step: 85 / 138 Loss: 57.44593811035156 Tokens per Sec: 14060.592275281319
Epoch Step: 90 / 138 Loss: 234.7701416015625 Tokens per Sec: 13702.809233170789
Epoch Step: 95 / 138 Loss: 64.48189544677734 Tokens per Sec: 13427.710493777196
Epoch Step: 100 / 138 Loss: 29.842529296875 Tokens per Sec: 14239.669900761855
Epoch Step: 105 / 138 Loss: 39.39558792114258 Tokens per Sec: 12721.117191943207
Epoch Step: 110 / 138 Loss: 158.2833251953125 Tokens per Sec: 12909.357461151707
Epoch Step: 115 / 138 Loss: 40.2193603515625 Tokens per Sec: 13170.25683569978
Epoch Step: 120 / 138 Loss: 68.3368148803711 Tokens per Sec: 13475.622463222462
Epoch Step: 125 / 138 Loss: 78.36367797851562 Tokens per Sec: 12983.415189610327
Epoch Step: 130 / 138 Loss: 78.94532775878906 Tokens per Sec: 12006.490078309504
Epoch Step: 135 / 138 Loss: 49.70832824707031 Tokens per Sec: 13434.824433931137
Epoch ended with duration 0:00:47.320042
Train perplexity: 2.4371229671629027
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , VAR_4 , VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . VAR_1 . ) ; if ( rule ) { if ( != null ) { try { rule . METHOD_4 ( VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 node node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) ) ; mContext . STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , null ) , null ) ; } }[0m
Epoch ended with duration 0:00:03.827000
Validation perplexity: 2.794061873612426
Model saved checkpoint!
Epoch 31 / 1000
Epoch Step: 5 / 138 Loss: 49.7153434753418 Tokens per Sec: 12871.795765447665
Epoch Step: 10 / 138 Loss: 79.48570251464844 Tokens per Sec: 13274.190073333091
Epoch Step: 15 / 138 Loss: 58.61064910888672 Tokens per Sec: 13806.614420037244
Epoch Step: 20 / 138 Loss: 51.095611572265625 Tokens per Sec: 13796.242944068908
Epoch Step: 25 / 138 Loss: 35.10118103027344 Tokens per Sec: 13380.704596455524
Epoch Step: 30 / 138 Loss: 59.984554290771484 Tokens per Sec: 13589.795503851165
Epoch Step: 35 / 138 Loss: 70.10655212402344 Tokens per Sec: 14202.574476502812
Epoch Step: 40 / 138 Loss: 199.1744842529297 Tokens per Sec: 13787.764881245748
Epoch Step: 45 / 138 Loss: 68.0061264038086 Tokens per Sec: 13079.125341426248
Epoch Step: 50 / 138 Loss: 58.69746398925781 Tokens per Sec: 13868.758570254471
Epoch Step: 55 / 138 Loss: 62.429832458496094 Tokens per Sec: 13795.236852664177
Epoch Step: 60 / 138 Loss: 64.41697692871094 Tokens per Sec: 13713.216784613574
Epoch Step: 65 / 138 Loss: 44.931304931640625 Tokens per Sec: 13365.933137897578
Epoch Step: 70 / 138 Loss: 43.040103912353516 Tokens per Sec: 13636.812545990279
Epoch Step: 75 / 138 Loss: 72.62316131591797 Tokens per Sec: 13474.221079973002
Epoch Step: 80 / 138 Loss: 64.12005615234375 Tokens per Sec: 13749.209936895037
Epoch Step: 85 / 138 Loss: 57.48051834106445 Tokens per Sec: 13279.845928101036
Epoch Step: 90 / 138 Loss: 40.646141052246094 Tokens per Sec: 13934.349335458233
Epoch Step: 95 / 138 Loss: 61.853599548339844 Tokens per Sec: 13572.457581599125
Epoch Step: 100 / 138 Loss: 59.994815826416016 Tokens per Sec: 14212.871634282023
Epoch Step: 105 / 138 Loss: 70.73912811279297 Tokens per Sec: 13750.2627001624
Epoch Step: 110 / 138 Loss: 44.142005920410156 Tokens per Sec: 12670.456956824828
Epoch Step: 115 / 138 Loss: 66.73939514160156 Tokens per Sec: 13016.022641200603
Epoch Step: 120 / 138 Loss: 46.46635055541992 Tokens per Sec: 12765.013931361016
Epoch Step: 125 / 138 Loss: 49.90304183959961 Tokens per Sec: 13125.67435141661
Epoch Step: 130 / 138 Loss: 42.40040969848633 Tokens per Sec: 12290.603632719785
Epoch Step: 135 / 138 Loss: 44.905975341796875 Tokens per Sec: 13065.823388308429
Epoch ended with duration 0:00:47.421859
Train perplexity: 2.336142980927082
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) , STRING_3 ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( METHOD_6 ( ) . METHOD_7 ( ) ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( node node : VAR_2 ) { java.lang.String VAR_3 = + ( ( STRING_2 ) + + + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 ) , null ) ; } }[0m
Epoch ended with duration 0:00:03.792892
Validation perplexity: 2.250162191675932
Model saved best_on_validation!
Epoch 32 / 1000
Epoch Step: 5 / 138 Loss: 59.193115234375 Tokens per Sec: 13643.216150937023
Epoch Step: 10 / 138 Loss: 59.97997283935547 Tokens per Sec: 13076.120674028032
Epoch Step: 15 / 138 Loss: 35.647308349609375 Tokens per Sec: 13905.694099516355
Epoch Step: 20 / 138 Loss: 66.63275146484375 Tokens per Sec: 13916.935739483628
Epoch Step: 25 / 138 Loss: 170.6501007080078 Tokens per Sec: 13857.252893843342
Epoch Step: 30 / 138 Loss: 31.59360122680664 Tokens per Sec: 13168.295298559522
Epoch Step: 35 / 138 Loss: 35.49775314331055 Tokens per Sec: 14189.072813054385
Epoch Step: 40 / 138 Loss: 56.520973205566406 Tokens per Sec: 13412.893303594192
Epoch Step: 45 / 138 Loss: 27.64698600769043 Tokens per Sec: 13974.997227241383
Epoch Step: 50 / 138 Loss: 40.79017639160156 Tokens per Sec: 13300.148862202888
Epoch Step: 55 / 138 Loss: 47.40628433227539 Tokens per Sec: 12977.093800289113
Epoch Step: 60 / 138 Loss: 50.83226013183594 Tokens per Sec: 13201.154149292966
Epoch Step: 65 / 138 Loss: 79.04502868652344 Tokens per Sec: 13454.46885549019
Epoch Step: 70 / 138 Loss: 52.512046813964844 Tokens per Sec: 13534.328684642449
Epoch Step: 75 / 138 Loss: 44.96782684326172 Tokens per Sec: 13063.396633828957
Epoch Step: 80 / 138 Loss: 75.31439208984375 Tokens per Sec: 13495.968335392983
Epoch Step: 85 / 138 Loss: 65.0286865234375 Tokens per Sec: 14049.067622681281
Epoch Step: 90 / 138 Loss: 58.99974822998047 Tokens per Sec: 14070.04620274781
Epoch Step: 95 / 138 Loss: 46.95194625854492 Tokens per Sec: 12894.563073211006
Epoch Step: 100 / 138 Loss: 41.52924346923828 Tokens per Sec: 13743.712132940049
Epoch Step: 105 / 138 Loss: 67.5329818725586 Tokens per Sec: 13629.251629536333
Epoch Step: 110 / 138 Loss: 42.50337219238281 Tokens per Sec: 12068.374103410568
Epoch Step: 115 / 138 Loss: 53.42798614501953 Tokens per Sec: 13239.15643390278
Epoch Step: 120 / 138 Loss: 201.80686950683594 Tokens per Sec: 13119.716975891613
Epoch Step: 125 / 138 Loss: 45.751312255859375 Tokens per Sec: 13296.157876859883
Epoch Step: 130 / 138 Loss: 38.437156677246094 Tokens per Sec: 13309.34769971101
Epoch Step: 135 / 138 Loss: 65.72797393798828 Tokens per Sec: 12912.522936003974
Epoch ended with duration 0:00:47.558214
Train perplexity: 2.524402792974658
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) + + + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 ) , null ) ; } }[0m
Epoch ended with duration 0:00:03.755676
Validation perplexity: 2.0226413353634993
Model saved best_on_validation!
Epoch 33 / 1000
Epoch Step: 5 / 138 Loss: 37.994781494140625 Tokens per Sec: 13072.096150345344
Epoch Step: 10 / 138 Loss: 34.44077682495117 Tokens per Sec: 13389.861467839044
Epoch Step: 15 / 138 Loss: 53.39694595336914 Tokens per Sec: 14102.881478844867
Epoch Step: 20 / 138 Loss: 58.96868896484375 Tokens per Sec: 13694.371147305334
Epoch Step: 25 / 138 Loss: 31.492990493774414 Tokens per Sec: 14341.316201191119
Epoch Step: 30 / 138 Loss: 64.61770629882812 Tokens per Sec: 13185.586716388763
Epoch Step: 35 / 138 Loss: 28.11187744140625 Tokens per Sec: 13853.722894647677
Epoch Step: 40 / 138 Loss: 45.69844436645508 Tokens per Sec: 14087.334121544249
Epoch Step: 45 / 138 Loss: 57.37694549560547 Tokens per Sec: 13629.730280968157
Epoch Step: 50 / 138 Loss: 51.03644943237305 Tokens per Sec: 13439.875823742406
Epoch Step: 55 / 138 Loss: 67.96297454833984 Tokens per Sec: 13513.254410984873
Epoch Step: 60 / 138 Loss: 60.89893341064453 Tokens per Sec: 14059.136570592755
Epoch Step: 65 / 138 Loss: 56.75603485107422 Tokens per Sec: 14008.183365821691
Epoch Step: 70 / 138 Loss: 57.08610534667969 Tokens per Sec: 13590.464679103092
Epoch Step: 75 / 138 Loss: 52.90483093261719 Tokens per Sec: 13621.127294921069
Epoch Step: 80 / 138 Loss: 64.5543441772461 Tokens per Sec: 12906.711039098403
Epoch Step: 85 / 138 Loss: 42.3150749206543 Tokens per Sec: 12920.73039953263
Epoch Step: 90 / 138 Loss: 40.57606506347656 Tokens per Sec: 13444.13242943102
Epoch Step: 95 / 138 Loss: 28.33966827392578 Tokens per Sec: 13687.476828161209
Epoch Step: 100 / 138 Loss: 59.58183288574219 Tokens per Sec: 14391.074021009706
Epoch Step: 105 / 138 Loss: 71.18763732910156 Tokens per Sec: 12141.389133161761
Epoch Step: 110 / 138 Loss: 41.13070297241211 Tokens per Sec: 12852.386683192897
Epoch Step: 115 / 138 Loss: 53.50252151489258 Tokens per Sec: 13188.788485676354
Epoch Step: 120 / 138 Loss: 67.44731140136719 Tokens per Sec: 13372.840578053576
Epoch Step: 125 / 138 Loss: 43.973114013671875 Tokens per Sec: 13291.869790366667
Epoch Step: 130 / 138 Loss: 62.34614562988281 Tokens per Sec: 13129.409145297086
Epoch Step: 135 / 138 Loss: 47.46992874145508 Tokens per Sec: 13173.537742439592
Epoch ended with duration 0:00:47.268860
Train perplexity: 2.2754936827347496
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) , STRING_3 )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) STRING_3 ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.831575
Validation perplexity: 2.4675900020884227
Epoch 34 / 1000
Epoch Step: 5 / 138 Loss: 30.393707275390625 Tokens per Sec: 13657.833542418175
Epoch Step: 10 / 138 Loss: 35.97608947753906 Tokens per Sec: 13445.887669862941
Epoch Step: 15 / 138 Loss: 33.04441452026367 Tokens per Sec: 13841.850483760907
Epoch Step: 20 / 138 Loss: 62.8213996887207 Tokens per Sec: 13946.369201879603
Epoch Step: 25 / 138 Loss: 46.809749603271484 Tokens per Sec: 14104.531909419675
Epoch Step: 30 / 138 Loss: 34.867496490478516 Tokens per Sec: 13504.366798957553
Epoch Step: 35 / 138 Loss: 55.227333068847656 Tokens per Sec: 13942.820495060952
Epoch Step: 40 / 138 Loss: 126.61347198486328 Tokens per Sec: 13069.822065962271
Epoch Step: 45 / 138 Loss: 35.058589935302734 Tokens per Sec: 13528.503795335106
Epoch Step: 50 / 138 Loss: 74.27655029296875 Tokens per Sec: 13782.651834239738
Epoch Step: 55 / 138 Loss: 35.722381591796875 Tokens per Sec: 13775.468583710528
Epoch Step: 60 / 138 Loss: 56.31480026245117 Tokens per Sec: 12934.994841466241
Epoch Step: 65 / 138 Loss: 61.57490539550781 Tokens per Sec: 13892.193804439554
Epoch Step: 70 / 138 Loss: 31.994388580322266 Tokens per Sec: 13902.646532419158
Epoch Step: 75 / 138 Loss: 198.48550415039062 Tokens per Sec: 13556.04639833301
Epoch Step: 80 / 138 Loss: 43.407779693603516 Tokens per Sec: 13059.107999768321
Epoch Step: 85 / 138 Loss: 35.15393829345703 Tokens per Sec: 13528.606452380563
Epoch Step: 90 / 138 Loss: 48.45365905761719 Tokens per Sec: 13948.979486561424
Epoch Step: 95 / 138 Loss: 66.67921447753906 Tokens per Sec: 13561.345089540475
Epoch Step: 100 / 138 Loss: 49.453895568847656 Tokens per Sec: 13556.451524377122
Epoch Step: 105 / 138 Loss: 48.90937805175781 Tokens per Sec: 12770.147559329853
Epoch Step: 110 / 138 Loss: 35.98579406738281 Tokens per Sec: 12337.640781409233
Epoch Step: 115 / 138 Loss: 62.07936477661133 Tokens per Sec: 13130.233869375468
Epoch Step: 120 / 138 Loss: 46.86442947387695 Tokens per Sec: 12825.044122773565
Epoch Step: 125 / 138 Loss: 49.92555618286133 Tokens per Sec: 13487.415355461793
Epoch Step: 130 / 138 Loss: 63.68431854248047 Tokens per Sec: 12704.0794910247
Epoch Step: 135 / 138 Loss: 36.822906494140625 Tokens per Sec: 12756.363151324837
Epoch ended with duration 0:00:47.515775
Train perplexity: 2.357071791420756
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) STRING_3 ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 ) , null ) ; } } }[0m
Epoch ended with duration 0:00:03.833297
Validation perplexity: 2.502886009059066
Epoch 35 / 1000
Epoch Step: 5 / 138 Loss: 61.5326042175293 Tokens per Sec: 13577.450763543062
Epoch Step: 10 / 138 Loss: 58.515995025634766 Tokens per Sec: 14251.476593892105
Epoch Step: 15 / 138 Loss: 211.53286743164062 Tokens per Sec: 13462.669170748195
Epoch Step: 20 / 138 Loss: 154.01712036132812 Tokens per Sec: 13679.82623315526
Epoch Step: 25 / 138 Loss: 137.94544982910156 Tokens per Sec: 13517.89264404663
Epoch Step: 30 / 138 Loss: 49.425575256347656 Tokens per Sec: 13491.336680490098
Epoch Step: 35 / 138 Loss: 29.645103454589844 Tokens per Sec: 13699.162849747116
Epoch Step: 40 / 138 Loss: 67.18811798095703 Tokens per Sec: 13852.26876394349
Epoch Step: 45 / 138 Loss: 52.7949104309082 Tokens per Sec: 13912.953862133716
Epoch Step: 50 / 138 Loss: 69.32206726074219 Tokens per Sec: 13314.749913318785
Epoch Step: 55 / 138 Loss: 189.11019897460938 Tokens per Sec: 12747.95615121925
Epoch Step: 60 / 138 Loss: 28.248714447021484 Tokens per Sec: 13251.590723283118
Epoch Step: 65 / 138 Loss: 48.70802307128906 Tokens per Sec: 12869.786239772717
Epoch Step: 70 / 138 Loss: 53.80210494995117 Tokens per Sec: 13683.731640009075
Epoch Step: 75 / 138 Loss: 63.39081573486328 Tokens per Sec: 13360.41446669465
Epoch Step: 80 / 138 Loss: 66.36143493652344 Tokens per Sec: 12995.22514127648
Epoch Step: 85 / 138 Loss: 131.52239990234375 Tokens per Sec: 13016.642463642149
Epoch Step: 90 / 138 Loss: 72.1122817993164 Tokens per Sec: 13617.43691446399
Epoch Step: 95 / 138 Loss: 41.66474151611328 Tokens per Sec: 14104.328954724013
Epoch Step: 100 / 138 Loss: 40.21415710449219 Tokens per Sec: 14177.647506067171
Epoch Step: 105 / 138 Loss: 251.1767120361328 Tokens per Sec: 12985.137811094066
Epoch Step: 110 / 138 Loss: 45.952064514160156 Tokens per Sec: 13370.197784166168
Epoch Step: 115 / 138 Loss: 67.87403106689453 Tokens per Sec: 12399.96946655841
Epoch Step: 120 / 138 Loss: 34.95691680908203 Tokens per Sec: 13312.5005478956
Epoch Step: 125 / 138 Loss: 38.95870590209961 Tokens per Sec: 13163.974163318368
Epoch Step: 130 / 138 Loss: 113.51434326171875 Tokens per Sec: 12893.77250329655
Epoch Step: 135 / 138 Loss: 47.88430404663086 Tokens per Sec: 13668.50401360676
Epoch ended with duration 0:00:47.549980
Train perplexity: 2.5627929701779406
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ,[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node VAR_2 ) { java.lang.String VAR_3 = STRING_1 ( ( STRING_2 ) STRING_3 ) ; mContext . METHOD_2 ( ) ; METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.790743
Validation perplexity: 2.185387174604419
Model saved checkpoint!
Epoch 36 / 1000
Epoch Step: 5 / 138 Loss: 57.319942474365234 Tokens per Sec: 13373.68437094658
Epoch Step: 10 / 138 Loss: 44.10828399658203 Tokens per Sec: 13659.215401821928
Epoch Step: 15 / 138 Loss: 49.12669372558594 Tokens per Sec: 13388.489109627046
Epoch Step: 20 / 138 Loss: 51.50251770019531 Tokens per Sec: 13134.563674321504
Epoch Step: 25 / 138 Loss: 39.78754425048828 Tokens per Sec: 13017.686944135316
Epoch Step: 30 / 138 Loss: 46.306880950927734 Tokens per Sec: 13837.213666319361
Epoch Step: 35 / 138 Loss: 40.939727783203125 Tokens per Sec: 13759.279868518275
Epoch Step: 40 / 138 Loss: 182.5749969482422 Tokens per Sec: 13643.07259073583
Epoch Step: 45 / 138 Loss: 55.648109436035156 Tokens per Sec: 14360.064158869369
Epoch Step: 50 / 138 Loss: 49.55488204956055 Tokens per Sec: 13834.378432402746
Epoch Step: 55 / 138 Loss: 33.715274810791016 Tokens per Sec: 14447.294247620473
Epoch Step: 60 / 138 Loss: 231.73812866210938 Tokens per Sec: 13050.428706462415
Epoch Step: 65 / 138 Loss: 32.37079620361328 Tokens per Sec: 14317.855699360329
Epoch Step: 70 / 138 Loss: 51.6787109375 Tokens per Sec: 13860.304724239066
Epoch Step: 75 / 138 Loss: 161.88824462890625 Tokens per Sec: 12828.651616163794
Epoch Step: 80 / 138 Loss: 51.42929458618164 Tokens per Sec: 13617.767433405346
Epoch Step: 85 / 138 Loss: 52.1127815246582 Tokens per Sec: 13657.990328429845
Epoch Step: 90 / 138 Loss: 62.352020263671875 Tokens per Sec: 13598.809904847481
Epoch Step: 95 / 138 Loss: 49.53785705566406 Tokens per Sec: 13829.522202907998
Epoch Step: 100 / 138 Loss: 27.576662063598633 Tokens per Sec: 14302.844546867227
Epoch Step: 105 / 138 Loss: 30.461843490600586 Tokens per Sec: 13360.60997324459
Epoch Step: 110 / 138 Loss: 42.163604736328125 Tokens per Sec: 13393.248979099215
Epoch Step: 115 / 138 Loss: 35.94654846191406 Tokens per Sec: 12767.767705992612
Epoch Step: 120 / 138 Loss: 50.93455123901367 Tokens per Sec: 12706.828788298653
Epoch Step: 125 / 138 Loss: 66.4439697265625 Tokens per Sec: 13697.446885532194
Epoch Step: 130 / 138 Loss: 58.40153121948242 Tokens per Sec: 13409.552963576602
Epoch Step: 135 / 138 Loss: 65.88145446777344 Tokens per Sec: 12072.814107824215
Epoch ended with duration 0:00:47.200454
Train perplexity: 2.131354646293749
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) ) != null ) { for ( TYPE_1 node VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 ) + + + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.859484
Validation perplexity: 2.7541064871441634
Epoch 37 / 1000
Epoch Step: 5 / 138 Loss: 68.60982513427734 Tokens per Sec: 13523.186973388925
Epoch Step: 10 / 138 Loss: 67.69452667236328 Tokens per Sec: 13358.101312117302
Epoch Step: 15 / 138 Loss: 55.660972595214844 Tokens per Sec: 13334.348313591618
Epoch Step: 20 / 138 Loss: 71.8720932006836 Tokens per Sec: 13979.520094413594
Epoch Step: 25 / 138 Loss: 131.8673858642578 Tokens per Sec: 13753.514166185621
Epoch Step: 30 / 138 Loss: 61.869998931884766 Tokens per Sec: 13474.105902450847
Epoch Step: 35 / 138 Loss: 61.47909927368164 Tokens per Sec: 13767.859298510655
Epoch Step: 40 / 138 Loss: 64.89301300048828 Tokens per Sec: 13842.15371535896
Epoch Step: 45 / 138 Loss: 33.79073715209961 Tokens per Sec: 14054.254685583488
Epoch Step: 50 / 138 Loss: 32.618228912353516 Tokens per Sec: 14016.038890429616
Epoch Step: 55 / 138 Loss: 43.6118049621582 Tokens per Sec: 13416.778139951699
Epoch Step: 60 / 138 Loss: 38.43754577636719 Tokens per Sec: 12535.822690641964
Epoch Step: 65 / 138 Loss: 26.775659561157227 Tokens per Sec: 13630.296253231436
Epoch Step: 70 / 138 Loss: 57.7603645324707 Tokens per Sec: 13302.20974181224
Epoch Step: 75 / 138 Loss: 34.49174118041992 Tokens per Sec: 12525.845994755013
Epoch Step: 80 / 138 Loss: 45.9441032409668 Tokens per Sec: 13633.629495773555
Epoch Step: 85 / 138 Loss: 44.84311294555664 Tokens per Sec: 14141.355629003787
Epoch Step: 90 / 138 Loss: 29.136554718017578 Tokens per Sec: 13759.166645002524
Epoch Step: 95 / 138 Loss: 36.0161018371582 Tokens per Sec: 13167.628287500354
Epoch Step: 100 / 138 Loss: 70.28684997558594 Tokens per Sec: 13742.91732547477
Epoch Step: 105 / 138 Loss: 60.59193420410156 Tokens per Sec: 13366.970077840388
Epoch Step: 110 / 138 Loss: 44.25093460083008 Tokens per Sec: 13244.117378376399
Epoch Step: 115 / 138 Loss: 155.9810791015625 Tokens per Sec: 13219.036723849478
Epoch Step: 120 / 138 Loss: 61.936893463134766 Tokens per Sec: 13771.526707284627
Epoch Step: 125 / 138 Loss: 44.44569396972656 Tokens per Sec: 12975.65190408475
Epoch Step: 130 / 138 Loss: 123.20199584960938 Tokens per Sec: 12467.12010048567
Epoch Step: 135 / 138 Loss: 58.53485107421875 Tokens per Sec: 13605.376550536508
Epoch ended with duration 0:00:47.556792
Train perplexity: 2.4598261719041403
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ( ( STRING_2 STRING_2 ) STRING_3 ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , VAR_3 ) ) ; } } }[0m
Epoch ended with duration 0:00:03.797077
Validation perplexity: 2.075453286026108
Epoch 38 / 1000
Epoch Step: 5 / 138 Loss: 27.904470443725586 Tokens per Sec: 14218.331666942811
Epoch Step: 10 / 138 Loss: 41.917213439941406 Tokens per Sec: 13861.280237100747
Epoch Step: 15 / 138 Loss: 55.96376419067383 Tokens per Sec: 14163.548825611708
Epoch Step: 20 / 138 Loss: 171.31150817871094 Tokens per Sec: 12652.530890721531
Epoch Step: 25 / 138 Loss: 51.356563568115234 Tokens per Sec: 13895.99419016861
Epoch Step: 30 / 138 Loss: 45.869564056396484 Tokens per Sec: 13726.776535747424
Epoch Step: 35 / 138 Loss: 51.146820068359375 Tokens per Sec: 12396.058295590372
Epoch Step: 40 / 138 Loss: 24.898418426513672 Tokens per Sec: 14069.300753509371
Epoch Step: 45 / 138 Loss: 36.379920959472656 Tokens per Sec: 13604.731323780275
Epoch Step: 50 / 138 Loss: 42.67363739013672 Tokens per Sec: 13945.962672888243
Epoch Step: 55 / 138 Loss: 221.9861297607422 Tokens per Sec: 13628.684426878135
Epoch Step: 60 / 138 Loss: 29.369585037231445 Tokens per Sec: 12425.935515258298
Epoch Step: 65 / 138 Loss: 62.67477798461914 Tokens per Sec: 13263.352152272824
Epoch Step: 70 / 138 Loss: 57.5294075012207 Tokens per Sec: 14347.695191288822
Epoch Step: 75 / 138 Loss: 126.94071197509766 Tokens per Sec: 13266.899601974106
Epoch Step: 80 / 138 Loss: 47.02663803100586 Tokens per Sec: 13227.104510825973
Epoch Step: 85 / 138 Loss: 178.391357421875 Tokens per Sec: 13425.631745150973
Epoch Step: 90 / 138 Loss: 31.751802444458008 Tokens per Sec: 12921.71885945877
Epoch Step: 95 / 138 Loss: 41.172672271728516 Tokens per Sec: 13479.792332973651
Epoch Step: 100 / 138 Loss: 48.611026763916016 Tokens per Sec: 13875.368224679823
Epoch Step: 105 / 138 Loss: 60.59275817871094 Tokens per Sec: 13156.379302263076
Epoch Step: 110 / 138 Loss: 43.26431655883789 Tokens per Sec: 11655.426505576668
Epoch Step: 115 / 138 Loss: 34.674400329589844 Tokens per Sec: 13529.172142158795
Epoch Step: 120 / 138 Loss: 44.2601203918457 Tokens per Sec: 13452.697512559605
Epoch Step: 125 / 138 Loss: 48.4850959777832 Tokens per Sec: 12897.452518650769
Epoch Step: 130 / 138 Loss: 49.50617218017578 Tokens per Sec: 12872.612680436709
Epoch Step: 135 / 138 Loss: 37.587554931640625 Tokens per Sec: 13351.972020913609
Epoch ended with duration 0:00:47.689732
Train perplexity: 2.385764666550756
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node , ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.846937
Validation perplexity: 2.2699921536668772
Epoch 39 / 1000
Epoch Step: 5 / 138 Loss: 62.0294189453125 Tokens per Sec: 14091.896747365816
Epoch Step: 10 / 138 Loss: 139.6493377685547 Tokens per Sec: 13382.72118554391
Epoch Step: 15 / 138 Loss: 36.49685287475586 Tokens per Sec: 12745.673831151236
Epoch Step: 20 / 138 Loss: 35.83629608154297 Tokens per Sec: 12948.58762823667
Epoch Step: 25 / 138 Loss: 36.09970474243164 Tokens per Sec: 13710.643210885932
Epoch Step: 30 / 138 Loss: 56.212623596191406 Tokens per Sec: 13748.005465575981
Epoch Step: 35 / 138 Loss: 62.900028228759766 Tokens per Sec: 13351.128714439552
Epoch Step: 40 / 138 Loss: 187.99180603027344 Tokens per Sec: 13379.45184673069
Epoch Step: 45 / 138 Loss: 49.665042877197266 Tokens per Sec: 13315.866716381734
Epoch Step: 50 / 138 Loss: 34.182456970214844 Tokens per Sec: 13350.739505402491
Epoch Step: 55 / 138 Loss: 56.984710693359375 Tokens per Sec: 13607.599886573904
Epoch Step: 60 / 138 Loss: 58.34585189819336 Tokens per Sec: 13931.502043235358
Epoch Step: 65 / 138 Loss: 29.11176872253418 Tokens per Sec: 14303.521406855101
Epoch Step: 70 / 138 Loss: 45.480899810791016 Tokens per Sec: 12760.30217671997
Epoch Step: 75 / 138 Loss: 49.90007019042969 Tokens per Sec: 13134.651510544822
Epoch Step: 80 / 138 Loss: 44.66728591918945 Tokens per Sec: 13576.414474821138
Epoch Step: 85 / 138 Loss: 33.59504699707031 Tokens per Sec: 14331.822995035065
Epoch Step: 90 / 138 Loss: 39.26487350463867 Tokens per Sec: 13584.566826839053
Epoch Step: 95 / 138 Loss: 60.6993522644043 Tokens per Sec: 14025.339095637171
Epoch Step: 100 / 138 Loss: 235.15121459960938 Tokens per Sec: 12463.022656537545
Epoch Step: 105 / 138 Loss: 56.02293014526367 Tokens per Sec: 11856.244209838065
Epoch Step: 110 / 138 Loss: 41.76540756225586 Tokens per Sec: 13396.491915261322
Epoch Step: 115 / 138 Loss: 42.247135162353516 Tokens per Sec: 13421.474247985498
Epoch Step: 120 / 138 Loss: 44.01790237426758 Tokens per Sec: 13353.166524537148
Epoch Step: 125 / 138 Loss: 33.537925720214844 Tokens per Sec: 13556.774515171963
Epoch Step: 130 / 138 Loss: 117.16380310058594 Tokens per Sec: 13333.938105739848
Epoch Step: 135 / 138 Loss: 23.92885398864746 Tokens per Sec: 13202.435629757905
Epoch ended with duration 0:00:47.587585
Train perplexity: 2.3213681548251914
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ( ( STRING_2 STRING_2 ) STRING_3 ) ; mContext . METHOD_2 ( ) ; mContext . METHOD_2 ( VAR_4 , node . METHOD_3 ( node , node , VAR_3 ) , null ) ; } } }[0m
Epoch ended with duration 0:00:03.759834
Validation perplexity: 1.8528738920402992
Model saved best_on_validation!
Epoch 40 / 1000
Epoch Step: 5 / 138 Loss: 35.13546371459961 Tokens per Sec: 12416.610033502711
Epoch Step: 10 / 138 Loss: 43.19002151489258 Tokens per Sec: 14012.554185590792
Epoch Step: 15 / 138 Loss: 65.53236389160156 Tokens per Sec: 13721.446861871571
Epoch Step: 20 / 138 Loss: 56.055694580078125 Tokens per Sec: 13869.630896829705
Epoch Step: 25 / 138 Loss: 60.09339141845703 Tokens per Sec: 13917.974865950951
Epoch Step: 30 / 138 Loss: 37.113128662109375 Tokens per Sec: 13919.908045934235
Epoch Step: 35 / 138 Loss: 59.35402297973633 Tokens per Sec: 13591.816814869746
Epoch Step: 40 / 138 Loss: 59.39414596557617 Tokens per Sec: 12710.286555554625
Epoch Step: 45 / 138 Loss: 176.58322143554688 Tokens per Sec: 13472.898548981639
Epoch Step: 50 / 138 Loss: 80.33116912841797 Tokens per Sec: 13586.411755084748
Epoch Step: 55 / 138 Loss: 30.58818244934082 Tokens per Sec: 14206.818878461629
Epoch Step: 60 / 138 Loss: 56.932411193847656 Tokens per Sec: 14101.164155051003
Epoch Step: 65 / 138 Loss: 49.40065002441406 Tokens per Sec: 13440.803429776017
Epoch Step: 70 / 138 Loss: 211.1234893798828 Tokens per Sec: 13110.64833774985
Epoch Step: 75 / 138 Loss: 60.0406494140625 Tokens per Sec: 13295.37102374977
Epoch Step: 80 / 138 Loss: 46.482887268066406 Tokens per Sec: 13087.846783108205
Epoch Step: 85 / 138 Loss: 60.58235168457031 Tokens per Sec: 14278.140749058706
Epoch Step: 90 / 138 Loss: 30.81986427307129 Tokens per Sec: 13457.195866089816
Epoch Step: 95 / 138 Loss: 164.302490234375 Tokens per Sec: 13207.630155822671
Epoch Step: 100 / 138 Loss: 51.15461349487305 Tokens per Sec: 13985.787054352162
Epoch Step: 105 / 138 Loss: 34.20731735229492 Tokens per Sec: 13184.597119694285
Epoch Step: 110 / 138 Loss: 45.34034729003906 Tokens per Sec: 13178.841478667642
Epoch Step: 115 / 138 Loss: 34.02989196777344 Tokens per Sec: 13499.855691494
Epoch Step: 120 / 138 Loss: 32.18583297729492 Tokens per Sec: 13067.288838502254
Epoch Step: 125 / 138 Loss: 50.322792053222656 Tokens per Sec: 12453.879741913015
Epoch Step: 130 / 138 Loss: 43.96905517578125 Tokens per Sec: 12957.24260411391
Epoch Step: 135 / 138 Loss: 37.08374786376953 Tokens per Sec: 13556.124895257059
Epoch ended with duration 0:00:47.430902
Train perplexity: 2.2436997912759717
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node . mContext ( node , node , VAR_3 , null ) ) ; } } }[0m
Epoch ended with duration 0:00:03.864302
Validation perplexity: 2.6149385126012215
Model saved checkpoint!
Epoch 41 / 1000
Epoch Step: 5 / 138 Loss: 50.16847229003906 Tokens per Sec: 13711.675340849835
Epoch Step: 10 / 138 Loss: 44.776920318603516 Tokens per Sec: 13277.818485327873
Epoch Step: 15 / 138 Loss: 31.912097930908203 Tokens per Sec: 13669.000622456151
Epoch Step: 20 / 138 Loss: 71.19095611572266 Tokens per Sec: 13297.308455261003
Epoch Step: 25 / 138 Loss: 47.48420333862305 Tokens per Sec: 13309.186653396138
Epoch Step: 30 / 138 Loss: 40.0870475769043 Tokens per Sec: 13911.467937801068
Epoch Step: 35 / 138 Loss: 49.37862777709961 Tokens per Sec: 13209.79572348889
Epoch Step: 40 / 138 Loss: 32.00543212890625 Tokens per Sec: 13902.212021978266
Epoch Step: 45 / 138 Loss: 27.989267349243164 Tokens per Sec: 13452.164005262835
Epoch Step: 50 / 138 Loss: 58.41109848022461 Tokens per Sec: 13922.942902369536
Epoch Step: 55 / 138 Loss: 34.21051025390625 Tokens per Sec: 13823.591229759946
Epoch Step: 60 / 138 Loss: 56.15747833251953 Tokens per Sec: 13453.892303201985
Epoch Step: 65 / 138 Loss: 32.31819152832031 Tokens per Sec: 13941.565312281651
Epoch Step: 70 / 138 Loss: 40.343048095703125 Tokens per Sec: 13158.748494922429
Epoch Step: 75 / 138 Loss: 33.40578079223633 Tokens per Sec: 13998.737977422601
Epoch Step: 80 / 138 Loss: 25.88111114501953 Tokens per Sec: 14010.893216095936
Epoch Step: 85 / 138 Loss: 58.62832260131836 Tokens per Sec: 13871.411854793148
Epoch Step: 90 / 138 Loss: 30.422094345092773 Tokens per Sec: 13714.035934958934
Epoch Step: 95 / 138 Loss: 49.8980712890625 Tokens per Sec: 13496.349202859614
Epoch Step: 100 / 138 Loss: 24.72486114501953 Tokens per Sec: 14368.3989962478
Epoch Step: 105 / 138 Loss: 39.64226150512695 Tokens per Sec: 13544.313663104442
Epoch Step: 110 / 138 Loss: 46.328941345214844 Tokens per Sec: 12992.08430261817
Epoch Step: 115 / 138 Loss: 30.111772537231445 Tokens per Sec: 12504.738379533983
Epoch Step: 120 / 138 Loss: 56.590049743652344 Tokens per Sec: 13211.056676726723
Epoch Step: 125 / 138 Loss: 30.080520629882812 Tokens per Sec: 13063.677003606826
Epoch Step: 130 / 138 Loss: 55.784481048583984 Tokens per Sec: 12689.980184826056
Epoch Step: 135 / 138 Loss: 34.727054595947266 Tokens per Sec: 12715.090282923196
Epoch ended with duration 0:00:47.332393
Train perplexity: 2.033562033779627
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean boolean VAR_5 , VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . e.toString ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , mContext . METHOD_3 ( node , node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.795773
Validation perplexity: 2.092687202078531
Epoch 42 / 1000
Epoch Step: 5 / 138 Loss: 36.26729965209961 Tokens per Sec: 13509.046968370643
Epoch Step: 10 / 138 Loss: 35.9553337097168 Tokens per Sec: 13492.310116739021
Epoch Step: 15 / 138 Loss: 47.38744354248047 Tokens per Sec: 13547.845969020724
Epoch Step: 20 / 138 Loss: 43.45124816894531 Tokens per Sec: 13446.285802856071
Epoch Step: 25 / 138 Loss: 57.62071990966797 Tokens per Sec: 14008.635785801225
Epoch Step: 30 / 138 Loss: 55.239410400390625 Tokens per Sec: 13965.22308561082
Epoch Step: 35 / 138 Loss: 32.44647216796875 Tokens per Sec: 13187.74380169861
Epoch Step: 40 / 138 Loss: 55.22806930541992 Tokens per Sec: 13628.308006112866
Epoch Step: 45 / 138 Loss: 36.3874397277832 Tokens per Sec: 12913.03955188159
Epoch Step: 50 / 138 Loss: 32.350101470947266 Tokens per Sec: 13293.604889866501
Epoch Step: 55 / 138 Loss: 54.31460952758789 Tokens per Sec: 13686.531553317653
Epoch Step: 60 / 138 Loss: 133.24847412109375 Tokens per Sec: 13178.178043067255
Epoch Step: 65 / 138 Loss: 47.837379455566406 Tokens per Sec: 14126.676852052899
Epoch Step: 70 / 138 Loss: 43.92290115356445 Tokens per Sec: 12312.349582740344
Epoch Step: 75 / 138 Loss: 39.389678955078125 Tokens per Sec: 13409.147108677447
Epoch Step: 80 / 138 Loss: 32.639312744140625 Tokens per Sec: 14300.16886035096
Epoch Step: 85 / 138 Loss: 25.524127960205078 Tokens per Sec: 13560.357038382248
Epoch Step: 90 / 138 Loss: 34.75944900512695 Tokens per Sec: 13984.328423621222
Epoch Step: 95 / 138 Loss: 42.98164749145508 Tokens per Sec: 13565.584752911225
Epoch Step: 100 / 138 Loss: 49.785064697265625 Tokens per Sec: 14251.394459979232
Epoch Step: 105 / 138 Loss: 52.2465934753418 Tokens per Sec: 13400.354958421707
Epoch Step: 110 / 138 Loss: 33.064151763916016 Tokens per Sec: 13369.657834254009
Epoch Step: 115 / 138 Loss: 63.442020416259766 Tokens per Sec: 13334.199448845877
Epoch Step: 120 / 138 Loss: 45.350589752197266 Tokens per Sec: 12880.060891625219
Epoch Step: 125 / 138 Loss: 28.792543411254883 Tokens per Sec: 13513.661838972022
Epoch Step: 130 / 138 Loss: 37.31680679321289 Tokens per Sec: 11442.990137025416
Epoch Step: 135 / 138 Loss: 47.67388916015625 Tokens per Sec: 13501.834038563065
Epoch ended with duration 0:00:47.458955
Train perplexity: 2.135097182434385
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , node , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.825310
Validation perplexity: 2.133940311900113
Epoch 43 / 1000
Epoch Step: 5 / 138 Loss: 132.7142791748047 Tokens per Sec: 13447.988756052828
Epoch Step: 10 / 138 Loss: 54.16157531738281 Tokens per Sec: 13336.514718139262
Epoch Step: 15 / 138 Loss: 30.044879913330078 Tokens per Sec: 13956.892093450717
Epoch Step: 20 / 138 Loss: 33.326194763183594 Tokens per Sec: 13855.437122939184
Epoch Step: 25 / 138 Loss: 56.39812088012695 Tokens per Sec: 14208.008754083321
Epoch Step: 30 / 138 Loss: 51.7014045715332 Tokens per Sec: 13747.811311482947
Epoch Step: 35 / 138 Loss: 42.419822692871094 Tokens per Sec: 14304.540941809077
Epoch Step: 40 / 138 Loss: 35.02227783203125 Tokens per Sec: 13520.660244878081
Epoch Step: 45 / 138 Loss: 29.948162078857422 Tokens per Sec: 13781.264584574094
Epoch Step: 50 / 138 Loss: 53.78053665161133 Tokens per Sec: 13844.722259244685
Epoch Step: 55 / 138 Loss: 40.24543762207031 Tokens per Sec: 12905.383870224194
Epoch Step: 60 / 138 Loss: 54.66705322265625 Tokens per Sec: 14149.023214985189
Epoch Step: 65 / 138 Loss: 65.68988037109375 Tokens per Sec: 13080.5078802269
Epoch Step: 70 / 138 Loss: 59.07508850097656 Tokens per Sec: 14125.902688013051
Epoch Step: 75 / 138 Loss: 52.05826187133789 Tokens per Sec: 14169.647969277903
Epoch Step: 80 / 138 Loss: 41.27191162109375 Tokens per Sec: 13543.103655015915
Epoch Step: 85 / 138 Loss: 31.405269622802734 Tokens per Sec: 12607.757933067654
Epoch Step: 90 / 138 Loss: 43.04793930053711 Tokens per Sec: 13172.671459680872
Epoch Step: 95 / 138 Loss: 60.65317916870117 Tokens per Sec: 13487.055035634692
Epoch Step: 100 / 138 Loss: 25.321990966796875 Tokens per Sec: 13245.339032444308
Epoch Step: 105 / 138 Loss: 38.09550094604492 Tokens per Sec: 13320.764171393164
Epoch Step: 110 / 138 Loss: 31.853992462158203 Tokens per Sec: 12936.671187748354
Epoch Step: 115 / 138 Loss: 43.71975326538086 Tokens per Sec: 12782.160382706174
Epoch Step: 120 / 138 Loss: 39.14085388183594 Tokens per Sec: 11535.745540797534
Epoch Step: 125 / 138 Loss: 57.86579895019531 Tokens per Sec: 13917.488974832117
Epoch Step: 130 / 138 Loss: 50.15639114379883 Tokens per Sec: 13380.72162455931
Epoch Step: 135 / 138 Loss: 147.09043884277344 Tokens per Sec: 13046.491917767386
Epoch ended with duration 0:00:47.388290
Train perplexity: 2.131984701960928
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ) ;[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 , VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) ) . }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.862266
Validation perplexity: 2.459911886524142
Epoch 44 / 1000
Epoch Step: 5 / 138 Loss: 188.05203247070312 Tokens per Sec: 12848.175385671168
Epoch Step: 10 / 138 Loss: 45.20530700683594 Tokens per Sec: 14233.225373373776
Epoch Step: 15 / 138 Loss: 23.7593994140625 Tokens per Sec: 13761.480622796147
Epoch Step: 20 / 138 Loss: 54.85249710083008 Tokens per Sec: 13687.170029816569
Epoch Step: 25 / 138 Loss: 49.20136642456055 Tokens per Sec: 13359.781691955372
Epoch Step: 30 / 138 Loss: 38.490909576416016 Tokens per Sec: 13454.315639091876
Epoch Step: 35 / 138 Loss: 55.7302360534668 Tokens per Sec: 13577.704130635908
Epoch Step: 40 / 138 Loss: 47.934471130371094 Tokens per Sec: 14400.825394246576
Epoch Step: 45 / 138 Loss: 42.35934066772461 Tokens per Sec: 13828.188831528598
Epoch Step: 50 / 138 Loss: 57.43574142456055 Tokens per Sec: 13554.570296917562
Epoch Step: 55 / 138 Loss: 47.15187454223633 Tokens per Sec: 14075.493693086739
Epoch Step: 60 / 138 Loss: 53.81139373779297 Tokens per Sec: 13598.143453412382
Epoch Step: 65 / 138 Loss: 39.06731033325195 Tokens per Sec: 13619.265092143427
Epoch Step: 70 / 138 Loss: 44.51935958862305 Tokens per Sec: 13655.046898660537
Epoch Step: 75 / 138 Loss: 25.613441467285156 Tokens per Sec: 13861.43071650028
Epoch Step: 80 / 138 Loss: 49.51361083984375 Tokens per Sec: 13469.413922298227
Epoch Step: 85 / 138 Loss: 59.79634475708008 Tokens per Sec: 13427.37684845778
Epoch Step: 90 / 138 Loss: 36.62800216674805 Tokens per Sec: 13614.392551822226
Epoch Step: 95 / 138 Loss: 26.54104232788086 Tokens per Sec: 13910.050289875962
Epoch Step: 100 / 138 Loss: 40.304962158203125 Tokens per Sec: 12819.35956354767
Epoch Step: 105 / 138 Loss: 28.51801109313965 Tokens per Sec: 13291.530996771628
Epoch Step: 110 / 138 Loss: 187.0857696533203 Tokens per Sec: 12805.957660634911
Epoch Step: 115 / 138 Loss: 34.71453094482422 Tokens per Sec: 12213.54174937354
Epoch Step: 120 / 138 Loss: 27.308053970336914 Tokens per Sec: 12623.120300900808
Epoch Step: 125 / 138 Loss: 51.41812515258789 Tokens per Sec: 13124.1918801752
Epoch Step: 130 / 138 Loss: 56.36786651611328 Tokens per Sec: 13244.716581376275
Epoch Step: 135 / 138 Loss: 60.44759750366211 Tokens per Sec: 13250.57561081416
Epoch ended with duration 0:00:47.495428
Train perplexity: 2.1144048890609057
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 , METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.745930
Validation perplexity: 1.817862482668799
Model saved best_on_validation!
Epoch 45 / 1000
Epoch Step: 5 / 138 Loss: 33.61949157714844 Tokens per Sec: 14111.648032643889
Epoch Step: 10 / 138 Loss: 26.25786018371582 Tokens per Sec: 13780.748883039387
Epoch Step: 15 / 138 Loss: 43.600154876708984 Tokens per Sec: 13167.369237411634
Epoch Step: 20 / 138 Loss: 27.110549926757812 Tokens per Sec: 13953.946281149525
Epoch Step: 25 / 138 Loss: 234.29051208496094 Tokens per Sec: 13313.215316895805
Epoch Step: 30 / 138 Loss: 41.89111328125 Tokens per Sec: 12991.52526298364
Epoch Step: 35 / 138 Loss: 30.43074607849121 Tokens per Sec: 13902.554158101677
Epoch Step: 40 / 138 Loss: 50.47915267944336 Tokens per Sec: 13487.922672019273
Epoch Step: 45 / 138 Loss: 47.16645812988281 Tokens per Sec: 14024.242482013875
Epoch Step: 50 / 138 Loss: 168.51797485351562 Tokens per Sec: 13269.360187295124
Epoch Step: 55 / 138 Loss: 42.389991760253906 Tokens per Sec: 13750.28713305794
Epoch Step: 60 / 138 Loss: 32.98836898803711 Tokens per Sec: 13634.514372491947
Epoch Step: 65 / 138 Loss: 38.89749526977539 Tokens per Sec: 13164.99570867204
Epoch Step: 70 / 138 Loss: 35.83550262451172 Tokens per Sec: 14090.05414316536
Epoch Step: 75 / 138 Loss: 56.016300201416016 Tokens per Sec: 13319.700251017724
Epoch Step: 80 / 138 Loss: 42.13558578491211 Tokens per Sec: 13839.081932470783
Epoch Step: 85 / 138 Loss: 51.37422561645508 Tokens per Sec: 13671.31500396979
Epoch Step: 90 / 138 Loss: 35.17683410644531 Tokens per Sec: 13781.369173925259
Epoch Step: 95 / 138 Loss: 26.39925765991211 Tokens per Sec: 13486.62859281377
Epoch Step: 100 / 138 Loss: 52.553890228271484 Tokens per Sec: 13324.066886719318
Epoch Step: 105 / 138 Loss: 54.12392044067383 Tokens per Sec: 13408.402407983232
Epoch Step: 110 / 138 Loss: 40.65294647216797 Tokens per Sec: 13000.115184178763
Epoch Step: 115 / 138 Loss: 49.964176177978516 Tokens per Sec: 13159.53544541866
Epoch Step: 120 / 138 Loss: 48.01127243041992 Tokens per Sec: 13617.871965155922
Epoch Step: 125 / 138 Loss: 39.18431091308594 Tokens per Sec: 13115.426264196729
Epoch Step: 130 / 138 Loss: 27.918136596679688 Tokens per Sec: 13283.218183374156
Epoch Step: 135 / 138 Loss: 47.81022644042969 Tokens per Sec: 12485.05248649038
Epoch ended with duration 0:00:47.360080
Train perplexity: 2.085917970229412
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.827879
Validation perplexity: 2.194027794404368
Model saved checkpoint!
Epoch 46 / 1000
Epoch Step: 5 / 138 Loss: 140.2974395751953 Tokens per Sec: 14194.498728495038
Epoch Step: 10 / 138 Loss: 35.622161865234375 Tokens per Sec: 13833.086760001472
Epoch Step: 15 / 138 Loss: 178.57542419433594 Tokens per Sec: 13402.468613673678
Epoch Step: 20 / 138 Loss: 20.77188491821289 Tokens per Sec: 13269.942136381553
Epoch Step: 25 / 138 Loss: 46.73025131225586 Tokens per Sec: 13053.874754285443
Epoch Step: 30 / 138 Loss: 27.303752899169922 Tokens per Sec: 14497.310022421236
Epoch Step: 35 / 138 Loss: 32.19964599609375 Tokens per Sec: 13303.881878600969
Epoch Step: 40 / 138 Loss: 35.3749885559082 Tokens per Sec: 13760.448031799067
Epoch Step: 45 / 138 Loss: 54.3626823425293 Tokens per Sec: 13866.27498747313
Epoch Step: 50 / 138 Loss: 55.27783966064453 Tokens per Sec: 13548.110430306471
Epoch Step: 55 / 138 Loss: 27.909912109375 Tokens per Sec: 14082.012785362838
Epoch Step: 60 / 138 Loss: 57.79802322387695 Tokens per Sec: 13473.548435526494
Epoch Step: 65 / 138 Loss: 29.32099151611328 Tokens per Sec: 13732.675941761958
Epoch Step: 70 / 138 Loss: 42.439125061035156 Tokens per Sec: 14180.68538905799
Epoch Step: 75 / 138 Loss: 29.31390380859375 Tokens per Sec: 13421.061421705845
Epoch Step: 80 / 138 Loss: 50.09579849243164 Tokens per Sec: 13426.029958740999
Epoch Step: 85 / 138 Loss: 25.834163665771484 Tokens per Sec: 13065.539338561675
Epoch Step: 90 / 138 Loss: 26.945920944213867 Tokens per Sec: 14230.055215599261
Epoch Step: 95 / 138 Loss: 42.80043029785156 Tokens per Sec: 13316.192838910936
Epoch Step: 100 / 138 Loss: 41.881919860839844 Tokens per Sec: 13069.742829380059
Epoch Step: 105 / 138 Loss: 48.20911407470703 Tokens per Sec: 13257.682189808658
Epoch Step: 110 / 138 Loss: 37.70851516723633 Tokens per Sec: 12296.37804112112
Epoch Step: 115 / 138 Loss: 31.30759620666504 Tokens per Sec: 13234.303356690125
Epoch Step: 120 / 138 Loss: 36.67499542236328 Tokens per Sec: 13229.159628675454
Epoch Step: 125 / 138 Loss: 44.18358612060547 Tokens per Sec: 13510.855005204769
Epoch Step: 130 / 138 Loss: 28.954809188842773 Tokens per Sec: 13210.209506117224
Epoch Step: 135 / 138 Loss: 39.003482818603516 Tokens per Sec: 12800.99254076039
Epoch ended with duration 0:00:47.283740
Train perplexity: 1.9380610100241407
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 , VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node , ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.769415
Validation perplexity: 1.7239226292627219
Model saved best_on_validation!
Epoch 47 / 1000
Epoch Step: 5 / 138 Loss: 36.70517349243164 Tokens per Sec: 13793.646509265955
Epoch Step: 10 / 138 Loss: 31.086977005004883 Tokens per Sec: 13756.944473444588
Epoch Step: 15 / 138 Loss: 50.81467819213867 Tokens per Sec: 13516.357210965722
Epoch Step: 20 / 138 Loss: 36.34419631958008 Tokens per Sec: 13538.65651650843
Epoch Step: 25 / 138 Loss: 227.54212951660156 Tokens per Sec: 12951.35679781721
Epoch Step: 30 / 138 Loss: 39.06836700439453 Tokens per Sec: 12842.869631595955
Epoch Step: 35 / 138 Loss: 33.41018295288086 Tokens per Sec: 13359.726393109848
Epoch Step: 40 / 138 Loss: 31.51685905456543 Tokens per Sec: 14018.189485452493
Epoch Step: 45 / 138 Loss: 49.6973991394043 Tokens per Sec: 13580.581533145096
Epoch Step: 50 / 138 Loss: 68.70887756347656 Tokens per Sec: 14154.427447035288
Epoch Step: 55 / 138 Loss: 59.71889877319336 Tokens per Sec: 13286.254225388711
Epoch Step: 60 / 138 Loss: 40.582542419433594 Tokens per Sec: 14068.997058317078
Epoch Step: 65 / 138 Loss: 40.50194549560547 Tokens per Sec: 13605.954507668897
Epoch Step: 70 / 138 Loss: 38.66047668457031 Tokens per Sec: 13247.276730297845
Epoch Step: 75 / 138 Loss: 37.24033737182617 Tokens per Sec: 13791.077678156125
Epoch Step: 80 / 138 Loss: 107.23553466796875 Tokens per Sec: 13554.996733277156
Epoch Step: 85 / 138 Loss: 25.698360443115234 Tokens per Sec: 13932.57718982185
Epoch Step: 90 / 138 Loss: 43.465354919433594 Tokens per Sec: 14247.522698603743
Epoch Step: 95 / 138 Loss: 37.92594528198242 Tokens per Sec: 13570.204625999431
Epoch Step: 100 / 138 Loss: 28.559412002563477 Tokens per Sec: 13016.687607034652
Epoch Step: 105 / 138 Loss: 49.8353385925293 Tokens per Sec: 13433.929486121266
Epoch Step: 110 / 138 Loss: 35.01262664794922 Tokens per Sec: 13476.069439577617
Epoch Step: 115 / 138 Loss: 34.769325256347656 Tokens per Sec: 13412.957621458336
Epoch Step: 120 / 138 Loss: 27.23362159729004 Tokens per Sec: 13160.297950788077
Epoch Step: 125 / 138 Loss: 34.95866775512695 Tokens per Sec: 12057.482171043004
Epoch Step: 130 / 138 Loss: 51.04524612426758 Tokens per Sec: 13435.859528805042
Epoch Step: 135 / 138 Loss: 31.389633178710938 Tokens per Sec: 12655.70444437172
Epoch ended with duration 0:00:47.427489
Train perplexity: 2.260014811771417
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.822489
Validation perplexity: 2.195450308606493
Epoch 48 / 1000
Epoch Step: 5 / 138 Loss: 44.20833969116211 Tokens per Sec: 13398.02152015422
Epoch Step: 10 / 138 Loss: 45.002593994140625 Tokens per Sec: 13168.701450057075
Epoch Step: 15 / 138 Loss: 35.59126281738281 Tokens per Sec: 13645.49361259379
Epoch Step: 20 / 138 Loss: 30.68226432800293 Tokens per Sec: 13062.409298673814
Epoch Step: 25 / 138 Loss: 48.39333724975586 Tokens per Sec: 14077.204614731643
Epoch Step: 30 / 138 Loss: 23.441329956054688 Tokens per Sec: 14054.896484742485
Epoch Step: 35 / 138 Loss: 35.52385330200195 Tokens per Sec: 13328.120890506154
Epoch Step: 40 / 138 Loss: 40.880950927734375 Tokens per Sec: 14217.156584598595
Epoch Step: 45 / 138 Loss: 234.9437255859375 Tokens per Sec: 13128.405489463557
Epoch Step: 50 / 138 Loss: 50.67010498046875 Tokens per Sec: 13441.281261023994
Epoch Step: 55 / 138 Loss: 31.88001823425293 Tokens per Sec: 13024.832085705075
Epoch Step: 60 / 138 Loss: 30.69611930847168 Tokens per Sec: 13779.971356713193
Epoch Step: 65 / 138 Loss: 31.118980407714844 Tokens per Sec: 13788.830891907297
Epoch Step: 70 / 138 Loss: 33.37071228027344 Tokens per Sec: 13373.965473625853
Epoch Step: 75 / 138 Loss: 23.43653106689453 Tokens per Sec: 13753.524429734702
Epoch Step: 80 / 138 Loss: 31.068464279174805 Tokens per Sec: 13832.668290725684
Epoch Step: 85 / 138 Loss: 26.348880767822266 Tokens per Sec: 13329.380068050998
Epoch Step: 90 / 138 Loss: 43.1341438293457 Tokens per Sec: 13682.890068013769
Epoch Step: 95 / 138 Loss: 242.64662170410156 Tokens per Sec: 13133.82488677388
Epoch Step: 100 / 138 Loss: 30.824953079223633 Tokens per Sec: 14309.777304131294
Epoch Step: 105 / 138 Loss: 233.97900390625 Tokens per Sec: 12908.665231858722
Epoch Step: 110 / 138 Loss: 40.062644958496094 Tokens per Sec: 13586.480939569703
Epoch Step: 115 / 138 Loss: 56.21182632446289 Tokens per Sec: 12865.618323098484
Epoch Step: 120 / 138 Loss: 37.65924835205078 Tokens per Sec: 13266.837448096428
Epoch Step: 125 / 138 Loss: 40.23043441772461 Tokens per Sec: 13254.590941708419
Epoch Step: 130 / 138 Loss: 54.28641128540039 Tokens per Sec: 12077.705797668077
Epoch Step: 135 / 138 Loss: 53.52522659301758 Tokens per Sec: 13356.03237473798
Epoch ended with duration 0:00:47.482309
Train perplexity: 2.10105840216763
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , STRING_3 , STRING_3 ) , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 ) { TYPE_5 TYPE_5 = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.802870
Validation perplexity: 1.9052917048442506
Epoch 49 / 1000
Epoch Step: 5 / 138 Loss: 54.67871856689453 Tokens per Sec: 13087.713299447501
Epoch Step: 10 / 138 Loss: 21.818866729736328 Tokens per Sec: 13391.932513526783
Epoch Step: 15 / 138 Loss: 45.96113586425781 Tokens per Sec: 12931.713244198661
Epoch Step: 20 / 138 Loss: 28.15141487121582 Tokens per Sec: 13912.316810408358
Epoch Step: 25 / 138 Loss: 26.350080490112305 Tokens per Sec: 14192.397519019449
Epoch Step: 30 / 138 Loss: 45.2088737487793 Tokens per Sec: 14024.076590270299
Epoch Step: 35 / 138 Loss: 47.74128341674805 Tokens per Sec: 13424.14403516077
Epoch Step: 40 / 138 Loss: 49.755008697509766 Tokens per Sec: 13527.909496975431
Epoch Step: 45 / 138 Loss: 32.546844482421875 Tokens per Sec: 13590.321000038228
Epoch Step: 50 / 138 Loss: 19.973270416259766 Tokens per Sec: 13811.58816221752
Epoch Step: 55 / 138 Loss: 121.54071044921875 Tokens per Sec: 13452.28188698059
Epoch Step: 60 / 138 Loss: 38.453861236572266 Tokens per Sec: 14042.629148388265
Epoch Step: 65 / 138 Loss: 27.974655151367188 Tokens per Sec: 13806.560236068573
Epoch Step: 70 / 138 Loss: 44.4898796081543 Tokens per Sec: 13049.735394278841
Epoch Step: 75 / 138 Loss: 25.963685989379883 Tokens per Sec: 13732.513777598824
Epoch Step: 80 / 138 Loss: 31.938568115234375 Tokens per Sec: 14435.38817657844
Epoch Step: 85 / 138 Loss: 38.099124908447266 Tokens per Sec: 14019.023498811526
Epoch Step: 90 / 138 Loss: 247.813232421875 Tokens per Sec: 13585.078069404943
Epoch Step: 95 / 138 Loss: 27.109230041503906 Tokens per Sec: 13057.804208380086
Epoch Step: 100 / 138 Loss: 28.56378936767578 Tokens per Sec: 13025.29102103984
Epoch Step: 105 / 138 Loss: 55.93716049194336 Tokens per Sec: 12050.622726126161
Epoch Step: 110 / 138 Loss: 37.93560028076172 Tokens per Sec: 13195.531637378988
Epoch Step: 115 / 138 Loss: 44.7284049987793 Tokens per Sec: 13405.712263246829
Epoch Step: 120 / 138 Loss: 48.99456787109375 Tokens per Sec: 13732.007488353487
Epoch Step: 125 / 138 Loss: 34.6872444152832 Tokens per Sec: 13072.342260695681
Epoch Step: 130 / 138 Loss: 32.76436996459961 Tokens per Sec: 13462.931552818667
Epoch Step: 135 / 138 Loss: 136.54212951660156 Tokens per Sec: 12791.090995042907
Epoch ended with duration 0:00:47.361220
Train perplexity: 2.0252098389307194
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_1 , 0 , 0 , VAR_2 , METHOD_5 ( ) , METHOD_5 ( ) , VAR_4 , STRING_3 , STRING_3 ) )[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , VAR_4 , VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.854571
Validation perplexity: 2.2666238963948233
Epoch 50 / 1000
Epoch Step: 5 / 138 Loss: 45.0784797668457 Tokens per Sec: 13091.986352143427
Epoch Step: 10 / 138 Loss: 32.47567367553711 Tokens per Sec: 13540.47354007005
Epoch Step: 15 / 138 Loss: 24.678071975708008 Tokens per Sec: 13300.910610368763
Epoch Step: 20 / 138 Loss: 27.665292739868164 Tokens per Sec: 14141.858567764693
Epoch Step: 25 / 138 Loss: 55.803306579589844 Tokens per Sec: 13413.908031656034
Epoch Step: 30 / 138 Loss: 32.70193862915039 Tokens per Sec: 13113.883042279902
Epoch Step: 35 / 138 Loss: 27.202030181884766 Tokens per Sec: 14133.469119841315
Epoch Step: 40 / 138 Loss: 31.182159423828125 Tokens per Sec: 14037.345826351382
Epoch Step: 45 / 138 Loss: 46.66891860961914 Tokens per Sec: 14047.689615067358
Epoch Step: 50 / 138 Loss: 30.462833404541016 Tokens per Sec: 14243.210936815354
Epoch Step: 55 / 138 Loss: 30.003236770629883 Tokens per Sec: 13717.10782049839
Epoch Step: 60 / 138 Loss: 51.47825622558594 Tokens per Sec: 12713.245190805641
Epoch Step: 65 / 138 Loss: 29.43650245666504 Tokens per Sec: 13804.441053179313
Epoch Step: 70 / 138 Loss: 28.031286239624023 Tokens per Sec: 14306.362060439144
Epoch Step: 75 / 138 Loss: 47.68398666381836 Tokens per Sec: 13361.567596209365
Epoch Step: 80 / 138 Loss: 42.1270637512207 Tokens per Sec: 13049.336967934312
Epoch Step: 85 / 138 Loss: 46.32758331298828 Tokens per Sec: 14158.979609288319
Epoch Step: 90 / 138 Loss: 28.52716827392578 Tokens per Sec: 13179.9127136279
Epoch Step: 95 / 138 Loss: 35.58081817626953 Tokens per Sec: 13356.002571901117
Epoch Step: 100 / 138 Loss: 27.13136863708496 Tokens per Sec: 13474.685169708422
Epoch Step: 105 / 138 Loss: 35.91016387939453 Tokens per Sec: 13389.865926889204
Epoch Step: 110 / 138 Loss: 39.35400390625 Tokens per Sec: 13419.763744001306
Epoch Step: 115 / 138 Loss: 41.03615188598633 Tokens per Sec: 13113.076602521098
Epoch Step: 120 / 138 Loss: 32.12583923339844 Tokens per Sec: 13055.729709512392
Epoch Step: 125 / 138 Loss: 78.29161071777344 Tokens per Sec: 12799.487473067516
Epoch Step: 130 / 138 Loss: 35.40584945678711 Tokens per Sec: 12844.632647091363
Epoch Step: 135 / 138 Loss: 42.49515914916992 Tokens per Sec: 12320.921199491188
Epoch ended with duration 0:00:47.441503
Train perplexity: 2.0260123453466337
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 + STRING_3 ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.767909
Validation perplexity: 1.6892168630219218
Model saved best_on_validation!
Model saved checkpoint!
Epoch 51 / 1000
Epoch Step: 5 / 138 Loss: 37.590999603271484 Tokens per Sec: 12696.519976755588
Epoch Step: 10 / 138 Loss: 31.246606826782227 Tokens per Sec: 13624.27190192946
Epoch Step: 15 / 138 Loss: 54.94378662109375 Tokens per Sec: 13818.807426340016
Epoch Step: 20 / 138 Loss: 23.65829086303711 Tokens per Sec: 13954.702595142486
Epoch Step: 25 / 138 Loss: 28.01262092590332 Tokens per Sec: 13793.045592511307
Epoch Step: 30 / 138 Loss: 56.0916633605957 Tokens per Sec: 13536.463691340387
Epoch Step: 35 / 138 Loss: 33.03828811645508 Tokens per Sec: 13128.764069898087
Epoch Step: 40 / 138 Loss: 39.67504119873047 Tokens per Sec: 14275.688397895441
Epoch Step: 45 / 138 Loss: 33.745601654052734 Tokens per Sec: 14016.587810871573
Epoch Step: 50 / 138 Loss: 19.670616149902344 Tokens per Sec: 13505.568796743204
Epoch Step: 55 / 138 Loss: 49.568450927734375 Tokens per Sec: 13138.768672081493
Epoch Step: 60 / 138 Loss: 23.38844871520996 Tokens per Sec: 14300.74373807478
Epoch Step: 65 / 138 Loss: 33.06847381591797 Tokens per Sec: 13887.537871557382
Epoch Step: 70 / 138 Loss: 37.4278564453125 Tokens per Sec: 13558.94344779614
Epoch Step: 75 / 138 Loss: 38.56731033325195 Tokens per Sec: 14031.834883381642
Epoch Step: 80 / 138 Loss: 24.999906539916992 Tokens per Sec: 13092.2805572797
Epoch Step: 85 / 138 Loss: 45.48945236206055 Tokens per Sec: 13306.26218357869
Epoch Step: 90 / 138 Loss: 41.8099365234375 Tokens per Sec: 13979.932878662079
Epoch Step: 95 / 138 Loss: 27.313093185424805 Tokens per Sec: 13911.332871201963
Epoch Step: 100 / 138 Loss: 30.63823699951172 Tokens per Sec: 14065.268220730908
Epoch Step: 105 / 138 Loss: 49.95817947387695 Tokens per Sec: 12108.417382785976
Epoch Step: 110 / 138 Loss: 24.06972885131836 Tokens per Sec: 13477.490526471414
Epoch Step: 115 / 138 Loss: 33.4787712097168 Tokens per Sec: 13292.740965716148
Epoch Step: 120 / 138 Loss: 189.67623901367188 Tokens per Sec: 12941.312171534048
Epoch Step: 125 / 138 Loss: 24.661035537719727 Tokens per Sec: 13391.206165794638
Epoch Step: 130 / 138 Loss: 37.62736129760742 Tokens per Sec: 12217.456432623288
Epoch Step: 135 / 138 Loss: 24.974403381347656 Tokens per Sec: 13114.007430925529
Epoch ended with duration 0:00:47.295485
Train perplexity: 1.7719367857177581
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) . e.toString ( ) , ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 ; ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.799787
Validation perplexity: 1.8369928644337454
Epoch 52 / 1000
Epoch Step: 5 / 138 Loss: 38.693321228027344 Tokens per Sec: 12971.63667415208
Epoch Step: 10 / 138 Loss: 28.22266387939453 Tokens per Sec: 13197.314160616057
Epoch Step: 15 / 138 Loss: 44.17631912231445 Tokens per Sec: 13417.978955507713
Epoch Step: 20 / 138 Loss: 45.109771728515625 Tokens per Sec: 13679.823290870472
Epoch Step: 25 / 138 Loss: 28.33759880065918 Tokens per Sec: 14239.78466019675
Epoch Step: 30 / 138 Loss: 47.34715270996094 Tokens per Sec: 13375.807574119208
Epoch Step: 35 / 138 Loss: 43.19876480102539 Tokens per Sec: 13502.778603261571
Epoch Step: 40 / 138 Loss: 42.97273635864258 Tokens per Sec: 14115.325476517182
Epoch Step: 45 / 138 Loss: 47.69280242919922 Tokens per Sec: 13964.044848844629
Epoch Step: 50 / 138 Loss: 33.0265998840332 Tokens per Sec: 13762.949938623851
Epoch Step: 55 / 138 Loss: 139.2582244873047 Tokens per Sec: 12874.236037253628
Epoch Step: 60 / 138 Loss: 42.28900146484375 Tokens per Sec: 13330.293694939732
Epoch Step: 65 / 138 Loss: 28.007959365844727 Tokens per Sec: 13406.078206627784
Epoch Step: 70 / 138 Loss: 44.32280731201172 Tokens per Sec: 13280.455922572106
Epoch Step: 75 / 138 Loss: 49.010292053222656 Tokens per Sec: 14036.277186312393
Epoch Step: 80 / 138 Loss: 179.54249572753906 Tokens per Sec: 12743.840801064836
Epoch Step: 85 / 138 Loss: 58.45317840576172 Tokens per Sec: 14066.422847062768
Epoch Step: 90 / 138 Loss: 42.98168182373047 Tokens per Sec: 13501.520594880109
Epoch Step: 95 / 138 Loss: 45.64585876464844 Tokens per Sec: 13934.796583205389
Epoch Step: 100 / 138 Loss: 42.2462272644043 Tokens per Sec: 13726.44321086228
Epoch Step: 105 / 138 Loss: 34.642494201660156 Tokens per Sec: 12482.65164270631
Epoch Step: 110 / 138 Loss: 41.9715690612793 Tokens per Sec: 13373.91106597506
Epoch Step: 115 / 138 Loss: 27.79525375366211 Tokens per Sec: 13402.321012579157
Epoch Step: 120 / 138 Loss: 33.34575653076172 Tokens per Sec: 13336.002456036747
Epoch Step: 125 / 138 Loss: 29.94260597229004 Tokens per Sec: 12962.669953887907
Epoch Step: 130 / 138 Loss: 25.450979232788086 Tokens per Sec: 13396.467974621626
Epoch Step: 135 / 138 Loss: 29.982656478881836 Tokens per Sec: 13496.53255191973
Epoch ended with duration 0:00:47.455381
Train perplexity: 2.0108441450422196
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.832969
Validation perplexity: 1.9223773675367921
Epoch 53 / 1000
Epoch Step: 5 / 138 Loss: 42.41511917114258 Tokens per Sec: 14159.569049581643
Epoch Step: 10 / 138 Loss: 23.004688262939453 Tokens per Sec: 13973.51190402698
Epoch Step: 15 / 138 Loss: 39.067848205566406 Tokens per Sec: 13484.113142444541
Epoch Step: 20 / 138 Loss: 32.58993911743164 Tokens per Sec: 13935.195553384809
Epoch Step: 25 / 138 Loss: 30.6859073638916 Tokens per Sec: 13433.000871188942
Epoch Step: 30 / 138 Loss: 23.672330856323242 Tokens per Sec: 13262.886716331961
Epoch Step: 35 / 138 Loss: 161.85475158691406 Tokens per Sec: 13592.601526015436
Epoch Step: 40 / 138 Loss: 32.62374496459961 Tokens per Sec: 13725.87985434433
Epoch Step: 45 / 138 Loss: 26.297542572021484 Tokens per Sec: 13865.177913151925
Epoch Step: 50 / 138 Loss: 159.55075073242188 Tokens per Sec: 13236.54002055585
Epoch Step: 55 / 138 Loss: 151.7617950439453 Tokens per Sec: 12896.294724811247
Epoch Step: 60 / 138 Loss: 161.09011840820312 Tokens per Sec: 13394.872481700166
Epoch Step: 65 / 138 Loss: 52.07606506347656 Tokens per Sec: 14087.468657911382
Epoch Step: 70 / 138 Loss: 40.91413879394531 Tokens per Sec: 13436.181706122215
Epoch Step: 75 / 138 Loss: 45.807559967041016 Tokens per Sec: 13849.306717688545
Epoch Step: 80 / 138 Loss: 99.64009094238281 Tokens per Sec: 14115.269920589408
Epoch Step: 85 / 138 Loss: 28.808698654174805 Tokens per Sec: 13743.560684110913
Epoch Step: 90 / 138 Loss: 146.86436462402344 Tokens per Sec: 13245.754673693606
Epoch Step: 95 / 138 Loss: 24.41022491455078 Tokens per Sec: 13824.070401011331
Epoch Step: 100 / 138 Loss: 52.60607147216797 Tokens per Sec: 13111.148053874376
Epoch Step: 105 / 138 Loss: 206.84251403808594 Tokens per Sec: 13234.501049552928
Epoch Step: 110 / 138 Loss: 32.525508880615234 Tokens per Sec: 13355.205075909807
Epoch Step: 115 / 138 Loss: 202.58038330078125 Tokens per Sec: 13162.55372480193
Epoch Step: 120 / 138 Loss: 39.71200942993164 Tokens per Sec: 13559.711551993767
Epoch Step: 125 / 138 Loss: 48.87665557861328 Tokens per Sec: 11854.766898193939
Epoch Step: 130 / 138 Loss: 49.65381622314453 Tokens per Sec: 12886.826414742025
Epoch Step: 135 / 138 Loss: 34.25820541381836 Tokens per Sec: 11844.287015989239
Epoch ended with duration 0:00:47.566594
Train perplexity: 2.1248507165035937
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 ) { TYPE_5 TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.802992
Validation perplexity: 1.950494134597975
Epoch 54 / 1000
Epoch Step: 5 / 138 Loss: 45.118011474609375 Tokens per Sec: 14050.888415383484
Epoch Step: 10 / 138 Loss: 49.45661163330078 Tokens per Sec: 13917.690449912656
Epoch Step: 15 / 138 Loss: 91.33686065673828 Tokens per Sec: 13780.340736219214
Epoch Step: 20 / 138 Loss: 24.424360275268555 Tokens per Sec: 14234.762974014711
Epoch Step: 25 / 138 Loss: 37.85068130493164 Tokens per Sec: 13714.594827148843
Epoch Step: 30 / 138 Loss: 39.95598220825195 Tokens per Sec: 13597.80802951987
Epoch Step: 35 / 138 Loss: 43.18069076538086 Tokens per Sec: 13936.808810869585
Epoch Step: 40 / 138 Loss: 30.50395965576172 Tokens per Sec: 12970.386424542095
Epoch Step: 45 / 138 Loss: 37.41360092163086 Tokens per Sec: 13961.918111631981
Epoch Step: 50 / 138 Loss: 31.469284057617188 Tokens per Sec: 13281.452068097004
Epoch Step: 55 / 138 Loss: 56.70814514160156 Tokens per Sec: 13167.166411947508
Epoch Step: 60 / 138 Loss: 84.90257263183594 Tokens per Sec: 13913.030231563685
Epoch Step: 65 / 138 Loss: 71.8125991821289 Tokens per Sec: 13481.044890753054
Epoch Step: 70 / 138 Loss: 46.02324676513672 Tokens per Sec: 13466.149507078475
Epoch Step: 75 / 138 Loss: 109.95079803466797 Tokens per Sec: 13425.26445197279
Epoch Step: 80 / 138 Loss: 32.89081954956055 Tokens per Sec: 14420.002626706946
Epoch Step: 85 / 138 Loss: 36.075714111328125 Tokens per Sec: 13476.105734449675
Epoch Step: 90 / 138 Loss: 32.532676696777344 Tokens per Sec: 13249.194117088387
Epoch Step: 95 / 138 Loss: 30.45009994506836 Tokens per Sec: 13309.48267733642
Epoch Step: 100 / 138 Loss: 29.774578094482422 Tokens per Sec: 14063.685573939638
Epoch Step: 105 / 138 Loss: 48.669673919677734 Tokens per Sec: 11542.608250661822
Epoch Step: 110 / 138 Loss: 49.078365325927734 Tokens per Sec: 13639.430805081874
Epoch Step: 115 / 138 Loss: 33.17219924926758 Tokens per Sec: 13085.475508851508
Epoch Step: 120 / 138 Loss: 27.25418472290039 Tokens per Sec: 12642.335356750307
Epoch Step: 125 / 138 Loss: 30.152936935424805 Tokens per Sec: 12559.67430782754
Epoch Step: 130 / 138 Loss: 34.06134796142578 Tokens per Sec: 12767.318350292868
Epoch Step: 135 / 138 Loss: 44.085533142089844 Tokens per Sec: 12571.911185200528
Epoch ended with duration 0:00:47.512669
Train perplexity: 2.041432170880268
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) . e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.864430
Validation perplexity: 2.2572954889092745
Epoch 55 / 1000
Epoch Step: 5 / 138 Loss: 22.412477493286133 Tokens per Sec: 13177.407498969922
Epoch Step: 10 / 138 Loss: 46.1221809387207 Tokens per Sec: 13409.75846336357
Epoch Step: 15 / 138 Loss: 42.90070343017578 Tokens per Sec: 14290.173998295006
Epoch Step: 20 / 138 Loss: 51.81241989135742 Tokens per Sec: 13416.759487933108
Epoch Step: 25 / 138 Loss: 44.15348434448242 Tokens per Sec: 13784.25718894451
Epoch Step: 30 / 138 Loss: 24.614572525024414 Tokens per Sec: 14070.742247226513
Epoch Step: 35 / 138 Loss: 39.09513854980469 Tokens per Sec: 13119.99847060548
Epoch Step: 40 / 138 Loss: 34.199058532714844 Tokens per Sec: 14215.385899048715
Epoch Step: 45 / 138 Loss: 19.969894409179688 Tokens per Sec: 13235.296377960316
Epoch Step: 50 / 138 Loss: 28.604440689086914 Tokens per Sec: 13297.16686322834
Epoch Step: 55 / 138 Loss: 33.86875534057617 Tokens per Sec: 13424.045215479498
Epoch Step: 60 / 138 Loss: 119.80487823486328 Tokens per Sec: 13970.997667842752
Epoch Step: 65 / 138 Loss: 52.32388687133789 Tokens per Sec: 13700.138159792654
Epoch Step: 70 / 138 Loss: 26.22426414489746 Tokens per Sec: 13809.354433544077
Epoch Step: 75 / 138 Loss: 38.06776809692383 Tokens per Sec: 13870.76103548866
Epoch Step: 80 / 138 Loss: 39.53303527832031 Tokens per Sec: 13915.937429666694
Epoch Step: 85 / 138 Loss: 179.7241668701172 Tokens per Sec: 13449.63103093648
Epoch Step: 90 / 138 Loss: 46.31517028808594 Tokens per Sec: 13754.9924275597
Epoch Step: 95 / 138 Loss: 39.89189910888672 Tokens per Sec: 13823.495865772606
Epoch Step: 100 / 138 Loss: 32.296634674072266 Tokens per Sec: 13229.428414701042
Epoch Step: 105 / 138 Loss: 46.257816314697266 Tokens per Sec: 13618.212300054083
Epoch Step: 110 / 138 Loss: 40.622257232666016 Tokens per Sec: 13113.675137843116
Epoch Step: 115 / 138 Loss: 41.1677360534668 Tokens per Sec: 12692.52809578147
Epoch Step: 120 / 138 Loss: 156.04554748535156 Tokens per Sec: 13218.821011470845
Epoch Step: 125 / 138 Loss: 29.97060775756836 Tokens per Sec: 13269.336884394608
Epoch Step: 130 / 138 Loss: 37.19061279296875 Tokens per Sec: 13109.004605144537
Epoch Step: 135 / 138 Loss: 35.09359359741211 Tokens per Sec: 13230.829873541672
Epoch ended with duration 0:00:47.193989
Train perplexity: 1.9185638440106505
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.779251
Validation perplexity: 1.9006172324778852
Model saved checkpoint!
Epoch 56 / 1000
Epoch Step: 5 / 138 Loss: 154.16506958007812 Tokens per Sec: 11775.753039129875
Epoch Step: 10 / 138 Loss: 148.21304321289062 Tokens per Sec: 11451.255152129432
Epoch Step: 15 / 138 Loss: 44.49152755737305 Tokens per Sec: 11604.514934127312
Epoch Step: 20 / 138 Loss: 39.68472671508789 Tokens per Sec: 12085.966683821864
Epoch Step: 25 / 138 Loss: 41.966880798339844 Tokens per Sec: 11672.7032223601
Epoch Step: 30 / 138 Loss: 41.38407897949219 Tokens per Sec: 12339.705005376223
Epoch Step: 35 / 138 Loss: 44.90332794189453 Tokens per Sec: 11612.683383215532
Epoch Step: 40 / 138 Loss: 37.23627853393555 Tokens per Sec: 12278.364155374125
Epoch Step: 45 / 138 Loss: 30.365612030029297 Tokens per Sec: 11722.837277379946
Epoch Step: 50 / 138 Loss: 23.74484634399414 Tokens per Sec: 12322.101521948043
Epoch Step: 55 / 138 Loss: 32.31190872192383 Tokens per Sec: 11487.260381357512
Epoch Step: 60 / 138 Loss: 40.0620231628418 Tokens per Sec: 11886.231511652846
Epoch Step: 65 / 138 Loss: 37.50259017944336 Tokens per Sec: 11229.864255139542
Epoch Step: 70 / 138 Loss: 42.97711944580078 Tokens per Sec: 12095.173579373239
Epoch Step: 75 / 138 Loss: 37.83165740966797 Tokens per Sec: 11911.569422316574
Epoch Step: 80 / 138 Loss: 183.58363342285156 Tokens per Sec: 12095.368677202847
Epoch Step: 85 / 138 Loss: 37.493892669677734 Tokens per Sec: 12177.841886719993
Epoch Step: 90 / 138 Loss: 189.28103637695312 Tokens per Sec: 11984.894856814008
Epoch Step: 95 / 138 Loss: 39.26806640625 Tokens per Sec: 11820.029905820076
Epoch Step: 100 / 138 Loss: 39.185302734375 Tokens per Sec: 12430.53993738642
Epoch Step: 105 / 138 Loss: 37.319583892822266 Tokens per Sec: 11591.974840416104
Epoch Step: 110 / 138 Loss: 40.834442138671875 Tokens per Sec: 11438.74927689759
Epoch Step: 115 / 138 Loss: 27.028987884521484 Tokens per Sec: 11705.715489204169
Epoch Step: 120 / 138 Loss: 23.238237380981445 Tokens per Sec: 11744.041063343102
Epoch Step: 125 / 138 Loss: 116.87507629394531 Tokens per Sec: 11410.141825460072
Epoch Step: 130 / 138 Loss: 48.0255241394043 Tokens per Sec: 11597.785906119927
Epoch Step: 135 / 138 Loss: 28.92396354675293 Tokens per Sec: 10792.19014421029
Epoch ended with duration 0:00:54.091905
Train perplexity: 1.8430759954550116
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e . rule ( ) . METHOD_7 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.623354
Validation perplexity: 1.794487267309815
Epoch 57 / 1000
Epoch Step: 5 / 138 Loss: 42.76367950439453 Tokens per Sec: 11780.75701473236
Epoch Step: 10 / 138 Loss: 26.02982521057129 Tokens per Sec: 11837.78815664449
Epoch Step: 15 / 138 Loss: 58.6705322265625 Tokens per Sec: 12298.350994874556
Epoch Step: 20 / 138 Loss: 33.99385452270508 Tokens per Sec: 11800.430901357679
Epoch Step: 25 / 138 Loss: 231.1952667236328 Tokens per Sec: 11585.918821892146
Epoch Step: 30 / 138 Loss: 223.25218200683594 Tokens per Sec: 11659.52793479995
Epoch Step: 35 / 138 Loss: 50.340965270996094 Tokens per Sec: 12233.201876292997
Epoch Step: 40 / 138 Loss: 40.7612190246582 Tokens per Sec: 12284.204322363541
Epoch Step: 45 / 138 Loss: 40.72837829589844 Tokens per Sec: 11756.827490151445
Epoch Step: 50 / 138 Loss: 28.751178741455078 Tokens per Sec: 11697.05865572295
Epoch Step: 55 / 138 Loss: 22.629596710205078 Tokens per Sec: 12083.90404941538
Epoch Step: 60 / 138 Loss: 46.96748352050781 Tokens per Sec: 11551.015448714728
Epoch Step: 65 / 138 Loss: 42.55607604980469 Tokens per Sec: 11934.977754018859
Epoch Step: 70 / 138 Loss: 25.665748596191406 Tokens per Sec: 12663.59574141386
Epoch Step: 75 / 138 Loss: 235.79261779785156 Tokens per Sec: 11702.318803536607
Epoch Step: 80 / 138 Loss: 44.428768157958984 Tokens per Sec: 11748.620738140538
Epoch Step: 85 / 138 Loss: 41.001617431640625 Tokens per Sec: 12221.355388758744
Epoch Step: 90 / 138 Loss: 203.9142608642578 Tokens per Sec: 11833.741625886625
Epoch Step: 95 / 138 Loss: 27.425153732299805 Tokens per Sec: 11937.953808465994
Epoch Step: 100 / 138 Loss: 23.509801864624023 Tokens per Sec: 11701.294238371122
Epoch Step: 105 / 138 Loss: 33.70701217651367 Tokens per Sec: 10596.796205444085
Epoch Step: 110 / 138 Loss: 26.068361282348633 Tokens per Sec: 11167.68677734201
Epoch Step: 115 / 138 Loss: 39.28598403930664 Tokens per Sec: 11636.026395132327
Epoch Step: 120 / 138 Loss: 25.69761848449707 Tokens per Sec: 11722.134250943674
Epoch Step: 125 / 138 Loss: 37.935306549072266 Tokens per Sec: 11846.883475953176
Epoch Step: 130 / 138 Loss: 22.949777603149414 Tokens per Sec: 11589.997624201955
Epoch Step: 135 / 138 Loss: 39.136810302734375 Tokens per Sec: 11911.947837794014
Epoch ended with duration 0:00:54.081267
Train perplexity: 1.8457086585902331
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.730234
Validation perplexity: 2.320509455703313
Epoch 58 / 1000
Epoch Step: 5 / 138 Loss: 34.20428466796875 Tokens per Sec: 12125.151229757254
Epoch Step: 10 / 138 Loss: 30.989158630371094 Tokens per Sec: 12175.670714901691
Epoch Step: 15 / 138 Loss: 184.39320373535156 Tokens per Sec: 11380.735192913064
Epoch Step: 20 / 138 Loss: 38.81413269042969 Tokens per Sec: 12278.6484984349
Epoch Step: 25 / 138 Loss: 44.58174133300781 Tokens per Sec: 11890.704321799205
Epoch Step: 30 / 138 Loss: 42.89889907836914 Tokens per Sec: 11866.298414797366
Epoch Step: 35 / 138 Loss: 25.818143844604492 Tokens per Sec: 11960.75725021207
Epoch Step: 40 / 138 Loss: 26.05734634399414 Tokens per Sec: 11474.868616390077
Epoch Step: 45 / 138 Loss: 43.442665100097656 Tokens per Sec: 11673.920957891563
Epoch Step: 50 / 138 Loss: 25.85637855529785 Tokens per Sec: 12275.092494173803
Epoch Step: 55 / 138 Loss: 31.797088623046875 Tokens per Sec: 12253.707537018961
Epoch Step: 60 / 138 Loss: 192.65194702148438 Tokens per Sec: 11705.271990209767
Epoch Step: 65 / 138 Loss: 47.42658996582031 Tokens per Sec: 12342.858937179913
Epoch Step: 70 / 138 Loss: 65.76132202148438 Tokens per Sec: 11208.264940700918
Epoch Step: 75 / 138 Loss: 40.33624267578125 Tokens per Sec: 11237.565507947109
Epoch Step: 80 / 138 Loss: 33.074607849121094 Tokens per Sec: 12248.836643265602
Epoch Step: 85 / 138 Loss: 36.97799301147461 Tokens per Sec: 11815.775386875348
Epoch Step: 90 / 138 Loss: 47.15378952026367 Tokens per Sec: 11722.272743154548
Epoch Step: 95 / 138 Loss: 45.02848815917969 Tokens per Sec: 11935.676230442423
Epoch Step: 100 / 138 Loss: 28.41163444519043 Tokens per Sec: 12114.816281924432
Epoch Step: 105 / 138 Loss: 41.895179748535156 Tokens per Sec: 11832.211717179434
Epoch Step: 110 / 138 Loss: 147.27157592773438 Tokens per Sec: 11418.888926641686
Epoch Step: 115 / 138 Loss: 33.65782165527344 Tokens per Sec: 11598.387936887162
Epoch Step: 120 / 138 Loss: 50.68513107299805 Tokens per Sec: 11426.235718147582
Epoch Step: 125 / 138 Loss: 39.2757568359375 Tokens per Sec: 11649.234505824445
Epoch Step: 130 / 138 Loss: 27.220624923706055 Tokens per Sec: 10971.272459656002
Epoch Step: 135 / 138 Loss: 29.977476119995117 Tokens per Sec: 11650.876402264637
Epoch ended with duration 0:00:54.126590
Train perplexity: 1.9171631330694405
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.631217
Validation perplexity: 1.7932180662540458
Epoch 59 / 1000
Epoch Step: 5 / 138 Loss: 49.944236755371094 Tokens per Sec: 11396.802788126106
Epoch Step: 10 / 138 Loss: 26.464473724365234 Tokens per Sec: 12229.189479017477
Epoch Step: 15 / 138 Loss: 138.05050659179688 Tokens per Sec: 12190.402107127691
Epoch Step: 20 / 138 Loss: 23.25798225402832 Tokens per Sec: 12117.582760310417
Epoch Step: 25 / 138 Loss: 50.10221481323242 Tokens per Sec: 11930.20413001787
Epoch Step: 30 / 138 Loss: 27.593555450439453 Tokens per Sec: 12051.906619328558
Epoch Step: 35 / 138 Loss: 24.79496955871582 Tokens per Sec: 12338.124760989505
Epoch Step: 40 / 138 Loss: 44.173973083496094 Tokens per Sec: 11943.97930745505
Epoch Step: 45 / 138 Loss: 20.859386444091797 Tokens per Sec: 11570.457992713187
Epoch Step: 50 / 138 Loss: 18.317188262939453 Tokens per Sec: 12349.330636589753
Epoch Step: 55 / 138 Loss: 28.636051177978516 Tokens per Sec: 11983.014213314917
Epoch Step: 60 / 138 Loss: 32.81716537475586 Tokens per Sec: 11664.972741680776
Epoch Step: 65 / 138 Loss: 33.43913650512695 Tokens per Sec: 11384.079799984036
Epoch Step: 70 / 138 Loss: 40.853267669677734 Tokens per Sec: 11911.785315972264
Epoch Step: 75 / 138 Loss: 51.09184265136719 Tokens per Sec: 11508.572649558904
Epoch Step: 80 / 138 Loss: 74.48979187011719 Tokens per Sec: 11856.302774787438
Epoch Step: 85 / 138 Loss: 42.79082489013672 Tokens per Sec: 11615.75439805992
Epoch Step: 90 / 138 Loss: 41.945499420166016 Tokens per Sec: 12316.612964537859
Epoch Step: 95 / 138 Loss: 50.69878387451172 Tokens per Sec: 11698.56642134139
Epoch Step: 100 / 138 Loss: 18.634855270385742 Tokens per Sec: 11623.719607573696
Epoch Step: 105 / 138 Loss: 29.064123153686523 Tokens per Sec: 11873.131531666762
Epoch Step: 110 / 138 Loss: 24.075830459594727 Tokens per Sec: 10565.925667999025
Epoch Step: 115 / 138 Loss: 26.34323501586914 Tokens per Sec: 11719.086745959678
Epoch Step: 120 / 138 Loss: 30.172645568847656 Tokens per Sec: 11790.624775837648
Epoch Step: 125 / 138 Loss: 28.866382598876953 Tokens per Sec: 11254.273782068383
Epoch Step: 130 / 138 Loss: 24.67359161376953 Tokens per Sec: 11146.224286708724
Epoch Step: 135 / 138 Loss: 39.18989562988281 Tokens per Sec: 11755.471255372202
Epoch ended with duration 0:00:54.244753
Train perplexity: 1.9395409746018946
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) , }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.652195
Validation perplexity: 1.8843418727133991
Epoch 60 / 1000
Epoch Step: 5 / 138 Loss: 23.931289672851562 Tokens per Sec: 12107.115558752761
Epoch Step: 10 / 138 Loss: 42.397369384765625 Tokens per Sec: 11425.041909588892
Epoch Step: 15 / 138 Loss: 155.22166442871094 Tokens per Sec: 11850.6930291247
Epoch Step: 20 / 138 Loss: 101.4012451171875 Tokens per Sec: 11980.634600855852
Epoch Step: 25 / 138 Loss: 124.94577026367188 Tokens per Sec: 11534.864379007719
Epoch Step: 30 / 138 Loss: 40.912567138671875 Tokens per Sec: 11628.966438605825
Epoch Step: 35 / 138 Loss: 27.701690673828125 Tokens per Sec: 11839.823929089598
Epoch Step: 40 / 138 Loss: 27.96818733215332 Tokens per Sec: 11808.064318558045
Epoch Step: 45 / 138 Loss: 40.709346771240234 Tokens per Sec: 12012.518733901152
Epoch Step: 50 / 138 Loss: 42.54813766479492 Tokens per Sec: 11664.475747485685
Epoch Step: 55 / 138 Loss: 35.196449279785156 Tokens per Sec: 11626.576076810663
Epoch Step: 60 / 138 Loss: 23.556880950927734 Tokens per Sec: 12216.06169528406
Epoch Step: 65 / 138 Loss: 22.245691299438477 Tokens per Sec: 11220.374984141612
Epoch Step: 70 / 138 Loss: 37.96268081665039 Tokens per Sec: 11589.439823371758
Epoch Step: 75 / 138 Loss: 34.6424674987793 Tokens per Sec: 12594.205963811486
Epoch Step: 80 / 138 Loss: 34.58775329589844 Tokens per Sec: 11498.23648740926
Epoch Step: 85 / 138 Loss: 25.311138153076172 Tokens per Sec: 11653.137897915567
Epoch Step: 90 / 138 Loss: 29.338682174682617 Tokens per Sec: 11720.075772759354
Epoch Step: 95 / 138 Loss: 26.693588256835938 Tokens per Sec: 12272.30072662759
Epoch Step: 100 / 138 Loss: 30.142662048339844 Tokens per Sec: 12031.317260135042
Epoch Step: 105 / 138 Loss: 33.78178787231445 Tokens per Sec: 11075.61013798692
Epoch Step: 110 / 138 Loss: 27.561216354370117 Tokens per Sec: 11669.418179769727
Epoch Step: 115 / 138 Loss: 36.24801254272461 Tokens per Sec: 11187.35889841575
Epoch Step: 120 / 138 Loss: 43.99766159057617 Tokens per Sec: 11738.509714018288
Epoch Step: 125 / 138 Loss: 41.40706253051758 Tokens per Sec: 11196.553608983675
Epoch Step: 130 / 138 Loss: 96.63477325439453 Tokens per Sec: 10818.153397863385
Epoch Step: 135 / 138 Loss: 32.99190902709961 Tokens per Sec: 11603.633606689064
Epoch ended with duration 0:00:54.597900
Train perplexity: 2.004308936884112
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 STRING_2 STRING_3 STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.729300
Validation perplexity: 2.364556684310298
Model saved checkpoint!
Epoch 61 / 1000
Epoch Step: 5 / 138 Loss: 51.06831741333008 Tokens per Sec: 11891.342736713135
Epoch Step: 10 / 138 Loss: 22.84073257446289 Tokens per Sec: 12104.727838943041
Epoch Step: 15 / 138 Loss: 23.542621612548828 Tokens per Sec: 12405.425676111528
Epoch Step: 20 / 138 Loss: 124.1915512084961 Tokens per Sec: 11313.222656206806
Epoch Step: 25 / 138 Loss: 35.85748291015625 Tokens per Sec: 12122.218689518324
Epoch Step: 30 / 138 Loss: 45.82925033569336 Tokens per Sec: 12227.562709590879
Epoch Step: 35 / 138 Loss: 183.7519073486328 Tokens per Sec: 11549.028562341657
Epoch Step: 40 / 138 Loss: 42.84872817993164 Tokens per Sec: 11614.17232872014
Epoch Step: 45 / 138 Loss: 184.2076416015625 Tokens per Sec: 11641.04699324709
Epoch Step: 50 / 138 Loss: 94.9715347290039 Tokens per Sec: 11833.863905295715
Epoch Step: 55 / 138 Loss: 31.65560531616211 Tokens per Sec: 12440.256824022377
Epoch Step: 60 / 138 Loss: 41.90620040893555 Tokens per Sec: 11545.031100671811
Epoch Step: 65 / 138 Loss: 145.52442932128906 Tokens per Sec: 11182.876649716838
Epoch Step: 70 / 138 Loss: 24.495277404785156 Tokens per Sec: 11541.18368785095
Epoch Step: 75 / 138 Loss: 26.890792846679688 Tokens per Sec: 12036.795558276292
Epoch Step: 80 / 138 Loss: 31.491689682006836 Tokens per Sec: 11733.01386623723
Epoch Step: 85 / 138 Loss: 28.168495178222656 Tokens per Sec: 11908.469049113943
Epoch Step: 90 / 138 Loss: 39.81877517700195 Tokens per Sec: 11704.19062688758
Epoch Step: 95 / 138 Loss: 38.141326904296875 Tokens per Sec: 11555.51198599913
Epoch Step: 100 / 138 Loss: 31.177459716796875 Tokens per Sec: 12047.782423849641
Epoch Step: 105 / 138 Loss: 37.547454833984375 Tokens per Sec: 11575.979310891318
Epoch Step: 110 / 138 Loss: 196.13929748535156 Tokens per Sec: 11282.550394307873
Epoch Step: 115 / 138 Loss: 33.19143295288086 Tokens per Sec: 11769.003447902445
Epoch Step: 120 / 138 Loss: 43.221649169921875 Tokens per Sec: 10882.006253362419
Epoch Step: 125 / 138 Loss: 24.637182235717773 Tokens per Sec: 11538.640398117946
Epoch Step: 130 / 138 Loss: 25.71812629699707 Tokens per Sec: 11812.755742905969
Epoch Step: 135 / 138 Loss: 31.80132293701172 Tokens per Sec: 11805.310028704209
Epoch ended with duration 0:00:54.344830
Train perplexity: 1.9344877028113026
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.626183
Validation perplexity: 1.731186009727821
Epoch 62 / 1000
Epoch Step: 5 / 138 Loss: 25.52732276916504 Tokens per Sec: 11944.155496342073
Epoch Step: 10 / 138 Loss: 31.526487350463867 Tokens per Sec: 12049.780363449627
Epoch Step: 15 / 138 Loss: 40.85289764404297 Tokens per Sec: 12134.076216387948
Epoch Step: 20 / 138 Loss: 37.51258087158203 Tokens per Sec: 11936.310443839944
Epoch Step: 25 / 138 Loss: 27.119163513183594 Tokens per Sec: 11860.989847634448
Epoch Step: 30 / 138 Loss: 20.59032440185547 Tokens per Sec: 12102.668213171051
Epoch Step: 35 / 138 Loss: 16.948152542114258 Tokens per Sec: 11793.998506400258
Epoch Step: 40 / 138 Loss: 18.49173927307129 Tokens per Sec: 11878.822098947654
Epoch Step: 45 / 138 Loss: 27.42816162109375 Tokens per Sec: 11180.081664989515
Epoch Step: 50 / 138 Loss: 19.962491989135742 Tokens per Sec: 12019.027612998543
Epoch Step: 55 / 138 Loss: 23.750225067138672 Tokens per Sec: 11789.735767595868
Epoch Step: 60 / 138 Loss: 44.59062576293945 Tokens per Sec: 11753.372140238025
Epoch Step: 65 / 138 Loss: 28.531505584716797 Tokens per Sec: 11764.548659773896
Epoch Step: 70 / 138 Loss: 30.35695457458496 Tokens per Sec: 11433.199891735043
Epoch Step: 75 / 138 Loss: 36.784828186035156 Tokens per Sec: 11918.658080498059
Epoch Step: 80 / 138 Loss: 117.67339324951172 Tokens per Sec: 11623.181899183237
Epoch Step: 85 / 138 Loss: 23.548145294189453 Tokens per Sec: 12132.375476167499
Epoch Step: 90 / 138 Loss: 42.92161560058594 Tokens per Sec: 12420.895326215707
Epoch Step: 95 / 138 Loss: 37.778499603271484 Tokens per Sec: 11781.808409051275
Epoch Step: 100 / 138 Loss: 44.96189498901367 Tokens per Sec: 11775.512872272413
Epoch Step: 105 / 138 Loss: 27.013898849487305 Tokens per Sec: 9912.21804294859
Epoch Step: 110 / 138 Loss: 40.06369400024414 Tokens per Sec: 11739.191890332882
Epoch Step: 115 / 138 Loss: 26.19831085205078 Tokens per Sec: 11689.40923572606
Epoch Step: 120 / 138 Loss: 33.342430114746094 Tokens per Sec: 12029.099742616147
Epoch Step: 125 / 138 Loss: 178.52691650390625 Tokens per Sec: 10978.232204200483
Epoch Step: 130 / 138 Loss: 36.0574836730957 Tokens per Sec: 11437.408835989643
Epoch Step: 135 / 138 Loss: 177.90943908691406 Tokens per Sec: 11187.871879996896
Epoch ended with duration 0:00:54.435509
Train perplexity: 1.913030900614623
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.700953
Validation perplexity: 2.141642383256832
Epoch 63 / 1000
Epoch Step: 5 / 138 Loss: 35.70494842529297 Tokens per Sec: 11970.308081061263
Epoch Step: 10 / 138 Loss: 27.574016571044922 Tokens per Sec: 12391.177366238027
Epoch Step: 15 / 138 Loss: 45.538787841796875 Tokens per Sec: 12236.6632818846
Epoch Step: 20 / 138 Loss: 19.892324447631836 Tokens per Sec: 11644.87693923694
Epoch Step: 25 / 138 Loss: 42.875362396240234 Tokens per Sec: 11513.01478972609
Epoch Step: 30 / 138 Loss: 174.92327880859375 Tokens per Sec: 11825.496410502266
Epoch Step: 35 / 138 Loss: 44.26747131347656 Tokens per Sec: 11827.247331289258
Epoch Step: 40 / 138 Loss: 141.13633728027344 Tokens per Sec: 12089.460961841038
Epoch Step: 45 / 138 Loss: 33.757022857666016 Tokens per Sec: 11315.80664605108
Epoch Step: 50 / 138 Loss: 167.59193420410156 Tokens per Sec: 12066.841265543067
Epoch Step: 55 / 138 Loss: 35.328067779541016 Tokens per Sec: 11975.029677738561
Epoch Step: 60 / 138 Loss: 40.45517349243164 Tokens per Sec: 12024.461448432015
Epoch Step: 65 / 138 Loss: 27.1915283203125 Tokens per Sec: 11949.438618613573
Epoch Step: 70 / 138 Loss: 24.20159149169922 Tokens per Sec: 12168.07391544434
Epoch Step: 75 / 138 Loss: 23.49732780456543 Tokens per Sec: 11087.541570113697
Epoch Step: 80 / 138 Loss: 36.41385269165039 Tokens per Sec: 12465.174158350917
Epoch Step: 85 / 138 Loss: 37.506038665771484 Tokens per Sec: 11726.392436612301
Epoch Step: 90 / 138 Loss: 41.69859313964844 Tokens per Sec: 11665.949647841915
Epoch Step: 95 / 138 Loss: 161.30801391601562 Tokens per Sec: 11784.24559526648
Epoch Step: 100 / 138 Loss: 22.74962615966797 Tokens per Sec: 11418.997889075996
Epoch Step: 105 / 138 Loss: 47.820037841796875 Tokens per Sec: 10867.792617340034
Epoch Step: 110 / 138 Loss: 42.931060791015625 Tokens per Sec: 11645.516382648564
Epoch Step: 115 / 138 Loss: 30.703845977783203 Tokens per Sec: 11827.593719989693
Epoch Step: 120 / 138 Loss: 129.0713653564453 Tokens per Sec: 11497.589666839742
Epoch Step: 125 / 138 Loss: 42.88660430908203 Tokens per Sec: 11386.581021055212
Epoch Step: 130 / 138 Loss: 33.472923278808594 Tokens per Sec: 11211.212049815003
Epoch Step: 135 / 138 Loss: 23.678808212280273 Tokens per Sec: 11261.282767049546
Epoch ended with duration 0:00:54.347745
Train perplexity: 1.905396151087919
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.635928
Validation perplexity: 1.5924710625263494
Model saved best_on_validation!
Epoch 64 / 1000
Epoch Step: 5 / 138 Loss: 23.385536193847656 Tokens per Sec: 11905.555705355424
Epoch Step: 10 / 138 Loss: 20.339963912963867 Tokens per Sec: 11734.39779395752
Epoch Step: 15 / 138 Loss: 33.236690521240234 Tokens per Sec: 11797.57819668806
Epoch Step: 20 / 138 Loss: 24.73733139038086 Tokens per Sec: 12180.830582268974
Epoch Step: 25 / 138 Loss: 36.96969985961914 Tokens per Sec: 12032.513917442862
Epoch Step: 30 / 138 Loss: 27.80732536315918 Tokens per Sec: 12093.979336846283
Epoch Step: 35 / 138 Loss: 22.255407333374023 Tokens per Sec: 11560.657030842342
Epoch Step: 40 / 138 Loss: 34.820518493652344 Tokens per Sec: 11926.487888850635
Epoch Step: 45 / 138 Loss: 30.092531204223633 Tokens per Sec: 12341.360971107826
Epoch Step: 50 / 138 Loss: 19.571733474731445 Tokens per Sec: 12083.940198440292
Epoch Step: 55 / 138 Loss: 27.601436614990234 Tokens per Sec: 12238.207183779528
Epoch Step: 60 / 138 Loss: 196.1474609375 Tokens per Sec: 11789.18793060583
Epoch Step: 65 / 138 Loss: 34.498443603515625 Tokens per Sec: 11756.448110488158
Epoch Step: 70 / 138 Loss: 42.845924377441406 Tokens per Sec: 12028.293578507253
Epoch Step: 75 / 138 Loss: 23.35490608215332 Tokens per Sec: 12054.5911491639
Epoch Step: 80 / 138 Loss: 50.14360809326172 Tokens per Sec: 11132.97061893514
Epoch Step: 85 / 138 Loss: 44.313236236572266 Tokens per Sec: 11628.61488360039
Epoch Step: 90 / 138 Loss: 47.636558532714844 Tokens per Sec: 11155.405699948717
Epoch Step: 95 / 138 Loss: 27.77351188659668 Tokens per Sec: 11872.750400258547
Epoch Step: 100 / 138 Loss: 37.22138595581055 Tokens per Sec: 11841.333049047
Epoch Step: 105 / 138 Loss: 28.187084197998047 Tokens per Sec: 11816.954735760537
Epoch Step: 110 / 138 Loss: 38.16129684448242 Tokens per Sec: 11346.72581747977
Epoch Step: 115 / 138 Loss: 25.232589721679688 Tokens per Sec: 11480.142630047994
Epoch Step: 120 / 138 Loss: 26.925762176513672 Tokens per Sec: 11318.838145588365
Epoch Step: 125 / 138 Loss: 193.69461059570312 Tokens per Sec: 11484.307815741586
Epoch Step: 130 / 138 Loss: 40.70508575439453 Tokens per Sec: 10760.57705213749
Epoch Step: 135 / 138 Loss: 43.647640228271484 Tokens per Sec: 11698.475586210192
Epoch ended with duration 0:00:54.311678
Train perplexity: 1.8455273247790018
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.666186
Validation perplexity: 1.9290938075237223
Epoch 65 / 1000
Epoch Step: 5 / 138 Loss: 39.175601959228516 Tokens per Sec: 12228.144402520047
Epoch Step: 10 / 138 Loss: 29.853343963623047 Tokens per Sec: 11688.169826427462
Epoch Step: 15 / 138 Loss: 25.47075653076172 Tokens per Sec: 11621.852420752695
Epoch Step: 20 / 138 Loss: 28.92888641357422 Tokens per Sec: 12141.10399445585
Epoch Step: 25 / 138 Loss: 69.36541748046875 Tokens per Sec: 12025.112016826643
Epoch Step: 30 / 138 Loss: 66.48656463623047 Tokens per Sec: 11268.344466963368
Epoch Step: 35 / 138 Loss: 45.78061294555664 Tokens per Sec: 11668.997185904902
Epoch Step: 40 / 138 Loss: 288.1683654785156 Tokens per Sec: 11955.844091622754
Epoch Step: 45 / 138 Loss: 43.79844665527344 Tokens per Sec: 11493.468688572682
Epoch Step: 50 / 138 Loss: 71.11741638183594 Tokens per Sec: 12376.211859497947
Epoch Step: 55 / 138 Loss: 41.81502151489258 Tokens per Sec: 11530.455323162048
Epoch Step: 60 / 138 Loss: 22.12186050415039 Tokens per Sec: 12220.632738479795
Epoch Step: 65 / 138 Loss: 39.877925872802734 Tokens per Sec: 11817.806146655495
Epoch Step: 70 / 138 Loss: 27.032567977905273 Tokens per Sec: 12367.106769851329
Epoch Step: 75 / 138 Loss: 21.836503982543945 Tokens per Sec: 11264.342476805366
Epoch Step: 80 / 138 Loss: 48.68825912475586 Tokens per Sec: 11915.56075593974
Epoch Step: 85 / 138 Loss: 53.58230972290039 Tokens per Sec: 11789.568678984915
Epoch Step: 90 / 138 Loss: 33.874351501464844 Tokens per Sec: 11918.088159764062
Epoch Step: 95 / 138 Loss: 42.21644592285156 Tokens per Sec: 12484.770307023038
Epoch Step: 100 / 138 Loss: 39.61818313598633 Tokens per Sec: 12185.374570845868
Epoch Step: 105 / 138 Loss: 26.783437728881836 Tokens per Sec: 10573.150758890257
Epoch Step: 110 / 138 Loss: 33.98202133178711 Tokens per Sec: 11622.808691704797
Epoch Step: 115 / 138 Loss: 182.888671875 Tokens per Sec: 10858.479095458106
Epoch Step: 120 / 138 Loss: 39.55266189575195 Tokens per Sec: 11882.646277445856
Epoch Step: 125 / 138 Loss: 28.576751708984375 Tokens per Sec: 11677.25666323185
Epoch Step: 130 / 138 Loss: 35.08666229248047 Tokens per Sec: 11357.652928126254
Epoch Step: 135 / 138 Loss: 39.19108963012695 Tokens per Sec: 11674.982412523963
Epoch ended with duration 0:00:54.210927
Train perplexity: 2.1863376343138388
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.627817
Validation perplexity: 1.8195887089579852
Model saved checkpoint!
Epoch 66 / 1000
Epoch Step: 5 / 138 Loss: 42.13420104980469 Tokens per Sec: 11861.118776627161
Epoch Step: 10 / 138 Loss: 37.268798828125 Tokens per Sec: 12400.655223547865
Epoch Step: 15 / 138 Loss: 34.641883850097656 Tokens per Sec: 12057.798268217877
Epoch Step: 20 / 138 Loss: 40.945980072021484 Tokens per Sec: 12188.272552110702
Epoch Step: 25 / 138 Loss: 41.333091735839844 Tokens per Sec: 11900.327381198666
Epoch Step: 30 / 138 Loss: 36.477989196777344 Tokens per Sec: 11802.314763858263
Epoch Step: 35 / 138 Loss: 21.666048049926758 Tokens per Sec: 12047.848320812389
Epoch Step: 40 / 138 Loss: 22.635765075683594 Tokens per Sec: 11827.670261033009
Epoch Step: 45 / 138 Loss: 136.89849853515625 Tokens per Sec: 10948.126036160616
Epoch Step: 50 / 138 Loss: 17.797170639038086 Tokens per Sec: 12317.39501246807
Epoch Step: 55 / 138 Loss: 29.088171005249023 Tokens per Sec: 11515.49966291934
Epoch Step: 60 / 138 Loss: 16.762989044189453 Tokens per Sec: 12313.710437842814
Epoch Step: 65 / 138 Loss: 17.50687026977539 Tokens per Sec: 12224.447581843313
Epoch Step: 70 / 138 Loss: 40.70249938964844 Tokens per Sec: 11653.960020995024
Epoch Step: 75 / 138 Loss: 21.74553871154785 Tokens per Sec: 11991.095928446175
Epoch Step: 80 / 138 Loss: 180.8910675048828 Tokens per Sec: 11937.140248020532
Epoch Step: 85 / 138 Loss: 46.620548248291016 Tokens per Sec: 11788.965598417073
Epoch Step: 90 / 138 Loss: 19.64162254333496 Tokens per Sec: 11296.401056209332
Epoch Step: 95 / 138 Loss: 31.34737777709961 Tokens per Sec: 12278.888884825923
Epoch Step: 100 / 138 Loss: 39.214420318603516 Tokens per Sec: 11785.675915536556
Epoch Step: 105 / 138 Loss: 26.382993698120117 Tokens per Sec: 11563.718264195957
Epoch Step: 110 / 138 Loss: 25.49462890625 Tokens per Sec: 11882.093849087642
Epoch Step: 115 / 138 Loss: 24.589920043945312 Tokens per Sec: 11763.3201806448
Epoch Step: 120 / 138 Loss: 27.780330657958984 Tokens per Sec: 11386.927490045637
Epoch Step: 125 / 138 Loss: 26.4990291595459 Tokens per Sec: 11548.047254155163
Epoch Step: 130 / 138 Loss: 26.752382278442383 Tokens per Sec: 11566.975328864453
Epoch Step: 135 / 138 Loss: 23.92005729675293 Tokens per Sec: 11437.672268272961
Epoch ended with duration 0:00:54.076194
Train perplexity: 1.6781370324539147
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.629115
Validation perplexity: 1.8017821626044954
Epoch 67 / 1000
Epoch Step: 5 / 138 Loss: 22.244245529174805 Tokens per Sec: 11834.86061834262
Epoch Step: 10 / 138 Loss: 18.532962799072266 Tokens per Sec: 12250.559485919322
Epoch Step: 15 / 138 Loss: 33.58588409423828 Tokens per Sec: 11834.615329428336
Epoch Step: 20 / 138 Loss: 41.63920593261719 Tokens per Sec: 11970.351695074885
Epoch Step: 25 / 138 Loss: 23.37973403930664 Tokens per Sec: 11634.327261957806
Epoch Step: 30 / 138 Loss: 35.37446594238281 Tokens per Sec: 12123.18580643302
Epoch Step: 35 / 138 Loss: 20.640268325805664 Tokens per Sec: 11904.778168595565
Epoch Step: 40 / 138 Loss: 30.60076141357422 Tokens per Sec: 11328.06125697789
Epoch Step: 45 / 138 Loss: 40.34371566772461 Tokens per Sec: 11505.646297770865
Epoch Step: 50 / 138 Loss: 28.49369239807129 Tokens per Sec: 12494.134514728636
Epoch Step: 55 / 138 Loss: 29.983278274536133 Tokens per Sec: 11610.165646244195
Epoch Step: 60 / 138 Loss: 43.05263137817383 Tokens per Sec: 11834.232779762677
Epoch Step: 65 / 138 Loss: 222.84884643554688 Tokens per Sec: 11516.311933572646
Epoch Step: 70 / 138 Loss: 39.96478271484375 Tokens per Sec: 11511.636274851002
Epoch Step: 75 / 138 Loss: 19.841379165649414 Tokens per Sec: 12218.401863585548
Epoch Step: 80 / 138 Loss: 27.078380584716797 Tokens per Sec: 12527.660968699642
Epoch Step: 85 / 138 Loss: 23.36328125 Tokens per Sec: 11498.573429790733
Epoch Step: 90 / 138 Loss: 23.058805465698242 Tokens per Sec: 12502.070906368952
Epoch Step: 95 / 138 Loss: 35.97456741333008 Tokens per Sec: 11902.28759971642
Epoch Step: 100 / 138 Loss: 24.816802978515625 Tokens per Sec: 12120.279635642128
Epoch Step: 105 / 138 Loss: 27.693815231323242 Tokens per Sec: 11164.09400978621
Epoch Step: 110 / 138 Loss: 34.69960403442383 Tokens per Sec: 11477.766443167835
Epoch Step: 115 / 138 Loss: 36.80976867675781 Tokens per Sec: 11756.37453685344
Epoch Step: 120 / 138 Loss: 31.429458618164062 Tokens per Sec: 11293.096446663443
Epoch Step: 125 / 138 Loss: 31.235706329345703 Tokens per Sec: 10770.48448639402
Epoch Step: 130 / 138 Loss: 33.21260070800781 Tokens per Sec: 11552.656173514919
Epoch Step: 135 / 138 Loss: 179.84893798828125 Tokens per Sec: 11526.178170147869
Epoch ended with duration 0:00:54.229729
Train perplexity: 1.7547950126357268
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 , TYPE_4 , VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.702768
Validation perplexity: 2.033214026269944
Epoch 68 / 1000
Epoch Step: 5 / 138 Loss: 22.772459030151367 Tokens per Sec: 11798.610029032354
Epoch Step: 10 / 138 Loss: 36.121116638183594 Tokens per Sec: 12032.397673886857
Epoch Step: 15 / 138 Loss: 34.90862274169922 Tokens per Sec: 12273.0175858781
Epoch Step: 20 / 138 Loss: 133.2749481201172 Tokens per Sec: 11677.641356045056
Epoch Step: 25 / 138 Loss: 39.61591720581055 Tokens per Sec: 11382.989749315166
Epoch Step: 30 / 138 Loss: 29.772735595703125 Tokens per Sec: 11667.459241327448
Epoch Step: 35 / 138 Loss: 40.740966796875 Tokens per Sec: 11927.957406257747
Epoch Step: 40 / 138 Loss: 19.987558364868164 Tokens per Sec: 11866.763728468275
Epoch Step: 45 / 138 Loss: 34.63993835449219 Tokens per Sec: 11581.215529628102
Epoch Step: 50 / 138 Loss: 26.65875244140625 Tokens per Sec: 11954.000756549787
Epoch Step: 55 / 138 Loss: 30.37816047668457 Tokens per Sec: 12345.33177291046
Epoch Step: 60 / 138 Loss: 22.85250473022461 Tokens per Sec: 12392.120973270685
Epoch Step: 65 / 138 Loss: 29.855533599853516 Tokens per Sec: 12438.24078813211
Epoch Step: 70 / 138 Loss: 19.121307373046875 Tokens per Sec: 11939.527657299284
Epoch Step: 75 / 138 Loss: 225.20742797851562 Tokens per Sec: 11483.271253149374
Epoch Step: 80 / 138 Loss: 20.315561294555664 Tokens per Sec: 11508.937105500278
Epoch Step: 85 / 138 Loss: 22.2403621673584 Tokens per Sec: 11811.979897233847
Epoch Step: 90 / 138 Loss: 37.927730560302734 Tokens per Sec: 11803.60036383555
Epoch Step: 95 / 138 Loss: 86.69538879394531 Tokens per Sec: 11910.574930226796
Epoch Step: 100 / 138 Loss: 19.738384246826172 Tokens per Sec: 11720.906253846655
Epoch Step: 105 / 138 Loss: 40.3994255065918 Tokens per Sec: 11320.55069791282
Epoch Step: 110 / 138 Loss: 27.335519790649414 Tokens per Sec: 11476.87421578498
Epoch Step: 115 / 138 Loss: 20.665603637695312 Tokens per Sec: 11198.908353701654
Epoch Step: 120 / 138 Loss: 30.090177536010742 Tokens per Sec: 10940.108989596496
Epoch Step: 125 / 138 Loss: 28.610132217407227 Tokens per Sec: 11689.691392681663
Epoch Step: 130 / 138 Loss: 28.265878677368164 Tokens per Sec: 11517.46695586109
Epoch Step: 135 / 138 Loss: 23.994373321533203 Tokens per Sec: 11804.165003257329
Epoch ended with duration 0:00:54.270042
Train perplexity: 1.841555556372537
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.728585
Validation perplexity: 2.2155129712991948
Epoch 69 / 1000
Epoch Step: 5 / 138 Loss: 21.811948776245117 Tokens per Sec: 11831.541638070037
Epoch Step: 10 / 138 Loss: 37.305564880371094 Tokens per Sec: 12019.375273298065
Epoch Step: 15 / 138 Loss: 32.33127975463867 Tokens per Sec: 12089.07490926983
Epoch Step: 20 / 138 Loss: 26.547752380371094 Tokens per Sec: 11810.96687358159
Epoch Step: 25 / 138 Loss: 30.661712646484375 Tokens per Sec: 11510.440649704462
Epoch Step: 30 / 138 Loss: 124.93888854980469 Tokens per Sec: 12186.498087616563
Epoch Step: 35 / 138 Loss: 22.404626846313477 Tokens per Sec: 11904.03014022405
Epoch Step: 40 / 138 Loss: 32.98456954956055 Tokens per Sec: 11866.419430703278
Epoch Step: 45 / 138 Loss: 35.164161682128906 Tokens per Sec: 11761.031582898093
Epoch Step: 50 / 138 Loss: 46.57585144042969 Tokens per Sec: 12309.629037634231
Epoch Step: 55 / 138 Loss: 17.20990753173828 Tokens per Sec: 11910.594691661212
Epoch Step: 60 / 138 Loss: 34.721221923828125 Tokens per Sec: 12065.299231154406
Epoch Step: 65 / 138 Loss: 40.9674072265625 Tokens per Sec: 11886.589301541388
Epoch Step: 70 / 138 Loss: 22.883033752441406 Tokens per Sec: 11967.827955956329
Epoch Step: 75 / 138 Loss: 23.35724639892578 Tokens per Sec: 11658.612539800251
Epoch Step: 80 / 138 Loss: 179.5569305419922 Tokens per Sec: 11583.87701966449
Epoch Step: 85 / 138 Loss: 24.630535125732422 Tokens per Sec: 11885.010523397676
Epoch Step: 90 / 138 Loss: 25.71062660217285 Tokens per Sec: 12387.215248313276
Epoch Step: 95 / 138 Loss: 19.772871017456055 Tokens per Sec: 12113.072556910773
Epoch Step: 100 / 138 Loss: 37.210330963134766 Tokens per Sec: 11778.70754243746
Epoch Step: 105 / 138 Loss: 135.6396026611328 Tokens per Sec: 11050.429062728212
Epoch Step: 110 / 138 Loss: 43.54069900512695 Tokens per Sec: 10952.539966597955
Epoch Step: 115 / 138 Loss: 51.24584197998047 Tokens per Sec: 11656.622686585628
Epoch Step: 120 / 138 Loss: 193.63929748535156 Tokens per Sec: 11516.196380325684
Epoch Step: 125 / 138 Loss: 39.328521728515625 Tokens per Sec: 11744.22290916238
Epoch Step: 130 / 138 Loss: 35.96229553222656 Tokens per Sec: 11640.141581146872
Epoch Step: 135 / 138 Loss: 45.05725860595703 Tokens per Sec: 11680.10629537964
Epoch ended with duration 0:00:54.052897
Train perplexity: 1.6618811884984055
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] , values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , VAR_4 , boolean VAR_5 ) { TYPE_5 rule rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.625188
Validation perplexity: 1.7013124643432522
Epoch 70 / 1000
Epoch Step: 5 / 138 Loss: 22.640336990356445 Tokens per Sec: 11664.01289238947
Epoch Step: 10 / 138 Loss: 37.67941665649414 Tokens per Sec: 11805.683897244498
Epoch Step: 15 / 138 Loss: 43.189308166503906 Tokens per Sec: 12011.211583150065
Epoch Step: 20 / 138 Loss: 23.336755752563477 Tokens per Sec: 11773.85809980106
Epoch Step: 25 / 138 Loss: 25.171245574951172 Tokens per Sec: 11933.08771712218
Epoch Step: 30 / 138 Loss: 15.953123092651367 Tokens per Sec: 11701.032896321014
Epoch Step: 35 / 138 Loss: 33.416160583496094 Tokens per Sec: 11556.80541972339
Epoch Step: 40 / 138 Loss: 32.83626937866211 Tokens per Sec: 11948.543619687154
Epoch Step: 45 / 138 Loss: 42.113101959228516 Tokens per Sec: 12195.25298252456
Epoch Step: 50 / 138 Loss: 42.416473388671875 Tokens per Sec: 12380.826886810812
Epoch Step: 55 / 138 Loss: 32.43637466430664 Tokens per Sec: 12025.97338042073
Epoch Step: 60 / 138 Loss: 24.839223861694336 Tokens per Sec: 11675.78749942048
Epoch Step: 65 / 138 Loss: 25.345651626586914 Tokens per Sec: 11830.52544514652
Epoch Step: 70 / 138 Loss: 217.74632263183594 Tokens per Sec: 11230.081567804726
Epoch Step: 75 / 138 Loss: 31.24815559387207 Tokens per Sec: 11522.251814757277
Epoch Step: 80 / 138 Loss: 32.39714431762695 Tokens per Sec: 12431.398489091598
Epoch Step: 85 / 138 Loss: 28.795127868652344 Tokens per Sec: 11694.535892681082
Epoch Step: 90 / 138 Loss: 29.32058334350586 Tokens per Sec: 11969.338145741887
Epoch Step: 95 / 138 Loss: 41.392276763916016 Tokens per Sec: 11451.16328614467
Epoch Step: 100 / 138 Loss: 21.250295639038086 Tokens per Sec: 12192.586265185271
Epoch Step: 105 / 138 Loss: 28.033170700073242 Tokens per Sec: 11591.10554167115
Epoch Step: 110 / 138 Loss: 29.752681732177734 Tokens per Sec: 11302.959032021135
Epoch Step: 115 / 138 Loss: 28.125019073486328 Tokens per Sec: 11174.483460099176
Epoch Step: 120 / 138 Loss: 32.11118698120117 Tokens per Sec: 11926.763908249708
Epoch Step: 125 / 138 Loss: 33.376914978027344 Tokens per Sec: 11246.702189403
Epoch Step: 130 / 138 Loss: 23.841297149658203 Tokens per Sec: 10857.421247844562
Epoch Step: 135 / 138 Loss: 26.724782943725586 Tokens per Sec: 11717.965940305112
Epoch ended with duration 0:00:54.339842
Train perplexity: 1.7925450365492006
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.627178
Validation perplexity: 1.7107506930739413
Model saved checkpoint!
Epoch 71 / 1000
Epoch Step: 5 / 138 Loss: 15.795571327209473 Tokens per Sec: 11771.553633429405
Epoch Step: 10 / 138 Loss: 36.33893966674805 Tokens per Sec: 12031.99769306327
Epoch Step: 15 / 138 Loss: 19.49795913696289 Tokens per Sec: 12269.0912275488
Epoch Step: 20 / 138 Loss: 24.36240577697754 Tokens per Sec: 11683.287674486257
Epoch Step: 25 / 138 Loss: 27.225994110107422 Tokens per Sec: 11583.324839905352
Epoch Step: 30 / 138 Loss: 22.240312576293945 Tokens per Sec: 12280.56406444666
Epoch Step: 35 / 138 Loss: 31.40318489074707 Tokens per Sec: 11809.418914647422
Epoch Step: 40 / 138 Loss: 23.232284545898438 Tokens per Sec: 12025.351140490857
Epoch Step: 45 / 138 Loss: 24.10195541381836 Tokens per Sec: 11356.56138061415
Epoch Step: 50 / 138 Loss: 23.829795837402344 Tokens per Sec: 12036.746635591213
Epoch Step: 55 / 138 Loss: 23.651775360107422 Tokens per Sec: 11915.562904800314
Epoch Step: 60 / 138 Loss: 210.377685546875 Tokens per Sec: 11768.128795913273
Epoch Step: 65 / 138 Loss: 210.846435546875 Tokens per Sec: 11650.228320734948
Epoch Step: 70 / 138 Loss: 30.104164123535156 Tokens per Sec: 11627.155802583753
Epoch Step: 75 / 138 Loss: 30.30057144165039 Tokens per Sec: 12136.48611871432
Epoch Step: 80 / 138 Loss: 26.52701759338379 Tokens per Sec: 12117.118321997921
Epoch Step: 85 / 138 Loss: 40.619972229003906 Tokens per Sec: 12009.687950576008
Epoch Step: 90 / 138 Loss: 135.41925048828125 Tokens per Sec: 11101.668854825153
Epoch Step: 95 / 138 Loss: 22.512176513671875 Tokens per Sec: 10987.10804791174
Epoch Step: 100 / 138 Loss: 30.21184730529785 Tokens per Sec: 12286.719860304693
Epoch Step: 105 / 138 Loss: 176.10995483398438 Tokens per Sec: 11282.984313153382
Epoch Step: 110 / 138 Loss: 186.5827178955078 Tokens per Sec: 11573.33683731601
Epoch Step: 115 / 138 Loss: 23.92281723022461 Tokens per Sec: 10704.540351950009
Epoch Step: 120 / 138 Loss: 24.50313949584961 Tokens per Sec: 11415.586451824689
Epoch Step: 125 / 138 Loss: 19.047365188598633 Tokens per Sec: 11502.455915138298
Epoch Step: 130 / 138 Loss: 121.21688079833984 Tokens per Sec: 11417.474986825204
Epoch Step: 135 / 138 Loss: 24.687047958374023 Tokens per Sec: 11570.655298323722
Epoch ended with duration 0:00:54.519228
Train perplexity: 1.8863174019559443
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 STRING_2 STRING_3 STRING_3 + STRING_4 ) ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.706039
Validation perplexity: 2.063922579182496
Epoch 72 / 1000
Epoch Step: 5 / 138 Loss: 39.5018424987793 Tokens per Sec: 12035.588263931946
Epoch Step: 10 / 138 Loss: 21.863006591796875 Tokens per Sec: 11469.393117559766
Epoch Step: 15 / 138 Loss: 29.090072631835938 Tokens per Sec: 11939.286396099895
Epoch Step: 20 / 138 Loss: 27.880308151245117 Tokens per Sec: 11950.927541309384
Epoch Step: 25 / 138 Loss: 32.67615509033203 Tokens per Sec: 12159.797203931645
Epoch Step: 30 / 138 Loss: 34.482173919677734 Tokens per Sec: 11906.415202511555
Epoch Step: 35 / 138 Loss: 19.799823760986328 Tokens per Sec: 12147.543477212335
Epoch Step: 40 / 138 Loss: 24.9909725189209 Tokens per Sec: 12367.002135515311
Epoch Step: 45 / 138 Loss: 28.429306030273438 Tokens per Sec: 11008.944496242037
Epoch Step: 50 / 138 Loss: 118.66091918945312 Tokens per Sec: 12064.344189789257
Epoch Step: 55 / 138 Loss: 37.3238639831543 Tokens per Sec: 12030.054765333502
Epoch Step: 60 / 138 Loss: 34.12974548339844 Tokens per Sec: 11692.758564332627
Epoch Step: 65 / 138 Loss: 26.077552795410156 Tokens per Sec: 11989.4491507607
Epoch Step: 70 / 138 Loss: 101.05686950683594 Tokens per Sec: 11768.848732174421
Epoch Step: 75 / 138 Loss: 19.50044059753418 Tokens per Sec: 12303.342041647154
Epoch Step: 80 / 138 Loss: 131.60137939453125 Tokens per Sec: 11544.97714396452
Epoch Step: 85 / 138 Loss: 30.458236694335938 Tokens per Sec: 10894.600348688296
Epoch Step: 90 / 138 Loss: 38.56126022338867 Tokens per Sec: 12148.743735083466
Epoch Step: 95 / 138 Loss: 36.88399887084961 Tokens per Sec: 11835.36216934024
Epoch Step: 100 / 138 Loss: 19.247739791870117 Tokens per Sec: 11712.860578756523
Epoch Step: 105 / 138 Loss: 31.48292350769043 Tokens per Sec: 11867.956636895939
Epoch Step: 110 / 138 Loss: 32.68027877807617 Tokens per Sec: 11320.29439753108
Epoch Step: 115 / 138 Loss: 196.72036743164062 Tokens per Sec: 11677.127541873075
Epoch Step: 120 / 138 Loss: 26.007490158081055 Tokens per Sec: 11038.80334648574
Epoch Step: 125 / 138 Loss: 22.119163513183594 Tokens per Sec: 10403.919869471316
Epoch Step: 130 / 138 Loss: 24.565052032470703 Tokens per Sec: 11619.913740893715
Epoch Step: 135 / 138 Loss: 27.7601375579834 Tokens per Sec: 11329.223645523534
Epoch ended with duration 0:00:54.405189
Train perplexity: 1.7986674769940103
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) ) . }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.668038
Validation perplexity: 1.707102249091111
Epoch 73 / 1000
Epoch Step: 5 / 138 Loss: 19.086645126342773 Tokens per Sec: 11873.241310866904
Epoch Step: 10 / 138 Loss: 29.636783599853516 Tokens per Sec: 12191.130963057465
Epoch Step: 15 / 138 Loss: 35.93915557861328 Tokens per Sec: 12034.300329566295
Epoch Step: 20 / 138 Loss: 30.01749038696289 Tokens per Sec: 11605.781893316691
Epoch Step: 25 / 138 Loss: 119.30033111572266 Tokens per Sec: 11977.304453603205
Epoch Step: 30 / 138 Loss: 17.204931259155273 Tokens per Sec: 12550.79618666319
Epoch Step: 35 / 138 Loss: 19.372438430786133 Tokens per Sec: 10943.40434286406
Epoch Step: 40 / 138 Loss: 155.92123413085938 Tokens per Sec: 12085.237086001256
Epoch Step: 45 / 138 Loss: 41.77455139160156 Tokens per Sec: 12015.647391457322
Epoch Step: 50 / 138 Loss: 25.92609405517578 Tokens per Sec: 11922.868218147249
Epoch Step: 55 / 138 Loss: 36.46139907836914 Tokens per Sec: 11192.771139328659
Epoch Step: 60 / 138 Loss: 38.41169357299805 Tokens per Sec: 12047.560505732768
Epoch Step: 65 / 138 Loss: 23.84151268005371 Tokens per Sec: 11857.577583041666
Epoch Step: 70 / 138 Loss: 29.289710998535156 Tokens per Sec: 11396.390801904603
Epoch Step: 75 / 138 Loss: 79.333740234375 Tokens per Sec: 11930.987538621153
Epoch Step: 80 / 138 Loss: 26.9945125579834 Tokens per Sec: 11802.208497280668
Epoch Step: 85 / 138 Loss: 20.39272117614746 Tokens per Sec: 11919.381933224307
Epoch Step: 90 / 138 Loss: 21.139421463012695 Tokens per Sec: 11726.927733778824
Epoch Step: 95 / 138 Loss: 31.66648292541504 Tokens per Sec: 11500.384178209339
Epoch Step: 100 / 138 Loss: 21.569974899291992 Tokens per Sec: 11531.811149023995
Epoch Step: 105 / 138 Loss: 21.14314079284668 Tokens per Sec: 11364.6099028418
Epoch Step: 110 / 138 Loss: 27.994829177856445 Tokens per Sec: 11645.850317270806
Epoch Step: 115 / 138 Loss: 25.46991729736328 Tokens per Sec: 11517.954426636059
Epoch Step: 120 / 138 Loss: 30.93168067932129 Tokens per Sec: 11144.873101161145
Epoch Step: 125 / 138 Loss: 21.96582794189453 Tokens per Sec: 11180.743655370015
Epoch Step: 130 / 138 Loss: 23.742612838745117 Tokens per Sec: 11696.92065228609
Epoch Step: 135 / 138 Loss: 113.73810577392578 Tokens per Sec: 11482.607103858394
Epoch ended with duration 0:00:54.453762
Train perplexity: 1.7794054640334493
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.632235
Validation perplexity: 1.6963669199422402
Epoch 74 / 1000
Epoch Step: 5 / 138 Loss: 38.23225784301758 Tokens per Sec: 11889.228878824966
Epoch Step: 10 / 138 Loss: 28.421518325805664 Tokens per Sec: 12280.498688125783
Epoch Step: 15 / 138 Loss: 162.46563720703125 Tokens per Sec: 11815.968858702114
Epoch Step: 20 / 138 Loss: 16.63319969177246 Tokens per Sec: 12345.174186698272
Epoch Step: 25 / 138 Loss: 27.759681701660156 Tokens per Sec: 11749.77556674434
Epoch Step: 30 / 138 Loss: 25.839061737060547 Tokens per Sec: 12031.169788838539
Epoch Step: 35 / 138 Loss: 30.73710823059082 Tokens per Sec: 11916.849975689209
Epoch Step: 40 / 138 Loss: 29.80524253845215 Tokens per Sec: 12116.161849422111
Epoch Step: 45 / 138 Loss: 19.125553131103516 Tokens per Sec: 12017.867366757513
Epoch Step: 50 / 138 Loss: 26.631914138793945 Tokens per Sec: 11942.791706829377
Epoch Step: 55 / 138 Loss: 94.97230529785156 Tokens per Sec: 11418.44607403453
Epoch Step: 60 / 138 Loss: 31.82419204711914 Tokens per Sec: 11623.877272105163
Epoch Step: 65 / 138 Loss: 35.33592224121094 Tokens per Sec: 11325.658538367767
Epoch Step: 70 / 138 Loss: 179.75563049316406 Tokens per Sec: 11224.455244463401
Epoch Step: 75 / 138 Loss: 30.566326141357422 Tokens per Sec: 12040.492310923075
Epoch Step: 80 / 138 Loss: 31.670610427856445 Tokens per Sec: 11638.30275765042
Epoch Step: 85 / 138 Loss: 17.97105598449707 Tokens per Sec: 11644.887315236096
Epoch Step: 90 / 138 Loss: 22.098100662231445 Tokens per Sec: 12210.073054047823
Epoch Step: 95 / 138 Loss: 159.25704956054688 Tokens per Sec: 10858.161914776352
Epoch Step: 100 / 138 Loss: 33.81784439086914 Tokens per Sec: 11432.776788098077
Epoch Step: 105 / 138 Loss: 28.69559669494629 Tokens per Sec: 11282.705329186925
Epoch Step: 110 / 138 Loss: 33.22021484375 Tokens per Sec: 11668.057546835453
Epoch Step: 115 / 138 Loss: 28.63435173034668 Tokens per Sec: 11262.03450730066
Epoch Step: 120 / 138 Loss: 17.892398834228516 Tokens per Sec: 10871.066763830118
Epoch Step: 125 / 138 Loss: 31.615821838378906 Tokens per Sec: 11864.98817591785
Epoch Step: 130 / 138 Loss: 21.51230812072754 Tokens per Sec: 11307.97116191362
Epoch Step: 135 / 138 Loss: 23.509185791015625 Tokens per Sec: 11350.299821764127
Epoch ended with duration 0:00:54.624825
Train perplexity: 1.8639093990871276
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.575197
Validation perplexity: 1.499390945870126
Model saved best_on_validation!
Epoch 75 / 1000
Epoch Step: 5 / 138 Loss: 17.76169776916504 Tokens per Sec: 11893.189503783755
Epoch Step: 10 / 138 Loss: 28.6887264251709 Tokens per Sec: 11799.298753319186
Epoch Step: 15 / 138 Loss: 42.78558349609375 Tokens per Sec: 11149.167424444482
Epoch Step: 20 / 138 Loss: 24.451141357421875 Tokens per Sec: 12124.241936518098
Epoch Step: 25 / 138 Loss: 29.746112823486328 Tokens per Sec: 11792.392064026335
Epoch Step: 30 / 138 Loss: 172.172119140625 Tokens per Sec: 11271.187758775537
Epoch Step: 35 / 138 Loss: 25.286102294921875 Tokens per Sec: 12146.452053702475
Epoch Step: 40 / 138 Loss: 18.767040252685547 Tokens per Sec: 11802.417008436752
Epoch Step: 45 / 138 Loss: 22.32953643798828 Tokens per Sec: 11790.813355068221
Epoch Step: 50 / 138 Loss: 15.790116310119629 Tokens per Sec: 11731.263310676697
Epoch Step: 55 / 138 Loss: 24.601451873779297 Tokens per Sec: 11923.561207252025
Epoch Step: 60 / 138 Loss: 37.23866271972656 Tokens per Sec: 12030.064498780395
Epoch Step: 65 / 138 Loss: 20.139291763305664 Tokens per Sec: 11809.960191605544
Epoch Step: 70 / 138 Loss: 23.510072708129883 Tokens per Sec: 11629.821689145854
Epoch Step: 75 / 138 Loss: 15.759956359863281 Tokens per Sec: 11396.414317450135
Epoch Step: 80 / 138 Loss: 28.763444900512695 Tokens per Sec: 11562.072269756358
Epoch Step: 85 / 138 Loss: 28.07744789123535 Tokens per Sec: 12182.622945831657
Epoch Step: 90 / 138 Loss: 193.82374572753906 Tokens per Sec: 11754.527515764203
Epoch Step: 95 / 138 Loss: 30.685218811035156 Tokens per Sec: 12269.087407464653
Epoch Step: 100 / 138 Loss: 19.89542007446289 Tokens per Sec: 11853.214893361559
Epoch Step: 105 / 138 Loss: 22.980958938598633 Tokens per Sec: 11445.270017394156
Epoch Step: 110 / 138 Loss: 24.8450984954834 Tokens per Sec: 11545.034442721608
Epoch Step: 115 / 138 Loss: 21.621166229248047 Tokens per Sec: 11475.14937589967
Epoch Step: 120 / 138 Loss: 22.716373443603516 Tokens per Sec: 11668.046669034447
Epoch Step: 125 / 138 Loss: 19.71517562866211 Tokens per Sec: 11756.631604508717
Epoch Step: 130 / 138 Loss: 29.099111557006836 Tokens per Sec: 11475.367129232593
Epoch Step: 135 / 138 Loss: 27.216896057128906 Tokens per Sec: 10822.000798672461
Epoch ended with duration 0:00:54.515289
Train perplexity: 1.84987246104546
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.660149
Validation perplexity: 1.7901703084211813
Model saved checkpoint!
Epoch 76 / 1000
Epoch Step: 5 / 138 Loss: 32.62450408935547 Tokens per Sec: 11696.685198521114
Epoch Step: 10 / 138 Loss: 26.372713088989258 Tokens per Sec: 11602.725207334675
Epoch Step: 15 / 138 Loss: 146.60882568359375 Tokens per Sec: 12168.368065363187
Epoch Step: 20 / 138 Loss: 173.43190002441406 Tokens per Sec: 11445.631118249228
Epoch Step: 25 / 138 Loss: 26.994714736938477 Tokens per Sec: 12026.017919648182
Epoch Step: 30 / 138 Loss: 190.33702087402344 Tokens per Sec: 11568.427577946293
Epoch Step: 35 / 138 Loss: 26.587203979492188 Tokens per Sec: 11587.086812189315
Epoch Step: 40 / 138 Loss: 17.462909698486328 Tokens per Sec: 11771.59895520132
Epoch Step: 45 / 138 Loss: 42.12862777709961 Tokens per Sec: 12276.420428944266
Epoch Step: 50 / 138 Loss: 38.97227096557617 Tokens per Sec: 12032.120472665782
Epoch Step: 55 / 138 Loss: 22.63485336303711 Tokens per Sec: 12024.79111706301
Epoch Step: 60 / 138 Loss: 41.269287109375 Tokens per Sec: 11722.202398262978
Epoch Step: 65 / 138 Loss: 26.508846282958984 Tokens per Sec: 11263.265570432324
Epoch Step: 70 / 138 Loss: 23.64710807800293 Tokens per Sec: 11269.8057780998
Epoch Step: 75 / 138 Loss: 36.882286071777344 Tokens per Sec: 12113.581723921512
Epoch Step: 80 / 138 Loss: 29.987964630126953 Tokens per Sec: 11616.351395743695
Epoch Step: 85 / 138 Loss: 20.82176399230957 Tokens per Sec: 12617.91747124543
Epoch Step: 90 / 138 Loss: 30.1495361328125 Tokens per Sec: 11985.480128905545
Epoch Step: 95 / 138 Loss: 91.91533660888672 Tokens per Sec: 12221.725712407715
Epoch Step: 100 / 138 Loss: 35.89741897583008 Tokens per Sec: 11940.233457169286
Epoch Step: 105 / 138 Loss: 32.40284729003906 Tokens per Sec: 11289.947179544157
Epoch Step: 110 / 138 Loss: 29.501163482666016 Tokens per Sec: 11390.757435753605
Epoch Step: 115 / 138 Loss: 21.764795303344727 Tokens per Sec: 11456.432236467354
Epoch Step: 120 / 138 Loss: 30.358009338378906 Tokens per Sec: 11795.501970538546
Epoch Step: 125 / 138 Loss: 33.25258255004883 Tokens per Sec: 11366.634437591878
Epoch Step: 130 / 138 Loss: 26.223161697387695 Tokens per Sec: 11165.163506498742
Epoch Step: 135 / 138 Loss: 31.902429580688477 Tokens per Sec: 10971.86343776576
Epoch ended with duration 0:00:54.452726
Train perplexity: 1.8218508355974043
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_4 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.665447
Validation perplexity: 1.8015829697613324
Epoch 77 / 1000
Epoch Step: 5 / 138 Loss: 28.716480255126953 Tokens per Sec: 11820.826330650847
Epoch Step: 10 / 138 Loss: 20.09189224243164 Tokens per Sec: 12322.356478956946
Epoch Step: 15 / 138 Loss: 27.5289363861084 Tokens per Sec: 11483.45494219746
Epoch Step: 20 / 138 Loss: 25.712312698364258 Tokens per Sec: 11855.307518977836
Epoch Step: 25 / 138 Loss: 35.928794860839844 Tokens per Sec: 11469.333214676437
Epoch Step: 30 / 138 Loss: 30.501333236694336 Tokens per Sec: 12595.889921786737
Epoch Step: 35 / 138 Loss: 30.798341751098633 Tokens per Sec: 12044.822058145348
Epoch Step: 40 / 138 Loss: 23.652996063232422 Tokens per Sec: 11860.775063082952
Epoch Step: 45 / 138 Loss: 19.639148712158203 Tokens per Sec: 11722.692143170007
Epoch Step: 50 / 138 Loss: 22.934011459350586 Tokens per Sec: 12231.129595701168
Epoch Step: 55 / 138 Loss: 35.06406784057617 Tokens per Sec: 11545.676329745644
Epoch Step: 60 / 138 Loss: 32.83529281616211 Tokens per Sec: 11896.71729090779
Epoch Step: 65 / 138 Loss: 33.744850158691406 Tokens per Sec: 11579.161429076923
Epoch Step: 70 / 138 Loss: 20.181486129760742 Tokens per Sec: 12133.798357804582
Epoch Step: 75 / 138 Loss: 26.632665634155273 Tokens per Sec: 12346.281676228975
Epoch Step: 80 / 138 Loss: 36.43672561645508 Tokens per Sec: 11358.914484093715
Epoch Step: 85 / 138 Loss: 13.29728889465332 Tokens per Sec: 11953.99338023539
Epoch Step: 90 / 138 Loss: 31.94722557067871 Tokens per Sec: 11927.116491063378
Epoch Step: 95 / 138 Loss: 31.9603214263916 Tokens per Sec: 12090.3270726334
Epoch Step: 100 / 138 Loss: 27.14409828186035 Tokens per Sec: 11438.655494855004
Epoch Step: 105 / 138 Loss: 30.9153995513916 Tokens per Sec: 11528.813155810261
Epoch Step: 110 / 138 Loss: 20.36617088317871 Tokens per Sec: 11379.254604131418
Epoch Step: 115 / 138 Loss: 35.17647171020508 Tokens per Sec: 11650.920670133522
Epoch Step: 120 / 138 Loss: 19.23657989501953 Tokens per Sec: 11452.590132715637
Epoch Step: 125 / 138 Loss: 27.558786392211914 Tokens per Sec: 11808.400370944782
Epoch Step: 130 / 138 Loss: 22.624391555786133 Tokens per Sec: 11584.146967814433
Epoch Step: 135 / 138 Loss: 27.542633056640625 Tokens per Sec: 10808.332803710897
Epoch ended with duration 0:00:54.208007
Train perplexity: 1.6308771978909853
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) ) . }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.739018
Validation perplexity: 2.2333222443258873
Epoch 78 / 1000
Epoch Step: 5 / 138 Loss: 15.465895652770996 Tokens per Sec: 11952.989165434827
Epoch Step: 10 / 138 Loss: 36.35372543334961 Tokens per Sec: 10640.18371318338
Epoch Step: 15 / 138 Loss: 34.932891845703125 Tokens per Sec: 11953.189896185619
Epoch Step: 20 / 138 Loss: 17.555089950561523 Tokens per Sec: 11392.673262352453
Epoch Step: 25 / 138 Loss: 32.01020812988281 Tokens per Sec: 12094.773368204254
Epoch Step: 30 / 138 Loss: 34.94076919555664 Tokens per Sec: 11584.979815146058
Epoch Step: 35 / 138 Loss: 25.000959396362305 Tokens per Sec: 11825.999566912998
Epoch Step: 40 / 138 Loss: 36.93706130981445 Tokens per Sec: 11763.604439490606
Epoch Step: 45 / 138 Loss: 29.436750411987305 Tokens per Sec: 12064.670693510729
Epoch Step: 50 / 138 Loss: 25.37000274658203 Tokens per Sec: 11986.434830664022
Epoch Step: 55 / 138 Loss: 261.200927734375 Tokens per Sec: 11781.3902008418
Epoch Step: 60 / 138 Loss: 53.43752670288086 Tokens per Sec: 12160.335156584271
Epoch Step: 65 / 138 Loss: 133.65403747558594 Tokens per Sec: 11904.35566124664
Epoch Step: 70 / 138 Loss: 29.28774070739746 Tokens per Sec: 11372.70417684085
Epoch Step: 75 / 138 Loss: 33.08229064941406 Tokens per Sec: 12071.788153493546
Epoch Step: 80 / 138 Loss: 36.12714385986328 Tokens per Sec: 11968.559021712004
Epoch Step: 85 / 138 Loss: 26.755151748657227 Tokens per Sec: 11697.818541781884
Epoch Step: 90 / 138 Loss: 35.081451416015625 Tokens per Sec: 11924.680092963496
Epoch Step: 95 / 138 Loss: 16.101640701293945 Tokens per Sec: 11973.004517014899
Epoch Step: 100 / 138 Loss: 34.737449645996094 Tokens per Sec: 12243.754794158478
Epoch Step: 105 / 138 Loss: 23.49502944946289 Tokens per Sec: 11376.933010271001
Epoch Step: 110 / 138 Loss: 19.355560302734375 Tokens per Sec: 11689.569965692455
Epoch Step: 115 / 138 Loss: 29.043651580810547 Tokens per Sec: 10632.56362275912
Epoch Step: 120 / 138 Loss: 20.36360740661621 Tokens per Sec: 11672.818848330273
Epoch Step: 125 / 138 Loss: 32.57626724243164 Tokens per Sec: 11687.47151269932
Epoch Step: 130 / 138 Loss: 32.48334503173828 Tokens per Sec: 11226.329165542085
Epoch Step: 135 / 138 Loss: 29.797279357910156 Tokens per Sec: 11283.891323322836
Epoch ended with duration 0:00:54.463851
Train perplexity: 1.8531824810245314
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.594070
Validation perplexity: 1.469970068686442
Model saved best_on_validation!
Epoch 79 / 1000
Epoch Step: 5 / 138 Loss: 156.39767456054688 Tokens per Sec: 10937.903428294156
Epoch Step: 10 / 138 Loss: 17.352493286132812 Tokens per Sec: 12220.392797118362
Epoch Step: 15 / 138 Loss: 27.77901268005371 Tokens per Sec: 11260.69713106435
Epoch Step: 20 / 138 Loss: 19.23082160949707 Tokens per Sec: 11939.481224711108
Epoch Step: 25 / 138 Loss: 30.24152183532715 Tokens per Sec: 12075.962537718488
Epoch Step: 30 / 138 Loss: 28.57999038696289 Tokens per Sec: 12199.821227849257
Epoch Step: 35 / 138 Loss: 17.427583694458008 Tokens per Sec: 11802.554422854622
Epoch Step: 40 / 138 Loss: 22.71163558959961 Tokens per Sec: 12386.185495629845
Epoch Step: 45 / 138 Loss: 42.8671875 Tokens per Sec: 11956.960427216569
Epoch Step: 50 / 138 Loss: 25.721885681152344 Tokens per Sec: 12173.379510258657
Epoch Step: 55 / 138 Loss: 36.77739334106445 Tokens per Sec: 11498.38893397877
Epoch Step: 60 / 138 Loss: 92.12614440917969 Tokens per Sec: 12173.151917755564
Epoch Step: 65 / 138 Loss: 34.23287582397461 Tokens per Sec: 11831.997972708818
Epoch Step: 70 / 138 Loss: 25.9395751953125 Tokens per Sec: 11854.093472246805
Epoch Step: 75 / 138 Loss: 27.567798614501953 Tokens per Sec: 11689.17455870192
Epoch Step: 80 / 138 Loss: 23.71636199951172 Tokens per Sec: 11651.8965852789
Epoch Step: 85 / 138 Loss: 31.8668155670166 Tokens per Sec: 11727.842528660047
Epoch Step: 90 / 138 Loss: 25.962465286254883 Tokens per Sec: 11913.17686977398
Epoch Step: 95 / 138 Loss: 34.312129974365234 Tokens per Sec: 12047.60642079437
Epoch Step: 100 / 138 Loss: 29.910287857055664 Tokens per Sec: 12053.2802896745
Epoch Step: 105 / 138 Loss: 155.0877685546875 Tokens per Sec: 11359.715898837609
Epoch Step: 110 / 138 Loss: 25.246326446533203 Tokens per Sec: 11140.68980214979
Epoch Step: 115 / 138 Loss: 131.9090576171875 Tokens per Sec: 10950.150101006648
Epoch Step: 120 / 138 Loss: 28.669687271118164 Tokens per Sec: 10468.880018920676
Epoch Step: 125 / 138 Loss: 33.4522705078125 Tokens per Sec: 11353.839209268106
Epoch Step: 130 / 138 Loss: 21.061960220336914 Tokens per Sec: 11842.519137709216
Epoch Step: 135 / 138 Loss: 32.06596755981445 Tokens per Sec: 11540.905378848613
Epoch ended with duration 0:00:54.501215
Train perplexity: 1.7136281478071738
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.597096
Validation perplexity: 1.4964349176931226
Epoch 80 / 1000
Epoch Step: 5 / 138 Loss: 17.03632164001465 Tokens per Sec: 12207.246407795796
Epoch Step: 10 / 138 Loss: 184.36636352539062 Tokens per Sec: 11836.966554924751
Epoch Step: 15 / 138 Loss: 21.8951358795166 Tokens per Sec: 11777.54249228533
Epoch Step: 20 / 138 Loss: 29.127384185791016 Tokens per Sec: 12120.453199956557
Epoch Step: 25 / 138 Loss: 28.312450408935547 Tokens per Sec: 11115.151925407761
Epoch Step: 30 / 138 Loss: 25.5838565826416 Tokens per Sec: 11581.623816357785
Epoch Step: 35 / 138 Loss: 18.85972023010254 Tokens per Sec: 12357.782405895592
Epoch Step: 40 / 138 Loss: 27.53900909423828 Tokens per Sec: 12065.943315345981
Epoch Step: 45 / 138 Loss: 17.926010131835938 Tokens per Sec: 11627.465490355475
Epoch Step: 50 / 138 Loss: 17.72161102294922 Tokens per Sec: 11944.106131299355
Epoch Step: 55 / 138 Loss: 32.960750579833984 Tokens per Sec: 11323.40197733944
Epoch Step: 60 / 138 Loss: 15.493157386779785 Tokens per Sec: 11971.437870527534
Epoch Step: 65 / 138 Loss: 26.847017288208008 Tokens per Sec: 11088.288036952727
Epoch Step: 70 / 138 Loss: 31.735170364379883 Tokens per Sec: 12277.300362640368
Epoch Step: 75 / 138 Loss: 20.32000732421875 Tokens per Sec: 12293.89761840595
Epoch Step: 80 / 138 Loss: 36.740867614746094 Tokens per Sec: 11620.00434968241
Epoch Step: 85 / 138 Loss: 38.83650588989258 Tokens per Sec: 12006.803453509146
Epoch Step: 90 / 138 Loss: 36.491432189941406 Tokens per Sec: 11951.013531887933
Epoch Step: 95 / 138 Loss: 18.103763580322266 Tokens per Sec: 11822.77007705941
Epoch Step: 100 / 138 Loss: 34.220176696777344 Tokens per Sec: 12192.000597415432
Epoch Step: 105 / 138 Loss: 24.078372955322266 Tokens per Sec: 11626.520529992305
Epoch Step: 110 / 138 Loss: 20.334808349609375 Tokens per Sec: 11547.329613731808
Epoch Step: 115 / 138 Loss: 187.14541625976562 Tokens per Sec: 11563.905702403972
Epoch Step: 120 / 138 Loss: 20.361352920532227 Tokens per Sec: 10781.51831710004
Epoch Step: 125 / 138 Loss: 27.447113037109375 Tokens per Sec: 11463.036705400471
Epoch Step: 130 / 138 Loss: 22.51285171508789 Tokens per Sec: 11218.068933901952
Epoch Step: 135 / 138 Loss: 179.5620574951172 Tokens per Sec: 11365.24267789792
Epoch ended with duration 0:00:54.434692
Train perplexity: 1.7089743438467966
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.637459
Validation perplexity: 1.628514902218671
Model saved checkpoint!
Epoch 81 / 1000
Epoch Step: 5 / 138 Loss: 29.71917724609375 Tokens per Sec: 11193.110796250436
Epoch Step: 10 / 138 Loss: 22.35957145690918 Tokens per Sec: 11792.760373720617
Epoch Step: 15 / 138 Loss: 22.73265266418457 Tokens per Sec: 12410.797603320414
Epoch Step: 20 / 138 Loss: 35.701717376708984 Tokens per Sec: 11728.383010793943
Epoch Step: 25 / 138 Loss: 19.515962600708008 Tokens per Sec: 11928.981034499562
Epoch Step: 30 / 138 Loss: 15.555323600769043 Tokens per Sec: 12231.671856396
Epoch Step: 35 / 138 Loss: 30.849557876586914 Tokens per Sec: 11760.305739378797
Epoch Step: 40 / 138 Loss: 18.496557235717773 Tokens per Sec: 11733.852955908826
Epoch Step: 45 / 138 Loss: 24.679365158081055 Tokens per Sec: 12200.521956571662
Epoch Step: 50 / 138 Loss: 19.98642921447754 Tokens per Sec: 12335.441892954734
Epoch Step: 55 / 138 Loss: 241.9801788330078 Tokens per Sec: 11273.862659445542
Epoch Step: 60 / 138 Loss: 19.142663955688477 Tokens per Sec: 12284.01922014344
Epoch Step: 65 / 138 Loss: 25.062593460083008 Tokens per Sec: 10783.467561554799
Epoch Step: 70 / 138 Loss: 27.10123062133789 Tokens per Sec: 12223.782173361928
Epoch Step: 75 / 138 Loss: 27.133377075195312 Tokens per Sec: 11636.043566504995
Epoch Step: 80 / 138 Loss: 28.782434463500977 Tokens per Sec: 11298.945400599696
Epoch Step: 85 / 138 Loss: 29.86398696899414 Tokens per Sec: 12291.859940996468
Epoch Step: 90 / 138 Loss: 19.31086540222168 Tokens per Sec: 12136.671670969097
Epoch Step: 95 / 138 Loss: 29.196895599365234 Tokens per Sec: 12159.159884237175
Epoch Step: 100 / 138 Loss: 26.856592178344727 Tokens per Sec: 11665.059939546585
Epoch Step: 105 / 138 Loss: 26.30187225341797 Tokens per Sec: 11395.728257584984
Epoch Step: 110 / 138 Loss: 21.71910858154297 Tokens per Sec: 11744.075156871717
Epoch Step: 115 / 138 Loss: 29.777729034423828 Tokens per Sec: 11243.273788858445
Epoch Step: 120 / 138 Loss: 80.41703796386719 Tokens per Sec: 11171.227109882308
Epoch Step: 125 / 138 Loss: 36.666202545166016 Tokens per Sec: 11795.791977279912
Epoch Step: 130 / 138 Loss: 25.723825454711914 Tokens per Sec: 10743.741932510842
Epoch Step: 135 / 138 Loss: 21.655071258544922 Tokens per Sec: 11465.165083201106
Epoch ended with duration 0:00:54.417706
Train perplexity: 1.6910882257075959
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.657827
Validation perplexity: 1.7639835562349029
Epoch 82 / 1000
Epoch Step: 5 / 138 Loss: 36.050289154052734 Tokens per Sec: 11794.471054877642
Epoch Step: 10 / 138 Loss: 32.74176788330078 Tokens per Sec: 11098.494645418767
Epoch Step: 15 / 138 Loss: 25.93434715270996 Tokens per Sec: 11461.726886919943
Epoch Step: 20 / 138 Loss: 27.042932510375977 Tokens per Sec: 12268.967239005164
Epoch Step: 25 / 138 Loss: 25.471277236938477 Tokens per Sec: 11475.49065037517
Epoch Step: 30 / 138 Loss: 15.804611206054688 Tokens per Sec: 12182.849900173891
Epoch Step: 35 / 138 Loss: 38.483863830566406 Tokens per Sec: 11795.751117653075
Epoch Step: 40 / 138 Loss: 28.96170425415039 Tokens per Sec: 11570.984931490919
Epoch Step: 45 / 138 Loss: 27.17000961303711 Tokens per Sec: 12343.422473305669
Epoch Step: 50 / 138 Loss: 17.234416961669922 Tokens per Sec: 12146.449609629835
Epoch Step: 55 / 138 Loss: 33.434661865234375 Tokens per Sec: 12230.909344157459
Epoch Step: 60 / 138 Loss: 19.175006866455078 Tokens per Sec: 12690.741238410643
Epoch Step: 65 / 138 Loss: 19.694915771484375 Tokens per Sec: 11967.86149994921
Epoch Step: 70 / 138 Loss: 21.462778091430664 Tokens per Sec: 11752.23647154898
Epoch Step: 75 / 138 Loss: 22.53247833251953 Tokens per Sec: 11461.124260666254
Epoch Step: 80 / 138 Loss: 15.895990371704102 Tokens per Sec: 11697.596153014458
Epoch Step: 85 / 138 Loss: 16.00505828857422 Tokens per Sec: 12197.477770838408
Epoch Step: 90 / 138 Loss: 27.48082160949707 Tokens per Sec: 11959.187347346693
Epoch Step: 95 / 138 Loss: 131.3223114013672 Tokens per Sec: 11432.652232105182
Epoch Step: 100 / 138 Loss: 21.890701293945312 Tokens per Sec: 11827.792285988653
Epoch Step: 105 / 138 Loss: 149.41241455078125 Tokens per Sec: 11441.308846385638
Epoch Step: 110 / 138 Loss: 23.667407989501953 Tokens per Sec: 11806.034788203222
Epoch Step: 115 / 138 Loss: 27.61176300048828 Tokens per Sec: 11690.3055581231
Epoch Step: 120 / 138 Loss: 19.02394676208496 Tokens per Sec: 11535.580241270032
Epoch Step: 125 / 138 Loss: 28.11618423461914 Tokens per Sec: 11882.700686564145
Epoch Step: 130 / 138 Loss: 29.04359245300293 Tokens per Sec: 10485.401756438443
Epoch Step: 135 / 138 Loss: 22.4608154296875 Tokens per Sec: 11234.516741461952
Epoch ended with duration 0:00:54.326230
Train perplexity: 1.6041301355133124
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.593385
Validation perplexity: 1.4497399778118263
Model saved best_on_validation!
Epoch 83 / 1000
Epoch Step: 5 / 138 Loss: 19.872827529907227 Tokens per Sec: 11734.5737589746
Epoch Step: 10 / 138 Loss: 21.008588790893555 Tokens per Sec: 11472.384819606306
Epoch Step: 15 / 138 Loss: 30.564516067504883 Tokens per Sec: 11804.526196547768
Epoch Step: 20 / 138 Loss: 21.493568420410156 Tokens per Sec: 12048.25138412964
Epoch Step: 25 / 138 Loss: 129.6688690185547 Tokens per Sec: 11329.141515290574
Epoch Step: 30 / 138 Loss: 31.46753692626953 Tokens per Sec: 12066.251378719198
Epoch Step: 35 / 138 Loss: 26.94374656677246 Tokens per Sec: 11427.862822019886
Epoch Step: 40 / 138 Loss: 17.783220291137695 Tokens per Sec: 12439.105439981297
Epoch Step: 45 / 138 Loss: 28.531307220458984 Tokens per Sec: 11429.842794459486
Epoch Step: 50 / 138 Loss: 24.31529998779297 Tokens per Sec: 12359.16543359486
Epoch Step: 55 / 138 Loss: 20.36598014831543 Tokens per Sec: 12313.027631886787
Epoch Step: 60 / 138 Loss: 29.274293899536133 Tokens per Sec: 11734.820239474993
Epoch Step: 65 / 138 Loss: 25.155921936035156 Tokens per Sec: 11352.12520995287
Epoch Step: 70 / 138 Loss: 22.434677124023438 Tokens per Sec: 12202.82149820945
Epoch Step: 75 / 138 Loss: 21.736543655395508 Tokens per Sec: 11798.942362253982
Epoch Step: 80 / 138 Loss: 34.5289192199707 Tokens per Sec: 11793.548563239789
Epoch Step: 85 / 138 Loss: 24.529613494873047 Tokens per Sec: 12166.664504093751
Epoch Step: 90 / 138 Loss: 18.662853240966797 Tokens per Sec: 12518.88398497224
Epoch Step: 95 / 138 Loss: 34.44083786010742 Tokens per Sec: 11499.952384957072
Epoch Step: 100 / 138 Loss: 24.95486831665039 Tokens per Sec: 12064.330888657983
Epoch Step: 105 / 138 Loss: 16.353816986083984 Tokens per Sec: 10699.629351311843
Epoch Step: 110 / 138 Loss: 19.91639518737793 Tokens per Sec: 11741.61215155158
Epoch Step: 115 / 138 Loss: 30.464088439941406 Tokens per Sec: 11627.269028512326
Epoch Step: 120 / 138 Loss: 35.69969177246094 Tokens per Sec: 11429.381643748788
Epoch Step: 125 / 138 Loss: 21.663772583007812 Tokens per Sec: 11082.598440221947
Epoch Step: 130 / 138 Loss: 16.440990447998047 Tokens per Sec: 11289.361722557942
Epoch Step: 135 / 138 Loss: 32.961429595947266 Tokens per Sec: 11803.693962286146
Epoch ended with duration 0:00:54.317097
Train perplexity: 1.5822573383536618
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.657360
Validation perplexity: 1.6090771333868603
Epoch 84 / 1000
Epoch Step: 5 / 138 Loss: 183.15640258789062 Tokens per Sec: 11618.350123203134
Epoch Step: 10 / 138 Loss: 26.65411949157715 Tokens per Sec: 11323.742321335609
Epoch Step: 15 / 138 Loss: 17.727340698242188 Tokens per Sec: 12040.405253510984
Epoch Step: 20 / 138 Loss: 119.49385833740234 Tokens per Sec: 11842.792666850139
Epoch Step: 25 / 138 Loss: 20.010038375854492 Tokens per Sec: 12108.563943085577
Epoch Step: 30 / 138 Loss: 19.71415138244629 Tokens per Sec: 11690.579108889282
Epoch Step: 35 / 138 Loss: 21.712186813354492 Tokens per Sec: 12059.812443612867
Epoch Step: 40 / 138 Loss: 28.05641746520996 Tokens per Sec: 12020.171528868474
Epoch Step: 45 / 138 Loss: 18.134756088256836 Tokens per Sec: 11830.115360484671
Epoch Step: 50 / 138 Loss: 19.84879493713379 Tokens per Sec: 11116.746588714146
Epoch Step: 55 / 138 Loss: 32.213558197021484 Tokens per Sec: 11820.560251199502
Epoch Step: 60 / 138 Loss: 133.36492919921875 Tokens per Sec: 11639.564399050912
Epoch Step: 65 / 138 Loss: 15.155365943908691 Tokens per Sec: 12125.127521870918
Epoch Step: 70 / 138 Loss: 39.436824798583984 Tokens per Sec: 11966.552864434996
Epoch Step: 75 / 138 Loss: 22.835865020751953 Tokens per Sec: 12003.014150659836
Epoch Step: 80 / 138 Loss: 37.137176513671875 Tokens per Sec: 11996.57971337659
Epoch Step: 85 / 138 Loss: 20.529613494873047 Tokens per Sec: 12392.717597334326
Epoch Step: 90 / 138 Loss: 27.193117141723633 Tokens per Sec: 11978.391750205117
Epoch Step: 95 / 138 Loss: 40.372406005859375 Tokens per Sec: 11942.91035404239
Epoch Step: 100 / 138 Loss: 189.310791015625 Tokens per Sec: 11646.365703429088
Epoch Step: 105 / 138 Loss: 25.016538619995117 Tokens per Sec: 11490.01642089953
Epoch Step: 110 / 138 Loss: 28.804780960083008 Tokens per Sec: 11177.170283515452
Epoch Step: 115 / 138 Loss: 16.590438842773438 Tokens per Sec: 11577.49151328163
Epoch Step: 120 / 138 Loss: 17.16946792602539 Tokens per Sec: 12004.065571364757
Epoch Step: 125 / 138 Loss: 30.40060806274414 Tokens per Sec: 11607.880448407077
Epoch Step: 130 / 138 Loss: 129.10202026367188 Tokens per Sec: 11474.080298448083
Epoch Step: 135 / 138 Loss: 33.679683685302734 Tokens per Sec: 11407.76055320766
Epoch ended with duration 0:00:54.186589
Train perplexity: 1.6915011954404426
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.621984
Validation perplexity: 1.5788597333098744
Epoch 85 / 1000
Epoch Step: 5 / 138 Loss: 32.03289794921875 Tokens per Sec: 11480.352507599171
Epoch Step: 10 / 138 Loss: 39.29997634887695 Tokens per Sec: 11526.471874888888
Epoch Step: 15 / 138 Loss: 24.761438369750977 Tokens per Sec: 11563.588377597951
Epoch Step: 20 / 138 Loss: 147.228759765625 Tokens per Sec: 11696.216877414356
Epoch Step: 25 / 138 Loss: 21.7253475189209 Tokens per Sec: 12172.881764454207
Epoch Step: 30 / 138 Loss: 22.855052947998047 Tokens per Sec: 12245.684290580431
Epoch Step: 35 / 138 Loss: 28.703100204467773 Tokens per Sec: 11747.44769650559
Epoch Step: 40 / 138 Loss: 19.411209106445312 Tokens per Sec: 11349.013320508999
Epoch Step: 45 / 138 Loss: 16.568307876586914 Tokens per Sec: 12026.606083219387
Epoch Step: 50 / 138 Loss: 184.14956665039062 Tokens per Sec: 12289.175499270092
Epoch Step: 55 / 138 Loss: 25.256450653076172 Tokens per Sec: 11990.911754270015
Epoch Step: 60 / 138 Loss: 15.250652313232422 Tokens per Sec: 12182.575211947029
Epoch Step: 65 / 138 Loss: 65.2097396850586 Tokens per Sec: 11736.183291204728
Epoch Step: 70 / 138 Loss: 34.960323333740234 Tokens per Sec: 11744.70873386247
Epoch Step: 75 / 138 Loss: 24.38163948059082 Tokens per Sec: 11912.839864226748
Epoch Step: 80 / 138 Loss: 30.270524978637695 Tokens per Sec: 11798.00493390877
Epoch Step: 85 / 138 Loss: 21.06842613220215 Tokens per Sec: 11885.527163375198
Epoch Step: 90 / 138 Loss: 18.806777954101562 Tokens per Sec: 11631.001408291278
Epoch Step: 95 / 138 Loss: 18.493120193481445 Tokens per Sec: 11782.863193271078
Epoch Step: 100 / 138 Loss: 15.864341735839844 Tokens per Sec: 11885.61202874771
Epoch Step: 105 / 138 Loss: 23.238319396972656 Tokens per Sec: 11861.245518083748
Epoch Step: 110 / 138 Loss: 23.464284896850586 Tokens per Sec: 11281.532238756628
Epoch Step: 115 / 138 Loss: 21.660261154174805 Tokens per Sec: 11809.773898723362
Epoch Step: 120 / 138 Loss: 31.735197067260742 Tokens per Sec: 11316.264847203049
Epoch Step: 125 / 138 Loss: 188.8192596435547 Tokens per Sec: 11518.1586709968
Epoch Step: 130 / 138 Loss: 25.989608764648438 Tokens per Sec: 10857.91216460101
Epoch Step: 135 / 138 Loss: 29.01613426208496 Tokens per Sec: 11960.774777055018
Epoch ended with duration 0:00:54.326924
Train perplexity: 1.7202892818427613
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.627498
Validation perplexity: 1.5814195043400894
Model saved checkpoint!
Epoch 86 / 1000
Epoch Step: 5 / 138 Loss: 12.45074462890625 Tokens per Sec: 11694.399490505682
Epoch Step: 10 / 138 Loss: 20.52408790588379 Tokens per Sec: 11550.75612780072
Epoch Step: 15 / 138 Loss: 23.431272506713867 Tokens per Sec: 11895.866052224634
Epoch Step: 20 / 138 Loss: 32.03205871582031 Tokens per Sec: 11843.5364726403
Epoch Step: 25 / 138 Loss: 27.113162994384766 Tokens per Sec: 11432.814692919914
Epoch Step: 30 / 138 Loss: 32.15507507324219 Tokens per Sec: 12339.057587507008
Epoch Step: 35 / 138 Loss: 25.29584312438965 Tokens per Sec: 12279.282499325893
Epoch Step: 40 / 138 Loss: 19.850021362304688 Tokens per Sec: 11462.77436471783
Epoch Step: 45 / 138 Loss: 30.662506103515625 Tokens per Sec: 11975.217309395151
Epoch Step: 50 / 138 Loss: 16.314922332763672 Tokens per Sec: 11888.322058630201
Epoch Step: 55 / 138 Loss: 23.634187698364258 Tokens per Sec: 11571.260322494325
Epoch Step: 60 / 138 Loss: 24.1989688873291 Tokens per Sec: 12459.8476394014
Epoch Step: 65 / 138 Loss: 27.061079025268555 Tokens per Sec: 11994.892020389681
Epoch Step: 70 / 138 Loss: 26.75457000732422 Tokens per Sec: 12003.657122936997
Epoch Step: 75 / 138 Loss: 24.22913932800293 Tokens per Sec: 11918.225738951573
Epoch Step: 80 / 138 Loss: 31.931028366088867 Tokens per Sec: 12055.28031629607
Epoch Step: 85 / 138 Loss: 18.79888916015625 Tokens per Sec: 11674.100742418801
Epoch Step: 90 / 138 Loss: 26.641071319580078 Tokens per Sec: 11845.081239353638
Epoch Step: 95 / 138 Loss: 27.87120246887207 Tokens per Sec: 11644.180803542002
Epoch Step: 100 / 138 Loss: 28.52126121520996 Tokens per Sec: 12110.29013424065
Epoch Step: 105 / 138 Loss: 21.528322219848633 Tokens per Sec: 11296.104152407188
Epoch Step: 110 / 138 Loss: 27.494220733642578 Tokens per Sec: 11190.741298990328
Epoch Step: 115 / 138 Loss: 35.10209655761719 Tokens per Sec: 11228.993369201631
Epoch Step: 120 / 138 Loss: 23.975177764892578 Tokens per Sec: 11840.087124474407
Epoch Step: 125 / 138 Loss: 143.52931213378906 Tokens per Sec: 11059.124034420116
Epoch Step: 130 / 138 Loss: 33.223426818847656 Tokens per Sec: 11522.933627257833
Epoch Step: 135 / 138 Loss: 21.174251556396484 Tokens per Sec: 11016.48071597725
Epoch ended with duration 0:00:54.370419
Train perplexity: 1.609833916940288
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.660196
Validation perplexity: 1.698571065113584
Epoch 87 / 1000
Epoch Step: 5 / 138 Loss: 20.407651901245117 Tokens per Sec: 11912.933852305807
Epoch Step: 10 / 138 Loss: 25.041297912597656 Tokens per Sec: 11894.702161138446
Epoch Step: 15 / 138 Loss: 15.521127700805664 Tokens per Sec: 11650.467133985861
Epoch Step: 20 / 138 Loss: 29.584774017333984 Tokens per Sec: 12157.141494566893
Epoch Step: 25 / 138 Loss: 24.37239646911621 Tokens per Sec: 12026.219280619673
Epoch Step: 30 / 138 Loss: 16.823772430419922 Tokens per Sec: 11643.205239959425
Epoch Step: 35 / 138 Loss: 26.057077407836914 Tokens per Sec: 11701.591713093281
Epoch Step: 40 / 138 Loss: 26.393808364868164 Tokens per Sec: 12381.898144140181
Epoch Step: 45 / 138 Loss: 32.766597747802734 Tokens per Sec: 11684.557858991999
Epoch Step: 50 / 138 Loss: 22.42670249938965 Tokens per Sec: 11936.593248597892
Epoch Step: 55 / 138 Loss: 15.228367805480957 Tokens per Sec: 12337.652973377235
Epoch Step: 60 / 138 Loss: 28.973690032958984 Tokens per Sec: 11417.000744968604
Epoch Step: 65 / 138 Loss: 29.069913864135742 Tokens per Sec: 11410.829588016519
Epoch Step: 70 / 138 Loss: 32.61494827270508 Tokens per Sec: 11393.802464204637
Epoch Step: 75 / 138 Loss: 21.871644973754883 Tokens per Sec: 11551.19888657667
Epoch Step: 80 / 138 Loss: 14.080795288085938 Tokens per Sec: 11837.452978727235
Epoch Step: 85 / 138 Loss: 29.58564567565918 Tokens per Sec: 11973.567532208364
Epoch Step: 90 / 138 Loss: 13.145700454711914 Tokens per Sec: 10829.183963247582
Epoch Step: 95 / 138 Loss: 163.1668243408203 Tokens per Sec: 12216.235157978073
Epoch Step: 100 / 138 Loss: 32.915061950683594 Tokens per Sec: 11995.21301761085
Epoch Step: 105 / 138 Loss: 23.96709442138672 Tokens per Sec: 11795.783492806655
Epoch Step: 110 / 138 Loss: 173.69569396972656 Tokens per Sec: 11059.799323214234
Epoch Step: 115 / 138 Loss: 30.18183135986328 Tokens per Sec: 11808.266542421636
Epoch Step: 120 / 138 Loss: 19.18115997314453 Tokens per Sec: 11232.189648997086
Epoch Step: 125 / 138 Loss: 24.68140411376953 Tokens per Sec: 11901.46521622421
Epoch Step: 130 / 138 Loss: 24.646541595458984 Tokens per Sec: 11402.771798727545
Epoch Step: 135 / 138 Loss: 18.045400619506836 Tokens per Sec: 10435.313214234342
Epoch ended with duration 0:00:54.462769
Train perplexity: 1.652155493802797
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.665982
Validation perplexity: 1.7707867680561018
Epoch 88 / 1000
Epoch Step: 5 / 138 Loss: 26.312894821166992 Tokens per Sec: 11632.299795852363
Epoch Step: 10 / 138 Loss: 34.22327423095703 Tokens per Sec: 11828.583109366085
Epoch Step: 15 / 138 Loss: 18.543148040771484 Tokens per Sec: 11874.404245760688
Epoch Step: 20 / 138 Loss: 15.58418083190918 Tokens per Sec: 10929.008962345722
Epoch Step: 25 / 138 Loss: 13.897072792053223 Tokens per Sec: 12174.903480299261
Epoch Step: 30 / 138 Loss: 28.60527229309082 Tokens per Sec: 11484.676043986157
Epoch Step: 35 / 138 Loss: 30.232675552368164 Tokens per Sec: 11972.27987224655
Epoch Step: 40 / 138 Loss: 24.620107650756836 Tokens per Sec: 11960.294452926322
Epoch Step: 45 / 138 Loss: 189.81178283691406 Tokens per Sec: 11429.388884383992
Epoch Step: 50 / 138 Loss: 27.632051467895508 Tokens per Sec: 11597.748937655226
Epoch Step: 55 / 138 Loss: 33.999839782714844 Tokens per Sec: 12192.076791514022
Epoch Step: 60 / 138 Loss: 30.46638298034668 Tokens per Sec: 12646.352182154025
Epoch Step: 65 / 138 Loss: 21.692792892456055 Tokens per Sec: 11589.711266290433
Epoch Step: 70 / 138 Loss: 36.343353271484375 Tokens per Sec: 12491.107093189026
Epoch Step: 75 / 138 Loss: 32.27974319458008 Tokens per Sec: 11893.847187214376
Epoch Step: 80 / 138 Loss: 14.998784065246582 Tokens per Sec: 11620.062156443222
Epoch Step: 85 / 138 Loss: 15.238165855407715 Tokens per Sec: 11900.327137679009
Epoch Step: 90 / 138 Loss: 161.8326873779297 Tokens per Sec: 12163.207355258111
Epoch Step: 95 / 138 Loss: 31.126075744628906 Tokens per Sec: 11694.257389643511
Epoch Step: 100 / 138 Loss: 18.385408401489258 Tokens per Sec: 12258.579824812428
Epoch Step: 105 / 138 Loss: 19.156538009643555 Tokens per Sec: 11809.449341387384
Epoch Step: 110 / 138 Loss: 25.331565856933594 Tokens per Sec: 11166.293889885908
Epoch Step: 115 / 138 Loss: 23.167673110961914 Tokens per Sec: 11772.139965728873
Epoch Step: 120 / 138 Loss: 16.178455352783203 Tokens per Sec: 11532.00935555909
Epoch Step: 125 / 138 Loss: 23.52946662902832 Tokens per Sec: 10783.562196867077
Epoch Step: 130 / 138 Loss: 20.875455856323242 Tokens per Sec: 11472.916091406012
Epoch Step: 135 / 138 Loss: 21.14402198791504 Tokens per Sec: 11028.74777495775
Epoch ended with duration 0:00:54.310845
Train perplexity: 1.6106720837099138
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.703311
Validation perplexity: 1.9228221249962183
Epoch 89 / 1000
Epoch Step: 5 / 138 Loss: 13.8469877243042 Tokens per Sec: 12203.997772532524
Epoch Step: 10 / 138 Loss: 16.07781219482422 Tokens per Sec: 11416.102997996528
Epoch Step: 15 / 138 Loss: 24.9876766204834 Tokens per Sec: 12023.300114817122
Epoch Step: 20 / 138 Loss: 16.966218948364258 Tokens per Sec: 11640.046432386309
Epoch Step: 25 / 138 Loss: 16.287330627441406 Tokens per Sec: 12001.44273676146
Epoch Step: 30 / 138 Loss: 26.117097854614258 Tokens per Sec: 12023.367072789326
Epoch Step: 35 / 138 Loss: 17.626392364501953 Tokens per Sec: 11920.544948982077
Epoch Step: 40 / 138 Loss: 19.368488311767578 Tokens per Sec: 12334.800513053875
Epoch Step: 45 / 138 Loss: 155.3466339111328 Tokens per Sec: 11300.224256265923
Epoch Step: 50 / 138 Loss: 32.76920700073242 Tokens per Sec: 12286.317808881458
Epoch Step: 55 / 138 Loss: 14.467766761779785 Tokens per Sec: 12084.582043570217
Epoch Step: 60 / 138 Loss: 27.974897384643555 Tokens per Sec: 11779.409469645347
Epoch Step: 65 / 138 Loss: 26.23087501525879 Tokens per Sec: 11264.327523518568
Epoch Step: 70 / 138 Loss: 26.418983459472656 Tokens per Sec: 11833.829730086274
Epoch Step: 75 / 138 Loss: 171.57247924804688 Tokens per Sec: 11362.911869832367
Epoch Step: 80 / 138 Loss: 29.406993865966797 Tokens per Sec: 11659.227129231116
Epoch Step: 85 / 138 Loss: 169.26666259765625 Tokens per Sec: 11381.958681274666
Epoch Step: 90 / 138 Loss: 14.917548179626465 Tokens per Sec: 12016.112209725297
Epoch Step: 95 / 138 Loss: 22.722187042236328 Tokens per Sec: 11887.502839948203
Epoch Step: 100 / 138 Loss: 19.921672821044922 Tokens per Sec: 12060.669141113625
Epoch Step: 105 / 138 Loss: 29.88629150390625 Tokens per Sec: 11787.788682804716
Epoch Step: 110 / 138 Loss: 26.062931060791016 Tokens per Sec: 11628.467874082386
Epoch Step: 115 / 138 Loss: 22.226682662963867 Tokens per Sec: 11562.788523499956
Epoch Step: 120 / 138 Loss: 19.609302520751953 Tokens per Sec: 11509.526804644049
Epoch Step: 125 / 138 Loss: 19.79001235961914 Tokens per Sec: 11469.085166219324
Epoch Step: 130 / 138 Loss: 20.69487190246582 Tokens per Sec: 10571.11767274563
Epoch Step: 135 / 138 Loss: 34.63688278198242 Tokens per Sec: 11484.119026294045
Epoch ended with duration 0:00:54.324877
Train perplexity: 1.560678184921499
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.705677
Validation perplexity: 2.0114713569291163
Epoch 90 / 1000
Epoch Step: 5 / 138 Loss: 18.544782638549805 Tokens per Sec: 11831.205209621314
Epoch Step: 10 / 138 Loss: 19.517417907714844 Tokens per Sec: 12112.436263447447
Epoch Step: 15 / 138 Loss: 23.90643310546875 Tokens per Sec: 12074.343845647169
Epoch Step: 20 / 138 Loss: 25.241003036499023 Tokens per Sec: 11853.992511433878
Epoch Step: 25 / 138 Loss: 18.66568374633789 Tokens per Sec: 11654.842199149643
Epoch Step: 30 / 138 Loss: 22.773151397705078 Tokens per Sec: 12007.55054491773
Epoch Step: 35 / 138 Loss: 14.35089111328125 Tokens per Sec: 12405.073807810726
Epoch Step: 40 / 138 Loss: 21.127126693725586 Tokens per Sec: 12027.85328498177
Epoch Step: 45 / 138 Loss: 165.12924194335938 Tokens per Sec: 11498.060790788637
Epoch Step: 50 / 138 Loss: 24.392526626586914 Tokens per Sec: 11513.360437024281
Epoch Step: 55 / 138 Loss: 14.859453201293945 Tokens per Sec: 12117.073338949203
Epoch Step: 60 / 138 Loss: 20.616952896118164 Tokens per Sec: 12287.654370985641
Epoch Step: 65 / 138 Loss: 236.13194274902344 Tokens per Sec: 11365.883415563314
Epoch Step: 70 / 138 Loss: 22.47181510925293 Tokens per Sec: 11860.236074337437
Epoch Step: 75 / 138 Loss: 31.912464141845703 Tokens per Sec: 12006.748096029396
Epoch Step: 80 / 138 Loss: 25.06958770751953 Tokens per Sec: 12015.966720683571
Epoch Step: 85 / 138 Loss: 26.728708267211914 Tokens per Sec: 11627.941288230286
Epoch Step: 90 / 138 Loss: 86.62405395507812 Tokens per Sec: 12069.185782261684
Epoch Step: 95 / 138 Loss: 14.989832878112793 Tokens per Sec: 11782.794914068101
Epoch Step: 100 / 138 Loss: 126.92932891845703 Tokens per Sec: 11677.537025179527
Epoch Step: 105 / 138 Loss: 28.235607147216797 Tokens per Sec: 11434.604702727273
Epoch Step: 110 / 138 Loss: 25.096214294433594 Tokens per Sec: 11478.41752099132
Epoch Step: 115 / 138 Loss: 190.93563842773438 Tokens per Sec: 11083.539564759054
Epoch Step: 120 / 138 Loss: 33.14621353149414 Tokens per Sec: 10762.249394271677
Epoch Step: 125 / 138 Loss: 34.26268768310547 Tokens per Sec: 11007.381656851834
Epoch Step: 130 / 138 Loss: 25.263093948364258 Tokens per Sec: 11483.2337938308
Epoch Step: 135 / 138 Loss: 20.80464744567871 Tokens per Sec: 11647.855235308625
Epoch ended with duration 0:00:54.411804
Train perplexity: 1.5982337073634503
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.703451
Validation perplexity: 1.8991256310525622
Model saved checkpoint!
Epoch 91 / 1000
Epoch Step: 5 / 138 Loss: 23.043119430541992 Tokens per Sec: 11416.00965382811
Epoch Step: 10 / 138 Loss: 17.104665756225586 Tokens per Sec: 12188.200460303502
Epoch Step: 15 / 138 Loss: 26.495927810668945 Tokens per Sec: 11873.494051277326
Epoch Step: 20 / 138 Loss: 15.132119178771973 Tokens per Sec: 11557.589871756714
Epoch Step: 25 / 138 Loss: 20.615982055664062 Tokens per Sec: 12158.634684876266
Epoch Step: 30 / 138 Loss: 27.439556121826172 Tokens per Sec: 11850.683450356384
Epoch Step: 35 / 138 Loss: 28.09837532043457 Tokens per Sec: 12046.125380569601
Epoch Step: 40 / 138 Loss: 16.333961486816406 Tokens per Sec: 12270.546792290703
Epoch Step: 45 / 138 Loss: 33.38890838623047 Tokens per Sec: 11685.536532613827
Epoch Step: 50 / 138 Loss: 30.012413024902344 Tokens per Sec: 11654.012305774355
Epoch Step: 55 / 138 Loss: 20.744836807250977 Tokens per Sec: 11953.80002751879
Epoch Step: 60 / 138 Loss: 17.91584587097168 Tokens per Sec: 11875.197962729404
Epoch Step: 65 / 138 Loss: 30.02914047241211 Tokens per Sec: 11337.481717290804
Epoch Step: 70 / 138 Loss: 29.30646324157715 Tokens per Sec: 12128.722784489084
Epoch Step: 75 / 138 Loss: 12.482730865478516 Tokens per Sec: 12186.542520745263
Epoch Step: 80 / 138 Loss: 19.182876586914062 Tokens per Sec: 11179.043475449856
Epoch Step: 85 / 138 Loss: 34.018150329589844 Tokens per Sec: 11389.42032041461
Epoch Step: 90 / 138 Loss: 18.497196197509766 Tokens per Sec: 12247.226674736128
Epoch Step: 95 / 138 Loss: 21.42045021057129 Tokens per Sec: 11607.735824273761
Epoch Step: 100 / 138 Loss: 25.722286224365234 Tokens per Sec: 11821.754950009996
Epoch Step: 105 / 138 Loss: 17.21596336364746 Tokens per Sec: 11406.833273874994
Epoch Step: 110 / 138 Loss: 23.496658325195312 Tokens per Sec: 11805.64094228689
Epoch Step: 115 / 138 Loss: 22.49781036376953 Tokens per Sec: 11640.204187116951
Epoch Step: 120 / 138 Loss: 25.810483932495117 Tokens per Sec: 11385.464189390765
Epoch Step: 125 / 138 Loss: 30.31682014465332 Tokens per Sec: 11443.224506271823
Epoch Step: 130 / 138 Loss: 18.626901626586914 Tokens per Sec: 11582.960379353679
Epoch Step: 135 / 138 Loss: 23.837594985961914 Tokens per Sec: 10853.596439809558
Epoch ended with duration 0:00:54.461764
Train perplexity: 1.5812425133355088
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.623049
Validation perplexity: 1.5230401232077275
Epoch 92 / 1000
Epoch Step: 5 / 138 Loss: 14.69211483001709 Tokens per Sec: 11720.25703307733
Epoch Step: 10 / 138 Loss: 18.315088272094727 Tokens per Sec: 11904.336403013687
Epoch Step: 15 / 138 Loss: 21.34943389892578 Tokens per Sec: 11519.367334079867
Epoch Step: 20 / 138 Loss: 29.546733856201172 Tokens per Sec: 11831.58075249089
Epoch Step: 25 / 138 Loss: 22.112323760986328 Tokens per Sec: 12036.452271475693
Epoch Step: 30 / 138 Loss: 24.51692771911621 Tokens per Sec: 11453.705765370969
Epoch Step: 35 / 138 Loss: 16.410356521606445 Tokens per Sec: 12024.716383138528
Epoch Step: 40 / 138 Loss: 20.27301788330078 Tokens per Sec: 12115.245783848379
Epoch Step: 45 / 138 Loss: 16.904176712036133 Tokens per Sec: 11614.24069740194
Epoch Step: 50 / 138 Loss: 27.65886688232422 Tokens per Sec: 12457.406329483083
Epoch Step: 55 / 138 Loss: 20.192657470703125 Tokens per Sec: 11034.271859799792
Epoch Step: 60 / 138 Loss: 28.04412078857422 Tokens per Sec: 11850.391501205277
Epoch Step: 65 / 138 Loss: 22.861446380615234 Tokens per Sec: 11545.261411288451
Epoch Step: 70 / 138 Loss: 17.0892391204834 Tokens per Sec: 11704.816715610956
Epoch Step: 75 / 138 Loss: 24.733613967895508 Tokens per Sec: 11687.46536030832
Epoch Step: 80 / 138 Loss: 15.384636878967285 Tokens per Sec: 12088.513991189078
Epoch Step: 85 / 138 Loss: 25.54085350036621 Tokens per Sec: 11404.609499867018
Epoch Step: 90 / 138 Loss: 36.161651611328125 Tokens per Sec: 12054.853425072486
Epoch Step: 95 / 138 Loss: 20.504066467285156 Tokens per Sec: 12422.396219796407
Epoch Step: 100 / 138 Loss: 18.120460510253906 Tokens per Sec: 12306.799892070087
Epoch Step: 105 / 138 Loss: 23.83146095275879 Tokens per Sec: 10617.793936047796
Epoch Step: 110 / 138 Loss: 19.087472915649414 Tokens per Sec: 10942.57463886886
Epoch Step: 115 / 138 Loss: 30.909832000732422 Tokens per Sec: 11803.85110787571
Epoch Step: 120 / 138 Loss: 18.99599266052246 Tokens per Sec: 11175.908301505315
Epoch Step: 125 / 138 Loss: 29.79351043701172 Tokens per Sec: 11846.776398634582
Epoch Step: 130 / 138 Loss: 31.115251541137695 Tokens per Sec: 11614.8966888975
Epoch Step: 135 / 138 Loss: 118.60796356201172 Tokens per Sec: 11151.681862519581
Epoch ended with duration 0:00:54.497866
Train perplexity: 1.6934574415234556
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.627206
Validation perplexity: 1.6569077499741904
Epoch 93 / 1000
Epoch Step: 5 / 138 Loss: 26.182466506958008 Tokens per Sec: 11281.234776853731
Epoch Step: 10 / 138 Loss: 18.927804946899414 Tokens per Sec: 11701.29926461679
Epoch Step: 15 / 138 Loss: 20.744897842407227 Tokens per Sec: 12136.996359766068
Epoch Step: 20 / 138 Loss: 23.97959327697754 Tokens per Sec: 11534.68249420153
Epoch Step: 25 / 138 Loss: 29.733625411987305 Tokens per Sec: 11863.159934311925
Epoch Step: 30 / 138 Loss: 21.571456909179688 Tokens per Sec: 12154.217148498828
Epoch Step: 35 / 138 Loss: 23.10004997253418 Tokens per Sec: 11791.094607135448
Epoch Step: 40 / 138 Loss: 13.357967376708984 Tokens per Sec: 12093.674137796264
Epoch Step: 45 / 138 Loss: 18.201507568359375 Tokens per Sec: 12213.761193076987
Epoch Step: 50 / 138 Loss: 23.095230102539062 Tokens per Sec: 12355.840462308446
Epoch Step: 55 / 138 Loss: 17.369922637939453 Tokens per Sec: 12384.608638721482
Epoch Step: 60 / 138 Loss: 21.66674041748047 Tokens per Sec: 11996.735924307894
Epoch Step: 65 / 138 Loss: 18.643394470214844 Tokens per Sec: 11760.536343762871
Epoch Step: 70 / 138 Loss: 18.677762985229492 Tokens per Sec: 12135.876005007825
Epoch Step: 75 / 138 Loss: 22.740211486816406 Tokens per Sec: 11556.488723767154
Epoch Step: 80 / 138 Loss: 23.04650115966797 Tokens per Sec: 11933.570213208028
Epoch Step: 85 / 138 Loss: 22.59507942199707 Tokens per Sec: 11807.897797027681
Epoch Step: 90 / 138 Loss: 156.9685516357422 Tokens per Sec: 11554.491762283638
Epoch Step: 95 / 138 Loss: 15.57783031463623 Tokens per Sec: 11082.495264635914
Epoch Step: 100 / 138 Loss: 24.666522979736328 Tokens per Sec: 11863.862009566534
Epoch Step: 105 / 138 Loss: 74.20771789550781 Tokens per Sec: 11176.656495311528
Epoch Step: 110 / 138 Loss: 34.564456939697266 Tokens per Sec: 11525.365754637704
Epoch Step: 115 / 138 Loss: 25.3944149017334 Tokens per Sec: 11852.758177615327
Epoch Step: 120 / 138 Loss: 18.442670822143555 Tokens per Sec: 11685.903041691045
Epoch Step: 125 / 138 Loss: 23.648256301879883 Tokens per Sec: 11141.086307714984
Epoch Step: 130 / 138 Loss: 22.980693817138672 Tokens per Sec: 11071.646081766477
Epoch Step: 135 / 138 Loss: 20.286914825439453 Tokens per Sec: 11492.778301622257
Epoch ended with duration 0:00:54.366510
Train perplexity: 1.5939812775032705
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.655881
Validation perplexity: 1.6648744294677655
Epoch 94 / 1000
Epoch Step: 5 / 138 Loss: 35.83498764038086 Tokens per Sec: 11718.330434128293
Epoch Step: 10 / 138 Loss: 32.16953659057617 Tokens per Sec: 11822.822569834769
Epoch Step: 15 / 138 Loss: 20.382482528686523 Tokens per Sec: 11520.668358841494
Epoch Step: 20 / 138 Loss: 12.994279861450195 Tokens per Sec: 12170.760965807693
Epoch Step: 25 / 138 Loss: 22.27536964416504 Tokens per Sec: 11864.107910716259
Epoch Step: 30 / 138 Loss: 17.943706512451172 Tokens per Sec: 12248.623183869902
Epoch Step: 35 / 138 Loss: 23.628206253051758 Tokens per Sec: 11849.242214443306
Epoch Step: 40 / 138 Loss: 21.480873107910156 Tokens per Sec: 11780.053007894061
Epoch Step: 45 / 138 Loss: 16.159940719604492 Tokens per Sec: 11852.730245231607
Epoch Step: 50 / 138 Loss: 20.013898849487305 Tokens per Sec: 12126.388206382639
Epoch Step: 55 / 138 Loss: 27.131736755371094 Tokens per Sec: 12156.40926899576
Epoch Step: 60 / 138 Loss: 17.646160125732422 Tokens per Sec: 12042.829858110628
Epoch Step: 65 / 138 Loss: 31.156993865966797 Tokens per Sec: 11823.067462408233
Epoch Step: 70 / 138 Loss: 31.312442779541016 Tokens per Sec: 11768.31415555972
Epoch Step: 75 / 138 Loss: 27.93839454650879 Tokens per Sec: 11782.867829016668
Epoch Step: 80 / 138 Loss: 14.89161205291748 Tokens per Sec: 11842.755239945069
Epoch Step: 85 / 138 Loss: 27.909257888793945 Tokens per Sec: 11354.959372237241
Epoch Step: 90 / 138 Loss: 21.528921127319336 Tokens per Sec: 12000.999344975795
Epoch Step: 95 / 138 Loss: 23.806838989257812 Tokens per Sec: 11837.46618667749
Epoch Step: 100 / 138 Loss: 31.943939208984375 Tokens per Sec: 11701.661713744521
Epoch Step: 105 / 138 Loss: 114.41309356689453 Tokens per Sec: 11144.052616741525
Epoch Step: 110 / 138 Loss: 25.365022659301758 Tokens per Sec: 11349.88196047713
Epoch Step: 115 / 138 Loss: 20.54404067993164 Tokens per Sec: 11810.853105511882
Epoch Step: 120 / 138 Loss: 22.665231704711914 Tokens per Sec: 10591.551457358784
Epoch Step: 125 / 138 Loss: 16.6170654296875 Tokens per Sec: 11896.574223647625
Epoch Step: 130 / 138 Loss: 17.30492401123047 Tokens per Sec: 11696.983239035653
Epoch Step: 135 / 138 Loss: 18.675283432006836 Tokens per Sec: 11171.554434600614
Epoch ended with duration 0:00:54.330144
Train perplexity: 1.6030058505347822
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.633126
Validation perplexity: 1.4537973800278554
Epoch 95 / 1000
Epoch Step: 5 / 138 Loss: 27.689714431762695 Tokens per Sec: 12083.846596833953
Epoch Step: 10 / 138 Loss: 27.225597381591797 Tokens per Sec: 12053.74367496876
Epoch Step: 15 / 138 Loss: 25.000608444213867 Tokens per Sec: 11991.612348588302
Epoch Step: 20 / 138 Loss: 15.732561111450195 Tokens per Sec: 12298.38201621084
Epoch Step: 25 / 138 Loss: 19.166961669921875 Tokens per Sec: 12007.141189120626
Epoch Step: 30 / 138 Loss: 20.742511749267578 Tokens per Sec: 12123.790490377864
Epoch Step: 35 / 138 Loss: 18.813772201538086 Tokens per Sec: 11588.133810237772
Epoch Step: 40 / 138 Loss: 16.999441146850586 Tokens per Sec: 12349.997273735076
Epoch Step: 45 / 138 Loss: 27.748050689697266 Tokens per Sec: 11950.854314968079
Epoch Step: 50 / 138 Loss: 12.811211585998535 Tokens per Sec: 11894.755597064592
Epoch Step: 55 / 138 Loss: 132.93418884277344 Tokens per Sec: 11422.391864642732
Epoch Step: 60 / 138 Loss: 112.29304504394531 Tokens per Sec: 11776.333756754551
Epoch Step: 65 / 138 Loss: 21.176828384399414 Tokens per Sec: 11714.10438636329
Epoch Step: 70 / 138 Loss: 23.850414276123047 Tokens per Sec: 11323.286817045439
Epoch Step: 75 / 138 Loss: 27.228517532348633 Tokens per Sec: 12033.596317542702
Epoch Step: 80 / 138 Loss: 17.437135696411133 Tokens per Sec: 11743.699681080152
Epoch Step: 85 / 138 Loss: 20.0625 Tokens per Sec: 11842.91060589983
Epoch Step: 90 / 138 Loss: 29.967987060546875 Tokens per Sec: 12410.251371841689
Epoch Step: 95 / 138 Loss: 32.91331481933594 Tokens per Sec: 11588.270948229438
Epoch Step: 100 / 138 Loss: 10.651999473571777 Tokens per Sec: 11349.105941853079
Epoch Step: 105 / 138 Loss: 27.49213981628418 Tokens per Sec: 11539.946320937002
Epoch Step: 110 / 138 Loss: 16.141658782958984 Tokens per Sec: 11212.772985910638
Epoch Step: 115 / 138 Loss: 177.55642700195312 Tokens per Sec: 11390.133387324531
Epoch Step: 120 / 138 Loss: 18.298900604248047 Tokens per Sec: 11674.784899553906
Epoch Step: 125 / 138 Loss: 18.502471923828125 Tokens per Sec: 11757.866045253271
Epoch Step: 130 / 138 Loss: 23.540935516357422 Tokens per Sec: 10690.018578528387
Epoch Step: 135 / 138 Loss: 25.060251235961914 Tokens per Sec: 11598.321720566191
Epoch ended with duration 0:00:54.309865
Train perplexity: 1.5651008380549443
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.667591
Validation perplexity: 1.7089981820109401
Model saved checkpoint!
Epoch 96 / 1000
Epoch Step: 5 / 138 Loss: 16.760513305664062 Tokens per Sec: 12204.195487323721
Epoch Step: 10 / 138 Loss: 19.657026290893555 Tokens per Sec: 12306.424436018488
Epoch Step: 15 / 138 Loss: 26.492477416992188 Tokens per Sec: 11899.994036147706
Epoch Step: 20 / 138 Loss: 19.570796966552734 Tokens per Sec: 12088.153942901929
Epoch Step: 25 / 138 Loss: 26.06902503967285 Tokens per Sec: 11570.966645146898
Epoch Step: 30 / 138 Loss: 30.06324005126953 Tokens per Sec: 11351.915422403767
Epoch Step: 35 / 138 Loss: 232.3058319091797 Tokens per Sec: 12073.987104190654
Epoch Step: 40 / 138 Loss: 25.45068359375 Tokens per Sec: 12078.059927376407
Epoch Step: 45 / 138 Loss: 27.56665802001953 Tokens per Sec: 11969.370299418917
Epoch Step: 50 / 138 Loss: 28.59330177307129 Tokens per Sec: 11788.895759282332
Epoch Step: 55 / 138 Loss: 22.628948211669922 Tokens per Sec: 12142.736126121457
Epoch Step: 60 / 138 Loss: 204.3509063720703 Tokens per Sec: 11710.82348691627
Epoch Step: 65 / 138 Loss: 31.9398250579834 Tokens per Sec: 12165.479584439476
Epoch Step: 70 / 138 Loss: 19.874683380126953 Tokens per Sec: 11998.41137316477
Epoch Step: 75 / 138 Loss: 18.550207138061523 Tokens per Sec: 12018.499107877155
Epoch Step: 80 / 138 Loss: 13.597687721252441 Tokens per Sec: 12121.51800484796
Epoch Step: 85 / 138 Loss: 14.206193923950195 Tokens per Sec: 11385.15926644968
Epoch Step: 90 / 138 Loss: 25.406219482421875 Tokens per Sec: 12003.356618269338
Epoch Step: 95 / 138 Loss: 141.3665008544922 Tokens per Sec: 11685.736200741474
Epoch Step: 100 / 138 Loss: 26.407398223876953 Tokens per Sec: 11590.113991163005
Epoch Step: 105 / 138 Loss: 20.745681762695312 Tokens per Sec: 11436.284677288933
Epoch Step: 110 / 138 Loss: 24.747344970703125 Tokens per Sec: 10527.467927069272
Epoch Step: 115 / 138 Loss: 28.603309631347656 Tokens per Sec: 11220.133026859558
Epoch Step: 120 / 138 Loss: 19.164426803588867 Tokens per Sec: 11144.309730835794
Epoch Step: 125 / 138 Loss: 17.206085205078125 Tokens per Sec: 11405.4999555074
Epoch Step: 130 / 138 Loss: 25.98461151123047 Tokens per Sec: 11733.914262481994
Epoch Step: 135 / 138 Loss: 181.95770263671875 Tokens per Sec: 11392.756380725756
Epoch ended with duration 0:00:54.371828
Train perplexity: 1.6521263096278163
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) ) . }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.628096
Validation perplexity: 1.5355183905117098
Epoch 97 / 1000
Epoch Step: 5 / 138 Loss: 20.85059928894043 Tokens per Sec: 12344.685511641193
Epoch Step: 10 / 138 Loss: 162.6060028076172 Tokens per Sec: 11989.722940688614
Epoch Step: 15 / 138 Loss: 25.20691680908203 Tokens per Sec: 11452.895828220606
Epoch Step: 20 / 138 Loss: 22.169645309448242 Tokens per Sec: 11475.479428413835
Epoch Step: 25 / 138 Loss: 21.132583618164062 Tokens per Sec: 12615.916463539075
Epoch Step: 30 / 138 Loss: 11.206758499145508 Tokens per Sec: 11985.331250956975
Epoch Step: 35 / 138 Loss: 14.022456169128418 Tokens per Sec: 12559.187604357698
Epoch Step: 40 / 138 Loss: 187.45411682128906 Tokens per Sec: 11738.847682797494
Epoch Step: 45 / 138 Loss: 16.16758155822754 Tokens per Sec: 12268.140940728763
Epoch Step: 50 / 138 Loss: 160.93223571777344 Tokens per Sec: 11169.403278107195
Epoch Step: 55 / 138 Loss: 16.001890182495117 Tokens per Sec: 11733.59731008571
Epoch Step: 60 / 138 Loss: 18.15326499938965 Tokens per Sec: 11805.713969973782
Epoch Step: 65 / 138 Loss: 20.65778923034668 Tokens per Sec: 11447.913443341544
Epoch Step: 70 / 138 Loss: 27.85413360595703 Tokens per Sec: 11514.783808382363
Epoch Step: 75 / 138 Loss: 12.742668151855469 Tokens per Sec: 11702.720813070968
Epoch Step: 80 / 138 Loss: 19.545412063598633 Tokens per Sec: 12303.516843247373
Epoch Step: 85 / 138 Loss: 26.673646926879883 Tokens per Sec: 11514.241241241936
Epoch Step: 90 / 138 Loss: 197.2577362060547 Tokens per Sec: 11492.233645317103
Epoch Step: 95 / 138 Loss: 16.59770965576172 Tokens per Sec: 12179.048046323016
Epoch Step: 100 / 138 Loss: 36.557090759277344 Tokens per Sec: 11523.799433941489
Epoch Step: 105 / 138 Loss: 35.236629486083984 Tokens per Sec: 11593.40431528838
Epoch Step: 110 / 138 Loss: 20.234407424926758 Tokens per Sec: 12068.216900717256
Epoch Step: 115 / 138 Loss: 19.418357849121094 Tokens per Sec: 11481.288571677653
Epoch Step: 120 / 138 Loss: 14.74045181274414 Tokens per Sec: 11556.760959607325
Epoch Step: 125 / 138 Loss: 17.382734298706055 Tokens per Sec: 10965.61869797751
Epoch Step: 130 / 138 Loss: 22.131935119628906 Tokens per Sec: 11228.812030866824
Epoch Step: 135 / 138 Loss: 23.416152954101562 Tokens per Sec: 11400.682504276061
Epoch ended with duration 0:00:54.355453
Train perplexity: 1.6130191201781485
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.635489
Validation perplexity: 1.5234736490028553
Epoch 98 / 1000
Epoch Step: 5 / 138 Loss: 27.2791805267334 Tokens per Sec: 11318.032360856121
Epoch Step: 10 / 138 Loss: 28.399696350097656 Tokens per Sec: 12104.771989403122
Epoch Step: 15 / 138 Loss: 11.988424301147461 Tokens per Sec: 12235.19568387322
Epoch Step: 20 / 138 Loss: 13.874670028686523 Tokens per Sec: 11602.382912661991
Epoch Step: 25 / 138 Loss: 15.47579574584961 Tokens per Sec: 11598.424134566721
Epoch Step: 30 / 138 Loss: 26.9346923828125 Tokens per Sec: 11705.880503985498
Epoch Step: 35 / 138 Loss: 19.482654571533203 Tokens per Sec: 11867.744899283898
Epoch Step: 40 / 138 Loss: 21.985328674316406 Tokens per Sec: 12294.35228116974
Epoch Step: 45 / 138 Loss: 17.173599243164062 Tokens per Sec: 11903.687108383596
Epoch Step: 50 / 138 Loss: 19.78314208984375 Tokens per Sec: 11702.36972999839
Epoch Step: 55 / 138 Loss: 22.7014217376709 Tokens per Sec: 11549.584474720043
Epoch Step: 60 / 138 Loss: 28.05901336669922 Tokens per Sec: 11974.320559365844
Epoch Step: 65 / 138 Loss: 14.693976402282715 Tokens per Sec: 12103.285936838292
Epoch Step: 70 / 138 Loss: 141.72760009765625 Tokens per Sec: 11742.115364922705
Epoch Step: 75 / 138 Loss: 29.7288875579834 Tokens per Sec: 11854.800355135761
Epoch Step: 80 / 138 Loss: 16.767175674438477 Tokens per Sec: 12116.510358308038
Epoch Step: 85 / 138 Loss: 23.025815963745117 Tokens per Sec: 12278.425543224801
Epoch Step: 90 / 138 Loss: 26.09642219543457 Tokens per Sec: 11873.562808700532
Epoch Step: 95 / 138 Loss: 27.56796646118164 Tokens per Sec: 11854.427121376837
Epoch Step: 100 / 138 Loss: 23.993804931640625 Tokens per Sec: 11849.850987987502
Epoch Step: 105 / 138 Loss: 106.98272705078125 Tokens per Sec: 11278.385705545243
Epoch Step: 110 / 138 Loss: 27.78595733642578 Tokens per Sec: 11420.481077814798
Epoch Step: 115 / 138 Loss: 14.48687744140625 Tokens per Sec: 11678.879993924897
Epoch Step: 120 / 138 Loss: 189.7871856689453 Tokens per Sec: 10746.047321113583
Epoch Step: 125 / 138 Loss: 18.271631240844727 Tokens per Sec: 10984.66145295893
Epoch Step: 130 / 138 Loss: 29.6290340423584 Tokens per Sec: 11649.3814902251
Epoch Step: 135 / 138 Loss: 23.085834503173828 Tokens per Sec: 11597.66066958247
Epoch ended with duration 0:00:54.478450
Train perplexity: 1.5717392096151086
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.693273
Validation perplexity: 1.781662627591091
Epoch 99 / 1000
Epoch Step: 5 / 138 Loss: 147.57960510253906 Tokens per Sec: 11175.308463020356
Epoch Step: 10 / 138 Loss: 12.269298553466797 Tokens per Sec: 12408.431618762525
Epoch Step: 15 / 138 Loss: 22.110336303710938 Tokens per Sec: 11719.224341433097
Epoch Step: 20 / 138 Loss: 19.21550750732422 Tokens per Sec: 11663.31957873204
Epoch Step: 25 / 138 Loss: 13.009994506835938 Tokens per Sec: 12320.520921561736
Epoch Step: 30 / 138 Loss: 24.173532485961914 Tokens per Sec: 11670.04714989629
Epoch Step: 35 / 138 Loss: 15.075963973999023 Tokens per Sec: 12058.64271998315
Epoch Step: 40 / 138 Loss: 15.694218635559082 Tokens per Sec: 11810.731693723323
Epoch Step: 45 / 138 Loss: 15.806351661682129 Tokens per Sec: 11872.499829838986
Epoch Step: 50 / 138 Loss: 29.460691452026367 Tokens per Sec: 11647.11731949839
Epoch Step: 55 / 138 Loss: 28.964153289794922 Tokens per Sec: 10988.861683333042
Epoch Step: 60 / 138 Loss: 24.770341873168945 Tokens per Sec: 11842.050704238727
Epoch Step: 65 / 138 Loss: 26.897966384887695 Tokens per Sec: 12027.262183956196
Epoch Step: 70 / 138 Loss: 23.314746856689453 Tokens per Sec: 12186.648773347144
Epoch Step: 75 / 138 Loss: 32.14756774902344 Tokens per Sec: 11343.049657840871
Epoch Step: 80 / 138 Loss: 24.559871673583984 Tokens per Sec: 11256.146950607537
Epoch Step: 85 / 138 Loss: 22.789419174194336 Tokens per Sec: 11575.835033102185
Epoch Step: 90 / 138 Loss: 17.720792770385742 Tokens per Sec: 12148.27312619723
Epoch Step: 95 / 138 Loss: 125.01168823242188 Tokens per Sec: 12118.821544533088
Epoch Step: 100 / 138 Loss: 14.339038848876953 Tokens per Sec: 12057.831986164243
Epoch Step: 105 / 138 Loss: 26.449188232421875 Tokens per Sec: 11525.698544417848
Epoch Step: 110 / 138 Loss: 20.940454483032227 Tokens per Sec: 11771.46468311196
Epoch Step: 115 / 138 Loss: 20.619794845581055 Tokens per Sec: 11813.01390373015
Epoch Step: 120 / 138 Loss: 21.000469207763672 Tokens per Sec: 10828.935407805242
Epoch Step: 125 / 138 Loss: 87.50973510742188 Tokens per Sec: 11511.104345646632
Epoch Step: 130 / 138 Loss: 23.748619079589844 Tokens per Sec: 11221.165170899649
Epoch Step: 135 / 138 Loss: 22.942726135253906 Tokens per Sec: 11685.342124087256
Epoch ended with duration 0:00:54.481564
Train perplexity: 1.6009099250041352
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.669880
Validation perplexity: 1.7798842150337675
Epoch 100 / 1000
Epoch Step: 5 / 138 Loss: 20.08438491821289 Tokens per Sec: 11955.890819604796
Epoch Step: 10 / 138 Loss: 11.110762596130371 Tokens per Sec: 12170.427727546617
Epoch Step: 15 / 138 Loss: 20.869611740112305 Tokens per Sec: 11614.06317444375
Epoch Step: 20 / 138 Loss: 31.963838577270508 Tokens per Sec: 11936.13957299334
Epoch Step: 25 / 138 Loss: 29.9710693359375 Tokens per Sec: 11952.948275828721
Epoch Step: 30 / 138 Loss: 32.9139404296875 Tokens per Sec: 11257.696501145103
Epoch Step: 35 / 138 Loss: 25.77024269104004 Tokens per Sec: 11749.429087807091
Epoch Step: 40 / 138 Loss: 23.180187225341797 Tokens per Sec: 12288.449445919045
Epoch Step: 45 / 138 Loss: 12.360212326049805 Tokens per Sec: 12034.708852544885
Epoch Step: 50 / 138 Loss: 23.290708541870117 Tokens per Sec: 11878.60054241689
Epoch Step: 55 / 138 Loss: 15.589102745056152 Tokens per Sec: 12031.49648461367
Epoch Step: 60 / 138 Loss: 18.724870681762695 Tokens per Sec: 12396.049381364679
Epoch Step: 65 / 138 Loss: 23.303909301757812 Tokens per Sec: 11579.751432126042
Epoch Step: 70 / 138 Loss: 22.168506622314453 Tokens per Sec: 11624.296579565284
Epoch Step: 75 / 138 Loss: 30.323270797729492 Tokens per Sec: 11363.170366681146
Epoch Step: 80 / 138 Loss: 15.975961685180664 Tokens per Sec: 12089.172475639192
Epoch Step: 85 / 138 Loss: 22.835186004638672 Tokens per Sec: 11926.087518006758
Epoch Step: 90 / 138 Loss: 24.654407501220703 Tokens per Sec: 11817.079025702817
Epoch Step: 95 / 138 Loss: 28.73426628112793 Tokens per Sec: 11938.116489819955
Epoch Step: 100 / 138 Loss: 26.304019927978516 Tokens per Sec: 11836.907674953012
Epoch Step: 105 / 138 Loss: 16.43539047241211 Tokens per Sec: 11297.75545030547
Epoch Step: 110 / 138 Loss: 157.2564239501953 Tokens per Sec: 10924.864345930622
Epoch Step: 115 / 138 Loss: 25.868824005126953 Tokens per Sec: 10945.717521502054
Epoch Step: 120 / 138 Loss: 30.118358612060547 Tokens per Sec: 10773.884573006268
Epoch Step: 125 / 138 Loss: 19.71443748474121 Tokens per Sec: 11741.637115953137
Epoch Step: 130 / 138 Loss: 28.802825927734375 Tokens per Sec: 11705.20072033086
Epoch Step: 135 / 138 Loss: 23.310976028442383 Tokens per Sec: 11743.370622160408
Epoch ended with duration 0:00:54.388651
Train perplexity: 1.6146376668451712
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.631003
Validation perplexity: 1.4945106978894445
Model saved checkpoint!
Epoch 101 / 1000
Epoch Step: 5 / 138 Loss: 152.17108154296875 Tokens per Sec: 11801.794030166724
Epoch Step: 10 / 138 Loss: 15.198070526123047 Tokens per Sec: 11646.922830403477
Epoch Step: 15 / 138 Loss: 156.927001953125 Tokens per Sec: 12041.58291034498
Epoch Step: 20 / 138 Loss: 19.158443450927734 Tokens per Sec: 11311.329875462074
Epoch Step: 25 / 138 Loss: 29.78452491760254 Tokens per Sec: 11578.431707541333
Epoch Step: 30 / 138 Loss: 25.034488677978516 Tokens per Sec: 12167.420925321498
Epoch Step: 35 / 138 Loss: 24.406330108642578 Tokens per Sec: 11737.811873407649
Epoch Step: 40 / 138 Loss: 31.322200775146484 Tokens per Sec: 12003.193165473429
Epoch Step: 45 / 138 Loss: 21.739503860473633 Tokens per Sec: 12235.079655105319
Epoch Step: 50 / 138 Loss: 12.22169303894043 Tokens per Sec: 12235.681394875208
Epoch Step: 55 / 138 Loss: 24.325016021728516 Tokens per Sec: 11631.978769859326
Epoch Step: 60 / 138 Loss: 22.33365249633789 Tokens per Sec: 12243.885083617586
Epoch Step: 65 / 138 Loss: 18.296926498413086 Tokens per Sec: 12010.808762178918
Epoch Step: 70 / 138 Loss: 22.881135940551758 Tokens per Sec: 11657.762447757052
Epoch Step: 75 / 138 Loss: 23.23758316040039 Tokens per Sec: 11935.917724945173
Epoch Step: 80 / 138 Loss: 18.287765502929688 Tokens per Sec: 12113.277242032513
Epoch Step: 85 / 138 Loss: 151.1984100341797 Tokens per Sec: 11264.306741735729
Epoch Step: 90 / 138 Loss: 21.44536590576172 Tokens per Sec: 11887.873104577136
Epoch Step: 95 / 138 Loss: 35.35418701171875 Tokens per Sec: 11706.759118011008
Epoch Step: 100 / 138 Loss: 22.729238510131836 Tokens per Sec: 11558.936634274802
Epoch Step: 105 / 138 Loss: 23.20160484313965 Tokens per Sec: 11791.45377732807
Epoch Step: 110 / 138 Loss: 15.90505313873291 Tokens per Sec: 11681.87090697363
Epoch Step: 115 / 138 Loss: 13.787410736083984 Tokens per Sec: 11527.20739664826
Epoch Step: 120 / 138 Loss: 16.81334114074707 Tokens per Sec: 11700.77067361574
Epoch Step: 125 / 138 Loss: 80.7729263305664 Tokens per Sec: 10906.297147395253
Epoch Step: 130 / 138 Loss: 17.037805557250977 Tokens per Sec: 11871.896868068632
Epoch Step: 135 / 138 Loss: 17.46786880493164 Tokens per Sec: 10816.913968432804
Epoch ended with duration 0:00:54.286823
Train perplexity: 1.5428535767129052
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.669014
Validation perplexity: 1.7815001828132637
Epoch 102 / 1000
Epoch Step: 5 / 138 Loss: 21.619781494140625 Tokens per Sec: 12204.606865632431
Epoch Step: 10 / 138 Loss: 14.206847190856934 Tokens per Sec: 11364.376247523214
Epoch Step: 15 / 138 Loss: 23.632356643676758 Tokens per Sec: 11673.506030682067
Epoch Step: 20 / 138 Loss: 13.461633682250977 Tokens per Sec: 11932.92045674001
Epoch Step: 25 / 138 Loss: 26.034954071044922 Tokens per Sec: 11427.33750279062
Epoch Step: 30 / 138 Loss: 17.34774398803711 Tokens per Sec: 12183.244154944812
Epoch Step: 35 / 138 Loss: 22.993873596191406 Tokens per Sec: 11385.389722904158
Epoch Step: 40 / 138 Loss: 10.443999290466309 Tokens per Sec: 12005.782966933199
Epoch Step: 45 / 138 Loss: 22.06144142150879 Tokens per Sec: 12120.022042773498
Epoch Step: 50 / 138 Loss: 28.603771209716797 Tokens per Sec: 11721.154071157584
Epoch Step: 55 / 138 Loss: 17.168800354003906 Tokens per Sec: 11952.005484499388
Epoch Step: 60 / 138 Loss: 13.667576789855957 Tokens per Sec: 11761.317632882408
Epoch Step: 65 / 138 Loss: 17.568674087524414 Tokens per Sec: 12337.147282089172
Epoch Step: 70 / 138 Loss: 35.24553298950195 Tokens per Sec: 11569.879426531845
Epoch Step: 75 / 138 Loss: 33.21422576904297 Tokens per Sec: 11494.672771936777
Epoch Step: 80 / 138 Loss: 20.26363754272461 Tokens per Sec: 11956.890423856514
Epoch Step: 85 / 138 Loss: 14.419937133789062 Tokens per Sec: 12601.76301849995
Epoch Step: 90 / 138 Loss: 24.399200439453125 Tokens per Sec: 11995.28894575279
Epoch Step: 95 / 138 Loss: 17.7197265625 Tokens per Sec: 12350.127998006717
Epoch Step: 100 / 138 Loss: 13.334017753601074 Tokens per Sec: 12186.129950824297
Epoch Step: 105 / 138 Loss: 23.33066177368164 Tokens per Sec: 11295.885770887075
Epoch Step: 110 / 138 Loss: 21.704076766967773 Tokens per Sec: 11746.577695330376
Epoch Step: 115 / 138 Loss: 17.71487808227539 Tokens per Sec: 10570.984086323815
Epoch Step: 120 / 138 Loss: 167.1922607421875 Tokens per Sec: 11395.831069185124
Epoch Step: 125 / 138 Loss: 19.68448257446289 Tokens per Sec: 11592.390433399944
Epoch Step: 130 / 138 Loss: 26.391311645507812 Tokens per Sec: 11709.694675479544
Epoch Step: 135 / 138 Loss: 21.224618911743164 Tokens per Sec: 11404.177317119562
Epoch ended with duration 0:00:54.242428
Train perplexity: 1.534887077151531
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values TYPE_2 TYPE_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.724562
Validation perplexity: 1.9715565852404395
Epoch 103 / 1000
Epoch Step: 5 / 138 Loss: 25.59681510925293 Tokens per Sec: 11524.142197234642
Epoch Step: 10 / 138 Loss: 26.055124282836914 Tokens per Sec: 11576.15918752095
Epoch Step: 15 / 138 Loss: 28.04633903503418 Tokens per Sec: 12267.964611892601
Epoch Step: 20 / 138 Loss: 21.842098236083984 Tokens per Sec: 11374.22172594038
Epoch Step: 25 / 138 Loss: 14.694841384887695 Tokens per Sec: 11998.251224841973
Epoch Step: 30 / 138 Loss: 25.608722686767578 Tokens per Sec: 12291.857570322243
Epoch Step: 35 / 138 Loss: 19.546279907226562 Tokens per Sec: 12126.560870224293
Epoch Step: 40 / 138 Loss: 19.932228088378906 Tokens per Sec: 12497.234857161106
Epoch Step: 45 / 138 Loss: 14.200112342834473 Tokens per Sec: 12038.425032885027
Epoch Step: 50 / 138 Loss: 21.21041488647461 Tokens per Sec: 11863.994283336233
Epoch Step: 55 / 138 Loss: 19.34218978881836 Tokens per Sec: 11774.01805141478
Epoch Step: 60 / 138 Loss: 17.597736358642578 Tokens per Sec: 11918.653347846282
Epoch Step: 65 / 138 Loss: 19.7703914642334 Tokens per Sec: 12256.906547234894
Epoch Step: 70 / 138 Loss: 13.14431381225586 Tokens per Sec: 11797.399835130629
Epoch Step: 75 / 138 Loss: 10.44618034362793 Tokens per Sec: 11720.901550550294
Epoch Step: 80 / 138 Loss: 157.09593200683594 Tokens per Sec: 12107.769161794924
Epoch Step: 85 / 138 Loss: 20.436262130737305 Tokens per Sec: 11815.168749024699
Epoch Step: 90 / 138 Loss: 28.670738220214844 Tokens per Sec: 12189.991000258275
Epoch Step: 95 / 138 Loss: 19.116914749145508 Tokens per Sec: 11647.04555655369
Epoch Step: 100 / 138 Loss: 25.828893661499023 Tokens per Sec: 11692.191848502787
Epoch Step: 105 / 138 Loss: 25.80495834350586 Tokens per Sec: 11589.13982789433
Epoch Step: 110 / 138 Loss: 24.0651912689209 Tokens per Sec: 11696.011970346188
Epoch Step: 115 / 138 Loss: 20.257354736328125 Tokens per Sec: 11877.635675780204
Epoch Step: 120 / 138 Loss: 19.361181259155273 Tokens per Sec: 11920.571829707937
Epoch Step: 125 / 138 Loss: 22.920032501220703 Tokens per Sec: 11175.72103986442
Epoch Step: 130 / 138 Loss: 16.878379821777344 Tokens per Sec: 11629.70939346339
Epoch Step: 135 / 138 Loss: 18.409690856933594 Tokens per Sec: 11039.503514277752
Epoch ended with duration 0:00:53.974718
Train perplexity: 1.4650526662756398
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , , , , , , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.681983
Validation perplexity: 1.7173232723340763
Epoch 104 / 1000
Epoch Step: 5 / 138 Loss: 13.48574447631836 Tokens per Sec: 11691.265130344436
Epoch Step: 10 / 138 Loss: 82.59812927246094 Tokens per Sec: 11530.466621901065
Epoch Step: 15 / 138 Loss: 21.35658836364746 Tokens per Sec: 11807.103077192816
Epoch Step: 20 / 138 Loss: 15.779230117797852 Tokens per Sec: 11883.99052925845
Epoch Step: 25 / 138 Loss: 11.484735488891602 Tokens per Sec: 11551.708142462468
Epoch Step: 30 / 138 Loss: 13.365196228027344 Tokens per Sec: 12486.230277140454
Epoch Step: 35 / 138 Loss: 23.110097885131836 Tokens per Sec: 11899.731179248296
Epoch Step: 40 / 138 Loss: 16.563188552856445 Tokens per Sec: 11059.100407561154
Epoch Step: 45 / 138 Loss: 16.9807071685791 Tokens per Sec: 12536.638102899264
Epoch Step: 50 / 138 Loss: 15.257857322692871 Tokens per Sec: 12468.965754444895
Epoch Step: 55 / 138 Loss: 18.083242416381836 Tokens per Sec: 12248.546548559734
Epoch Step: 60 / 138 Loss: 23.59902000427246 Tokens per Sec: 12022.109611066624
Epoch Step: 65 / 138 Loss: 27.251237869262695 Tokens per Sec: 11984.590403348006
Epoch Step: 70 / 138 Loss: 67.31874084472656 Tokens per Sec: 11013.2580145475
Epoch Step: 75 / 138 Loss: 15.010839462280273 Tokens per Sec: 11975.202837784711
Epoch Step: 80 / 138 Loss: 13.085540771484375 Tokens per Sec: 11822.664841454987
Epoch Step: 85 / 138 Loss: 27.250844955444336 Tokens per Sec: 11171.350826569691
Epoch Step: 90 / 138 Loss: 18.868810653686523 Tokens per Sec: 12204.345766830875
Epoch Step: 95 / 138 Loss: 179.91781616210938 Tokens per Sec: 11825.8546530357
Epoch Step: 100 / 138 Loss: 22.43825340270996 Tokens per Sec: 12088.425132446382
Epoch Step: 105 / 138 Loss: 202.9419708251953 Tokens per Sec: 10601.940774192428
Epoch Step: 110 / 138 Loss: 20.103866577148438 Tokens per Sec: 11499.235584001774
Epoch Step: 115 / 138 Loss: 30.199325561523438 Tokens per Sec: 11843.784629532296
Epoch Step: 120 / 138 Loss: 16.714818954467773 Tokens per Sec: 11942.307810640508
Epoch Step: 125 / 138 Loss: 21.940357208251953 Tokens per Sec: 11639.964758976468
Epoch Step: 130 / 138 Loss: 24.44394874572754 Tokens per Sec: 11921.058623853985
Epoch Step: 135 / 138 Loss: 17.268901824951172 Tokens per Sec: 11431.161001593935
Epoch ended with duration 0:00:54.103682
Train perplexity: 1.5715362317564094
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.633830
Validation perplexity: 1.4312151012393428
Model saved best_on_validation!
Epoch 105 / 1000
Epoch Step: 5 / 138 Loss: 18.624797821044922 Tokens per Sec: 11605.753393819663
Epoch Step: 10 / 138 Loss: 20.905574798583984 Tokens per Sec: 12215.30719837717
Epoch Step: 15 / 138 Loss: 84.42210388183594 Tokens per Sec: 11396.82654098805
Epoch Step: 20 / 138 Loss: 15.51837158203125 Tokens per Sec: 12137.564744904736
Epoch Step: 25 / 138 Loss: 22.22332000732422 Tokens per Sec: 12019.991781232275
Epoch Step: 30 / 138 Loss: 25.338424682617188 Tokens per Sec: 11667.255838510493
Epoch Step: 35 / 138 Loss: 25.01508331298828 Tokens per Sec: 12045.4741290293
Epoch Step: 40 / 138 Loss: 11.294842720031738 Tokens per Sec: 11855.096388402784
Epoch Step: 45 / 138 Loss: 20.097360610961914 Tokens per Sec: 12244.125639530865
Epoch Step: 50 / 138 Loss: 18.27199363708496 Tokens per Sec: 11682.919914296142
Epoch Step: 55 / 138 Loss: 22.812498092651367 Tokens per Sec: 12410.051743489656
Epoch Step: 60 / 138 Loss: 15.532807350158691 Tokens per Sec: 11995.585546364147
Epoch Step: 65 / 138 Loss: 11.19965648651123 Tokens per Sec: 11977.063685664718
Epoch Step: 70 / 138 Loss: 24.120628356933594 Tokens per Sec: 11804.892603547054
Epoch Step: 75 / 138 Loss: 14.773069381713867 Tokens per Sec: 11958.75470602562
Epoch Step: 80 / 138 Loss: 26.69453239440918 Tokens per Sec: 11408.634694501157
Epoch Step: 85 / 138 Loss: 15.785587310791016 Tokens per Sec: 11783.116201397888
Epoch Step: 90 / 138 Loss: 26.937728881835938 Tokens per Sec: 12239.857711402019
Epoch Step: 95 / 138 Loss: 15.431622505187988 Tokens per Sec: 11848.16308435011
Epoch Step: 100 / 138 Loss: 13.313777923583984 Tokens per Sec: 11919.596327751084
Epoch Step: 105 / 138 Loss: 17.792644500732422 Tokens per Sec: 11641.375709964428
Epoch Step: 110 / 138 Loss: 16.84674072265625 Tokens per Sec: 11327.243186031636
Epoch Step: 115 / 138 Loss: 19.915346145629883 Tokens per Sec: 11210.446367142556
Epoch Step: 120 / 138 Loss: 21.637718200683594 Tokens per Sec: 10677.87231576293
Epoch Step: 125 / 138 Loss: 203.24085998535156 Tokens per Sec: 11260.229891448053
Epoch Step: 130 / 138 Loss: 18.96626091003418 Tokens per Sec: 11844.239538077474
Epoch Step: 135 / 138 Loss: 19.931833267211914 Tokens per Sec: 11727.252803858759
Epoch ended with duration 0:00:54.173308
Train perplexity: 1.499398171070534
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.732606
Validation perplexity: 1.8965370616395785
Model saved checkpoint!
Epoch 106 / 1000
Epoch Step: 5 / 138 Loss: 15.26970386505127 Tokens per Sec: 11276.47693929312
Epoch Step: 10 / 138 Loss: 26.72409439086914 Tokens per Sec: 12339.617371562352
Epoch Step: 15 / 138 Loss: 142.73825073242188 Tokens per Sec: 11266.728906152688
Epoch Step: 20 / 138 Loss: 14.171415328979492 Tokens per Sec: 12125.286280025535
Epoch Step: 25 / 138 Loss: 21.691495895385742 Tokens per Sec: 12442.170565585018
Epoch Step: 30 / 138 Loss: 22.762319564819336 Tokens per Sec: 12168.64650707008
Epoch Step: 35 / 138 Loss: 126.2605972290039 Tokens per Sec: 11651.684924850186
Epoch Step: 40 / 138 Loss: 17.15745735168457 Tokens per Sec: 11720.879432309386
Epoch Step: 45 / 138 Loss: 156.68057250976562 Tokens per Sec: 11480.764674571232
Epoch Step: 50 / 138 Loss: 13.533920288085938 Tokens per Sec: 11924.149646028625
Epoch Step: 55 / 138 Loss: 27.183216094970703 Tokens per Sec: 11698.09830501058
Epoch Step: 60 / 138 Loss: 15.498193740844727 Tokens per Sec: 11228.091371034036
Epoch Step: 65 / 138 Loss: 29.014726638793945 Tokens per Sec: 11617.737995974514
Epoch Step: 70 / 138 Loss: 19.908315658569336 Tokens per Sec: 12136.961597282114
Epoch Step: 75 / 138 Loss: 30.161672592163086 Tokens per Sec: 11861.283518651606
Epoch Step: 80 / 138 Loss: 11.80567741394043 Tokens per Sec: 12184.005312649222
Epoch Step: 85 / 138 Loss: 23.75227165222168 Tokens per Sec: 12220.140799977095
Epoch Step: 90 / 138 Loss: 15.372259140014648 Tokens per Sec: 11917.024964607575
Epoch Step: 95 / 138 Loss: 19.967931747436523 Tokens per Sec: 12543.582168274203
Epoch Step: 100 / 138 Loss: 20.020174026489258 Tokens per Sec: 11634.895845193858
Epoch Step: 105 / 138 Loss: 20.413972854614258 Tokens per Sec: 11933.220683980107
Epoch Step: 110 / 138 Loss: 23.353309631347656 Tokens per Sec: 11681.227702549651
Epoch Step: 115 / 138 Loss: 28.611413955688477 Tokens per Sec: 11941.616510414227
Epoch Step: 120 / 138 Loss: 35.91204071044922 Tokens per Sec: 11654.016749099836
Epoch Step: 125 / 138 Loss: 23.863004684448242 Tokens per Sec: 11100.468852526057
Epoch Step: 130 / 138 Loss: 23.93085479736328 Tokens per Sec: 10576.347110370813
Epoch Step: 135 / 138 Loss: 19.85125160217285 Tokens per Sec: 11727.50905350214
Epoch ended with duration 0:00:54.126126
Train perplexity: 1.5049934021312505
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.595094
Validation perplexity: 1.384090914307655
Model saved best_on_validation!
Epoch 107 / 1000
Epoch Step: 5 / 138 Loss: 15.822929382324219 Tokens per Sec: 11785.583620499932
Epoch Step: 10 / 138 Loss: 14.683844566345215 Tokens per Sec: 11834.355288677043
Epoch Step: 15 / 138 Loss: 17.834064483642578 Tokens per Sec: 12207.754893664964
Epoch Step: 20 / 138 Loss: 11.61125659942627 Tokens per Sec: 11921.977735674182
Epoch Step: 25 / 138 Loss: 16.458772659301758 Tokens per Sec: 12410.244723676617
Epoch Step: 30 / 138 Loss: 28.21404457092285 Tokens per Sec: 12041.736155750936
Epoch Step: 35 / 138 Loss: 22.799774169921875 Tokens per Sec: 11694.932988972807
Epoch Step: 40 / 138 Loss: 19.686344146728516 Tokens per Sec: 12133.708418796488
Epoch Step: 45 / 138 Loss: 18.622440338134766 Tokens per Sec: 11317.542132237046
Epoch Step: 50 / 138 Loss: 27.02619743347168 Tokens per Sec: 11925.849311529339
Epoch Step: 55 / 138 Loss: 15.969531059265137 Tokens per Sec: 11704.95992542035
Epoch Step: 60 / 138 Loss: 16.839445114135742 Tokens per Sec: 11997.718583534333
Epoch Step: 65 / 138 Loss: 22.7669677734375 Tokens per Sec: 11805.183596560868
Epoch Step: 70 / 138 Loss: 26.416683197021484 Tokens per Sec: 11575.272885166914
Epoch Step: 75 / 138 Loss: 26.251441955566406 Tokens per Sec: 11861.780784380797
Epoch Step: 80 / 138 Loss: 14.19118881225586 Tokens per Sec: 12249.891196251257
Epoch Step: 85 / 138 Loss: 23.798871994018555 Tokens per Sec: 12092.890972048157
Epoch Step: 90 / 138 Loss: 23.21872901916504 Tokens per Sec: 12175.941515256593
Epoch Step: 95 / 138 Loss: 17.760818481445312 Tokens per Sec: 11902.333984667757
Epoch Step: 100 / 138 Loss: 23.524858474731445 Tokens per Sec: 11820.487033245461
Epoch Step: 105 / 138 Loss: 16.829465866088867 Tokens per Sec: 11633.04753773807
Epoch Step: 110 / 138 Loss: 21.3942928314209 Tokens per Sec: 11523.301779283462
Epoch Step: 115 / 138 Loss: 22.399478912353516 Tokens per Sec: 11758.740802151517
Epoch Step: 120 / 138 Loss: 18.57135772705078 Tokens per Sec: 11095.073944223586
Epoch Step: 125 / 138 Loss: 23.60301971435547 Tokens per Sec: 10942.332525740729
Epoch Step: 130 / 138 Loss: 21.442806243896484 Tokens per Sec: 11622.92454828281
Epoch Step: 135 / 138 Loss: 17.817766189575195 Tokens per Sec: 11320.817812044039
Epoch ended with duration 0:00:54.113166
Train perplexity: 1.4512871629866038
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.671853
Validation perplexity: 1.5733546211515466
Epoch 108 / 1000
Epoch Step: 5 / 138 Loss: 15.664620399475098 Tokens per Sec: 11311.875070601733
Epoch Step: 10 / 138 Loss: 24.699190139770508 Tokens per Sec: 12293.340798504796
Epoch Step: 15 / 138 Loss: 13.02970027923584 Tokens per Sec: 12130.905220368248
Epoch Step: 20 / 138 Loss: 14.886672019958496 Tokens per Sec: 11729.519398631397
Epoch Step: 25 / 138 Loss: 26.610851287841797 Tokens per Sec: 12017.135196405588
Epoch Step: 30 / 138 Loss: 22.905498504638672 Tokens per Sec: 12039.232933045767
Epoch Step: 35 / 138 Loss: 14.926583290100098 Tokens per Sec: 11393.404829928375
Epoch Step: 40 / 138 Loss: 19.219329833984375 Tokens per Sec: 12092.166206160611
Epoch Step: 45 / 138 Loss: 28.37196922302246 Tokens per Sec: 11818.923875438666
Epoch Step: 50 / 138 Loss: 28.025310516357422 Tokens per Sec: 12028.703299937948
Epoch Step: 55 / 138 Loss: 29.87352180480957 Tokens per Sec: 10981.659517419228
Epoch Step: 60 / 138 Loss: 36.4686279296875 Tokens per Sec: 12140.683108691408
Epoch Step: 65 / 138 Loss: 20.07883644104004 Tokens per Sec: 11588.868726838578
Epoch Step: 70 / 138 Loss: 12.219012260437012 Tokens per Sec: 12501.938687332276
Epoch Step: 75 / 138 Loss: 14.397082328796387 Tokens per Sec: 11670.435931623513
Epoch Step: 80 / 138 Loss: 23.543197631835938 Tokens per Sec: 11553.908439273227
Epoch Step: 85 / 138 Loss: 21.970964431762695 Tokens per Sec: 11628.529914283752
Epoch Step: 90 / 138 Loss: 19.272619247436523 Tokens per Sec: 11495.341301248478
Epoch Step: 95 / 138 Loss: 15.630217552185059 Tokens per Sec: 12380.915674951344
Epoch Step: 100 / 138 Loss: 22.647218704223633 Tokens per Sec: 11850.582910621917
Epoch Step: 105 / 138 Loss: 17.5920352935791 Tokens per Sec: 11744.03391347354
Epoch Step: 110 / 138 Loss: 144.94464111328125 Tokens per Sec: 10728.015532174893
Epoch Step: 115 / 138 Loss: 17.14768409729004 Tokens per Sec: 11138.059136269683
Epoch Step: 120 / 138 Loss: 20.194623947143555 Tokens per Sec: 11349.548116042848
Epoch Step: 125 / 138 Loss: 25.570390701293945 Tokens per Sec: 11909.241809934187
Epoch Step: 130 / 138 Loss: 16.846332550048828 Tokens per Sec: 11769.299541449709
Epoch Step: 135 / 138 Loss: 13.557077407836914 Tokens per Sec: 10957.153302838802
Epoch ended with duration 0:00:54.466758
Train perplexity: 1.652990044714187
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.625406
Validation perplexity: 1.457212135148285
Epoch 109 / 1000
Epoch Step: 5 / 138 Loss: 14.75097942352295 Tokens per Sec: 12157.478712064196
Epoch Step: 10 / 138 Loss: 19.321401596069336 Tokens per Sec: 11876.31217406306
Epoch Step: 15 / 138 Loss: 17.72416114807129 Tokens per Sec: 12552.759544031844
Epoch Step: 20 / 138 Loss: 19.572267532348633 Tokens per Sec: 11941.152854995695
Epoch Step: 25 / 138 Loss: 159.99607849121094 Tokens per Sec: 11087.824863332462
Epoch Step: 30 / 138 Loss: 23.502111434936523 Tokens per Sec: 12209.113457028823
Epoch Step: 35 / 138 Loss: 28.502222061157227 Tokens per Sec: 11691.563057248952
Epoch Step: 40 / 138 Loss: 112.26325225830078 Tokens per Sec: 11687.434591538333
Epoch Step: 45 / 138 Loss: 20.221149444580078 Tokens per Sec: 11707.414241055016
Epoch Step: 50 / 138 Loss: 33.095672607421875 Tokens per Sec: 11544.35167982311
Epoch Step: 55 / 138 Loss: 23.411643981933594 Tokens per Sec: 11433.53835916669
Epoch Step: 60 / 138 Loss: 24.668493270874023 Tokens per Sec: 11806.400416238908
Epoch Step: 65 / 138 Loss: 19.1074161529541 Tokens per Sec: 11590.692096214118
Epoch Step: 70 / 138 Loss: 19.879743576049805 Tokens per Sec: 11989.893053378179
Epoch Step: 75 / 138 Loss: 25.523420333862305 Tokens per Sec: 11674.291156547111
Epoch Step: 80 / 138 Loss: 22.02179718017578 Tokens per Sec: 12141.939612504228
Epoch Step: 85 / 138 Loss: 9.946305274963379 Tokens per Sec: 12166.426983739217
Epoch Step: 90 / 138 Loss: 15.905010223388672 Tokens per Sec: 11291.055708656228
Epoch Step: 95 / 138 Loss: 28.788034439086914 Tokens per Sec: 11971.346233828517
Epoch Step: 100 / 138 Loss: 28.08667755126953 Tokens per Sec: 12073.393298293562
Epoch Step: 105 / 138 Loss: 22.581560134887695 Tokens per Sec: 11519.667351718806
Epoch Step: 110 / 138 Loss: 25.22127914428711 Tokens per Sec: 11585.59515706686
Epoch Step: 115 / 138 Loss: 129.83074951171875 Tokens per Sec: 11399.15287176364
Epoch Step: 120 / 138 Loss: 15.486420631408691 Tokens per Sec: 10527.742115056559
Epoch Step: 125 / 138 Loss: 18.614580154418945 Tokens per Sec: 11537.672160325148
Epoch Step: 130 / 138 Loss: 21.9454402923584 Tokens per Sec: 11346.23284363843
Epoch Step: 135 / 138 Loss: 15.092575073242188 Tokens per Sec: 11543.243789698001
Epoch ended with duration 0:00:54.488638
Train perplexity: 1.5564102667952473
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.666583
Validation perplexity: 1.5131388602888058
Epoch 110 / 1000
Epoch Step: 5 / 138 Loss: 28.152603149414062 Tokens per Sec: 11877.297814944764
Epoch Step: 10 / 138 Loss: 11.227076530456543 Tokens per Sec: 12067.042602108862
Epoch Step: 15 / 138 Loss: 19.863075256347656 Tokens per Sec: 11659.41831364841
Epoch Step: 20 / 138 Loss: 27.123035430908203 Tokens per Sec: 11951.67368899376
Epoch Step: 25 / 138 Loss: 23.62572479248047 Tokens per Sec: 11903.596357983566
Epoch Step: 30 / 138 Loss: 20.546701431274414 Tokens per Sec: 11709.263291128435
Epoch Step: 35 / 138 Loss: 26.435314178466797 Tokens per Sec: 11712.498995374774
Epoch Step: 40 / 138 Loss: 22.19390296936035 Tokens per Sec: 11641.835413211973
Epoch Step: 45 / 138 Loss: 19.749359130859375 Tokens per Sec: 11691.169664112595
Epoch Step: 50 / 138 Loss: 18.48194694519043 Tokens per Sec: 11978.85902174914
Epoch Step: 55 / 138 Loss: 134.87648010253906 Tokens per Sec: 11761.835311870962
Epoch Step: 60 / 138 Loss: 15.722245216369629 Tokens per Sec: 12063.054073517787
Epoch Step: 65 / 138 Loss: 15.934646606445312 Tokens per Sec: 12015.320234898798
Epoch Step: 70 / 138 Loss: 22.56143569946289 Tokens per Sec: 11503.9694182555
Epoch Step: 75 / 138 Loss: 21.631921768188477 Tokens per Sec: 12002.869875087781
Epoch Step: 80 / 138 Loss: 10.151926040649414 Tokens per Sec: 12461.804940504553
Epoch Step: 85 / 138 Loss: 16.138057708740234 Tokens per Sec: 12422.956744194933
Epoch Step: 90 / 138 Loss: 15.39560317993164 Tokens per Sec: 12073.770635295037
Epoch Step: 95 / 138 Loss: 32.78509521484375 Tokens per Sec: 12047.711439359433
Epoch Step: 100 / 138 Loss: 12.385406494140625 Tokens per Sec: 11884.638603565032
Epoch Step: 105 / 138 Loss: 14.042491912841797 Tokens per Sec: 10904.653086386252
Epoch Step: 110 / 138 Loss: 29.693092346191406 Tokens per Sec: 11746.313816189431
Epoch Step: 115 / 138 Loss: 23.12279510498047 Tokens per Sec: 11899.934265606467
Epoch Step: 120 / 138 Loss: 17.699827194213867 Tokens per Sec: 11543.165444483138
Epoch Step: 125 / 138 Loss: 17.94101905822754 Tokens per Sec: 10586.051046175558
Epoch Step: 130 / 138 Loss: 16.798681259155273 Tokens per Sec: 11411.860981902637
Epoch Step: 135 / 138 Loss: 19.860647201538086 Tokens per Sec: 11739.73829100257
Epoch ended with duration 0:00:54.099760
Train perplexity: 1.4825475693241696
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , , , , , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.666174
Validation perplexity: 1.531189893709689
Model saved checkpoint!
Epoch 111 / 1000
Epoch Step: 5 / 138 Loss: 17.4996337890625 Tokens per Sec: 11672.526548535967
Epoch Step: 10 / 138 Loss: 65.30043029785156 Tokens per Sec: 11299.59975148906
Epoch Step: 15 / 138 Loss: 27.02364158630371 Tokens per Sec: 11758.82635867431
Epoch Step: 20 / 138 Loss: 17.183002471923828 Tokens per Sec: 11863.336753201393
Epoch Step: 25 / 138 Loss: 12.935965538024902 Tokens per Sec: 12184.460196654445
Epoch Step: 30 / 138 Loss: 22.563142776489258 Tokens per Sec: 11885.616189386159
Epoch Step: 35 / 138 Loss: 19.246700286865234 Tokens per Sec: 11848.894840326717
Epoch Step: 40 / 138 Loss: 177.71856689453125 Tokens per Sec: 11856.022450354305
Epoch Step: 45 / 138 Loss: 14.375865936279297 Tokens per Sec: 11544.590734343114
Epoch Step: 50 / 138 Loss: 36.08174514770508 Tokens per Sec: 12241.55389136938
Epoch Step: 55 / 138 Loss: 13.026759147644043 Tokens per Sec: 12088.268125619077
Epoch Step: 60 / 138 Loss: 13.546364784240723 Tokens per Sec: 12278.048279055676
Epoch Step: 65 / 138 Loss: 25.87375259399414 Tokens per Sec: 12096.724022901419
Epoch Step: 70 / 138 Loss: 26.158092498779297 Tokens per Sec: 12257.893478033277
Epoch Step: 75 / 138 Loss: 29.388874053955078 Tokens per Sec: 11590.724525317317
Epoch Step: 80 / 138 Loss: 16.042512893676758 Tokens per Sec: 12029.026826988415
Epoch Step: 85 / 138 Loss: 35.17058563232422 Tokens per Sec: 11642.351537045462
Epoch Step: 90 / 138 Loss: 33.54081344604492 Tokens per Sec: 11931.18341876381
Epoch Step: 95 / 138 Loss: 18.53874969482422 Tokens per Sec: 11328.78651803722
Epoch Step: 100 / 138 Loss: 22.627525329589844 Tokens per Sec: 11552.020807557403
Epoch Step: 105 / 138 Loss: 17.00670623779297 Tokens per Sec: 11260.214737222397
Epoch Step: 110 / 138 Loss: 23.415695190429688 Tokens per Sec: 10716.908477875848
Epoch Step: 115 / 138 Loss: 22.051137924194336 Tokens per Sec: 11417.231835790813
Epoch Step: 120 / 138 Loss: 20.059711456298828 Tokens per Sec: 11648.637758059424
Epoch Step: 125 / 138 Loss: 20.651073455810547 Tokens per Sec: 11289.30910704545
Epoch Step: 130 / 138 Loss: 13.785665512084961 Tokens per Sec: 11618.260329375003
Epoch Step: 135 / 138 Loss: 18.15009880065918 Tokens per Sec: 11644.126007986068
Epoch ended with duration 0:00:54.376815
Train perplexity: 1.6187935880365087
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.703749
Validation perplexity: 1.920557714858433
Epoch 112 / 1000
Epoch Step: 5 / 138 Loss: 12.48275375366211 Tokens per Sec: 12237.111140642508
Epoch Step: 10 / 138 Loss: 13.047805786132812 Tokens per Sec: 11742.716573299112
Epoch Step: 15 / 138 Loss: 26.34611701965332 Tokens per Sec: 11213.830192504885
Epoch Step: 20 / 138 Loss: 17.59925651550293 Tokens per Sec: 11547.276257099586
Epoch Step: 25 / 138 Loss: 171.3683319091797 Tokens per Sec: 11595.462609871904
Epoch Step: 30 / 138 Loss: 24.64331817626953 Tokens per Sec: 11869.26405926882
Epoch Step: 35 / 138 Loss: 32.94398498535156 Tokens per Sec: 12145.710033363952
Epoch Step: 40 / 138 Loss: 104.04515075683594 Tokens per Sec: 11971.997877341784
Epoch Step: 45 / 138 Loss: 111.3905258178711 Tokens per Sec: 11622.34119204088
Epoch Step: 50 / 138 Loss: 92.42938995361328 Tokens per Sec: 11588.393287266646
Epoch Step: 55 / 138 Loss: 19.801700592041016 Tokens per Sec: 12006.481155152494
Epoch Step: 60 / 138 Loss: 24.15570831298828 Tokens per Sec: 12029.575270386433
Epoch Step: 65 / 138 Loss: 20.139602661132812 Tokens per Sec: 12174.043457579684
Epoch Step: 70 / 138 Loss: 153.1376190185547 Tokens per Sec: 11888.107906703972
Epoch Step: 75 / 138 Loss: 86.70565795898438 Tokens per Sec: 11612.318110588005
Epoch Step: 80 / 138 Loss: 26.125288009643555 Tokens per Sec: 12271.061158389704
Epoch Step: 85 / 138 Loss: 28.247095108032227 Tokens per Sec: 11871.491874906838
Epoch Step: 90 / 138 Loss: 26.788312911987305 Tokens per Sec: 12112.49056963128
Epoch Step: 95 / 138 Loss: 21.68755531311035 Tokens per Sec: 11259.356676368758
Epoch Step: 100 / 138 Loss: 23.200529098510742 Tokens per Sec: 11463.722092828066
Epoch Step: 105 / 138 Loss: 19.216041564941406 Tokens per Sec: 11407.879672910713
Epoch Step: 110 / 138 Loss: 19.75469207763672 Tokens per Sec: 11282.92890822
Epoch Step: 115 / 138 Loss: 18.291915893554688 Tokens per Sec: 11606.042509640642
Epoch Step: 120 / 138 Loss: 15.935050964355469 Tokens per Sec: 11339.082252559854
Epoch Step: 125 / 138 Loss: 20.85588264465332 Tokens per Sec: 11834.05129875328
Epoch Step: 130 / 138 Loss: 15.074087142944336 Tokens per Sec: 11535.105964431028
Epoch Step: 135 / 138 Loss: 19.911104202270508 Tokens per Sec: 11380.525010030118
Epoch ended with duration 0:00:54.403598
Train perplexity: 1.5871228551162218
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , , , , , , , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.590121
Validation perplexity: 1.3599307965698624
Model saved best_on_validation!
Epoch 113 / 1000
Epoch Step: 5 / 138 Loss: 115.62786102294922 Tokens per Sec: 10846.850487853644
Epoch Step: 10 / 138 Loss: 22.019289016723633 Tokens per Sec: 11990.76987291392
Epoch Step: 15 / 138 Loss: 21.877113342285156 Tokens per Sec: 12097.96249032427
Epoch Step: 20 / 138 Loss: 22.76500129699707 Tokens per Sec: 11375.895072457788
Epoch Step: 25 / 138 Loss: 18.879714965820312 Tokens per Sec: 11307.496201525079
Epoch Step: 30 / 138 Loss: 26.946683883666992 Tokens per Sec: 11355.317326652745
Epoch Step: 35 / 138 Loss: 23.53716278076172 Tokens per Sec: 11737.207511558518
Epoch Step: 40 / 138 Loss: 13.42320442199707 Tokens per Sec: 12770.637574172624
Epoch Step: 45 / 138 Loss: 19.397953033447266 Tokens per Sec: 11973.713368782364
Epoch Step: 50 / 138 Loss: 21.57171058654785 Tokens per Sec: 12081.747047612813
Epoch Step: 55 / 138 Loss: 20.880102157592773 Tokens per Sec: 12123.388757634839
Epoch Step: 60 / 138 Loss: 93.79408264160156 Tokens per Sec: 11428.435285741609
Epoch Step: 65 / 138 Loss: 17.414560317993164 Tokens per Sec: 12243.206988841133
Epoch Step: 70 / 138 Loss: 26.15534782409668 Tokens per Sec: 11962.176685630773
Epoch Step: 75 / 138 Loss: 23.55157470703125 Tokens per Sec: 12406.423972954368
Epoch Step: 80 / 138 Loss: 24.967811584472656 Tokens per Sec: 11647.000834079452
Epoch Step: 85 / 138 Loss: 12.82945442199707 Tokens per Sec: 12016.283815419129
Epoch Step: 90 / 138 Loss: 22.115463256835938 Tokens per Sec: 11806.235448575935
Epoch Step: 95 / 138 Loss: 27.713777542114258 Tokens per Sec: 11835.711204002771
Epoch Step: 100 / 138 Loss: 28.64444351196289 Tokens per Sec: 12352.49082533936
Epoch Step: 105 / 138 Loss: 16.789419174194336 Tokens per Sec: 11922.807243258938
Epoch Step: 110 / 138 Loss: 19.38934326171875 Tokens per Sec: 11648.766603669535
Epoch Step: 115 / 138 Loss: 19.95696449279785 Tokens per Sec: 11551.50664644421
Epoch Step: 120 / 138 Loss: 16.986299514770508 Tokens per Sec: 11562.49565245196
Epoch Step: 125 / 138 Loss: 12.039968490600586 Tokens per Sec: 11927.791810398368
Epoch Step: 130 / 138 Loss: 16.721298217773438 Tokens per Sec: 11588.275152460856
Epoch Step: 135 / 138 Loss: 18.297983169555664 Tokens per Sec: 10290.874326156436
Epoch ended with duration 0:00:54.200715
Train perplexity: 1.5321207276308437
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , , , , , , , , ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.702403
Validation perplexity: 1.8023139053362167
Epoch 114 / 1000
Epoch Step: 5 / 138 Loss: 22.5489501953125 Tokens per Sec: 12017.167803839538
Epoch Step: 10 / 138 Loss: 76.95565795898438 Tokens per Sec: 11912.23674603333
Epoch Step: 15 / 138 Loss: 16.97307586669922 Tokens per Sec: 12315.365747904953
Epoch Step: 20 / 138 Loss: 24.579452514648438 Tokens per Sec: 12138.306091351726
Epoch Step: 25 / 138 Loss: 21.475940704345703 Tokens per Sec: 11796.253288673091
Epoch Step: 30 / 138 Loss: 11.198902130126953 Tokens per Sec: 12065.28384625024
Epoch Step: 35 / 138 Loss: 13.870827674865723 Tokens per Sec: 12022.672758174658
Epoch Step: 40 / 138 Loss: 20.130197525024414 Tokens per Sec: 11549.636546686239
Epoch Step: 45 / 138 Loss: 15.988269805908203 Tokens per Sec: 12032.458918150018
Epoch Step: 50 / 138 Loss: 15.658447265625 Tokens per Sec: 11390.960394881611
Epoch Step: 55 / 138 Loss: 21.504770278930664 Tokens per Sec: 11556.440728207212
Epoch Step: 60 / 138 Loss: 26.767534255981445 Tokens per Sec: 11383.664755016933
Epoch Step: 65 / 138 Loss: 30.31705665588379 Tokens per Sec: 11550.386649719228
Epoch Step: 70 / 138 Loss: 33.573123931884766 Tokens per Sec: 12003.148013819593
Epoch Step: 75 / 138 Loss: 32.94479751586914 Tokens per Sec: 11661.766352823379
Epoch Step: 80 / 138 Loss: 25.6307315826416 Tokens per Sec: 11697.675862989727
Epoch Step: 85 / 138 Loss: 18.487150192260742 Tokens per Sec: 12528.770543905242
Epoch Step: 90 / 138 Loss: 13.0775785446167 Tokens per Sec: 12280.586889559392
Epoch Step: 95 / 138 Loss: 170.57044982910156 Tokens per Sec: 11346.659617358233
Epoch Step: 100 / 138 Loss: 11.326323509216309 Tokens per Sec: 11780.749440907524
Epoch Step: 105 / 138 Loss: 18.19544792175293 Tokens per Sec: 10914.718877274683
Epoch Step: 110 / 138 Loss: 19.26637840270996 Tokens per Sec: 11569.828597958885
Epoch Step: 115 / 138 Loss: 22.67135238647461 Tokens per Sec: 11777.324778917968
Epoch Step: 120 / 138 Loss: 14.515518188476562 Tokens per Sec: 11578.251709877628
Epoch Step: 125 / 138 Loss: 19.936660766601562 Tokens per Sec: 11313.772387267449
Epoch Step: 130 / 138 Loss: 17.70905303955078 Tokens per Sec: 11554.188475919758
Epoch Step: 135 / 138 Loss: 18.612579345703125 Tokens per Sec: 11406.562408167909
Epoch ended with duration 0:00:54.323887
Train perplexity: 1.6198584479847573
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.701598
Validation perplexity: 1.8328868809527217
Epoch 115 / 1000
Epoch Step: 5 / 138 Loss: 119.00065612792969 Tokens per Sec: 11703.722031874406
Epoch Step: 10 / 138 Loss: 23.098094940185547 Tokens per Sec: 11806.789293736601
Epoch Step: 15 / 138 Loss: 25.491674423217773 Tokens per Sec: 12297.476400597954
Epoch Step: 20 / 138 Loss: 22.27179527282715 Tokens per Sec: 11022.662926513342
Epoch Step: 25 / 138 Loss: 14.89309310913086 Tokens per Sec: 11583.31239371515
Epoch Step: 30 / 138 Loss: 15.534562110900879 Tokens per Sec: 11879.313488248017
Epoch Step: 35 / 138 Loss: 20.992828369140625 Tokens per Sec: 11334.35974770266
Epoch Step: 40 / 138 Loss: 21.826231002807617 Tokens per Sec: 11673.978620162492
Epoch Step: 45 / 138 Loss: 16.30215072631836 Tokens per Sec: 11893.652819682831
Epoch Step: 50 / 138 Loss: 14.861339569091797 Tokens per Sec: 12436.561424996353
Epoch Step: 55 / 138 Loss: 13.788277626037598 Tokens per Sec: 12104.956605268422
Epoch Step: 60 / 138 Loss: 24.19182586669922 Tokens per Sec: 12061.341797809384
Epoch Step: 65 / 138 Loss: 21.514122009277344 Tokens per Sec: 12005.680215541099
Epoch Step: 70 / 138 Loss: 16.51654052734375 Tokens per Sec: 11976.452968880829
Epoch Step: 75 / 138 Loss: 23.398164749145508 Tokens per Sec: 12281.300163570226
Epoch Step: 80 / 138 Loss: 11.737722396850586 Tokens per Sec: 11705.540255362297
Epoch Step: 85 / 138 Loss: 16.315608978271484 Tokens per Sec: 12470.74367614132
Epoch Step: 90 / 138 Loss: 13.613981246948242 Tokens per Sec: 11946.7490319241
Epoch Step: 95 / 138 Loss: 12.541608810424805 Tokens per Sec: 11657.759572395928
Epoch Step: 100 / 138 Loss: 21.053525924682617 Tokens per Sec: 11871.993097609145
Epoch Step: 105 / 138 Loss: 14.306612968444824 Tokens per Sec: 11644.540196769067
Epoch Step: 110 / 138 Loss: 74.40140533447266 Tokens per Sec: 10474.25853124646
Epoch Step: 115 / 138 Loss: 19.607280731201172 Tokens per Sec: 11834.327121871223
Epoch Step: 120 / 138 Loss: 19.18925666809082 Tokens per Sec: 11398.600746296444
Epoch Step: 125 / 138 Loss: 16.75330924987793 Tokens per Sec: 11282.488945770952
Epoch Step: 130 / 138 Loss: 12.629583358764648 Tokens per Sec: 11820.353500802163
Epoch Step: 135 / 138 Loss: 18.479427337646484 Tokens per Sec: 11841.910988792517
Epoch ended with duration 0:00:54.114487
Train perplexity: 1.4444153064557157
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.661105
Validation perplexity: 1.6408515600130127
Model saved checkpoint!
Epoch 116 / 1000
Epoch Step: 5 / 138 Loss: 19.721994400024414 Tokens per Sec: 12012.872680649618
Epoch Step: 10 / 138 Loss: 11.608177185058594 Tokens per Sec: 12337.013229621502
Epoch Step: 15 / 138 Loss: 25.251277923583984 Tokens per Sec: 12382.61047599672
Epoch Step: 20 / 138 Loss: 71.7098159790039 Tokens per Sec: 11584.29532985151
Epoch Step: 25 / 138 Loss: 186.9132537841797 Tokens per Sec: 12069.614665252182
Epoch Step: 30 / 138 Loss: 13.027688026428223 Tokens per Sec: 11507.923247861809
Epoch Step: 35 / 138 Loss: 18.490192413330078 Tokens per Sec: 12139.552205206175
Epoch Step: 40 / 138 Loss: 13.878149032592773 Tokens per Sec: 11670.08408743902
Epoch Step: 45 / 138 Loss: 18.10087013244629 Tokens per Sec: 11915.534799803083
Epoch Step: 50 / 138 Loss: 24.611591339111328 Tokens per Sec: 11656.773084725488
Epoch Step: 55 / 138 Loss: 14.231518745422363 Tokens per Sec: 11464.416373861275
Epoch Step: 60 / 138 Loss: 23.142608642578125 Tokens per Sec: 12045.170064869748
Epoch Step: 65 / 138 Loss: 19.19750213623047 Tokens per Sec: 11763.225615782236
Epoch Step: 70 / 138 Loss: 12.346867561340332 Tokens per Sec: 11856.76054851583
Epoch Step: 75 / 138 Loss: 12.822209358215332 Tokens per Sec: 11925.321800947495
Epoch Step: 80 / 138 Loss: 134.46900939941406 Tokens per Sec: 11904.511337636888
Epoch Step: 85 / 138 Loss: 128.61276245117188 Tokens per Sec: 12186.875435114875
Epoch Step: 90 / 138 Loss: 27.880844116210938 Tokens per Sec: 12233.880260210799
Epoch Step: 95 / 138 Loss: 11.140314102172852 Tokens per Sec: 12208.566198941038
Epoch Step: 100 / 138 Loss: 192.9167938232422 Tokens per Sec: 10955.734719111471
Epoch Step: 105 / 138 Loss: 24.730867385864258 Tokens per Sec: 11518.031439811795
Epoch Step: 110 / 138 Loss: 32.14060974121094 Tokens per Sec: 10718.107117615311
Epoch Step: 115 / 138 Loss: 21.87275505065918 Tokens per Sec: 10905.154434056134
Epoch Step: 120 / 138 Loss: 24.1715087890625 Tokens per Sec: 11204.776645001923
Epoch Step: 125 / 138 Loss: 15.068560600280762 Tokens per Sec: 11498.021632994873
Epoch Step: 130 / 138 Loss: 19.434934616088867 Tokens per Sec: 11484.641629048094
Epoch Step: 135 / 138 Loss: 15.081250190734863 Tokens per Sec: 11567.280313471127
Epoch ended with duration 0:00:54.410991
Train perplexity: 1.5410349387051887
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.623118
Validation perplexity: 1.5278283018795333
Epoch 117 / 1000
Epoch Step: 5 / 138 Loss: 17.372051239013672 Tokens per Sec: 11254.262604143185
Epoch Step: 10 / 138 Loss: 20.477283477783203 Tokens per Sec: 11386.824212435482
Epoch Step: 15 / 138 Loss: 22.085763931274414 Tokens per Sec: 11563.405591224313
Epoch Step: 20 / 138 Loss: 49.57099151611328 Tokens per Sec: 12414.566811976867
Epoch Step: 25 / 138 Loss: 21.24583625793457 Tokens per Sec: 11616.072659271887
Epoch Step: 30 / 138 Loss: 23.66070556640625 Tokens per Sec: 12057.426809569748
Epoch Step: 35 / 138 Loss: 12.572296142578125 Tokens per Sec: 12023.360362259817
Epoch Step: 40 / 138 Loss: 193.5366668701172 Tokens per Sec: 11862.231229542038
Epoch Step: 45 / 138 Loss: 20.749414443969727 Tokens per Sec: 12404.692465558306
Epoch Step: 50 / 138 Loss: 16.06589126586914 Tokens per Sec: 12095.008662520238
Epoch Step: 55 / 138 Loss: 21.27775001525879 Tokens per Sec: 12094.939734832042
Epoch Step: 60 / 138 Loss: 10.814846992492676 Tokens per Sec: 12278.467133407423
Epoch Step: 65 / 138 Loss: 24.53547477722168 Tokens per Sec: 11696.139183792471
Epoch Step: 70 / 138 Loss: 14.599435806274414 Tokens per Sec: 12013.598194223956
Epoch Step: 75 / 138 Loss: 69.49977111816406 Tokens per Sec: 11619.054415493863
Epoch Step: 80 / 138 Loss: 17.737388610839844 Tokens per Sec: 12188.791540717746
Epoch Step: 85 / 138 Loss: 27.709495544433594 Tokens per Sec: 11516.13575632067
Epoch Step: 90 / 138 Loss: 12.821733474731445 Tokens per Sec: 11792.73670363814
Epoch Step: 95 / 138 Loss: 29.65792465209961 Tokens per Sec: 11665.420254573462
Epoch Step: 100 / 138 Loss: 9.99699878692627 Tokens per Sec: 12082.227079851711
Epoch Step: 105 / 138 Loss: 21.537490844726562 Tokens per Sec: 10729.75899309111
Epoch Step: 110 / 138 Loss: 14.038766860961914 Tokens per Sec: 11725.641514970228
Epoch Step: 115 / 138 Loss: 17.754011154174805 Tokens per Sec: 12071.944561140568
Epoch Step: 120 / 138 Loss: 15.45967960357666 Tokens per Sec: 11590.832381084927
Epoch Step: 125 / 138 Loss: 16.242420196533203 Tokens per Sec: 11511.354112180292
Epoch Step: 130 / 138 Loss: 13.539742469787598 Tokens per Sec: 11260.5379809556
Epoch Step: 135 / 138 Loss: 22.109834671020508 Tokens per Sec: 11782.270181082327
Epoch ended with duration 0:00:54.168996
Train perplexity: 1.4726680025718055
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , , , , , , , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.591974
Validation perplexity: 1.3571482616745727
Model saved best_on_validation!
Epoch 118 / 1000
Epoch Step: 5 / 138 Loss: 20.831666946411133 Tokens per Sec: 11882.61806237445
Epoch Step: 10 / 138 Loss: 15.903826713562012 Tokens per Sec: 11775.963068930105
Epoch Step: 15 / 138 Loss: 20.697036743164062 Tokens per Sec: 12031.761159048703
Epoch Step: 20 / 138 Loss: 208.31544494628906 Tokens per Sec: 11737.71886612879
Epoch Step: 25 / 138 Loss: 27.194103240966797 Tokens per Sec: 11851.055192154472
Epoch Step: 30 / 138 Loss: 17.376192092895508 Tokens per Sec: 11985.56173740046
Epoch Step: 35 / 138 Loss: 26.193708419799805 Tokens per Sec: 11561.307497163943
Epoch Step: 40 / 138 Loss: 13.743206024169922 Tokens per Sec: 11675.17664684887
Epoch Step: 45 / 138 Loss: 21.265369415283203 Tokens per Sec: 11654.895300410497
Epoch Step: 50 / 138 Loss: 12.064085006713867 Tokens per Sec: 11865.283394263699
Epoch Step: 55 / 138 Loss: 18.288480758666992 Tokens per Sec: 12702.07349886037
Epoch Step: 60 / 138 Loss: 23.376741409301758 Tokens per Sec: 11877.374283008832
Epoch Step: 65 / 138 Loss: 19.3121395111084 Tokens per Sec: 11919.105984512134
Epoch Step: 70 / 138 Loss: 19.873567581176758 Tokens per Sec: 12091.301348588831
Epoch Step: 75 / 138 Loss: 13.966150283813477 Tokens per Sec: 11516.342124017223
Epoch Step: 80 / 138 Loss: 160.96759033203125 Tokens per Sec: 11336.004661665362
Epoch Step: 85 / 138 Loss: 30.347007751464844 Tokens per Sec: 12115.9320852495
Epoch Step: 90 / 138 Loss: 133.41537475585938 Tokens per Sec: 11272.111204557232
Epoch Step: 95 / 138 Loss: 54.278076171875 Tokens per Sec: 11574.203528599333
Epoch Step: 100 / 138 Loss: 90.98318481445312 Tokens per Sec: 11779.873129439262
Epoch Step: 105 / 138 Loss: 157.68594360351562 Tokens per Sec: 11179.877958892112
Epoch Step: 110 / 138 Loss: 20.39142608642578 Tokens per Sec: 12216.182905663643
Epoch Step: 115 / 138 Loss: 19.766849517822266 Tokens per Sec: 11541.637135795636
Epoch Step: 120 / 138 Loss: 16.935810089111328 Tokens per Sec: 11524.216497877629
Epoch Step: 125 / 138 Loss: 24.62346839904785 Tokens per Sec: 11492.548688982011
Epoch Step: 130 / 138 Loss: 17.86227798461914 Tokens per Sec: 11726.256142512157
Epoch Step: 135 / 138 Loss: 18.667938232421875 Tokens per Sec: 10364.795763343183
Epoch ended with duration 0:00:54.455946
Train perplexity: 1.5843011246435288
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . VAR_4 , , , , , , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.630527
Validation perplexity: 1.4883001375628315
Epoch 119 / 1000
Epoch Step: 5 / 138 Loss: 10.173344612121582 Tokens per Sec: 11519.751847752763
Epoch Step: 10 / 138 Loss: 9.428070068359375 Tokens per Sec: 11866.13035245332
Epoch Step: 15 / 138 Loss: 22.181791305541992 Tokens per Sec: 11611.00230595876
Epoch Step: 20 / 138 Loss: 23.4129638671875 Tokens per Sec: 11467.916014807191
Epoch Step: 25 / 138 Loss: 16.022144317626953 Tokens per Sec: 11492.670615028213
Epoch Step: 30 / 138 Loss: 22.53607177734375 Tokens per Sec: 12010.857859083499
Epoch Step: 35 / 138 Loss: 21.86292839050293 Tokens per Sec: 12083.50836660587
Epoch Step: 40 / 138 Loss: 19.675676345825195 Tokens per Sec: 12382.52639558934
Epoch Step: 45 / 138 Loss: 18.256088256835938 Tokens per Sec: 11741.499657145856
Epoch Step: 50 / 138 Loss: 21.64609718322754 Tokens per Sec: 12048.337928404922
Epoch Step: 55 / 138 Loss: 18.31987953186035 Tokens per Sec: 11827.58005514664
Epoch Step: 60 / 138 Loss: 79.13292694091797 Tokens per Sec: 11236.928380421656
Epoch Step: 65 / 138 Loss: 16.022167205810547 Tokens per Sec: 12652.562215675178
Epoch Step: 70 / 138 Loss: 24.391136169433594 Tokens per Sec: 11390.04448354693
Epoch Step: 75 / 138 Loss: 24.918249130249023 Tokens per Sec: 12114.40971143611
Epoch Step: 80 / 138 Loss: 13.225232124328613 Tokens per Sec: 11974.651916979077
Epoch Step: 85 / 138 Loss: 13.191997528076172 Tokens per Sec: 11991.40553527906
Epoch Step: 90 / 138 Loss: 27.49867820739746 Tokens per Sec: 11471.856766539126
Epoch Step: 95 / 138 Loss: 12.78953742980957 Tokens per Sec: 11864.506127336212
Epoch Step: 100 / 138 Loss: 135.69268798828125 Tokens per Sec: 11418.237512040152
Epoch Step: 105 / 138 Loss: 17.132043838500977 Tokens per Sec: 11587.014833776848
Epoch Step: 110 / 138 Loss: 24.76264762878418 Tokens per Sec: 10774.02087550896
Epoch Step: 115 / 138 Loss: 57.414215087890625 Tokens per Sec: 11476.798455443248
Epoch Step: 120 / 138 Loss: 13.981557846069336 Tokens per Sec: 11748.886253333878
Epoch Step: 125 / 138 Loss: 24.307952880859375 Tokens per Sec: 11965.222984834196
Epoch Step: 130 / 138 Loss: 20.30181312561035 Tokens per Sec: 11730.98360990813
Epoch Step: 135 / 138 Loss: 19.359853744506836 Tokens per Sec: 11228.725310790102
Epoch ended with duration 0:00:54.410940
Train perplexity: 1.5622242191367344
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.688846
Validation perplexity: 1.7127189504494431
Epoch 120 / 1000
Epoch Step: 5 / 138 Loss: 63.4034423828125 Tokens per Sec: 11478.976491383019
Epoch Step: 10 / 138 Loss: 12.810563087463379 Tokens per Sec: 11423.43276435984
Epoch Step: 15 / 138 Loss: 46.68849182128906 Tokens per Sec: 11582.509980614972
Epoch Step: 20 / 138 Loss: 23.215030670166016 Tokens per Sec: 11960.553983309468
Epoch Step: 25 / 138 Loss: 21.348329544067383 Tokens per Sec: 12413.005000088668
Epoch Step: 30 / 138 Loss: 18.0284423828125 Tokens per Sec: 12054.09913751821
Epoch Step: 35 / 138 Loss: 9.259686470031738 Tokens per Sec: 12054.460149672503
Epoch Step: 40 / 138 Loss: 144.5015869140625 Tokens per Sec: 11456.56791366813
Epoch Step: 45 / 138 Loss: 15.445755004882812 Tokens per Sec: 12132.831994260872
Epoch Step: 50 / 138 Loss: 163.67355346679688 Tokens per Sec: 11796.816760340043
Epoch Step: 55 / 138 Loss: 19.474245071411133 Tokens per Sec: 11840.183131372525
Epoch Step: 60 / 138 Loss: 14.875101089477539 Tokens per Sec: 12154.539019622827
Epoch Step: 65 / 138 Loss: 22.41741943359375 Tokens per Sec: 11824.271786519092
Epoch Step: 70 / 138 Loss: 14.911933898925781 Tokens per Sec: 11442.52324563093
Epoch Step: 75 / 138 Loss: 17.22902488708496 Tokens per Sec: 11648.910996099487
Epoch Step: 80 / 138 Loss: 16.36265754699707 Tokens per Sec: 12267.48030305574
Epoch Step: 85 / 138 Loss: 14.815290451049805 Tokens per Sec: 12006.196666182825
Epoch Step: 90 / 138 Loss: 22.691518783569336 Tokens per Sec: 11667.711215900285
Epoch Step: 95 / 138 Loss: 24.51877784729004 Tokens per Sec: 12314.803788261548
Epoch Step: 100 / 138 Loss: 13.161274909973145 Tokens per Sec: 12715.311104735738
Epoch Step: 105 / 138 Loss: 17.852224349975586 Tokens per Sec: 11038.239650164454
Epoch Step: 110 / 138 Loss: 15.438153266906738 Tokens per Sec: 11174.31593117099
Epoch Step: 115 / 138 Loss: 12.962632179260254 Tokens per Sec: 10748.320250132387
Epoch Step: 120 / 138 Loss: 17.25996971130371 Tokens per Sec: 11384.228132273962
Epoch Step: 125 / 138 Loss: 21.323589324951172 Tokens per Sec: 11701.919730373176
Epoch Step: 130 / 138 Loss: 17.73771858215332 Tokens per Sec: 11741.157115813628
Epoch Step: 135 / 138 Loss: 11.860794067382812 Tokens per Sec: 11422.779772330226
Epoch ended with duration 0:00:54.214134
Train perplexity: 1.4717939495522578
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.628706
Validation perplexity: 1.501300386448264
Model saved checkpoint!
Epoch 121 / 1000
Epoch Step: 5 / 138 Loss: 13.515167236328125 Tokens per Sec: 11569.075395271166
Epoch Step: 10 / 138 Loss: 13.585437774658203 Tokens per Sec: 12021.51606027597
Epoch Step: 15 / 138 Loss: 92.5849380493164 Tokens per Sec: 11494.51434525118
Epoch Step: 20 / 138 Loss: 16.678112030029297 Tokens per Sec: 12013.02253551914
Epoch Step: 25 / 138 Loss: 19.72730255126953 Tokens per Sec: 12043.371145992805
Epoch Step: 30 / 138 Loss: 33.51211166381836 Tokens per Sec: 11756.503048355113
Epoch Step: 35 / 138 Loss: 26.253080368041992 Tokens per Sec: 11638.305888696184
Epoch Step: 40 / 138 Loss: 19.478940963745117 Tokens per Sec: 12044.312587677292
Epoch Step: 45 / 138 Loss: 26.537796020507812 Tokens per Sec: 11901.18696524079
Epoch Step: 50 / 138 Loss: 22.658708572387695 Tokens per Sec: 12144.203629487574
Epoch Step: 55 / 138 Loss: 11.335297584533691 Tokens per Sec: 11994.81613885874
Epoch Step: 60 / 138 Loss: 24.24901580810547 Tokens per Sec: 11998.910105652618
Epoch Step: 65 / 138 Loss: 27.13545036315918 Tokens per Sec: 11635.63197340143
Epoch Step: 70 / 138 Loss: 14.065957069396973 Tokens per Sec: 12146.943077522743
Epoch Step: 75 / 138 Loss: 16.125110626220703 Tokens per Sec: 11850.577017971447
Epoch Step: 80 / 138 Loss: 16.768152236938477 Tokens per Sec: 11910.577341905773
Epoch Step: 85 / 138 Loss: 16.73126983642578 Tokens per Sec: 11835.287965435205
Epoch Step: 90 / 138 Loss: 16.677730560302734 Tokens per Sec: 12642.490436041395
Epoch Step: 95 / 138 Loss: 14.38239860534668 Tokens per Sec: 11737.020207663383
Epoch Step: 100 / 138 Loss: 10.493343353271484 Tokens per Sec: 12103.921229467718
Epoch Step: 105 / 138 Loss: 18.99315071105957 Tokens per Sec: 11614.569836764358
Epoch Step: 110 / 138 Loss: 16.52206802368164 Tokens per Sec: 10678.433827951612
Epoch Step: 115 / 138 Loss: 17.485675811767578 Tokens per Sec: 11405.26433682517
Epoch Step: 120 / 138 Loss: 23.36086082458496 Tokens per Sec: 12023.219193628618
Epoch Step: 125 / 138 Loss: 16.91156005859375 Tokens per Sec: 11460.777868329948
Epoch Step: 130 / 138 Loss: 16.638761520385742 Tokens per Sec: 11486.485809491558
Epoch Step: 135 / 138 Loss: 19.25749969482422 Tokens per Sec: 11675.312185204248
Epoch ended with duration 0:00:53.990188
Train perplexity: 1.3997105172499762
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.663118
Validation perplexity: 1.667908128369977
Epoch 122 / 1000
Epoch Step: 5 / 138 Loss: 24.823068618774414 Tokens per Sec: 11850.993716387928
Epoch Step: 10 / 138 Loss: 21.842594146728516 Tokens per Sec: 11475.999926700777
Epoch Step: 15 / 138 Loss: 24.455341339111328 Tokens per Sec: 11867.531706267364
Epoch Step: 20 / 138 Loss: 18.37400245666504 Tokens per Sec: 12357.578068980634
Epoch Step: 25 / 138 Loss: 24.408510208129883 Tokens per Sec: 11656.201063106904
Epoch Step: 30 / 138 Loss: 153.0509490966797 Tokens per Sec: 11053.367622501122
Epoch Step: 35 / 138 Loss: 97.06582641601562 Tokens per Sec: 12248.265287636645
Epoch Step: 40 / 138 Loss: 18.15913963317871 Tokens per Sec: 11256.526503947283
Epoch Step: 45 / 138 Loss: 70.11003112792969 Tokens per Sec: 11451.159004313768
Epoch Step: 50 / 138 Loss: 19.749103546142578 Tokens per Sec: 11894.446498314632
Epoch Step: 55 / 138 Loss: 17.383499145507812 Tokens per Sec: 11599.503571325777
Epoch Step: 60 / 138 Loss: 29.100297927856445 Tokens per Sec: 12057.036164467223
Epoch Step: 65 / 138 Loss: 13.785664558410645 Tokens per Sec: 11996.241346815634
Epoch Step: 70 / 138 Loss: 22.378467559814453 Tokens per Sec: 11872.275821356567
Epoch Step: 75 / 138 Loss: 16.709880828857422 Tokens per Sec: 11742.751552563315
Epoch Step: 80 / 138 Loss: 28.51804542541504 Tokens per Sec: 12265.184253008374
Epoch Step: 85 / 138 Loss: 23.017024993896484 Tokens per Sec: 12269.378162996525
Epoch Step: 90 / 138 Loss: 17.989810943603516 Tokens per Sec: 11641.362966181594
Epoch Step: 95 / 138 Loss: 14.815666198730469 Tokens per Sec: 11833.521972918994
Epoch Step: 100 / 138 Loss: 18.27348518371582 Tokens per Sec: 11480.7928861488
Epoch Step: 105 / 138 Loss: 16.85236930847168 Tokens per Sec: 11213.612199441168
Epoch Step: 110 / 138 Loss: 23.149118423461914 Tokens per Sec: 11536.27672560325
Epoch Step: 115 / 138 Loss: 21.768566131591797 Tokens per Sec: 11458.617902746248
Epoch Step: 120 / 138 Loss: 15.224925994873047 Tokens per Sec: 11044.961750153749
Epoch Step: 125 / 138 Loss: 12.153911590576172 Tokens per Sec: 11796.258542908328
Epoch Step: 130 / 138 Loss: 18.54743766784668 Tokens per Sec: 11643.928610879531
Epoch Step: 135 / 138 Loss: 11.71120548248291 Tokens per Sec: 11814.506184761127
Epoch ended with duration 0:00:54.419834
Train perplexity: 1.5644994409448638
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.607260
Validation perplexity: 1.4220690979738557
Epoch 123 / 1000
Epoch Step: 5 / 138 Loss: 24.001785278320312 Tokens per Sec: 11713.957086009152
Epoch Step: 10 / 138 Loss: 20.213882446289062 Tokens per Sec: 11948.659020581232
Epoch Step: 15 / 138 Loss: 18.17328453063965 Tokens per Sec: 11832.672681977148
Epoch Step: 20 / 138 Loss: 23.095428466796875 Tokens per Sec: 11663.021231438513
Epoch Step: 25 / 138 Loss: 22.160066604614258 Tokens per Sec: 11715.745276985584
Epoch Step: 30 / 138 Loss: 15.840349197387695 Tokens per Sec: 11719.13709372196
Epoch Step: 35 / 138 Loss: 15.581689834594727 Tokens per Sec: 12255.896597385006
Epoch Step: 40 / 138 Loss: 17.658361434936523 Tokens per Sec: 11930.06683696401
Epoch Step: 45 / 138 Loss: 11.943289756774902 Tokens per Sec: 11752.750917412235
Epoch Step: 50 / 138 Loss: 13.294023513793945 Tokens per Sec: 12618.684386649604
Epoch Step: 55 / 138 Loss: 21.292312622070312 Tokens per Sec: 11468.587334112139
Epoch Step: 60 / 138 Loss: 24.486310958862305 Tokens per Sec: 11946.123391924064
Epoch Step: 65 / 138 Loss: 120.19487762451172 Tokens per Sec: 11789.412901336576
Epoch Step: 70 / 138 Loss: 19.811687469482422 Tokens per Sec: 12042.008291435208
Epoch Step: 75 / 138 Loss: 26.064340591430664 Tokens per Sec: 11497.759142166791
Epoch Step: 80 / 138 Loss: 19.904827117919922 Tokens per Sec: 12382.681204270159
Epoch Step: 85 / 138 Loss: 10.772799491882324 Tokens per Sec: 12141.369776999893
Epoch Step: 90 / 138 Loss: 11.154706954956055 Tokens per Sec: 12597.73860100471
Epoch Step: 95 / 138 Loss: 13.224137306213379 Tokens per Sec: 11724.093723554512
Epoch Step: 100 / 138 Loss: 85.2195816040039 Tokens per Sec: 11816.097907451962
Epoch Step: 105 / 138 Loss: 27.492694854736328 Tokens per Sec: 11278.312329636072
Epoch Step: 110 / 138 Loss: 17.504253387451172 Tokens per Sec: 11734.497920281221
Epoch Step: 115 / 138 Loss: 14.623876571655273 Tokens per Sec: 10913.769703474447
Epoch Step: 120 / 138 Loss: 16.296817779541016 Tokens per Sec: 11554.60065168242
Epoch Step: 125 / 138 Loss: 16.925355911254883 Tokens per Sec: 11416.874327907459
Epoch Step: 130 / 138 Loss: 17.576616287231445 Tokens per Sec: 11929.716650524924
Epoch Step: 135 / 138 Loss: 12.090893745422363 Tokens per Sec: 11327.348724895404
Epoch ended with duration 0:00:54.025208
Train perplexity: 1.410176514777194
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.632377
Validation perplexity: 1.471812070650277
Epoch 124 / 1000
Epoch Step: 5 / 138 Loss: 91.60885620117188 Tokens per Sec: 11570.1474656031
Epoch Step: 10 / 138 Loss: 161.96083068847656 Tokens per Sec: 11459.357683129561
Epoch Step: 15 / 138 Loss: 12.535999298095703 Tokens per Sec: 11645.685754101602
Epoch Step: 20 / 138 Loss: 15.83035659790039 Tokens per Sec: 11517.967454736628
Epoch Step: 25 / 138 Loss: 17.526460647583008 Tokens per Sec: 11909.24584542603
Epoch Step: 30 / 138 Loss: 27.659420013427734 Tokens per Sec: 11889.95958213464
Epoch Step: 35 / 138 Loss: 20.56382179260254 Tokens per Sec: 12006.408816407844
Epoch Step: 40 / 138 Loss: 22.579557418823242 Tokens per Sec: 11968.734349278275
Epoch Step: 45 / 138 Loss: 146.19549560546875 Tokens per Sec: 11417.231412177875
Epoch Step: 50 / 138 Loss: 26.260278701782227 Tokens per Sec: 11936.711042999137
Epoch Step: 55 / 138 Loss: 21.309171676635742 Tokens per Sec: 11940.913590321137
Epoch Step: 60 / 138 Loss: 9.708002090454102 Tokens per Sec: 12314.531050575106
Epoch Step: 65 / 138 Loss: 25.67369842529297 Tokens per Sec: 11440.637244252815
Epoch Step: 70 / 138 Loss: 20.965662002563477 Tokens per Sec: 11815.60176844985
Epoch Step: 75 / 138 Loss: 13.69301700592041 Tokens per Sec: 11921.299741936693
Epoch Step: 80 / 138 Loss: 12.496084213256836 Tokens per Sec: 11635.574397615135
Epoch Step: 85 / 138 Loss: 16.174362182617188 Tokens per Sec: 11915.696937579776
Epoch Step: 90 / 138 Loss: 16.49884796142578 Tokens per Sec: 11881.38554050028
Epoch Step: 95 / 138 Loss: 19.035186767578125 Tokens per Sec: 11849.133901446914
Epoch Step: 100 / 138 Loss: 24.54950523376465 Tokens per Sec: 11797.42751535243
Epoch Step: 105 / 138 Loss: 20.31792640686035 Tokens per Sec: 11514.262632540596
Epoch Step: 110 / 138 Loss: 15.894088745117188 Tokens per Sec: 11806.458274595554
Epoch Step: 115 / 138 Loss: 14.409171104431152 Tokens per Sec: 11532.89987122366
Epoch Step: 120 / 138 Loss: 20.559659957885742 Tokens per Sec: 11317.06467799269
Epoch Step: 125 / 138 Loss: 19.417551040649414 Tokens per Sec: 11034.274326222418
Epoch Step: 130 / 138 Loss: 23.398977279663086 Tokens per Sec: 11816.626108869837
Epoch Step: 135 / 138 Loss: 20.441513061523438 Tokens per Sec: 11581.26073590128
Epoch ended with duration 0:00:54.435724
Train perplexity: 1.5404499635190314
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.629519
Validation perplexity: 1.4575202792325375
Epoch 125 / 1000
Epoch Step: 5 / 138 Loss: 14.312202453613281 Tokens per Sec: 11231.345869588104
Epoch Step: 10 / 138 Loss: 18.671817779541016 Tokens per Sec: 11943.35899654967
Epoch Step: 15 / 138 Loss: 18.790435791015625 Tokens per Sec: 12098.34670030179
Epoch Step: 20 / 138 Loss: 60.38616180419922 Tokens per Sec: 11669.167558627938
Epoch Step: 25 / 138 Loss: 24.140819549560547 Tokens per Sec: 11432.637842391036
Epoch Step: 30 / 138 Loss: 20.99742317199707 Tokens per Sec: 12361.842140930195
Epoch Step: 35 / 138 Loss: 18.155824661254883 Tokens per Sec: 11724.887708114216
Epoch Step: 40 / 138 Loss: 21.587759017944336 Tokens per Sec: 12352.0791467225
Epoch Step: 45 / 138 Loss: 17.97177505493164 Tokens per Sec: 11345.173060610421
Epoch Step: 50 / 138 Loss: 18.814489364624023 Tokens per Sec: 12127.26242979115
Epoch Step: 55 / 138 Loss: 13.582924842834473 Tokens per Sec: 11610.876874351427
Epoch Step: 60 / 138 Loss: 15.253793716430664 Tokens per Sec: 11975.251724597396
Epoch Step: 65 / 138 Loss: 21.858402252197266 Tokens per Sec: 12550.039493108752
Epoch Step: 70 / 138 Loss: 11.613188743591309 Tokens per Sec: 12140.97550153485
Epoch Step: 75 / 138 Loss: 21.058923721313477 Tokens per Sec: 11869.409053316736
Epoch Step: 80 / 138 Loss: 20.770998001098633 Tokens per Sec: 11534.099199102176
Epoch Step: 85 / 138 Loss: 13.036641120910645 Tokens per Sec: 11931.95912728603
Epoch Step: 90 / 138 Loss: 24.099170684814453 Tokens per Sec: 11764.431433048327
Epoch Step: 95 / 138 Loss: 19.321430206298828 Tokens per Sec: 12264.211293619408
Epoch Step: 100 / 138 Loss: 65.02249145507812 Tokens per Sec: 11387.84931923325
Epoch Step: 105 / 138 Loss: 23.646514892578125 Tokens per Sec: 11696.505550941254
Epoch Step: 110 / 138 Loss: 21.973499298095703 Tokens per Sec: 11635.903427203319
Epoch Step: 115 / 138 Loss: 12.198285102844238 Tokens per Sec: 11763.68977786305
Epoch Step: 120 / 138 Loss: 14.5346097946167 Tokens per Sec: 10945.125081177372
Epoch Step: 125 / 138 Loss: 14.137052536010742 Tokens per Sec: 11118.275430593441
Epoch Step: 130 / 138 Loss: 17.58601188659668 Tokens per Sec: 11553.6163903377
Epoch Step: 135 / 138 Loss: 18.762773513793945 Tokens per Sec: 11004.445989214628
Epoch ended with duration 0:00:54.366557
Train perplexity: 1.4441312569457387
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.702728
Validation perplexity: 1.6541840084648833
Model saved checkpoint!
Epoch 126 / 1000
Epoch Step: 5 / 138 Loss: 13.956037521362305 Tokens per Sec: 12356.293861629038
Epoch Step: 10 / 138 Loss: 21.250328063964844 Tokens per Sec: 11911.099446570031
Epoch Step: 15 / 138 Loss: 20.308547973632812 Tokens per Sec: 11722.51087363052
Epoch Step: 20 / 138 Loss: 14.600769996643066 Tokens per Sec: 12048.413959744186
Epoch Step: 25 / 138 Loss: 13.883914947509766 Tokens per Sec: 11979.228742317573
Epoch Step: 30 / 138 Loss: 17.886333465576172 Tokens per Sec: 12331.041381866313
Epoch Step: 35 / 138 Loss: 23.5870361328125 Tokens per Sec: 11905.639086079944
Epoch Step: 40 / 138 Loss: 11.60237979888916 Tokens per Sec: 12333.828835440476
Epoch Step: 45 / 138 Loss: 11.813386917114258 Tokens per Sec: 11453.172360917848
Epoch Step: 50 / 138 Loss: 13.815485000610352 Tokens per Sec: 11858.504544174702
Epoch Step: 55 / 138 Loss: 22.197265625 Tokens per Sec: 12164.178330099
Epoch Step: 60 / 138 Loss: 15.413265228271484 Tokens per Sec: 11959.251573835918
Epoch Step: 65 / 138 Loss: 18.307720184326172 Tokens per Sec: 11908.167636715072
Epoch Step: 70 / 138 Loss: 10.880058288574219 Tokens per Sec: 12002.168422065119
Epoch Step: 75 / 138 Loss: 12.007210731506348 Tokens per Sec: 12033.475154352522
Epoch Step: 80 / 138 Loss: 16.926240921020508 Tokens per Sec: 12494.926954303195
Epoch Step: 85 / 138 Loss: 153.91668701171875 Tokens per Sec: 11367.078041029938
Epoch Step: 90 / 138 Loss: 17.501737594604492 Tokens per Sec: 11148.451487679893
Epoch Step: 95 / 138 Loss: 16.46903419494629 Tokens per Sec: 11736.250295344005
Epoch Step: 100 / 138 Loss: 18.21370506286621 Tokens per Sec: 11524.996723462657
Epoch Step: 105 / 138 Loss: 17.2993106842041 Tokens per Sec: 11765.917289550916
Epoch Step: 110 / 138 Loss: 17.821352005004883 Tokens per Sec: 10677.319050317778
Epoch Step: 115 / 138 Loss: 112.11864471435547 Tokens per Sec: 11232.071600352483
Epoch Step: 120 / 138 Loss: 17.96738052368164 Tokens per Sec: 11377.818601187555
Epoch Step: 125 / 138 Loss: 16.016189575195312 Tokens per Sec: 11980.835304147726
Epoch Step: 130 / 138 Loss: 18.177959442138672 Tokens per Sec: 11851.73148991236
Epoch Step: 135 / 138 Loss: 18.221275329589844 Tokens per Sec: 10618.244934843215
Epoch ended with duration 0:00:54.180887
Train perplexity: 1.455703762934593
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.617391
Validation perplexity: 1.4081575077277144
Epoch 127 / 1000
Epoch Step: 5 / 138 Loss: 13.431061744689941 Tokens per Sec: 11974.78470025436
Epoch Step: 10 / 138 Loss: 11.335190773010254 Tokens per Sec: 11743.436194806369
Epoch Step: 15 / 138 Loss: 11.043423652648926 Tokens per Sec: 11946.458457744386
Epoch Step: 20 / 138 Loss: 23.105525970458984 Tokens per Sec: 12366.791709059578
Epoch Step: 25 / 138 Loss: 25.689359664916992 Tokens per Sec: 11319.687171536343
Epoch Step: 30 / 138 Loss: 13.222764015197754 Tokens per Sec: 11932.596096637546
Epoch Step: 35 / 138 Loss: 14.056753158569336 Tokens per Sec: 11702.900784342764
Epoch Step: 40 / 138 Loss: 17.685665130615234 Tokens per Sec: 11056.242528039835
Epoch Step: 45 / 138 Loss: 20.38930320739746 Tokens per Sec: 11688.623454669681
Epoch Step: 50 / 138 Loss: 17.378250122070312 Tokens per Sec: 11956.529962612542
Epoch Step: 55 / 138 Loss: 18.991535186767578 Tokens per Sec: 11974.295830939369
Epoch Step: 60 / 138 Loss: 16.85490608215332 Tokens per Sec: 11689.050745017574
Epoch Step: 65 / 138 Loss: 23.091272354125977 Tokens per Sec: 12095.092514344118
Epoch Step: 70 / 138 Loss: 13.86975383758545 Tokens per Sec: 12140.271548604394
Epoch Step: 75 / 138 Loss: 16.034873962402344 Tokens per Sec: 12108.018489909913
Epoch Step: 80 / 138 Loss: 15.153056144714355 Tokens per Sec: 12332.761452413888
Epoch Step: 85 / 138 Loss: 13.5245943069458 Tokens per Sec: 12135.82901734756
Epoch Step: 90 / 138 Loss: 12.186284065246582 Tokens per Sec: 12364.548183680801
Epoch Step: 95 / 138 Loss: 15.259932518005371 Tokens per Sec: 11859.605019908184
Epoch Step: 100 / 138 Loss: 20.229381561279297 Tokens per Sec: 11832.187123022253
Epoch Step: 105 / 138 Loss: 20.549217224121094 Tokens per Sec: 11479.048409127616
Epoch Step: 110 / 138 Loss: 13.70488166809082 Tokens per Sec: 11525.482297435052
Epoch Step: 115 / 138 Loss: 16.890649795532227 Tokens per Sec: 10967.281475667303
Epoch Step: 120 / 138 Loss: 15.34543228149414 Tokens per Sec: 11498.393625707618
Epoch Step: 125 / 138 Loss: 100.27848815917969 Tokens per Sec: 11511.766042107765
Epoch Step: 130 / 138 Loss: 16.9249267578125 Tokens per Sec: 11783.382597488247
Epoch Step: 135 / 138 Loss: 12.203901290893555 Tokens per Sec: 11569.737213750795
Epoch ended with duration 0:00:54.081028
Train perplexity: 1.3821584021413973
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.631293
Validation perplexity: 1.4065764809152912
Epoch 128 / 1000
Epoch Step: 5 / 138 Loss: 20.471012115478516 Tokens per Sec: 11882.909145442474
Epoch Step: 10 / 138 Loss: 17.790691375732422 Tokens per Sec: 12075.430072670857
Epoch Step: 15 / 138 Loss: 19.437835693359375 Tokens per Sec: 11864.517356730612
Epoch Step: 20 / 138 Loss: 20.632118225097656 Tokens per Sec: 11889.91305142468
Epoch Step: 25 / 138 Loss: 19.15830421447754 Tokens per Sec: 12122.593646570642
Epoch Step: 30 / 138 Loss: 8.302542686462402 Tokens per Sec: 11499.813953796882
Epoch Step: 35 / 138 Loss: 22.018848419189453 Tokens per Sec: 11651.748048473097
Epoch Step: 40 / 138 Loss: 16.7478084564209 Tokens per Sec: 11550.32427490366
Epoch Step: 45 / 138 Loss: 21.549243927001953 Tokens per Sec: 12058.788527711002
Epoch Step: 50 / 138 Loss: 18.57134246826172 Tokens per Sec: 11191.854767554152
Epoch Step: 55 / 138 Loss: 15.484481811523438 Tokens per Sec: 12200.771722029962
Epoch Step: 60 / 138 Loss: 14.863914489746094 Tokens per Sec: 12303.244909481675
Epoch Step: 65 / 138 Loss: 18.560131072998047 Tokens per Sec: 12319.621810886001
Epoch Step: 70 / 138 Loss: 13.561458587646484 Tokens per Sec: 12084.988892118883
Epoch Step: 75 / 138 Loss: 23.916654586791992 Tokens per Sec: 11558.717731564791
Epoch Step: 80 / 138 Loss: 23.369295120239258 Tokens per Sec: 11873.010132918658
Epoch Step: 85 / 138 Loss: 19.267728805541992 Tokens per Sec: 12050.049926014182
Epoch Step: 90 / 138 Loss: 117.28880310058594 Tokens per Sec: 11453.358118658149
Epoch Step: 95 / 138 Loss: 17.904298782348633 Tokens per Sec: 12358.940799438444
Epoch Step: 100 / 138 Loss: 12.999922752380371 Tokens per Sec: 11852.341461768616
Epoch Step: 105 / 138 Loss: 23.805580139160156 Tokens per Sec: 10962.934237751157
Epoch Step: 110 / 138 Loss: 23.496427536010742 Tokens per Sec: 11581.526590701289
Epoch Step: 115 / 138 Loss: 19.765527725219727 Tokens per Sec: 11422.309830881024
Epoch Step: 120 / 138 Loss: 17.587810516357422 Tokens per Sec: 11699.620341136888
Epoch Step: 125 / 138 Loss: 14.226207733154297 Tokens per Sec: 11590.935316430556
Epoch Step: 130 / 138 Loss: 15.820096015930176 Tokens per Sec: 11375.04935963129
Epoch Step: 135 / 138 Loss: 19.655609130859375 Tokens per Sec: 11383.523089791357
Epoch ended with duration 0:00:54.192982
Train perplexity: 1.3938998377135636
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.592175
Validation perplexity: 1.3209753143026297
Model saved best_on_validation!
Epoch 129 / 1000
Epoch Step: 5 / 138 Loss: 15.718999862670898 Tokens per Sec: 12107.588201187527
Epoch Step: 10 / 138 Loss: 13.636269569396973 Tokens per Sec: 11390.719630797465
Epoch Step: 15 / 138 Loss: 10.115753173828125 Tokens per Sec: 12589.63912454011
Epoch Step: 20 / 138 Loss: 11.406911849975586 Tokens per Sec: 12309.305746937662
Epoch Step: 25 / 138 Loss: 23.91042137145996 Tokens per Sec: 11859.64813445877
Epoch Step: 30 / 138 Loss: 24.9261474609375 Tokens per Sec: 11359.880024215
Epoch Step: 35 / 138 Loss: 21.371414184570312 Tokens per Sec: 12071.71685932395
Epoch Step: 40 / 138 Loss: 21.361005783081055 Tokens per Sec: 10819.326377531077
Epoch Step: 45 / 138 Loss: 14.306007385253906 Tokens per Sec: 12330.59593190897
Epoch Step: 50 / 138 Loss: 17.22374153137207 Tokens per Sec: 11512.036013041616
Epoch Step: 55 / 138 Loss: 25.428329467773438 Tokens per Sec: 11976.919272773515
Epoch Step: 60 / 138 Loss: 95.85018920898438 Tokens per Sec: 11810.475845312914
Epoch Step: 65 / 138 Loss: 16.856704711914062 Tokens per Sec: 12131.714407344138
Epoch Step: 70 / 138 Loss: 18.229368209838867 Tokens per Sec: 12002.389142513404
Epoch Step: 75 / 138 Loss: 122.18022155761719 Tokens per Sec: 10644.765487086155
Epoch Step: 80 / 138 Loss: 16.591150283813477 Tokens per Sec: 11719.348689219487
Epoch Step: 85 / 138 Loss: 20.76882553100586 Tokens per Sec: 11161.340109103334
Epoch Step: 90 / 138 Loss: 21.66512680053711 Tokens per Sec: 12751.353440601586
Epoch Step: 95 / 138 Loss: 17.320938110351562 Tokens per Sec: 11777.468967224084
Epoch Step: 100 / 138 Loss: 11.861310005187988 Tokens per Sec: 11926.619076686642
Epoch Step: 105 / 138 Loss: 13.601049423217773 Tokens per Sec: 11666.108490094972
Epoch Step: 110 / 138 Loss: 17.746522903442383 Tokens per Sec: 11700.097266991364
Epoch Step: 115 / 138 Loss: 17.838308334350586 Tokens per Sec: 11298.475153499485
Epoch Step: 120 / 138 Loss: 103.0090103149414 Tokens per Sec: 10893.296993220267
Epoch Step: 125 / 138 Loss: 18.109304428100586 Tokens per Sec: 11507.170189231956
Epoch Step: 130 / 138 Loss: 14.687874794006348 Tokens per Sec: 10398.25796202219
Epoch Step: 135 / 138 Loss: 12.799629211425781 Tokens per Sec: 11828.169049864911
Epoch ended with duration 0:00:54.573160
Train perplexity: 1.5493317762433019
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.675068
Validation perplexity: 1.6990655611781247
Epoch 130 / 1000
Epoch Step: 5 / 138 Loss: 16.108251571655273 Tokens per Sec: 12122.567208635073
Epoch Step: 10 / 138 Loss: 14.023357391357422 Tokens per Sec: 11756.96209766897
Epoch Step: 15 / 138 Loss: 15.77748966217041 Tokens per Sec: 12213.623905187957
Epoch Step: 20 / 138 Loss: 19.515697479248047 Tokens per Sec: 12305.498203128405
Epoch Step: 25 / 138 Loss: 19.86930274963379 Tokens per Sec: 11802.370510865258
Epoch Step: 30 / 138 Loss: 20.598289489746094 Tokens per Sec: 11631.82907420411
Epoch Step: 35 / 138 Loss: 16.46172523498535 Tokens per Sec: 11559.73032040301
Epoch Step: 40 / 138 Loss: 24.714590072631836 Tokens per Sec: 11553.05609707817
Epoch Step: 45 / 138 Loss: 100.9091567993164 Tokens per Sec: 11941.98116417979
Epoch Step: 50 / 138 Loss: 16.696516036987305 Tokens per Sec: 12254.34180740935
Epoch Step: 55 / 138 Loss: 21.442909240722656 Tokens per Sec: 12203.028805827707
Epoch Step: 60 / 138 Loss: 10.856735229492188 Tokens per Sec: 11624.809947151114
Epoch Step: 65 / 138 Loss: 70.64445495605469 Tokens per Sec: 10802.358722417905
Epoch Step: 70 / 138 Loss: 18.370750427246094 Tokens per Sec: 11426.29609580949
Epoch Step: 75 / 138 Loss: 29.53590202331543 Tokens per Sec: 11089.956034193052
Epoch Step: 80 / 138 Loss: 19.820449829101562 Tokens per Sec: 12142.783062715294
Epoch Step: 85 / 138 Loss: 14.851034164428711 Tokens per Sec: 12270.911209107222
Epoch Step: 90 / 138 Loss: 27.035017013549805 Tokens per Sec: 12141.062700807375
Epoch Step: 95 / 138 Loss: 125.74148559570312 Tokens per Sec: 12328.555984450852
Epoch Step: 100 / 138 Loss: 104.97364807128906 Tokens per Sec: 11956.41271348849
Epoch Step: 105 / 138 Loss: 14.568489074707031 Tokens per Sec: 10783.539140262
Epoch Step: 110 / 138 Loss: 133.4127960205078 Tokens per Sec: 11674.480548433403
Epoch Step: 115 / 138 Loss: 21.09446144104004 Tokens per Sec: 11305.04753214169
Epoch Step: 120 / 138 Loss: 18.568832397460938 Tokens per Sec: 11394.558239286947
Epoch Step: 125 / 138 Loss: 17.11745834350586 Tokens per Sec: 11742.555735502743
Epoch Step: 130 / 138 Loss: 16.74127197265625 Tokens per Sec: 11560.938871462839
Epoch Step: 135 / 138 Loss: 12.333115577697754 Tokens per Sec: 11881.462678159194
Epoch ended with duration 0:00:54.206643
Train perplexity: 1.509567450515957
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.640105
Validation perplexity: 1.4818834156781608
Model saved checkpoint!
Epoch 131 / 1000
Epoch Step: 5 / 138 Loss: 20.4224910736084 Tokens per Sec: 11602.035839234803
Epoch Step: 10 / 138 Loss: 25.275842666625977 Tokens per Sec: 11092.246499082898
Epoch Step: 15 / 138 Loss: 14.590787887573242 Tokens per Sec: 11743.370308887505
Epoch Step: 20 / 138 Loss: 70.86693572998047 Tokens per Sec: 11722.391067729763
Epoch Step: 25 / 138 Loss: 84.69806671142578 Tokens per Sec: 11234.974559766502
Epoch Step: 30 / 138 Loss: 12.181063652038574 Tokens per Sec: 11965.861236090352
Epoch Step: 35 / 138 Loss: 147.99343872070312 Tokens per Sec: 11704.973982906806
Epoch Step: 40 / 138 Loss: 23.284889221191406 Tokens per Sec: 11618.324694656885
Epoch Step: 45 / 138 Loss: 15.171082496643066 Tokens per Sec: 11568.717586729832
Epoch Step: 50 / 138 Loss: 17.299501419067383 Tokens per Sec: 11687.261261358673
Epoch Step: 55 / 138 Loss: 11.187224388122559 Tokens per Sec: 12374.729823454521
Epoch Step: 60 / 138 Loss: 14.762689590454102 Tokens per Sec: 12227.448766050486
Epoch Step: 65 / 138 Loss: 17.1442928314209 Tokens per Sec: 11693.538981065341
Epoch Step: 70 / 138 Loss: 18.783021926879883 Tokens per Sec: 12331.103330268052
Epoch Step: 75 / 138 Loss: 18.50421142578125 Tokens per Sec: 12423.118013405854
Epoch Step: 80 / 138 Loss: 16.520143508911133 Tokens per Sec: 12316.873636300423
Epoch Step: 85 / 138 Loss: 95.3792495727539 Tokens per Sec: 11992.31273420645
Epoch Step: 90 / 138 Loss: 19.219226837158203 Tokens per Sec: 12354.997453480111
Epoch Step: 95 / 138 Loss: 184.11447143554688 Tokens per Sec: 11650.08139817743
Epoch Step: 100 / 138 Loss: 110.68341827392578 Tokens per Sec: 11572.95778085842
Epoch Step: 105 / 138 Loss: 22.652732849121094 Tokens per Sec: 11365.190582405436
Epoch Step: 110 / 138 Loss: 21.19231414794922 Tokens per Sec: 11778.779082249435
Epoch Step: 115 / 138 Loss: 13.191986083984375 Tokens per Sec: 10974.777306383161
Epoch Step: 120 / 138 Loss: 23.208253860473633 Tokens per Sec: 11564.211861603919
Epoch Step: 125 / 138 Loss: 18.77820587158203 Tokens per Sec: 10953.353600591436
Epoch Step: 130 / 138 Loss: 17.259849548339844 Tokens per Sec: 11504.817269464607
Epoch Step: 135 / 138 Loss: 66.41558074951172 Tokens per Sec: 11353.814873293033
Epoch ended with duration 0:00:54.388752
Train perplexity: 1.5704043231409222
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.698595
Validation perplexity: 1.6864135637890183
Epoch 132 / 1000
Epoch Step: 5 / 138 Loss: 20.17707061767578 Tokens per Sec: 10866.69310883647
Epoch Step: 10 / 138 Loss: 19.731109619140625 Tokens per Sec: 11869.035948041817
Epoch Step: 15 / 138 Loss: 18.843788146972656 Tokens per Sec: 11286.053687192561
Epoch Step: 20 / 138 Loss: 19.91153335571289 Tokens per Sec: 11528.095180968443
Epoch Step: 25 / 138 Loss: 12.282719612121582 Tokens per Sec: 12292.223142589975
Epoch Step: 30 / 138 Loss: 9.145513534545898 Tokens per Sec: 12387.297783133141
Epoch Step: 35 / 138 Loss: 15.847527503967285 Tokens per Sec: 12241.666412357146
Epoch Step: 40 / 138 Loss: 19.61644172668457 Tokens per Sec: 11735.008024793477
Epoch Step: 45 / 138 Loss: 20.15968132019043 Tokens per Sec: 12051.86796797753
Epoch Step: 50 / 138 Loss: 10.903707504272461 Tokens per Sec: 11963.803879032908
Epoch Step: 55 / 138 Loss: 13.149311065673828 Tokens per Sec: 12346.034252825859
Epoch Step: 60 / 138 Loss: 18.00125503540039 Tokens per Sec: 11536.879486885473
Epoch Step: 65 / 138 Loss: 46.239410400390625 Tokens per Sec: 11819.53948084225
Epoch Step: 70 / 138 Loss: 14.979827880859375 Tokens per Sec: 12085.19159833453
Epoch Step: 75 / 138 Loss: 12.166426658630371 Tokens per Sec: 12070.568303940263
Epoch Step: 80 / 138 Loss: 19.182588577270508 Tokens per Sec: 11946.509489877011
Epoch Step: 85 / 138 Loss: 13.270947456359863 Tokens per Sec: 11787.481833174874
Epoch Step: 90 / 138 Loss: 21.122726440429688 Tokens per Sec: 11812.200009013972
Epoch Step: 95 / 138 Loss: 20.591596603393555 Tokens per Sec: 12388.398739841306
Epoch Step: 100 / 138 Loss: 21.885229110717773 Tokens per Sec: 12498.714293928631
Epoch Step: 105 / 138 Loss: 15.55544376373291 Tokens per Sec: 11228.16278731651
Epoch Step: 110 / 138 Loss: 17.920515060424805 Tokens per Sec: 11223.522117283494
Epoch Step: 115 / 138 Loss: 17.55691909790039 Tokens per Sec: 11835.8744977144
Epoch Step: 120 / 138 Loss: 118.23743438720703 Tokens per Sec: 11469.047285001941
Epoch Step: 125 / 138 Loss: 22.366607666015625 Tokens per Sec: 10679.734660481097
Epoch Step: 130 / 138 Loss: 132.89988708496094 Tokens per Sec: 11574.591830283534
Epoch Step: 135 / 138 Loss: 15.42888355255127 Tokens per Sec: 11867.32092195411
Epoch ended with duration 0:00:54.124576
Train perplexity: 1.429245852325463
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.712197
Validation perplexity: 1.8461576043420211
Epoch 133 / 1000
Epoch Step: 5 / 138 Loss: 18.284387588500977 Tokens per Sec: 11832.103658011138
Epoch Step: 10 / 138 Loss: 14.915587425231934 Tokens per Sec: 12346.31414885188
Epoch Step: 15 / 138 Loss: 13.663414001464844 Tokens per Sec: 11878.23739406137
Epoch Step: 20 / 138 Loss: 15.344742774963379 Tokens per Sec: 12345.084447623205
Epoch Step: 25 / 138 Loss: 10.112839698791504 Tokens per Sec: 11873.49445150153
Epoch Step: 30 / 138 Loss: 14.441747665405273 Tokens per Sec: 11823.357939359357
Epoch Step: 35 / 138 Loss: 14.70300006866455 Tokens per Sec: 11862.259260869227
Epoch Step: 40 / 138 Loss: 18.935317993164062 Tokens per Sec: 11848.922834277037
Epoch Step: 45 / 138 Loss: 13.458477973937988 Tokens per Sec: 11879.34552091339
Epoch Step: 50 / 138 Loss: 17.989870071411133 Tokens per Sec: 11794.328944975017
Epoch Step: 55 / 138 Loss: 17.903766632080078 Tokens per Sec: 11689.127157143623
Epoch Step: 60 / 138 Loss: 21.599443435668945 Tokens per Sec: 11954.871012435982
Epoch Step: 65 / 138 Loss: 16.472551345825195 Tokens per Sec: 12128.715050632663
Epoch Step: 70 / 138 Loss: 11.677464485168457 Tokens per Sec: 11644.091033882216
Epoch Step: 75 / 138 Loss: 14.496052742004395 Tokens per Sec: 11712.871324427864
Epoch Step: 80 / 138 Loss: 13.995326042175293 Tokens per Sec: 11526.711003350725
Epoch Step: 85 / 138 Loss: 13.340808868408203 Tokens per Sec: 12554.727916921198
Epoch Step: 90 / 138 Loss: 22.334381103515625 Tokens per Sec: 12072.60136357574
Epoch Step: 95 / 138 Loss: 15.122404098510742 Tokens per Sec: 11183.297764246281
Epoch Step: 100 / 138 Loss: 16.418500900268555 Tokens per Sec: 12412.537751599859
Epoch Step: 105 / 138 Loss: 13.624083518981934 Tokens per Sec: 11026.60831442638
Epoch Step: 110 / 138 Loss: 13.778969764709473 Tokens per Sec: 10862.211637904506
Epoch Step: 115 / 138 Loss: 19.998571395874023 Tokens per Sec: 11399.551904918973
Epoch Step: 120 / 138 Loss: 16.072847366333008 Tokens per Sec: 11755.301102379643
Epoch Step: 125 / 138 Loss: 14.561461448669434 Tokens per Sec: 11541.984000919456
Epoch Step: 130 / 138 Loss: 15.417208671569824 Tokens per Sec: 11866.06368107914
Epoch Step: 135 / 138 Loss: 16.944799423217773 Tokens per Sec: 11635.91985659816
Epoch ended with duration 0:00:54.041828
Train perplexity: 1.3910426620982994
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.599546
Validation perplexity: 1.3156153400098207
Model saved best_on_validation!
Epoch 134 / 1000
Epoch Step: 5 / 138 Loss: 13.229103088378906 Tokens per Sec: 11955.629122908867
Epoch Step: 10 / 138 Loss: 18.94489097595215 Tokens per Sec: 11905.700699420502
Epoch Step: 15 / 138 Loss: 16.77547836303711 Tokens per Sec: 12361.04410828376
Epoch Step: 20 / 138 Loss: 17.65789222717285 Tokens per Sec: 11567.128303712738
Epoch Step: 25 / 138 Loss: 13.281937599182129 Tokens per Sec: 12121.19418434332
Epoch Step: 30 / 138 Loss: 13.950677871704102 Tokens per Sec: 11977.864564165508
Epoch Step: 35 / 138 Loss: 158.80076599121094 Tokens per Sec: 11854.937512179742
Epoch Step: 40 / 138 Loss: 12.080092430114746 Tokens per Sec: 11694.900493283298
Epoch Step: 45 / 138 Loss: 16.340316772460938 Tokens per Sec: 12161.888793138938
Epoch Step: 50 / 138 Loss: 9.11069107055664 Tokens per Sec: 12050.333526861037
Epoch Step: 55 / 138 Loss: 17.26787757873535 Tokens per Sec: 11589.519779877292
Epoch Step: 60 / 138 Loss: 20.459407806396484 Tokens per Sec: 12033.989043839098
Epoch Step: 65 / 138 Loss: 13.623174667358398 Tokens per Sec: 11473.514856697366
Epoch Step: 70 / 138 Loss: 17.036754608154297 Tokens per Sec: 11920.81331367894
Epoch Step: 75 / 138 Loss: 11.390545845031738 Tokens per Sec: 11894.500941510725
Epoch Step: 80 / 138 Loss: 21.242774963378906 Tokens per Sec: 12396.535551097946
Epoch Step: 85 / 138 Loss: 136.8389892578125 Tokens per Sec: 11944.206156854258
Epoch Step: 90 / 138 Loss: 22.11131477355957 Tokens per Sec: 11282.310819472337
Epoch Step: 95 / 138 Loss: 20.606897354125977 Tokens per Sec: 11504.140732971075
Epoch Step: 100 / 138 Loss: 23.110103607177734 Tokens per Sec: 11313.896899165013
Epoch Step: 105 / 138 Loss: 14.570477485656738 Tokens per Sec: 11298.915361647389
Epoch Step: 110 / 138 Loss: 19.28363800048828 Tokens per Sec: 11701.625054780709
Epoch Step: 115 / 138 Loss: 23.54682159423828 Tokens per Sec: 11300.527914552089
Epoch Step: 120 / 138 Loss: 16.447053909301758 Tokens per Sec: 11659.829975360972
Epoch Step: 125 / 138 Loss: 15.852556228637695 Tokens per Sec: 11276.370134946845
Epoch Step: 130 / 138 Loss: 25.523895263671875 Tokens per Sec: 10938.852292117845
Epoch Step: 135 / 138 Loss: 21.3226261138916 Tokens per Sec: 11687.46647409019
Epoch ended with duration 0:00:54.419411
Train perplexity: 1.4567389772241233
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.625096
Validation perplexity: 1.5053026549241961
Epoch 135 / 1000
Epoch Step: 5 / 138 Loss: 16.836162567138672 Tokens per Sec: 11115.644699044184
Epoch Step: 10 / 138 Loss: 25.071224212646484 Tokens per Sec: 12040.858194300712
Epoch Step: 15 / 138 Loss: 14.301254272460938 Tokens per Sec: 12058.783059391932
Epoch Step: 20 / 138 Loss: 17.566946029663086 Tokens per Sec: 12130.319256763458
Epoch Step: 25 / 138 Loss: 94.74870300292969 Tokens per Sec: 11595.154848317252
Epoch Step: 30 / 138 Loss: 9.816840171813965 Tokens per Sec: 11736.321799978236
Epoch Step: 35 / 138 Loss: 8.92451000213623 Tokens per Sec: 11667.002141527191
Epoch Step: 40 / 138 Loss: 14.469144821166992 Tokens per Sec: 12365.390978827585
Epoch Step: 45 / 138 Loss: 15.616945266723633 Tokens per Sec: 12429.468573298096
Epoch Step: 50 / 138 Loss: 15.006858825683594 Tokens per Sec: 11866.77003732525
Epoch Step: 55 / 138 Loss: 15.671287536621094 Tokens per Sec: 11764.262215847715
Epoch Step: 60 / 138 Loss: 22.6116886138916 Tokens per Sec: 11459.009570400756
Epoch Step: 65 / 138 Loss: 10.867033004760742 Tokens per Sec: 12176.025950860023
Epoch Step: 70 / 138 Loss: 97.58574676513672 Tokens per Sec: 11884.093282311569
Epoch Step: 75 / 138 Loss: 10.958477020263672 Tokens per Sec: 11313.587898300526
Epoch Step: 80 / 138 Loss: 20.76143455505371 Tokens per Sec: 11508.22632694889
Epoch Step: 85 / 138 Loss: 100.41822052001953 Tokens per Sec: 11909.5973245607
Epoch Step: 90 / 138 Loss: 20.259183883666992 Tokens per Sec: 12325.905452209774
Epoch Step: 95 / 138 Loss: 25.342618942260742 Tokens per Sec: 11831.38689955616
Epoch Step: 100 / 138 Loss: 17.21353530883789 Tokens per Sec: 12462.529934680098
Epoch Step: 105 / 138 Loss: 17.750761032104492 Tokens per Sec: 11520.213971294068
Epoch Step: 110 / 138 Loss: 13.82419490814209 Tokens per Sec: 10965.325682793886
Epoch Step: 115 / 138 Loss: 18.170024871826172 Tokens per Sec: 11747.002934278782
Epoch Step: 120 / 138 Loss: 17.09233856201172 Tokens per Sec: 11719.793946940606
Epoch Step: 125 / 138 Loss: 12.320047378540039 Tokens per Sec: 11578.213530875959
Epoch Step: 130 / 138 Loss: 17.661869049072266 Tokens per Sec: 11074.008027333102
Epoch Step: 135 / 138 Loss: 17.434513092041016 Tokens per Sec: 11706.433516842317
Epoch ended with duration 0:00:54.215264
Train perplexity: 1.4079496429562304
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.594083
Validation perplexity: 1.3195656526373538
Model saved checkpoint!
Epoch 136 / 1000
Epoch Step: 5 / 138 Loss: 9.3389892578125 Tokens per Sec: 12155.775613964368
Epoch Step: 10 / 138 Loss: 12.061264038085938 Tokens per Sec: 12650.02457922091
Epoch Step: 15 / 138 Loss: 20.168872833251953 Tokens per Sec: 11446.73641555901
Epoch Step: 20 / 138 Loss: 11.194391250610352 Tokens per Sec: 11859.847476808442
Epoch Step: 25 / 138 Loss: 21.538043975830078 Tokens per Sec: 11791.990197060913
Epoch Step: 30 / 138 Loss: 23.29065704345703 Tokens per Sec: 12084.330020334295
Epoch Step: 35 / 138 Loss: 18.06392478942871 Tokens per Sec: 11932.474017787665
Epoch Step: 40 / 138 Loss: 17.598600387573242 Tokens per Sec: 11865.242638867177
Epoch Step: 45 / 138 Loss: 16.802330017089844 Tokens per Sec: 11578.248873511298
Epoch Step: 50 / 138 Loss: 17.971691131591797 Tokens per Sec: 12100.518921810335
Epoch Step: 55 / 138 Loss: 16.8756160736084 Tokens per Sec: 11626.40406890716
Epoch Step: 60 / 138 Loss: 21.25465965270996 Tokens per Sec: 11964.66582939857
Epoch Step: 65 / 138 Loss: 18.844417572021484 Tokens per Sec: 11821.99908418034
Epoch Step: 70 / 138 Loss: 23.307039260864258 Tokens per Sec: 12322.40219597336
Epoch Step: 75 / 138 Loss: 14.034567832946777 Tokens per Sec: 11382.144820480093
Epoch Step: 80 / 138 Loss: 15.28847885131836 Tokens per Sec: 12170.507181698225
Epoch Step: 85 / 138 Loss: 10.747222900390625 Tokens per Sec: 11834.701448366704
Epoch Step: 90 / 138 Loss: 19.856792449951172 Tokens per Sec: 11586.760457312228
Epoch Step: 95 / 138 Loss: 16.40943145751953 Tokens per Sec: 11731.538646239214
Epoch Step: 100 / 138 Loss: 16.26025390625 Tokens per Sec: 11480.238406620454
Epoch Step: 105 / 138 Loss: 13.882718086242676 Tokens per Sec: 11618.183473050298
Epoch Step: 110 / 138 Loss: 12.462958335876465 Tokens per Sec: 11203.722424680633
Epoch Step: 115 / 138 Loss: 70.16958618164062 Tokens per Sec: 11069.713556345647
Epoch Step: 120 / 138 Loss: 13.902554512023926 Tokens per Sec: 11347.892835210552
Epoch Step: 125 / 138 Loss: 15.179890632629395 Tokens per Sec: 11795.212750377128
Epoch Step: 130 / 138 Loss: 16.258466720581055 Tokens per Sec: 10755.539956542973
Epoch Step: 135 / 138 Loss: 19.175628662109375 Tokens per Sec: 11769.614845027352
Epoch ended with duration 0:00:54.311041
Train perplexity: 1.4520717254633486
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.627765
Validation perplexity: 1.4849042415652258
Epoch 137 / 1000
Epoch Step: 5 / 138 Loss: 12.872140884399414 Tokens per Sec: 12146.258778890531
Epoch Step: 10 / 138 Loss: 10.008649826049805 Tokens per Sec: 12077.562451318405
Epoch Step: 15 / 138 Loss: 15.428608894348145 Tokens per Sec: 12472.137062251324
Epoch Step: 20 / 138 Loss: 21.350500106811523 Tokens per Sec: 11130.259731076108
Epoch Step: 25 / 138 Loss: 23.328948974609375 Tokens per Sec: 11557.529290731027
Epoch Step: 30 / 138 Loss: 13.579736709594727 Tokens per Sec: 12132.390855499418
Epoch Step: 35 / 138 Loss: 68.84435272216797 Tokens per Sec: 11646.208654892027
Epoch Step: 40 / 138 Loss: 10.149566650390625 Tokens per Sec: 12317.676204067904
Epoch Step: 45 / 138 Loss: 21.989805221557617 Tokens per Sec: 11468.336879621724
Epoch Step: 50 / 138 Loss: 11.372356414794922 Tokens per Sec: 12038.131672637635
Epoch Step: 55 / 138 Loss: 12.672411918640137 Tokens per Sec: 11452.262393758308
Epoch Step: 60 / 138 Loss: 15.305558204650879 Tokens per Sec: 12046.745914085115
Epoch Step: 65 / 138 Loss: 18.232084274291992 Tokens per Sec: 12160.009640142962
Epoch Step: 70 / 138 Loss: 20.1903076171875 Tokens per Sec: 11638.793752670881
Epoch Step: 75 / 138 Loss: 13.507487297058105 Tokens per Sec: 12420.404958896908
Epoch Step: 80 / 138 Loss: 188.98904418945312 Tokens per Sec: 11599.144833190629
Epoch Step: 85 / 138 Loss: 16.44061279296875 Tokens per Sec: 11975.87280269434
Epoch Step: 90 / 138 Loss: 19.2225284576416 Tokens per Sec: 12035.733652481022
Epoch Step: 95 / 138 Loss: 14.83059310913086 Tokens per Sec: 11684.91461802802
Epoch Step: 100 / 138 Loss: 169.00144958496094 Tokens per Sec: 11771.609194467777
Epoch Step: 105 / 138 Loss: 16.02919578552246 Tokens per Sec: 11750.277466589441
Epoch Step: 110 / 138 Loss: 16.203413009643555 Tokens per Sec: 11432.54899215839
Epoch Step: 115 / 138 Loss: 13.691032409667969 Tokens per Sec: 11478.973311169037
Epoch Step: 120 / 138 Loss: 15.751921653747559 Tokens per Sec: 10345.010272990829
Epoch Step: 125 / 138 Loss: 12.074134826660156 Tokens per Sec: 11361.374428731779
Epoch Step: 130 / 138 Loss: 20.071922302246094 Tokens per Sec: 11685.77175970029
Epoch Step: 135 / 138 Loss: 13.21643352508545 Tokens per Sec: 11957.953936215245
Epoch ended with duration 0:00:54.138787
Train perplexity: 1.3666219331927036
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) . METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.624499
Validation perplexity: 1.400159673781284
Epoch 138 / 1000
Epoch Step: 5 / 138 Loss: 14.857195854187012 Tokens per Sec: 11746.27108248255
Epoch Step: 10 / 138 Loss: 21.29146385192871 Tokens per Sec: 12305.144396634147
Epoch Step: 15 / 138 Loss: 18.740230560302734 Tokens per Sec: 11365.233793200689
Epoch Step: 20 / 138 Loss: 15.853621482849121 Tokens per Sec: 11826.502049144536
Epoch Step: 25 / 138 Loss: 52.112510681152344 Tokens per Sec: 11935.27541464548
Epoch Step: 30 / 138 Loss: 19.5775089263916 Tokens per Sec: 12430.261341976684
Epoch Step: 35 / 138 Loss: 112.1242446899414 Tokens per Sec: 11416.688099998875
Epoch Step: 40 / 138 Loss: 157.35740661621094 Tokens per Sec: 11734.127926151321
Epoch Step: 45 / 138 Loss: 19.107933044433594 Tokens per Sec: 11679.646753130139
Epoch Step: 50 / 138 Loss: 24.328872680664062 Tokens per Sec: 11847.038752333918
Epoch Step: 55 / 138 Loss: 29.931995391845703 Tokens per Sec: 12092.82022820156
Epoch Step: 60 / 138 Loss: 118.29204559326172 Tokens per Sec: 11642.306482335702
Epoch Step: 65 / 138 Loss: 16.293140411376953 Tokens per Sec: 11464.725085553973
Epoch Step: 70 / 138 Loss: 17.919103622436523 Tokens per Sec: 11940.849244404071
Epoch Step: 75 / 138 Loss: 10.879046440124512 Tokens per Sec: 12121.231892266063
Epoch Step: 80 / 138 Loss: 15.261609077453613 Tokens per Sec: 12262.055392525715
Epoch Step: 85 / 138 Loss: 13.607319831848145 Tokens per Sec: 11615.172655260434
Epoch Step: 90 / 138 Loss: 8.909544944763184 Tokens per Sec: 12228.959595195007
Epoch Step: 95 / 138 Loss: 14.697917938232422 Tokens per Sec: 11832.831509528263
Epoch Step: 100 / 138 Loss: 12.75903034210205 Tokens per Sec: 11853.307355694657
Epoch Step: 105 / 138 Loss: 14.908520698547363 Tokens per Sec: 11352.615113065765
Epoch Step: 110 / 138 Loss: 15.054588317871094 Tokens per Sec: 11610.291487534714
Epoch Step: 115 / 138 Loss: 13.488104820251465 Tokens per Sec: 12007.898386770483
Epoch Step: 120 / 138 Loss: 18.089529037475586 Tokens per Sec: 10756.109087562036
Epoch Step: 125 / 138 Loss: 84.74299621582031 Tokens per Sec: 11364.946394663471
Epoch Step: 130 / 138 Loss: 16.28904151916504 Tokens per Sec: 11152.283619096197
Epoch Step: 135 / 138 Loss: 13.952710151672363 Tokens per Sec: 11632.457678741419
Epoch ended with duration 0:00:54.288209
Train perplexity: 1.5491510368254893
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.667001
Validation perplexity: 1.3869929547957727
Epoch 139 / 1000
Epoch Step: 5 / 138 Loss: 19.76024055480957 Tokens per Sec: 11789.197882605833
Epoch Step: 10 / 138 Loss: 113.27056884765625 Tokens per Sec: 10902.841234960733
Epoch Step: 15 / 138 Loss: 23.483476638793945 Tokens per Sec: 11799.002837907115
Epoch Step: 20 / 138 Loss: 17.548974990844727 Tokens per Sec: 12185.468681110528
Epoch Step: 25 / 138 Loss: 18.500476837158203 Tokens per Sec: 12297.323782168252
Epoch Step: 30 / 138 Loss: 12.728854179382324 Tokens per Sec: 12070.629398950587
Epoch Step: 35 / 138 Loss: 21.986583709716797 Tokens per Sec: 11658.585165910828
Epoch Step: 40 / 138 Loss: 17.222476959228516 Tokens per Sec: 11810.009904511724
Epoch Step: 45 / 138 Loss: 13.122936248779297 Tokens per Sec: 11795.038745758304
Epoch Step: 50 / 138 Loss: 11.097494125366211 Tokens per Sec: 12325.591041391943
Epoch Step: 55 / 138 Loss: 19.192909240722656 Tokens per Sec: 12282.79613506727
Epoch Step: 60 / 138 Loss: 14.594191551208496 Tokens per Sec: 12028.724979216227
Epoch Step: 65 / 138 Loss: 20.327890396118164 Tokens per Sec: 11198.184093501597
Epoch Step: 70 / 138 Loss: 13.033271789550781 Tokens per Sec: 12490.137051641826
Epoch Step: 75 / 138 Loss: 14.265037536621094 Tokens per Sec: 11843.387460184402
Epoch Step: 80 / 138 Loss: 13.192617416381836 Tokens per Sec: 12092.436619716418
Epoch Step: 85 / 138 Loss: 20.360218048095703 Tokens per Sec: 12339.73633624804
Epoch Step: 90 / 138 Loss: 18.346214294433594 Tokens per Sec: 11938.473949866
Epoch Step: 95 / 138 Loss: 17.958086013793945 Tokens per Sec: 11762.45999357169
Epoch Step: 100 / 138 Loss: 15.677507400512695 Tokens per Sec: 12174.321415360218
Epoch Step: 105 / 138 Loss: 21.632610321044922 Tokens per Sec: 11170.434298250906
Epoch Step: 110 / 138 Loss: 18.47657585144043 Tokens per Sec: 11763.651343376441
Epoch Step: 115 / 138 Loss: 15.198233604431152 Tokens per Sec: 11849.209845783414
Epoch Step: 120 / 138 Loss: 15.850255012512207 Tokens per Sec: 10813.499729530891
Epoch Step: 125 / 138 Loss: 13.849576950073242 Tokens per Sec: 11270.263225198309
Epoch Step: 130 / 138 Loss: 14.227855682373047 Tokens per Sec: 11335.934498563696
Epoch Step: 135 / 138 Loss: 15.587669372558594 Tokens per Sec: 10680.39216828097
Epoch ended with duration 0:00:54.306653
Train perplexity: 1.4318226650408312
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) . METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:04.665785
Validation perplexity: 1.5570137391532934
Epoch 140 / 1000
Epoch Step: 5 / 138 Loss: 13.077200889587402 Tokens per Sec: 11677.472565351118
Epoch Step: 10 / 138 Loss: 20.804306030273438 Tokens per Sec: 11632.350045945816
Epoch Step: 15 / 138 Loss: 79.7118148803711 Tokens per Sec: 11699.476125440817
Epoch Step: 20 / 138 Loss: 10.335003852844238 Tokens per Sec: 12014.48435968174
Epoch Step: 25 / 138 Loss: 18.4731502532959 Tokens per Sec: 11558.59116464524
Epoch Step: 30 / 138 Loss: 13.119114875793457 Tokens per Sec: 11373.81253923218
Epoch Step: 35 / 138 Loss: 18.268978118896484 Tokens per Sec: 11698.867619327875
Epoch Step: 40 / 138 Loss: 8.873016357421875 Tokens per Sec: 12201.6033840033
Epoch Step: 45 / 138 Loss: 12.500799179077148 Tokens per Sec: 11949.031021618588
Epoch Step: 50 / 138 Loss: 14.545134544372559 Tokens per Sec: 12035.28529750902
Epoch Step: 55 / 138 Loss: 11.043720245361328 Tokens per Sec: 11889.856928112644
Epoch Step: 60 / 138 Loss: 14.505350112915039 Tokens per Sec: 12210.221083468517
Epoch Step: 65 / 138 Loss: 8.626840591430664 Tokens per Sec: 11837.369549662184
Epoch Step: 70 / 138 Loss: 18.93960952758789 Tokens per Sec: 11506.47008290036
Epoch Step: 75 / 138 Loss: 21.98662757873535 Tokens per Sec: 12225.393290013251
Epoch Step: 80 / 138 Loss: 17.503253936767578 Tokens per Sec: 12199.410887603019
Epoch Step: 85 / 138 Loss: 16.93343162536621 Tokens per Sec: 11866.655408346878
Epoch Step: 90 / 138 Loss: 21.67747688293457 Tokens per Sec: 11953.826052262551
Epoch Step: 95 / 138 Loss: 13.913556098937988 Tokens per Sec: 11957.443623277835
Epoch Step: 100 / 138 Loss: 22.190282821655273 Tokens per Sec: 11640.187916378121
Epoch Step: 105 / 138 Loss: 21.55513572692871 Tokens per Sec: 11432.208018933015
Epoch Step: 110 / 138 Loss: 18.496246337890625 Tokens per Sec: 10866.148489720112
Epoch Step: 115 / 138 Loss: 16.254289627075195 Tokens per Sec: 11151.97009248651
Epoch Step: 120 / 138 Loss: 12.13787841796875 Tokens per Sec: 11809.132309656938
Epoch Step: 125 / 138 Loss: 12.579459190368652 Tokens per Sec: 11559.836374580022
Epoch Step: 130 / 138 Loss: 21.828432083129883 Tokens per Sec: 11615.268230704947
Epoch Step: 135 / 138 Loss: 162.60182189941406 Tokens per Sec: 11012.657459111564
Epoch ended with duration 0:00:54.384282
Train perplexity: 1.4205280961227467
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) . METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.748740
Validation perplexity: 2.0154368778132383
Model saved checkpoint!
Epoch 141 / 1000
Epoch Step: 5 / 138 Loss: 10.65522575378418 Tokens per Sec: 11885.038124320956
Epoch Step: 10 / 138 Loss: 17.596599578857422 Tokens per Sec: 12267.024822156325
Epoch Step: 15 / 138 Loss: 12.26807689666748 Tokens per Sec: 11904.206277338653
Epoch Step: 20 / 138 Loss: 25.186445236206055 Tokens per Sec: 12082.361859213928
Epoch Step: 25 / 138 Loss: 11.242676734924316 Tokens per Sec: 11404.764849869607
Epoch Step: 30 / 138 Loss: 14.334368705749512 Tokens per Sec: 12018.315108959645
Epoch Step: 35 / 138 Loss: 16.682861328125 Tokens per Sec: 12255.84280398978
Epoch Step: 40 / 138 Loss: 112.70612335205078 Tokens per Sec: 11941.287883572046
Epoch Step: 45 / 138 Loss: 10.997064590454102 Tokens per Sec: 11746.314621582422
Epoch Step: 50 / 138 Loss: 16.30495262145996 Tokens per Sec: 11916.415347387447
Epoch Step: 55 / 138 Loss: 8.436995506286621 Tokens per Sec: 12535.734515499362
Epoch Step: 60 / 138 Loss: 116.42342376708984 Tokens per Sec: 11799.74773896539
Epoch Step: 65 / 138 Loss: 64.8079833984375 Tokens per Sec: 11503.212764473436
Epoch Step: 70 / 138 Loss: 18.4052734375 Tokens per Sec: 12303.201172804005
Epoch Step: 75 / 138 Loss: 18.91057014465332 Tokens per Sec: 11977.168707613891
Epoch Step: 80 / 138 Loss: 12.774761199951172 Tokens per Sec: 11907.393611511752
Epoch Step: 85 / 138 Loss: 23.766530990600586 Tokens per Sec: 11806.561730941556
Epoch Step: 90 / 138 Loss: 17.46607208251953 Tokens per Sec: 11636.344519099479
Epoch Step: 95 / 138 Loss: 14.393268585205078 Tokens per Sec: 12152.429829030714
Epoch Step: 100 / 138 Loss: 121.04115295410156 Tokens per Sec: 11471.54484490051
Epoch Step: 105 / 138 Loss: 11.822942733764648 Tokens per Sec: 11556.735809603086
Epoch Step: 110 / 138 Loss: 15.40941047668457 Tokens per Sec: 11705.38001708025
Epoch Step: 115 / 138 Loss: 15.547640800476074 Tokens per Sec: 11615.223182648084
Epoch Step: 120 / 138 Loss: 9.378623962402344 Tokens per Sec: 11402.035270136665
Epoch Step: 125 / 138 Loss: 17.84130859375 Tokens per Sec: 11432.978799064533
Epoch Step: 130 / 138 Loss: 18.347867965698242 Tokens per Sec: 10718.507067484832
Epoch Step: 135 / 138 Loss: 17.05600357055664 Tokens per Sec: 11284.753112407754
Epoch ended with duration 0:00:54.169626
Train perplexity: 1.4013748031755686
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.732802
Validation perplexity: 1.8553533647131344
Epoch 142 / 1000
Epoch Step: 5 / 138 Loss: 9.502448081970215 Tokens per Sec: 12077.16782028969
Epoch Step: 10 / 138 Loss: 10.823821067810059 Tokens per Sec: 11671.867648873204
Epoch Step: 15 / 138 Loss: 15.148165702819824 Tokens per Sec: 12004.413458541942
Epoch Step: 20 / 138 Loss: 153.37850952148438 Tokens per Sec: 12333.380964865537
Epoch Step: 25 / 138 Loss: 14.507912635803223 Tokens per Sec: 12634.16734963198
Epoch Step: 30 / 138 Loss: 22.52061653137207 Tokens per Sec: 11737.160866226472
Epoch Step: 35 / 138 Loss: 17.221155166625977 Tokens per Sec: 12386.848966270409
Epoch Step: 40 / 138 Loss: 13.33393669128418 Tokens per Sec: 11609.872969891763
Epoch Step: 45 / 138 Loss: 18.12527084350586 Tokens per Sec: 11809.065144362956
Epoch Step: 50 / 138 Loss: 12.445408821105957 Tokens per Sec: 12171.057404075586
Epoch Step: 55 / 138 Loss: 16.701902389526367 Tokens per Sec: 11662.539486280244
Epoch Step: 60 / 138 Loss: 12.784512519836426 Tokens per Sec: 12306.105288991166
Epoch Step: 65 / 138 Loss: 172.47552490234375 Tokens per Sec: 11993.052135609641
Epoch Step: 70 / 138 Loss: 19.871383666992188 Tokens per Sec: 11832.624488756279
Epoch Step: 75 / 138 Loss: 16.5003662109375 Tokens per Sec: 11747.840045068748
Epoch Step: 80 / 138 Loss: 18.88712501525879 Tokens per Sec: 11989.198383031984
Epoch Step: 85 / 138 Loss: 22.63889503479004 Tokens per Sec: 11974.404608096898
Epoch Step: 90 / 138 Loss: 21.51374053955078 Tokens per Sec: 11522.535181334883
Epoch Step: 95 / 138 Loss: 21.01624298095703 Tokens per Sec: 11395.302767231437
Epoch Step: 100 / 138 Loss: 13.379400253295898 Tokens per Sec: 11707.446914040007
Epoch Step: 105 / 138 Loss: 15.992020606994629 Tokens per Sec: 10967.021935771709
Epoch Step: 110 / 138 Loss: 10.849369049072266 Tokens per Sec: 11428.086467349109
Epoch Step: 115 / 138 Loss: 14.549436569213867 Tokens per Sec: 11625.052617128014
Epoch Step: 120 / 138 Loss: 15.213445663452148 Tokens per Sec: 11551.373036563004
Epoch Step: 125 / 138 Loss: 12.76911735534668 Tokens per Sec: 11522.783168934018
Epoch Step: 130 / 138 Loss: 14.451064109802246 Tokens per Sec: 11183.688675576004
Epoch Step: 135 / 138 Loss: 12.706585884094238 Tokens per Sec: 11814.170805131645
Epoch ended with duration 0:00:54.101293
Train perplexity: 1.3886921635408018
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) . METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) , METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.693604
Validation perplexity: 1.6859570881072035
Epoch 143 / 1000
Epoch Step: 5 / 138 Loss: 19.56592559814453 Tokens per Sec: 12175.619789027347
Epoch Step: 10 / 138 Loss: 12.502760887145996 Tokens per Sec: 11830.190936592842
Epoch Step: 15 / 138 Loss: 14.65257453918457 Tokens per Sec: 11998.886592935401
Epoch Step: 20 / 138 Loss: 19.885009765625 Tokens per Sec: 12539.665710046836
Epoch Step: 25 / 138 Loss: 18.48955726623535 Tokens per Sec: 12125.690914153449
Epoch Step: 30 / 138 Loss: 9.068249702453613 Tokens per Sec: 11656.001134642791
Epoch Step: 35 / 138 Loss: 18.53113555908203 Tokens per Sec: 11698.776249099375
Epoch Step: 40 / 138 Loss: 12.584075927734375 Tokens per Sec: 11488.847373596973
Epoch Step: 45 / 138 Loss: 14.651946067810059 Tokens per Sec: 11988.576718332844
Epoch Step: 50 / 138 Loss: 11.12258529663086 Tokens per Sec: 11710.861651667912
Epoch Step: 55 / 138 Loss: 16.258995056152344 Tokens per Sec: 11549.053809005576
Epoch Step: 60 / 138 Loss: 13.8778715133667 Tokens per Sec: 12008.979481070612
Epoch Step: 65 / 138 Loss: 19.84172821044922 Tokens per Sec: 11999.621978263458
Epoch Step: 70 / 138 Loss: 15.257962226867676 Tokens per Sec: 12061.143004474432
Epoch Step: 75 / 138 Loss: 16.536523818969727 Tokens per Sec: 12269.198176044412
Epoch Step: 80 / 138 Loss: 11.033220291137695 Tokens per Sec: 11793.354453483218
Epoch Step: 85 / 138 Loss: 60.4147834777832 Tokens per Sec: 12011.21377881021
Epoch Step: 90 / 138 Loss: 16.517377853393555 Tokens per Sec: 11944.762493135397
Epoch Step: 95 / 138 Loss: 161.03225708007812 Tokens per Sec: 11864.24879311104
Epoch Step: 100 / 138 Loss: 18.111217498779297 Tokens per Sec: 12016.39257006234
Epoch Step: 105 / 138 Loss: 15.394867897033691 Tokens per Sec: 11597.677601874499
Epoch Step: 110 / 138 Loss: 15.309823989868164 Tokens per Sec: 11525.929203736752
Epoch Step: 115 / 138 Loss: 10.861069679260254 Tokens per Sec: 11265.56403162561
Epoch Step: 120 / 138 Loss: 18.80942726135254 Tokens per Sec: 10907.862366471903
Epoch Step: 125 / 138 Loss: 16.880678176879883 Tokens per Sec: 11742.850232105038
Epoch Step: 130 / 138 Loss: 151.72076416015625 Tokens per Sec: 11260.023944407552
Epoch Step: 135 / 138 Loss: 13.70975112915039 Tokens per Sec: 11356.41267428103
Epoch ended with duration 0:00:54.103346
Train perplexity: 1.3268391805131265
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.592571
Validation perplexity: 1.3158056660679653
Epoch 144 / 1000
Epoch Step: 5 / 138 Loss: 16.44970703125 Tokens per Sec: 12399.49175145729
Epoch Step: 10 / 138 Loss: 17.889163970947266 Tokens per Sec: 11012.620254006692
Epoch Step: 15 / 138 Loss: 19.168636322021484 Tokens per Sec: 12202.329395564235
Epoch Step: 20 / 138 Loss: 10.865294456481934 Tokens per Sec: 11736.311760017928
Epoch Step: 25 / 138 Loss: 15.358250617980957 Tokens per Sec: 12026.696552558627
Epoch Step: 30 / 138 Loss: 10.96232795715332 Tokens per Sec: 11946.77355067463
Epoch Step: 35 / 138 Loss: 8.139667510986328 Tokens per Sec: 11458.58808882262
Epoch Step: 40 / 138 Loss: 15.094608306884766 Tokens per Sec: 11822.726441117456
Epoch Step: 45 / 138 Loss: 12.728551864624023 Tokens per Sec: 12396.930045919531
Epoch Step: 50 / 138 Loss: 114.27085876464844 Tokens per Sec: 12189.950565139907
Epoch Step: 55 / 138 Loss: 15.008667945861816 Tokens per Sec: 11554.24234786003
Epoch Step: 60 / 138 Loss: 11.906188011169434 Tokens per Sec: 11470.408338352265
Epoch Step: 65 / 138 Loss: 11.046196937561035 Tokens per Sec: 12245.211079327511
Epoch Step: 70 / 138 Loss: 15.381219863891602 Tokens per Sec: 11739.535199034046
Epoch Step: 75 / 138 Loss: 13.233129501342773 Tokens per Sec: 11498.835308540652
Epoch Step: 80 / 138 Loss: 14.118630409240723 Tokens per Sec: 12392.103427781905
Epoch Step: 85 / 138 Loss: 18.21100616455078 Tokens per Sec: 11239.854085634599
Epoch Step: 90 / 138 Loss: 17.533349990844727 Tokens per Sec: 12205.327692756178
Epoch Step: 95 / 138 Loss: 18.831594467163086 Tokens per Sec: 11783.984775445057
Epoch Step: 100 / 138 Loss: 12.066997528076172 Tokens per Sec: 11950.88858255054
Epoch Step: 105 / 138 Loss: 13.009622573852539 Tokens per Sec: 11448.288213813745
Epoch Step: 110 / 138 Loss: 16.93216896057129 Tokens per Sec: 11810.389247176397
Epoch Step: 115 / 138 Loss: 13.519121170043945 Tokens per Sec: 11392.221663664688
Epoch Step: 120 / 138 Loss: 14.430137634277344 Tokens per Sec: 11331.1017376804
Epoch Step: 125 / 138 Loss: 16.949188232421875 Tokens per Sec: 11874.692036748493
Epoch Step: 130 / 138 Loss: 13.769052505493164 Tokens per Sec: 10402.954148393912
Epoch Step: 135 / 138 Loss: 14.503129005432129 Tokens per Sec: 11578.64798102862
Epoch ended with duration 0:00:54.309094
Train perplexity: 1.3807977795821151
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , METHOD_5 ( ) , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:04.627224
Validation perplexity: 1.4584668658465723
Epoch 145 / 1000
Epoch Step: 5 / 138 Loss: 19.466167449951172 Tokens per Sec: 11548.01825868387
Epoch Step: 10 / 138 Loss: 16.98617935180664 Tokens per Sec: 12211.691648814169
Epoch Step: 15 / 138 Loss: 7.702780246734619 Tokens per Sec: 11864.803090346059
Epoch Step: 20 / 138 Loss: 19.40996742248535 Tokens per Sec: 12153.56972688525
Epoch Step: 25 / 138 Loss: 11.591293334960938 Tokens per Sec: 10920.784182037532
Epoch Step: 30 / 138 Loss: 14.735740661621094 Tokens per Sec: 12061.854120675871
Epoch Step: 35 / 138 Loss: 12.359709739685059 Tokens per Sec: 11988.26754652463
Epoch Step: 40 / 138 Loss: 18.38062286376953 Tokens per Sec: 12022.583667955414
Epoch Step: 45 / 138 Loss: 14.072327613830566 Tokens per Sec: 11760.303698440806
Epoch Step: 50 / 138 Loss: 11.188596725463867 Tokens per Sec: 12200.053450667529
Epoch Step: 55 / 138 Loss: 10.715824127197266 Tokens per Sec: 12467.664707433993
Epoch Step: 60 / 138 Loss: 8.795463562011719 Tokens per Sec: 12055.775253570675
Epoch Step: 65 / 138 Loss: 8.648853302001953 Tokens per Sec: 11743.180510604843
Epoch Step: 70 / 138 Loss: 16.297937393188477 Tokens per Sec: 12232.9145181624
Epoch Step: 75 / 138 Loss: 15.166731834411621 Tokens per Sec: 11831.159486388495
Epoch Step: 80 / 138 Loss: 17.56132698059082 Tokens per Sec: 11879.016267763276
Epoch Step: 85 / 138 Loss: 16.393043518066406 Tokens per Sec: 12397.791347305843
Epoch Step: 90 / 138 Loss: 18.33757972717285 Tokens per Sec: 11736.525037159674
Epoch Step: 95 / 138 Loss: 12.756542205810547 Tokens per Sec: 11878.088692158295
Epoch Step: 100 / 138 Loss: 13.822235107421875 Tokens per Sec: 11750.346710961401
Epoch Step: 105 / 138 Loss: 13.592926025390625 Tokens per Sec: 11760.696193418993
Epoch Step: 110 / 138 Loss: 16.498371124267578 Tokens per Sec: 11675.012113299874
Epoch Step: 115 / 138 Loss: 14.691999435424805 Tokens per Sec: 11044.34768253573
Epoch Step: 120 / 138 Loss: 140.23777770996094 Tokens per Sec: 11532.520779032138
Epoch Step: 125 / 138 Loss: 113.32247924804688 Tokens per Sec: 12751.101414892522
Epoch Step: 130 / 138 Loss: 61.7174186706543 Tokens per Sec: 13170.034746786572
Epoch Step: 135 / 138 Loss: 13.990286827087402 Tokens per Sec: 12903.6857770425
Epoch ended with duration 0:00:53.177593
Train perplexity: 1.3361372882016498
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.829051
Validation perplexity: 1.6792924304207528
Model saved checkpoint!
Epoch 146 / 1000
Epoch Step: 5 / 138 Loss: 13.269085884094238 Tokens per Sec: 13406.010432729774
Epoch Step: 10 / 138 Loss: 17.506656646728516 Tokens per Sec: 13636.656219980066
Epoch Step: 15 / 138 Loss: 20.694543838500977 Tokens per Sec: 13692.664254665337
Epoch Step: 20 / 138 Loss: 154.01307678222656 Tokens per Sec: 13366.725343015853
Epoch Step: 25 / 138 Loss: 99.4030990600586 Tokens per Sec: 13677.439171198675
Epoch Step: 30 / 138 Loss: 12.765745162963867 Tokens per Sec: 13808.156155446279
Epoch Step: 35 / 138 Loss: 20.424884796142578 Tokens per Sec: 13894.603265002346
Epoch Step: 40 / 138 Loss: 14.753289222717285 Tokens per Sec: 14211.600362623172
Epoch Step: 45 / 138 Loss: 18.28667449951172 Tokens per Sec: 13696.459475558871
Epoch Step: 50 / 138 Loss: 12.399659156799316 Tokens per Sec: 13531.940553233315
Epoch Step: 55 / 138 Loss: 24.650371551513672 Tokens per Sec: 14108.293375766814
Epoch Step: 60 / 138 Loss: 10.973130226135254 Tokens per Sec: 13555.86360879034
Epoch Step: 65 / 138 Loss: 18.272687911987305 Tokens per Sec: 13021.936988633011
Epoch Step: 70 / 138 Loss: 17.31692123413086 Tokens per Sec: 14134.363440389341
Epoch Step: 75 / 138 Loss: 77.66114807128906 Tokens per Sec: 12919.247871603455
Epoch Step: 80 / 138 Loss: 13.19163990020752 Tokens per Sec: 13662.767408935031
Epoch Step: 85 / 138 Loss: 24.85566520690918 Tokens per Sec: 12911.660512257471
Epoch Step: 90 / 138 Loss: 19.081174850463867 Tokens per Sec: 13494.112840976974
Epoch Step: 95 / 138 Loss: 19.847854614257812 Tokens per Sec: 13911.770993259377
Epoch Step: 100 / 138 Loss: 18.83453941345215 Tokens per Sec: 13688.882177974421
Epoch Step: 105 / 138 Loss: 15.011760711669922 Tokens per Sec: 12849.009130211627
Epoch Step: 110 / 138 Loss: 13.80688190460205 Tokens per Sec: 13520.160682638661
Epoch Step: 115 / 138 Loss: 16.997669219970703 Tokens per Sec: 13264.05128676662
Epoch Step: 120 / 138 Loss: 14.430191993713379 Tokens per Sec: 13239.168642693394
Epoch Step: 125 / 138 Loss: 60.12263488769531 Tokens per Sec: 12937.326024836944
Epoch Step: 130 / 138 Loss: 17.267911911010742 Tokens per Sec: 11995.317468278878
Epoch Step: 135 / 138 Loss: 16.430118560791016 Tokens per Sec: 13648.627545953728
Epoch ended with duration 0:00:47.386377
Train perplexity: 1.3968770409413527
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.896399
Validation perplexity: 1.7024815648363367
Epoch 147 / 1000
Epoch Step: 5 / 138 Loss: 16.272357940673828 Tokens per Sec: 13212.851334882245
Epoch Step: 10 / 138 Loss: 13.368742942810059 Tokens per Sec: 13268.512345690457
Epoch Step: 15 / 138 Loss: 9.779946327209473 Tokens per Sec: 13607.771098559324
Epoch Step: 20 / 138 Loss: 18.285297393798828 Tokens per Sec: 12339.511435943405
Epoch Step: 25 / 138 Loss: 13.140524864196777 Tokens per Sec: 13810.323172250066
Epoch Step: 30 / 138 Loss: 11.396429061889648 Tokens per Sec: 13776.592111368394
Epoch Step: 35 / 138 Loss: 24.360210418701172 Tokens per Sec: 13399.622212642385
Epoch Step: 40 / 138 Loss: 17.89409828186035 Tokens per Sec: 13741.624844851625
Epoch Step: 45 / 138 Loss: 17.62696647644043 Tokens per Sec: 13446.106758279335
Epoch Step: 50 / 138 Loss: 20.362213134765625 Tokens per Sec: 13998.022258425312
Epoch Step: 55 / 138 Loss: 57.48956298828125 Tokens per Sec: 13464.430268790835
Epoch Step: 60 / 138 Loss: 122.01109313964844 Tokens per Sec: 13829.187045558936
Epoch Step: 65 / 138 Loss: 16.27204132080078 Tokens per Sec: 13015.303841088555
Epoch Step: 70 / 138 Loss: 12.172273635864258 Tokens per Sec: 13983.809628236868
Epoch Step: 75 / 138 Loss: 18.464427947998047 Tokens per Sec: 13340.72296635465
Epoch Step: 80 / 138 Loss: 12.821881294250488 Tokens per Sec: 14016.447209705704
Epoch Step: 85 / 138 Loss: 14.39559555053711 Tokens per Sec: 13395.851698357623
Epoch Step: 90 / 138 Loss: 13.72038459777832 Tokens per Sec: 14530.649145978046
Epoch Step: 95 / 138 Loss: 21.13477897644043 Tokens per Sec: 13738.995406226535
Epoch Step: 100 / 138 Loss: 13.42730712890625 Tokens per Sec: 13785.30759624426
Epoch Step: 105 / 138 Loss: 22.2304630279541 Tokens per Sec: 13182.932880240498
Epoch Step: 110 / 138 Loss: 17.274307250976562 Tokens per Sec: 13033.512258155224
Epoch Step: 115 / 138 Loss: 17.701274871826172 Tokens per Sec: 12932.83580016338
Epoch Step: 120 / 138 Loss: 15.319945335388184 Tokens per Sec: 13453.691141897087
Epoch Step: 125 / 138 Loss: 17.34855842590332 Tokens per Sec: 13185.000653235638
Epoch Step: 130 / 138 Loss: 17.267230987548828 Tokens per Sec: 13436.60130917119
Epoch Step: 135 / 138 Loss: 114.27164459228516 Tokens per Sec: 12616.292206097272
Epoch ended with duration 0:00:47.485011
Train perplexity: 1.5027540037140739
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Epoch ended with duration 0:00:03.837214
Validation perplexity: 1.5595049329572512
Epoch 148 / 1000
Epoch Step: 5 / 138 Loss: 20.72557258605957 Tokens per Sec: 13967.961629553154
Epoch Step: 10 / 138 Loss: 19.934906005859375 Tokens per Sec: 13414.611312990706
Epoch Step: 15 / 138 Loss: 9.760995864868164 Tokens per Sec: 13687.1837714574
Epoch Step: 20 / 138 Loss: 18.371965408325195 Tokens per Sec: 13703.82809282393
Epoch Step: 25 / 138 Loss: 17.932479858398438 Tokens per Sec: 13586.350389773233
Epoch Step: 30 / 138 Loss: 8.79312801361084 Tokens per Sec: 14278.701999119501
Epoch Step: 35 / 138 Loss: 146.5245361328125 Tokens per Sec: 13501.658301805359
Epoch Step: 40 / 138 Loss: 16.879722595214844 Tokens per Sec: 13293.257091882804
Epoch Step: 45 / 138 Loss: 14.529133796691895 Tokens per Sec: 12709.149617703752
Epoch Step: 50 / 138 Loss: 12.937872886657715 Tokens per Sec: 12983.280350588393
Epoch Step: 55 / 138 Loss: 19.797576904296875 Tokens per Sec: 13852.384880144582
Epoch Step: 60 / 138 Loss: 15.391887664794922 Tokens per Sec: 14132.374799131274
Epoch Step: 65 / 138 Loss: 21.840375900268555 Tokens per Sec: 13100.625401940903
Epoch Step: 70 / 138 Loss: 18.981595993041992 Tokens per Sec: 14681.877773206164
Epoch Step: 75 / 138 Loss: 71.76577758789062 Tokens per Sec: 13439.409342212368
Epoch Step: 80 / 138 Loss: 19.771963119506836 Tokens per Sec: 13768.13052433456
Epoch Step: 85 / 138 Loss: 22.23528289794922 Tokens per Sec: 13221.091671276388
Epoch Step: 90 / 138 Loss: 16.915836334228516 Tokens per Sec: 13851.88398070038
Epoch Step: 95 / 138 Loss: 20.332712173461914 Tokens per Sec: 13406.538461719476
Epoch Step: 100 / 138 Loss: 15.97624683380127 Tokens per Sec: 13304.218964834166
Epoch Step: 105 / 138 Loss: 17.045434951782227 Tokens per Sec: 12890.071686830528
Epoch Step: 110 / 138 Loss: 9.107405662536621 Tokens per Sec: 12789.384488282247
Epoch Step: 115 / 138 Loss: 17.164270401000977 Tokens per Sec: 13075.805434361118
Epoch Step: 120 / 138 Loss: 16.797840118408203 Tokens per Sec: 12959.757503724031
Epoch Step: 125 / 138 Loss: 13.719958305358887 Tokens per Sec: 12287.585110879034
Epoch Step: 130 / 138 Loss: 123.7906494140625 Tokens per Sec: 13575.412768353612
Epoch Step: 135 / 138 Loss: 14.080023765563965 Tokens per Sec: 12932.592470515956
Epoch ended with duration 0:00:47.509807
Train perplexity: 1.438264623824472
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.865071
Validation perplexity: 1.5836990633200003
Epoch 149 / 1000
Epoch Step: 5 / 138 Loss: 138.01382446289062 Tokens per Sec: 13222.281553989691
Epoch Step: 10 / 138 Loss: 10.645360946655273 Tokens per Sec: 14482.410240050775
Epoch Step: 15 / 138 Loss: 16.133291244506836 Tokens per Sec: 13598.833189726816
Epoch Step: 20 / 138 Loss: 9.808185577392578 Tokens per Sec: 13967.261993250217
Epoch Step: 25 / 138 Loss: 147.78721618652344 Tokens per Sec: 13212.193738265776
Epoch Step: 30 / 138 Loss: 14.218214988708496 Tokens per Sec: 13865.38827787414
Epoch Step: 35 / 138 Loss: 11.460183143615723 Tokens per Sec: 13827.049800876379
Epoch Step: 40 / 138 Loss: 10.752142906188965 Tokens per Sec: 13713.0400250766
Epoch Step: 45 / 138 Loss: 12.627782821655273 Tokens per Sec: 14560.606712937044
Epoch Step: 50 / 138 Loss: 21.344789505004883 Tokens per Sec: 13289.635400489815
Epoch Step: 55 / 138 Loss: 17.424015045166016 Tokens per Sec: 12814.076083408123
Epoch Step: 60 / 138 Loss: 26.758359909057617 Tokens per Sec: 13479.935750554294
Epoch Step: 65 / 138 Loss: 19.476150512695312 Tokens per Sec: 13184.368953148787
Epoch Step: 70 / 138 Loss: 15.764354705810547 Tokens per Sec: 14030.849234816613
Epoch Step: 75 / 138 Loss: 17.891878128051758 Tokens per Sec: 12759.644333742577
Epoch Step: 80 / 138 Loss: 9.921133041381836 Tokens per Sec: 13914.624478063746
Epoch Step: 85 / 138 Loss: 19.326061248779297 Tokens per Sec: 14094.1789335595
Epoch Step: 90 / 138 Loss: 12.25001049041748 Tokens per Sec: 13854.971621166967
Epoch Step: 95 / 138 Loss: 17.323144912719727 Tokens per Sec: 13128.855095523548
Epoch Step: 100 / 138 Loss: 9.676909446716309 Tokens per Sec: 13439.260013011586
Epoch Step: 105 / 138 Loss: 15.663616180419922 Tokens per Sec: 13320.10853854544
Epoch Step: 110 / 138 Loss: 13.600797653198242 Tokens per Sec: 12956.342560514064
Epoch Step: 115 / 138 Loss: 118.01073455810547 Tokens per Sec: 12702.964437498484
Epoch Step: 120 / 138 Loss: 18.370512008666992 Tokens per Sec: 12302.356610282968
Epoch Step: 125 / 138 Loss: 23.51332664489746 Tokens per Sec: 12903.35572599055
Epoch Step: 130 / 138 Loss: 96.8971939086914 Tokens per Sec: 12937.430696187092
Epoch Step: 135 / 138 Loss: 18.040828704833984 Tokens per Sec: 13045.331909155066
Epoch ended with duration 0:00:47.507468
Train perplexity: 1.5015483894809034
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.807323
Validation perplexity: 1.465380342875372
Epoch 150 / 1000
Epoch Step: 5 / 138 Loss: 73.5282974243164 Tokens per Sec: 13707.511203372953
Epoch Step: 10 / 138 Loss: 14.504939079284668 Tokens per Sec: 13849.9039804041
Epoch Step: 15 / 138 Loss: 18.78664779663086 Tokens per Sec: 14346.406404730365
Epoch Step: 20 / 138 Loss: 11.99776840209961 Tokens per Sec: 13650.788467769426
Epoch Step: 25 / 138 Loss: 14.387139320373535 Tokens per Sec: 12706.769344219121
Epoch Step: 30 / 138 Loss: 19.309062957763672 Tokens per Sec: 13295.467141793686
Epoch Step: 35 / 138 Loss: 54.94384002685547 Tokens per Sec: 13591.960622092382
Epoch Step: 40 / 138 Loss: 9.864505767822266 Tokens per Sec: 13817.45861796739
Epoch Step: 45 / 138 Loss: 87.21727752685547 Tokens per Sec: 13393.774203450077
Epoch Step: 50 / 138 Loss: 9.356822967529297 Tokens per Sec: 14649.617089324913
Epoch Step: 55 / 138 Loss: 10.642372131347656 Tokens per Sec: 13425.455691734776
Epoch Step: 60 / 138 Loss: 15.288570404052734 Tokens per Sec: 12905.572184602415
Epoch Step: 65 / 138 Loss: 14.395671844482422 Tokens per Sec: 13416.269412614072
Epoch Step: 70 / 138 Loss: 20.514240264892578 Tokens per Sec: 13403.226441762903
Epoch Step: 75 / 138 Loss: 16.49766731262207 Tokens per Sec: 13358.221872498376
Epoch Step: 80 / 138 Loss: 18.008590698242188 Tokens per Sec: 13039.749707488425
Epoch Step: 85 / 138 Loss: 15.801539421081543 Tokens per Sec: 13836.404835479625
Epoch Step: 90 / 138 Loss: 16.21213150024414 Tokens per Sec: 13402.611412972317
Epoch Step: 95 / 138 Loss: 14.779973030090332 Tokens per Sec: 14323.073627601005
Epoch Step: 100 / 138 Loss: 15.374130249023438 Tokens per Sec: 13263.540996307616
Epoch Step: 105 / 138 Loss: 19.05295181274414 Tokens per Sec: 13336.923411923191
Epoch Step: 110 / 138 Loss: 15.217673301696777 Tokens per Sec: 12540.620919245055
Epoch Step: 115 / 138 Loss: 19.086801528930664 Tokens per Sec: 13467.92234869731
Epoch Step: 120 / 138 Loss: 141.43136596679688 Tokens per Sec: 12998.940900621928
Epoch Step: 125 / 138 Loss: 13.926780700683594 Tokens per Sec: 12905.75912549632
Epoch Step: 130 / 138 Loss: 12.869952201843262 Tokens per Sec: 12839.813470913828
Epoch Step: 135 / 138 Loss: 15.581107139587402 Tokens per Sec: 13005.54079604481
Epoch ended with duration 0:00:47.566831
Train perplexity: 1.4525807790487646
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.832616
Validation perplexity: 1.5653147936506726
Model saved checkpoint!
Epoch 151 / 1000
Epoch Step: 5 / 138 Loss: 15.669915199279785 Tokens per Sec: 14132.577614676558
Epoch Step: 10 / 138 Loss: 8.781594276428223 Tokens per Sec: 13493.068252889692
Epoch Step: 15 / 138 Loss: 102.67487335205078 Tokens per Sec: 13167.855048570276
Epoch Step: 20 / 138 Loss: 13.645309448242188 Tokens per Sec: 13466.178252741704
Epoch Step: 25 / 138 Loss: 21.89641571044922 Tokens per Sec: 13758.382291346757
Epoch Step: 30 / 138 Loss: 20.85678482055664 Tokens per Sec: 12659.485262709013
Epoch Step: 35 / 138 Loss: 89.6156005859375 Tokens per Sec: 13017.370539108722
Epoch Step: 40 / 138 Loss: 16.490495681762695 Tokens per Sec: 13247.438866081575
Epoch Step: 45 / 138 Loss: 54.82126998901367 Tokens per Sec: 13278.412241949638
Epoch Step: 50 / 138 Loss: 17.801406860351562 Tokens per Sec: 13662.628273031143
Epoch Step: 55 / 138 Loss: 12.890904426574707 Tokens per Sec: 13773.848467006066
Epoch Step: 60 / 138 Loss: 20.329204559326172 Tokens per Sec: 13550.215921451172
Epoch Step: 65 / 138 Loss: 12.434499740600586 Tokens per Sec: 13988.273890023995
Epoch Step: 70 / 138 Loss: 15.231500625610352 Tokens per Sec: 14204.390333054826
Epoch Step: 75 / 138 Loss: 13.942331314086914 Tokens per Sec: 14375.88675487609
Epoch Step: 80 / 138 Loss: 19.334562301635742 Tokens per Sec: 14031.829507681747
Epoch Step: 85 / 138 Loss: 12.257869720458984 Tokens per Sec: 13571.61937960413
Epoch Step: 90 / 138 Loss: 10.988765716552734 Tokens per Sec: 14388.140569619045
Epoch Step: 95 / 138 Loss: 19.341903686523438 Tokens per Sec: 12997.837142496837
Epoch Step: 100 / 138 Loss: 20.336883544921875 Tokens per Sec: 13694.50922203882
Epoch Step: 105 / 138 Loss: 15.244683265686035 Tokens per Sec: 13297.938681014291
Epoch Step: 110 / 138 Loss: 19.591245651245117 Tokens per Sec: 13415.00427209591
Epoch Step: 115 / 138 Loss: 11.836458206176758 Tokens per Sec: 13168.89234865971
Epoch Step: 120 / 138 Loss: 17.34842872619629 Tokens per Sec: 12975.68129868993
Epoch Step: 125 / 138 Loss: 18.350509643554688 Tokens per Sec: 12449.524991948716
Epoch Step: 130 / 138 Loss: 11.604909896850586 Tokens per Sec: 13189.67716763969
Epoch Step: 135 / 138 Loss: 11.894647598266602 Tokens per Sec: 12808.390176210645
Epoch ended with duration 0:00:47.425996
Train perplexity: 1.3996882265043606
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.795385
Validation perplexity: 1.447487208159155
Epoch 152 / 1000
Epoch Step: 5 / 138 Loss: 16.141189575195312 Tokens per Sec: 13732.805376380305
Epoch Step: 10 / 138 Loss: 17.239686965942383 Tokens per Sec: 12546.897650434663
Epoch Step: 15 / 138 Loss: 10.638775825500488 Tokens per Sec: 14196.50346958317
Epoch Step: 20 / 138 Loss: 126.95793151855469 Tokens per Sec: 13670.396986542031
Epoch Step: 25 / 138 Loss: 11.216615676879883 Tokens per Sec: 13691.486930422765
Epoch Step: 30 / 138 Loss: 9.069502830505371 Tokens per Sec: 14056.696838018343
Epoch Step: 35 / 138 Loss: 14.036548614501953 Tokens per Sec: 14076.473245453932
Epoch Step: 40 / 138 Loss: 9.087515830993652 Tokens per Sec: 13340.851559744793
Epoch Step: 45 / 138 Loss: 19.987096786499023 Tokens per Sec: 13294.174884308442
Epoch Step: 50 / 138 Loss: 17.354663848876953 Tokens per Sec: 13424.643007618768
Epoch Step: 55 / 138 Loss: 17.333744049072266 Tokens per Sec: 13866.817565718708
Epoch Step: 60 / 138 Loss: 14.575579643249512 Tokens per Sec: 13477.52787895973
Epoch Step: 65 / 138 Loss: 16.773950576782227 Tokens per Sec: 13470.967796016072
Epoch Step: 70 / 138 Loss: 14.472245216369629 Tokens per Sec: 13131.782390573382
Epoch Step: 75 / 138 Loss: 16.856494903564453 Tokens per Sec: 13845.052674967286
Epoch Step: 80 / 138 Loss: 17.505842208862305 Tokens per Sec: 14125.977460034312
Epoch Step: 85 / 138 Loss: 14.71819019317627 Tokens per Sec: 13759.568403883912
Epoch Step: 90 / 138 Loss: 17.958084106445312 Tokens per Sec: 13791.162374922456
Epoch Step: 95 / 138 Loss: 16.096433639526367 Tokens per Sec: 12934.359695925501
Epoch Step: 100 / 138 Loss: 15.966355323791504 Tokens per Sec: 13441.372041992265
Epoch Step: 105 / 138 Loss: 12.660886764526367 Tokens per Sec: 13472.659062152363
Epoch Step: 110 / 138 Loss: 13.456830978393555 Tokens per Sec: 13541.004502409183
Epoch Step: 115 / 138 Loss: 18.129880905151367 Tokens per Sec: 13017.72777202444
Epoch Step: 120 / 138 Loss: 12.253748893737793 Tokens per Sec: 13534.602322581173
Epoch Step: 125 / 138 Loss: 12.553083419799805 Tokens per Sec: 13076.193656668933
Epoch Step: 130 / 138 Loss: 16.652284622192383 Tokens per Sec: 13822.336178906062
Epoch Step: 135 / 138 Loss: 14.97876262664795 Tokens per Sec: 12593.456549873184
Epoch ended with duration 0:00:47.218399
Train perplexity: 1.3717958865004098
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.847941
Validation perplexity: 1.76670705216412
Epoch 153 / 1000
Epoch Step: 5 / 138 Loss: 14.288846015930176 Tokens per Sec: 13816.525607285672
Epoch Step: 10 / 138 Loss: 13.092032432556152 Tokens per Sec: 14056.411860993385
Epoch Step: 15 / 138 Loss: 13.53804874420166 Tokens per Sec: 13991.403950103862
Epoch Step: 20 / 138 Loss: 11.895936965942383 Tokens per Sec: 14250.64112629702
Epoch Step: 25 / 138 Loss: 10.629324913024902 Tokens per Sec: 13600.337047335768
Epoch Step: 30 / 138 Loss: 14.177690505981445 Tokens per Sec: 14154.435102727928
Epoch Step: 35 / 138 Loss: 18.51791000366211 Tokens per Sec: 13344.98024836138
Epoch Step: 40 / 138 Loss: 13.956360816955566 Tokens per Sec: 13443.331270146538
Epoch Step: 45 / 138 Loss: 12.316960334777832 Tokens per Sec: 13829.252539314117
Epoch Step: 50 / 138 Loss: 14.320714950561523 Tokens per Sec: 13333.656347847944
Epoch Step: 55 / 138 Loss: 182.81478881835938 Tokens per Sec: 13541.801617618548
Epoch Step: 60 / 138 Loss: 9.205972671508789 Tokens per Sec: 13990.325571873846
Epoch Step: 65 / 138 Loss: 19.780420303344727 Tokens per Sec: 12944.982607966162
Epoch Step: 70 / 138 Loss: 23.523536682128906 Tokens per Sec: 13849.59041639079
Epoch Step: 75 / 138 Loss: 11.02757740020752 Tokens per Sec: 13071.110921750602
Epoch Step: 80 / 138 Loss: 13.281280517578125 Tokens per Sec: 14255.462739718905
Epoch Step: 85 / 138 Loss: 15.2315092086792 Tokens per Sec: 13379.366941437896
Epoch Step: 90 / 138 Loss: 118.46525573730469 Tokens per Sec: 13705.929341504338
Epoch Step: 95 / 138 Loss: 16.188270568847656 Tokens per Sec: 13741.233526271204
Epoch Step: 100 / 138 Loss: 17.951099395751953 Tokens per Sec: 13294.796994712664
Epoch Step: 105 / 138 Loss: 13.753946304321289 Tokens per Sec: 11834.60625340641
Epoch Step: 110 / 138 Loss: 19.304981231689453 Tokens per Sec: 13203.218684888709
Epoch Step: 115 / 138 Loss: 12.602133750915527 Tokens per Sec: 13025.652891320091
Epoch Step: 120 / 138 Loss: 79.29232025146484 Tokens per Sec: 12749.889380366089
Epoch Step: 125 / 138 Loss: 20.17278480529785 Tokens per Sec: 13633.755201857906
Epoch Step: 130 / 138 Loss: 18.188100814819336 Tokens per Sec: 12990.993333165956
Epoch Step: 135 / 138 Loss: 15.297005653381348 Tokens per Sec: 13839.443190042653
Epoch ended with duration 0:00:47.189166
Train perplexity: 1.3721005520547964
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.863970
Validation perplexity: 1.8027757853584205
Epoch 154 / 1000
Epoch Step: 5 / 138 Loss: 9.689090728759766 Tokens per Sec: 13460.893415062796
Epoch Step: 10 / 138 Loss: 26.84373664855957 Tokens per Sec: 13191.986690829826
Epoch Step: 15 / 138 Loss: 18.01236915588379 Tokens per Sec: 13644.085157927635
Epoch Step: 20 / 138 Loss: 22.029497146606445 Tokens per Sec: 13575.24327009844
Epoch Step: 25 / 138 Loss: 11.49909496307373 Tokens per Sec: 13735.396260169018
Epoch Step: 30 / 138 Loss: 20.56742286682129 Tokens per Sec: 14115.817449884542
Epoch Step: 35 / 138 Loss: 19.695777893066406 Tokens per Sec: 13229.159644061598
Epoch Step: 40 / 138 Loss: 15.741998672485352 Tokens per Sec: 13135.636199430892
Epoch Step: 45 / 138 Loss: 11.797776222229004 Tokens per Sec: 14566.422431001183
Epoch Step: 50 / 138 Loss: 15.228739738464355 Tokens per Sec: 13915.696662559076
Epoch Step: 55 / 138 Loss: 12.84382438659668 Tokens per Sec: 13164.556827530638
Epoch Step: 60 / 138 Loss: 12.946581840515137 Tokens per Sec: 13474.57010047001
Epoch Step: 65 / 138 Loss: 14.541688919067383 Tokens per Sec: 13684.415114355297
Epoch Step: 70 / 138 Loss: 10.576518058776855 Tokens per Sec: 13882.112040209777
Epoch Step: 75 / 138 Loss: 7.389765739440918 Tokens per Sec: 13463.359338244558
Epoch Step: 80 / 138 Loss: 17.67264747619629 Tokens per Sec: 13437.929096461365
Epoch Step: 85 / 138 Loss: 129.4947509765625 Tokens per Sec: 13836.243799163234
Epoch Step: 90 / 138 Loss: 11.652827262878418 Tokens per Sec: 14284.943547577564
Epoch Step: 95 / 138 Loss: 11.24117374420166 Tokens per Sec: 13797.73363567002
Epoch Step: 100 / 138 Loss: 15.725064277648926 Tokens per Sec: 13530.297261173331
Epoch Step: 105 / 138 Loss: 16.92932891845703 Tokens per Sec: 13072.915945649656
Epoch Step: 110 / 138 Loss: 17.5540828704834 Tokens per Sec: 13387.905123867871
Epoch Step: 115 / 138 Loss: 16.07700538635254 Tokens per Sec: 12102.146993326009
Epoch Step: 120 / 138 Loss: 13.059282302856445 Tokens per Sec: 13589.48550292471
Epoch Step: 125 / 138 Loss: 13.725366592407227 Tokens per Sec: 13663.064924599037
Epoch Step: 130 / 138 Loss: 11.674310684204102 Tokens per Sec: 12848.172038206227
Epoch Step: 135 / 138 Loss: 15.994483947753906 Tokens per Sec: 13634.61184436023
Epoch ended with duration 0:00:47.174091
Train perplexity: 1.321382066795213
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } }[0m
Epoch ended with duration 0:00:03.805678
Validation perplexity: 1.436602069940711
Epoch 155 / 1000
Epoch Step: 5 / 138 Loss: 14.550085067749023 Tokens per Sec: 13259.940019378928
Epoch Step: 10 / 138 Loss: 17.17624282836914 Tokens per Sec: 13297.34921647545
Epoch Step: 15 / 138 Loss: 19.78864097595215 Tokens per Sec: 13450.852991490601
Epoch Step: 20 / 138 Loss: 16.303932189941406 Tokens per Sec: 13807.161626278777
Epoch Step: 25 / 138 Loss: 76.28211975097656 Tokens per Sec: 13125.406311913786
Epoch Step: 30 / 138 Loss: 13.76301383972168 Tokens per Sec: 13873.693661286834
Epoch Step: 35 / 138 Loss: 10.707769393920898 Tokens per Sec: 13113.23294798099
Epoch Step: 40 / 138 Loss: 14.826929092407227 Tokens per Sec: 14326.529480811078
Epoch Step: 45 / 138 Loss: 10.175514221191406 Tokens per Sec: 13591.9556867205
Epoch Step: 50 / 138 Loss: 10.219558715820312 Tokens per Sec: 13775.344834092299
Epoch Step: 55 / 138 Loss: 10.53653335571289 Tokens per Sec: 14323.623312383756
Epoch Step: 60 / 138 Loss: 102.27100372314453 Tokens per Sec: 13444.85124493809
Epoch Step: 65 / 138 Loss: 11.16089153289795 Tokens per Sec: 13397.175248735757
Epoch Step: 70 / 138 Loss: 11.653057098388672 Tokens per Sec: 13890.324623871284
Epoch Step: 75 / 138 Loss: 12.257914543151855 Tokens per Sec: 13692.36994211745
Epoch Step: 80 / 138 Loss: 16.866077423095703 Tokens per Sec: 13736.777613503384
Epoch Step: 85 / 138 Loss: 142.50527954101562 Tokens per Sec: 13908.117036340753
Epoch Step: 90 / 138 Loss: 17.834247589111328 Tokens per Sec: 13070.600377033581
Epoch Step: 95 / 138 Loss: 19.159677505493164 Tokens per Sec: 13153.526810758529
Epoch Step: 100 / 138 Loss: 12.952278137207031 Tokens per Sec: 13405.167689056138
Epoch Step: 105 / 138 Loss: 12.227120399475098 Tokens per Sec: 13193.707259862103
Epoch Step: 110 / 138 Loss: 118.68701934814453 Tokens per Sec: 11884.73278995762
Epoch Step: 115 / 138 Loss: 13.413718223571777 Tokens per Sec: 13174.781432270222
Epoch Step: 120 / 138 Loss: 9.451824188232422 Tokens per Sec: 13254.967638234191
Epoch Step: 125 / 138 Loss: 15.746194839477539 Tokens per Sec: 13619.33643623591
Epoch Step: 130 / 138 Loss: 17.469175338745117 Tokens per Sec: 13142.897066731532
Epoch Step: 135 / 138 Loss: 14.721651077270508 Tokens per Sec: 13379.883681928863
Epoch ended with duration 0:00:47.495357
Train perplexity: 1.3628875567033931
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.805991
Validation perplexity: 1.4580562642221682
Model saved checkpoint!
Epoch 156 / 1000
Epoch Step: 5 / 138 Loss: 15.580077171325684 Tokens per Sec: 13385.67097636515
Epoch Step: 10 / 138 Loss: 15.263664245605469 Tokens per Sec: 12598.961790724372
Epoch Step: 15 / 138 Loss: 55.52501678466797 Tokens per Sec: 13124.419093215749
Epoch Step: 20 / 138 Loss: 9.96445369720459 Tokens per Sec: 13265.898252126535
Epoch Step: 25 / 138 Loss: 35.42539596557617 Tokens per Sec: 13759.378279761917
Epoch Step: 30 / 138 Loss: 137.9551239013672 Tokens per Sec: 13676.614140410453
Epoch Step: 35 / 138 Loss: 120.25696563720703 Tokens per Sec: 13506.25008700446
Epoch Step: 40 / 138 Loss: 14.352001190185547 Tokens per Sec: 13841.611796778441
Epoch Step: 45 / 138 Loss: 21.102027893066406 Tokens per Sec: 13504.225567411428
Epoch Step: 50 / 138 Loss: 16.736345291137695 Tokens per Sec: 14030.423595875704
Epoch Step: 55 / 138 Loss: 11.8424072265625 Tokens per Sec: 14193.061460343382
Epoch Step: 60 / 138 Loss: 12.299643516540527 Tokens per Sec: 13333.341542009704
Epoch Step: 65 / 138 Loss: 12.031585693359375 Tokens per Sec: 13624.647748104038
Epoch Step: 70 / 138 Loss: 17.832035064697266 Tokens per Sec: 13635.419392929578
Epoch Step: 75 / 138 Loss: 9.161380767822266 Tokens per Sec: 13271.050039088948
Epoch Step: 80 / 138 Loss: 10.265835762023926 Tokens per Sec: 14300.83955847177
Epoch Step: 85 / 138 Loss: 9.306496620178223 Tokens per Sec: 13470.511191204185
Epoch Step: 90 / 138 Loss: 10.19370174407959 Tokens per Sec: 13543.895538962723
Epoch Step: 95 / 138 Loss: 19.271774291992188 Tokens per Sec: 13979.338346638195
Epoch Step: 100 / 138 Loss: 16.019758224487305 Tokens per Sec: 13712.326002213564
Epoch Step: 105 / 138 Loss: 13.712113380432129 Tokens per Sec: 12621.002662812227
Epoch Step: 110 / 138 Loss: 10.053327560424805 Tokens per Sec: 13632.714253435803
Epoch Step: 115 / 138 Loss: 99.84838104248047 Tokens per Sec: 13231.307185764534
Epoch Step: 120 / 138 Loss: 17.140321731567383 Tokens per Sec: 13047.805616263433
Epoch Step: 125 / 138 Loss: 11.655350685119629 Tokens per Sec: 13441.977969869158
Epoch Step: 130 / 138 Loss: 11.932195663452148 Tokens per Sec: 13283.233529914236
Epoch Step: 135 / 138 Loss: 13.930002212524414 Tokens per Sec: 12397.61521795015
Epoch ended with duration 0:00:47.405772
Train perplexity: 1.4245412559636645
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.836845
Validation perplexity: 1.548031350433913
Epoch 157 / 1000
Epoch Step: 5 / 138 Loss: 8.20489501953125 Tokens per Sec: 13534.088902495449
Epoch Step: 10 / 138 Loss: 14.898662567138672 Tokens per Sec: 13769.35803213404
Epoch Step: 15 / 138 Loss: 13.255148887634277 Tokens per Sec: 12955.39121250717
Epoch Step: 20 / 138 Loss: 14.946972846984863 Tokens per Sec: 13339.089334802182
Epoch Step: 25 / 138 Loss: 103.67942810058594 Tokens per Sec: 13200.677927643157
Epoch Step: 30 / 138 Loss: 16.340059280395508 Tokens per Sec: 13598.118667186916
Epoch Step: 35 / 138 Loss: 10.517189025878906 Tokens per Sec: 14285.369669569693
Epoch Step: 40 / 138 Loss: 8.284990310668945 Tokens per Sec: 13824.10910087008
Epoch Step: 45 / 138 Loss: 16.498809814453125 Tokens per Sec: 13542.220297708483
Epoch Step: 50 / 138 Loss: 13.508702278137207 Tokens per Sec: 14550.350663920759
Epoch Step: 55 / 138 Loss: 11.4615478515625 Tokens per Sec: 13670.993280483883
Epoch Step: 60 / 138 Loss: 80.40736389160156 Tokens per Sec: 14196.943258261908
Epoch Step: 65 / 138 Loss: 13.377729415893555 Tokens per Sec: 13055.021934863342
Epoch Step: 70 / 138 Loss: 12.454261779785156 Tokens per Sec: 13170.05470087176
Epoch Step: 75 / 138 Loss: 18.479534149169922 Tokens per Sec: 13507.359002528234
Epoch Step: 80 / 138 Loss: 13.847341537475586 Tokens per Sec: 14026.473671472979
Epoch Step: 85 / 138 Loss: 10.622222900390625 Tokens per Sec: 14174.815795837174
Epoch Step: 90 / 138 Loss: 11.900604248046875 Tokens per Sec: 14012.622822622425
Epoch Step: 95 / 138 Loss: 12.792647361755371 Tokens per Sec: 13139.853994023566
Epoch Step: 100 / 138 Loss: 16.26438331604004 Tokens per Sec: 13509.746530186745
Epoch Step: 105 / 138 Loss: 109.00023651123047 Tokens per Sec: 12590.300276823873
Epoch Step: 110 / 138 Loss: 18.710773468017578 Tokens per Sec: 13120.279160297474
Epoch Step: 115 / 138 Loss: 11.66556167602539 Tokens per Sec: 13538.44970232316
Epoch Step: 120 / 138 Loss: 14.097082138061523 Tokens per Sec: 13204.3978657451
Epoch Step: 125 / 138 Loss: 84.68668365478516 Tokens per Sec: 12168.288363778216
Epoch Step: 130 / 138 Loss: 12.447938919067383 Tokens per Sec: 13535.59563456408
Epoch Step: 135 / 138 Loss: 15.209939956665039 Tokens per Sec: 13198.091942070303
Epoch ended with duration 0:00:47.303244
Train perplexity: 1.337802153443356
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.799945
Validation perplexity: 1.4467173538128768
Epoch 158 / 1000
Epoch Step: 5 / 138 Loss: 15.63874626159668 Tokens per Sec: 13223.336701208518
Epoch Step: 10 / 138 Loss: 16.991838455200195 Tokens per Sec: 13733.854213726374
Epoch Step: 15 / 138 Loss: 101.22145080566406 Tokens per Sec: 13602.832570507016
Epoch Step: 20 / 138 Loss: 19.290658950805664 Tokens per Sec: 13295.102688708648
Epoch Step: 25 / 138 Loss: 15.925588607788086 Tokens per Sec: 12772.812457914028
Epoch Step: 30 / 138 Loss: 21.98650550842285 Tokens per Sec: 13180.31074903858
Epoch Step: 35 / 138 Loss: 24.34253692626953 Tokens per Sec: 13903.882999859195
Epoch Step: 40 / 138 Loss: 16.711490631103516 Tokens per Sec: 13547.90997115106
Epoch Step: 45 / 138 Loss: 10.478625297546387 Tokens per Sec: 13607.266235220795
Epoch Step: 50 / 138 Loss: 24.86494255065918 Tokens per Sec: 13510.327448707276
Epoch Step: 55 / 138 Loss: 14.931427001953125 Tokens per Sec: 13990.157899236265
Epoch Step: 60 / 138 Loss: 11.371269226074219 Tokens per Sec: 13668.525981266825
Epoch Step: 65 / 138 Loss: 11.560457229614258 Tokens per Sec: 13527.688725146396
Epoch Step: 70 / 138 Loss: 19.94301414489746 Tokens per Sec: 14181.315334608636
Epoch Step: 75 / 138 Loss: 23.958423614501953 Tokens per Sec: 13750.438395554964
Epoch Step: 80 / 138 Loss: 16.2003231048584 Tokens per Sec: 12950.193536448955
Epoch Step: 85 / 138 Loss: 11.04418659210205 Tokens per Sec: 13453.08850257035
Epoch Step: 90 / 138 Loss: 13.35086727142334 Tokens per Sec: 14284.99358223415
Epoch Step: 95 / 138 Loss: 152.88819885253906 Tokens per Sec: 13844.681152924653
Epoch Step: 100 / 138 Loss: 20.596572875976562 Tokens per Sec: 12990.962499201809
Epoch Step: 105 / 138 Loss: 15.750308990478516 Tokens per Sec: 12307.764170592784
Epoch Step: 110 / 138 Loss: 21.518388748168945 Tokens per Sec: 13445.786725965956
Epoch Step: 115 / 138 Loss: 14.669005393981934 Tokens per Sec: 13386.099952660432
Epoch Step: 120 / 138 Loss: 19.437746047973633 Tokens per Sec: 12116.646526891678
Epoch Step: 125 / 138 Loss: 16.243236541748047 Tokens per Sec: 13396.856382443553
Epoch Step: 130 / 138 Loss: 10.970100402832031 Tokens per Sec: 13202.93731854161
Epoch Step: 135 / 138 Loss: 15.303093910217285 Tokens per Sec: 13511.561780929907
Epoch ended with duration 0:00:47.536024
Train perplexity: 1.4537833060179266
Example #1[0m
Src : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 ) ; }[0m
Trg : private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , null ) ; }[0m
Pred: private static TYPE_1 METHOD_1 ( java.lang.String [ ] VAR_1 , long [ ] values , TYPE_2 VAR_2 ) { java.util.List < java.lang.String > VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; java.util.List < TYPE_4 > VAR_4 = new java.util.ArrayList < > ( ) ; for ( long value : values ) { VAR_4 . METHOD_3 ( value ) ; } return new TYPE_1 ( TYPE_5 . METHOD_4 ( VAR_5 , STRING_1 ) , STRING_2 , 0 , VAR_2 . METHOD_5 ( ) , VAR_3 , VAR_4 , STRING_3 , STRING_3 , STRING_3 ) ; }[0m
Example #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 , boolean VAR_6 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; } catch ( java.lang.Exception e ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 [ ] VAR_2 , TYPE_3 VAR_3 , TYPE_4 VAR_4 , boolean VAR_5 ) { TYPE_5 rule = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; if ( rule != null ) { try { rule . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; } catch ( STRING_1 ) { METHOD_5 ( STRING_1 , rule . METHOD_6 ( ) . METHOD_7 ( ) , e.toString ( ) ) ; } } }[0m
Example #3[0m
Src : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Trg : public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 ) ; } } }[0m
Pred: public void METHOD_1 ( ) { if ( ( ! ( VAR_1 ) ) && ( ( VAR_2 ) != null ) ) { for ( TYPE_1 node : VAR_2 ) { java.lang.String VAR_3 = STRING_1 + ( ( STRING_2 + STRING_3 ) + STRING_4 ) ; mContext . METHOD_2 ( VAR_4 , node , mContext . METHOD_3 ( node ) , VAR_3 , null ) ; } } }[0m
Epoch ended with duration 0:00:03.826380
Validation perplexity: 1.5200092601779118
Training was early stopped on epoch 159 with early stopping rounds 25
[24.027640083302984, 12.036186405931339, 8.445443760711505, 6.939609102221523, 6.390251888732522, 5.893962316655721, 5.646258111578379, 5.173116975778161, 5.049584014235297, 4.826113899290721, 4.267730130133282, 4.264018371910928, 4.279407106611446, 4.002298930188894, 3.7897161975465483, 3.561674288276693, 3.656203210616307, 3.435336448498905, 3.3537253745356965, 3.148006595821118, 3.0579790308630623, 2.9567703933727123, 2.8808713761297065, 3.058628829144338, 2.875426355883203, 2.55254051307655, 2.654911422993115, 2.6664706823691646, 2.7253577224218493, 2.718242875894523, 2.4371229671629027, 2.336142980927082, 2.524402792974658, 2.2754936827347496, 2.357071791420756, 2.5627929701779406, 2.131354646293749, 2.4598261719041403, 2.385764666550756, 2.3213681548251914, 2.2436997912759717, 2.033562033779627, 2.135097182434385, 2.131984701960928, 2.1144048890609057, 2.085917970229412, 1.9380610100241407, 2.260014811771417, 2.10105840216763, 2.0252098389307194, 2.0260123453466337, 1.7719367857177581, 2.0108441450422196, 2.1248507165035937, 2.041432170880268, 1.9185638440106505, 1.8430759954550116, 1.8457086585902331, 1.9171631330694405, 1.9395409746018946, 2.004308936884112, 1.9344877028113026, 1.913030900614623, 1.905396151087919, 1.8455273247790018, 2.1863376343138388, 1.6781370324539147, 1.7547950126357268, 1.841555556372537, 1.6618811884984055, 1.7925450365492006, 1.8863174019559443, 1.7986674769940103, 1.7794054640334493, 1.8639093990871276, 1.84987246104546, 1.8218508355974043, 1.6308771978909853, 1.8531824810245314, 1.7136281478071738, 1.7089743438467966, 1.6910882257075959, 1.6041301355133124, 1.5822573383536618, 1.6915011954404426, 1.7202892818427613, 1.609833916940288, 1.652155493802797, 1.6106720837099138, 1.560678184921499, 1.5982337073634503, 1.5812425133355088, 1.6934574415234556, 1.5939812775032705, 1.6030058505347822, 1.5651008380549443, 1.6521263096278163, 1.6130191201781485, 1.5717392096151086, 1.6009099250041352, 1.6146376668451712, 1.5428535767129052, 1.534887077151531, 1.4650526662756398, 1.5715362317564094, 1.499398171070534, 1.5049934021312505, 1.4512871629866038, 1.652990044714187, 1.5564102667952473, 1.4825475693241696, 1.6187935880365087, 1.5871228551162218, 1.5321207276308437, 1.6198584479847573, 1.4444153064557157, 1.5410349387051887, 1.4726680025718055, 1.5843011246435288, 1.5622242191367344, 1.4717939495522578, 1.3997105172499762, 1.5644994409448638, 1.410176514777194, 1.5404499635190314, 1.4441312569457387, 1.455703762934593, 1.3821584021413973, 1.3938998377135636, 1.5493317762433019, 1.509567450515957, 1.5704043231409222, 1.429245852325463, 1.3910426620982994, 1.4567389772241233, 1.4079496429562304, 1.4520717254633486, 1.3666219331927036, 1.5491510368254893, 1.4318226650408312, 1.4205280961227467, 1.4013748031755686, 1.3886921635408018, 1.3268391805131265, 1.3807977795821151, 1.3361372882016498, 1.3968770409413527, 1.5027540037140739, 1.438264623824472, 1.5015483894809034, 1.4525807790487646, 1.3996882265043606, 1.3717958865004098, 1.3721005520547964, 1.321382066795213, 1.3628875567033931, 1.4245412559636645, 1.337802153443356, 1.4537833060179266]
[16.777292167108843, 9.791210585621393, 7.459015360873544, 7.162957385614476, 5.612162961874353, 5.812269285398027, 5.037229222914501, 5.119810172016176, 4.891460821842657, 4.355919807071152, 5.252271128098221, 3.961774758074347, 4.826008108187848, 3.6417724238314992, 3.1888031258814307, 4.112191190087413, 3.7108375646681453, 3.999484956014689, 3.442343755000731, 2.93408908957239, 2.8591156180155064, 3.388427656724242, 2.8084930343320678, 2.596441345098639, 2.82416944362275, 2.8260750658975415, 2.5994354405101854, 2.7251854248713414, 2.572573972065849, 3.1982113500426417, 2.794061873612426, 2.250162191675932, 2.0226413353634993, 2.4675900020884227, 2.502886009059066, 2.185387174604419, 2.7541064871441634, 2.075453286026108, 2.2699921536668772, 1.8528738920402992, 2.6149385126012215, 2.092687202078531, 2.133940311900113, 2.459911886524142, 1.817862482668799, 2.194027794404368, 1.7239226292627219, 2.195450308606493, 1.9052917048442506, 2.2666238963948233, 1.6892168630219218, 1.8369928644337454, 1.9223773675367921, 1.950494134597975, 2.2572954889092745, 1.9006172324778852, 1.794487267309815, 2.320509455703313, 1.7932180662540458, 1.8843418727133991, 2.364556684310298, 1.731186009727821, 2.141642383256832, 1.5924710625263494, 1.9290938075237223, 1.8195887089579852, 1.8017821626044954, 2.033214026269944, 2.2155129712991948, 1.7013124643432522, 1.7107506930739413, 2.063922579182496, 1.707102249091111, 1.6963669199422402, 1.499390945870126, 1.7901703084211813, 1.8015829697613324, 2.2333222443258873, 1.469970068686442, 1.4964349176931226, 1.628514902218671, 1.7639835562349029, 1.4497399778118263, 1.6090771333868603, 1.5788597333098744, 1.5814195043400894, 1.698571065113584, 1.7707867680561018, 1.9228221249962183, 2.0114713569291163, 1.8991256310525622, 1.5230401232077275, 1.6569077499741904, 1.6648744294677655, 1.4537973800278554, 1.7089981820109401, 1.5355183905117098, 1.5234736490028553, 1.781662627591091, 1.7798842150337675, 1.4945106978894445, 1.7815001828132637, 1.9715565852404395, 1.7173232723340763, 1.4312151012393428, 1.8965370616395785, 1.384090914307655, 1.5733546211515466, 1.457212135148285, 1.5131388602888058, 1.531189893709689, 1.920557714858433, 1.3599307965698624, 1.8023139053362167, 1.8328868809527217, 1.6408515600130127, 1.5278283018795333, 1.3571482616745727, 1.4883001375628315, 1.7127189504494431, 1.501300386448264, 1.667908128369977, 1.4220690979738557, 1.471812070650277, 1.4575202792325375, 1.6541840084648833, 1.4081575077277144, 1.4065764809152912, 1.3209753143026297, 1.6990655611781247, 1.4818834156781608, 1.6864135637890183, 1.8461576043420211, 1.3156153400098207, 1.5053026549241961, 1.3195656526373538, 1.4849042415652258, 1.400159673781284, 1.3869929547957727, 1.5570137391532934, 2.0154368778132383, 1.8553533647131344, 1.6859570881072035, 1.3158056660679653, 1.4584668658465723, 1.6792924304207528, 1.7024815648363367, 1.5595049329572512, 1.5836990633200003, 1.465380342875372, 1.5653147936506726, 1.447487208159155, 1.76670705216412, 1.8027757853584205, 1.436602069940711, 1.4580562642221682, 1.548031350433913, 1.4467173538128768, 1.5200092601779118]
Model saved checkpoint!

====STARTING EVALUATION====
Data set sizes (number of sentence pairs):
train 8793
valid 1100
test 1098 

First training example:
src: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
trg: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; byte [ ] VAR_2 = TYPE_2 . METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_2 , 0 , VAR_2 . length ) ; assertEquals ( STRING_1 , VAR_1 . METHOD_4 ( ) . get ( STRING_2 ) ) ; }
diff_alignment: –∑–∞–º–µ–Ω–∞
diff_prev: org.junit.Assert.assertEquals
diff_updated: assertEquals 

Most common words:
         )     194026
         (     193976
         .      92332
         ;      82530
   –ø–∞–¥–¥–∏–Ω–≥      54790
         ,      54180
         {      42036
         }      41868
     VAR_1      41750
  —É–¥–∞–ª–µ–Ω–∏–µ      41184 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 )
05 (
06 .
07 ;
08 –ø–∞–¥–¥–∏–Ω–≥
09 , 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 8514 35
—É–¥–∞–ª–µ–Ω–∏–µ 41184 13
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 13606 23
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 54790 8
Number of words (types): 758
Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations.png...
Duration: 0:00:04.336715

Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations_8_threshold.png...
Duration: 0:00:02.022687

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations.png...
Duration: 0:00:03.368176

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations_8_threshold.png...
Duration: 0:00:01.761137

Starting conducting edit representation visualization experiment for defects4j_2d_representations.png...
Duration: 0:00:00.633598

Starting conducting edit representation visualization experiment for test300_2d_representations.png...
Duration: 0:00:01.577232

Starting conducting edit representation visualization experiment for val300_2d_representations.png...
Duration: 0:00:01.665570

Starting conducting edit representation visualization experiment for train300_2d_representations.png...
Duration: 0:00:01.654411

Starting conducting edit representation visualization experiment for test_2d_representations.png...
Duration: 0:00:04.819681

Starting conducting edit representation visualization experiment for val_2d_representations.png...
Duration: 0:00:04.756154

Starting conducting edit representation visualization experiment for train5000_2d_representations.png...
Duration: 0:00:20.990751

Start conducting accuracy calculation experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy: 22 / 388 = 0.05670103092783505
Top-3 accuracy: 24 / 388 = 0.061855670103092786
Top-5 accuracy: 24 / 388 = 0.061855670103092786
Top-10 accuracy: 24 / 388 = 0.061855670103092786
Top-50 accuracy: 26 / 388 = 0.06701030927835051
Duration: 0:01:56.853072

Start conducting accuracy calculation experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy: 59 / 244 = 0.24180327868852458
Top-3 accuracy: 67 / 244 = 0.27459016393442626
Top-5 accuracy: 67 / 244 = 0.27459016393442626
Top-10 accuracy: 67 / 244 = 0.27459016393442626
Top-50 accuracy: 67 / 244 = 0.27459016393442626
Duration: 0:01:07.475761

Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:05.520940

Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 25 / 300 = 0.08333333333333333
Top-3 accuracy: 32 / 300 = 0.10666666666666667
Top-5 accuracy: 33 / 300 = 0.11
Top-10 accuracy: 33 / 300 = 0.11
Top-50 accuracy: 35 / 300 = 0.11666666666666667
Duration: 0:01:23.461556

Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 20 / 300 = 0.06666666666666667
Top-3 accuracy: 27 / 300 = 0.09
Top-5 accuracy: 28 / 300 = 0.09333333333333334
Top-10 accuracy: 30 / 300 = 0.1
Top-50 accuracy: 32 / 300 = 0.10666666666666667
Duration: 0:01:22.682384

Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 35 / 300 = 0.11666666666666667
Top-3 accuracy: 40 / 300 = 0.13333333333333333
Top-5 accuracy: 41 / 300 = 0.13666666666666666
Top-10 accuracy: 44 / 300 = 0.14666666666666667
Top-50 accuracy: 48 / 300 = 0.16
Duration: 0:01:22.364747

Start conducting one shot learning experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 2 / 64 = 0.03125
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 2 / 64 = 0.03125
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 2 / 64 = 0.03125
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 2 / 64 = 0.03125
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 2 / 64 = 0.03125

Top-1 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 11 / 324 = 0.033950617283950615
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 12 / 324 = 0.037037037037037035
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 12 / 324 = 0.037037037037037035
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 12 / 324 = 0.037037037037037035
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 14 / 324 = 0.043209876543209874
================
Correct Examples
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: private long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 , VAR_3 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
---------------
Class: Narrow method visibility
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public null[0m
+++++++++++++++
[32mExample #1[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public )[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: private void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
[32mExample #2[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> void METHOD_1 ( int index , short value ) ;[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: public )[0m
[31mExample #2[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> boolean METHOD_1 ( ) ;[0m
Pred: public )[0m
[31mExample #3[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public <unk> java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: public )[0m
[31mExample #4[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : <unk> float METHOD_1 ( int index ) ;[0m
Pred: public )[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
Trg : public <unk> void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
Pred: public )[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
Trg : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . get ( ) . project ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Pred: private[0m
[31mExample #4[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
Pred: [0m
[31mExample #5[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Pred: protected[0m
---------------
Class: Add null check
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: private void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: protected METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) ; }[0m
[31mExample #3[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: public[0m
[31mExample #4[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public )[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } }[0m
Pred: public )[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
[31mExample #2[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . StorageDomain ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , true , null , null , VAR_1 , true , null , false , null , null ) ; }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: public[0m
[31mExample #6[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Pred: public[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #10[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: public[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #12[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Pred: private[0m
[31mExample #15[0m
Src : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: public STRING_1 )[0m
[31mExample #16[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Pred: public[0m
[31mExample #17[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public a )[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public constants[0m
[31mExample #20[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , null ) , STRING_1 , true ) ; }[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
Pred: private[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: static void METHOD_1 ( type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #2[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int netId ) throws TYPE_2 ;[0m
Pred: public VAR_1 )[0m
[31mExample #3[0m
Src : public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Pred: public[0m
[31mExample #4[0m
Src : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: public[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public[0m
[31mExample #6[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: public[0m
[31mExample #7[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: public[0m
[31mExample #8[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public[0m
[31mExample #9[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: private void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: <[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . new TYPE_1 ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
[31mExample #12[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: public VAR_2 )[0m
[31mExample #13[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public[0m
[31mExample #15[0m
Src : native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : native boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: ,[0m
[31mExample #16[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public[0m
[31mExample #17[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
[31mExample #18[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: public[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: public ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: private[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
Pred: public java.lang.Boolean ( ) ; }[0m
---------------
Class: Add/Remove this qualifier
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public VAR_1[0m
[31mExample #2[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
[31mExample #3[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: public new[0m
[31mExample #5[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: public private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #6[0m
Src : private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: public private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public[0m
[31mExample #8[0m
Src : protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Trg : public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Pred: public org.ovirt.engine.core.common.businessentities.VDSGroup org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: public[0m
[31mExample #10[0m
Src : private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: public private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
[31mExample #11[0m
Src : private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #12[0m
Src : protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Trg : public TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Pred: public )[0m
[31mExample #13[0m
Src : protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Trg : public void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Pred: public[0m
[31mExample #14[0m
Src : private static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: [0m
[31mExample #15[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: public protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: public VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: public ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: protected void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: ([0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: void METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . org.ovirt.engine.core.compat.Guid org.ovirt.engine.core.compat.Guid ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
---------------
Class: Change method return value
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String getRefName ( ) { return ref ; }[0m
Pred: public STRING_1 )[0m
---------------
Class: Change method return value,Change return type
Golden example (False):
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: private public METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public )[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: private long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 , VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: public )[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
[31mExample #4[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: private int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[31mExample #5[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
[31mExample #6[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Trg : private static org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Pred: protected static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
[31mExample #7[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Pred: public[0m
[31mExample #8[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: private static METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[31mExample #9[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #10[0m
Src : private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Pred: public protected void METHOD_1 ( TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
[31mExample #11[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . network object ) { return object . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
Pred: public )[0m
[31mExample #12[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: public object ( ) ) ; }[0m
[31mExample #13[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: ,[0m
[31mExample #14[0m
Src : public static native byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static native byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: public VAR_1[0m
[31mExample #15[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
[31mExample #16[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: public object ([0m
[31mExample #17[0m
Src : native void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: public VAR_2[0m
[31mExample #18[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: static TYPE_1 ( VAR_3 , VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
[31mExample #19[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: public[0m
[31mExample #20[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: ,[0m
[31mExample #21[0m
Src : public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: public domain ) ; }[0m
[31mExample #22[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: protected synchronized ( ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #23[0m
Src : public static native void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: public )[0m
[31mExample #24[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Pred: public[0m
[31mExample #25[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Pred: static void METHOD_1 ( VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
[31mExample #26[0m
Src : public static native void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: public VAR_2 )[0m
[31mExample #27[0m
Src : native void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: ,[0m
[31mExample #28[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: public[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public public java.util.List < > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
Pred: public VAR_1 )[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: private public void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public public void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: private public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
---------------
Class: Change return type
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface : : ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
[31mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: [0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: static[0m
[31mExample #4[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (False):
[31mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_2 , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_1 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 ) ; return VAR_3 == null ? null ? null : METHOD_3 ( VAR_3 ) ; }[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #4[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: private[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Narrow method visibility
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public null[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: public protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: private TYPE_1 TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
[31mExample #3[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: public[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) { return user ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return user ; }[0m
Pred: public }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( STRING_1 ) ) ) { }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public line )[0m
[31mExample #3[0m
Src : public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String value ) { if ([0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , length , this . VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args ) ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a b ; return c ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
[31mExample #5[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: private static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
[31mExample #6[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: public VAR_1 )[0m
[31mExample #7[0m
Src : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: private public Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
[31mExample #8[0m
Src : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
Pred: public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
[31mExample #9[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public )[0m
[31mExample #11[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public[0m
[31mExample #12[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: public )[0m
[31mExample #14[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public null[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , branch , null , null ) ; }[0m
Pred: <[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: public ) ; }[0m
[31mExample #9[0m
Src : public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public this ) ; }[0m
[31mExample #10[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , result ) ; }[0m
[31mExample #12[0m
Src : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
[31mExample #16[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public VAR_1 )[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { when ( validator ) . METHOD_2 ( validator ) . METHOD_2 ( TYPE_1 . any ( class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: public ) ; }[0m
[31mExample #23[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public java.util.List ( ) ; }[0m
[31mExample #25[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #27[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: public[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public[0m
[31mExample #30[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Pred: void[0m
---------------
Class: Remove redundant initialization
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: protected void METHOD_1 ( ) { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public )[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
Pred: protected void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 msg ) ; }[0m
[31mExample #3[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #8[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: [0m
[31mExample #9[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
[31mExample #10[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: private static int METHOD_1 ( int x , int y ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { when ( VAR_1 ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #12[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: public INT_1 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
[31mExample #16[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
Pred: TYPE_1[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: [0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
[31mExample #20[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
[31mExample #21[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: private static int METHOD_1 ( int x , int y ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
[31mExample #23[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: public VAR_2 ) ; }[0m
[31mExample #24[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: public ) ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
[31mExample #26[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #27[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: public ) ; }[0m
[31mExample #28[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public[0m
[31mExample #29[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Pred: private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
[31mExample #30[0m
Src : public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public STRING_1 )[0m
[31mExample #31[0m
Src : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } setItems ( null ) ; } }[0m
[31mExample #32[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
Pred: public[0m
[31mExample #33[0m
Src : public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
Pred: public[0m
[31mExample #34[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; TYPE_1 METHOD_6 ( ) . resource = get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #35[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: public ) ; }[0m
[31mExample #36[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
[31mExample #37[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Pred: public ) ; }[0m
[31mExample #38[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #39[0m
Src : public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public STRING_1 )[0m
[31mExample #40[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: [0m
[31mExample #41[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: protected[0m
[31mExample #42[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( getEntity ( ) ) { METHOD_2 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
[31mExample #43[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #44[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public VAR_1 ) ; }[0m
[31mExample #45[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
[31mExample #46[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 value ) { this . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
[31mExample #47[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public[0m
[31mExample #48[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public[0m
[31mExample #49[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
[31mExample #50[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public[0m
[31mExample #51[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
[31mExample #52[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
Pred: public[0m
[31mExample #53[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public[0m
[31mExample #54[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: protected[0m
[31mExample #55[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public[0m
[31mExample #56[0m
Src : public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Pred: public static long METHOD_1 ( long arg1 , long VAR_1 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
[31mExample #57[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: [0m
[31mExample #58[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: protected void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
[31mExample #59[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public[0m
[31mExample #60[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public ) ; }[0m
[31mExample #61[0m
Src : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: public this ) ; TYPE_1 . METHOD_1 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
[31mExample #62[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) . ( VAR_1 . getMessage ( VAR_2 ) ) ; }[0m
[31mExample #63[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: private void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public target )[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Pred: public ([0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void void METHOD_1 ( throws java.lang.Exception java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
[31mExample #5[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean validate ( ) ;[0m
Pred: public[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public[0m
---------------
Class: Rename parameter
Golden example (False):
[31mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public native boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public[0m
[31mExample #2[0m
Src : public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
Trg : public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
Pred: public[0m
[31mExample #3[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: public VAR_1 )[0m
[31mExample #4[0m
Src : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) ;[0m
Pred: public Version version )[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private <unk> java.lang.String METHOD_1 ( ) ;[0m
Pred: public )[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } } } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true , true ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public public static METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } } }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
[31mExample #6[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: public[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Pred: ([0m
[31mExample #2[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: private TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( TYPE_2 > ( VAR_1 ) ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: private TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
[31mExample #4[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( TYPE_1 , version . toString ( ) , returnValue ) ; }[0m
[31mExample #5[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
Pred: public offset ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
Pred: public[0m
[31mExample #7[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public public java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
Pred: public[0m
[31mExample #10[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public[0m
[31mExample #14[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public value )[0m
[31mExample #16[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: public ) ([0m
[31mExample #18[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getStoragePoolId ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: private void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
[31mExample #20[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . getStoragePoolId ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Pred: [0m
[31mExample #22[0m
Src : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public[0m
[31mExample #23[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: public VAR_2 ) ; }[0m
[31mExample #24[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: public VAR_1 , VAR_1 ) ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #26[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public )[0m
[31mExample #27[0m
Src : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . getName ( ) ; }[0m
Pred: public )[0m
[31mExample #28[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public )[0m
[31mExample #29[0m
Src : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_1 ( storage ) ; }[0m
Pred: public storage )[0m
[31mExample #30[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public[0m
[31mExample #31[0m
Src : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
---------------
Class: Replace statement
Golden example (False):
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public VAR_1 )[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = 10 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
Pred: protected public long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public[0m
---------------
Class: unclear
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected <unk> byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: public[0m
[31mExample #2[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public )[0m
---------------
================
Duration: 0:03:45.011293

Start conducting one shot learning experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 11 / 56 = 0.19642857142857142
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 11 / 56 = 0.19642857142857142
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 11 / 56 = 0.19642857142857142
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 11 / 56 = 0.19642857142857142
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 11 / 56 = 0.19642857142857142

Top-1 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 30 / 188 = 0.1595744680851064
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 32 / 188 = 0.1702127659574468
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 35 / 188 = 0.18617021276595744
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 35 / 188 = 0.18617021276595744
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 35 / 188 = 0.18617021276595744
================
Correct Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
[32mExample #2[0m
Src : private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
[32mExample #2[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
[32mExample #3[0m
Src : static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
[32mExample #4[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
[32mExample #2[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
[32mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: [0m
+++++++++++++++
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
[32mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
---------------
Class: Remove statement,Move existing statements in try block
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
---------------
Class: Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ; } }[0m
Trg : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
Pred: public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , org.mockito.Matchers . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
[32mExample #4[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #2[0m
Src : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Trg : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Pred: private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; msg.obj = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Trg : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Pred: [0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Trg : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Pred: public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #4[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . METHOD_8 ( ) , null ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } TYPE_2 . METHOD_5 ( VAR_5 ) ; } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 , 0 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) ) ; }[0m
[31mExample #9[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
---------------
Class: Add statement
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 section ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = section . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; s . METHOD_10 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_7 ( VAR_5 , VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
[31mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Pred: public boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! ( VAR_1 ) ; }[0m
---------------
Class: Change comparison operator (e.g. >) in condition
Golden example (False):
[31mExample #1[0m
Src : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Trg : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Trg : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Pred: private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
---------------
Class: Change exception type in catch clause
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Trg : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Pred: public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( java.util.Map VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
[31mExample #3[0m
Src : private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Trg : private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Pred: private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
[31mExample #4[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; org.junit.Assert.assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
[31mExample #6[0m
Src : static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Trg : static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Pred: static int METHOD_1 ( long VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( VAR_3 . RunQuery ( , VAR_1 ) , aQuery ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( args . inV ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , version , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
[31mExample #7[0m
Src : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Trg : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 . length , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Pred: protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
[31mExample #4[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
---------------
Class: Change qualified name in response to a move class refactoring
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Trg : public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Pred: public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ ] ] ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_2 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network : : ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network : : ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: [0m
[31mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , METHOD_3 ( ) ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Trg : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Pred: [0m
[31mExample #5[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; }[0m
Pred: [0m
[31mExample #7[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: [0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Pred: [0m
[31mExample #9[0m
Src : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Trg : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Pred: [0m
[31mExample #10[0m
Src : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Pred: [0m
[31mExample #11[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ) ; }[0m
[31mExample #12[0m
Src : private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ; }[0m
[31mExample #13[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 , VAR_2 ) , aQuery ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: [0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , METHOD_4 ( ) ) ; return map ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { return VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , long time VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; try { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Trg : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Pred: public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; try { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.ui.frontend.IAsyncConverter ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . 1 ; 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
Trg : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type ) ; return vm ; }[0m
Pred: public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_1 , response , VAR_3 , VAR_2 ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
[31mExample #3[0m
Src : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 ) . ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
[31mExample #10[0m
Src : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( ) ) ; return VAR_2 ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
[31mExample #16[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > : : : TYPE_1 TYPE_1 TYPE_1 TYPE_1 ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; }[0m
Trg : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
Pred: protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! ( VAR_1 ) ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( class ) ) ; }[0m
[31mExample #18[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 ) ; } }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
[31mExample #19[0m
Src : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version ) ) ) . thenReturn ( new java.util.ArrayList < TYPE_2 . METHOD_6 ( STRING_1 ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
[31mExample #25[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , options ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
[31mExample #26[0m
Src : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Trg : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
---------------
Class: Remove redundant initialization,Replace statement
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: [0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_5 ( ) ; assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_2 . assertTrue ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
[31mExample #5[0m
Src : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Trg : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: [0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_7 ( VAR_3 ) ; METHOD_7 ( VAR_3 ) ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; }[0m
Pred: [0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; options . METHOD_5 ( VAR_2 ) ; METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #18[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
[31mExample #19[0m
Src : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path ) ; }[0m
[31mExample #20[0m
Src : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
Trg : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }[0m
Pred: protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null ) ; METHOD_4 ( METHOD_5 ( ) ) ; } } return null ; }[0m
[31mExample #21[0m
Src : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Trg : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Pred: private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 , STRING_3 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , VAR_1 ) . METHOD_9 ( ) ) ; }[0m
Pred: [0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_4 ) ; } }[0m
[31mExample #24[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ! ( METHOD_2 ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Pred: [0m
[31mExample #25[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
---------------
Class: Remove statement,Add try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; server . METHOD_7 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; } }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } }[0m
Pred: [0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
[31mExample #2[0m
Src : protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Trg : protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Pred: protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Trg : protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Pred: protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network : : ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
[31mExample #2[0m
Src : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
Trg : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( fail ) ; return new byte [ 0 ] ; } }[0m
Pred: static [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( org.mockito.Matchers . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Trg : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Pred: public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c ; } VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( TYPE_7 > ( VAR_5 , VAR_2 , VAR_4 ) ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new VAR_1 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
---------------
Class: Replace if statement with assert statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Trg : public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Pred: public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; org.junit.Assert.assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Trg : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Pred: void METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.v ( VAR_2 . TAG , ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
[31mExample #3[0m
Src : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Trg : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . log ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Pred: public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Trg : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Pred: boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; return true ; }[0m
Pred: protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . any ( ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Integer class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #15[0m
Src : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Trg : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
[31mExample #16[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
[31mExample #19[0m
Src : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Trg : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Pred: private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
[31mExample #20[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : log . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
[31mExample #22[0m
Src : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_7 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_8 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
[31mExample #24[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . getStoragePoolId ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
[31mExample #25[0m
Src : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . getStatus ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Pred: protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
[31mExample #26[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
[31mExample #27[0m
Src : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
Trg : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . getName ( ) ) ) ) ) { return network ; } } return null ; }[0m
Pred: protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
---------------
================
Duration: 0:02:09.673354

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }[0m
Pred: public[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: [0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . answer ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: [0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: [0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . getClass ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: public TYPE_1[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }[0m
Pred: [0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: public METHOD_3 ( VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: [0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ([0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: [0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public[0m
---------------
================
Duration: 0:00:10.956756

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
Top-1 accuracy: 122 / 1098 = 0.1111111111111111
Top-3 accuracy: 140 / 1098 = 0.12750455373406194
Top-5 accuracy: 142 / 1098 = 0.12932604735883424
Top-10 accuracy: 144 / 1098 = 0.13114754098360656
Top-50 accuracy: 152 / 1098 = 0.1384335154826958
Duration: 0:05:04.171693

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
Top-1 accuracy: 6 / 300 = 0.02
Top-3 accuracy: 13 / 300 = 0.043333333333333335
Top-5 accuracy: 14 / 300 = 0.04666666666666667
Top-10 accuracy: 15 / 300 = 0.05
Top-50 accuracy: 16 / 300 = 0.05333333333333334
Duration: 0:01:28.329862

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
Top-1 accuracy: 2 / 300 = 0.006666666666666667
Top-3 accuracy: 6 / 300 = 0.02
Top-5 accuracy: 7 / 300 = 0.023333333333333334
Top-10 accuracy: 7 / 300 = 0.023333333333333334
Top-50 accuracy: 11 / 300 = 0.03666666666666667
Duration: 0:01:29.772813

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
Top-1 accuracy: 4 / 300 = 0.013333333333333334
Top-3 accuracy: 7 / 300 = 0.023333333333333334
Top-5 accuracy: 9 / 300 = 0.03
Top-10 accuracy: 12 / 300 = 0.04
Top-50 accuracy: 16 / 300 = 0.05333333333333334
Duration: 0:01:29.246516

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
Top-1 accuracy: 10 / 300 = 0.03333333333333333
Top-3 accuracy: 11 / 300 = 0.03666666666666667
Top-5 accuracy: 11 / 300 = 0.03666666666666667
Top-10 accuracy: 12 / 300 = 0.04
Top-50 accuracy: 12 / 300 = 0.04
Duration: 0:01:22.598454

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
Top-1 accuracy: 5 / 300 = 0.016666666666666666
Top-3 accuracy: 6 / 300 = 0.02
Top-5 accuracy: 6 / 300 = 0.02
Top-10 accuracy: 7 / 300 = 0.023333333333333334
Top-50 accuracy: 10 / 300 = 0.03333333333333333
Duration: 0:01:23.650638

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
Top-1 accuracy: 11 / 300 = 0.03666666666666667
Top-3 accuracy: 11 / 300 = 0.03666666666666667
Top-5 accuracy: 11 / 300 = 0.03666666666666667
Top-10 accuracy: 11 / 300 = 0.03666666666666667
Top-50 accuracy: 13 / 300 = 0.043333333333333335
Duration: 0:01:22.491784

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
Top-1 accuracy: 5 / 300 = 0.016666666666666666
Top-3 accuracy: 9 / 300 = 0.03
Top-5 accuracy: 10 / 300 = 0.03333333333333333
Top-10 accuracy: 11 / 300 = 0.03666666666666667
Top-50 accuracy: 13 / 300 = 0.043333333333333335
Duration: 0:01:31.141589

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
Top-1 accuracy: 7 / 300 = 0.023333333333333334
Top-3 accuracy: 10 / 300 = 0.03333333333333333
Top-5 accuracy: 10 / 300 = 0.03333333333333333
Top-10 accuracy: 10 / 300 = 0.03333333333333333
Top-50 accuracy: 15 / 300 = 0.05
Duration: 0:01:30.756862

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
Top-1 accuracy: 9 / 300 = 0.03
Top-3 accuracy: 9 / 300 = 0.03
Top-5 accuracy: 9 / 300 = 0.03
Top-10 accuracy: 10 / 300 = 0.03333333333333333
Top-50 accuracy: 12 / 300 = 0.04
Duration: 0:01:30.224815

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
Top-1 accuracy: 35 / 300 = 0.11666666666666667
Top-3 accuracy: 40 / 300 = 0.13333333333333333
Top-5 accuracy: 41 / 300 = 0.13666666666666666
Top-10 accuracy: 44 / 300 = 0.14666666666666667
Top-50 accuracy: 48 / 300 = 0.16
Duration: 0:01:22.248396

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
Top-1 accuracy: 20 / 300 = 0.06666666666666667
Top-3 accuracy: 27 / 300 = 0.09
Top-5 accuracy: 28 / 300 = 0.09333333333333334
Top-10 accuracy: 30 / 300 = 0.1
Top-50 accuracy: 32 / 300 = 0.10666666666666667
Duration: 0:01:22.606216

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
Top-1 accuracy: 25 / 300 = 0.08333333333333333
Top-3 accuracy: 32 / 300 = 0.10666666666666667
Top-5 accuracy: 33 / 300 = 0.11
Top-10 accuracy: 33 / 300 = 0.11
Top-50 accuracy: 35 / 300 = 0.11666666666666667
Duration: 0:01:23.508958

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
Top-1 accuracy: 89 / 5835 = 0.015252784918594687
Top-3 accuracy: 117 / 5835 = 0.02005141388174807
Top-5 accuracy: 126 / 5835 = 0.021593830334190232
Top-10 accuracy: 142 / 5835 = 0.024335904027420738
Top-50 accuracy: 194 / 5835 = 0.03324764353041988
Duration: 0:29:01.256618

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
Top-1 accuracy: 187 / 6545 = 0.02857142857142857
Top-3 accuracy: 207 / 6545 = 0.031627196333078686
Top-5 accuracy: 214 / 6545 = 0.032696715049656225
Top-10 accuracy: 224 / 6545 = 0.034224598930481284
Top-50 accuracy: 256 / 6545 = 0.039113827349121465
Duration: 0:30:11.834152

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
Top-1 accuracy: 44 / 1077 = 0.04085422469823584
Top-3 accuracy: 48 / 1077 = 0.04456824512534819
Top-5 accuracy: 52 / 1077 = 0.04828226555246054
Top-10 accuracy: 56 / 1077 = 0.051996285979572884
Top-50 accuracy: 63 / 1077 = 0.0584958217270195
Duration: 0:05:19.820358

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
Top-1 accuracy: 122 / 1098 = 0.1111111111111111
Top-3 accuracy: 140 / 1098 = 0.12750455373406194
Top-5 accuracy: 142 / 1098 = 0.12932604735883424
Top-10 accuracy: 144 / 1098 = 0.13114754098360656
Top-50 accuracy: 152 / 1098 = 0.1384335154826958
Duration: 0:05:02.931799

