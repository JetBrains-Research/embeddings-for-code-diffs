
====STARTING TRAINING====
{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 25,
 'EDIT_REPRESENTATION_SIZE': 16,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LEAVE_ONLY_CHANGED': True,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_26/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEACHER_FORCING_RATIO': 0.9,
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'TUFANO_LABELED_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/50_100',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 8627
valid 1079
test 1077 

First training example:
src: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
trg: private void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
diff_alignment: —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ
diff_prev: VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ;
diff_updated: –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ 

Most common words:
         (      76236
         )      76208
   –ø–∞–¥–¥–∏–Ω–≥      44322
  —É–¥–∞–ª–µ–Ω–∏–µ      34492
         ;      33724
         .      30504
     VAR_1      24100
         ,      23668
         {      22776
         }      22616 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 (
05 )
06 –ø–∞–¥–¥–∏–Ω–≥
07 —É–¥–∞–ª–µ–Ω–∏–µ
08 ;
09 . 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 6423 25
—É–¥–∞–ª–µ–Ω–∏–µ 34492 7
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 9830 19
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 44322 6
Number of words (types): 662
Epoch 0 / 1000
Epoch Step: 5 / 135 Loss: 169.70045471191406 Tokens per Sec: 12258.148831288418
Epoch Step: 10 / 135 Loss: 241.60498046875 Tokens per Sec: 21830.027618777152
Epoch Step: 15 / 135 Loss: 149.7332000732422 Tokens per Sec: 20448.851973070963
Epoch Step: 20 / 135 Loss: 255.7830810546875 Tokens per Sec: 23698.262715195346
Epoch Step: 25 / 135 Loss: 212.14727783203125 Tokens per Sec: 22123.877231106468
Epoch Step: 30 / 135 Loss: 202.81317138671875 Tokens per Sec: 22579.46198693811
Epoch Step: 35 / 135 Loss: 239.6937713623047 Tokens per Sec: 23217.860620312
Epoch Step: 40 / 135 Loss: 143.12973022460938 Tokens per Sec: 24888.408972053912
Epoch Step: 45 / 135 Loss: 168.0998992919922 Tokens per Sec: 22835.64293751203
Epoch Step: 50 / 135 Loss: 157.80450439453125 Tokens per Sec: 19340.735980118265
Epoch Step: 55 / 135 Loss: 133.81394958496094 Tokens per Sec: 24041.22943343228
Epoch Step: 60 / 135 Loss: 114.9486083984375 Tokens per Sec: 23706.942287410577
Epoch Step: 65 / 135 Loss: 113.92510986328125 Tokens per Sec: 23384.682727792308
Epoch Step: 70 / 135 Loss: 68.71160125732422 Tokens per Sec: 18706.674559363946
Epoch Step: 75 / 135 Loss: 119.30477905273438 Tokens per Sec: 18495.270475758694
Epoch Step: 80 / 135 Loss: 41.55011749267578 Tokens per Sec: 17930.28769013913
Epoch Step: 85 / 135 Loss: 70.73194122314453 Tokens per Sec: 21813.951510897805
Epoch Step: 90 / 135 Loss: 128.39378356933594 Tokens per Sec: 21531.179878005234
Epoch Step: 95 / 135 Loss: 97.21369934082031 Tokens per Sec: 21077.15976498752
Epoch Step: 100 / 135 Loss: 98.91181945800781 Tokens per Sec: 16705.19608199051
Epoch Step: 105 / 135 Loss: 141.9384002685547 Tokens per Sec: 18293.87118402868
Epoch Step: 110 / 135 Loss: 123.70587158203125 Tokens per Sec: 18929.06865132771
Epoch Step: 115 / 135 Loss: 117.18331909179688 Tokens per Sec: 20475.459840338957
Epoch Step: 120 / 135 Loss: 53.18547439575195 Tokens per Sec: 17883.157135092515
Epoch Step: 125 / 135 Loss: 127.53599548339844 Tokens per Sec: 20920.433155163282
Epoch Step: 130 / 135 Loss: 93.78942108154297 Tokens per Sec: 19450.270282918013
Epoch Step: 135 / 135 Loss: 81.24258422851562 Tokens per Sec: 18044.083346752614
Epoch ended with duration 0:00:12.526929
Train perplexity: 68.2066498694595
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { ( ) { ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( ) { return ) { return ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { ( ) { ( ) ; }[0m
Epoch ended with duration 0:00:00.577215
Validation perplexity: 20.725953126909744
Model saved best_on_validation!
Model saved checkpoint!
Epoch 1 / 1000
Epoch Step: 5 / 135 Loss: 83.55516815185547 Tokens per Sec: 20553.617460929865
Epoch Step: 10 / 135 Loss: 131.91932678222656 Tokens per Sec: 23361.17950933441
Epoch Step: 15 / 135 Loss: 139.1427764892578 Tokens per Sec: 22125.64451694887
Epoch Step: 20 / 135 Loss: 95.01702880859375 Tokens per Sec: 21213.019713753503
Epoch Step: 25 / 135 Loss: 54.16769027709961 Tokens per Sec: 23383.017154997076
Epoch Step: 30 / 135 Loss: 105.88917541503906 Tokens per Sec: 19346.5318080045
Epoch Step: 35 / 135 Loss: 108.57569122314453 Tokens per Sec: 20007.92153457249
Epoch Step: 40 / 135 Loss: 35.10099411010742 Tokens per Sec: 20312.279639045617
Epoch Step: 45 / 135 Loss: 129.66592407226562 Tokens per Sec: 24372.953534318705
Epoch Step: 50 / 135 Loss: 46.58162307739258 Tokens per Sec: 23294.40628794478
Epoch Step: 55 / 135 Loss: 54.22272491455078 Tokens per Sec: 22298.014957083902
Epoch Step: 60 / 135 Loss: 127.0654067993164 Tokens per Sec: 23982.74643839792
Epoch Step: 65 / 135 Loss: 126.42341613769531 Tokens per Sec: 21290.055616478716
Epoch Step: 70 / 135 Loss: 96.55536651611328 Tokens per Sec: 21544.576752554716
Epoch Step: 75 / 135 Loss: 68.19010162353516 Tokens per Sec: 22744.023874789615
Epoch Step: 80 / 135 Loss: 39.148868560791016 Tokens per Sec: 17355.393662967057
Epoch Step: 85 / 135 Loss: 69.97918701171875 Tokens per Sec: 20414.728685264396
Epoch Step: 90 / 135 Loss: 66.19819641113281 Tokens per Sec: 22690.193840028194
Epoch Step: 95 / 135 Loss: 178.55519104003906 Tokens per Sec: 24752.007511361935
Epoch Step: 100 / 135 Loss: 53.408592224121094 Tokens per Sec: 21069.9471256017
Epoch Step: 105 / 135 Loss: 90.5924072265625 Tokens per Sec: 20502.38607334327
Epoch Step: 110 / 135 Loss: 83.49028015136719 Tokens per Sec: 19420.24531183299
Epoch Step: 115 / 135 Loss: 31.08740997314453 Tokens per Sec: 18890.62018172635
Epoch Step: 120 / 135 Loss: 62.750465393066406 Tokens per Sec: 17947.350385125643
Epoch Step: 125 / 135 Loss: 97.89302062988281 Tokens per Sec: 19388.646404107552
Epoch Step: 130 / 135 Loss: 114.14805603027344 Tokens per Sec: 19178.177481130675
Epoch Step: 135 / 135 Loss: 103.10039520263672 Tokens per Sec: 19430.563504050402
Epoch ended with duration 0:00:12.094748
Train perplexity: 18.910216141641975
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ) { return ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 ) { return VAR_1 , VAR_2 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ) { return ) ; }[0m
Epoch ended with duration 0:00:00.580610
Validation perplexity: 15.067240136418624
Model saved best_on_validation!
Epoch 2 / 1000
Epoch Step: 5 / 135 Loss: 31.721126556396484 Tokens per Sec: 20348.74619013642
Epoch Step: 10 / 135 Loss: 104.0598373413086 Tokens per Sec: 20998.47309004288
Epoch Step: 15 / 135 Loss: 103.32984161376953 Tokens per Sec: 17995.670127632024
Epoch Step: 20 / 135 Loss: 32.05690383911133 Tokens per Sec: 21652.46943720136
Epoch Step: 25 / 135 Loss: 97.50849914550781 Tokens per Sec: 20684.017326238154
Epoch Step: 30 / 135 Loss: 106.7275161743164 Tokens per Sec: 23119.036469352763
Epoch Step: 35 / 135 Loss: 120.08745574951172 Tokens per Sec: 22491.543862896975
Epoch Step: 40 / 135 Loss: 109.32537078857422 Tokens per Sec: 20527.552290477157
Epoch Step: 45 / 135 Loss: 109.34502410888672 Tokens per Sec: 23733.326803141663
Epoch Step: 50 / 135 Loss: 65.08174133300781 Tokens per Sec: 20158.475152740044
Epoch Step: 55 / 135 Loss: 126.11390686035156 Tokens per Sec: 25239.851130998784
Epoch Step: 60 / 135 Loss: 68.25775909423828 Tokens per Sec: 24053.78553678603
Epoch Step: 65 / 135 Loss: 50.373390197753906 Tokens per Sec: 24875.509518818144
Epoch Step: 70 / 135 Loss: 60.30390167236328 Tokens per Sec: 18985.82385625821
Epoch Step: 75 / 135 Loss: 97.13459777832031 Tokens per Sec: 17134.679958957728
Epoch Step: 80 / 135 Loss: 98.81158447265625 Tokens per Sec: 20734.764376372623
Epoch Step: 85 / 135 Loss: 71.95748901367188 Tokens per Sec: 24952.905845005735
Epoch Step: 90 / 135 Loss: 54.77320861816406 Tokens per Sec: 21602.108345217006
Epoch Step: 95 / 135 Loss: 34.582603454589844 Tokens per Sec: 20347.07708839735
Epoch Step: 100 / 135 Loss: 110.15729522705078 Tokens per Sec: 23120.24810364062
Epoch Step: 105 / 135 Loss: 58.911888122558594 Tokens per Sec: 18205.62133842615
Epoch Step: 110 / 135 Loss: 52.43669128417969 Tokens per Sec: 18519.587348316432
Epoch Step: 115 / 135 Loss: 40.325584411621094 Tokens per Sec: 18536.800182052644
Epoch Step: 120 / 135 Loss: 26.743600845336914 Tokens per Sec: 20756.669890785637
Epoch Step: 125 / 135 Loss: 165.58351135253906 Tokens per Sec: 21312.0778652153
Epoch Step: 130 / 135 Loss: 70.9754409790039 Tokens per Sec: 18440.059714550516
Epoch Step: 135 / 135 Loss: 103.81808471679688 Tokens per Sec: 19523.67184958794
Epoch ended with duration 0:00:12.111973
Train perplexity: 13.991320394981923
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.573832
Validation perplexity: 10.499716701712112
Model saved best_on_validation!
Epoch 3 / 1000
Epoch Step: 5 / 135 Loss: 74.93126678466797 Tokens per Sec: 18998.090027042443
Epoch Step: 10 / 135 Loss: 61.89606857299805 Tokens per Sec: 23628.224872099883
Epoch Step: 15 / 135 Loss: 89.84810638427734 Tokens per Sec: 21129.47062637167
Epoch Step: 20 / 135 Loss: 84.42353057861328 Tokens per Sec: 18623.79739945541
Epoch Step: 25 / 135 Loss: 68.60112762451172 Tokens per Sec: 23459.27295261984
Epoch Step: 30 / 135 Loss: 26.274757385253906 Tokens per Sec: 20584.170738308858
Epoch Step: 35 / 135 Loss: 124.71315002441406 Tokens per Sec: 19942.230125739792
Epoch Step: 40 / 135 Loss: 69.85409545898438 Tokens per Sec: 25424.400575578922
Epoch Step: 45 / 135 Loss: 78.89989471435547 Tokens per Sec: 22706.61465563127
Epoch Step: 50 / 135 Loss: 24.93962860107422 Tokens per Sec: 20424.772746254803
Epoch Step: 55 / 135 Loss: 39.99399185180664 Tokens per Sec: 17788.025742350685
Epoch Step: 60 / 135 Loss: 62.558128356933594 Tokens per Sec: 24491.64466300455
Epoch Step: 65 / 135 Loss: 100.76061248779297 Tokens per Sec: 20277.556343194134
Epoch Step: 70 / 135 Loss: 57.12092208862305 Tokens per Sec: 23294.814339952256
Epoch Step: 75 / 135 Loss: 96.04299926757812 Tokens per Sec: 24430.316947053212
Epoch Step: 80 / 135 Loss: 100.31790161132812 Tokens per Sec: 23364.86280138695
Epoch Step: 85 / 135 Loss: 57.96604537963867 Tokens per Sec: 21536.212451577725
Epoch Step: 90 / 135 Loss: 41.97411346435547 Tokens per Sec: 20739.877955123033
Epoch Step: 95 / 135 Loss: 96.18389892578125 Tokens per Sec: 20172.260022445767
Epoch Step: 100 / 135 Loss: 34.235687255859375 Tokens per Sec: 23824.744412375432
Epoch Step: 105 / 135 Loss: 105.57992553710938 Tokens per Sec: 19909.7961516767
Epoch Step: 110 / 135 Loss: 137.27833557128906 Tokens per Sec: 18975.177405537233
Epoch Step: 115 / 135 Loss: 78.49633026123047 Tokens per Sec: 19344.993447344023
Epoch Step: 120 / 135 Loss: 68.73432922363281 Tokens per Sec: 20678.40347996886
Epoch Step: 125 / 135 Loss: 84.99447631835938 Tokens per Sec: 19330.932987060158
Epoch Step: 130 / 135 Loss: 25.53659439086914 Tokens per Sec: 19290.945987224848
Epoch Step: 135 / 135 Loss: 33.178409576416016 Tokens per Sec: 16579.232044007247
Epoch ended with duration 0:00:12.142518
Train perplexity: 10.72308932127444
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) { return VAR_1 = ( VAR_1 , VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.578619
Validation perplexity: 10.184011665918183
Model saved best_on_validation!
Epoch 4 / 1000
Epoch Step: 5 / 135 Loss: 40.536983489990234 Tokens per Sec: 22882.452737100255
Epoch Step: 10 / 135 Loss: 66.9029312133789 Tokens per Sec: 22433.742923108723
Epoch Step: 15 / 135 Loss: 69.30747985839844 Tokens per Sec: 20738.839245431624
Epoch Step: 20 / 135 Loss: 85.97694396972656 Tokens per Sec: 18207.508227446906
Epoch Step: 25 / 135 Loss: 52.363494873046875 Tokens per Sec: 22000.943975845777
Epoch Step: 30 / 135 Loss: 43.11163330078125 Tokens per Sec: 18314.150858311317
Epoch Step: 35 / 135 Loss: 77.72917175292969 Tokens per Sec: 22741.95373894778
Epoch Step: 40 / 135 Loss: 89.32649230957031 Tokens per Sec: 19394.772446151354
Epoch Step: 45 / 135 Loss: 104.6712646484375 Tokens per Sec: 22471.338514307557
Epoch Step: 50 / 135 Loss: 44.33781814575195 Tokens per Sec: 20251.110549412864
Epoch Step: 55 / 135 Loss: 71.86894226074219 Tokens per Sec: 22760.058910436397
Epoch Step: 60 / 135 Loss: 72.25678253173828 Tokens per Sec: 21478.18320572148
Epoch Step: 65 / 135 Loss: 39.54941940307617 Tokens per Sec: 23192.416924532918
Epoch Step: 70 / 135 Loss: 48.643672943115234 Tokens per Sec: 25105.52995709866
Epoch Step: 75 / 135 Loss: 30.82870101928711 Tokens per Sec: 16712.253672597963
Epoch Step: 80 / 135 Loss: 42.74226379394531 Tokens per Sec: 21300.412293587917
Epoch Step: 85 / 135 Loss: 79.28319549560547 Tokens per Sec: 23715.216203394426
Epoch Step: 90 / 135 Loss: 67.70745086669922 Tokens per Sec: 23431.14211245343
Epoch Step: 95 / 135 Loss: 68.31166076660156 Tokens per Sec: 21454.197023859393
Epoch Step: 100 / 135 Loss: 103.74617767333984 Tokens per Sec: 25169.180912679585
Epoch Step: 105 / 135 Loss: 90.11235809326172 Tokens per Sec: 19986.42200934604
Epoch Step: 110 / 135 Loss: 67.07794189453125 Tokens per Sec: 19541.05154574331
Epoch Step: 115 / 135 Loss: 74.31269836425781 Tokens per Sec: 18396.94047892843
Epoch Step: 120 / 135 Loss: 92.63960266113281 Tokens per Sec: 19738.986732342386
Epoch Step: 125 / 135 Loss: 38.385623931884766 Tokens per Sec: 17952.442901096
Epoch Step: 130 / 135 Loss: 62.06969451904297 Tokens per Sec: 19244.76647039432
Epoch Step: 135 / 135 Loss: 28.239904403686523 Tokens per Sec: 18229.953074800516
Epoch ended with duration 0:00:12.154597
Train perplexity: 9.638846737461181
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.580825
Validation perplexity: 8.696246317045999
Model saved best_on_validation!
Epoch 5 / 1000
Epoch Step: 5 / 135 Loss: 38.124847412109375 Tokens per Sec: 20309.75677068662
Epoch Step: 10 / 135 Loss: 36.17250442504883 Tokens per Sec: 23567.73512230711
Epoch Step: 15 / 135 Loss: 29.740840911865234 Tokens per Sec: 21132.49437018471
Epoch Step: 20 / 135 Loss: 68.63803100585938 Tokens per Sec: 23252.183614123227
Epoch Step: 25 / 135 Loss: 103.6736831665039 Tokens per Sec: 21465.657326574536
Epoch Step: 30 / 135 Loss: 51.90827178955078 Tokens per Sec: 18577.90712551622
Epoch Step: 35 / 135 Loss: 40.95302200317383 Tokens per Sec: 23130.82411104731
Epoch Step: 40 / 135 Loss: 39.72100830078125 Tokens per Sec: 23786.518942424733
Epoch Step: 45 / 135 Loss: 80.53618621826172 Tokens per Sec: 22761.363693426363
Epoch Step: 50 / 135 Loss: 25.579504013061523 Tokens per Sec: 17467.49784244857
Epoch Step: 55 / 135 Loss: 20.736583709716797 Tokens per Sec: 22410.442711175252
Epoch Step: 60 / 135 Loss: 20.11812400817871 Tokens per Sec: 20910.111340616288
Epoch Step: 65 / 135 Loss: 63.03541564941406 Tokens per Sec: 20817.920339315428
Epoch Step: 70 / 135 Loss: 79.20182800292969 Tokens per Sec: 23557.619071325025
Epoch Step: 75 / 135 Loss: 76.27720642089844 Tokens per Sec: 24029.851333322174
Epoch Step: 80 / 135 Loss: 42.725669860839844 Tokens per Sec: 22254.50168999576
Epoch Step: 85 / 135 Loss: 86.74778747558594 Tokens per Sec: 21015.823827347715
Epoch Step: 90 / 135 Loss: 67.955322265625 Tokens per Sec: 22762.604542351757
Epoch Step: 95 / 135 Loss: 66.70304870605469 Tokens per Sec: 19574.498197575438
Epoch Step: 100 / 135 Loss: 82.65171813964844 Tokens per Sec: 22657.645101669892
Epoch Step: 105 / 135 Loss: 40.64970397949219 Tokens per Sec: 17796.1252591414
Epoch Step: 110 / 135 Loss: 64.03811645507812 Tokens per Sec: 19116.439429171733
Epoch Step: 115 / 135 Loss: 40.54349136352539 Tokens per Sec: 19220.412792471485
Epoch Step: 120 / 135 Loss: 50.44617462158203 Tokens per Sec: 19718.540547925462
Epoch Step: 125 / 135 Loss: 37.656593322753906 Tokens per Sec: 19387.295361122997
Epoch Step: 130 / 135 Loss: 85.87569427490234 Tokens per Sec: 19336.41396991027
Epoch Step: 135 / 135 Loss: 49.49557876586914 Tokens per Sec: 19692.163697818763
Epoch ended with duration 0:00:12.039032
Train perplexity: 8.015039383425973
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.572678
Validation perplexity: 6.09419680224638
Model saved best_on_validation!
Model saved checkpoint!
Epoch 6 / 1000
Epoch Step: 5 / 135 Loss: 80.31521606445312 Tokens per Sec: 17592.388241462282
Epoch Step: 10 / 135 Loss: 23.52701187133789 Tokens per Sec: 20897.221880270863
Epoch Step: 15 / 135 Loss: 74.22533416748047 Tokens per Sec: 20821.36472455052
Epoch Step: 20 / 135 Loss: 24.21548080444336 Tokens per Sec: 23616.61401714822
Epoch Step: 25 / 135 Loss: 33.952537536621094 Tokens per Sec: 18330.036990429842
Epoch Step: 30 / 135 Loss: 71.38664245605469 Tokens per Sec: 25820.17099717347
Epoch Step: 35 / 135 Loss: 71.96127319335938 Tokens per Sec: 22035.90895878081
Epoch Step: 40 / 135 Loss: 95.96095275878906 Tokens per Sec: 23256.203835921435
Epoch Step: 45 / 135 Loss: 112.65869140625 Tokens per Sec: 20000.761191280453
Epoch Step: 50 / 135 Loss: 76.00498962402344 Tokens per Sec: 23379.482445420243
Epoch Step: 55 / 135 Loss: 61.02008056640625 Tokens per Sec: 22308.537543209437
Epoch Step: 60 / 135 Loss: 67.26004028320312 Tokens per Sec: 22388.36974942389
Epoch Step: 65 / 135 Loss: 82.64641571044922 Tokens per Sec: 23268.602778472123
Epoch Step: 70 / 135 Loss: 35.19379806518555 Tokens per Sec: 19619.68645738062
Epoch Step: 75 / 135 Loss: 21.487749099731445 Tokens per Sec: 21590.677431855172
Epoch Step: 80 / 135 Loss: 96.28826141357422 Tokens per Sec: 23834.104841470165
Epoch Step: 85 / 135 Loss: 79.70187377929688 Tokens per Sec: 20809.39154066487
Epoch Step: 90 / 135 Loss: 35.456085205078125 Tokens per Sec: 19522.785992829362
Epoch Step: 95 / 135 Loss: 29.89453125 Tokens per Sec: 22250.183120909405
Epoch Step: 100 / 135 Loss: 47.74735641479492 Tokens per Sec: 18511.875619826184
Epoch Step: 105 / 135 Loss: 81.3017349243164 Tokens per Sec: 21305.10256528597
Epoch Step: 110 / 135 Loss: 24.404327392578125 Tokens per Sec: 19898.72724101832
Epoch Step: 115 / 135 Loss: 130.20339965820312 Tokens per Sec: 19091.890500360347
Epoch Step: 120 / 135 Loss: 38.38201904296875 Tokens per Sec: 17808.612769478248
Epoch Step: 125 / 135 Loss: 50.53977584838867 Tokens per Sec: 18307.672517245348
Epoch Step: 130 / 135 Loss: 76.408203125 Tokens per Sec: 18804.54900759401
Epoch Step: 135 / 135 Loss: 27.598804473876953 Tokens per Sec: 19973.86812748145
Epoch ended with duration 0:00:12.224014
Train perplexity: 8.048369337050847
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.576672
Validation perplexity: 6.181238424146283
Epoch 7 / 1000
Epoch Step: 5 / 135 Loss: 39.361358642578125 Tokens per Sec: 20968.974964098623
Epoch Step: 10 / 135 Loss: 50.99844741821289 Tokens per Sec: 18977.76714381252
Epoch Step: 15 / 135 Loss: 35.05036926269531 Tokens per Sec: 23580.297613864874
Epoch Step: 20 / 135 Loss: 54.27667236328125 Tokens per Sec: 20713.156315199096
Epoch Step: 25 / 135 Loss: 64.82184600830078 Tokens per Sec: 24809.671733126237
Epoch Step: 30 / 135 Loss: 63.079750061035156 Tokens per Sec: 21554.798422356213
Epoch Step: 35 / 135 Loss: 52.96886444091797 Tokens per Sec: 21536.18492742848
Epoch Step: 40 / 135 Loss: 149.10418701171875 Tokens per Sec: 23973.582730751965
Epoch Step: 45 / 135 Loss: 176.25811767578125 Tokens per Sec: 21012.957651659955
Epoch Step: 50 / 135 Loss: 175.65322875976562 Tokens per Sec: 23429.48961658421
Epoch Step: 55 / 135 Loss: 22.67484474182129 Tokens per Sec: 18760.134858825346
Epoch Step: 60 / 135 Loss: 53.81490707397461 Tokens per Sec: 24607.79843222089
Epoch Step: 65 / 135 Loss: 56.820220947265625 Tokens per Sec: 22362.19355433451
Epoch Step: 70 / 135 Loss: 62.03782653808594 Tokens per Sec: 20810.937404285316
Epoch Step: 75 / 135 Loss: 97.3193130493164 Tokens per Sec: 22635.556789095506
Epoch Step: 80 / 135 Loss: 127.05316925048828 Tokens per Sec: 18513.95180183695
Epoch Step: 85 / 135 Loss: 85.23686981201172 Tokens per Sec: 21152.28565759601
Epoch Step: 90 / 135 Loss: 81.7751235961914 Tokens per Sec: 21055.436434164956
Epoch Step: 95 / 135 Loss: 17.258392333984375 Tokens per Sec: 21836.303914955326
Epoch Step: 100 / 135 Loss: 51.6209716796875 Tokens per Sec: 21130.858451153614
Epoch Step: 105 / 135 Loss: 49.32962417602539 Tokens per Sec: 18639.748539355085
Epoch Step: 110 / 135 Loss: 45.16970443725586 Tokens per Sec: 18178.75579566988
Epoch Step: 115 / 135 Loss: 27.51593589782715 Tokens per Sec: 18973.0939455371
Epoch Step: 120 / 135 Loss: 68.15743255615234 Tokens per Sec: 19147.69117835383
Epoch Step: 125 / 135 Loss: 95.935546875 Tokens per Sec: 19606.82831192455
Epoch Step: 130 / 135 Loss: 32.71310806274414 Tokens per Sec: 19959.218180777883
Epoch Step: 135 / 135 Loss: 49.28701400756836 Tokens per Sec: 20247.862078282735
Epoch ended with duration 0:00:12.114012
Train perplexity: 6.8945074829791935
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.578990
Validation perplexity: 5.461473645267554
Model saved best_on_validation!
Epoch 8 / 1000
Epoch Step: 5 / 135 Loss: 66.74923706054688 Tokens per Sec: 23941.340881459335
Epoch Step: 10 / 135 Loss: 69.66397094726562 Tokens per Sec: 20831.69543843658
Epoch Step: 15 / 135 Loss: 60.75468444824219 Tokens per Sec: 22776.236799614388
Epoch Step: 20 / 135 Loss: 139.48423767089844 Tokens per Sec: 22158.579846525066
Epoch Step: 25 / 135 Loss: 32.97879409790039 Tokens per Sec: 19308.799752162766
Epoch Step: 30 / 135 Loss: 26.40650177001953 Tokens per Sec: 19612.133728448473
Epoch Step: 35 / 135 Loss: 108.55302429199219 Tokens per Sec: 17555.596038151652
Epoch Step: 40 / 135 Loss: 28.782081604003906 Tokens per Sec: 21339.704866732278
Epoch Step: 45 / 135 Loss: 47.329132080078125 Tokens per Sec: 24445.37135230667
Epoch Step: 50 / 135 Loss: 44.2021484375 Tokens per Sec: 22304.39178549537
Epoch Step: 55 / 135 Loss: 37.37362289428711 Tokens per Sec: 22434.591230591253
Epoch Step: 60 / 135 Loss: 67.44940948486328 Tokens per Sec: 22824.063175624247
Epoch Step: 65 / 135 Loss: 55.34732437133789 Tokens per Sec: 21564.50298582796
Epoch Step: 70 / 135 Loss: 65.92935180664062 Tokens per Sec: 22343.018212437502
Epoch Step: 75 / 135 Loss: 20.35430335998535 Tokens per Sec: 21420.10205886835
Epoch Step: 80 / 135 Loss: 73.99063110351562 Tokens per Sec: 20615.454746705887
Epoch Step: 85 / 135 Loss: 21.308252334594727 Tokens per Sec: 23282.537696696283
Epoch Step: 90 / 135 Loss: 29.683347702026367 Tokens per Sec: 19386.632391210525
Epoch Step: 95 / 135 Loss: 72.24312591552734 Tokens per Sec: 22698.9377624797
Epoch Step: 100 / 135 Loss: 57.22119903564453 Tokens per Sec: 17853.68143047759
Epoch Step: 105 / 135 Loss: 76.39588928222656 Tokens per Sec: 19943.34376900201
Epoch Step: 110 / 135 Loss: 20.0764102935791 Tokens per Sec: 19091.696106214415
Epoch Step: 115 / 135 Loss: 63.45924758911133 Tokens per Sec: 18924.43712824507
Epoch Step: 120 / 135 Loss: 82.871826171875 Tokens per Sec: 20488.17666801654
Epoch Step: 125 / 135 Loss: 30.194297790527344 Tokens per Sec: 18772.044318841366
Epoch Step: 130 / 135 Loss: 25.897470474243164 Tokens per Sec: 19174.809150660345
Epoch Step: 135 / 135 Loss: 35.18646240234375 Tokens per Sec: 20384.271343291337
Epoch ended with duration 0:00:12.179962
Train perplexity: 6.621333668212902
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.582299
Validation perplexity: 6.252417970553486
Epoch 9 / 1000
Epoch Step: 5 / 135 Loss: 45.61748504638672 Tokens per Sec: 18996.42545860816
Epoch Step: 10 / 135 Loss: 25.32083511352539 Tokens per Sec: 20175.600765099367
Epoch Step: 15 / 135 Loss: 22.454084396362305 Tokens per Sec: 21537.21701948697
Epoch Step: 20 / 135 Loss: 42.10877227783203 Tokens per Sec: 20187.920546383695
Epoch Step: 25 / 135 Loss: 47.38280487060547 Tokens per Sec: 23151.420399446415
Epoch Step: 30 / 135 Loss: 62.27641677856445 Tokens per Sec: 23055.52034949186
Epoch Step: 35 / 135 Loss: 48.94889831542969 Tokens per Sec: 21808.00819380735
Epoch Step: 40 / 135 Loss: 65.03168487548828 Tokens per Sec: 20953.688717842073
Epoch Step: 45 / 135 Loss: 58.01823043823242 Tokens per Sec: 21528.91938317026
Epoch Step: 50 / 135 Loss: 139.52574157714844 Tokens per Sec: 21739.490623349702
Epoch Step: 55 / 135 Loss: 76.35191345214844 Tokens per Sec: 22959.31608298704
Epoch Step: 60 / 135 Loss: 135.01107788085938 Tokens per Sec: 23913.467814278734
Epoch Step: 65 / 135 Loss: 26.682498931884766 Tokens per Sec: 17352.766592683103
Epoch Step: 70 / 135 Loss: 43.129432678222656 Tokens per Sec: 23690.48175148033
Epoch Step: 75 / 135 Loss: 62.539756774902344 Tokens per Sec: 21943.004411808248
Epoch Step: 80 / 135 Loss: 75.28849029541016 Tokens per Sec: 26737.138799652585
Epoch Step: 85 / 135 Loss: 37.29191589355469 Tokens per Sec: 22457.38997993046
Epoch Step: 90 / 135 Loss: 16.010154724121094 Tokens per Sec: 19929.673983192086
Epoch Step: 95 / 135 Loss: 37.321563720703125 Tokens per Sec: 20476.09539598518
Epoch Step: 100 / 135 Loss: 51.418800354003906 Tokens per Sec: 21847.88987877803
Epoch Step: 105 / 135 Loss: 96.54560852050781 Tokens per Sec: 17233.943572996413
Epoch Step: 110 / 135 Loss: 60.33112716674805 Tokens per Sec: 18648.509866522803
Epoch Step: 115 / 135 Loss: 53.724464416503906 Tokens per Sec: 20732.931344966433
Epoch Step: 120 / 135 Loss: 61.027217864990234 Tokens per Sec: 18085.152671965374
Epoch Step: 125 / 135 Loss: 43.34657287597656 Tokens per Sec: 20817.11145482767
Epoch Step: 130 / 135 Loss: 29.07678985595703 Tokens per Sec: 16775.104174943914
Epoch Step: 135 / 135 Loss: 30.97242546081543 Tokens per Sec: 20592.3849335225
Epoch ended with duration 0:00:12.129888
Train perplexity: 5.856573415207372
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.576772
Validation perplexity: 4.948395657386081
Model saved best_on_validation!
Epoch 10 / 1000
Epoch Step: 5 / 135 Loss: 28.491596221923828 Tokens per Sec: 21775.819758677255
Epoch Step: 10 / 135 Loss: 69.04186248779297 Tokens per Sec: 23020.55168977492
Epoch Step: 15 / 135 Loss: 66.52694702148438 Tokens per Sec: 19714.186595814397
Epoch Step: 20 / 135 Loss: 71.97135925292969 Tokens per Sec: 25182.078496420774
Epoch Step: 25 / 135 Loss: 24.756195068359375 Tokens per Sec: 18518.50186318159
Epoch Step: 30 / 135 Loss: 46.22843551635742 Tokens per Sec: 23080.763137737424
Epoch Step: 35 / 135 Loss: 24.46676254272461 Tokens per Sec: 19407.34175134277
Epoch Step: 40 / 135 Loss: 41.28703308105469 Tokens per Sec: 22637.59311692635
Epoch Step: 45 / 135 Loss: 18.933856964111328 Tokens per Sec: 20839.21656005657
Epoch Step: 50 / 135 Loss: 35.61482238769531 Tokens per Sec: 24067.316392896762
Epoch Step: 55 / 135 Loss: 18.627962112426758 Tokens per Sec: 19584.102731949737
Epoch Step: 60 / 135 Loss: 21.00989532470703 Tokens per Sec: 21238.05808098227
Epoch Step: 65 / 135 Loss: 29.455163955688477 Tokens per Sec: 21665.13080740777
Epoch Step: 70 / 135 Loss: 33.57483673095703 Tokens per Sec: 23401.410377729055
Epoch Step: 75 / 135 Loss: 26.622154235839844 Tokens per Sec: 23842.37787997818
Epoch Step: 80 / 135 Loss: 25.593442916870117 Tokens per Sec: 20117.257105161894
Epoch Step: 85 / 135 Loss: 44.55723190307617 Tokens per Sec: 19065.32115542513
Epoch Step: 90 / 135 Loss: 55.514591217041016 Tokens per Sec: 24680.123745682416
Epoch Step: 95 / 135 Loss: 109.85491180419922 Tokens per Sec: 20955.23262953961
Epoch Step: 100 / 135 Loss: 78.58950805664062 Tokens per Sec: 22399.901953249046
Epoch Step: 105 / 135 Loss: 63.38283920288086 Tokens per Sec: 19990.862752262867
Epoch Step: 110 / 135 Loss: 48.353302001953125 Tokens per Sec: 18855.575047254464
Epoch Step: 115 / 135 Loss: 60.378440856933594 Tokens per Sec: 19974.821384374965
Epoch Step: 120 / 135 Loss: 65.7336654663086 Tokens per Sec: 19302.60627204854
Epoch Step: 125 / 135 Loss: 25.55862808227539 Tokens per Sec: 17383.09218516025
Epoch Step: 130 / 135 Loss: 35.76227569580078 Tokens per Sec: 20155.053951638896
Epoch Step: 135 / 135 Loss: 41.61138916015625 Tokens per Sec: 18731.439730877493
Epoch ended with duration 0:00:12.093018
Train perplexity: 4.797694567307988
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.576287
Validation perplexity: 4.983373706915092
Model saved checkpoint!
Epoch 11 / 1000
Epoch Step: 5 / 135 Loss: 40.461299896240234 Tokens per Sec: 21798.61257779459
Epoch Step: 10 / 135 Loss: 68.13459014892578 Tokens per Sec: 24355.286502710456
Epoch Step: 15 / 135 Loss: 44.59014892578125 Tokens per Sec: 20946.112211529588
Epoch Step: 20 / 135 Loss: 43.21127700805664 Tokens per Sec: 18899.854617136767
Epoch Step: 25 / 135 Loss: 46.40385818481445 Tokens per Sec: 21275.397124880838
Epoch Step: 30 / 135 Loss: 43.89608383178711 Tokens per Sec: 18443.05285640748
Epoch Step: 35 / 135 Loss: 43.70485305786133 Tokens per Sec: 22210.478683167737
Epoch Step: 40 / 135 Loss: 57.4185791015625 Tokens per Sec: 21199.63596063264
Epoch Step: 45 / 135 Loss: 29.82392692565918 Tokens per Sec: 21090.56912529375
Epoch Step: 50 / 135 Loss: 74.58981323242188 Tokens per Sec: 19893.999645405092
Epoch Step: 55 / 135 Loss: 30.16150665283203 Tokens per Sec: 20781.948632593663
Epoch Step: 60 / 135 Loss: 73.00345611572266 Tokens per Sec: 21354.28096377584
Epoch Step: 65 / 135 Loss: 63.38903045654297 Tokens per Sec: 26090.251180226674
Epoch Step: 70 / 135 Loss: 42.73689651489258 Tokens per Sec: 20714.03420852342
Epoch Step: 75 / 135 Loss: 28.646427154541016 Tokens per Sec: 20873.456539600254
Epoch Step: 80 / 135 Loss: 28.022342681884766 Tokens per Sec: 19169.186060645912
Epoch Step: 85 / 135 Loss: 37.44683074951172 Tokens per Sec: 25116.803812198425
Epoch Step: 90 / 135 Loss: 208.54034423828125 Tokens per Sec: 24066.677847174622
Epoch Step: 95 / 135 Loss: 76.29922485351562 Tokens per Sec: 24940.688042144393
Epoch Step: 100 / 135 Loss: 48.36198806762695 Tokens per Sec: 24532.154842786484
Epoch Step: 105 / 135 Loss: 27.950101852416992 Tokens per Sec: 20388.62985636217
Epoch Step: 110 / 135 Loss: 47.00290298461914 Tokens per Sec: 20508.276428178597
Epoch Step: 115 / 135 Loss: 52.110679626464844 Tokens per Sec: 20120.902513710214
Epoch Step: 120 / 135 Loss: 89.27737426757812 Tokens per Sec: 18961.42916394756
Epoch Step: 125 / 135 Loss: 22.003055572509766 Tokens per Sec: 19458.259776180155
Epoch Step: 130 / 135 Loss: 27.8569393157959 Tokens per Sec: 17849.43151217801
Epoch Step: 135 / 135 Loss: 57.58695602416992 Tokens per Sec: 20581.838179922044
Epoch ended with duration 0:00:11.956609
Train perplexity: 5.12066173538019
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.570235
Validation perplexity: 4.119903195125611
Model saved best_on_validation!
Epoch 12 / 1000
Epoch Step: 5 / 135 Loss: 12.625280380249023 Tokens per Sec: 21361.574098107794
Epoch Step: 10 / 135 Loss: 42.52724838256836 Tokens per Sec: 18016.221375634294
Epoch Step: 15 / 135 Loss: 61.54974365234375 Tokens per Sec: 23762.582482661353
Epoch Step: 20 / 135 Loss: 47.72050857543945 Tokens per Sec: 19021.671519083277
Epoch Step: 25 / 135 Loss: 35.170196533203125 Tokens per Sec: 21212.677189121016
Epoch Step: 30 / 135 Loss: 29.823034286499023 Tokens per Sec: 24326.21983877352
Epoch Step: 35 / 135 Loss: 22.796384811401367 Tokens per Sec: 21838.875249305693
Epoch Step: 40 / 135 Loss: 50.99678421020508 Tokens per Sec: 23659.17581731855
Epoch Step: 45 / 135 Loss: 51.08148956298828 Tokens per Sec: 24886.005417323126
Epoch Step: 50 / 135 Loss: 13.851682662963867 Tokens per Sec: 19882.98303920327
Epoch Step: 55 / 135 Loss: 40.395912170410156 Tokens per Sec: 20783.82853879062
Epoch Step: 60 / 135 Loss: 57.99793243408203 Tokens per Sec: 21356.875141336342
Epoch Step: 65 / 135 Loss: 30.289663314819336 Tokens per Sec: 18186.1447121124
Epoch Step: 70 / 135 Loss: 27.648841857910156 Tokens per Sec: 25175.540971993563
Epoch Step: 75 / 135 Loss: 46.54387283325195 Tokens per Sec: 22724.38755118344
Epoch Step: 80 / 135 Loss: 137.40158081054688 Tokens per Sec: 22761.22110381391
Epoch Step: 85 / 135 Loss: 51.342262268066406 Tokens per Sec: 22940.642582548087
Epoch Step: 90 / 135 Loss: 23.030576705932617 Tokens per Sec: 19979.523567832923
Epoch Step: 95 / 135 Loss: 50.91231155395508 Tokens per Sec: 24601.001816369113
Epoch Step: 100 / 135 Loss: 42.31879425048828 Tokens per Sec: 23384.89677135396
Epoch Step: 105 / 135 Loss: 68.50418853759766 Tokens per Sec: 18519.10629397156
Epoch Step: 110 / 135 Loss: 38.654327392578125 Tokens per Sec: 20786.662451799217
Epoch Step: 115 / 135 Loss: 47.663883209228516 Tokens per Sec: 21932.23411572658
Epoch Step: 120 / 135 Loss: 59.0645751953125 Tokens per Sec: 20013.681343358447
Epoch Step: 125 / 135 Loss: 28.797521591186523 Tokens per Sec: 16932.80225766525
Epoch Step: 130 / 135 Loss: 37.54669189453125 Tokens per Sec: 18934.521603709356
Epoch Step: 135 / 135 Loss: 88.47755432128906 Tokens per Sec: 19440.269900256608
Epoch ended with duration 0:00:11.926100
Train perplexity: 4.89463566176879
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.561016
Validation perplexity: 3.4633346470234283
Model saved best_on_validation!
Epoch 13 / 1000
Epoch Step: 5 / 135 Loss: 64.8651123046875 Tokens per Sec: 18961.198607366674
Epoch Step: 10 / 135 Loss: 13.467668533325195 Tokens per Sec: 19102.93418042857
Epoch Step: 15 / 135 Loss: 86.06048583984375 Tokens per Sec: 21272.844161498724
Epoch Step: 20 / 135 Loss: 72.8304672241211 Tokens per Sec: 25518.636075391496
Epoch Step: 25 / 135 Loss: 152.05284118652344 Tokens per Sec: 24731.115527697515
Epoch Step: 30 / 135 Loss: 39.67659378051758 Tokens per Sec: 22153.18399457812
Epoch Step: 35 / 135 Loss: 29.991104125976562 Tokens per Sec: 22570.835072855916
Epoch Step: 40 / 135 Loss: 37.44331741333008 Tokens per Sec: 20855.111750449534
Epoch Step: 45 / 135 Loss: 21.676755905151367 Tokens per Sec: 22137.105501732094
Epoch Step: 50 / 135 Loss: 38.87666320800781 Tokens per Sec: 21661.502267192805
Epoch Step: 55 / 135 Loss: 33.43851089477539 Tokens per Sec: 24566.799331429025
Epoch Step: 60 / 135 Loss: 54.80692672729492 Tokens per Sec: 23734.630189323623
Epoch Step: 65 / 135 Loss: 58.4580192565918 Tokens per Sec: 23542.767340386163
Epoch Step: 70 / 135 Loss: 35.33457946777344 Tokens per Sec: 20733.899193175184
Epoch Step: 75 / 135 Loss: 17.103647232055664 Tokens per Sec: 21229.96478818267
Epoch Step: 80 / 135 Loss: 55.05470657348633 Tokens per Sec: 24077.97183309994
Epoch Step: 85 / 135 Loss: 24.124832153320312 Tokens per Sec: 17876.861229625345
Epoch Step: 90 / 135 Loss: 17.09627914428711 Tokens per Sec: 19936.28884099118
Epoch Step: 95 / 135 Loss: 33.42253875732422 Tokens per Sec: 23724.6767338313
Epoch Step: 100 / 135 Loss: 43.83485794067383 Tokens per Sec: 24334.356229852423
Epoch Step: 105 / 135 Loss: 61.473445892333984 Tokens per Sec: 21294.836640610458
Epoch Step: 110 / 135 Loss: 43.99678039550781 Tokens per Sec: 19952.655141748968
Epoch Step: 115 / 135 Loss: 48.70938491821289 Tokens per Sec: 18343.67499854918
Epoch Step: 120 / 135 Loss: 56.1626091003418 Tokens per Sec: 20358.11891617902
Epoch Step: 125 / 135 Loss: 38.21470642089844 Tokens per Sec: 19565.28899484881
Epoch Step: 130 / 135 Loss: 65.40962219238281 Tokens per Sec: 18758.95339880254
Epoch Step: 135 / 135 Loss: 59.62971878051758 Tokens per Sec: 20075.758573748044
Epoch ended with duration 0:00:11.838329
Train perplexity: 4.78152260981567
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.567265
Validation perplexity: 4.270826095697188
Epoch 14 / 1000
Epoch Step: 5 / 135 Loss: 23.02682876586914 Tokens per Sec: 24659.716475710404
Epoch Step: 10 / 135 Loss: 18.84383773803711 Tokens per Sec: 26736.92727552088
Epoch Step: 15 / 135 Loss: 14.237275123596191 Tokens per Sec: 21303.073791125385
Epoch Step: 20 / 135 Loss: 66.6680908203125 Tokens per Sec: 26204.63420977362
Epoch Step: 25 / 135 Loss: 17.527219772338867 Tokens per Sec: 22865.964792353378
Epoch Step: 30 / 135 Loss: 48.13111114501953 Tokens per Sec: 22718.57676714089
Epoch Step: 35 / 135 Loss: 29.764493942260742 Tokens per Sec: 21226.219684664185
Epoch Step: 40 / 135 Loss: 41.88627624511719 Tokens per Sec: 23972.081222184534
Epoch Step: 45 / 135 Loss: 59.151466369628906 Tokens per Sec: 22818.479372093858
Epoch Step: 50 / 135 Loss: 28.61481285095215 Tokens per Sec: 22058.52929888691
Epoch Step: 55 / 135 Loss: 55.76777267456055 Tokens per Sec: 20973.344593304355
Epoch Step: 60 / 135 Loss: 56.3671760559082 Tokens per Sec: 19911.61028038802
Epoch Step: 65 / 135 Loss: 41.17057800292969 Tokens per Sec: 19011.20806237766
Epoch Step: 70 / 135 Loss: 21.26352310180664 Tokens per Sec: 23347.882825557615
Epoch Step: 75 / 135 Loss: 44.967655181884766 Tokens per Sec: 21335.143992465735
Epoch Step: 80 / 135 Loss: 32.997650146484375 Tokens per Sec: 20687.414185050406
Epoch Step: 85 / 135 Loss: 21.683767318725586 Tokens per Sec: 18615.40264818623
Epoch Step: 90 / 135 Loss: 29.301889419555664 Tokens per Sec: 22164.215665198848
Epoch Step: 95 / 135 Loss: 22.96332359313965 Tokens per Sec: 20592.13884662871
Epoch Step: 100 / 135 Loss: 20.34726333618164 Tokens per Sec: 22620.18478469066
Epoch Step: 105 / 135 Loss: 35.63957595825195 Tokens per Sec: 18297.90710298197
Epoch Step: 110 / 135 Loss: 56.455081939697266 Tokens per Sec: 19608.482355920663
Epoch Step: 115 / 135 Loss: 45.303131103515625 Tokens per Sec: 18481.66203633717
Epoch Step: 120 / 135 Loss: 12.863028526306152 Tokens per Sec: 20869.7017444293
Epoch Step: 125 / 135 Loss: 17.760089874267578 Tokens per Sec: 16480.640141792715
Epoch Step: 130 / 135 Loss: 33.581390380859375 Tokens per Sec: 21271.088812906226
Epoch Step: 135 / 135 Loss: 49.741737365722656 Tokens per Sec: 19849.616889651155
Epoch ended with duration 0:00:11.904794
Train perplexity: 4.4423218641237705
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.568021
Validation perplexity: 4.4028225892192765
Epoch 15 / 1000
Epoch Step: 5 / 135 Loss: 58.08656311035156 Tokens per Sec: 24674.455999427642
Epoch Step: 10 / 135 Loss: 22.469093322753906 Tokens per Sec: 20638.914058798047
Epoch Step: 15 / 135 Loss: 39.309288024902344 Tokens per Sec: 21170.694179981074
Epoch Step: 20 / 135 Loss: 50.63200378417969 Tokens per Sec: 23226.77598228027
Epoch Step: 25 / 135 Loss: 47.340843200683594 Tokens per Sec: 22501.48941832069
Epoch Step: 30 / 135 Loss: 56.53827667236328 Tokens per Sec: 25430.4339863388
Epoch Step: 35 / 135 Loss: 46.980125427246094 Tokens per Sec: 21821.31361042309
Epoch Step: 40 / 135 Loss: 16.117605209350586 Tokens per Sec: 19407.072556558436
Epoch Step: 45 / 135 Loss: 55.73387145996094 Tokens per Sec: 20501.838682369715
Epoch Step: 50 / 135 Loss: 37.109092712402344 Tokens per Sec: 20797.644904163844
Epoch Step: 55 / 135 Loss: 25.974308013916016 Tokens per Sec: 17132.99468543585
Epoch Step: 60 / 135 Loss: 30.360780715942383 Tokens per Sec: 18865.4457826824
Epoch Step: 65 / 135 Loss: 55.541175842285156 Tokens per Sec: 20138.53751854712
Epoch Step: 70 / 135 Loss: 24.600154876708984 Tokens per Sec: 21035.590800652517
Epoch Step: 75 / 135 Loss: 44.43359375 Tokens per Sec: 19035.502250714344
Epoch Step: 80 / 135 Loss: 40.55376052856445 Tokens per Sec: 21392.826950635594
Epoch Step: 85 / 135 Loss: 45.24201583862305 Tokens per Sec: 22459.9796700096
Epoch Step: 90 / 135 Loss: 45.49463653564453 Tokens per Sec: 23652.072007738156
Epoch Step: 95 / 135 Loss: 23.78925323486328 Tokens per Sec: 17691.722721414426
Epoch Step: 100 / 135 Loss: 32.987709045410156 Tokens per Sec: 21869.335886483732
Epoch Step: 105 / 135 Loss: 50.70463943481445 Tokens per Sec: 19496.4817189038
Epoch Step: 110 / 135 Loss: 17.892620086669922 Tokens per Sec: 16507.330979557653
Epoch Step: 115 / 135 Loss: 14.145061492919922 Tokens per Sec: 17173.759350900873
Epoch Step: 120 / 135 Loss: 42.08555221557617 Tokens per Sec: 16869.117238072406
Epoch Step: 125 / 135 Loss: 59.23143768310547 Tokens per Sec: 18722.1026713877
Epoch Step: 130 / 135 Loss: 32.75663757324219 Tokens per Sec: 17957.882125719454
Epoch Step: 135 / 135 Loss: 38.56156539916992 Tokens per Sec: 21030.059957778074
Epoch ended with duration 0:00:12.470258
Train perplexity: 3.648046276272597
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_1 > METHOD_1 ( TYPE_2 < TYPE_2 > > ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657854
Validation perplexity: 4.070933387129766
Model saved checkpoint!
Epoch 16 / 1000
Epoch Step: 5 / 135 Loss: 43.171077728271484 Tokens per Sec: 19627.33775456306
Epoch Step: 10 / 135 Loss: 25.34645652770996 Tokens per Sec: 24203.860941559615
Epoch Step: 15 / 135 Loss: 30.04229736328125 Tokens per Sec: 23627.659647724406
Epoch Step: 20 / 135 Loss: 22.43309211730957 Tokens per Sec: 19070.41490531867
Epoch Step: 25 / 135 Loss: 21.984886169433594 Tokens per Sec: 19213.581933337948
Epoch Step: 30 / 135 Loss: 51.98210906982422 Tokens per Sec: 20925.305685486965
Epoch Step: 35 / 135 Loss: 48.42426300048828 Tokens per Sec: 23514.59330219045
Epoch Step: 40 / 135 Loss: 19.214080810546875 Tokens per Sec: 18654.193008054626
Epoch Step: 45 / 135 Loss: 28.571727752685547 Tokens per Sec: 21703.89641301706
Epoch Step: 50 / 135 Loss: 183.8543243408203 Tokens per Sec: 19632.095189977008
Epoch Step: 55 / 135 Loss: 25.430030822753906 Tokens per Sec: 18634.262019373033
Epoch Step: 60 / 135 Loss: 31.33616065979004 Tokens per Sec: 19479.636912339
Epoch Step: 65 / 135 Loss: 72.38074493408203 Tokens per Sec: 21858.364105201155
Epoch Step: 70 / 135 Loss: 15.714164733886719 Tokens per Sec: 21580.88742804919
Epoch Step: 75 / 135 Loss: 12.560924530029297 Tokens per Sec: 21995.582153062565
Epoch Step: 80 / 135 Loss: 16.826398849487305 Tokens per Sec: 23069.81112824724
Epoch Step: 85 / 135 Loss: 46.327728271484375 Tokens per Sec: 15529.754091460989
Epoch Step: 90 / 135 Loss: 22.47870635986328 Tokens per Sec: 16974.06904546539
Epoch Step: 95 / 135 Loss: 26.63761329650879 Tokens per Sec: 19277.290713329076
Epoch Step: 100 / 135 Loss: 44.57936096191406 Tokens per Sec: 20996.027747932232
Epoch Step: 105 / 135 Loss: 20.9052791595459 Tokens per Sec: 17092.363339538195
Epoch Step: 110 / 135 Loss: 16.87588882446289 Tokens per Sec: 19698.550215429852
Epoch Step: 115 / 135 Loss: 36.87314224243164 Tokens per Sec: 17147.447314578367
Epoch Step: 120 / 135 Loss: 116.78137969970703 Tokens per Sec: 18722.36159208794
Epoch Step: 125 / 135 Loss: 51.6406364440918 Tokens per Sec: 18757.983627633937
Epoch Step: 130 / 135 Loss: 38.145179748535156 Tokens per Sec: 19035.228488739922
Epoch Step: 135 / 135 Loss: 21.933815002441406 Tokens per Sec: 17657.57059567822
Epoch ended with duration 0:00:12.819277
Train perplexity: 3.915361341490908
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 < TYPE_2 > ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652507
Validation perplexity: 3.081332518660152
Model saved best_on_validation!
Epoch 17 / 1000
Epoch Step: 5 / 135 Loss: 22.189260482788086 Tokens per Sec: 19227.38822701318
Epoch Step: 10 / 135 Loss: 35.43132781982422 Tokens per Sec: 21291.557805431854
Epoch Step: 15 / 135 Loss: 27.796798706054688 Tokens per Sec: 21531.32838503069
Epoch Step: 20 / 135 Loss: 35.42228698730469 Tokens per Sec: 19889.61870893642
Epoch Step: 25 / 135 Loss: 28.984159469604492 Tokens per Sec: 17026.066496290292
Epoch Step: 30 / 135 Loss: 14.828625679016113 Tokens per Sec: 20706.685526677593
Epoch Step: 35 / 135 Loss: 25.95279312133789 Tokens per Sec: 21840.324417953998
Epoch Step: 40 / 135 Loss: 25.42424201965332 Tokens per Sec: 20820.16035036639
Epoch Step: 45 / 135 Loss: 50.09659957885742 Tokens per Sec: 24046.7940011137
Epoch Step: 50 / 135 Loss: 27.361347198486328 Tokens per Sec: 17107.094870428715
Epoch Step: 55 / 135 Loss: 21.080345153808594 Tokens per Sec: 18273.471614428654
Epoch Step: 60 / 135 Loss: 35.566097259521484 Tokens per Sec: 20205.669256874324
Epoch Step: 65 / 135 Loss: 142.1509552001953 Tokens per Sec: 21798.147625898073
Epoch Step: 70 / 135 Loss: 63.1078987121582 Tokens per Sec: 22146.964418888932
Epoch Step: 75 / 135 Loss: 15.347320556640625 Tokens per Sec: 23688.0485161713
Epoch Step: 80 / 135 Loss: 21.855770111083984 Tokens per Sec: 16710.32529652183
Epoch Step: 85 / 135 Loss: 28.13661003112793 Tokens per Sec: 23029.91243839636
Epoch Step: 90 / 135 Loss: 71.44658660888672 Tokens per Sec: 20196.99502733903
Epoch Step: 95 / 135 Loss: 58.538047790527344 Tokens per Sec: 18476.22665318216
Epoch Step: 100 / 135 Loss: 12.157102584838867 Tokens per Sec: 20569.369270778458
Epoch Step: 105 / 135 Loss: 35.145076751708984 Tokens per Sec: 17576.661555605227
Epoch Step: 110 / 135 Loss: 43.068397521972656 Tokens per Sec: 19448.477800939105
Epoch Step: 115 / 135 Loss: 34.67184066772461 Tokens per Sec: 19194.119021526312
Epoch Step: 120 / 135 Loss: 13.995912551879883 Tokens per Sec: 15852.950447159541
Epoch Step: 125 / 135 Loss: 13.549640655517578 Tokens per Sec: 17560.018584774964
Epoch Step: 130 / 135 Loss: 136.57989501953125 Tokens per Sec: 17343.621842108052
Epoch Step: 135 / 135 Loss: 29.578136444091797 Tokens per Sec: 18798.546630228124
Epoch ended with duration 0:00:12.862253
Train perplexity: 4.309491671967366
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658867
Validation perplexity: 3.7098594562284566
Epoch 18 / 1000
Epoch Step: 5 / 135 Loss: 27.326187133789062 Tokens per Sec: 21153.186685453507
Epoch Step: 10 / 135 Loss: 22.029266357421875 Tokens per Sec: 22043.884946589256
Epoch Step: 15 / 135 Loss: 49.54449462890625 Tokens per Sec: 22483.635383742898
Epoch Step: 20 / 135 Loss: 50.959049224853516 Tokens per Sec: 21523.486055407357
Epoch Step: 25 / 135 Loss: 91.6992416381836 Tokens per Sec: 17753.418042777485
Epoch Step: 30 / 135 Loss: 49.89456558227539 Tokens per Sec: 22865.93214271711
Epoch Step: 35 / 135 Loss: 72.4966049194336 Tokens per Sec: 18268.08936270283
Epoch Step: 40 / 135 Loss: 45.31509017944336 Tokens per Sec: 20836.88168755732
Epoch Step: 45 / 135 Loss: 55.730445861816406 Tokens per Sec: 21374.047295910415
Epoch Step: 50 / 135 Loss: 20.716815948486328 Tokens per Sec: 18921.697648055222
Epoch Step: 55 / 135 Loss: 30.02493667602539 Tokens per Sec: 21525.44351101318
Epoch Step: 60 / 135 Loss: 45.57577896118164 Tokens per Sec: 20067.81420490106
Epoch Step: 65 / 135 Loss: 13.828272819519043 Tokens per Sec: 17989.5154418091
Epoch Step: 70 / 135 Loss: 25.398529052734375 Tokens per Sec: 20138.797577780137
Epoch Step: 75 / 135 Loss: 32.26913070678711 Tokens per Sec: 21377.262033633746
Epoch Step: 80 / 135 Loss: 54.640220642089844 Tokens per Sec: 17987.207637231502
Epoch Step: 85 / 135 Loss: 20.257789611816406 Tokens per Sec: 21274.782607547033
Epoch Step: 90 / 135 Loss: 15.145465850830078 Tokens per Sec: 19562.374516465145
Epoch Step: 95 / 135 Loss: 16.472232818603516 Tokens per Sec: 20213.728929519493
Epoch Step: 100 / 135 Loss: 26.621807098388672 Tokens per Sec: 19270.56098420732
Epoch Step: 105 / 135 Loss: 17.687305450439453 Tokens per Sec: 16723.991539478375
Epoch Step: 110 / 135 Loss: 43.67924118041992 Tokens per Sec: 18049.774962396754
Epoch Step: 115 / 135 Loss: 35.88841247558594 Tokens per Sec: 17769.813781600893
Epoch Step: 120 / 135 Loss: 54.82830810546875 Tokens per Sec: 20074.40813919375
Epoch Step: 125 / 135 Loss: 37.552978515625 Tokens per Sec: 19943.900349539468
Epoch Step: 130 / 135 Loss: 52.82917785644531 Tokens per Sec: 20706.649498260722
Epoch Step: 135 / 135 Loss: 15.447895050048828 Tokens per Sec: 15921.819483469855
Epoch ended with duration 0:00:12.803364
Train perplexity: 3.969206915417764
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.661708
Validation perplexity: 3.495830930295629
Epoch 19 / 1000
Epoch Step: 5 / 135 Loss: 25.07455825805664 Tokens per Sec: 22771.87754070161
Epoch Step: 10 / 135 Loss: 35.29938507080078 Tokens per Sec: 20135.31321255361
Epoch Step: 15 / 135 Loss: 38.649959564208984 Tokens per Sec: 20061.542523079144
Epoch Step: 20 / 135 Loss: 15.700475692749023 Tokens per Sec: 18898.45211240826
Epoch Step: 25 / 135 Loss: 24.376447677612305 Tokens per Sec: 19789.920584826603
Epoch Step: 30 / 135 Loss: 37.22661590576172 Tokens per Sec: 20220.25218365105
Epoch Step: 35 / 135 Loss: 41.2542610168457 Tokens per Sec: 20631.63766726223
Epoch Step: 40 / 135 Loss: 18.397951126098633 Tokens per Sec: 18717.237911410088
Epoch Step: 45 / 135 Loss: 44.9871711730957 Tokens per Sec: 23157.628730979966
Epoch Step: 50 / 135 Loss: 74.06607055664062 Tokens per Sec: 19930.21289120906
Epoch Step: 55 / 135 Loss: 28.208364486694336 Tokens per Sec: 22787.569817974618
Epoch Step: 60 / 135 Loss: 36.72739791870117 Tokens per Sec: 19019.195144290843
Epoch Step: 65 / 135 Loss: 27.932296752929688 Tokens per Sec: 18366.354630909056
Epoch Step: 70 / 135 Loss: 121.60091400146484 Tokens per Sec: 21394.76233832399
Epoch Step: 75 / 135 Loss: 12.34933090209961 Tokens per Sec: 20806.351043286722
Epoch Step: 80 / 135 Loss: 29.68307876586914 Tokens per Sec: 21176.614744896913
Epoch Step: 85 / 135 Loss: 53.072509765625 Tokens per Sec: 22456.023110727023
Epoch Step: 90 / 135 Loss: 33.838218688964844 Tokens per Sec: 16028.30752069071
Epoch Step: 95 / 135 Loss: 23.28948211669922 Tokens per Sec: 17542.641776078224
Epoch Step: 100 / 135 Loss: 66.97395324707031 Tokens per Sec: 23725.2431091857
Epoch Step: 105 / 135 Loss: 19.511287689208984 Tokens per Sec: 18588.435926645354
Epoch Step: 110 / 135 Loss: 17.423444747924805 Tokens per Sec: 19276.063447900226
Epoch Step: 115 / 135 Loss: 37.378421783447266 Tokens per Sec: 19083.716738020314
Epoch Step: 120 / 135 Loss: 70.94491577148438 Tokens per Sec: 15044.73094019634
Epoch Step: 125 / 135 Loss: 19.965932846069336 Tokens per Sec: 17619.662316505906
Epoch Step: 130 / 135 Loss: 65.78119659423828 Tokens per Sec: 18194.507258127494
Epoch Step: 135 / 135 Loss: 42.398529052734375 Tokens per Sec: 18530.451124349005
Epoch ended with duration 0:00:12.895875
Train perplexity: 3.48493552653714
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652742
Validation perplexity: 2.7207018603210984
Model saved best_on_validation!
Epoch 20 / 1000
Epoch Step: 5 / 135 Loss: 29.641550064086914 Tokens per Sec: 18531.166177484803
Epoch Step: 10 / 135 Loss: 25.318408966064453 Tokens per Sec: 19082.265512110884
Epoch Step: 15 / 135 Loss: 31.69355583190918 Tokens per Sec: 19668.099457149983
Epoch Step: 20 / 135 Loss: 20.451858520507812 Tokens per Sec: 19522.75074870592
Epoch Step: 25 / 135 Loss: 23.17438316345215 Tokens per Sec: 21861.63457564843
Epoch Step: 30 / 135 Loss: 16.85663604736328 Tokens per Sec: 23525.5666179948
Epoch Step: 35 / 135 Loss: 17.8603458404541 Tokens per Sec: 22209.960612466453
Epoch Step: 40 / 135 Loss: 25.27621078491211 Tokens per Sec: 18771.45039714487
Epoch Step: 45 / 135 Loss: 30.90663719177246 Tokens per Sec: 23125.389356670727
Epoch Step: 50 / 135 Loss: 15.568161964416504 Tokens per Sec: 17239.99711221255
Epoch Step: 55 / 135 Loss: 15.14737606048584 Tokens per Sec: 20447.2666721169
Epoch Step: 60 / 135 Loss: 45.87153244018555 Tokens per Sec: 19810.829744738247
Epoch Step: 65 / 135 Loss: 17.7167911529541 Tokens per Sec: 20353.211791116715
Epoch Step: 70 / 135 Loss: 26.802501678466797 Tokens per Sec: 21043.217154787457
Epoch Step: 75 / 135 Loss: 38.88462829589844 Tokens per Sec: 18058.091075955926
Epoch Step: 80 / 135 Loss: 41.69112777709961 Tokens per Sec: 20252.370942732243
Epoch Step: 85 / 135 Loss: 25.035053253173828 Tokens per Sec: 19370.482327319492
Epoch Step: 90 / 135 Loss: 29.86870765686035 Tokens per Sec: 21364.72825201864
Epoch Step: 95 / 135 Loss: 48.90634536743164 Tokens per Sec: 22572.42830218244
Epoch Step: 100 / 135 Loss: 38.88138961791992 Tokens per Sec: 20579.81828069561
Epoch Step: 105 / 135 Loss: 42.16788101196289 Tokens per Sec: 18571.284597521928
Epoch Step: 110 / 135 Loss: 13.505614280700684 Tokens per Sec: 18105.854304125263
Epoch Step: 115 / 135 Loss: 51.496456146240234 Tokens per Sec: 19842.125565174298
Epoch Step: 120 / 135 Loss: 40.894222259521484 Tokens per Sec: 19496.730671468
Epoch Step: 125 / 135 Loss: 32.8644905090332 Tokens per Sec: 17636.207290258288
Epoch Step: 130 / 135 Loss: 22.908058166503906 Tokens per Sec: 15963.661149936499
Epoch Step: 135 / 135 Loss: 50.0430908203125 Tokens per Sec: 19403.911263971288
Epoch ended with duration 0:00:12.845950
Train perplexity: 2.973047753727155
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655515
Validation perplexity: 3.1386879816890993
Model saved checkpoint!
Epoch 21 / 1000
Epoch Step: 5 / 135 Loss: 17.779159545898438 Tokens per Sec: 16368.300965298935
Epoch Step: 10 / 135 Loss: 17.335372924804688 Tokens per Sec: 19539.862994478983
Epoch Step: 15 / 135 Loss: 14.7807035446167 Tokens per Sec: 18405.373093424252
Epoch Step: 20 / 135 Loss: 14.06608772277832 Tokens per Sec: 19678.916000036017
Epoch Step: 25 / 135 Loss: 34.4997444152832 Tokens per Sec: 20943.190890914153
Epoch Step: 30 / 135 Loss: 13.122178077697754 Tokens per Sec: 20537.59680528454
Epoch Step: 35 / 135 Loss: 32.54541015625 Tokens per Sec: 24196.02335368706
Epoch Step: 40 / 135 Loss: 39.88278579711914 Tokens per Sec: 19216.67474786758
Epoch Step: 45 / 135 Loss: 24.425811767578125 Tokens per Sec: 23066.22890135165
Epoch Step: 50 / 135 Loss: 23.39719009399414 Tokens per Sec: 16799.083752854855
Epoch Step: 55 / 135 Loss: 17.78564453125 Tokens per Sec: 19499.44255762223
Epoch Step: 60 / 135 Loss: 21.476186752319336 Tokens per Sec: 23089.27681662115
Epoch Step: 65 / 135 Loss: 44.40657043457031 Tokens per Sec: 23939.830760119723
Epoch Step: 70 / 135 Loss: 133.4579315185547 Tokens per Sec: 19915.228899881477
Epoch Step: 75 / 135 Loss: 32.732364654541016 Tokens per Sec: 19545.043870865335
Epoch Step: 80 / 135 Loss: 41.584842681884766 Tokens per Sec: 20692.43415245335
Epoch Step: 85 / 135 Loss: 107.88514709472656 Tokens per Sec: 20785.04185679829
Epoch Step: 90 / 135 Loss: 21.49921989440918 Tokens per Sec: 22672.12253400366
Epoch Step: 95 / 135 Loss: 29.30596351623535 Tokens per Sec: 16596.863127425277
Epoch Step: 100 / 135 Loss: 26.07192039489746 Tokens per Sec: 22714.338334058102
Epoch Step: 105 / 135 Loss: 26.57535171508789 Tokens per Sec: 19641.74790402075
Epoch Step: 110 / 135 Loss: 36.35383224487305 Tokens per Sec: 17702.22555053952
Epoch Step: 115 / 135 Loss: 31.437843322753906 Tokens per Sec: 16965.22746146738
Epoch Step: 120 / 135 Loss: 35.91848373413086 Tokens per Sec: 19377.889856158774
Epoch Step: 125 / 135 Loss: 27.929637908935547 Tokens per Sec: 17327.471295108793
Epoch Step: 130 / 135 Loss: 34.82318115234375 Tokens per Sec: 17860.992257194237
Epoch Step: 135 / 135 Loss: 11.396200180053711 Tokens per Sec: 17551.64065109868
Epoch ended with duration 0:00:12.871029
Train perplexity: 3.1168330827597797
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658929
Validation perplexity: 3.28031470014316
Epoch 22 / 1000
Epoch Step: 5 / 135 Loss: 10.009164810180664 Tokens per Sec: 20503.01910447422
Epoch Step: 10 / 135 Loss: 21.43739891052246 Tokens per Sec: 22503.928300007
Epoch Step: 15 / 135 Loss: 30.77515411376953 Tokens per Sec: 21962.783064029176
Epoch Step: 20 / 135 Loss: 40.33802032470703 Tokens per Sec: 22395.303484652366
Epoch Step: 25 / 135 Loss: 34.7256965637207 Tokens per Sec: 22790.94746047608
Epoch Step: 30 / 135 Loss: 10.95960521697998 Tokens per Sec: 21607.06310451288
Epoch Step: 35 / 135 Loss: 39.33361053466797 Tokens per Sec: 22183.838574162197
Epoch Step: 40 / 135 Loss: 22.831079483032227 Tokens per Sec: 19214.025392105264
Epoch Step: 45 / 135 Loss: 22.076141357421875 Tokens per Sec: 21400.975501118584
Epoch Step: 50 / 135 Loss: 27.866621017456055 Tokens per Sec: 19055.44514006111
Epoch Step: 55 / 135 Loss: 41.02512741088867 Tokens per Sec: 21545.44519231717
Epoch Step: 60 / 135 Loss: 68.00111389160156 Tokens per Sec: 16669.427690796743
Epoch Step: 65 / 135 Loss: 15.528883934020996 Tokens per Sec: 22389.74869735312
Epoch Step: 70 / 135 Loss: 25.559799194335938 Tokens per Sec: 17709.338207463243
Epoch Step: 75 / 135 Loss: 37.22544479370117 Tokens per Sec: 20288.265899819115
Epoch Step: 80 / 135 Loss: 11.438315391540527 Tokens per Sec: 21253.653877650828
Epoch Step: 85 / 135 Loss: 26.469778060913086 Tokens per Sec: 17501.653457292272
Epoch Step: 90 / 135 Loss: 35.57283020019531 Tokens per Sec: 19606.56339585872
Epoch Step: 95 / 135 Loss: 28.398666381835938 Tokens per Sec: 19756.935686211214
Epoch Step: 100 / 135 Loss: 39.83378982543945 Tokens per Sec: 23436.949132493148
Epoch Step: 105 / 135 Loss: 37.48217010498047 Tokens per Sec: 18858.27015335567
Epoch Step: 110 / 135 Loss: 18.307172775268555 Tokens per Sec: 16698.688671806238
Epoch Step: 115 / 135 Loss: 27.780118942260742 Tokens per Sec: 18004.890073159087
Epoch Step: 120 / 135 Loss: 9.988555908203125 Tokens per Sec: 19542.696158098424
Epoch Step: 125 / 135 Loss: 23.91242027282715 Tokens per Sec: 18130.659451656808
Epoch Step: 130 / 135 Loss: 16.334518432617188 Tokens per Sec: 16782.2242972354
Epoch Step: 135 / 135 Loss: 38.17509078979492 Tokens per Sec: 17467.131684946762
Epoch ended with duration 0:00:12.779677
Train perplexity: 2.9824363036247576
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653235
Validation perplexity: 2.5072810239403855
Model saved best_on_validation!
Epoch 23 / 1000
Epoch Step: 5 / 135 Loss: 35.668216705322266 Tokens per Sec: 19766.692998204668
Epoch Step: 10 / 135 Loss: 27.980735778808594 Tokens per Sec: 22121.965431388977
Epoch Step: 15 / 135 Loss: 99.38280487060547 Tokens per Sec: 21792.703572493294
Epoch Step: 20 / 135 Loss: 11.128266334533691 Tokens per Sec: 19755.580173746657
Epoch Step: 25 / 135 Loss: 17.73745346069336 Tokens per Sec: 15075.197096833846
Epoch Step: 30 / 135 Loss: 42.97060775756836 Tokens per Sec: 20747.007954547673
Epoch Step: 35 / 135 Loss: 10.443742752075195 Tokens per Sec: 22823.089145145892
Epoch Step: 40 / 135 Loss: 10.965499877929688 Tokens per Sec: 21531.90369357312
Epoch Step: 45 / 135 Loss: 24.441125869750977 Tokens per Sec: 18243.696648066445
Epoch Step: 50 / 135 Loss: 23.26048469543457 Tokens per Sec: 21512.254241647133
Epoch Step: 55 / 135 Loss: 16.681787490844727 Tokens per Sec: 20412.935810476403
Epoch Step: 60 / 135 Loss: 19.926393508911133 Tokens per Sec: 22583.795898957465
Epoch Step: 65 / 135 Loss: 29.408994674682617 Tokens per Sec: 18926.73802777878
Epoch Step: 70 / 135 Loss: 15.407779693603516 Tokens per Sec: 17255.618434645872
Epoch Step: 75 / 135 Loss: 67.69065856933594 Tokens per Sec: 20043.81675295443
Epoch Step: 80 / 135 Loss: 40.00979232788086 Tokens per Sec: 20756.783327943183
Epoch Step: 85 / 135 Loss: 42.81657409667969 Tokens per Sec: 21510.744516356077
Epoch Step: 90 / 135 Loss: 39.86483383178711 Tokens per Sec: 21393.94835663165
Epoch Step: 95 / 135 Loss: 32.18213653564453 Tokens per Sec: 21237.67250980892
Epoch Step: 100 / 135 Loss: 35.095218658447266 Tokens per Sec: 19013.118735699918
Epoch Step: 105 / 135 Loss: 24.3948917388916 Tokens per Sec: 15985.615133375717
Epoch Step: 110 / 135 Loss: 36.72465896606445 Tokens per Sec: 18929.081273186574
Epoch Step: 115 / 135 Loss: 22.53347396850586 Tokens per Sec: 18899.590718188898
Epoch Step: 120 / 135 Loss: 41.76675033569336 Tokens per Sec: 17805.756394706143
Epoch Step: 125 / 135 Loss: 15.373209953308105 Tokens per Sec: 19226.48409852873
Epoch Step: 130 / 135 Loss: 80.4980239868164 Tokens per Sec: 18937.06383523476
Epoch Step: 135 / 135 Loss: 35.101444244384766 Tokens per Sec: 18396.100798705556
Epoch ended with duration 0:00:12.825888
Train perplexity: 2.9862111259500796
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.661600
Validation perplexity: 3.7403525672089124
Epoch 24 / 1000
Epoch Step: 5 / 135 Loss: 63.00856018066406 Tokens per Sec: 19344.488691243365
Epoch Step: 10 / 135 Loss: 11.261054992675781 Tokens per Sec: 22457.19967141545
Epoch Step: 15 / 135 Loss: 16.541818618774414 Tokens per Sec: 19825.027384972676
Epoch Step: 20 / 135 Loss: 13.855456352233887 Tokens per Sec: 18449.75257533753
Epoch Step: 25 / 135 Loss: 18.290935516357422 Tokens per Sec: 17333.077344465535
Epoch Step: 30 / 135 Loss: 24.72946548461914 Tokens per Sec: 20962.06538946495
Epoch Step: 35 / 135 Loss: 27.631059646606445 Tokens per Sec: 20077.080835870078
Epoch Step: 40 / 135 Loss: 33.33541488647461 Tokens per Sec: 19940.58850699534
Epoch Step: 45 / 135 Loss: 59.39960479736328 Tokens per Sec: 19530.916428476783
Epoch Step: 50 / 135 Loss: 37.32337951660156 Tokens per Sec: 22238.686293040955
Epoch Step: 55 / 135 Loss: 23.722394943237305 Tokens per Sec: 19394.137040150377
Epoch Step: 60 / 135 Loss: 74.61494445800781 Tokens per Sec: 21730.90594104511
Epoch Step: 65 / 135 Loss: 26.799821853637695 Tokens per Sec: 22748.839768809645
Epoch Step: 70 / 135 Loss: 38.23790740966797 Tokens per Sec: 20427.04880631321
Epoch Step: 75 / 135 Loss: 12.450492858886719 Tokens per Sec: 18398.476738671856
Epoch Step: 80 / 135 Loss: 21.058656692504883 Tokens per Sec: 22050.777846518795
Epoch Step: 85 / 135 Loss: 91.27995300292969 Tokens per Sec: 20676.44266758309
Epoch Step: 90 / 135 Loss: 35.65226745605469 Tokens per Sec: 20659.969842093014
Epoch Step: 95 / 135 Loss: 37.08546829223633 Tokens per Sec: 21689.755496487705
Epoch Step: 100 / 135 Loss: 41.35136032104492 Tokens per Sec: 19706.838637161924
Epoch Step: 105 / 135 Loss: 155.02835083007812 Tokens per Sec: 20121.86922411423
Epoch Step: 110 / 135 Loss: 31.372467041015625 Tokens per Sec: 17646.40360726891
Epoch Step: 115 / 135 Loss: 19.687232971191406 Tokens per Sec: 17786.15099433985
Epoch Step: 120 / 135 Loss: 36.26015853881836 Tokens per Sec: 19415.802818435637
Epoch Step: 125 / 135 Loss: 36.645381927490234 Tokens per Sec: 17804.317955759474
Epoch Step: 130 / 135 Loss: 28.873443603515625 Tokens per Sec: 18468.53421026737
Epoch Step: 135 / 135 Loss: 26.398975372314453 Tokens per Sec: 17626.05212229148
Epoch ended with duration 0:00:12.819394
Train perplexity: 2.6487308576284536
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657238
Validation perplexity: 2.954400879794471
Epoch 25 / 1000
Epoch Step: 5 / 135 Loss: 27.7029972076416 Tokens per Sec: 20937.26302906643
Epoch Step: 10 / 135 Loss: 18.831878662109375 Tokens per Sec: 19563.899221999964
Epoch Step: 15 / 135 Loss: 21.691509246826172 Tokens per Sec: 20048.48876040678
Epoch Step: 20 / 135 Loss: 20.613632202148438 Tokens per Sec: 21582.45086932425
Epoch Step: 25 / 135 Loss: 15.969173431396484 Tokens per Sec: 22188.405365592444
Epoch Step: 30 / 135 Loss: 23.74159812927246 Tokens per Sec: 25770.10807868296
Epoch Step: 35 / 135 Loss: 13.358222007751465 Tokens per Sec: 18493.105272012555
Epoch Step: 40 / 135 Loss: 31.777263641357422 Tokens per Sec: 21316.27977473133
Epoch Step: 45 / 135 Loss: 121.82967376708984 Tokens per Sec: 21636.32997544118
Epoch Step: 50 / 135 Loss: 28.717723846435547 Tokens per Sec: 19675.56660561012
Epoch Step: 55 / 135 Loss: 22.210538864135742 Tokens per Sec: 23282.014304780063
Epoch Step: 60 / 135 Loss: 28.29684066772461 Tokens per Sec: 19170.75542834267
Epoch Step: 65 / 135 Loss: 36.57341766357422 Tokens per Sec: 18992.874996832954
Epoch Step: 70 / 135 Loss: 37.02116012573242 Tokens per Sec: 18387.052022795604
Epoch Step: 75 / 135 Loss: 19.125503540039062 Tokens per Sec: 20179.933034687165
Epoch Step: 80 / 135 Loss: 11.451925277709961 Tokens per Sec: 22077.95768451924
Epoch Step: 85 / 135 Loss: 11.821062088012695 Tokens per Sec: 16056.255124650761
Epoch Step: 90 / 135 Loss: 18.185726165771484 Tokens per Sec: 21091.600525148664
Epoch Step: 95 / 135 Loss: 30.273466110229492 Tokens per Sec: 19807.665716361775
Epoch Step: 100 / 135 Loss: 18.11699676513672 Tokens per Sec: 22268.370192606246
Epoch Step: 105 / 135 Loss: 16.177888870239258 Tokens per Sec: 18318.382235117067
Epoch Step: 110 / 135 Loss: 31.158199310302734 Tokens per Sec: 19308.48927284611
Epoch Step: 115 / 135 Loss: 51.7557487487793 Tokens per Sec: 17176.723560803093
Epoch Step: 120 / 135 Loss: 27.722061157226562 Tokens per Sec: 18624.236891073368
Epoch Step: 125 / 135 Loss: 21.91175079345703 Tokens per Sec: 17637.64313289299
Epoch Step: 130 / 135 Loss: 11.870373725891113 Tokens per Sec: 18004.671671590248
Epoch Step: 135 / 135 Loss: 30.877126693725586 Tokens per Sec: 18080.611353759126
Epoch ended with duration 0:00:12.741941
Train perplexity: 2.7418723923238573
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657211
Validation perplexity: 2.5799235162619163
Model saved checkpoint!
Epoch 26 / 1000
Epoch Step: 5 / 135 Loss: 19.83259391784668 Tokens per Sec: 20005.377924920038
Epoch Step: 10 / 135 Loss: 12.747960090637207 Tokens per Sec: 18555.247576368765
Epoch Step: 15 / 135 Loss: 89.85334777832031 Tokens per Sec: 15868.514930998275
Epoch Step: 20 / 135 Loss: 70.7542724609375 Tokens per Sec: 19966.481531410085
Epoch Step: 25 / 135 Loss: 10.069814682006836 Tokens per Sec: 24687.051358793782
Epoch Step: 30 / 135 Loss: 36.553794860839844 Tokens per Sec: 21168.43904992968
Epoch Step: 35 / 135 Loss: 14.881753921508789 Tokens per Sec: 16852.481423500398
Epoch Step: 40 / 135 Loss: 25.503646850585938 Tokens per Sec: 19695.60337804533
Epoch Step: 45 / 135 Loss: 8.566622734069824 Tokens per Sec: 18276.475882572406
Epoch Step: 50 / 135 Loss: 40.92504119873047 Tokens per Sec: 22720.09240915808
Epoch Step: 55 / 135 Loss: 23.483007431030273 Tokens per Sec: 22189.3422990296
Epoch Step: 60 / 135 Loss: 15.507299423217773 Tokens per Sec: 20197.885298287754
Epoch Step: 65 / 135 Loss: 18.487136840820312 Tokens per Sec: 21861.133298892142
Epoch Step: 70 / 135 Loss: 45.72273635864258 Tokens per Sec: 20381.737322518562
Epoch Step: 75 / 135 Loss: 72.68032836914062 Tokens per Sec: 18478.931106438224
Epoch Step: 80 / 135 Loss: 28.47084617614746 Tokens per Sec: 23167.311956266774
Epoch Step: 85 / 135 Loss: 31.71984100341797 Tokens per Sec: 21210.969966424364
Epoch Step: 90 / 135 Loss: 19.409740447998047 Tokens per Sec: 19230.892155208818
Epoch Step: 95 / 135 Loss: 9.626235961914062 Tokens per Sec: 21222.632515163896
Epoch Step: 100 / 135 Loss: 40.75381088256836 Tokens per Sec: 21172.985521148614
Epoch Step: 105 / 135 Loss: 27.84524154663086 Tokens per Sec: 19060.535047729445
Epoch Step: 110 / 135 Loss: 23.577306747436523 Tokens per Sec: 18820.55539552126
Epoch Step: 115 / 135 Loss: 23.010841369628906 Tokens per Sec: 19415.679094729265
Epoch Step: 120 / 135 Loss: 26.163400650024414 Tokens per Sec: 19403.539996112948
Epoch Step: 125 / 135 Loss: 34.596744537353516 Tokens per Sec: 17203.841262049766
Epoch Step: 130 / 135 Loss: 93.18522644042969 Tokens per Sec: 15583.40727028155
Epoch Step: 135 / 135 Loss: 13.3228759765625 Tokens per Sec: 17765.85391608469
Epoch ended with duration 0:00:12.874552
Train perplexity: 2.6719139641108227
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.665568
Validation perplexity: 3.5301885667775195
Epoch 27 / 1000
Epoch Step: 5 / 135 Loss: 16.871849060058594 Tokens per Sec: 16103.080384749077
Epoch Step: 10 / 135 Loss: 9.841962814331055 Tokens per Sec: 15668.937785913446
Epoch Step: 15 / 135 Loss: 39.183780670166016 Tokens per Sec: 21185.729066367167
Epoch Step: 20 / 135 Loss: 25.19137191772461 Tokens per Sec: 22271.20722227734
Epoch Step: 25 / 135 Loss: 27.060909271240234 Tokens per Sec: 20375.145444755253
Epoch Step: 30 / 135 Loss: 35.160282135009766 Tokens per Sec: 19956.588153068027
Epoch Step: 35 / 135 Loss: 38.44670104980469 Tokens per Sec: 21910.528730549297
Epoch Step: 40 / 135 Loss: 17.691373825073242 Tokens per Sec: 21276.22013180871
Epoch Step: 45 / 135 Loss: 26.099220275878906 Tokens per Sec: 22217.78141227835
Epoch Step: 50 / 135 Loss: 17.60965347290039 Tokens per Sec: 18756.986274784533
Epoch Step: 55 / 135 Loss: 28.98563575744629 Tokens per Sec: 22022.178487603265
Epoch Step: 60 / 135 Loss: 13.594558715820312 Tokens per Sec: 19210.277664938712
Epoch Step: 65 / 135 Loss: 21.784963607788086 Tokens per Sec: 24535.06687124446
Epoch Step: 70 / 135 Loss: 35.289432525634766 Tokens per Sec: 19912.317838101826
Epoch Step: 75 / 135 Loss: 50.61751174926758 Tokens per Sec: 18939.117498105883
Epoch Step: 80 / 135 Loss: 16.561368942260742 Tokens per Sec: 19086.89330300274
Epoch Step: 85 / 135 Loss: 27.143667221069336 Tokens per Sec: 24931.57718323776
Epoch Step: 90 / 135 Loss: 11.191370964050293 Tokens per Sec: 17884.62533977169
Epoch Step: 95 / 135 Loss: 17.46986961364746 Tokens per Sec: 20632.755722300117
Epoch Step: 100 / 135 Loss: 30.33733367919922 Tokens per Sec: 20230.537563252543
Epoch Step: 105 / 135 Loss: 31.799907684326172 Tokens per Sec: 19641.25409180185
Epoch Step: 110 / 135 Loss: 31.22801399230957 Tokens per Sec: 19337.582067566076
Epoch Step: 115 / 135 Loss: 62.89682388305664 Tokens per Sec: 18727.229870307117
Epoch Step: 120 / 135 Loss: 16.3961238861084 Tokens per Sec: 18027.030164759104
Epoch Step: 125 / 135 Loss: 8.500657081604004 Tokens per Sec: 20474.316113405133
Epoch Step: 130 / 135 Loss: 22.723995208740234 Tokens per Sec: 17869.616099516566
Epoch Step: 135 / 135 Loss: 13.120655059814453 Tokens per Sec: 16410.6615165022
Epoch ended with duration 0:00:12.765347
Train perplexity: 2.357339230303115
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657415
Validation perplexity: 2.549177249307312
Epoch 28 / 1000
Epoch Step: 5 / 135 Loss: 26.767602920532227 Tokens per Sec: 20367.422375279042
Epoch Step: 10 / 135 Loss: 34.45438003540039 Tokens per Sec: 24586.53345716559
Epoch Step: 15 / 135 Loss: 13.818279266357422 Tokens per Sec: 20964.901387787133
Epoch Step: 20 / 135 Loss: 23.76093864440918 Tokens per Sec: 18226.079371151518
Epoch Step: 25 / 135 Loss: 46.184783935546875 Tokens per Sec: 22118.775418512494
Epoch Step: 30 / 135 Loss: 24.17989730834961 Tokens per Sec: 17920.21334779357
Epoch Step: 35 / 135 Loss: 18.08972930908203 Tokens per Sec: 21788.555577597483
Epoch Step: 40 / 135 Loss: 67.63982391357422 Tokens per Sec: 21069.757981112292
Epoch Step: 45 / 135 Loss: 11.681928634643555 Tokens per Sec: 18418.00019028878
Epoch Step: 50 / 135 Loss: 18.264102935791016 Tokens per Sec: 22681.22081468108
Epoch Step: 55 / 135 Loss: 55.465457916259766 Tokens per Sec: 18269.429014567715
Epoch Step: 60 / 135 Loss: 13.048816680908203 Tokens per Sec: 20440.53623387715
Epoch Step: 65 / 135 Loss: 40.264007568359375 Tokens per Sec: 20656.481642271832
Epoch Step: 70 / 135 Loss: 24.047443389892578 Tokens per Sec: 18252.073905132664
Epoch Step: 75 / 135 Loss: 176.48233032226562 Tokens per Sec: 20998.365071002165
Epoch Step: 80 / 135 Loss: 76.42093658447266 Tokens per Sec: 16544.938841824016
Epoch Step: 85 / 135 Loss: 30.10886573791504 Tokens per Sec: 17214.516707820498
Epoch Step: 90 / 135 Loss: 35.66106414794922 Tokens per Sec: 22582.945240943387
Epoch Step: 95 / 135 Loss: 24.113685607910156 Tokens per Sec: 22235.835886712128
Epoch Step: 100 / 135 Loss: 109.90226745605469 Tokens per Sec: 21517.459912175902
Epoch Step: 105 / 135 Loss: 28.247526168823242 Tokens per Sec: 18392.466839981564
Epoch Step: 110 / 135 Loss: 33.9232292175293 Tokens per Sec: 18373.006444052175
Epoch Step: 115 / 135 Loss: 21.439228057861328 Tokens per Sec: 18934.870784544684
Epoch Step: 120 / 135 Loss: 15.259475708007812 Tokens per Sec: 16450.339971400615
Epoch Step: 125 / 135 Loss: 28.29329490661621 Tokens per Sec: 16369.909286815762
Epoch Step: 130 / 135 Loss: 33.675724029541016 Tokens per Sec: 16132.612759554204
Epoch Step: 135 / 135 Loss: 25.680532455444336 Tokens per Sec: 17727.516133874586
Epoch ended with duration 0:00:13.006762
Train perplexity: 2.831754535948269
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.686139
Validation perplexity: 2.3400214921791864
Model saved best_on_validation!
Epoch 29 / 1000
Epoch Step: 5 / 135 Loss: 32.35405731201172 Tokens per Sec: 21311.753103701427
Epoch Step: 10 / 135 Loss: 28.428836822509766 Tokens per Sec: 21118.295586334054
Epoch Step: 15 / 135 Loss: 30.047014236450195 Tokens per Sec: 18530.885802865174
Epoch Step: 20 / 135 Loss: 12.84647274017334 Tokens per Sec: 20711.329056241386
Epoch Step: 25 / 135 Loss: 16.664119720458984 Tokens per Sec: 19793.097443155824
Epoch Step: 30 / 135 Loss: 20.065261840820312 Tokens per Sec: 21276.096751110967
Epoch Step: 35 / 135 Loss: 127.72406768798828 Tokens per Sec: 23534.4949183426
Epoch Step: 40 / 135 Loss: 16.337778091430664 Tokens per Sec: 21143.701721546695
Epoch Step: 45 / 135 Loss: 31.981985092163086 Tokens per Sec: 20373.163703832997
Epoch Step: 50 / 135 Loss: 28.67934226989746 Tokens per Sec: 21952.251308566803
Epoch Step: 55 / 135 Loss: 10.738687515258789 Tokens per Sec: 22167.757558175075
Epoch Step: 60 / 135 Loss: 12.961556434631348 Tokens per Sec: 15712.059392106232
Epoch Step: 65 / 135 Loss: 125.78666687011719 Tokens per Sec: 21782.87965837027
Epoch Step: 70 / 135 Loss: 25.483089447021484 Tokens per Sec: 17856.534585881604
Epoch Step: 75 / 135 Loss: 20.8013858795166 Tokens per Sec: 20046.77090726395
Epoch Step: 80 / 135 Loss: 13.155224800109863 Tokens per Sec: 22031.474292967807
Epoch Step: 85 / 135 Loss: 20.53339385986328 Tokens per Sec: 18197.6187564051
Epoch Step: 90 / 135 Loss: 15.262350082397461 Tokens per Sec: 17936.648632401924
Epoch Step: 95 / 135 Loss: 13.804428100585938 Tokens per Sec: 17707.954648090414
Epoch Step: 100 / 135 Loss: 29.75334358215332 Tokens per Sec: 21570.008267532845
Epoch Step: 105 / 135 Loss: 19.268558502197266 Tokens per Sec: 18429.446032400225
Epoch Step: 110 / 135 Loss: 14.596065521240234 Tokens per Sec: 15084.040283497046
Epoch Step: 115 / 135 Loss: 142.0123748779297 Tokens per Sec: 21152.076035703914
Epoch Step: 120 / 135 Loss: 29.462783813476562 Tokens per Sec: 17919.18377262988
Epoch Step: 125 / 135 Loss: 28.261524200439453 Tokens per Sec: 17550.759640704477
Epoch Step: 130 / 135 Loss: 35.135963439941406 Tokens per Sec: 17917.084997868533
Epoch Step: 135 / 135 Loss: 31.391984939575195 Tokens per Sec: 18668.213714282127
Epoch ended with duration 0:00:12.929937
Train perplexity: 2.837174801344819
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652954
Validation perplexity: 2.222272365611772
Model saved best_on_validation!
Epoch 30 / 1000
Epoch Step: 5 / 135 Loss: 38.761268615722656 Tokens per Sec: 18971.595337950774
Epoch Step: 10 / 135 Loss: 113.77091979980469 Tokens per Sec: 21626.595258977395
Epoch Step: 15 / 135 Loss: 34.31618881225586 Tokens per Sec: 22231.49152899977
Epoch Step: 20 / 135 Loss: 30.62352180480957 Tokens per Sec: 16983.516459685932
Epoch Step: 25 / 135 Loss: 17.559438705444336 Tokens per Sec: 22061.245184140174
Epoch Step: 30 / 135 Loss: 18.433034896850586 Tokens per Sec: 22704.89521778599
Epoch Step: 35 / 135 Loss: 10.911528587341309 Tokens per Sec: 23117.52886820964
Epoch Step: 40 / 135 Loss: 17.467252731323242 Tokens per Sec: 21103.306206810164
Epoch Step: 45 / 135 Loss: 14.361468315124512 Tokens per Sec: 22010.31525474665
Epoch Step: 50 / 135 Loss: 7.916555404663086 Tokens per Sec: 20132.486962224157
Epoch Step: 55 / 135 Loss: 22.70442771911621 Tokens per Sec: 22616.47329174474
Epoch Step: 60 / 135 Loss: 20.283647537231445 Tokens per Sec: 23119.15749034209
Epoch Step: 65 / 135 Loss: 138.80499267578125 Tokens per Sec: 23877.935036107207
Epoch Step: 70 / 135 Loss: 29.907108306884766 Tokens per Sec: 19467.06080257175
Epoch Step: 75 / 135 Loss: 8.987594604492188 Tokens per Sec: 16832.36735138023
Epoch Step: 80 / 135 Loss: 11.971620559692383 Tokens per Sec: 19106.124459097216
Epoch Step: 85 / 135 Loss: 8.927355766296387 Tokens per Sec: 20066.544818367394
Epoch Step: 90 / 135 Loss: 34.77411651611328 Tokens per Sec: 18545.587487251312
Epoch Step: 95 / 135 Loss: 16.073989868164062 Tokens per Sec: 19908.652461772923
Epoch Step: 100 / 135 Loss: 13.116219520568848 Tokens per Sec: 16711.988176810424
Epoch Step: 105 / 135 Loss: 64.03850555419922 Tokens per Sec: 16823.23760745752
Epoch Step: 110 / 135 Loss: 15.776395797729492 Tokens per Sec: 17461.289333490222
Epoch Step: 115 / 135 Loss: 32.84769058227539 Tokens per Sec: 19589.98731265249
Epoch Step: 120 / 135 Loss: 10.128077507019043 Tokens per Sec: 18685.111912386667
Epoch Step: 125 / 135 Loss: 18.711894989013672 Tokens per Sec: 18245.868289031034
Epoch Step: 130 / 135 Loss: 25.474428176879883 Tokens per Sec: 18945.949521663322
Epoch Step: 135 / 135 Loss: 22.08047103881836 Tokens per Sec: 18592.724509644802
Epoch ended with duration 0:00:12.773956
Train perplexity: 2.639687094582918
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658968
Validation perplexity: 2.2429570055360717
Model saved checkpoint!
Epoch 31 / 1000
Epoch Step: 5 / 135 Loss: 29.1289005279541 Tokens per Sec: 21320.66557029133
Epoch Step: 10 / 135 Loss: 25.65271759033203 Tokens per Sec: 22343.746913608695
Epoch Step: 15 / 135 Loss: 28.274539947509766 Tokens per Sec: 17130.56496573349
Epoch Step: 20 / 135 Loss: 127.56427001953125 Tokens per Sec: 18624.305014607533
Epoch Step: 25 / 135 Loss: 19.371755599975586 Tokens per Sec: 18854.983673863368
Epoch Step: 30 / 135 Loss: 24.80788803100586 Tokens per Sec: 20388.69636382977
Epoch Step: 35 / 135 Loss: 29.590662002563477 Tokens per Sec: 22341.55385980479
Epoch Step: 40 / 135 Loss: 18.525075912475586 Tokens per Sec: 22171.076939277402
Epoch Step: 45 / 135 Loss: 17.110952377319336 Tokens per Sec: 22245.8912646466
Epoch Step: 50 / 135 Loss: 33.74265670776367 Tokens per Sec: 20911.534359505597
Epoch Step: 55 / 135 Loss: 11.17612075805664 Tokens per Sec: 20842.37518924793
Epoch Step: 60 / 135 Loss: 14.480066299438477 Tokens per Sec: 19405.00264379373
Epoch Step: 65 / 135 Loss: 17.787677764892578 Tokens per Sec: 18585.906617293105
Epoch Step: 70 / 135 Loss: 20.592639923095703 Tokens per Sec: 17391.641243379105
Epoch Step: 75 / 135 Loss: 18.755481719970703 Tokens per Sec: 21196.23542253794
Epoch Step: 80 / 135 Loss: 17.598831176757812 Tokens per Sec: 22018.377290828426
Epoch Step: 85 / 135 Loss: 34.99285888671875 Tokens per Sec: 21972.553651351413
Epoch Step: 90 / 135 Loss: 25.063169479370117 Tokens per Sec: 20525.181881898137
Epoch Step: 95 / 135 Loss: 12.821239471435547 Tokens per Sec: 19429.07883480782
Epoch Step: 100 / 135 Loss: 22.481189727783203 Tokens per Sec: 20649.448210813494
Epoch Step: 105 / 135 Loss: 16.744701385498047 Tokens per Sec: 17099.68437378273
Epoch Step: 110 / 135 Loss: 18.64501953125 Tokens per Sec: 15680.739134401048
Epoch Step: 115 / 135 Loss: 30.87830352783203 Tokens per Sec: 18740.146594828948
Epoch Step: 120 / 135 Loss: 30.046354293823242 Tokens per Sec: 17066.82763546718
Epoch Step: 125 / 135 Loss: 25.981754302978516 Tokens per Sec: 21131.211584690016
Epoch Step: 130 / 135 Loss: 13.568331718444824 Tokens per Sec: 16624.399644821384
Epoch Step: 135 / 135 Loss: 25.09196662902832 Tokens per Sec: 19849.799807682724
Epoch ended with duration 0:00:12.820483
Train perplexity: 2.3786224484315865
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648971
Validation perplexity: 1.9254010460403723
Model saved best_on_validation!
Epoch 32 / 1000
Epoch Step: 5 / 135 Loss: 21.711435317993164 Tokens per Sec: 16800.538172005643
Epoch Step: 10 / 135 Loss: 25.353994369506836 Tokens per Sec: 20832.052774307907
Epoch Step: 15 / 135 Loss: 20.996379852294922 Tokens per Sec: 18135.195816005387
Epoch Step: 20 / 135 Loss: 8.225542068481445 Tokens per Sec: 22636.41914679306
Epoch Step: 25 / 135 Loss: 10.533134460449219 Tokens per Sec: 19682.318607093897
Epoch Step: 30 / 135 Loss: 14.541275024414062 Tokens per Sec: 20588.011515421185
Epoch Step: 35 / 135 Loss: 28.596248626708984 Tokens per Sec: 23086.50017261973
Epoch Step: 40 / 135 Loss: 8.73636245727539 Tokens per Sec: 15844.31873382702
Epoch Step: 45 / 135 Loss: 10.947373390197754 Tokens per Sec: 22466.510094261892
Epoch Step: 50 / 135 Loss: 21.635255813598633 Tokens per Sec: 21440.019269537024
Epoch Step: 55 / 135 Loss: 24.791261672973633 Tokens per Sec: 23192.641889882307
Epoch Step: 60 / 135 Loss: 9.622136116027832 Tokens per Sec: 21417.890811580844
Epoch Step: 65 / 135 Loss: 18.861690521240234 Tokens per Sec: 17449.856093668423
Epoch Step: 70 / 135 Loss: 27.662799835205078 Tokens per Sec: 19964.24593463759
Epoch Step: 75 / 135 Loss: 28.22591209411621 Tokens per Sec: 23317.059526549983
Epoch Step: 80 / 135 Loss: 8.121541023254395 Tokens per Sec: 18936.00987577852
Epoch Step: 85 / 135 Loss: 25.370601654052734 Tokens per Sec: 22489.99525163027
Epoch Step: 90 / 135 Loss: 23.065961837768555 Tokens per Sec: 18428.070667435877
Epoch Step: 95 / 135 Loss: 11.210773468017578 Tokens per Sec: 20332.81372897478
Epoch Step: 100 / 135 Loss: 8.392305374145508 Tokens per Sec: 21926.13044396027
Epoch Step: 105 / 135 Loss: 32.45903396606445 Tokens per Sec: 20220.072459684885
Epoch Step: 110 / 135 Loss: 71.85285949707031 Tokens per Sec: 16908.002941912113
Epoch Step: 115 / 135 Loss: 21.594797134399414 Tokens per Sec: 19593.028066333776
Epoch Step: 120 / 135 Loss: 23.695507049560547 Tokens per Sec: 18457.11062065771
Epoch Step: 125 / 135 Loss: 20.061559677124023 Tokens per Sec: 16332.92457299831
Epoch Step: 130 / 135 Loss: 31.2553768157959 Tokens per Sec: 18598.538669513204
Epoch Step: 135 / 135 Loss: 15.337254524230957 Tokens per Sec: 17760.715376881784
Epoch ended with duration 0:00:12.812927
Train perplexity: 2.4036430654025334
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657704
Validation perplexity: 2.4435687365572374
Epoch 33 / 1000
Epoch Step: 5 / 135 Loss: 26.453493118286133 Tokens per Sec: 20835.614730900692
Epoch Step: 10 / 135 Loss: 7.356191158294678 Tokens per Sec: 19753.993658343767
Epoch Step: 15 / 135 Loss: 10.49478530883789 Tokens per Sec: 19341.12151057754
Epoch Step: 20 / 135 Loss: 27.449981689453125 Tokens per Sec: 20524.766143486315
Epoch Step: 25 / 135 Loss: 12.009419441223145 Tokens per Sec: 18176.36496844037
Epoch Step: 30 / 135 Loss: 10.868408203125 Tokens per Sec: 19562.941085961076
Epoch Step: 35 / 135 Loss: 24.73504638671875 Tokens per Sec: 17414.374978718966
Epoch Step: 40 / 135 Loss: 13.880830764770508 Tokens per Sec: 18294.114281377864
Epoch Step: 45 / 135 Loss: 39.61262893676758 Tokens per Sec: 23811.9792746114
Epoch Step: 50 / 135 Loss: 24.210355758666992 Tokens per Sec: 21526.779263819328
Epoch Step: 55 / 135 Loss: 25.639331817626953 Tokens per Sec: 22325.792136331394
Epoch Step: 60 / 135 Loss: 11.985386848449707 Tokens per Sec: 17416.622755750308
Epoch Step: 65 / 135 Loss: 15.862455368041992 Tokens per Sec: 20466.912829857738
Epoch Step: 70 / 135 Loss: 27.35190200805664 Tokens per Sec: 20682.140743110598
Epoch Step: 75 / 135 Loss: 24.05849838256836 Tokens per Sec: 17645.366550547915
Epoch Step: 80 / 135 Loss: 8.847000122070312 Tokens per Sec: 23379.413523124847
Epoch Step: 85 / 135 Loss: 9.973628997802734 Tokens per Sec: 21011.0021653127
Epoch Step: 90 / 135 Loss: 23.64331817626953 Tokens per Sec: 21402.64651873496
Epoch Step: 95 / 135 Loss: 13.187581062316895 Tokens per Sec: 24057.250490247134
Epoch Step: 100 / 135 Loss: 14.252864837646484 Tokens per Sec: 22996.460332725364
Epoch Step: 105 / 135 Loss: 21.32854461669922 Tokens per Sec: 17917.16351310769
Epoch Step: 110 / 135 Loss: 13.333724975585938 Tokens per Sec: 17299.07307614446
Epoch Step: 115 / 135 Loss: 15.24448299407959 Tokens per Sec: 18800.976193580802
Epoch Step: 120 / 135 Loss: 28.415802001953125 Tokens per Sec: 20041.446608867896
Epoch Step: 125 / 135 Loss: 19.57853126525879 Tokens per Sec: 18508.339397370677
Epoch Step: 130 / 135 Loss: 7.371828556060791 Tokens per Sec: 18588.49175033581
Epoch Step: 135 / 135 Loss: 10.672632217407227 Tokens per Sec: 17721.260935917388
Epoch ended with duration 0:00:12.806050
Train perplexity: 2.1734943093583534
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657334
Validation perplexity: 2.5028535480680394
Epoch 34 / 1000
Epoch Step: 5 / 135 Loss: 18.46864891052246 Tokens per Sec: 19866.122963772224
Epoch Step: 10 / 135 Loss: 53.772674560546875 Tokens per Sec: 20221.16188235408
Epoch Step: 15 / 135 Loss: 15.647801399230957 Tokens per Sec: 20984.49691003741
Epoch Step: 20 / 135 Loss: 22.414691925048828 Tokens per Sec: 17586.964939980244
Epoch Step: 25 / 135 Loss: 24.820615768432617 Tokens per Sec: 22403.488748159725
Epoch Step: 30 / 135 Loss: 28.04242706298828 Tokens per Sec: 20422.111914427343
Epoch Step: 35 / 135 Loss: 23.2447566986084 Tokens per Sec: 18840.403770078323
Epoch Step: 40 / 135 Loss: 16.224637985229492 Tokens per Sec: 20817.96824897666
Epoch Step: 45 / 135 Loss: 25.658950805664062 Tokens per Sec: 23903.482826724707
Epoch Step: 50 / 135 Loss: 17.916996002197266 Tokens per Sec: 20159.097831049436
Epoch Step: 55 / 135 Loss: 11.177950859069824 Tokens per Sec: 18484.468079342936
Epoch Step: 60 / 135 Loss: 22.445066452026367 Tokens per Sec: 22593.22570687833
Epoch Step: 65 / 135 Loss: 27.92166519165039 Tokens per Sec: 19917.370579140712
Epoch Step: 70 / 135 Loss: 33.39815139770508 Tokens per Sec: 20617.945498466015
Epoch Step: 75 / 135 Loss: 22.77671241760254 Tokens per Sec: 22014.8210474068
Epoch Step: 80 / 135 Loss: 20.768707275390625 Tokens per Sec: 19659.155812013913
Epoch Step: 85 / 135 Loss: 16.716123580932617 Tokens per Sec: 20330.61979755822
Epoch Step: 90 / 135 Loss: 14.748553276062012 Tokens per Sec: 20965.10166771277
Epoch Step: 95 / 135 Loss: 46.6605224609375 Tokens per Sec: 17184.05998151978
Epoch Step: 100 / 135 Loss: 100.26978302001953 Tokens per Sec: 21339.08238844061
Epoch Step: 105 / 135 Loss: 110.74158477783203 Tokens per Sec: 18284.553809309982
Epoch Step: 110 / 135 Loss: 16.91399383544922 Tokens per Sec: 16545.90606520348
Epoch Step: 115 / 135 Loss: 114.47312927246094 Tokens per Sec: 18532.97942898789
Epoch Step: 120 / 135 Loss: 26.208890914916992 Tokens per Sec: 19638.486336205886
Epoch Step: 125 / 135 Loss: 18.68964958190918 Tokens per Sec: 17953.227384593232
Epoch Step: 130 / 135 Loss: 9.08283805847168 Tokens per Sec: 17011.919413531195
Epoch Step: 135 / 135 Loss: 8.927451133728027 Tokens per Sec: 18344.425275094272
Epoch ended with duration 0:00:12.865573
Train perplexity: 2.525433803473071
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658762
Validation perplexity: 2.3762186822306606
Epoch 35 / 1000
Epoch Step: 5 / 135 Loss: 19.55350685119629 Tokens per Sec: 22054.442078393717
Epoch Step: 10 / 135 Loss: 22.306947708129883 Tokens per Sec: 17242.370330885737
Epoch Step: 15 / 135 Loss: 18.47280502319336 Tokens per Sec: 21305.797369657295
Epoch Step: 20 / 135 Loss: 23.717388153076172 Tokens per Sec: 24937.42070802762
Epoch Step: 25 / 135 Loss: 27.78911781311035 Tokens per Sec: 22202.98063874874
Epoch Step: 30 / 135 Loss: 27.74845314025879 Tokens per Sec: 19735.410642432587
Epoch Step: 35 / 135 Loss: 25.919557571411133 Tokens per Sec: 20198.161797388533
Epoch Step: 40 / 135 Loss: 16.17658233642578 Tokens per Sec: 17751.25759938246
Epoch Step: 45 / 135 Loss: 15.975449562072754 Tokens per Sec: 19551.99703490507
Epoch Step: 50 / 135 Loss: 8.975553512573242 Tokens per Sec: 17558.210452746887
Epoch Step: 55 / 135 Loss: 137.39437866210938 Tokens per Sec: 21701.92815338506
Epoch Step: 60 / 135 Loss: 25.321500778198242 Tokens per Sec: 21867.581213174577
Epoch Step: 65 / 135 Loss: 13.99061393737793 Tokens per Sec: 21853.559043958474
Epoch Step: 70 / 135 Loss: 14.486538887023926 Tokens per Sec: 22271.835670112672
Epoch Step: 75 / 135 Loss: 20.635652542114258 Tokens per Sec: 22519.698472895125
Epoch Step: 80 / 135 Loss: 12.719620704650879 Tokens per Sec: 18243.102459402613
Epoch Step: 85 / 135 Loss: 15.143448829650879 Tokens per Sec: 19842.80760622283
Epoch Step: 90 / 135 Loss: 16.73208999633789 Tokens per Sec: 20902.618858802914
Epoch Step: 95 / 135 Loss: 11.746431350708008 Tokens per Sec: 18418.723206163177
Epoch Step: 100 / 135 Loss: 16.180877685546875 Tokens per Sec: 15923.563606665091
Epoch Step: 105 / 135 Loss: 6.249733924865723 Tokens per Sec: 17226.705815830326
Epoch Step: 110 / 135 Loss: 16.941492080688477 Tokens per Sec: 19592.210936391788
Epoch Step: 115 / 135 Loss: 15.97854232788086 Tokens per Sec: 17505.699837884586
Epoch Step: 120 / 135 Loss: 25.1632022857666 Tokens per Sec: 20084.67266835257
Epoch Step: 125 / 135 Loss: 12.000953674316406 Tokens per Sec: 17262.59235482495
Epoch Step: 130 / 135 Loss: 11.783266067504883 Tokens per Sec: 16987.564826194888
Epoch Step: 135 / 135 Loss: 21.202974319458008 Tokens per Sec: 20140.091172306045
Epoch ended with duration 0:00:12.862734
Train perplexity: 2.3254281600595634
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654373
Validation perplexity: 2.1268093195184368
Model saved checkpoint!
Epoch 36 / 1000
Epoch Step: 5 / 135 Loss: 25.32207489013672 Tokens per Sec: 21997.804848106
Epoch Step: 10 / 135 Loss: 19.603023529052734 Tokens per Sec: 22125.265231987705
Epoch Step: 15 / 135 Loss: 12.626250267028809 Tokens per Sec: 21672.958731640036
Epoch Step: 20 / 135 Loss: 24.77255630493164 Tokens per Sec: 22406.2336457259
Epoch Step: 25 / 135 Loss: 22.38139533996582 Tokens per Sec: 18556.126828738525
Epoch Step: 30 / 135 Loss: 8.037614822387695 Tokens per Sec: 18605.103299954597
Epoch Step: 35 / 135 Loss: 21.819128036499023 Tokens per Sec: 21302.41425157829
Epoch Step: 40 / 135 Loss: 15.951693534851074 Tokens per Sec: 21510.131605592498
Epoch Step: 45 / 135 Loss: 29.494216918945312 Tokens per Sec: 23196.78200859215
Epoch Step: 50 / 135 Loss: 27.08159637451172 Tokens per Sec: 20469.39436938358
Epoch Step: 55 / 135 Loss: 25.697792053222656 Tokens per Sec: 21259.764826156825
Epoch Step: 60 / 135 Loss: 21.866104125976562 Tokens per Sec: 21831.79009069651
Epoch Step: 65 / 135 Loss: 17.962261199951172 Tokens per Sec: 21912.588659617864
Epoch Step: 70 / 135 Loss: 24.651140213012695 Tokens per Sec: 22994.661086965236
Epoch Step: 75 / 135 Loss: 17.205158233642578 Tokens per Sec: 19522.506520486146
Epoch Step: 80 / 135 Loss: 9.580787658691406 Tokens per Sec: 16577.082111679956
Epoch Step: 85 / 135 Loss: 19.867446899414062 Tokens per Sec: 18196.468647493362
Epoch Step: 90 / 135 Loss: 23.822059631347656 Tokens per Sec: 18772.041833415
Epoch Step: 95 / 135 Loss: 21.57683753967285 Tokens per Sec: 19068.956502301975
Epoch Step: 100 / 135 Loss: 67.82144165039062 Tokens per Sec: 20915.386080884517
Epoch Step: 105 / 135 Loss: 64.02281951904297 Tokens per Sec: 18501.229714451765
Epoch Step: 110 / 135 Loss: 13.238560676574707 Tokens per Sec: 16100.242585862336
Epoch Step: 115 / 135 Loss: 7.793726921081543 Tokens per Sec: 17823.538965559652
Epoch Step: 120 / 135 Loss: 25.233339309692383 Tokens per Sec: 20259.211413054676
Epoch Step: 125 / 135 Loss: 14.1437406539917 Tokens per Sec: 17303.887001976203
Epoch Step: 130 / 135 Loss: 15.928247451782227 Tokens per Sec: 19817.249491734856
Epoch Step: 135 / 135 Loss: 16.215124130249023 Tokens per Sec: 17949.687340350534
Epoch ended with duration 0:00:12.718549
Train perplexity: 2.079517931090473
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.662576
Validation perplexity: 2.399404128250758
Epoch 37 / 1000
Epoch Step: 5 / 135 Loss: 22.05479621887207 Tokens per Sec: 22707.968653362415
Epoch Step: 10 / 135 Loss: 25.54231834411621 Tokens per Sec: 21643.990732224338
Epoch Step: 15 / 135 Loss: 9.813310623168945 Tokens per Sec: 17268.81980616815
Epoch Step: 20 / 135 Loss: 15.716402053833008 Tokens per Sec: 18222.481830584795
Epoch Step: 25 / 135 Loss: 12.466846466064453 Tokens per Sec: 18806.635171073587
Epoch Step: 30 / 135 Loss: 18.270788192749023 Tokens per Sec: 20502.618532850334
Epoch Step: 35 / 135 Loss: 19.655685424804688 Tokens per Sec: 22190.97581715797
Epoch Step: 40 / 135 Loss: 13.11306381225586 Tokens per Sec: 20493.868362076937
Epoch Step: 45 / 135 Loss: 21.97016716003418 Tokens per Sec: 22344.74075850848
Epoch Step: 50 / 135 Loss: 14.454607009887695 Tokens per Sec: 19633.250693818347
Epoch Step: 55 / 135 Loss: 12.636689186096191 Tokens per Sec: 20457.628442845078
Epoch Step: 60 / 135 Loss: 27.432064056396484 Tokens per Sec: 20642.11754869523
Epoch Step: 65 / 135 Loss: 15.505772590637207 Tokens per Sec: 19838.241688234124
Epoch Step: 70 / 135 Loss: 70.4977798461914 Tokens per Sec: 20246.333861815594
Epoch Step: 75 / 135 Loss: 27.22380828857422 Tokens per Sec: 23061.98104701173
Epoch Step: 80 / 135 Loss: 10.98294448852539 Tokens per Sec: 17328.043845758948
Epoch Step: 85 / 135 Loss: 15.136337280273438 Tokens per Sec: 23443.91347390513
Epoch Step: 90 / 135 Loss: 6.739652156829834 Tokens per Sec: 22443.330206184575
Epoch Step: 95 / 135 Loss: 19.580005645751953 Tokens per Sec: 18194.42887976639
Epoch Step: 100 / 135 Loss: 9.238898277282715 Tokens per Sec: 20227.391209795333
Epoch Step: 105 / 135 Loss: 7.332599639892578 Tokens per Sec: 15494.907470151706
Epoch Step: 110 / 135 Loss: 19.866374969482422 Tokens per Sec: 17795.976100145104
Epoch Step: 115 / 135 Loss: 11.787936210632324 Tokens per Sec: 19286.14086290972
Epoch Step: 120 / 135 Loss: 22.36124610900879 Tokens per Sec: 17300.357729428775
Epoch Step: 125 / 135 Loss: 27.298080444335938 Tokens per Sec: 19003.33580566326
Epoch Step: 130 / 135 Loss: 12.672624588012695 Tokens per Sec: 19521.137139436123
Epoch Step: 135 / 135 Loss: 8.546835899353027 Tokens per Sec: 18799.701397128923
Epoch ended with duration 0:00:12.822383
Train perplexity: 2.175499400435811
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652531
Validation perplexity: 1.8306706706970892
Model saved best_on_validation!
Epoch 38 / 1000
Epoch Step: 5 / 135 Loss: 7.074028015136719 Tokens per Sec: 20972.335552538192
Epoch Step: 10 / 135 Loss: 22.606203079223633 Tokens per Sec: 21704.805917204918
Epoch Step: 15 / 135 Loss: 19.214258193969727 Tokens per Sec: 22902.641552151315
Epoch Step: 20 / 135 Loss: 15.028794288635254 Tokens per Sec: 21984.887237427232
Epoch Step: 25 / 135 Loss: 21.40264129638672 Tokens per Sec: 19039.868540441264
Epoch Step: 30 / 135 Loss: 16.79705238342285 Tokens per Sec: 19386.08076400704
Epoch Step: 35 / 135 Loss: 5.599599361419678 Tokens per Sec: 18788.472752174675
Epoch Step: 40 / 135 Loss: 25.13507843017578 Tokens per Sec: 19405.81522832571
Epoch Step: 45 / 135 Loss: 57.57951736450195 Tokens per Sec: 21562.111842624097
Epoch Step: 50 / 135 Loss: 11.04503345489502 Tokens per Sec: 21930.886300192527
Epoch Step: 55 / 135 Loss: 22.105762481689453 Tokens per Sec: 20730.11874840178
Epoch Step: 60 / 135 Loss: 18.381338119506836 Tokens per Sec: 21287.832383045956
Epoch Step: 65 / 135 Loss: 8.20089054107666 Tokens per Sec: 19738.77386975956
Epoch Step: 70 / 135 Loss: 37.566654205322266 Tokens per Sec: 19278.53567319322
Epoch Step: 75 / 135 Loss: 8.646329879760742 Tokens per Sec: 19228.77571449515
Epoch Step: 80 / 135 Loss: 77.86166381835938 Tokens per Sec: 20833.91569719592
Epoch Step: 85 / 135 Loss: 21.832483291625977 Tokens per Sec: 19520.532192010967
Epoch Step: 90 / 135 Loss: 17.894655227661133 Tokens per Sec: 22425.892857775605
Epoch Step: 95 / 135 Loss: 15.119534492492676 Tokens per Sec: 18847.798683790916
Epoch Step: 100 / 135 Loss: 22.96990203857422 Tokens per Sec: 21083.715763681917
Epoch Step: 105 / 135 Loss: 16.94670867919922 Tokens per Sec: 19238.49376464057
Epoch Step: 110 / 135 Loss: 12.325214385986328 Tokens per Sec: 17805.017588748393
Epoch Step: 115 / 135 Loss: 19.707191467285156 Tokens per Sec: 17606.97379049598
Epoch Step: 120 / 135 Loss: 20.750202178955078 Tokens per Sec: 18482.280451872528
Epoch Step: 125 / 135 Loss: 14.482730865478516 Tokens per Sec: 19870.50703786816
Epoch Step: 130 / 135 Loss: 6.777220726013184 Tokens per Sec: 13116.198956150878
Epoch Step: 135 / 135 Loss: 14.664416313171387 Tokens per Sec: 18549.66207918548
Epoch ended with duration 0:00:12.821770
Train perplexity: 2.1327571405194603
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651563
Validation perplexity: 1.7236541197681292
Model saved best_on_validation!
Epoch 39 / 1000
Epoch Step: 5 / 135 Loss: 10.065352439880371 Tokens per Sec: 19497.92418168522
Epoch Step: 10 / 135 Loss: 60.06450271606445 Tokens per Sec: 20844.643878774095
Epoch Step: 15 / 135 Loss: 23.99864959716797 Tokens per Sec: 22460.5136556106
Epoch Step: 20 / 135 Loss: 24.20758056640625 Tokens per Sec: 19067.01539489517
Epoch Step: 25 / 135 Loss: 25.89653205871582 Tokens per Sec: 23012.90912507097
Epoch Step: 30 / 135 Loss: 19.331857681274414 Tokens per Sec: 22920.191459859725
Epoch Step: 35 / 135 Loss: 18.345029830932617 Tokens per Sec: 20698.04048298603
Epoch Step: 40 / 135 Loss: 10.46839427947998 Tokens per Sec: 20695.10859258878
Epoch Step: 45 / 135 Loss: 11.714406967163086 Tokens per Sec: 17103.56400369149
Epoch Step: 50 / 135 Loss: 6.0312418937683105 Tokens per Sec: 20455.268588695424
Epoch Step: 55 / 135 Loss: 13.321755409240723 Tokens per Sec: 21008.81695634617
Epoch Step: 60 / 135 Loss: 9.479071617126465 Tokens per Sec: 22869.213092052738
Epoch Step: 65 / 135 Loss: 19.450708389282227 Tokens per Sec: 19997.105564707756
Epoch Step: 70 / 135 Loss: 22.783058166503906 Tokens per Sec: 19846.532726271922
Epoch Step: 75 / 135 Loss: 18.07355308532715 Tokens per Sec: 19453.672659977445
Epoch Step: 80 / 135 Loss: 14.845179557800293 Tokens per Sec: 18262.998369279623
Epoch Step: 85 / 135 Loss: 21.745698928833008 Tokens per Sec: 21789.88386414417
Epoch Step: 90 / 135 Loss: 7.9843034744262695 Tokens per Sec: 20803.523042181816
Epoch Step: 95 / 135 Loss: 22.128124237060547 Tokens per Sec: 18857.37624297508
Epoch Step: 100 / 135 Loss: 15.151308059692383 Tokens per Sec: 20199.806976264983
Epoch Step: 105 / 135 Loss: 13.859031677246094 Tokens per Sec: 16902.08278155953
Epoch Step: 110 / 135 Loss: 32.379154205322266 Tokens per Sec: 15629.437916233852
Epoch Step: 115 / 135 Loss: 12.530089378356934 Tokens per Sec: 18770.79615085974
Epoch Step: 120 / 135 Loss: 6.024095058441162 Tokens per Sec: 16288.20176175137
Epoch Step: 125 / 135 Loss: 19.516590118408203 Tokens per Sec: 18864.43664415497
Epoch Step: 130 / 135 Loss: 18.98444938659668 Tokens per Sec: 18891.40225978954
Epoch Step: 135 / 135 Loss: 20.918182373046875 Tokens per Sec: 19323.1017802921
Epoch ended with duration 0:00:12.874244
Train perplexity: 2.2014661182392983
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.660026
Validation perplexity: 2.2527141116954965
Epoch 40 / 1000
Epoch Step: 5 / 135 Loss: 11.661198616027832 Tokens per Sec: 20240.203418572757
Epoch Step: 10 / 135 Loss: 77.55076599121094 Tokens per Sec: 24032.507305305546
Epoch Step: 15 / 135 Loss: 10.09947395324707 Tokens per Sec: 18618.559317575524
Epoch Step: 20 / 135 Loss: 23.36458396911621 Tokens per Sec: 23675.225044622617
Epoch Step: 25 / 135 Loss: 22.114748001098633 Tokens per Sec: 21682.398317280284
Epoch Step: 30 / 135 Loss: 23.78944206237793 Tokens per Sec: 23439.132440145895
Epoch Step: 35 / 135 Loss: 23.646663665771484 Tokens per Sec: 16115.655567889484
Epoch Step: 40 / 135 Loss: 6.891415596008301 Tokens per Sec: 22374.151869783254
Epoch Step: 45 / 135 Loss: 20.64804458618164 Tokens per Sec: 22622.58408308046
Epoch Step: 50 / 135 Loss: 16.949630737304688 Tokens per Sec: 22216.441585906538
Epoch Step: 55 / 135 Loss: 14.349406242370605 Tokens per Sec: 18259.684972314964
Epoch Step: 60 / 135 Loss: 9.78848934173584 Tokens per Sec: 20805.06225542804
Epoch Step: 65 / 135 Loss: 10.213950157165527 Tokens per Sec: 19990.149478541327
Epoch Step: 70 / 135 Loss: 21.352832794189453 Tokens per Sec: 18426.66802847386
Epoch Step: 75 / 135 Loss: 13.014527320861816 Tokens per Sec: 18906.833884187025
Epoch Step: 80 / 135 Loss: 14.322830200195312 Tokens per Sec: 19470.343379113347
Epoch Step: 85 / 135 Loss: 20.955923080444336 Tokens per Sec: 18824.45125170839
Epoch Step: 90 / 135 Loss: 14.722713470458984 Tokens per Sec: 17670.58185957292
Epoch Step: 95 / 135 Loss: 12.985838890075684 Tokens per Sec: 23363.020505375986
Epoch Step: 100 / 135 Loss: 10.39155101776123 Tokens per Sec: 19413.854225276747
Epoch Step: 105 / 135 Loss: 22.228721618652344 Tokens per Sec: 17873.23287972504
Epoch Step: 110 / 135 Loss: 16.67486000061035 Tokens per Sec: 18944.500984023012
Epoch Step: 115 / 135 Loss: 8.667464256286621 Tokens per Sec: 17104.448262031412
Epoch Step: 120 / 135 Loss: 23.383769989013672 Tokens per Sec: 20081.32946674558
Epoch Step: 125 / 135 Loss: 22.903093338012695 Tokens per Sec: 17577.207291937273
Epoch Step: 130 / 135 Loss: 16.32311248779297 Tokens per Sec: 18720.891539326105
Epoch Step: 135 / 135 Loss: 50.42532730102539 Tokens per Sec: 19027.552799771394
Epoch ended with duration 0:00:12.728197
Train perplexity: 1.9263584747015734
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656962
Validation perplexity: 1.8621512598610301
Model saved checkpoint!
Epoch 41 / 1000
Epoch Step: 5 / 135 Loss: 14.650845527648926 Tokens per Sec: 20286.40088760283
Epoch Step: 10 / 135 Loss: 10.430723190307617 Tokens per Sec: 23551.11980161896
Epoch Step: 15 / 135 Loss: 69.02644348144531 Tokens per Sec: 20858.447840236033
Epoch Step: 20 / 135 Loss: 20.725971221923828 Tokens per Sec: 20385.969155993942
Epoch Step: 25 / 135 Loss: 6.861096382141113 Tokens per Sec: 18709.159213782536
Epoch Step: 30 / 135 Loss: 17.314895629882812 Tokens per Sec: 15459.32913075233
Epoch Step: 35 / 135 Loss: 10.26776123046875 Tokens per Sec: 22306.1670131245
Epoch Step: 40 / 135 Loss: 50.6161994934082 Tokens per Sec: 24534.59579625575
Epoch Step: 45 / 135 Loss: 39.374088287353516 Tokens per Sec: 22061.830238555736
Epoch Step: 50 / 135 Loss: 20.93044090270996 Tokens per Sec: 17652.017076176053
Epoch Step: 55 / 135 Loss: 7.594873428344727 Tokens per Sec: 22054.767017511404
Epoch Step: 60 / 135 Loss: 11.108430862426758 Tokens per Sec: 20575.466019305328
Epoch Step: 65 / 135 Loss: 11.866830825805664 Tokens per Sec: 19496.47041899598
Epoch Step: 70 / 135 Loss: 9.894262313842773 Tokens per Sec: 20497.97478023427
Epoch Step: 75 / 135 Loss: 15.915813446044922 Tokens per Sec: 19562.75089281162
Epoch Step: 80 / 135 Loss: 12.794312477111816 Tokens per Sec: 22986.326767723087
Epoch Step: 85 / 135 Loss: 6.2152509689331055 Tokens per Sec: 20278.19941219674
Epoch Step: 90 / 135 Loss: 39.96477508544922 Tokens per Sec: 21271.590321315274
Epoch Step: 95 / 135 Loss: 15.474812507629395 Tokens per Sec: 17625.170971057254
Epoch Step: 100 / 135 Loss: 21.614965438842773 Tokens per Sec: 19033.42225768243
Epoch Step: 105 / 135 Loss: 15.925788879394531 Tokens per Sec: 16890.381023321894
Epoch Step: 110 / 135 Loss: 19.86998176574707 Tokens per Sec: 18304.41125212045
Epoch Step: 115 / 135 Loss: 26.516036987304688 Tokens per Sec: 19195.504675371427
Epoch Step: 120 / 135 Loss: 19.66329002380371 Tokens per Sec: 18244.158022306787
Epoch Step: 125 / 135 Loss: 21.819116592407227 Tokens per Sec: 19584.462499227608
Epoch Step: 130 / 135 Loss: 8.431550979614258 Tokens per Sec: 17710.185223242366
Epoch Step: 135 / 135 Loss: 22.755203247070312 Tokens per Sec: 17964.02283242204
Epoch ended with duration 0:00:12.858023
Train perplexity: 1.8969706167754103
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.667106
Validation perplexity: 2.7075221075772555
Epoch 42 / 1000
Epoch Step: 5 / 135 Loss: 17.52803611755371 Tokens per Sec: 16639.009333533613
Epoch Step: 10 / 135 Loss: 12.168357849121094 Tokens per Sec: 20772.48655145261
Epoch Step: 15 / 135 Loss: 13.68647289276123 Tokens per Sec: 23430.774105013494
Epoch Step: 20 / 135 Loss: 12.216205596923828 Tokens per Sec: 22865.071984024606
Epoch Step: 25 / 135 Loss: 20.413532257080078 Tokens per Sec: 20015.413391739854
Epoch Step: 30 / 135 Loss: 18.073862075805664 Tokens per Sec: 21033.56812889887
Epoch Step: 35 / 135 Loss: 17.532203674316406 Tokens per Sec: 21940.33288982789
Epoch Step: 40 / 135 Loss: 6.119381904602051 Tokens per Sec: 22885.233606857328
Epoch Step: 45 / 135 Loss: 13.376686096191406 Tokens per Sec: 19727.080004684492
Epoch Step: 50 / 135 Loss: 18.620805740356445 Tokens per Sec: 19904.10959303385
Epoch Step: 55 / 135 Loss: 8.14245319366455 Tokens per Sec: 20191.689746083593
Epoch Step: 60 / 135 Loss: 23.593984603881836 Tokens per Sec: 24000.065945880076
Epoch Step: 65 / 135 Loss: 14.25421142578125 Tokens per Sec: 18212.805742546367
Epoch Step: 70 / 135 Loss: 56.07663345336914 Tokens per Sec: 18756.93440751047
Epoch Step: 75 / 135 Loss: 32.46759796142578 Tokens per Sec: 17599.679793224408
Epoch Step: 80 / 135 Loss: 16.473806381225586 Tokens per Sec: 19939.738005433148
Epoch Step: 85 / 135 Loss: 14.72391414642334 Tokens per Sec: 22790.01050393061
Epoch Step: 90 / 135 Loss: 14.250699043273926 Tokens per Sec: 18179.479666029827
Epoch Step: 95 / 135 Loss: 7.966844081878662 Tokens per Sec: 19719.92013032641
Epoch Step: 100 / 135 Loss: 8.006651878356934 Tokens per Sec: 21440.716539235917
Epoch Step: 105 / 135 Loss: 14.329605102539062 Tokens per Sec: 17574.171668976007
Epoch Step: 110 / 135 Loss: 15.636629104614258 Tokens per Sec: 17292.33649294301
Epoch Step: 115 / 135 Loss: 108.59327697753906 Tokens per Sec: 17956.408097909185
Epoch Step: 120 / 135 Loss: 17.071502685546875 Tokens per Sec: 19138.02197844253
Epoch Step: 125 / 135 Loss: 79.9163818359375 Tokens per Sec: 20500.55410879134
Epoch Step: 130 / 135 Loss: 12.247546195983887 Tokens per Sec: 17587.012631417107
Epoch Step: 135 / 135 Loss: 8.747700691223145 Tokens per Sec: 16853.534452816548
Epoch ended with duration 0:00:12.815774
Train perplexity: 2.0061328345035117
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656084
Validation perplexity: 1.8631354983554145
Epoch 43 / 1000
Epoch Step: 5 / 135 Loss: 22.765220642089844 Tokens per Sec: 18265.64095560972
Epoch Step: 10 / 135 Loss: 14.386075973510742 Tokens per Sec: 23871.438883024195
Epoch Step: 15 / 135 Loss: 15.133660316467285 Tokens per Sec: 19539.863119946545
Epoch Step: 20 / 135 Loss: 22.240924835205078 Tokens per Sec: 20455.61102134704
Epoch Step: 25 / 135 Loss: 18.14664077758789 Tokens per Sec: 23105.186298955272
Epoch Step: 30 / 135 Loss: 6.59563684463501 Tokens per Sec: 18266.707660942557
Epoch Step: 35 / 135 Loss: 8.50522232055664 Tokens per Sec: 20294.38942759232
Epoch Step: 40 / 135 Loss: 19.641071319580078 Tokens per Sec: 20193.406017286772
Epoch Step: 45 / 135 Loss: 7.068743705749512 Tokens per Sec: 15114.354412278068
Epoch Step: 50 / 135 Loss: 14.554767608642578 Tokens per Sec: 19840.924984370427
Epoch Step: 55 / 135 Loss: 20.09886360168457 Tokens per Sec: 22006.137611420843
Epoch Step: 60 / 135 Loss: 11.57522964477539 Tokens per Sec: 23379.526398905768
Epoch Step: 65 / 135 Loss: 18.744861602783203 Tokens per Sec: 22452.078067047056
Epoch Step: 70 / 135 Loss: 7.684482097625732 Tokens per Sec: 21495.220417788994
Epoch Step: 75 / 135 Loss: 18.68873405456543 Tokens per Sec: 19620.894234777275
Epoch Step: 80 / 135 Loss: 20.367273330688477 Tokens per Sec: 19959.864114517113
Epoch Step: 85 / 135 Loss: 10.768996238708496 Tokens per Sec: 15629.182306338256
Epoch Step: 90 / 135 Loss: 114.31940460205078 Tokens per Sec: 21401.32015935311
Epoch Step: 95 / 135 Loss: 15.724591255187988 Tokens per Sec: 23638.360130202283
Epoch Step: 100 / 135 Loss: 26.87773895263672 Tokens per Sec: 20845.447252162452
Epoch Step: 105 / 135 Loss: 11.152889251708984 Tokens per Sec: 17822.96500189344
Epoch Step: 110 / 135 Loss: 10.973429679870605 Tokens per Sec: 17421.566046263524
Epoch Step: 115 / 135 Loss: 7.538637161254883 Tokens per Sec: 14902.292698951063
Epoch Step: 120 / 135 Loss: 18.407798767089844 Tokens per Sec: 18897.66118598272
Epoch Step: 125 / 135 Loss: 23.61617660522461 Tokens per Sec: 20009.504869226246
Epoch Step: 130 / 135 Loss: 21.03183364868164 Tokens per Sec: 19468.018962768547
Epoch Step: 135 / 135 Loss: 18.628768920898438 Tokens per Sec: 18759.57904355406
Epoch ended with duration 0:00:12.799489
Train perplexity: 1.8939344467057804
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657324
Validation perplexity: 2.161734075549435
Epoch 44 / 1000
Epoch Step: 5 / 135 Loss: 10.930094718933105 Tokens per Sec: 19149.987104791264
Epoch Step: 10 / 135 Loss: 16.363431930541992 Tokens per Sec: 18062.607034012006
Epoch Step: 15 / 135 Loss: 20.04799461364746 Tokens per Sec: 20188.341462732093
Epoch Step: 20 / 135 Loss: 20.824913024902344 Tokens per Sec: 22538.13690784231
Epoch Step: 25 / 135 Loss: 20.38695526123047 Tokens per Sec: 22959.410946780645
Epoch Step: 30 / 135 Loss: 11.882569313049316 Tokens per Sec: 18717.844224723565
Epoch Step: 35 / 135 Loss: 7.004824638366699 Tokens per Sec: 21563.12483295069
Epoch Step: 40 / 135 Loss: 12.805337905883789 Tokens per Sec: 18538.35319055122
Epoch Step: 45 / 135 Loss: 18.945329666137695 Tokens per Sec: 21350.060120799983
Epoch Step: 50 / 135 Loss: 14.24642562866211 Tokens per Sec: 22206.22479525015
Epoch Step: 55 / 135 Loss: 35.798973083496094 Tokens per Sec: 21983.033123546466
Epoch Step: 60 / 135 Loss: 8.602130889892578 Tokens per Sec: 21811.91473060254
Epoch Step: 65 / 135 Loss: 19.959571838378906 Tokens per Sec: 18725.58430852119
Epoch Step: 70 / 135 Loss: 17.124900817871094 Tokens per Sec: 19266.455605692438
Epoch Step: 75 / 135 Loss: 12.154258728027344 Tokens per Sec: 21206.699458623356
Epoch Step: 80 / 135 Loss: 8.453485488891602 Tokens per Sec: 16890.73195694294
Epoch Step: 85 / 135 Loss: 10.71406078338623 Tokens per Sec: 22825.250138361807
Epoch Step: 90 / 135 Loss: 12.933509826660156 Tokens per Sec: 25379.72047690612
Epoch Step: 95 / 135 Loss: 7.533811569213867 Tokens per Sec: 16271.569619886312
Epoch Step: 100 / 135 Loss: 37.657615661621094 Tokens per Sec: 20013.253499464594
Epoch Step: 105 / 135 Loss: 15.508162498474121 Tokens per Sec: 18980.719479774183
Epoch Step: 110 / 135 Loss: 14.908858299255371 Tokens per Sec: 18660.084254625443
Epoch Step: 115 / 135 Loss: 9.190984725952148 Tokens per Sec: 16982.539925221838
Epoch Step: 120 / 135 Loss: 9.472704887390137 Tokens per Sec: 17667.833428259088
Epoch Step: 125 / 135 Loss: 41.83522415161133 Tokens per Sec: 19663.155267849103
Epoch Step: 130 / 135 Loss: 14.155170440673828 Tokens per Sec: 18872.33325619368
Epoch Step: 135 / 135 Loss: 11.702136993408203 Tokens per Sec: 19536.794951614094
Epoch ended with duration 0:00:12.748184
Train perplexity: 1.769013435605953
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648901
Validation perplexity: 1.5979224974914694
Model saved best_on_validation!
Epoch 45 / 1000
Epoch Step: 5 / 135 Loss: 7.019167900085449 Tokens per Sec: 20562.315170465274
Epoch Step: 10 / 135 Loss: 8.692398071289062 Tokens per Sec: 20977.338549020376
Epoch Step: 15 / 135 Loss: 19.04556655883789 Tokens per Sec: 21124.859179901974
Epoch Step: 20 / 135 Loss: 69.79676055908203 Tokens per Sec: 19797.424311564475
Epoch Step: 25 / 135 Loss: 6.261579513549805 Tokens per Sec: 22782.98326861194
Epoch Step: 30 / 135 Loss: 76.25462341308594 Tokens per Sec: 19122.414766223897
Epoch Step: 35 / 135 Loss: 11.921198844909668 Tokens per Sec: 17805.631975048327
Epoch Step: 40 / 135 Loss: 14.176586151123047 Tokens per Sec: 19465.06814801416
Epoch Step: 45 / 135 Loss: 6.953398704528809 Tokens per Sec: 19773.92018066672
Epoch Step: 50 / 135 Loss: 13.250144958496094 Tokens per Sec: 22173.23776763857
Epoch Step: 55 / 135 Loss: 20.311559677124023 Tokens per Sec: 20349.65826658344
Epoch Step: 60 / 135 Loss: 12.128026008605957 Tokens per Sec: 21269.313390360265
Epoch Step: 65 / 135 Loss: 51.09885025024414 Tokens per Sec: 19791.216174838308
Epoch Step: 70 / 135 Loss: 11.253270149230957 Tokens per Sec: 20833.874646710297
Epoch Step: 75 / 135 Loss: 21.137449264526367 Tokens per Sec: 22872.16233739201
Epoch Step: 80 / 135 Loss: 7.517426013946533 Tokens per Sec: 22779.01152886441
Epoch Step: 85 / 135 Loss: 16.311580657958984 Tokens per Sec: 20617.635352808826
Epoch Step: 90 / 135 Loss: 8.654657363891602 Tokens per Sec: 20920.407386241226
Epoch Step: 95 / 135 Loss: 10.11041259765625 Tokens per Sec: 16028.619883764792
Epoch Step: 100 / 135 Loss: 22.991212844848633 Tokens per Sec: 19754.867017191656
Epoch Step: 105 / 135 Loss: 16.6877498626709 Tokens per Sec: 18653.549775306336
Epoch Step: 110 / 135 Loss: 8.782557487487793 Tokens per Sec: 17833.38602871049
Epoch Step: 115 / 135 Loss: 15.94887924194336 Tokens per Sec: 19594.212779942467
Epoch Step: 120 / 135 Loss: 18.88510513305664 Tokens per Sec: 18921.382806937363
Epoch Step: 125 / 135 Loss: 10.831893920898438 Tokens per Sec: 16452.305785794088
Epoch Step: 130 / 135 Loss: 18.759523391723633 Tokens per Sec: 18696.52545392015
Epoch Step: 135 / 135 Loss: 15.339140892028809 Tokens per Sec: 17797.183108033474
Epoch ended with duration 0:00:12.786530
Train perplexity: 1.8833045958971346
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649585
Validation perplexity: 1.589002553762903
Model saved best_on_validation!
Model saved checkpoint!
Epoch 46 / 1000
Epoch Step: 5 / 135 Loss: 18.386083602905273 Tokens per Sec: 20676.739195994305
Epoch Step: 10 / 135 Loss: 12.75676155090332 Tokens per Sec: 23038.70880244137
Epoch Step: 15 / 135 Loss: 4.383662700653076 Tokens per Sec: 20224.28637533193
Epoch Step: 20 / 135 Loss: 96.54412841796875 Tokens per Sec: 22710.176107814354
Epoch Step: 25 / 135 Loss: 17.704944610595703 Tokens per Sec: 23724.359922203184
Epoch Step: 30 / 135 Loss: 6.073875427246094 Tokens per Sec: 17625.092922271913
Epoch Step: 35 / 135 Loss: 8.904126167297363 Tokens per Sec: 21588.80688708036
Epoch Step: 40 / 135 Loss: 15.46986198425293 Tokens per Sec: 21843.87877679646
Epoch Step: 45 / 135 Loss: 20.54437828063965 Tokens per Sec: 21010.74317901641
Epoch Step: 50 / 135 Loss: 8.648446083068848 Tokens per Sec: 17640.31411853469
Epoch Step: 55 / 135 Loss: 6.5373382568359375 Tokens per Sec: 19326.61968224023
Epoch Step: 60 / 135 Loss: 20.329269409179688 Tokens per Sec: 20431.56029315836
Epoch Step: 65 / 135 Loss: 7.865219593048096 Tokens per Sec: 19117.697875616366
Epoch Step: 70 / 135 Loss: 8.322127342224121 Tokens per Sec: 19797.16853157596
Epoch Step: 75 / 135 Loss: 18.786853790283203 Tokens per Sec: 19294.885005481934
Epoch Step: 80 / 135 Loss: 5.856442451477051 Tokens per Sec: 18731.847326345895
Epoch Step: 85 / 135 Loss: 8.986780166625977 Tokens per Sec: 21050.403981821484
Epoch Step: 90 / 135 Loss: 12.013504028320312 Tokens per Sec: 22195.417286210228
Epoch Step: 95 / 135 Loss: 17.562114715576172 Tokens per Sec: 23306.219530498023
Epoch Step: 100 / 135 Loss: 13.023072242736816 Tokens per Sec: 19103.948985356925
Epoch Step: 105 / 135 Loss: 11.081917762756348 Tokens per Sec: 18128.009101299805
Epoch Step: 110 / 135 Loss: 12.230188369750977 Tokens per Sec: 19995.889128886425
Epoch Step: 115 / 135 Loss: 6.2897162437438965 Tokens per Sec: 16844.124229363362
Epoch Step: 120 / 135 Loss: 17.281930923461914 Tokens per Sec: 17840.782030172693
Epoch Step: 125 / 135 Loss: 18.81623077392578 Tokens per Sec: 20168.18016634632
Epoch Step: 130 / 135 Loss: 18.632959365844727 Tokens per Sec: 19714.788599452186
Epoch Step: 135 / 135 Loss: 14.991198539733887 Tokens per Sec: 16349.972457424034
Epoch ended with duration 0:00:12.678244
Train perplexity: 1.8005412844630988
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657340
Validation perplexity: 1.726685163134072
Epoch 47 / 1000
Epoch Step: 5 / 135 Loss: 59.78350830078125 Tokens per Sec: 19106.094224226475
Epoch Step: 10 / 135 Loss: 9.2245512008667 Tokens per Sec: 21132.718822628238
Epoch Step: 15 / 135 Loss: 10.180625915527344 Tokens per Sec: 18459.82692024195
Epoch Step: 20 / 135 Loss: 51.2855224609375 Tokens per Sec: 21312.83712149364
Epoch Step: 25 / 135 Loss: 5.8708720207214355 Tokens per Sec: 18213.00157100561
Epoch Step: 30 / 135 Loss: 15.877738952636719 Tokens per Sec: 17851.68544766469
Epoch Step: 35 / 135 Loss: 7.067298889160156 Tokens per Sec: 18809.14383247321
Epoch Step: 40 / 135 Loss: 15.110970497131348 Tokens per Sec: 17706.304602751145
Epoch Step: 45 / 135 Loss: 12.721464157104492 Tokens per Sec: 23209.332093614656
Epoch Step: 50 / 135 Loss: 85.72152709960938 Tokens per Sec: 21058.635344759237
Epoch Step: 55 / 135 Loss: 8.577051162719727 Tokens per Sec: 19664.086966093244
Epoch Step: 60 / 135 Loss: 16.581472396850586 Tokens per Sec: 18836.72877595671
Epoch Step: 65 / 135 Loss: 12.87860107421875 Tokens per Sec: 24590.701271904418
Epoch Step: 70 / 135 Loss: 107.72175598144531 Tokens per Sec: 20277.713549112937
Epoch Step: 75 / 135 Loss: 8.252754211425781 Tokens per Sec: 15936.24102325557
Epoch Step: 80 / 135 Loss: 12.23283576965332 Tokens per Sec: 23451.667454354003
Epoch Step: 85 / 135 Loss: 7.10214900970459 Tokens per Sec: 20736.271333204004
Epoch Step: 90 / 135 Loss: 5.0753679275512695 Tokens per Sec: 18442.54002187227
Epoch Step: 95 / 135 Loss: 12.601285934448242 Tokens per Sec: 23489.744748207853
Epoch Step: 100 / 135 Loss: 17.665904998779297 Tokens per Sec: 23710.603005537334
Epoch Step: 105 / 135 Loss: 11.739684104919434 Tokens per Sec: 20312.839516567252
Epoch Step: 110 / 135 Loss: 10.339430809020996 Tokens per Sec: 18205.916559881833
Epoch Step: 115 / 135 Loss: 17.23130226135254 Tokens per Sec: 17976.257256898356
Epoch Step: 120 / 135 Loss: 5.387685298919678 Tokens per Sec: 17060.672837485243
Epoch Step: 125 / 135 Loss: 13.53052043914795 Tokens per Sec: 18604.942568679882
Epoch Step: 130 / 135 Loss: 15.62835693359375 Tokens per Sec: 18391.03719844054
Epoch Step: 135 / 135 Loss: 10.48318099975586 Tokens per Sec: 16669.2582988598
Epoch ended with duration 0:00:12.841274
Train perplexity: 1.7999753839608013
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655404
Validation perplexity: 1.6838599857411027
Epoch 48 / 1000
Epoch Step: 5 / 135 Loss: 17.486730575561523 Tokens per Sec: 19981.943147446327
Epoch Step: 10 / 135 Loss: 9.51066780090332 Tokens per Sec: 22501.097544387132
Epoch Step: 15 / 135 Loss: 16.68161964416504 Tokens per Sec: 15389.029844044268
Epoch Step: 20 / 135 Loss: 7.153806686401367 Tokens per Sec: 20119.517730799194
Epoch Step: 25 / 135 Loss: 4.7363786697387695 Tokens per Sec: 19418.01122285051
Epoch Step: 30 / 135 Loss: 17.280696868896484 Tokens per Sec: 21289.641578688774
Epoch Step: 35 / 135 Loss: 19.596952438354492 Tokens per Sec: 21342.531118316096
Epoch Step: 40 / 135 Loss: 13.533392906188965 Tokens per Sec: 24255.639823584675
Epoch Step: 45 / 135 Loss: 86.44990539550781 Tokens per Sec: 19598.28713675441
Epoch Step: 50 / 135 Loss: 12.62867259979248 Tokens per Sec: 15584.37202064144
Epoch Step: 55 / 135 Loss: 11.66540813446045 Tokens per Sec: 22631.035939899833
Epoch Step: 60 / 135 Loss: 10.691521644592285 Tokens per Sec: 21883.716859873406
Epoch Step: 65 / 135 Loss: 17.282459259033203 Tokens per Sec: 17778.60772676927
Epoch Step: 70 / 135 Loss: 10.758508682250977 Tokens per Sec: 24722.280299602036
Epoch Step: 75 / 135 Loss: 15.853835105895996 Tokens per Sec: 21037.150138750374
Epoch Step: 80 / 135 Loss: 17.336389541625977 Tokens per Sec: 22481.260182831516
Epoch Step: 85 / 135 Loss: 11.224518775939941 Tokens per Sec: 20976.687025199502
Epoch Step: 90 / 135 Loss: 10.44913387298584 Tokens per Sec: 21866.688988533257
Epoch Step: 95 / 135 Loss: 14.4465970993042 Tokens per Sec: 18737.34739768523
Epoch Step: 100 / 135 Loss: 5.346983432769775 Tokens per Sec: 19367.2010814229
Epoch Step: 105 / 135 Loss: 14.05859661102295 Tokens per Sec: 17771.29987535452
Epoch Step: 110 / 135 Loss: 64.91973876953125 Tokens per Sec: 17496.172695995443
Epoch Step: 115 / 135 Loss: 12.154742240905762 Tokens per Sec: 18618.42194505896
Epoch Step: 120 / 135 Loss: 11.69287395477295 Tokens per Sec: 18107.691585016753
Epoch Step: 125 / 135 Loss: 9.5718412399292 Tokens per Sec: 18067.517473012744
Epoch Step: 130 / 135 Loss: 14.30374526977539 Tokens per Sec: 18657.46545757387
Epoch Step: 135 / 135 Loss: 10.50473403930664 Tokens per Sec: 17465.47995294386
Epoch ended with duration 0:00:12.815948
Train perplexity: 1.7932798689438285
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.663497
Validation perplexity: 2.141254412637503
Epoch 49 / 1000
Epoch Step: 5 / 135 Loss: 19.085142135620117 Tokens per Sec: 18475.31715528981
Epoch Step: 10 / 135 Loss: 19.493696212768555 Tokens per Sec: 21114.021221030875
Epoch Step: 15 / 135 Loss: 15.653467178344727 Tokens per Sec: 22139.892873792625
Epoch Step: 20 / 135 Loss: 19.803407669067383 Tokens per Sec: 21124.766009802643
Epoch Step: 25 / 135 Loss: 15.473691940307617 Tokens per Sec: 22727.837720246578
Epoch Step: 30 / 135 Loss: 4.897973537445068 Tokens per Sec: 16550.181966271404
Epoch Step: 35 / 135 Loss: 14.784781455993652 Tokens per Sec: 22890.000939256046
Epoch Step: 40 / 135 Loss: 18.238189697265625 Tokens per Sec: 22875.58031420502
Epoch Step: 45 / 135 Loss: 7.259690761566162 Tokens per Sec: 23679.154968494473
Epoch Step: 50 / 135 Loss: 23.30078125 Tokens per Sec: 19882.666617699968
Epoch Step: 55 / 135 Loss: 14.878299713134766 Tokens per Sec: 17921.375091018424
Epoch Step: 60 / 135 Loss: 16.01712417602539 Tokens per Sec: 20352.90273706983
Epoch Step: 65 / 135 Loss: 11.004755973815918 Tokens per Sec: 16331.939141412733
Epoch Step: 70 / 135 Loss: 13.021781921386719 Tokens per Sec: 23950.342524307234
Epoch Step: 75 / 135 Loss: 10.39578914642334 Tokens per Sec: 21898.042130942016
Epoch Step: 80 / 135 Loss: 18.585369110107422 Tokens per Sec: 19558.781345676918
Epoch Step: 85 / 135 Loss: 8.935901641845703 Tokens per Sec: 17714.797146272962
Epoch Step: 90 / 135 Loss: 14.833516120910645 Tokens per Sec: 20127.833631759142
Epoch Step: 95 / 135 Loss: 7.213721752166748 Tokens per Sec: 21614.437223257133
Epoch Step: 100 / 135 Loss: 8.641386032104492 Tokens per Sec: 18847.028870231017
Epoch Step: 105 / 135 Loss: 9.34388542175293 Tokens per Sec: 19699.91934229801
Epoch Step: 110 / 135 Loss: 11.307792663574219 Tokens per Sec: 16959.492912342765
Epoch Step: 115 / 135 Loss: 15.160829544067383 Tokens per Sec: 19304.192159203583
Epoch Step: 120 / 135 Loss: 9.621354103088379 Tokens per Sec: 18742.59912983459
Epoch Step: 125 / 135 Loss: 16.589426040649414 Tokens per Sec: 17425.048877797177
Epoch Step: 130 / 135 Loss: 12.984415054321289 Tokens per Sec: 16503.73522081404
Epoch Step: 135 / 135 Loss: 13.555285453796387 Tokens per Sec: 18900.41864374244
Epoch ended with duration 0:00:12.797234
Train perplexity: 1.7167731845208822
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.666613
Validation perplexity: 2.1447707553308164
Epoch 50 / 1000
Epoch Step: 5 / 135 Loss: 5.0672993659973145 Tokens per Sec: 19144.98822140719
Epoch Step: 10 / 135 Loss: 12.243765830993652 Tokens per Sec: 23827.349083671197
Epoch Step: 15 / 135 Loss: 6.158576488494873 Tokens per Sec: 16127.270934311491
Epoch Step: 20 / 135 Loss: 8.420342445373535 Tokens per Sec: 21079.254104464053
Epoch Step: 25 / 135 Loss: 11.472975730895996 Tokens per Sec: 18841.601213186892
Epoch Step: 30 / 135 Loss: 7.638003349304199 Tokens per Sec: 16341.286426747873
Epoch Step: 35 / 135 Loss: 14.355035781860352 Tokens per Sec: 23538.346218542556
Epoch Step: 40 / 135 Loss: 9.251580238342285 Tokens per Sec: 23742.03129987309
Epoch Step: 45 / 135 Loss: 12.451584815979004 Tokens per Sec: 18495.51760780922
Epoch Step: 50 / 135 Loss: 16.964570999145508 Tokens per Sec: 19753.271834584182
Epoch Step: 55 / 135 Loss: 12.421455383300781 Tokens per Sec: 22179.60727928944
Epoch Step: 60 / 135 Loss: 9.782479286193848 Tokens per Sec: 18593.464789249054
Epoch Step: 65 / 135 Loss: 47.72235107421875 Tokens per Sec: 22527.922661673372
Epoch Step: 70 / 135 Loss: 13.219412803649902 Tokens per Sec: 21138.482363449748
Epoch Step: 75 / 135 Loss: 10.275285720825195 Tokens per Sec: 16944.7223837326
Epoch Step: 80 / 135 Loss: 4.875783443450928 Tokens per Sec: 21919.01376074332
Epoch Step: 85 / 135 Loss: 12.64420223236084 Tokens per Sec: 19396.27019679688
Epoch Step: 90 / 135 Loss: 8.245004653930664 Tokens per Sec: 21369.18261186625
Epoch Step: 95 / 135 Loss: 13.060168266296387 Tokens per Sec: 24029.017450626176
Epoch Step: 100 / 135 Loss: 19.26542091369629 Tokens per Sec: 18369.0301024726
Epoch Step: 105 / 135 Loss: 14.269657135009766 Tokens per Sec: 17141.198548380045
Epoch Step: 110 / 135 Loss: 16.454233169555664 Tokens per Sec: 19556.685501164065
Epoch Step: 115 / 135 Loss: 111.9422378540039 Tokens per Sec: 16749.541258871006
Epoch Step: 120 / 135 Loss: 12.108803749084473 Tokens per Sec: 17462.39129325495
Epoch Step: 125 / 135 Loss: 11.756993293762207 Tokens per Sec: 16995.82423053956
Epoch Step: 130 / 135 Loss: 16.639421463012695 Tokens per Sec: 19310.62690816237
Epoch Step: 135 / 135 Loss: 102.50389099121094 Tokens per Sec: 15328.789542928533
Epoch ended with duration 0:00:13.044217
Train perplexity: 1.8685233099280518
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653752
Validation perplexity: 1.6733611376623163
Model saved checkpoint!
Epoch 51 / 1000
Epoch Step: 5 / 135 Loss: 15.009842872619629 Tokens per Sec: 19068.952640406642
Epoch Step: 10 / 135 Loss: 14.987654685974121 Tokens per Sec: 17297.03948947935
Epoch Step: 15 / 135 Loss: 13.600218772888184 Tokens per Sec: 20303.525366444872
Epoch Step: 20 / 135 Loss: 15.783286094665527 Tokens per Sec: 24987.40893254589
Epoch Step: 25 / 135 Loss: 16.35735511779785 Tokens per Sec: 20133.79511333498
Epoch Step: 30 / 135 Loss: 16.390472412109375 Tokens per Sec: 21581.303803075367
Epoch Step: 35 / 135 Loss: 9.46187686920166 Tokens per Sec: 24350.24502544525
Epoch Step: 40 / 135 Loss: 8.695199012756348 Tokens per Sec: 19547.741775848157
Epoch Step: 45 / 135 Loss: 14.549358367919922 Tokens per Sec: 19838.162326391044
Epoch Step: 50 / 135 Loss: 13.081452369689941 Tokens per Sec: 22056.66267613406
Epoch Step: 55 / 135 Loss: 14.8919038772583 Tokens per Sec: 19250.14203479073
Epoch Step: 60 / 135 Loss: 5.390443801879883 Tokens per Sec: 19566.615823475393
Epoch Step: 65 / 135 Loss: 12.892013549804688 Tokens per Sec: 18084.83535755547
Epoch Step: 70 / 135 Loss: 17.62649917602539 Tokens per Sec: 22670.175509970515
Epoch Step: 75 / 135 Loss: 4.722068786621094 Tokens per Sec: 17644.366930217722
Epoch Step: 80 / 135 Loss: 12.538901329040527 Tokens per Sec: 20378.121302512853
Epoch Step: 85 / 135 Loss: 7.621694087982178 Tokens per Sec: 21150.26126117763
Epoch Step: 90 / 135 Loss: 9.96949291229248 Tokens per Sec: 21014.918373727112
Epoch Step: 95 / 135 Loss: 17.446645736694336 Tokens per Sec: 18840.12896976021
Epoch Step: 100 / 135 Loss: 16.07282829284668 Tokens per Sec: 20789.91345713461
Epoch Step: 105 / 135 Loss: 7.401403427124023 Tokens per Sec: 18602.727443426462
Epoch Step: 110 / 135 Loss: 9.048768997192383 Tokens per Sec: 18538.676040783044
Epoch Step: 115 / 135 Loss: 5.851670742034912 Tokens per Sec: 19515.799708285565
Epoch Step: 120 / 135 Loss: 8.953658103942871 Tokens per Sec: 16852.196664391122
Epoch Step: 125 / 135 Loss: 12.717365264892578 Tokens per Sec: 17321.165850498473
Epoch Step: 130 / 135 Loss: 7.285040378570557 Tokens per Sec: 17770.657654790357
Epoch Step: 135 / 135 Loss: 10.620793342590332 Tokens per Sec: 18606.695968658525
Epoch ended with duration 0:00:12.843529
Train perplexity: 1.650184875469882
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650336
Validation perplexity: 1.5075817564520735
Model saved best_on_validation!
Epoch 52 / 1000
Epoch Step: 5 / 135 Loss: 12.676032066345215 Tokens per Sec: 20020.02941290563
Epoch Step: 10 / 135 Loss: 15.571749687194824 Tokens per Sec: 21551.42046206736
Epoch Step: 15 / 135 Loss: 10.083976745605469 Tokens per Sec: 24663.66787200864
Epoch Step: 20 / 135 Loss: 102.7259292602539 Tokens per Sec: 18989.935784071313
Epoch Step: 25 / 135 Loss: 18.299774169921875 Tokens per Sec: 20992.78155058736
Epoch Step: 30 / 135 Loss: 4.517859935760498 Tokens per Sec: 20663.76443217774
Epoch Step: 35 / 135 Loss: 94.62249755859375 Tokens per Sec: 17754.732061058752
Epoch Step: 40 / 135 Loss: 17.326631546020508 Tokens per Sec: 21847.41304707495
Epoch Step: 45 / 135 Loss: 5.342820167541504 Tokens per Sec: 18437.321233605817
Epoch Step: 50 / 135 Loss: 17.940242767333984 Tokens per Sec: 17557.26579766062
Epoch Step: 55 / 135 Loss: 7.320965766906738 Tokens per Sec: 16523.45440651737
Epoch Step: 60 / 135 Loss: 8.246434211730957 Tokens per Sec: 22636.749076327502
Epoch Step: 65 / 135 Loss: 52.009700775146484 Tokens per Sec: 19557.680436930368
Epoch Step: 70 / 135 Loss: 8.03990650177002 Tokens per Sec: 18547.614585317693
Epoch Step: 75 / 135 Loss: 10.81612491607666 Tokens per Sec: 21343.378980654063
Epoch Step: 80 / 135 Loss: 15.945516586303711 Tokens per Sec: 19262.64846831257
Epoch Step: 85 / 135 Loss: 15.317776679992676 Tokens per Sec: 24360.226956863316
Epoch Step: 90 / 135 Loss: 10.192770957946777 Tokens per Sec: 20410.95801463431
Epoch Step: 95 / 135 Loss: 12.754863739013672 Tokens per Sec: 18229.008928929572
Epoch Step: 100 / 135 Loss: 5.6307525634765625 Tokens per Sec: 23371.761167744447
Epoch Step: 105 / 135 Loss: 9.603671073913574 Tokens per Sec: 15331.050726177122
Epoch Step: 110 / 135 Loss: 13.42054557800293 Tokens per Sec: 18786.92301731809
Epoch Step: 115 / 135 Loss: 14.165700912475586 Tokens per Sec: 19590.28276884471
Epoch Step: 120 / 135 Loss: 8.353981018066406 Tokens per Sec: 19391.673565020974
Epoch Step: 125 / 135 Loss: 14.395337104797363 Tokens per Sec: 20023.786249837955
Epoch Step: 130 / 135 Loss: 14.146968841552734 Tokens per Sec: 18091.37535626479
Epoch Step: 135 / 135 Loss: 10.933111190795898 Tokens per Sec: 16165.853612671295
Epoch ended with duration 0:00:12.876354
Train perplexity: 1.6949638944698058
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657749
Validation perplexity: 1.8324595965920065
Epoch 53 / 1000
Epoch Step: 5 / 135 Loss: 13.174205780029297 Tokens per Sec: 20944.920781132096
Epoch Step: 10 / 135 Loss: 8.931294441223145 Tokens per Sec: 21500.462152232118
Epoch Step: 15 / 135 Loss: 15.3792085647583 Tokens per Sec: 21684.80891105042
Epoch Step: 20 / 135 Loss: 14.609155654907227 Tokens per Sec: 21935.482190899376
Epoch Step: 25 / 135 Loss: 5.203352928161621 Tokens per Sec: 15631.173404925961
Epoch Step: 30 / 135 Loss: 8.33857250213623 Tokens per Sec: 21335.86143405872
Epoch Step: 35 / 135 Loss: 12.40764045715332 Tokens per Sec: 21522.933086985937
Epoch Step: 40 / 135 Loss: 13.763815879821777 Tokens per Sec: 21412.557494658813
Epoch Step: 45 / 135 Loss: 10.775880813598633 Tokens per Sec: 20556.680128136457
Epoch Step: 50 / 135 Loss: 15.723633766174316 Tokens per Sec: 20004.42233805631
Epoch Step: 55 / 135 Loss: 4.222171783447266 Tokens per Sec: 14423.212825491157
Epoch Step: 60 / 135 Loss: 10.099575996398926 Tokens per Sec: 18656.939710900697
Epoch Step: 65 / 135 Loss: 9.839794158935547 Tokens per Sec: 24149.386525123682
Epoch Step: 70 / 135 Loss: 11.906352043151855 Tokens per Sec: 23052.497444917222
Epoch Step: 75 / 135 Loss: 16.019283294677734 Tokens per Sec: 21797.521851059104
Epoch Step: 80 / 135 Loss: 12.636205673217773 Tokens per Sec: 18983.597592110764
Epoch Step: 85 / 135 Loss: 3.8839752674102783 Tokens per Sec: 21662.72373716684
Epoch Step: 90 / 135 Loss: 16.538116455078125 Tokens per Sec: 21056.758708757065
Epoch Step: 95 / 135 Loss: 5.766115188598633 Tokens per Sec: 18823.52554281259
Epoch Step: 100 / 135 Loss: 58.78920364379883 Tokens per Sec: 19837.22448579087
Epoch Step: 105 / 135 Loss: 11.505167007446289 Tokens per Sec: 18156.6179936819
Epoch Step: 110 / 135 Loss: 14.154332160949707 Tokens per Sec: 19449.235660450046
Epoch Step: 115 / 135 Loss: 7.396275997161865 Tokens per Sec: 19266.975447690536
Epoch Step: 120 / 135 Loss: 82.28929901123047 Tokens per Sec: 16489.648132987048
Epoch Step: 125 / 135 Loss: 13.568745613098145 Tokens per Sec: 16865.3549962118
Epoch Step: 130 / 135 Loss: 5.955532073974609 Tokens per Sec: 16048.079371026393
Epoch Step: 135 / 135 Loss: 36.70951843261719 Tokens per Sec: 19143.536975260235
Epoch ended with duration 0:00:12.862550
Train perplexity: 1.6863054234491366
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.655770
Validation perplexity: 1.6384067659869823
Epoch 54 / 1000
Epoch Step: 5 / 135 Loss: 18.258384704589844 Tokens per Sec: 19062.4436072232
Epoch Step: 10 / 135 Loss: 8.895312309265137 Tokens per Sec: 21096.172896196556
Epoch Step: 15 / 135 Loss: 14.267622947692871 Tokens per Sec: 20997.520623211312
Epoch Step: 20 / 135 Loss: 9.374876022338867 Tokens per Sec: 22566.235291200755
Epoch Step: 25 / 135 Loss: 9.891532897949219 Tokens per Sec: 22257.50177506119
Epoch Step: 30 / 135 Loss: 15.155622482299805 Tokens per Sec: 17815.406235612812
Epoch Step: 35 / 135 Loss: 8.944074630737305 Tokens per Sec: 21113.663730919423
Epoch Step: 40 / 135 Loss: 7.958671569824219 Tokens per Sec: 19332.964107624266
Epoch Step: 45 / 135 Loss: 15.232824325561523 Tokens per Sec: 20846.58514064194
Epoch Step: 50 / 135 Loss: 15.604127883911133 Tokens per Sec: 21274.463099705536
Epoch Step: 55 / 135 Loss: 9.182866096496582 Tokens per Sec: 19907.80447552351
Epoch Step: 60 / 135 Loss: 12.096604347229004 Tokens per Sec: 17556.522518295133
Epoch Step: 65 / 135 Loss: 5.744693756103516 Tokens per Sec: 18456.053486118893
Epoch Step: 70 / 135 Loss: 11.347299575805664 Tokens per Sec: 21340.62152350929
Epoch Step: 75 / 135 Loss: 8.399287223815918 Tokens per Sec: 15809.77805466612
Epoch Step: 80 / 135 Loss: 111.526611328125 Tokens per Sec: 24594.978332125975
Epoch Step: 85 / 135 Loss: 13.007026672363281 Tokens per Sec: 22401.348916431572
Epoch Step: 90 / 135 Loss: 9.578073501586914 Tokens per Sec: 22220.70296647511
Epoch Step: 95 / 135 Loss: 4.487273693084717 Tokens per Sec: 18568.561540249368
Epoch Step: 100 / 135 Loss: 9.316329956054688 Tokens per Sec: 18614.366790805598
Epoch Step: 105 / 135 Loss: 9.040754318237305 Tokens per Sec: 18444.578602483507
Epoch Step: 110 / 135 Loss: 13.53383731842041 Tokens per Sec: 18878.995665062124
Epoch Step: 115 / 135 Loss: 6.490227699279785 Tokens per Sec: 18834.508142971274
Epoch Step: 120 / 135 Loss: 15.302092552185059 Tokens per Sec: 16715.124920226444
Epoch Step: 125 / 135 Loss: 15.277593612670898 Tokens per Sec: 19729.678166658505
Epoch Step: 130 / 135 Loss: 16.79168128967285 Tokens per Sec: 16163.664124039979
Epoch Step: 135 / 135 Loss: 14.849571228027344 Tokens per Sec: 18718.789544744526
Epoch ended with duration 0:00:12.877248
Train perplexity: 1.6541160226951686
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653731
Validation perplexity: 1.9186467548022124
Epoch 55 / 1000
Epoch Step: 5 / 135 Loss: 14.181052207946777 Tokens per Sec: 20138.59431876619
Epoch Step: 10 / 135 Loss: 10.602739334106445 Tokens per Sec: 23857.769802840463
Epoch Step: 15 / 135 Loss: 14.493429183959961 Tokens per Sec: 19219.82311261161
Epoch Step: 20 / 135 Loss: 8.29955768585205 Tokens per Sec: 20398.890605510627
Epoch Step: 25 / 135 Loss: 14.096234321594238 Tokens per Sec: 21554.76662636034
Epoch Step: 30 / 135 Loss: 11.180282592773438 Tokens per Sec: 20568.68865038563
Epoch Step: 35 / 135 Loss: 15.605900764465332 Tokens per Sec: 22292.37161753712
Epoch Step: 40 / 135 Loss: 12.263062477111816 Tokens per Sec: 16853.94497413239
Epoch Step: 45 / 135 Loss: 9.521031379699707 Tokens per Sec: 19700.058513331187
Epoch Step: 50 / 135 Loss: 14.32598876953125 Tokens per Sec: 19971.328371599488
Epoch Step: 55 / 135 Loss: 4.605661869049072 Tokens per Sec: 20518.654471166657
Epoch Step: 60 / 135 Loss: 5.571667671203613 Tokens per Sec: 18276.821012899854
Epoch Step: 65 / 135 Loss: 4.826840877532959 Tokens per Sec: 16967.737868096523
Epoch Step: 70 / 135 Loss: 16.47879981994629 Tokens per Sec: 21714.335320226128
Epoch Step: 75 / 135 Loss: 5.621628761291504 Tokens per Sec: 23457.86669461224
Epoch Step: 80 / 135 Loss: 5.1252665519714355 Tokens per Sec: 22708.18823043107
Epoch Step: 85 / 135 Loss: 37.274654388427734 Tokens per Sec: 20652.16296117282
Epoch Step: 90 / 135 Loss: 5.80167818069458 Tokens per Sec: 22797.14460880381
Epoch Step: 95 / 135 Loss: 12.585325241088867 Tokens per Sec: 23103.735772698063
Epoch Step: 100 / 135 Loss: 9.768643379211426 Tokens per Sec: 18698.070387997373
Epoch Step: 105 / 135 Loss: 11.94822883605957 Tokens per Sec: 18741.407125018868
Epoch Step: 110 / 135 Loss: 8.06921100616455 Tokens per Sec: 17317.32744432582
Epoch Step: 115 / 135 Loss: 7.959226131439209 Tokens per Sec: 18251.276151364556
Epoch Step: 120 / 135 Loss: 11.236015319824219 Tokens per Sec: 17445.965431832235
Epoch Step: 125 / 135 Loss: 10.499390602111816 Tokens per Sec: 18520.18296580604
Epoch Step: 130 / 135 Loss: 9.374027252197266 Tokens per Sec: 19067.809324132348
Epoch Step: 135 / 135 Loss: 82.17488098144531 Tokens per Sec: 17510.547648914002
Epoch ended with duration 0:00:12.732669
Train perplexity: 1.5813182834631863
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.662784
Validation perplexity: 2.0302367735511453
Model saved checkpoint!
Epoch 56 / 1000
Epoch Step: 5 / 135 Loss: 13.785578727722168 Tokens per Sec: 16628.988419020086
Epoch Step: 10 / 135 Loss: 12.812041282653809 Tokens per Sec: 19883.772893990867
Epoch Step: 15 / 135 Loss: 7.503488540649414 Tokens per Sec: 17084.956213851237
Epoch Step: 20 / 135 Loss: 5.177590370178223 Tokens per Sec: 21266.24762530359
Epoch Step: 25 / 135 Loss: 12.014317512512207 Tokens per Sec: 20415.546089198477
Epoch Step: 30 / 135 Loss: 9.864093780517578 Tokens per Sec: 21529.75722860838
Epoch Step: 35 / 135 Loss: 12.111358642578125 Tokens per Sec: 24456.477256668077
Epoch Step: 40 / 135 Loss: 9.254932403564453 Tokens per Sec: 22779.889933190792
Epoch Step: 45 / 135 Loss: 5.5172858238220215 Tokens per Sec: 20712.824865011837
Epoch Step: 50 / 135 Loss: 14.673979759216309 Tokens per Sec: 20327.62591838738
Epoch Step: 55 / 135 Loss: 16.392446517944336 Tokens per Sec: 20296.260836249723
Epoch Step: 60 / 135 Loss: 11.303518295288086 Tokens per Sec: 24452.309197257982
Epoch Step: 65 / 135 Loss: 15.541488647460938 Tokens per Sec: 22591.570123885722
Epoch Step: 70 / 135 Loss: 9.689130783081055 Tokens per Sec: 18213.10292164986
Epoch Step: 75 / 135 Loss: 9.926438331604004 Tokens per Sec: 21894.243380406482
Epoch Step: 80 / 135 Loss: 9.616009712219238 Tokens per Sec: 23314.40646281081
Epoch Step: 85 / 135 Loss: 16.356748580932617 Tokens per Sec: 19107.068470160208
Epoch Step: 90 / 135 Loss: 10.359061241149902 Tokens per Sec: 22131.92069322698
Epoch Step: 95 / 135 Loss: 20.238685607910156 Tokens per Sec: 20581.373887176684
Epoch Step: 100 / 135 Loss: 42.730018615722656 Tokens per Sec: 17888.758128073285
Epoch Step: 105 / 135 Loss: 14.835649490356445 Tokens per Sec: 16004.907348670751
Epoch Step: 110 / 135 Loss: 6.969254970550537 Tokens per Sec: 18287.604624801632
Epoch Step: 115 / 135 Loss: 12.035239219665527 Tokens per Sec: 17507.99238719878
Epoch Step: 120 / 135 Loss: 13.722784042358398 Tokens per Sec: 20386.079644494985
Epoch Step: 125 / 135 Loss: 18.201946258544922 Tokens per Sec: 18639.59280410305
Epoch Step: 130 / 135 Loss: 8.149466514587402 Tokens per Sec: 18799.469402967497
Epoch Step: 135 / 135 Loss: 9.688409805297852 Tokens per Sec: 17198.441522310255
Epoch ended with duration 0:00:12.722529
Train perplexity: 1.5663431533793732
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.663094
Validation perplexity: 1.8244186541146623
Epoch 57 / 1000
Epoch Step: 5 / 135 Loss: 9.45020866394043 Tokens per Sec: 20016.14976563717
Epoch Step: 10 / 135 Loss: 9.495658874511719 Tokens per Sec: 16289.136823591154
Epoch Step: 15 / 135 Loss: 11.918634414672852 Tokens per Sec: 23404.096888902033
Epoch Step: 20 / 135 Loss: 5.568809986114502 Tokens per Sec: 19373.47623115153
Epoch Step: 25 / 135 Loss: 4.364099979400635 Tokens per Sec: 20968.919336311497
Epoch Step: 30 / 135 Loss: 10.295782089233398 Tokens per Sec: 20869.19825477954
Epoch Step: 35 / 135 Loss: 6.529994964599609 Tokens per Sec: 21964.583317434823
Epoch Step: 40 / 135 Loss: 21.541305541992188 Tokens per Sec: 22516.49391289836
Epoch Step: 45 / 135 Loss: 4.578273773193359 Tokens per Sec: 20390.46879253783
Epoch Step: 50 / 135 Loss: 6.796729564666748 Tokens per Sec: 18467.921213888487
Epoch Step: 55 / 135 Loss: 89.28675079345703 Tokens per Sec: 18041.21482253442
Epoch Step: 60 / 135 Loss: 5.279011249542236 Tokens per Sec: 20046.17597304128
Epoch Step: 65 / 135 Loss: 14.915515899658203 Tokens per Sec: 22607.762318235727
Epoch Step: 70 / 135 Loss: 11.241869926452637 Tokens per Sec: 19313.700591424473
Epoch Step: 75 / 135 Loss: 12.659698486328125 Tokens per Sec: 18264.061162779017
Epoch Step: 80 / 135 Loss: 12.4036283493042 Tokens per Sec: 22115.733149040647
Epoch Step: 85 / 135 Loss: 13.620451927185059 Tokens per Sec: 19380.669545815705
Epoch Step: 90 / 135 Loss: 4.2826032638549805 Tokens per Sec: 20743.787587832747
Epoch Step: 95 / 135 Loss: 8.617813110351562 Tokens per Sec: 19158.672246722588
Epoch Step: 100 / 135 Loss: 13.171232223510742 Tokens per Sec: 21210.79760003527
Epoch Step: 105 / 135 Loss: 55.7269401550293 Tokens per Sec: 18450.445577918723
Epoch Step: 110 / 135 Loss: 87.58137512207031 Tokens per Sec: 20274.958685220197
Epoch Step: 115 / 135 Loss: 10.948280334472656 Tokens per Sec: 16940.35760754017
Epoch Step: 120 / 135 Loss: 7.338269233703613 Tokens per Sec: 17854.326017825093
Epoch Step: 125 / 135 Loss: 11.72025203704834 Tokens per Sec: 16808.017728396277
Epoch Step: 130 / 135 Loss: 12.908082008361816 Tokens per Sec: 18487.7335904971
Epoch Step: 135 / 135 Loss: 13.431008338928223 Tokens per Sec: 18639.157932817685
Epoch ended with duration 0:00:12.914349
Train perplexity: 1.6493106387649241
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.676742
Validation perplexity: 1.4563309756168303
Model saved best_on_validation!
Epoch 58 / 1000
Epoch Step: 5 / 135 Loss: 13.371086120605469 Tokens per Sec: 22094.44095835307
Epoch Step: 10 / 135 Loss: 16.926259994506836 Tokens per Sec: 22259.351199590506
Epoch Step: 15 / 135 Loss: 10.455536842346191 Tokens per Sec: 20942.46149623985
Epoch Step: 20 / 135 Loss: 13.371066093444824 Tokens per Sec: 19270.664215439418
Epoch Step: 25 / 135 Loss: 5.80222749710083 Tokens per Sec: 18042.924163905656
Epoch Step: 30 / 135 Loss: 12.16722583770752 Tokens per Sec: 22269.427030518844
Epoch Step: 35 / 135 Loss: 12.83254623413086 Tokens per Sec: 15948.48085794879
Epoch Step: 40 / 135 Loss: 10.693705558776855 Tokens per Sec: 16161.808065348216
Epoch Step: 45 / 135 Loss: 7.147250652313232 Tokens per Sec: 22188.62251863697
Epoch Step: 50 / 135 Loss: 40.0734977722168 Tokens per Sec: 21685.425393574973
Epoch Step: 55 / 135 Loss: 7.908938407897949 Tokens per Sec: 18658.817936250674
Epoch Step: 60 / 135 Loss: 8.917426109313965 Tokens per Sec: 18951.80105195839
Epoch Step: 65 / 135 Loss: 25.551748275756836 Tokens per Sec: 19654.871735081797
Epoch Step: 70 / 135 Loss: 8.958512306213379 Tokens per Sec: 20573.86690062188
Epoch Step: 75 / 135 Loss: 4.389861106872559 Tokens per Sec: 23685.011131221665
Epoch Step: 80 / 135 Loss: 12.339554786682129 Tokens per Sec: 22502.85190201634
Epoch Step: 85 / 135 Loss: 35.46462631225586 Tokens per Sec: 19579.001455162834
Epoch Step: 90 / 135 Loss: 8.673370361328125 Tokens per Sec: 20846.912975807863
Epoch Step: 95 / 135 Loss: 6.0175557136535645 Tokens per Sec: 21526.915625421014
Epoch Step: 100 / 135 Loss: 12.845065116882324 Tokens per Sec: 23067.987489985462
Epoch Step: 105 / 135 Loss: 7.286673069000244 Tokens per Sec: 18304.35227936008
Epoch Step: 110 / 135 Loss: 8.810248374938965 Tokens per Sec: 18297.296287733596
Epoch Step: 115 / 135 Loss: 13.35696792602539 Tokens per Sec: 19482.873262083267
Epoch Step: 120 / 135 Loss: 80.94091796875 Tokens per Sec: 19288.02842429778
Epoch Step: 125 / 135 Loss: 4.191690444946289 Tokens per Sec: 14735.309537530744
Epoch Step: 130 / 135 Loss: 13.474987983703613 Tokens per Sec: 18824.93493265159
Epoch Step: 135 / 135 Loss: 4.245060443878174 Tokens per Sec: 16728.972517421655
Epoch ended with duration 0:00:12.806441
Train perplexity: 1.5548433006677955
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653820
Validation perplexity: 1.7115377130080132
Epoch 59 / 1000
Epoch Step: 5 / 135 Loss: 9.35618782043457 Tokens per Sec: 18053.27847044923
Epoch Step: 10 / 135 Loss: 13.43857192993164 Tokens per Sec: 22252.845560758004
Epoch Step: 15 / 135 Loss: 4.660714149475098 Tokens per Sec: 19941.5971591164
Epoch Step: 20 / 135 Loss: 9.211935043334961 Tokens per Sec: 21447.796357356347
Epoch Step: 25 / 135 Loss: 71.23986053466797 Tokens per Sec: 18123.71025878865
Epoch Step: 30 / 135 Loss: 6.350381374359131 Tokens per Sec: 18088.220935971993
Epoch Step: 35 / 135 Loss: 7.135994911193848 Tokens per Sec: 19673.305907732458
Epoch Step: 40 / 135 Loss: 11.291622161865234 Tokens per Sec: 19551.766476878325
Epoch Step: 45 / 135 Loss: 9.714856147766113 Tokens per Sec: 22469.51137730296
Epoch Step: 50 / 135 Loss: 13.291661262512207 Tokens per Sec: 20423.495728831378
Epoch Step: 55 / 135 Loss: 14.111190795898438 Tokens per Sec: 18795.686599980247
Epoch Step: 60 / 135 Loss: 12.365860939025879 Tokens per Sec: 22417.66933367786
Epoch Step: 65 / 135 Loss: 6.188241481781006 Tokens per Sec: 22047.05830909974
Epoch Step: 70 / 135 Loss: 9.253405570983887 Tokens per Sec: 20392.680173819914
Epoch Step: 75 / 135 Loss: 3.607262372970581 Tokens per Sec: 20368.002858521475
Epoch Step: 80 / 135 Loss: 6.77715539932251 Tokens per Sec: 25391.886770097408
Epoch Step: 85 / 135 Loss: 16.431472778320312 Tokens per Sec: 21949.07988139011
Epoch Step: 90 / 135 Loss: 7.006222724914551 Tokens per Sec: 19908.033612337644
Epoch Step: 95 / 135 Loss: 6.487492561340332 Tokens per Sec: 18285.646100736198
Epoch Step: 100 / 135 Loss: 9.253171920776367 Tokens per Sec: 20017.98616293705
Epoch Step: 105 / 135 Loss: 12.432948112487793 Tokens per Sec: 18743.903505960745
Epoch Step: 110 / 135 Loss: 58.629329681396484 Tokens per Sec: 19632.613481074102
Epoch Step: 115 / 135 Loss: 12.821681022644043 Tokens per Sec: 20744.496788796583
Epoch Step: 120 / 135 Loss: 10.625446319580078 Tokens per Sec: 18053.186951213796
Epoch Step: 125 / 135 Loss: 11.947487831115723 Tokens per Sec: 17572.401499117033
Epoch Step: 130 / 135 Loss: 6.566319942474365 Tokens per Sec: 14392.019781782468
Epoch Step: 135 / 135 Loss: 12.652432441711426 Tokens per Sec: 16390.706069189084
Epoch ended with duration 0:00:12.863356
Train perplexity: 1.6130820568008015
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658761
Validation perplexity: 1.7364009434802754
Epoch 60 / 1000
Epoch Step: 5 / 135 Loss: 8.294139862060547 Tokens per Sec: 24758.458381219545
Epoch Step: 10 / 135 Loss: 13.51614761352539 Tokens per Sec: 23049.039739237007
Epoch Step: 15 / 135 Loss: 4.691378116607666 Tokens per Sec: 20402.700989602763
Epoch Step: 20 / 135 Loss: 7.706864833831787 Tokens per Sec: 16810.596488962743
Epoch Step: 25 / 135 Loss: 6.23264217376709 Tokens per Sec: 19707.510021603663
Epoch Step: 30 / 135 Loss: 35.20796585083008 Tokens per Sec: 14807.161808646992
Epoch Step: 35 / 135 Loss: 8.980262756347656 Tokens per Sec: 20020.463081211565
Epoch Step: 40 / 135 Loss: 9.661314010620117 Tokens per Sec: 19880.24486919387
Epoch Step: 45 / 135 Loss: 5.8311662673950195 Tokens per Sec: 20720.80131006714
Epoch Step: 50 / 135 Loss: 70.31021881103516 Tokens per Sec: 18656.014924525578
Epoch Step: 55 / 135 Loss: 4.536392688751221 Tokens per Sec: 19745.70356681009
Epoch Step: 60 / 135 Loss: 7.097592353820801 Tokens per Sec: 24234.3503597512
Epoch Step: 65 / 135 Loss: 15.665802001953125 Tokens per Sec: 18513.085518606167
Epoch Step: 70 / 135 Loss: 9.06443977355957 Tokens per Sec: 20390.596400234634
Epoch Step: 75 / 135 Loss: 11.125161170959473 Tokens per Sec: 20129.78037266838
Epoch Step: 80 / 135 Loss: 12.586175918579102 Tokens per Sec: 21488.28448095227
Epoch Step: 85 / 135 Loss: 13.338446617126465 Tokens per Sec: 23139.101415018456
Epoch Step: 90 / 135 Loss: 6.380117893218994 Tokens per Sec: 22292.20145372537
Epoch Step: 95 / 135 Loss: 6.406788349151611 Tokens per Sec: 23093.277293602634
Epoch Step: 100 / 135 Loss: 3.6286427974700928 Tokens per Sec: 17465.904187128468
Epoch Step: 105 / 135 Loss: 9.214398384094238 Tokens per Sec: 18109.83839593834
Epoch Step: 110 / 135 Loss: 8.965947151184082 Tokens per Sec: 17586.36050871685
Epoch Step: 115 / 135 Loss: 13.206381797790527 Tokens per Sec: 18259.72587099915
Epoch Step: 120 / 135 Loss: 9.9664306640625 Tokens per Sec: 19338.28275515645
Epoch Step: 125 / 135 Loss: 4.820364475250244 Tokens per Sec: 17174.690517606763
Epoch Step: 130 / 135 Loss: 7.308587551116943 Tokens per Sec: 18060.935049443735
Epoch Step: 135 / 135 Loss: 12.503625869750977 Tokens per Sec: 20353.32877597136
Epoch ended with duration 0:00:12.791615
Train perplexity: 1.6664295258581017
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649848
Validation perplexity: 1.4355768268071623
Model saved best_on_validation!
Model saved checkpoint!
Epoch 61 / 1000
Epoch Step: 5 / 135 Loss: 9.924527168273926 Tokens per Sec: 20200.684056462123
Epoch Step: 10 / 135 Loss: 13.263760566711426 Tokens per Sec: 20005.160468477625
Epoch Step: 15 / 135 Loss: 5.538490295410156 Tokens per Sec: 24456.1504084938
Epoch Step: 20 / 135 Loss: 6.263941764831543 Tokens per Sec: 19972.4864073691
Epoch Step: 25 / 135 Loss: 12.275716781616211 Tokens per Sec: 17691.610146653908
Epoch Step: 30 / 135 Loss: 13.101203918457031 Tokens per Sec: 21613.666666995225
Epoch Step: 35 / 135 Loss: 8.451615333557129 Tokens per Sec: 20328.37442530177
Epoch Step: 40 / 135 Loss: 11.39083480834961 Tokens per Sec: 21210.392507673714
Epoch Step: 45 / 135 Loss: 13.332892417907715 Tokens per Sec: 22939.28902202396
Epoch Step: 50 / 135 Loss: 8.480329513549805 Tokens per Sec: 22805.73108868061
Epoch Step: 55 / 135 Loss: 7.668446063995361 Tokens per Sec: 21023.827484448717
Epoch Step: 60 / 135 Loss: 13.107877731323242 Tokens per Sec: 16407.312051825087
Epoch Step: 65 / 135 Loss: 6.984334468841553 Tokens per Sec: 19843.201886516166
Epoch Step: 70 / 135 Loss: 7.356954097747803 Tokens per Sec: 20833.711448319063
Epoch Step: 75 / 135 Loss: 3.435037612915039 Tokens per Sec: 20840.017169896066
Epoch Step: 80 / 135 Loss: 11.901289939880371 Tokens per Sec: 18223.116192932444
Epoch Step: 85 / 135 Loss: 6.535963535308838 Tokens per Sec: 20383.252996073883
Epoch Step: 90 / 135 Loss: 13.1618013381958 Tokens per Sec: 22033.43355172933
Epoch Step: 95 / 135 Loss: 12.289456367492676 Tokens per Sec: 18114.65406366152
Epoch Step: 100 / 135 Loss: 12.02540397644043 Tokens per Sec: 21333.332828600975
Epoch Step: 105 / 135 Loss: 8.397700309753418 Tokens per Sec: 19802.93336014805
Epoch Step: 110 / 135 Loss: 9.848092079162598 Tokens per Sec: 17668.68235994625
Epoch Step: 115 / 135 Loss: 7.185131549835205 Tokens per Sec: 17983.700627743376
Epoch Step: 120 / 135 Loss: 3.783402442932129 Tokens per Sec: 18510.82689680107
Epoch Step: 125 / 135 Loss: 12.64711856842041 Tokens per Sec: 18950.07583971494
Epoch Step: 130 / 135 Loss: 5.7505879402160645 Tokens per Sec: 15697.688559789583
Epoch Step: 135 / 135 Loss: 70.13701629638672 Tokens per Sec: 19138.969708173776
Epoch ended with duration 0:00:12.831545
Train perplexity: 1.5732473589029283
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657985
Validation perplexity: 1.7055301192435044
Epoch 62 / 1000
Epoch Step: 5 / 135 Loss: 5.962033271789551 Tokens per Sec: 19933.430030897296
Epoch Step: 10 / 135 Loss: 7.670520782470703 Tokens per Sec: 19931.080587290457
Epoch Step: 15 / 135 Loss: 7.995029926300049 Tokens per Sec: 21806.699213921107
Epoch Step: 20 / 135 Loss: 10.254969596862793 Tokens per Sec: 20255.649046786908
Epoch Step: 25 / 135 Loss: 12.030231475830078 Tokens per Sec: 20189.06478051651
Epoch Step: 30 / 135 Loss: 5.351749420166016 Tokens per Sec: 18377.451356861417
Epoch Step: 35 / 135 Loss: 11.157600402832031 Tokens per Sec: 20917.851424653843
Epoch Step: 40 / 135 Loss: 7.616313457489014 Tokens per Sec: 19461.727353283928
Epoch Step: 45 / 135 Loss: 6.435609817504883 Tokens per Sec: 21206.36772073565
Epoch Step: 50 / 135 Loss: 10.81835651397705 Tokens per Sec: 21781.052229242483
Epoch Step: 55 / 135 Loss: 9.916878700256348 Tokens per Sec: 23213.499670381985
Epoch Step: 60 / 135 Loss: 3.0921425819396973 Tokens per Sec: 20965.092586840285
Epoch Step: 65 / 135 Loss: 13.730792999267578 Tokens per Sec: 21682.637487604494
Epoch Step: 70 / 135 Loss: 6.8547163009643555 Tokens per Sec: 18847.060307385244
Epoch Step: 75 / 135 Loss: 86.14877319335938 Tokens per Sec: 18930.51436512046
Epoch Step: 80 / 135 Loss: 77.63937377929688 Tokens per Sec: 24452.291630219
Epoch Step: 85 / 135 Loss: 11.646985054016113 Tokens per Sec: 21874.897572083635
Epoch Step: 90 / 135 Loss: 4.514943599700928 Tokens per Sec: 19126.03224564193
Epoch Step: 95 / 135 Loss: 11.386308670043945 Tokens per Sec: 21711.056954026863
Epoch Step: 100 / 135 Loss: 10.93880558013916 Tokens per Sec: 16313.434767327048
Epoch Step: 105 / 135 Loss: 7.972891807556152 Tokens per Sec: 18971.99185470834
Epoch Step: 110 / 135 Loss: 6.090394020080566 Tokens per Sec: 15192.734802320405
Epoch Step: 115 / 135 Loss: 7.857486724853516 Tokens per Sec: 18107.572120533292
Epoch Step: 120 / 135 Loss: 11.499124526977539 Tokens per Sec: 19500.201666548324
Epoch Step: 125 / 135 Loss: 7.415100574493408 Tokens per Sec: 19735.73286224646
Epoch Step: 130 / 135 Loss: 24.029340744018555 Tokens per Sec: 15439.223944280604
Epoch Step: 135 / 135 Loss: 10.6925630569458 Tokens per Sec: 18906.532794436895
Epoch ended with duration 0:00:12.810127
Train perplexity: 1.557082613568551
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656846
Validation perplexity: 1.5753419582059656
Epoch 63 / 1000
Epoch Step: 5 / 135 Loss: 5.9856743812561035 Tokens per Sec: 18957.93241312574
Epoch Step: 10 / 135 Loss: 6.346131324768066 Tokens per Sec: 18455.875369639332
Epoch Step: 15 / 135 Loss: 24.597923278808594 Tokens per Sec: 18272.736557153916
Epoch Step: 20 / 135 Loss: 4.506882667541504 Tokens per Sec: 18119.20805564773
Epoch Step: 25 / 135 Loss: 61.80023193359375 Tokens per Sec: 20421.44060917597
Epoch Step: 30 / 135 Loss: 8.667933464050293 Tokens per Sec: 19264.678234843333
Epoch Step: 35 / 135 Loss: 7.0909318923950195 Tokens per Sec: 19389.66858208622
Epoch Step: 40 / 135 Loss: 12.588865280151367 Tokens per Sec: 17612.473815512207
Epoch Step: 45 / 135 Loss: 80.5203628540039 Tokens per Sec: 19283.931494896107
Epoch Step: 50 / 135 Loss: 7.740516662597656 Tokens per Sec: 20503.813525494712
Epoch Step: 55 / 135 Loss: 10.751374244689941 Tokens per Sec: 19705.128992801277
Epoch Step: 60 / 135 Loss: 12.063288688659668 Tokens per Sec: 21465.153520878688
Epoch Step: 65 / 135 Loss: 11.310102462768555 Tokens per Sec: 21765.895898932937
Epoch Step: 70 / 135 Loss: 11.173916816711426 Tokens per Sec: 20680.234260979792
Epoch Step: 75 / 135 Loss: 10.103069305419922 Tokens per Sec: 19358.63449336997
Epoch Step: 80 / 135 Loss: 81.4959487915039 Tokens per Sec: 21607.416711461756
Epoch Step: 85 / 135 Loss: 7.612576484680176 Tokens per Sec: 24078.81297476106
Epoch Step: 90 / 135 Loss: 9.754469871520996 Tokens per Sec: 24052.225204868628
Epoch Step: 95 / 135 Loss: 7.937022686004639 Tokens per Sec: 21343.94484377665
Epoch Step: 100 / 135 Loss: 4.567017078399658 Tokens per Sec: 19795.407589968003
Epoch Step: 105 / 135 Loss: 7.596417427062988 Tokens per Sec: 18808.93326953387
Epoch Step: 110 / 135 Loss: 69.05581665039062 Tokens per Sec: 19533.86038173403
Epoch Step: 115 / 135 Loss: 10.904029846191406 Tokens per Sec: 16789.73557518038
Epoch Step: 120 / 135 Loss: 66.21196746826172 Tokens per Sec: 18893.995876717432
Epoch Step: 125 / 135 Loss: 13.353199005126953 Tokens per Sec: 20648.153841042025
Epoch Step: 130 / 135 Loss: 10.570528984069824 Tokens per Sec: 15523.908013056884
Epoch Step: 135 / 135 Loss: 4.17897367477417 Tokens per Sec: 16602.836752961826
Epoch ended with duration 0:00:12.920030
Train perplexity: 1.590066844502522
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654288
Validation perplexity: 1.5199938291514152
Epoch 64 / 1000
Epoch Step: 5 / 135 Loss: 13.614604949951172 Tokens per Sec: 20203.208805147577
Epoch Step: 10 / 135 Loss: 6.888739585876465 Tokens per Sec: 19270.490024329687
Epoch Step: 15 / 135 Loss: 75.97791290283203 Tokens per Sec: 21802.024351168242
Epoch Step: 20 / 135 Loss: 14.631048202514648 Tokens per Sec: 19127.21793765631
Epoch Step: 25 / 135 Loss: 69.43152618408203 Tokens per Sec: 21315.569806182066
Epoch Step: 30 / 135 Loss: 12.43896770477295 Tokens per Sec: 24036.53254350167
Epoch Step: 35 / 135 Loss: 13.948287010192871 Tokens per Sec: 21943.61675613136
Epoch Step: 40 / 135 Loss: 5.460869312286377 Tokens per Sec: 17637.075069677394
Epoch Step: 45 / 135 Loss: 10.853653907775879 Tokens per Sec: 20005.441720169743
Epoch Step: 50 / 135 Loss: 10.871994018554688 Tokens per Sec: 22027.183993651914
Epoch Step: 55 / 135 Loss: 10.968894958496094 Tokens per Sec: 18212.40037642851
Epoch Step: 60 / 135 Loss: 15.04332160949707 Tokens per Sec: 19885.47612135516
Epoch Step: 65 / 135 Loss: 10.683319091796875 Tokens per Sec: 22313.299498248023
Epoch Step: 70 / 135 Loss: 81.15535736083984 Tokens per Sec: 24940.56658027609
Epoch Step: 75 / 135 Loss: 4.735287189483643 Tokens per Sec: 17940.54661182093
Epoch Step: 80 / 135 Loss: 8.8795747756958 Tokens per Sec: 23145.10116084551
Epoch Step: 85 / 135 Loss: 12.956923484802246 Tokens per Sec: 21689.646118149107
Epoch Step: 90 / 135 Loss: 8.941575050354004 Tokens per Sec: 19369.49566217972
Epoch Step: 95 / 135 Loss: 13.972536087036133 Tokens per Sec: 19187.0899848695
Epoch Step: 100 / 135 Loss: 12.328206062316895 Tokens per Sec: 15891.696590065021
Epoch Step: 105 / 135 Loss: 36.188297271728516 Tokens per Sec: 15167.676935181371
Epoch Step: 110 / 135 Loss: 6.929799556732178 Tokens per Sec: 19101.990451965918
Epoch Step: 115 / 135 Loss: 71.47654724121094 Tokens per Sec: 20017.802953545233
Epoch Step: 120 / 135 Loss: 8.017769813537598 Tokens per Sec: 17953.00860434814
Epoch Step: 125 / 135 Loss: 11.475627899169922 Tokens per Sec: 17304.81220432774
Epoch Step: 130 / 135 Loss: 11.628110885620117 Tokens per Sec: 17468.05853869398
Epoch Step: 135 / 135 Loss: 5.8277435302734375 Tokens per Sec: 20047.759257990758
Epoch ended with duration 0:00:12.809015
Train perplexity: 1.7044409770817777
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.665303
Validation perplexity: 1.5649861126297784
Epoch 65 / 1000
Epoch Step: 5 / 135 Loss: 55.207611083984375 Tokens per Sec: 18763.54534373117
Epoch Step: 10 / 135 Loss: 10.938640594482422 Tokens per Sec: 18291.43187758849
Epoch Step: 15 / 135 Loss: 3.7244622707366943 Tokens per Sec: 21290.243681638844
Epoch Step: 20 / 135 Loss: 8.663873672485352 Tokens per Sec: 18872.210922269936
Epoch Step: 25 / 135 Loss: 21.123380661010742 Tokens per Sec: 23062.927934650095
Epoch Step: 30 / 135 Loss: 4.339176654815674 Tokens per Sec: 19246.499410077882
Epoch Step: 35 / 135 Loss: 13.456016540527344 Tokens per Sec: 22727.22233840641
Epoch Step: 40 / 135 Loss: 8.938314437866211 Tokens per Sec: 20049.51874254224
Epoch Step: 45 / 135 Loss: 3.8161938190460205 Tokens per Sec: 19342.04970910317
Epoch Step: 50 / 135 Loss: 12.60714340209961 Tokens per Sec: 24337.909994928177
Epoch Step: 55 / 135 Loss: 8.000195503234863 Tokens per Sec: 21535.6499257601
Epoch Step: 60 / 135 Loss: 7.848487377166748 Tokens per Sec: 18262.205530029183
Epoch Step: 65 / 135 Loss: 77.69812774658203 Tokens per Sec: 21000.168245796147
Epoch Step: 70 / 135 Loss: 13.659651756286621 Tokens per Sec: 21003.23738333405
Epoch Step: 75 / 135 Loss: 7.392529487609863 Tokens per Sec: 18188.343308574127
Epoch Step: 80 / 135 Loss: 10.591793060302734 Tokens per Sec: 22779.332915816904
Epoch Step: 85 / 135 Loss: 4.812222480773926 Tokens per Sec: 20509.994798115036
Epoch Step: 90 / 135 Loss: 5.4292731285095215 Tokens per Sec: 22413.04819467179
Epoch Step: 95 / 135 Loss: 9.98218059539795 Tokens per Sec: 18938.602806909046
Epoch Step: 100 / 135 Loss: 3.826934576034546 Tokens per Sec: 21845.81374761584
Epoch Step: 105 / 135 Loss: 10.457849502563477 Tokens per Sec: 18795.973665325862
Epoch Step: 110 / 135 Loss: 10.000005722045898 Tokens per Sec: 19092.475690080948
Epoch Step: 115 / 135 Loss: 7.627198696136475 Tokens per Sec: 18317.209886023535
Epoch Step: 120 / 135 Loss: 7.4158616065979 Tokens per Sec: 19417.87315638863
Epoch Step: 125 / 135 Loss: 8.6242036819458 Tokens per Sec: 17705.750703603862
Epoch Step: 130 / 135 Loss: 32.504600524902344 Tokens per Sec: 18157.934105966382
Epoch Step: 135 / 135 Loss: 4.988736629486084 Tokens per Sec: 15596.111511329573
Epoch ended with duration 0:00:12.761119
Train perplexity: 1.4998492587698338
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652855
Validation perplexity: 1.6203279676479916
Model saved checkpoint!
Epoch 66 / 1000
Epoch Step: 5 / 135 Loss: 11.490816116333008 Tokens per Sec: 18813.77742633268
Epoch Step: 10 / 135 Loss: 12.370417594909668 Tokens per Sec: 23872.999158517527
Epoch Step: 15 / 135 Loss: 11.879622459411621 Tokens per Sec: 20403.94503679246
Epoch Step: 20 / 135 Loss: 60.21830368041992 Tokens per Sec: 20639.819473936008
Epoch Step: 25 / 135 Loss: 13.495996475219727 Tokens per Sec: 21629.46187976912
Epoch Step: 30 / 135 Loss: 14.254560470581055 Tokens per Sec: 19025.69893896667
Epoch Step: 35 / 135 Loss: 11.393827438354492 Tokens per Sec: 18818.45834559097
Epoch Step: 40 / 135 Loss: 7.810617923736572 Tokens per Sec: 20420.66111816175
Epoch Step: 45 / 135 Loss: 11.63874340057373 Tokens per Sec: 17908.84765963816
Epoch Step: 50 / 135 Loss: 3.8163866996765137 Tokens per Sec: 19551.278426073422
Epoch Step: 55 / 135 Loss: 5.405932903289795 Tokens per Sec: 17349.226542127308
Epoch Step: 60 / 135 Loss: 6.582515716552734 Tokens per Sec: 19623.444993605553
Epoch Step: 65 / 135 Loss: 14.535991668701172 Tokens per Sec: 18817.36184769141
Epoch Step: 70 / 135 Loss: 14.083934783935547 Tokens per Sec: 22581.185225402674
Epoch Step: 75 / 135 Loss: 8.939678192138672 Tokens per Sec: 19839.598770079654
Epoch Step: 80 / 135 Loss: 8.487732887268066 Tokens per Sec: 23197.1680873262
Epoch Step: 85 / 135 Loss: 12.502103805541992 Tokens per Sec: 22157.60502981968
Epoch Step: 90 / 135 Loss: 38.47520065307617 Tokens per Sec: 20401.962455669305
Epoch Step: 95 / 135 Loss: 3.6776890754699707 Tokens per Sec: 20907.22906643328
Epoch Step: 100 / 135 Loss: 9.817414283752441 Tokens per Sec: 22816.357164163852
Epoch Step: 105 / 135 Loss: 5.00539493560791 Tokens per Sec: 17551.226725201082
Epoch Step: 110 / 135 Loss: 9.094578742980957 Tokens per Sec: 20088.246236907024
Epoch Step: 115 / 135 Loss: 8.318102836608887 Tokens per Sec: 17947.723595778913
Epoch Step: 120 / 135 Loss: 8.287659645080566 Tokens per Sec: 16732.58632436769
Epoch Step: 125 / 135 Loss: 5.370120525360107 Tokens per Sec: 18057.779402507786
Epoch Step: 130 / 135 Loss: 9.732932090759277 Tokens per Sec: 18930.847483689176
Epoch Step: 135 / 135 Loss: 9.294867515563965 Tokens per Sec: 19876.010478352462
Epoch ended with duration 0:00:12.771421
Train perplexity: 1.488123733339092
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.663901
Validation perplexity: 1.3960814613900354
Model saved best_on_validation!
Epoch 67 / 1000
Epoch Step: 5 / 135 Loss: 10.62527847290039 Tokens per Sec: 15865.687811314132
Epoch Step: 10 / 135 Loss: 50.49789047241211 Tokens per Sec: 23163.848940399745
Epoch Step: 15 / 135 Loss: 7.200811862945557 Tokens per Sec: 17411.82658156685
Epoch Step: 20 / 135 Loss: 12.313249588012695 Tokens per Sec: 21434.882594123872
Epoch Step: 25 / 135 Loss: 6.4834747314453125 Tokens per Sec: 17845.16070667904
Epoch Step: 30 / 135 Loss: 4.481173038482666 Tokens per Sec: 19910.224340948793
Epoch Step: 35 / 135 Loss: 19.6113224029541 Tokens per Sec: 19518.5626009286
Epoch Step: 40 / 135 Loss: 4.371047019958496 Tokens per Sec: 21623.32692651633
Epoch Step: 45 / 135 Loss: 6.522932529449463 Tokens per Sec: 17947.717174675396
Epoch Step: 50 / 135 Loss: 7.161269664764404 Tokens per Sec: 22886.253660298986
Epoch Step: 55 / 135 Loss: 11.335273742675781 Tokens per Sec: 21947.530168153404
Epoch Step: 60 / 135 Loss: 7.1042914390563965 Tokens per Sec: 23918.72684012379
Epoch Step: 65 / 135 Loss: 7.388828754425049 Tokens per Sec: 15087.432315597274
Epoch Step: 70 / 135 Loss: 8.745026588439941 Tokens per Sec: 22332.76783488564
Epoch Step: 75 / 135 Loss: 9.109550476074219 Tokens per Sec: 20690.52548580866
Epoch Step: 80 / 135 Loss: 9.48978042602539 Tokens per Sec: 21835.87106814328
Epoch Step: 85 / 135 Loss: 11.079768180847168 Tokens per Sec: 21952.230425819784
Epoch Step: 90 / 135 Loss: 6.4532036781311035 Tokens per Sec: 22971.71063334715
Epoch Step: 95 / 135 Loss: 12.68486213684082 Tokens per Sec: 19906.36925688859
Epoch Step: 100 / 135 Loss: 7.80823278427124 Tokens per Sec: 21108.462991925342
Epoch Step: 105 / 135 Loss: 4.463133335113525 Tokens per Sec: 16954.231931031383
Epoch Step: 110 / 135 Loss: 7.062870025634766 Tokens per Sec: 18218.621605630484
Epoch Step: 115 / 135 Loss: 10.21656322479248 Tokens per Sec: 19926.89609332522
Epoch Step: 120 / 135 Loss: 10.330632209777832 Tokens per Sec: 20295.516250289646
Epoch Step: 125 / 135 Loss: 5.385885715484619 Tokens per Sec: 16751.16992193221
Epoch Step: 130 / 135 Loss: 7.801392078399658 Tokens per Sec: 17093.84505067697
Epoch Step: 135 / 135 Loss: 11.48833179473877 Tokens per Sec: 18226.91658020093
Epoch ended with duration 0:00:12.824957
Train perplexity: 1.4021550554718831
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654296
Validation perplexity: 1.5256523548646665
Epoch 68 / 1000
Epoch Step: 5 / 135 Loss: 7.060878753662109 Tokens per Sec: 16980.744598018053
Epoch Step: 10 / 135 Loss: 4.053922176361084 Tokens per Sec: 20054.237864615472
Epoch Step: 15 / 135 Loss: 8.48045539855957 Tokens per Sec: 19389.7679838987
Epoch Step: 20 / 135 Loss: 3.037639856338501 Tokens per Sec: 19502.556607053746
Epoch Step: 25 / 135 Loss: 7.968338966369629 Tokens per Sec: 20301.94962015995
Epoch Step: 30 / 135 Loss: 61.62508010864258 Tokens per Sec: 18235.227109626358
Epoch Step: 35 / 135 Loss: 8.654842376708984 Tokens per Sec: 24626.035605585144
Epoch Step: 40 / 135 Loss: 5.706279277801514 Tokens per Sec: 21224.34716949015
Epoch Step: 45 / 135 Loss: 6.950963497161865 Tokens per Sec: 20116.689908173965
Epoch Step: 50 / 135 Loss: 7.850901126861572 Tokens per Sec: 20760.613899283297
Epoch Step: 55 / 135 Loss: 5.8844895362854 Tokens per Sec: 22688.744212066173
Epoch Step: 60 / 135 Loss: 10.40432357788086 Tokens per Sec: 23075.9194443259
Epoch Step: 65 / 135 Loss: 10.135951042175293 Tokens per Sec: 18130.67184105195
Epoch Step: 70 / 135 Loss: 12.758957862854004 Tokens per Sec: 17744.349753741826
Epoch Step: 75 / 135 Loss: 6.935080051422119 Tokens per Sec: 22891.97079811005
Epoch Step: 80 / 135 Loss: 12.969100952148438 Tokens per Sec: 21484.744593193667
Epoch Step: 85 / 135 Loss: 10.9002685546875 Tokens per Sec: 17834.231372241262
Epoch Step: 90 / 135 Loss: 5.566410541534424 Tokens per Sec: 19731.98734885126
Epoch Step: 95 / 135 Loss: 7.312268257141113 Tokens per Sec: 20962.4234251547
Epoch Step: 100 / 135 Loss: 6.483260154724121 Tokens per Sec: 22944.939603581086
Epoch Step: 105 / 135 Loss: 9.194682121276855 Tokens per Sec: 18265.740883698607
Epoch Step: 110 / 135 Loss: 71.66238403320312 Tokens per Sec: 19227.548776114196
Epoch Step: 115 / 135 Loss: 10.083198547363281 Tokens per Sec: 17220.669465468687
Epoch Step: 120 / 135 Loss: 12.131250381469727 Tokens per Sec: 19548.520980912435
Epoch Step: 125 / 135 Loss: 7.415074348449707 Tokens per Sec: 15428.362049735877
Epoch Step: 130 / 135 Loss: 4.566503047943115 Tokens per Sec: 17131.54984236996
Epoch Step: 135 / 135 Loss: 57.58332824707031 Tokens per Sec: 18944.234635783076
Epoch ended with duration 0:00:12.858215
Train perplexity: 1.526752271424559
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.662618
Validation perplexity: 1.7858348448988022
Epoch 69 / 1000
Epoch Step: 5 / 135 Loss: 7.708486557006836 Tokens per Sec: 17749.399078436232
Epoch Step: 10 / 135 Loss: 3.680947780609131 Tokens per Sec: 24085.676235205203
Epoch Step: 15 / 135 Loss: 9.056133270263672 Tokens per Sec: 18177.372664130573
Epoch Step: 20 / 135 Loss: 4.531311988830566 Tokens per Sec: 21044.747304420704
Epoch Step: 25 / 135 Loss: 7.611325263977051 Tokens per Sec: 20390.059564143103
Epoch Step: 30 / 135 Loss: 7.874819278717041 Tokens per Sec: 20295.916385177326
Epoch Step: 35 / 135 Loss: 11.123309135437012 Tokens per Sec: 23409.435663218253
Epoch Step: 40 / 135 Loss: 2.6660425662994385 Tokens per Sec: 15866.199318260906
Epoch Step: 45 / 135 Loss: 7.208157062530518 Tokens per Sec: 21094.035214641674
Epoch Step: 50 / 135 Loss: 6.802494525909424 Tokens per Sec: 20534.870760396014
Epoch Step: 55 / 135 Loss: 14.294189453125 Tokens per Sec: 19284.783466897392
Epoch Step: 60 / 135 Loss: 7.07725715637207 Tokens per Sec: 22711.137911369235
Epoch Step: 65 / 135 Loss: 12.384405136108398 Tokens per Sec: 19026.39220347041
Epoch Step: 70 / 135 Loss: 10.893939971923828 Tokens per Sec: 19285.227381355282
Epoch Step: 75 / 135 Loss: 8.76162052154541 Tokens per Sec: 17019.432546865344
Epoch Step: 80 / 135 Loss: 9.394386291503906 Tokens per Sec: 20690.643602417447
Epoch Step: 85 / 135 Loss: 4.179479598999023 Tokens per Sec: 20953.986531358605
Epoch Step: 90 / 135 Loss: 10.351761817932129 Tokens per Sec: 23048.537978872948
Epoch Step: 95 / 135 Loss: 13.308032035827637 Tokens per Sec: 23396.483134651717
Epoch Step: 100 / 135 Loss: 4.314086437225342 Tokens per Sec: 22878.522882841447
Epoch Step: 105 / 135 Loss: 4.99899959564209 Tokens per Sec: 18898.702443180617
Epoch Step: 110 / 135 Loss: 7.886488914489746 Tokens per Sec: 18115.25410721025
Epoch Step: 115 / 135 Loss: 7.165342330932617 Tokens per Sec: 15825.03567997231
Epoch Step: 120 / 135 Loss: 11.460515975952148 Tokens per Sec: 19844.836678195887
Epoch Step: 125 / 135 Loss: 6.171387672424316 Tokens per Sec: 19384.28935813555
Epoch Step: 130 / 135 Loss: 11.342938423156738 Tokens per Sec: 19029.758283253723
Epoch Step: 135 / 135 Loss: 41.53190231323242 Tokens per Sec: 17690.641297715476
Epoch ended with duration 0:00:12.756874
Train perplexity: 1.4828562473430904
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656288
Validation perplexity: 1.6210356356995317
Epoch 70 / 1000
Epoch Step: 5 / 135 Loss: 4.835049152374268 Tokens per Sec: 17085.62687291332
Epoch Step: 10 / 135 Loss: 10.897651672363281 Tokens per Sec: 18764.934580838013
Epoch Step: 15 / 135 Loss: 4.590628623962402 Tokens per Sec: 19297.79897452112
Epoch Step: 20 / 135 Loss: 5.598402976989746 Tokens per Sec: 19179.957736678734
Epoch Step: 25 / 135 Loss: 6.333615303039551 Tokens per Sec: 25497.032549290794
Epoch Step: 30 / 135 Loss: 12.583231925964355 Tokens per Sec: 22135.01256660692
Epoch Step: 35 / 135 Loss: 5.206704616546631 Tokens per Sec: 22301.935284844927
Epoch Step: 40 / 135 Loss: 8.974427223205566 Tokens per Sec: 17805.364870598667
Epoch Step: 45 / 135 Loss: 11.685992240905762 Tokens per Sec: 23015.39332543923
Epoch Step: 50 / 135 Loss: 8.650815963745117 Tokens per Sec: 23678.692685029233
Epoch Step: 55 / 135 Loss: 7.480109691619873 Tokens per Sec: 17740.67548471962
Epoch Step: 60 / 135 Loss: 4.695913314819336 Tokens per Sec: 22437.182738818596
Epoch Step: 65 / 135 Loss: 6.216719150543213 Tokens per Sec: 19473.80324295866
Epoch Step: 70 / 135 Loss: 11.378352165222168 Tokens per Sec: 17780.550194231622
Epoch Step: 75 / 135 Loss: 5.553406715393066 Tokens per Sec: 21707.89963835158
Epoch Step: 80 / 135 Loss: 4.793654918670654 Tokens per Sec: 21804.06138969129
Epoch Step: 85 / 135 Loss: 20.56649398803711 Tokens per Sec: 23052.749257542164
Epoch Step: 90 / 135 Loss: 4.780971050262451 Tokens per Sec: 20224.821741498454
Epoch Step: 95 / 135 Loss: 8.731796264648438 Tokens per Sec: 20267.592431787307
Epoch Step: 100 / 135 Loss: 12.296823501586914 Tokens per Sec: 17541.227726455865
Epoch Step: 105 / 135 Loss: 55.44694137573242 Tokens per Sec: 17635.218104258147
Epoch Step: 110 / 135 Loss: 5.1174516677856445 Tokens per Sec: 14464.874376772841
Epoch Step: 115 / 135 Loss: 6.306301593780518 Tokens per Sec: 19275.61451572688
Epoch Step: 120 / 135 Loss: 10.38580322265625 Tokens per Sec: 17922.379998938595
Epoch Step: 125 / 135 Loss: 10.947846412658691 Tokens per Sec: 19276.45821911566
Epoch Step: 130 / 135 Loss: 10.138700485229492 Tokens per Sec: 18893.12261529569
Epoch Step: 135 / 135 Loss: 10.07347297668457 Tokens per Sec: 19343.964086330936
Epoch ended with duration 0:00:12.798663
Train perplexity: 1.5133353292813154
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.664973
Validation perplexity: 1.9718853805159644
Model saved checkpoint!
Epoch 71 / 1000
Epoch Step: 5 / 135 Loss: 10.240495681762695 Tokens per Sec: 22591.2738620116
Epoch Step: 10 / 135 Loss: 8.506671905517578 Tokens per Sec: 20490.04244348523
Epoch Step: 15 / 135 Loss: 7.206583023071289 Tokens per Sec: 16942.24118898585
Epoch Step: 20 / 135 Loss: 8.653583526611328 Tokens per Sec: 18695.550962559224
Epoch Step: 25 / 135 Loss: 19.28310775756836 Tokens per Sec: 21601.190168008445
Epoch Step: 30 / 135 Loss: 9.654609680175781 Tokens per Sec: 18715.985729782926
Epoch Step: 35 / 135 Loss: 5.80145263671875 Tokens per Sec: 15983.659412649162
Epoch Step: 40 / 135 Loss: 4.949651718139648 Tokens per Sec: 19665.172255380883
Epoch Step: 45 / 135 Loss: 10.739645004272461 Tokens per Sec: 20206.310873118106
Epoch Step: 50 / 135 Loss: 7.095491886138916 Tokens per Sec: 24228.610371144314
Epoch Step: 55 / 135 Loss: 6.407435417175293 Tokens per Sec: 20834.206558115828
Epoch Step: 60 / 135 Loss: 4.168990135192871 Tokens per Sec: 22371.48434133828
Epoch Step: 65 / 135 Loss: 59.72276306152344 Tokens per Sec: 21447.93968670899
Epoch Step: 70 / 135 Loss: 3.8932008743286133 Tokens per Sec: 18330.42084218067
Epoch Step: 75 / 135 Loss: 58.212501525878906 Tokens per Sec: 19662.398355943114
Epoch Step: 80 / 135 Loss: 6.419473171234131 Tokens per Sec: 21199.2361354842
Epoch Step: 85 / 135 Loss: 10.96727466583252 Tokens per Sec: 21681.593224720586
Epoch Step: 90 / 135 Loss: 7.403281211853027 Tokens per Sec: 22253.214341206687
Epoch Step: 95 / 135 Loss: 5.632105827331543 Tokens per Sec: 22741.381664730106
Epoch Step: 100 / 135 Loss: 7.896893501281738 Tokens per Sec: 17284.996788920398
Epoch Step: 105 / 135 Loss: 8.576458930969238 Tokens per Sec: 18734.228183200586
Epoch Step: 110 / 135 Loss: 3.3771567344665527 Tokens per Sec: 17107.446872357737
Epoch Step: 115 / 135 Loss: 10.08022689819336 Tokens per Sec: 18989.67328861793
Epoch Step: 120 / 135 Loss: 7.2602458000183105 Tokens per Sec: 17985.74066533796
Epoch Step: 125 / 135 Loss: 9.233628273010254 Tokens per Sec: 19587.865913340993
Epoch Step: 130 / 135 Loss: 4.654416084289551 Tokens per Sec: 17474.13726190242
Epoch Step: 135 / 135 Loss: 10.831504821777344 Tokens per Sec: 18498.010826621226
Epoch ended with duration 0:00:12.859045
Train perplexity: 1.4501911838105803
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.670394
Validation perplexity: 2.0344671044375553
Epoch 72 / 1000
Epoch Step: 5 / 135 Loss: 42.31602096557617 Tokens per Sec: 18819.34808177899
Epoch Step: 10 / 135 Loss: 9.530990600585938 Tokens per Sec: 18877.60823677791
Epoch Step: 15 / 135 Loss: 4.958511829376221 Tokens per Sec: 21606.20218931101
Epoch Step: 20 / 135 Loss: 6.095451354980469 Tokens per Sec: 17769.00955827293
Epoch Step: 25 / 135 Loss: 5.687009811401367 Tokens per Sec: 21315.138179353446
Epoch Step: 30 / 135 Loss: 6.492110729217529 Tokens per Sec: 20342.468775644415
Epoch Step: 35 / 135 Loss: 10.9099760055542 Tokens per Sec: 20474.713094787512
Epoch Step: 40 / 135 Loss: 6.58548641204834 Tokens per Sec: 22712.856753304943
Epoch Step: 45 / 135 Loss: 6.727575302124023 Tokens per Sec: 22546.2414490442
Epoch Step: 50 / 135 Loss: 11.046924591064453 Tokens per Sec: 21746.132315098417
Epoch Step: 55 / 135 Loss: 78.19403076171875 Tokens per Sec: 18148.45995057234
Epoch Step: 60 / 135 Loss: 6.92092752456665 Tokens per Sec: 20919.766124606347
Epoch Step: 65 / 135 Loss: 7.830820560455322 Tokens per Sec: 17266.64308218405
Epoch Step: 70 / 135 Loss: 5.0113444328308105 Tokens per Sec: 20281.03135086751
Epoch Step: 75 / 135 Loss: 10.003969192504883 Tokens per Sec: 21295.794670000076
Epoch Step: 80 / 135 Loss: 9.40274429321289 Tokens per Sec: 19840.55434110126
Epoch Step: 85 / 135 Loss: 10.590048789978027 Tokens per Sec: 18910.704006018063
Epoch Step: 90 / 135 Loss: 11.229829788208008 Tokens per Sec: 23250.368630770194
Epoch Step: 95 / 135 Loss: 10.935916900634766 Tokens per Sec: 22972.500465159846
Epoch Step: 100 / 135 Loss: 4.516809463500977 Tokens per Sec: 18812.145980586614
Epoch Step: 105 / 135 Loss: 3.728053092956543 Tokens per Sec: 16980.887504747763
Epoch Step: 110 / 135 Loss: 8.866264343261719 Tokens per Sec: 19215.677425229187
Epoch Step: 115 / 135 Loss: 7.075063705444336 Tokens per Sec: 19383.61737415147
Epoch Step: 120 / 135 Loss: 6.22210168838501 Tokens per Sec: 16014.362099983768
Epoch Step: 125 / 135 Loss: 7.996208190917969 Tokens per Sec: 16925.879562020404
Epoch Step: 130 / 135 Loss: 8.063910484313965 Tokens per Sec: 18760.671140891896
Epoch Step: 135 / 135 Loss: 5.279494285583496 Tokens per Sec: 19970.959257214156
Epoch ended with duration 0:00:12.843807
Train perplexity: 1.4669714085230436
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.667084
Validation perplexity: 1.934479525404674
Epoch 73 / 1000
Epoch Step: 5 / 135 Loss: 5.062008380889893 Tokens per Sec: 20046.06854078491
Epoch Step: 10 / 135 Loss: 5.118370056152344 Tokens per Sec: 23440.401741448244
Epoch Step: 15 / 135 Loss: 6.595935344696045 Tokens per Sec: 18254.607510799586
Epoch Step: 20 / 135 Loss: 6.521127700805664 Tokens per Sec: 15890.61376099699
Epoch Step: 25 / 135 Loss: 4.956680774688721 Tokens per Sec: 22434.66836312632
Epoch Step: 30 / 135 Loss: 4.483293056488037 Tokens per Sec: 19613.29365903724
Epoch Step: 35 / 135 Loss: 5.053627967834473 Tokens per Sec: 22230.86312712627
Epoch Step: 40 / 135 Loss: 9.225627899169922 Tokens per Sec: 20159.018768963102
Epoch Step: 45 / 135 Loss: 8.185208320617676 Tokens per Sec: 22799.47640602075
Epoch Step: 50 / 135 Loss: 9.748043060302734 Tokens per Sec: 20432.457702177322
Epoch Step: 55 / 135 Loss: 3.2443299293518066 Tokens per Sec: 18898.10694676842
Epoch Step: 60 / 135 Loss: 3.827481746673584 Tokens per Sec: 21150.03119624822
Epoch Step: 65 / 135 Loss: 10.397552490234375 Tokens per Sec: 24114.604792741175
Epoch Step: 70 / 135 Loss: 3.535372018814087 Tokens per Sec: 21317.12545807928
Epoch Step: 75 / 135 Loss: 5.564319133758545 Tokens per Sec: 19434.36593063451
Epoch Step: 80 / 135 Loss: 8.527383804321289 Tokens per Sec: 22516.283889184084
Epoch Step: 85 / 135 Loss: 3.893840789794922 Tokens per Sec: 21394.884228263232
Epoch Step: 90 / 135 Loss: 7.938433647155762 Tokens per Sec: 20032.853728736533
Epoch Step: 95 / 135 Loss: 13.289464950561523 Tokens per Sec: 17642.618843532317
Epoch Step: 100 / 135 Loss: 11.890703201293945 Tokens per Sec: 19938.347758250733
Epoch Step: 105 / 135 Loss: 8.188896179199219 Tokens per Sec: 19338.682495227284
Epoch Step: 110 / 135 Loss: 8.926074028015137 Tokens per Sec: 19550.59245770388
Epoch Step: 115 / 135 Loss: 75.0009994506836 Tokens per Sec: 18425.458420271294
Epoch Step: 120 / 135 Loss: 3.2775492668151855 Tokens per Sec: 17439.14529760022
Epoch Step: 125 / 135 Loss: 5.09706974029541 Tokens per Sec: 19081.41403243049
Epoch Step: 130 / 135 Loss: 4.947062015533447 Tokens per Sec: 18305.901879082394
Epoch Step: 135 / 135 Loss: 8.2969970703125 Tokens per Sec: 14374.556958962912
Epoch ended with duration 0:00:12.740337
Train perplexity: 1.4277975798489688
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648973
Validation perplexity: 1.4953499244532271
Epoch 74 / 1000
Epoch Step: 5 / 135 Loss: 7.42991828918457 Tokens per Sec: 17787.437063411235
Epoch Step: 10 / 135 Loss: 3.8434817790985107 Tokens per Sec: 19295.388356219424
Epoch Step: 15 / 135 Loss: 4.397829532623291 Tokens per Sec: 22745.72689183498
Epoch Step: 20 / 135 Loss: 9.447139739990234 Tokens per Sec: 16367.23733571185
Epoch Step: 25 / 135 Loss: 5.3108134269714355 Tokens per Sec: 18793.066194304458
Epoch Step: 30 / 135 Loss: 12.459299087524414 Tokens per Sec: 21404.66497360615
Epoch Step: 35 / 135 Loss: 4.9853739738464355 Tokens per Sec: 18984.569824740178
Epoch Step: 40 / 135 Loss: 2.742682456970215 Tokens per Sec: 21556.628487518356
Epoch Step: 45 / 135 Loss: 26.751554489135742 Tokens per Sec: 20694.105413837548
Epoch Step: 50 / 135 Loss: 4.0535569190979 Tokens per Sec: 19490.880108943
Epoch Step: 55 / 135 Loss: 8.399767875671387 Tokens per Sec: 23390.033804710794
Epoch Step: 60 / 135 Loss: 9.986739158630371 Tokens per Sec: 21272.59539425201
Epoch Step: 65 / 135 Loss: 11.763232231140137 Tokens per Sec: 18547.127270513814
Epoch Step: 70 / 135 Loss: 8.248038291931152 Tokens per Sec: 20470.57097209
Epoch Step: 75 / 135 Loss: 46.316741943359375 Tokens per Sec: 21485.6937386014
Epoch Step: 80 / 135 Loss: 3.7208659648895264 Tokens per Sec: 20849.667614157166
Epoch Step: 85 / 135 Loss: 4.345214366912842 Tokens per Sec: 21430.02516531667
Epoch Step: 90 / 135 Loss: 6.331954002380371 Tokens per Sec: 19661.90323179057
Epoch Step: 95 / 135 Loss: 13.027867317199707 Tokens per Sec: 18620.735694573134
Epoch Step: 100 / 135 Loss: 4.675014972686768 Tokens per Sec: 23201.59496449252
Epoch Step: 105 / 135 Loss: 9.699376106262207 Tokens per Sec: 16510.160680588837
Epoch Step: 110 / 135 Loss: 10.536481857299805 Tokens per Sec: 20947.799137655846
Epoch Step: 115 / 135 Loss: 7.8240509033203125 Tokens per Sec: 19511.316647632626
Epoch Step: 120 / 135 Loss: 8.165943145751953 Tokens per Sec: 17344.472066313476
Epoch Step: 125 / 135 Loss: 8.06784725189209 Tokens per Sec: 17738.102961240198
Epoch Step: 130 / 135 Loss: 5.501319885253906 Tokens per Sec: 17208.49171855097
Epoch Step: 135 / 135 Loss: 6.703580379486084 Tokens per Sec: 19437.49125086641
Epoch ended with duration 0:00:12.870830
Train perplexity: 1.3980828181415428
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650101
Validation perplexity: 1.3703675555400772
Model saved best_on_validation!
Epoch 75 / 1000
Epoch Step: 5 / 135 Loss: 3.620971441268921 Tokens per Sec: 19697.906784628783
Epoch Step: 10 / 135 Loss: 11.839985847473145 Tokens per Sec: 20325.978209838653
Epoch Step: 15 / 135 Loss: 5.257017135620117 Tokens per Sec: 20750.703173802016
Epoch Step: 20 / 135 Loss: 8.360153198242188 Tokens per Sec: 18864.70310344895
Epoch Step: 25 / 135 Loss: 2.98557710647583 Tokens per Sec: 18232.416819760543
Epoch Step: 30 / 135 Loss: 3.5604703426361084 Tokens per Sec: 19889.47369625854
Epoch Step: 35 / 135 Loss: 5.42125129699707 Tokens per Sec: 23990.213708584997
Epoch Step: 40 / 135 Loss: 8.506317138671875 Tokens per Sec: 19087.10935246379
Epoch Step: 45 / 135 Loss: 9.18916130065918 Tokens per Sec: 23187.937763489917
Epoch Step: 50 / 135 Loss: 4.6119513511657715 Tokens per Sec: 22940.30059189331
Epoch Step: 55 / 135 Loss: 6.384950160980225 Tokens per Sec: 19814.191588698148
Epoch Step: 60 / 135 Loss: 5.196268081665039 Tokens per Sec: 19203.345102008137
Epoch Step: 65 / 135 Loss: 5.7791972160339355 Tokens per Sec: 19064.998994596586
Epoch Step: 70 / 135 Loss: 4.572329998016357 Tokens per Sec: 17749.25324978712
Epoch Step: 75 / 135 Loss: 5.719051361083984 Tokens per Sec: 20277.852841488933
Epoch Step: 80 / 135 Loss: 5.875548362731934 Tokens per Sec: 21525.635405470224
Epoch Step: 85 / 135 Loss: 8.21683406829834 Tokens per Sec: 19491.2181075777
Epoch Step: 90 / 135 Loss: 41.42545700073242 Tokens per Sec: 24156.960179333175
Epoch Step: 95 / 135 Loss: 31.226966857910156 Tokens per Sec: 22176.980028976875
Epoch Step: 100 / 135 Loss: 69.04339599609375 Tokens per Sec: 21634.72456033211
Epoch Step: 105 / 135 Loss: 6.785207748413086 Tokens per Sec: 17315.385423737942
Epoch Step: 110 / 135 Loss: 9.171854972839355 Tokens per Sec: 16917.148721367546
Epoch Step: 115 / 135 Loss: 5.284851551055908 Tokens per Sec: 18209.637235899976
Epoch Step: 120 / 135 Loss: 10.115384101867676 Tokens per Sec: 19174.969489219304
Epoch Step: 125 / 135 Loss: 10.057247161865234 Tokens per Sec: 19371.148426624994
Epoch Step: 130 / 135 Loss: 7.71207332611084 Tokens per Sec: 17672.597495116177
Epoch Step: 135 / 135 Loss: 80.99872589111328 Tokens per Sec: 19316.05016641829
Epoch ended with duration 0:00:12.757138
Train perplexity: 1.4946836136437411
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654903
Validation perplexity: 1.5943866329475693
Model saved checkpoint!
Epoch 76 / 1000
Epoch Step: 5 / 135 Loss: 10.266058921813965 Tokens per Sec: 16129.266047467061
Epoch Step: 10 / 135 Loss: 7.416208744049072 Tokens per Sec: 23490.926200409776
Epoch Step: 15 / 135 Loss: 8.18661117553711 Tokens per Sec: 21399.137078293446
Epoch Step: 20 / 135 Loss: 7.956971645355225 Tokens per Sec: 19898.027105888767
Epoch Step: 25 / 135 Loss: 11.891366958618164 Tokens per Sec: 22296.98587233427
Epoch Step: 30 / 135 Loss: 14.898459434509277 Tokens per Sec: 21153.731017597936
Epoch Step: 35 / 135 Loss: 11.668031692504883 Tokens per Sec: 23338.350052269507
Epoch Step: 40 / 135 Loss: 3.316671133041382 Tokens per Sec: 18890.635580640097
Epoch Step: 45 / 135 Loss: 5.454373836517334 Tokens per Sec: 21907.26512800121
Epoch Step: 50 / 135 Loss: 11.672042846679688 Tokens per Sec: 21019.578555079286
Epoch Step: 55 / 135 Loss: 12.105315208435059 Tokens per Sec: 20521.29241906821
Epoch Step: 60 / 135 Loss: 6.400508403778076 Tokens per Sec: 19192.5278925942
Epoch Step: 65 / 135 Loss: 6.84641170501709 Tokens per Sec: 19960.539384337855
Epoch Step: 70 / 135 Loss: 4.588049411773682 Tokens per Sec: 22005.255545046813
Epoch Step: 75 / 135 Loss: 11.724783897399902 Tokens per Sec: 19929.433713641665
Epoch Step: 80 / 135 Loss: 6.004990100860596 Tokens per Sec: 17841.606756793062
Epoch Step: 85 / 135 Loss: 64.3031997680664 Tokens per Sec: 22449.92978554492
Epoch Step: 90 / 135 Loss: 10.342584609985352 Tokens per Sec: 19514.876116357857
Epoch Step: 95 / 135 Loss: 8.291175842285156 Tokens per Sec: 20022.71580355404
Epoch Step: 100 / 135 Loss: 4.994956016540527 Tokens per Sec: 20198.602739307753
Epoch Step: 105 / 135 Loss: 5.3506669998168945 Tokens per Sec: 17081.83202507612
Epoch Step: 110 / 135 Loss: 12.181142807006836 Tokens per Sec: 19746.26906842984
Epoch Step: 115 / 135 Loss: 6.172485828399658 Tokens per Sec: 18112.642078737746
Epoch Step: 120 / 135 Loss: 36.8787841796875 Tokens per Sec: 18142.00636470881
Epoch Step: 125 / 135 Loss: 3.9446537494659424 Tokens per Sec: 16746.90122816908
Epoch Step: 130 / 135 Loss: 6.670177936553955 Tokens per Sec: 19616.659004228488
Epoch Step: 135 / 135 Loss: 7.438986301422119 Tokens per Sec: 17957.58636048231
Epoch ended with duration 0:00:12.789743
Train perplexity: 1.4357583881782925
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656810
Validation perplexity: 1.65247217358401
Epoch 77 / 1000
Epoch Step: 5 / 135 Loss: 10.13494873046875 Tokens per Sec: 20311.904785546474
Epoch Step: 10 / 135 Loss: 76.33016204833984 Tokens per Sec: 21247.691986791033
Epoch Step: 15 / 135 Loss: 10.13858699798584 Tokens per Sec: 22704.12435912904
Epoch Step: 20 / 135 Loss: 9.517195701599121 Tokens per Sec: 20393.461198194178
Epoch Step: 25 / 135 Loss: 5.003689765930176 Tokens per Sec: 22142.292543979253
Epoch Step: 30 / 135 Loss: 4.054111957550049 Tokens per Sec: 19463.913932051717
Epoch Step: 35 / 135 Loss: 7.964979648590088 Tokens per Sec: 20090.69348243453
Epoch Step: 40 / 135 Loss: 4.615607261657715 Tokens per Sec: 20422.818845978538
Epoch Step: 45 / 135 Loss: 9.461649894714355 Tokens per Sec: 20623.01983003955
Epoch Step: 50 / 135 Loss: 2.1794989109039307 Tokens per Sec: 22365.537930176226
Epoch Step: 55 / 135 Loss: 8.684467315673828 Tokens per Sec: 20811.395613764867
Epoch Step: 60 / 135 Loss: 7.454120635986328 Tokens per Sec: 19438.64374040244
Epoch Step: 65 / 135 Loss: 11.55833625793457 Tokens per Sec: 20296.58194327082
Epoch Step: 70 / 135 Loss: 4.314759254455566 Tokens per Sec: 20648.132035938503
Epoch Step: 75 / 135 Loss: 6.372803211212158 Tokens per Sec: 21326.317886614688
Epoch Step: 80 / 135 Loss: 4.826916694641113 Tokens per Sec: 24327.10539667435
Epoch Step: 85 / 135 Loss: 10.502948760986328 Tokens per Sec: 15303.94916418403
Epoch Step: 90 / 135 Loss: 5.397470474243164 Tokens per Sec: 22250.105562264034
Epoch Step: 95 / 135 Loss: 6.938205718994141 Tokens per Sec: 19719.554936072822
Epoch Step: 100 / 135 Loss: 14.6506986618042 Tokens per Sec: 16819.778299214795
Epoch Step: 105 / 135 Loss: 7.99027156829834 Tokens per Sec: 19315.87242948987
Epoch Step: 110 / 135 Loss: 9.837679862976074 Tokens per Sec: 17908.542940939213
Epoch Step: 115 / 135 Loss: 10.197514533996582 Tokens per Sec: 18482.188549298597
Epoch Step: 120 / 135 Loss: 9.103737831115723 Tokens per Sec: 19232.193593384418
Epoch Step: 125 / 135 Loss: 8.331014633178711 Tokens per Sec: 18287.239263959575
Epoch Step: 130 / 135 Loss: 29.99622917175293 Tokens per Sec: 17651.15300341967
Epoch Step: 135 / 135 Loss: 7.363204479217529 Tokens per Sec: 15641.123949827746
Epoch ended with duration 0:00:12.805928
Train perplexity: 1.3725748141000367
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657979
Validation perplexity: 1.59979407250005
Epoch 78 / 1000
Epoch Step: 5 / 135 Loss: 4.156968593597412 Tokens per Sec: 20042.254620778618
Epoch Step: 10 / 135 Loss: 7.630851745605469 Tokens per Sec: 23053.093060717834
Epoch Step: 15 / 135 Loss: 11.487502098083496 Tokens per Sec: 21708.478184603267
Epoch Step: 20 / 135 Loss: 5.570401191711426 Tokens per Sec: 20355.803391546444
Epoch Step: 25 / 135 Loss: 9.73070240020752 Tokens per Sec: 21117.76836303487
Epoch Step: 30 / 135 Loss: 4.384633541107178 Tokens per Sec: 17297.390596138725
Epoch Step: 35 / 135 Loss: 9.044390678405762 Tokens per Sec: 16889.323223610627
Epoch Step: 40 / 135 Loss: 10.320615768432617 Tokens per Sec: 19754.21188871926
Epoch Step: 45 / 135 Loss: 5.9495673179626465 Tokens per Sec: 23424.74450591993
Epoch Step: 50 / 135 Loss: 5.632109642028809 Tokens per Sec: 20585.103995565012
Epoch Step: 55 / 135 Loss: 27.455724716186523 Tokens per Sec: 20100.986045098696
Epoch Step: 60 / 135 Loss: 7.822142601013184 Tokens per Sec: 21341.216228285004
Epoch Step: 65 / 135 Loss: 9.530235290527344 Tokens per Sec: 18737.028302978844
Epoch Step: 70 / 135 Loss: 4.4822096824646 Tokens per Sec: 19442.75210138472
Epoch Step: 75 / 135 Loss: 8.4517822265625 Tokens per Sec: 22073.1425113101
Epoch Step: 80 / 135 Loss: 5.27846097946167 Tokens per Sec: 23070.61824172845
Epoch Step: 85 / 135 Loss: 4.652805805206299 Tokens per Sec: 22161.741382537115
Epoch Step: 90 / 135 Loss: 7.018953800201416 Tokens per Sec: 20240.494027139288
Epoch Step: 95 / 135 Loss: 5.625674724578857 Tokens per Sec: 20166.483202348
Epoch Step: 100 / 135 Loss: 4.98397159576416 Tokens per Sec: 20955.670738848963
Epoch Step: 105 / 135 Loss: 5.819363117218018 Tokens per Sec: 17988.48666463588
Epoch Step: 110 / 135 Loss: 8.52256965637207 Tokens per Sec: 17718.855629537673
Epoch Step: 115 / 135 Loss: 4.197548866271973 Tokens per Sec: 17042.2659854735
Epoch Step: 120 / 135 Loss: 6.567105293273926 Tokens per Sec: 17778.93745014348
Epoch Step: 125 / 135 Loss: 3.8118748664855957 Tokens per Sec: 17892.84294205944
Epoch Step: 130 / 135 Loss: 7.64558219909668 Tokens per Sec: 19322.898193001864
Epoch Step: 135 / 135 Loss: 5.453795433044434 Tokens per Sec: 19575.288935642384
Epoch ended with duration 0:00:12.757464
Train perplexity: 1.413449006619509
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653150
Validation perplexity: 1.4755581651739613
Epoch 79 / 1000
Epoch Step: 5 / 135 Loss: 9.574063301086426 Tokens per Sec: 20331.26318876975
Epoch Step: 10 / 135 Loss: 13.010915756225586 Tokens per Sec: 19915.28965034499
Epoch Step: 15 / 135 Loss: 6.368523597717285 Tokens per Sec: 22877.149862959828
Epoch Step: 20 / 135 Loss: 3.96354079246521 Tokens per Sec: 21217.13988790976
Epoch Step: 25 / 135 Loss: 2.6938834190368652 Tokens per Sec: 16714.13656775185
Epoch Step: 30 / 135 Loss: 7.485013484954834 Tokens per Sec: 21121.99573814834
Epoch Step: 35 / 135 Loss: 4.557499885559082 Tokens per Sec: 22634.660751564636
Epoch Step: 40 / 135 Loss: 12.059598922729492 Tokens per Sec: 21020.19768331341
Epoch Step: 45 / 135 Loss: 2.2805416584014893 Tokens per Sec: 19309.439261121734
Epoch Step: 50 / 135 Loss: 5.174665927886963 Tokens per Sec: 18857.69250201494
Epoch Step: 55 / 135 Loss: 8.681705474853516 Tokens per Sec: 17781.826440047156
Epoch Step: 60 / 135 Loss: 10.288494110107422 Tokens per Sec: 17826.871417682327
Epoch Step: 65 / 135 Loss: 5.819142818450928 Tokens per Sec: 23582.331423850777
Epoch Step: 70 / 135 Loss: 7.708596706390381 Tokens per Sec: 19838.305027452872
Epoch Step: 75 / 135 Loss: 21.671884536743164 Tokens per Sec: 21474.247145124144
Epoch Step: 80 / 135 Loss: 8.446078300476074 Tokens per Sec: 23306.954509789153
Epoch Step: 85 / 135 Loss: 8.081419944763184 Tokens per Sec: 20690.36006113415
Epoch Step: 90 / 135 Loss: 10.028583526611328 Tokens per Sec: 22578.583913869537
Epoch Step: 95 / 135 Loss: 7.06213903427124 Tokens per Sec: 22239.091251009864
Epoch Step: 100 / 135 Loss: 6.18435525894165 Tokens per Sec: 19578.674910655092
Epoch Step: 105 / 135 Loss: 26.93785285949707 Tokens per Sec: 17698.675407359944
Epoch Step: 110 / 135 Loss: 6.466702461242676 Tokens per Sec: 18524.122418802337
Epoch Step: 115 / 135 Loss: 8.652717590332031 Tokens per Sec: 19810.481722134227
Epoch Step: 120 / 135 Loss: 4.475735187530518 Tokens per Sec: 17053.670870584552
Epoch Step: 125 / 135 Loss: 4.63029670715332 Tokens per Sec: 17135.550730956682
Epoch Step: 130 / 135 Loss: 7.078927040100098 Tokens per Sec: 19721.503292008143
Epoch Step: 135 / 135 Loss: 5.526298999786377 Tokens per Sec: 19061.883104781373
Epoch ended with duration 0:00:12.705849
Train perplexity: 1.4293903010763869
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654346
Validation perplexity: 1.5540121237111604
Epoch 80 / 1000
Epoch Step: 5 / 135 Loss: 7.514588356018066 Tokens per Sec: 19419.801222239817
Epoch Step: 10 / 135 Loss: 8.384169578552246 Tokens per Sec: 16656.511933842452
Epoch Step: 15 / 135 Loss: 5.167470455169678 Tokens per Sec: 19388.35636430228
Epoch Step: 20 / 135 Loss: 5.27711820602417 Tokens per Sec: 22501.17161853387
Epoch Step: 25 / 135 Loss: 3.830857276916504 Tokens per Sec: 23067.51749225505
Epoch Step: 30 / 135 Loss: 8.158720016479492 Tokens per Sec: 19215.857086557768
Epoch Step: 35 / 135 Loss: 6.2906494140625 Tokens per Sec: 17013.868171891114
Epoch Step: 40 / 135 Loss: 2.9912703037261963 Tokens per Sec: 21917.201506927133
Epoch Step: 45 / 135 Loss: 5.048232078552246 Tokens per Sec: 19767.265354178486
Epoch Step: 50 / 135 Loss: 10.649736404418945 Tokens per Sec: 22019.34909820511
Epoch Step: 55 / 135 Loss: 7.2615132331848145 Tokens per Sec: 20525.6968707483
Epoch Step: 60 / 135 Loss: 5.6203999519348145 Tokens per Sec: 21095.94516774789
Epoch Step: 65 / 135 Loss: 2.4484009742736816 Tokens per Sec: 20286.205371496028
Epoch Step: 70 / 135 Loss: 42.529109954833984 Tokens per Sec: 22695.74582323953
Epoch Step: 75 / 135 Loss: 6.9932942390441895 Tokens per Sec: 20908.91949809741
Epoch Step: 80 / 135 Loss: 58.92646026611328 Tokens per Sec: 21209.57876847519
Epoch Step: 85 / 135 Loss: 12.809674263000488 Tokens per Sec: 21645.841859458716
Epoch Step: 90 / 135 Loss: 9.175737380981445 Tokens per Sec: 19107.37233163828
Epoch Step: 95 / 135 Loss: 6.3274993896484375 Tokens per Sec: 22334.898306947252
Epoch Step: 100 / 135 Loss: 11.002910614013672 Tokens per Sec: 20570.004595918883
Epoch Step: 105 / 135 Loss: 4.685070037841797 Tokens per Sec: 16304.499658249919
Epoch Step: 110 / 135 Loss: 7.102712154388428 Tokens per Sec: 17540.71417031638
Epoch Step: 115 / 135 Loss: 5.810559272766113 Tokens per Sec: 18947.9541410893
Epoch Step: 120 / 135 Loss: 4.475694179534912 Tokens per Sec: 18748.45038309447
Epoch Step: 125 / 135 Loss: 6.317365646362305 Tokens per Sec: 19325.439949979274
Epoch Step: 130 / 135 Loss: 12.133028030395508 Tokens per Sec: 16580.377625884452
Epoch Step: 135 / 135 Loss: 6.3535847663879395 Tokens per Sec: 19369.60717679342
Epoch ended with duration 0:00:12.801137
Train perplexity: 1.441509895216755
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653131
Validation perplexity: 1.4645186823621175
Model saved checkpoint!
Epoch 81 / 1000
Epoch Step: 5 / 135 Loss: 4.139096736907959 Tokens per Sec: 19213.38609064183
Epoch Step: 10 / 135 Loss: 4.079638481140137 Tokens per Sec: 18849.955474151844
Epoch Step: 15 / 135 Loss: 47.13778305053711 Tokens per Sec: 23034.34195292717
Epoch Step: 20 / 135 Loss: 34.490447998046875 Tokens per Sec: 18697.40981261744
Epoch Step: 25 / 135 Loss: 9.607050895690918 Tokens per Sec: 20074.018876458704
Epoch Step: 30 / 135 Loss: 21.495004653930664 Tokens per Sec: 17561.755660887997
Epoch Step: 35 / 135 Loss: 8.660123825073242 Tokens per Sec: 22697.882843480347
Epoch Step: 40 / 135 Loss: 6.747677326202393 Tokens per Sec: 18093.079941935575
Epoch Step: 45 / 135 Loss: 4.849200248718262 Tokens per Sec: 20367.26121054554
Epoch Step: 50 / 135 Loss: 10.810868263244629 Tokens per Sec: 21750.830145135693
Epoch Step: 55 / 135 Loss: 2.9747884273529053 Tokens per Sec: 20266.08265780731
Epoch Step: 60 / 135 Loss: 3.602245807647705 Tokens per Sec: 19314.225631222107
Epoch Step: 65 / 135 Loss: 7.83185338973999 Tokens per Sec: 20928.43892200431
Epoch Step: 70 / 135 Loss: 13.860479354858398 Tokens per Sec: 23205.739310556495
Epoch Step: 75 / 135 Loss: 5.65158748626709 Tokens per Sec: 21966.797612109567
Epoch Step: 80 / 135 Loss: 8.515586853027344 Tokens per Sec: 17637.26955783013
Epoch Step: 85 / 135 Loss: 10.033095359802246 Tokens per Sec: 20671.10084182684
Epoch Step: 90 / 135 Loss: 7.016728401184082 Tokens per Sec: 21563.840467518694
Epoch Step: 95 / 135 Loss: 19.619667053222656 Tokens per Sec: 18814.16703790061
Epoch Step: 100 / 135 Loss: 17.03878402709961 Tokens per Sec: 21157.807164706133
Epoch Step: 105 / 135 Loss: 9.09615707397461 Tokens per Sec: 18294.168846049826
Epoch Step: 110 / 135 Loss: 9.605775833129883 Tokens per Sec: 18337.240105218483
Epoch Step: 115 / 135 Loss: 6.3585309982299805 Tokens per Sec: 17695.041163350434
Epoch Step: 120 / 135 Loss: 3.923267364501953 Tokens per Sec: 17365.102392899003
Epoch Step: 125 / 135 Loss: 6.8433403968811035 Tokens per Sec: 19904.90710239879
Epoch Step: 130 / 135 Loss: 6.422797203063965 Tokens per Sec: 18711.27911634039
Epoch Step: 135 / 135 Loss: 40.97024917602539 Tokens per Sec: 15691.239491856533
Epoch ended with duration 0:00:12.933768
Train perplexity: 1.4475063412663853
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.664037
Validation perplexity: 1.583774618304566
Epoch 82 / 1000
Epoch Step: 5 / 135 Loss: 6.8677849769592285 Tokens per Sec: 21831.405628741522
Epoch Step: 10 / 135 Loss: 6.007023334503174 Tokens per Sec: 21038.12453662852
Epoch Step: 15 / 135 Loss: 9.647528648376465 Tokens per Sec: 19053.5739138618
Epoch Step: 20 / 135 Loss: 5.062060832977295 Tokens per Sec: 20090.933641079188
Epoch Step: 25 / 135 Loss: 9.572717666625977 Tokens per Sec: 19025.012452476636
Epoch Step: 30 / 135 Loss: 11.966055870056152 Tokens per Sec: 20012.14310820615
Epoch Step: 35 / 135 Loss: 4.888113975524902 Tokens per Sec: 21675.60331098842
Epoch Step: 40 / 135 Loss: 6.283517360687256 Tokens per Sec: 21047.557104774245
Epoch Step: 45 / 135 Loss: 9.835230827331543 Tokens per Sec: 17513.83149511963
Epoch Step: 50 / 135 Loss: 56.651092529296875 Tokens per Sec: 21517.00662921917
Epoch Step: 55 / 135 Loss: 13.6668062210083 Tokens per Sec: 25161.777270220206
Epoch Step: 60 / 135 Loss: 3.1882858276367188 Tokens per Sec: 20547.33287644226
Epoch Step: 65 / 135 Loss: 6.837700843811035 Tokens per Sec: 19697.74877701399
Epoch Step: 70 / 135 Loss: 3.2643306255340576 Tokens per Sec: 16378.94426358681
Epoch Step: 75 / 135 Loss: 48.501251220703125 Tokens per Sec: 22730.181679775797
Epoch Step: 80 / 135 Loss: 9.1406831741333 Tokens per Sec: 21469.1498111183
Epoch Step: 85 / 135 Loss: 4.870278835296631 Tokens per Sec: 17467.284559739863
Epoch Step: 90 / 135 Loss: 4.909172534942627 Tokens per Sec: 20114.303875368383
Epoch Step: 95 / 135 Loss: 8.02255916595459 Tokens per Sec: 23342.58926923155
Epoch Step: 100 / 135 Loss: 6.067258834838867 Tokens per Sec: 18917.782494188566
Epoch Step: 105 / 135 Loss: 5.953991889953613 Tokens per Sec: 18548.368490274042
Epoch Step: 110 / 135 Loss: 8.092320442199707 Tokens per Sec: 17990.94532850025
Epoch Step: 115 / 135 Loss: 5.986525058746338 Tokens per Sec: 17797.553394211012
Epoch Step: 120 / 135 Loss: 8.032378196716309 Tokens per Sec: 19029.68934387233
Epoch Step: 125 / 135 Loss: 7.150617599487305 Tokens per Sec: 17392.322338651284
Epoch Step: 130 / 135 Loss: 7.1511125564575195 Tokens per Sec: 18168.794826309833
Epoch Step: 135 / 135 Loss: 4.609781265258789 Tokens per Sec: 20230.706999518912
Epoch ended with duration 0:00:12.781064
Train perplexity: 1.3995591779612955
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650175
Validation perplexity: 1.3543120578042163
Model saved best_on_validation!
Epoch 83 / 1000
Epoch Step: 5 / 135 Loss: 10.710736274719238 Tokens per Sec: 20241.98987769933
Epoch Step: 10 / 135 Loss: 8.26959228515625 Tokens per Sec: 20731.14674015056
Epoch Step: 15 / 135 Loss: 6.207699775695801 Tokens per Sec: 18466.559740297384
Epoch Step: 20 / 135 Loss: 6.764225482940674 Tokens per Sec: 22363.32180606402
Epoch Step: 25 / 135 Loss: 4.48677396774292 Tokens per Sec: 20352.25695319652
Epoch Step: 30 / 135 Loss: 3.697296619415283 Tokens per Sec: 21917.916556584158
Epoch Step: 35 / 135 Loss: 8.952901840209961 Tokens per Sec: 20515.797558457856
Epoch Step: 40 / 135 Loss: 8.263544082641602 Tokens per Sec: 20842.231791674814
Epoch Step: 45 / 135 Loss: 8.337244987487793 Tokens per Sec: 22130.078924744557
Epoch Step: 50 / 135 Loss: 8.728410720825195 Tokens per Sec: 22758.9052698348
Epoch Step: 55 / 135 Loss: 8.228814125061035 Tokens per Sec: 17409.72856333879
Epoch Step: 60 / 135 Loss: 6.366364002227783 Tokens per Sec: 19453.0906741971
Epoch Step: 65 / 135 Loss: 7.568007469177246 Tokens per Sec: 21140.328806406895
Epoch Step: 70 / 135 Loss: 3.244753360748291 Tokens per Sec: 19040.37936520526
Epoch Step: 75 / 135 Loss: 10.188033103942871 Tokens per Sec: 20855.551705813123
Epoch Step: 80 / 135 Loss: 6.046150207519531 Tokens per Sec: 19106.50252352559
Epoch Step: 85 / 135 Loss: 5.1786932945251465 Tokens per Sec: 18661.288230697744
Epoch Step: 90 / 135 Loss: 8.582550048828125 Tokens per Sec: 19819.88791396346
Epoch Step: 95 / 135 Loss: 9.328063011169434 Tokens per Sec: 19666.21422861113
Epoch Step: 100 / 135 Loss: 60.673858642578125 Tokens per Sec: 17617.44434567986
Epoch Step: 105 / 135 Loss: 26.822025299072266 Tokens per Sec: 15792.275268135169
Epoch Step: 110 / 135 Loss: 8.594895362854004 Tokens per Sec: 16876.029789070093
Epoch Step: 115 / 135 Loss: 3.1730942726135254 Tokens per Sec: 18667.83117103926
Epoch Step: 120 / 135 Loss: 8.08523941040039 Tokens per Sec: 18141.91080894548
Epoch Step: 125 / 135 Loss: 7.63461446762085 Tokens per Sec: 18268.662675242173
Epoch Step: 130 / 135 Loss: 8.591490745544434 Tokens per Sec: 20026.9480579863
Epoch Step: 135 / 135 Loss: 7.059861183166504 Tokens per Sec: 19528.29554775629
Epoch ended with duration 0:00:12.987827
Train perplexity: 1.375628146418339
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654948
Validation perplexity: 1.512201695684824
Epoch 84 / 1000
Epoch Step: 5 / 135 Loss: 10.238215446472168 Tokens per Sec: 18540.683848350083
Epoch Step: 10 / 135 Loss: 4.812952995300293 Tokens per Sec: 17375.149396108598
Epoch Step: 15 / 135 Loss: 5.605364799499512 Tokens per Sec: 19296.21781073033
Epoch Step: 20 / 135 Loss: 3.2990803718566895 Tokens per Sec: 21815.13625101312
Epoch Step: 25 / 135 Loss: 4.463450908660889 Tokens per Sec: 20205.03611820155
Epoch Step: 30 / 135 Loss: 7.019404411315918 Tokens per Sec: 21726.946203209154
Epoch Step: 35 / 135 Loss: 4.263363361358643 Tokens per Sec: 22104.67203247333
Epoch Step: 40 / 135 Loss: 6.28099250793457 Tokens per Sec: 18261.051436405633
Epoch Step: 45 / 135 Loss: 4.510293483734131 Tokens per Sec: 22364.26360298039
Epoch Step: 50 / 135 Loss: 5.392026901245117 Tokens per Sec: 23127.382849848127
Epoch Step: 55 / 135 Loss: 8.640427589416504 Tokens per Sec: 20072.655640652272
Epoch Step: 60 / 135 Loss: 4.8811516761779785 Tokens per Sec: 21632.776716129538
Epoch Step: 65 / 135 Loss: 8.217057228088379 Tokens per Sec: 23140.195729674266
Epoch Step: 70 / 135 Loss: 5.637780666351318 Tokens per Sec: 19540.417318683172
Epoch Step: 75 / 135 Loss: 4.876495361328125 Tokens per Sec: 21969.822032375167
Epoch Step: 80 / 135 Loss: 6.973910331726074 Tokens per Sec: 20708.004437128602
Epoch Step: 85 / 135 Loss: 10.516226768493652 Tokens per Sec: 19841.703971220497
Epoch Step: 90 / 135 Loss: 3.8755834102630615 Tokens per Sec: 19044.748676657215
Epoch Step: 95 / 135 Loss: 32.47521209716797 Tokens per Sec: 19141.221524573797
Epoch Step: 100 / 135 Loss: 2.9945194721221924 Tokens per Sec: 19944.02168447852
Epoch Step: 105 / 135 Loss: 3.610795497894287 Tokens per Sec: 16355.627985963549
Epoch Step: 110 / 135 Loss: 8.544685363769531 Tokens per Sec: 19261.423847704977
Epoch Step: 115 / 135 Loss: 41.90143966674805 Tokens per Sec: 19213.50125438618
Epoch Step: 120 / 135 Loss: 7.360195159912109 Tokens per Sec: 18535.270410504865
Epoch Step: 125 / 135 Loss: 6.378513336181641 Tokens per Sec: 18726.216138077943
Epoch Step: 130 / 135 Loss: 7.945245265960693 Tokens per Sec: 17111.214473021246
Epoch Step: 135 / 135 Loss: 4.614493370056152 Tokens per Sec: 18156.804041409134
Epoch ended with duration 0:00:12.811341
Train perplexity: 1.3931715722793026
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650974
Validation perplexity: 1.3818726226046145
Epoch 85 / 1000
Epoch Step: 5 / 135 Loss: 4.3521599769592285 Tokens per Sec: 21110.18876288279
Epoch Step: 10 / 135 Loss: 3.229095935821533 Tokens per Sec: 19889.799208357053
Epoch Step: 15 / 135 Loss: 12.645605087280273 Tokens per Sec: 18938.11792359146
Epoch Step: 20 / 135 Loss: 7.269505500793457 Tokens per Sec: 19888.932656018012
Epoch Step: 25 / 135 Loss: 6.8706183433532715 Tokens per Sec: 21670.066496018644
Epoch Step: 30 / 135 Loss: 4.829092025756836 Tokens per Sec: 23131.600482090227
Epoch Step: 35 / 135 Loss: 2.696597099304199 Tokens per Sec: 22541.824493731918
Epoch Step: 40 / 135 Loss: 3.092895269393921 Tokens per Sec: 23373.099618238717
Epoch Step: 45 / 135 Loss: 2.5972108840942383 Tokens per Sec: 21450.130251487546
Epoch Step: 50 / 135 Loss: 2.597468852996826 Tokens per Sec: 22746.070805576815
Epoch Step: 55 / 135 Loss: 4.2487592697143555 Tokens per Sec: 17657.29535712222
Epoch Step: 60 / 135 Loss: 9.976594924926758 Tokens per Sec: 19030.096957113823
Epoch Step: 65 / 135 Loss: 8.924606323242188 Tokens per Sec: 20467.795748059707
Epoch Step: 70 / 135 Loss: 9.113337516784668 Tokens per Sec: 18340.081528313174
Epoch Step: 75 / 135 Loss: 38.62150192260742 Tokens per Sec: 19379.61035310351
Epoch Step: 80 / 135 Loss: 4.609434604644775 Tokens per Sec: 22133.65928642712
Epoch Step: 85 / 135 Loss: 20.7071590423584 Tokens per Sec: 18892.716857340303
Epoch Step: 90 / 135 Loss: 4.604086875915527 Tokens per Sec: 18498.59909407514
Epoch Step: 95 / 135 Loss: 7.969277381896973 Tokens per Sec: 19591.930914542943
Epoch Step: 100 / 135 Loss: 10.425104141235352 Tokens per Sec: 22345.905682316406
Epoch Step: 105 / 135 Loss: 3.3494415283203125 Tokens per Sec: 18552.50759989759
Epoch Step: 110 / 135 Loss: 4.858588218688965 Tokens per Sec: 17064.34516891394
Epoch Step: 115 / 135 Loss: 5.751136302947998 Tokens per Sec: 18804.837950004134
Epoch Step: 120 / 135 Loss: 4.494170188903809 Tokens per Sec: 19039.366446621058
Epoch Step: 125 / 135 Loss: 3.774566173553467 Tokens per Sec: 17030.768662223996
Epoch Step: 130 / 135 Loss: 7.633609771728516 Tokens per Sec: 18306.645479726478
Epoch Step: 135 / 135 Loss: 6.5951008796691895 Tokens per Sec: 17336.713080564652
Epoch ended with duration 0:00:12.805985
Train perplexity: 1.3075934793230466
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654313
Validation perplexity: 1.5387707747406996
Model saved checkpoint!
Epoch 86 / 1000
Epoch Step: 5 / 135 Loss: 7.50514030456543 Tokens per Sec: 20730.655500388824
Epoch Step: 10 / 135 Loss: 6.93992805480957 Tokens per Sec: 24405.97897500442
Epoch Step: 15 / 135 Loss: 12.192794799804688 Tokens per Sec: 22692.71491279437
Epoch Step: 20 / 135 Loss: 3.6097230911254883 Tokens per Sec: 17013.394136542825
Epoch Step: 25 / 135 Loss: 4.813404560089111 Tokens per Sec: 21993.48435880059
Epoch Step: 30 / 135 Loss: 3.6643307209014893 Tokens per Sec: 21265.67727306377
Epoch Step: 35 / 135 Loss: 5.9276275634765625 Tokens per Sec: 17991.72521763365
Epoch Step: 40 / 135 Loss: 5.279542922973633 Tokens per Sec: 20370.350084689453
Epoch Step: 45 / 135 Loss: 10.584081649780273 Tokens per Sec: 23165.34235066385
Epoch Step: 50 / 135 Loss: 7.866815090179443 Tokens per Sec: 21932.509742869373
Epoch Step: 55 / 135 Loss: 7.161108016967773 Tokens per Sec: 23745.863191571203
Epoch Step: 60 / 135 Loss: 15.498241424560547 Tokens per Sec: 20803.868772345853
Epoch Step: 65 / 135 Loss: 4.324885368347168 Tokens per Sec: 21496.459787702017
Epoch Step: 70 / 135 Loss: 11.416829109191895 Tokens per Sec: 20578.578569012683
Epoch Step: 75 / 135 Loss: 5.079800605773926 Tokens per Sec: 17955.662763058997
Epoch Step: 80 / 135 Loss: 8.50842571258545 Tokens per Sec: 21254.14741117125
Epoch Step: 85 / 135 Loss: 7.337629795074463 Tokens per Sec: 17466.82407678396
Epoch Step: 90 / 135 Loss: 3.9968087673187256 Tokens per Sec: 18950.259823006578
Epoch Step: 95 / 135 Loss: 3.54764986038208 Tokens per Sec: 15666.790383890171
Epoch Step: 100 / 135 Loss: 7.089838027954102 Tokens per Sec: 19166.172346814932
Epoch Step: 105 / 135 Loss: 5.787794589996338 Tokens per Sec: 19282.69898599513
Epoch Step: 110 / 135 Loss: 6.191075801849365 Tokens per Sec: 18324.49553987509
Epoch Step: 115 / 135 Loss: 4.516139030456543 Tokens per Sec: 18469.34124983356
Epoch Step: 120 / 135 Loss: 9.734049797058105 Tokens per Sec: 18967.31398343698
Epoch Step: 125 / 135 Loss: 6.982962131500244 Tokens per Sec: 17175.206359530104
Epoch Step: 130 / 135 Loss: 6.542913436889648 Tokens per Sec: 19387.862046893377
Epoch Step: 135 / 135 Loss: 4.501541614532471 Tokens per Sec: 16814.647916940467
Epoch ended with duration 0:00:12.816139
Train perplexity: 1.3637902129570882
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.690990
Validation perplexity: 1.6342565053799325
Epoch 87 / 1000
Epoch Step: 5 / 135 Loss: 5.298691272735596 Tokens per Sec: 16640.265635800075
Epoch Step: 10 / 135 Loss: 8.340716361999512 Tokens per Sec: 17188.657904502186
Epoch Step: 15 / 135 Loss: 3.091160297393799 Tokens per Sec: 19598.30875567473
Epoch Step: 20 / 135 Loss: 3.719383955001831 Tokens per Sec: 19962.12321026479
Epoch Step: 25 / 135 Loss: 4.827269554138184 Tokens per Sec: 22644.08181635014
Epoch Step: 30 / 135 Loss: 6.566946029663086 Tokens per Sec: 22553.662869883876
Epoch Step: 35 / 135 Loss: 7.607127666473389 Tokens per Sec: 23625.514843287994
Epoch Step: 40 / 135 Loss: 3.0308468341827393 Tokens per Sec: 22832.990826428508
Epoch Step: 45 / 135 Loss: 10.85578441619873 Tokens per Sec: 20959.401677686357
Epoch Step: 50 / 135 Loss: 4.736011505126953 Tokens per Sec: 19277.769237619978
Epoch Step: 55 / 135 Loss: 3.9155490398406982 Tokens per Sec: 24615.224336725754
Epoch Step: 60 / 135 Loss: 29.57158088684082 Tokens per Sec: 19972.49048399736
Epoch Step: 65 / 135 Loss: 10.801106452941895 Tokens per Sec: 18276.35840175373
Epoch Step: 70 / 135 Loss: 6.315686225891113 Tokens per Sec: 19518.77754171125
Epoch Step: 75 / 135 Loss: 3.867108106613159 Tokens per Sec: 17695.97399712602
Epoch Step: 80 / 135 Loss: 4.5118088722229 Tokens per Sec: 18581.207740842965
Epoch Step: 85 / 135 Loss: 4.065970420837402 Tokens per Sec: 21135.121865181954
Epoch Step: 90 / 135 Loss: 4.763035297393799 Tokens per Sec: 19619.302552780297
Epoch Step: 95 / 135 Loss: 4.5347065925598145 Tokens per Sec: 20618.49666007222
Epoch Step: 100 / 135 Loss: 9.155791282653809 Tokens per Sec: 20781.25773962762
Epoch Step: 105 / 135 Loss: 6.218907833099365 Tokens per Sec: 18481.654074677543
Epoch Step: 110 / 135 Loss: 5.331666946411133 Tokens per Sec: 20600.15536533733
Epoch Step: 115 / 135 Loss: 5.127464294433594 Tokens per Sec: 19502.21363611281
Epoch Step: 120 / 135 Loss: 5.087519645690918 Tokens per Sec: 17408.47825846032
Epoch Step: 125 / 135 Loss: 6.253097057342529 Tokens per Sec: 17880.93059238975
Epoch Step: 130 / 135 Loss: 7.840389251708984 Tokens per Sec: 18019.00207802971
Epoch Step: 135 / 135 Loss: 3.9296844005584717 Tokens per Sec: 18407.69701877771
Epoch ended with duration 0:00:12.806232
Train perplexity: 1.3508961977675773
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656407
Validation perplexity: 1.4884079594430708
Epoch 88 / 1000
Epoch Step: 5 / 135 Loss: 17.09092140197754 Tokens per Sec: 18108.779583813448
Epoch Step: 10 / 135 Loss: 9.975616455078125 Tokens per Sec: 20128.015657788634
Epoch Step: 15 / 135 Loss: 6.987661361694336 Tokens per Sec: 18352.940675905076
Epoch Step: 20 / 135 Loss: 3.716334104537964 Tokens per Sec: 18698.301431164487
Epoch Step: 25 / 135 Loss: 3.5740182399749756 Tokens per Sec: 23601.916030012933
Epoch Step: 30 / 135 Loss: 7.136645793914795 Tokens per Sec: 20497.5913338702
Epoch Step: 35 / 135 Loss: 4.147184371948242 Tokens per Sec: 22372.67278776694
Epoch Step: 40 / 135 Loss: 2.7862496376037598 Tokens per Sec: 22183.603168481088
Epoch Step: 45 / 135 Loss: 3.1212384700775146 Tokens per Sec: 23602.054528340712
Epoch Step: 50 / 135 Loss: 9.62509536743164 Tokens per Sec: 19724.09781711709
Epoch Step: 55 / 135 Loss: 3.687645435333252 Tokens per Sec: 23541.855391375422
Epoch Step: 60 / 135 Loss: 6.513262748718262 Tokens per Sec: 20995.725712599637
Epoch Step: 65 / 135 Loss: 7.595094203948975 Tokens per Sec: 21323.14653492185
Epoch Step: 70 / 135 Loss: 8.413031578063965 Tokens per Sec: 21207.488818951864
Epoch Step: 75 / 135 Loss: 8.264412879943848 Tokens per Sec: 21724.195208339876
Epoch Step: 80 / 135 Loss: 5.735823154449463 Tokens per Sec: 22812.25034386932
Epoch Step: 85 / 135 Loss: 5.234850883483887 Tokens per Sec: 19886.156580958854
Epoch Step: 90 / 135 Loss: 6.990628719329834 Tokens per Sec: 16933.988365628913
Epoch Step: 95 / 135 Loss: 7.674795150756836 Tokens per Sec: 19634.360335991038
Epoch Step: 100 / 135 Loss: 4.972083568572998 Tokens per Sec: 18720.372575413952
Epoch Step: 105 / 135 Loss: 28.090255737304688 Tokens per Sec: 17214.197684212344
Epoch Step: 110 / 135 Loss: 8.041755676269531 Tokens per Sec: 19232.81695289514
Epoch Step: 115 / 135 Loss: 70.40210723876953 Tokens per Sec: 16637.722459389446
Epoch Step: 120 / 135 Loss: 11.14966869354248 Tokens per Sec: 19401.018662560684
Epoch Step: 125 / 135 Loss: 37.565773010253906 Tokens per Sec: 16482.3978359807
Epoch Step: 130 / 135 Loss: 25.036699295043945 Tokens per Sec: 16888.02521650333
Epoch Step: 135 / 135 Loss: 5.215444087982178 Tokens per Sec: 17926.005301279598
Epoch ended with duration 0:00:12.820074
Train perplexity: 1.3853364174882739
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653651
Validation perplexity: 1.4380030464058577
Epoch 89 / 1000
Epoch Step: 5 / 135 Loss: 6.605441570281982 Tokens per Sec: 20727.96531133806
Epoch Step: 10 / 135 Loss: 4.688135147094727 Tokens per Sec: 20257.194660272613
Epoch Step: 15 / 135 Loss: 9.249361991882324 Tokens per Sec: 20431.302130623786
Epoch Step: 20 / 135 Loss: 8.112640380859375 Tokens per Sec: 19431.058996463707
Epoch Step: 25 / 135 Loss: 5.943563461303711 Tokens per Sec: 22509.1933166185
Epoch Step: 30 / 135 Loss: 5.443774700164795 Tokens per Sec: 20471.01677779919
Epoch Step: 35 / 135 Loss: 6.526228427886963 Tokens per Sec: 20107.13658311353
Epoch Step: 40 / 135 Loss: 9.242555618286133 Tokens per Sec: 19051.269861031633
Epoch Step: 45 / 135 Loss: 4.81919002532959 Tokens per Sec: 22320.76452720918
Epoch Step: 50 / 135 Loss: 3.210897207260132 Tokens per Sec: 20928.571866104434
Epoch Step: 55 / 135 Loss: 3.3949825763702393 Tokens per Sec: 23663.008614155013
Epoch Step: 60 / 135 Loss: 29.338476181030273 Tokens per Sec: 21540.743781811292
Epoch Step: 65 / 135 Loss: 9.536938667297363 Tokens per Sec: 17771.66558431706
Epoch Step: 70 / 135 Loss: 7.264437198638916 Tokens per Sec: 21334.96272021122
Epoch Step: 75 / 135 Loss: 8.766744613647461 Tokens per Sec: 16577.204036288047
Epoch Step: 80 / 135 Loss: 14.61274528503418 Tokens per Sec: 21282.91188066423
Epoch Step: 85 / 135 Loss: 11.775867462158203 Tokens per Sec: 19109.2175662611
Epoch Step: 90 / 135 Loss: 7.042929172515869 Tokens per Sec: 19999.706773817732
Epoch Step: 95 / 135 Loss: 10.985052108764648 Tokens per Sec: 22828.216324316658
Epoch Step: 100 / 135 Loss: 7.182757377624512 Tokens per Sec: 19558.588185581768
Epoch Step: 105 / 135 Loss: 6.287732124328613 Tokens per Sec: 14736.503807097934
Epoch Step: 110 / 135 Loss: 4.291191101074219 Tokens per Sec: 18601.043351962304
Epoch Step: 115 / 135 Loss: 5.425829887390137 Tokens per Sec: 18380.15187509631
Epoch Step: 120 / 135 Loss: 7.433813095092773 Tokens per Sec: 20646.408394387043
Epoch Step: 125 / 135 Loss: 33.606475830078125 Tokens per Sec: 17047.150156749205
Epoch Step: 130 / 135 Loss: 6.529809951782227 Tokens per Sec: 19708.18703805435
Epoch Step: 135 / 135 Loss: 4.8874735832214355 Tokens per Sec: 19901.201301048066
Epoch ended with duration 0:00:12.794158
Train perplexity: 1.35706355884371
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651484
Validation perplexity: 1.3974691180696173
Epoch 90 / 1000
Epoch Step: 5 / 135 Loss: 7.547311782836914 Tokens per Sec: 22095.87518761648
Epoch Step: 10 / 135 Loss: 4.03968620300293 Tokens per Sec: 17839.680745069618
Epoch Step: 15 / 135 Loss: 4.890856742858887 Tokens per Sec: 23364.10625608607
Epoch Step: 20 / 135 Loss: 4.782250881195068 Tokens per Sec: 19040.08361973042
Epoch Step: 25 / 135 Loss: 42.02461624145508 Tokens per Sec: 23137.71214095969
Epoch Step: 30 / 135 Loss: 4.13370943069458 Tokens per Sec: 24161.79682609289
Epoch Step: 35 / 135 Loss: 9.069706916809082 Tokens per Sec: 18348.516666970652
Epoch Step: 40 / 135 Loss: 1.445062279701233 Tokens per Sec: 22072.615402120653
Epoch Step: 45 / 135 Loss: 4.1243510246276855 Tokens per Sec: 22322.231507972567
Epoch Step: 50 / 135 Loss: 6.914353847503662 Tokens per Sec: 21855.165630483127
Epoch Step: 55 / 135 Loss: 7.867313861846924 Tokens per Sec: 22021.203096905254
Epoch Step: 60 / 135 Loss: 7.709129333496094 Tokens per Sec: 19343.765234674127
Epoch Step: 65 / 135 Loss: 7.051304817199707 Tokens per Sec: 23123.900726869102
Epoch Step: 70 / 135 Loss: 61.30991744995117 Tokens per Sec: 18646.696044193282
Epoch Step: 75 / 135 Loss: 8.5525541305542 Tokens per Sec: 19972.264211796133
Epoch Step: 80 / 135 Loss: 53.22650909423828 Tokens per Sec: 21241.59662286785
Epoch Step: 85 / 135 Loss: 6.857546806335449 Tokens per Sec: 21350.55385276842
Epoch Step: 90 / 135 Loss: 8.03825569152832 Tokens per Sec: 16463.530787636682
Epoch Step: 95 / 135 Loss: 67.76380920410156 Tokens per Sec: 18746.53734169928
Epoch Step: 100 / 135 Loss: 4.033849239349365 Tokens per Sec: 18196.236161288194
Epoch Step: 105 / 135 Loss: 23.06549644470215 Tokens per Sec: 18470.39419539949
Epoch Step: 110 / 135 Loss: 11.871220588684082 Tokens per Sec: 16508.745508025837
Epoch Step: 115 / 135 Loss: 7.972153186798096 Tokens per Sec: 19552.7440793323
Epoch Step: 120 / 135 Loss: 58.23719024658203 Tokens per Sec: 18702.05346204755
Epoch Step: 125 / 135 Loss: 7.415665626525879 Tokens per Sec: 18152.67478095474
Epoch Step: 130 / 135 Loss: 4.34164571762085 Tokens per Sec: 16685.980287320253
Epoch Step: 135 / 135 Loss: 3.887958526611328 Tokens per Sec: 19060.302477571942
Epoch ended with duration 0:00:12.769770
Train perplexity: 1.480354479040105
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653152
Validation perplexity: 1.5296102685818236
Model saved checkpoint!
Epoch 91 / 1000
Epoch Step: 5 / 135 Loss: 5.423603057861328 Tokens per Sec: 22049.579345847003
Epoch Step: 10 / 135 Loss: 5.345647811889648 Tokens per Sec: 16097.705487689294
Epoch Step: 15 / 135 Loss: 7.944455146789551 Tokens per Sec: 22494.900032297595
Epoch Step: 20 / 135 Loss: 3.441685199737549 Tokens per Sec: 19999.934702328686
Epoch Step: 25 / 135 Loss: 7.021614074707031 Tokens per Sec: 17516.043332210513
Epoch Step: 30 / 135 Loss: 5.295444965362549 Tokens per Sec: 20268.183346396803
Epoch Step: 35 / 135 Loss: 3.507396936416626 Tokens per Sec: 20372.041846415705
Epoch Step: 40 / 135 Loss: 8.957836151123047 Tokens per Sec: 16351.262028684456
Epoch Step: 45 / 135 Loss: 8.530498504638672 Tokens per Sec: 20560.59148957675
Epoch Step: 50 / 135 Loss: 3.7358031272888184 Tokens per Sec: 23602.164952054554
Epoch Step: 55 / 135 Loss: 9.342535972595215 Tokens per Sec: 21458.885184436367
Epoch Step: 60 / 135 Loss: 4.817139148712158 Tokens per Sec: 22572.95235247428
Epoch Step: 65 / 135 Loss: 7.552309989929199 Tokens per Sec: 18320.629731061228
Epoch Step: 70 / 135 Loss: 2.8637325763702393 Tokens per Sec: 21778.90342067785
Epoch Step: 75 / 135 Loss: 6.830391883850098 Tokens per Sec: 19898.19425288457
Epoch Step: 80 / 135 Loss: 6.783317565917969 Tokens per Sec: 21539.46767227968
Epoch Step: 85 / 135 Loss: 7.238000392913818 Tokens per Sec: 19993.382705676733
Epoch Step: 90 / 135 Loss: 2.8508942127227783 Tokens per Sec: 22945.24738334091
Epoch Step: 95 / 135 Loss: 4.699899673461914 Tokens per Sec: 22403.9764148793
Epoch Step: 100 / 135 Loss: 7.586662292480469 Tokens per Sec: 18562.806455301852
Epoch Step: 105 / 135 Loss: 3.3896424770355225 Tokens per Sec: 16614.907231627305
Epoch Step: 110 / 135 Loss: 5.653085708618164 Tokens per Sec: 16583.12954811015
Epoch Step: 115 / 135 Loss: 6.655588626861572 Tokens per Sec: 20175.166707789875
Epoch Step: 120 / 135 Loss: 7.732739448547363 Tokens per Sec: 19839.863571034282
Epoch Step: 125 / 135 Loss: 5.157024383544922 Tokens per Sec: 17120.48842102085
Epoch Step: 130 / 135 Loss: 6.354133605957031 Tokens per Sec: 18594.242697379097
Epoch Step: 135 / 135 Loss: 41.65666961669922 Tokens per Sec: 18655.30845996522
Epoch ended with duration 0:00:12.822180
Train perplexity: 1.2906882474573584
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656192
Validation perplexity: 1.438246453390536
Epoch 92 / 1000
Epoch Step: 5 / 135 Loss: 2.7685229778289795 Tokens per Sec: 17635.450347678245
Epoch Step: 10 / 135 Loss: 6.691051959991455 Tokens per Sec: 19583.412627761685
Epoch Step: 15 / 135 Loss: 4.636559963226318 Tokens per Sec: 22515.45497342803
Epoch Step: 20 / 135 Loss: 4.10429573059082 Tokens per Sec: 19731.39898238656
Epoch Step: 25 / 135 Loss: 6.412271976470947 Tokens per Sec: 23264.974400641935
Epoch Step: 30 / 135 Loss: 14.283905029296875 Tokens per Sec: 19508.74984420665
Epoch Step: 35 / 135 Loss: 12.92881965637207 Tokens per Sec: 22280.965852639878
Epoch Step: 40 / 135 Loss: 7.535861968994141 Tokens per Sec: 20773.56450366718
Epoch Step: 45 / 135 Loss: 7.516308307647705 Tokens per Sec: 22065.012620755413
Epoch Step: 50 / 135 Loss: 4.73988676071167 Tokens per Sec: 21469.280798898417
Epoch Step: 55 / 135 Loss: 6.117650985717773 Tokens per Sec: 23243.514035875676
Epoch Step: 60 / 135 Loss: 2.3420040607452393 Tokens per Sec: 22084.754819747443
Epoch Step: 65 / 135 Loss: 3.8490495681762695 Tokens per Sec: 20175.363655847643
Epoch Step: 70 / 135 Loss: 2.388709783554077 Tokens per Sec: 20200.47706590937
Epoch Step: 75 / 135 Loss: 40.305091857910156 Tokens per Sec: 19774.420388457
Epoch Step: 80 / 135 Loss: 4.305781841278076 Tokens per Sec: 18692.731695699695
Epoch Step: 85 / 135 Loss: 27.08404541015625 Tokens per Sec: 18569.500217493962
Epoch Step: 90 / 135 Loss: 6.43559455871582 Tokens per Sec: 19251.754640868814
Epoch Step: 95 / 135 Loss: 4.190411567687988 Tokens per Sec: 18639.46165158529
Epoch Step: 100 / 135 Loss: 11.740628242492676 Tokens per Sec: 22164.420884734485
Epoch Step: 105 / 135 Loss: 2.4784293174743652 Tokens per Sec: 18333.202575290634
Epoch Step: 110 / 135 Loss: 5.113129138946533 Tokens per Sec: 18318.047456383687
Epoch Step: 115 / 135 Loss: 7.4189558029174805 Tokens per Sec: 20181.71205883881
Epoch Step: 120 / 135 Loss: 6.855215072631836 Tokens per Sec: 16925.27196056541
Epoch Step: 125 / 135 Loss: 6.981842994689941 Tokens per Sec: 17285.9635883183
Epoch Step: 130 / 135 Loss: 6.28410005569458 Tokens per Sec: 19168.188152106788
Epoch Step: 135 / 135 Loss: 6.854575157165527 Tokens per Sec: 18026.140267990075
Epoch ended with duration 0:00:12.775301
Train perplexity: 1.286180141709943
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652945
Validation perplexity: 1.4843880070766697
Epoch 93 / 1000
Epoch Step: 5 / 135 Loss: 3.4419748783111572 Tokens per Sec: 21631.064443593703
Epoch Step: 10 / 135 Loss: 3.2636280059814453 Tokens per Sec: 19140.829356878952
Epoch Step: 15 / 135 Loss: 4.761695861816406 Tokens per Sec: 21304.448183021963
Epoch Step: 20 / 135 Loss: 1.9917445182800293 Tokens per Sec: 19329.089492361014
Epoch Step: 25 / 135 Loss: 53.04408264160156 Tokens per Sec: 23614.29473177093
Epoch Step: 30 / 135 Loss: 2.2142817974090576 Tokens per Sec: 21272.87253357699
Epoch Step: 35 / 135 Loss: 4.090213298797607 Tokens per Sec: 22778.893912381696
Epoch Step: 40 / 135 Loss: 3.7884602546691895 Tokens per Sec: 19629.20702666174
Epoch Step: 45 / 135 Loss: 7.315945148468018 Tokens per Sec: 22702.693681751294
Epoch Step: 50 / 135 Loss: 5.421411514282227 Tokens per Sec: 17943.51205542458
Epoch Step: 55 / 135 Loss: 5.368166923522949 Tokens per Sec: 20019.336292589585
Epoch Step: 60 / 135 Loss: 6.392134189605713 Tokens per Sec: 22717.861103515814
Epoch Step: 65 / 135 Loss: 4.788378715515137 Tokens per Sec: 19876.470548420977
Epoch Step: 70 / 135 Loss: 9.780182838439941 Tokens per Sec: 19852.507930559797
Epoch Step: 75 / 135 Loss: 7.204946994781494 Tokens per Sec: 21362.92698508866
Epoch Step: 80 / 135 Loss: 3.612184524536133 Tokens per Sec: 22239.597639734442
Epoch Step: 85 / 135 Loss: 4.00298547744751 Tokens per Sec: 18986.332509631487
Epoch Step: 90 / 135 Loss: 5.405165195465088 Tokens per Sec: 18705.898664425487
Epoch Step: 95 / 135 Loss: 4.37870454788208 Tokens per Sec: 17885.299316535406
Epoch Step: 100 / 135 Loss: 6.991853713989258 Tokens per Sec: 18406.992432021554
Epoch Step: 105 / 135 Loss: 7.255510330200195 Tokens per Sec: 17974.56093984479
Epoch Step: 110 / 135 Loss: 5.088619709014893 Tokens per Sec: 18643.68671425846
Epoch Step: 115 / 135 Loss: 7.027194976806641 Tokens per Sec: 19463.74890371329
Epoch Step: 120 / 135 Loss: 3.8806238174438477 Tokens per Sec: 18431.048207791442
Epoch Step: 125 / 135 Loss: 5.0869340896606445 Tokens per Sec: 16981.32273588551
Epoch Step: 130 / 135 Loss: 4.597790718078613 Tokens per Sec: 14664.954584135752
Epoch Step: 135 / 135 Loss: 4.410760402679443 Tokens per Sec: 20313.25327261273
Epoch ended with duration 0:00:12.813795
Train perplexity: 1.2853431896785372
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652856
Validation perplexity: 1.3872488241554843
Epoch 94 / 1000
Epoch Step: 5 / 135 Loss: 3.0214688777923584 Tokens per Sec: 18235.471529255938
Epoch Step: 10 / 135 Loss: 52.19450759887695 Tokens per Sec: 17927.416982971452
Epoch Step: 15 / 135 Loss: 4.460371971130371 Tokens per Sec: 20892.023273239156
Epoch Step: 20 / 135 Loss: 7.170191764831543 Tokens per Sec: 20533.503398159137
Epoch Step: 25 / 135 Loss: 47.63232421875 Tokens per Sec: 17433.706335018654
Epoch Step: 30 / 135 Loss: 5.091042518615723 Tokens per Sec: 21196.971506645477
Epoch Step: 35 / 135 Loss: 6.467994689941406 Tokens per Sec: 22864.821033475226
Epoch Step: 40 / 135 Loss: 5.844615459442139 Tokens per Sec: 18255.667708838435
Epoch Step: 45 / 135 Loss: 7.220098972320557 Tokens per Sec: 20807.388332516144
Epoch Step: 50 / 135 Loss: 4.717670440673828 Tokens per Sec: 24899.326965708668
Epoch Step: 55 / 135 Loss: 2.7289435863494873 Tokens per Sec: 20409.65487870297
Epoch Step: 60 / 135 Loss: 6.166014194488525 Tokens per Sec: 19360.54962213106
Epoch Step: 65 / 135 Loss: 7.042089939117432 Tokens per Sec: 21074.172144220873
Epoch Step: 70 / 135 Loss: 2.8873744010925293 Tokens per Sec: 21247.1354968485
Epoch Step: 75 / 135 Loss: 3.6601614952087402 Tokens per Sec: 19338.664505382436
Epoch Step: 80 / 135 Loss: 6.166026592254639 Tokens per Sec: 22764.18081842215
Epoch Step: 85 / 135 Loss: 6.162846565246582 Tokens per Sec: 18723.722256728168
Epoch Step: 90 / 135 Loss: 3.225306272506714 Tokens per Sec: 20060.785062823736
Epoch Step: 95 / 135 Loss: 6.132681369781494 Tokens per Sec: 19440.17050848198
Epoch Step: 100 / 135 Loss: 7.17884635925293 Tokens per Sec: 22158.699066019097
Epoch Step: 105 / 135 Loss: 6.000229835510254 Tokens per Sec: 18165.289090406128
Epoch Step: 110 / 135 Loss: 5.300742149353027 Tokens per Sec: 16273.33913986623
Epoch Step: 115 / 135 Loss: 2.991861581802368 Tokens per Sec: 19073.689010350587
Epoch Step: 120 / 135 Loss: 3.991492509841919 Tokens per Sec: 18172.917784885518
Epoch Step: 125 / 135 Loss: 31.22297477722168 Tokens per Sec: 17612.512019111637
Epoch Step: 130 / 135 Loss: 4.739370822906494 Tokens per Sec: 18252.540242160798
Epoch Step: 135 / 135 Loss: 3.6050143241882324 Tokens per Sec: 19629.956380814576
Epoch ended with duration 0:00:12.888206
Train perplexity: 1.3020349321247837
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653352
Validation perplexity: 1.3975826398098719
Epoch 95 / 1000
Epoch Step: 5 / 135 Loss: 2.1397593021392822 Tokens per Sec: 20650.72271176112
Epoch Step: 10 / 135 Loss: 7.4332404136657715 Tokens per Sec: 19347.700263542793
Epoch Step: 15 / 135 Loss: 5.8243842124938965 Tokens per Sec: 20976.405402576394
Epoch Step: 20 / 135 Loss: 5.634653091430664 Tokens per Sec: 20504.812462551272
Epoch Step: 25 / 135 Loss: 6.322746753692627 Tokens per Sec: 19797.982131439116
Epoch Step: 30 / 135 Loss: 3.00893497467041 Tokens per Sec: 22313.059321129098
Epoch Step: 35 / 135 Loss: 2.8452723026275635 Tokens per Sec: 22805.402816646507
Epoch Step: 40 / 135 Loss: 5.520915985107422 Tokens per Sec: 21823.36354820676
Epoch Step: 45 / 135 Loss: 10.706302642822266 Tokens per Sec: 15336.473741942269
Epoch Step: 50 / 135 Loss: 4.212221622467041 Tokens per Sec: 19528.01650832455
Epoch Step: 55 / 135 Loss: 51.61410140991211 Tokens per Sec: 21687.064235398804
Epoch Step: 60 / 135 Loss: 2.7863337993621826 Tokens per Sec: 19918.476166967273
Epoch Step: 65 / 135 Loss: 3.5908122062683105 Tokens per Sec: 20710.892885912643
Epoch Step: 70 / 135 Loss: 8.485105514526367 Tokens per Sec: 17862.645177270017
Epoch Step: 75 / 135 Loss: 8.42029094696045 Tokens per Sec: 20434.699137909705
Epoch Step: 80 / 135 Loss: 3.1530916690826416 Tokens per Sec: 18721.481724950037
Epoch Step: 85 / 135 Loss: 3.2968404293060303 Tokens per Sec: 23018.25515010034
Epoch Step: 90 / 135 Loss: 9.63514518737793 Tokens per Sec: 21414.87730762302
Epoch Step: 95 / 135 Loss: 5.026634693145752 Tokens per Sec: 22112.133218033177
Epoch Step: 100 / 135 Loss: 1.4477790594100952 Tokens per Sec: 22508.499663185987
Epoch Step: 105 / 135 Loss: 2.4329497814178467 Tokens per Sec: 18005.896685775915
Epoch Step: 110 / 135 Loss: 20.97539710998535 Tokens per Sec: 18826.29339337777
Epoch Step: 115 / 135 Loss: 5.4591755867004395 Tokens per Sec: 16471.444992467834
Epoch Step: 120 / 135 Loss: 4.477456569671631 Tokens per Sec: 19019.63023028011
Epoch Step: 125 / 135 Loss: 6.615459442138672 Tokens per Sec: 19585.2445616439
Epoch Step: 130 / 135 Loss: 2.986943244934082 Tokens per Sec: 17026.971809159488
Epoch Step: 135 / 135 Loss: 4.208080768585205 Tokens per Sec: 18624.02643535729
Epoch ended with duration 0:00:12.805948
Train perplexity: 1.2876696884444296
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654929
Validation perplexity: 1.3894516080160317
Model saved checkpoint!
Epoch 96 / 1000
Epoch Step: 5 / 135 Loss: 5.951127529144287 Tokens per Sec: 15938.378852231686
Epoch Step: 10 / 135 Loss: 6.424907207489014 Tokens per Sec: 22668.031190614416
Epoch Step: 15 / 135 Loss: 3.7444310188293457 Tokens per Sec: 18967.554114763054
Epoch Step: 20 / 135 Loss: 7.104673385620117 Tokens per Sec: 17781.811239041002
Epoch Step: 25 / 135 Loss: 5.428493976593018 Tokens per Sec: 17133.557990847974
Epoch Step: 30 / 135 Loss: 5.896710395812988 Tokens per Sec: 20769.288683074847
Epoch Step: 35 / 135 Loss: 5.9345703125 Tokens per Sec: 21935.75332602985
Epoch Step: 40 / 135 Loss: 6.038696765899658 Tokens per Sec: 22506.485386965825
Epoch Step: 45 / 135 Loss: 3.9161250591278076 Tokens per Sec: 22076.55052238043
Epoch Step: 50 / 135 Loss: 5.729605674743652 Tokens per Sec: 20056.787302485816
Epoch Step: 55 / 135 Loss: 6.543984413146973 Tokens per Sec: 18584.01392201917
Epoch Step: 60 / 135 Loss: 3.932837963104248 Tokens per Sec: 21600.751771047242
Epoch Step: 65 / 135 Loss: 9.030401229858398 Tokens per Sec: 20853.831925799805
Epoch Step: 70 / 135 Loss: 7.903104782104492 Tokens per Sec: 23099.50934061362
Epoch Step: 75 / 135 Loss: 11.41897201538086 Tokens per Sec: 21602.63877055877
Epoch Step: 80 / 135 Loss: 8.593269348144531 Tokens per Sec: 20351.50558276909
Epoch Step: 85 / 135 Loss: 4.343648910522461 Tokens per Sec: 21847.897802557043
Epoch Step: 90 / 135 Loss: 6.744884967803955 Tokens per Sec: 16458.380604735863
Epoch Step: 95 / 135 Loss: 5.313446521759033 Tokens per Sec: 24712.766160163897
Epoch Step: 100 / 135 Loss: 5.698152542114258 Tokens per Sec: 16853.77788546967
Epoch Step: 105 / 135 Loss: 3.135946750640869 Tokens per Sec: 18157.186854266925
Epoch Step: 110 / 135 Loss: 2.6237025260925293 Tokens per Sec: 17035.852253453642
Epoch Step: 115 / 135 Loss: 5.30954122543335 Tokens per Sec: 17887.083761789974
Epoch Step: 120 / 135 Loss: 5.825396537780762 Tokens per Sec: 18906.596232305306
Epoch Step: 125 / 135 Loss: 5.462666988372803 Tokens per Sec: 19277.774960539813
Epoch Step: 130 / 135 Loss: 2.674776315689087 Tokens per Sec: 18990.34336559391
Epoch Step: 135 / 135 Loss: 5.166335105895996 Tokens per Sec: 19959.33435582408
Epoch ended with duration 0:00:12.882191
Train perplexity: 1.2814109629217434
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654082
Validation perplexity: 1.380848715851306
Epoch 97 / 1000
Epoch Step: 5 / 135 Loss: 7.618722915649414 Tokens per Sec: 19000.29907331293
Epoch Step: 10 / 135 Loss: 21.736787796020508 Tokens per Sec: 21489.858664315812
Epoch Step: 15 / 135 Loss: 5.614867687225342 Tokens per Sec: 20941.60901228906
Epoch Step: 20 / 135 Loss: 3.081496000289917 Tokens per Sec: 20292.14330057414
Epoch Step: 25 / 135 Loss: 4.3435468673706055 Tokens per Sec: 20677.85052708869
Epoch Step: 30 / 135 Loss: 3.2601025104522705 Tokens per Sec: 21260.8420161194
Epoch Step: 35 / 135 Loss: 6.2901692390441895 Tokens per Sec: 19476.48849740585
Epoch Step: 40 / 135 Loss: 6.074573516845703 Tokens per Sec: 22118.75237298703
Epoch Step: 45 / 135 Loss: 52.385536193847656 Tokens per Sec: 19701.15624897842
Epoch Step: 50 / 135 Loss: 8.022757530212402 Tokens per Sec: 21402.562545912504
Epoch Step: 55 / 135 Loss: 3.4337856769561768 Tokens per Sec: 19412.051816685354
Epoch Step: 60 / 135 Loss: 3.781846046447754 Tokens per Sec: 23655.50580259335
Epoch Step: 65 / 135 Loss: 4.867883205413818 Tokens per Sec: 20952.570786673718
Epoch Step: 70 / 135 Loss: 3.1231343746185303 Tokens per Sec: 18376.48043520138
Epoch Step: 75 / 135 Loss: 2.766728401184082 Tokens per Sec: 16620.262979994266
Epoch Step: 80 / 135 Loss: 7.399172782897949 Tokens per Sec: 18522.554092017097
Epoch Step: 85 / 135 Loss: 4.727396488189697 Tokens per Sec: 22467.0130262372
Epoch Step: 90 / 135 Loss: 6.560112476348877 Tokens per Sec: 16506.763709162853
Epoch Step: 95 / 135 Loss: 7.111968040466309 Tokens per Sec: 21814.59197667117
Epoch Step: 100 / 135 Loss: 3.9283998012542725 Tokens per Sec: 21654.851538958937
Epoch Step: 105 / 135 Loss: 3.489985704421997 Tokens per Sec: 17093.459707741153
Epoch Step: 110 / 135 Loss: 5.511795520782471 Tokens per Sec: 18117.123930164587
Epoch Step: 115 / 135 Loss: 2.8664894104003906 Tokens per Sec: 17259.969460546243
Epoch Step: 120 / 135 Loss: 3.177072763442993 Tokens per Sec: 19471.46367594581
Epoch Step: 125 / 135 Loss: 4.821040630340576 Tokens per Sec: 17979.56749352377
Epoch Step: 130 / 135 Loss: 3.751422882080078 Tokens per Sec: 19191.33594717593
Epoch Step: 135 / 135 Loss: 4.511650562286377 Tokens per Sec: 18040.409506063756
Epoch ended with duration 0:00:12.862773
Train perplexity: 1.3243973621856844
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.666562
Validation perplexity: 1.7059514559654505
Epoch 98 / 1000
Epoch Step: 5 / 135 Loss: 6.118887424468994 Tokens per Sec: 19871.16848632587
Epoch Step: 10 / 135 Loss: 2.696444034576416 Tokens per Sec: 17678.12440168874
Epoch Step: 15 / 135 Loss: 3.933049440383911 Tokens per Sec: 19443.415387841513
Epoch Step: 20 / 135 Loss: 7.0847673416137695 Tokens per Sec: 23499.67038552178
Epoch Step: 25 / 135 Loss: 5.2249436378479 Tokens per Sec: 24127.305001641926
Epoch Step: 30 / 135 Loss: 6.003951549530029 Tokens per Sec: 18753.16906847024
Epoch Step: 35 / 135 Loss: 4.596344470977783 Tokens per Sec: 21675.889805682353
Epoch Step: 40 / 135 Loss: 3.814274549484253 Tokens per Sec: 20799.754415620093
Epoch Step: 45 / 135 Loss: 3.78371524810791 Tokens per Sec: 23235.92201198524
Epoch Step: 50 / 135 Loss: 3.548379898071289 Tokens per Sec: 18717.30219340949
Epoch Step: 55 / 135 Loss: 3.6153390407562256 Tokens per Sec: 16239.881631676992
Epoch Step: 60 / 135 Loss: 7.435460090637207 Tokens per Sec: 21726.62739953451
Epoch Step: 65 / 135 Loss: 6.666675090789795 Tokens per Sec: 22387.989810675695
Epoch Step: 70 / 135 Loss: 2.5000531673431396 Tokens per Sec: 18740.687790980624
Epoch Step: 75 / 135 Loss: 5.395908355712891 Tokens per Sec: 18957.27515526458
Epoch Step: 80 / 135 Loss: 2.507544994354248 Tokens per Sec: 19533.573734356924
Epoch Step: 85 / 135 Loss: 4.223470687866211 Tokens per Sec: 19883.7308029155
Epoch Step: 90 / 135 Loss: 4.733928680419922 Tokens per Sec: 17766.27788923508
Epoch Step: 95 / 135 Loss: 8.301295280456543 Tokens per Sec: 23687.218537396784
Epoch Step: 100 / 135 Loss: 3.1295549869537354 Tokens per Sec: 22366.387638734963
Epoch Step: 105 / 135 Loss: 2.8693597316741943 Tokens per Sec: 16064.247568678016
Epoch Step: 110 / 135 Loss: 3.556480646133423 Tokens per Sec: 17438.37952729929
Epoch Step: 115 / 135 Loss: 7.550986289978027 Tokens per Sec: 18537.02181521017
Epoch Step: 120 / 135 Loss: 5.830870151519775 Tokens per Sec: 19070.14279532147
Epoch Step: 125 / 135 Loss: 2.9200499057769775 Tokens per Sec: 18019.651018855657
Epoch Step: 130 / 135 Loss: 4.191812515258789 Tokens per Sec: 19196.7128830457
Epoch Step: 135 / 135 Loss: 6.267104148864746 Tokens per Sec: 19526.201171914832
Epoch ended with duration 0:00:12.786090
Train perplexity: 1.2318155365400054
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653074
Validation perplexity: 1.3856377986442523
Epoch 99 / 1000
Epoch Step: 5 / 135 Loss: 3.5944907665252686 Tokens per Sec: 20824.957208342563
Epoch Step: 10 / 135 Loss: 37.703956604003906 Tokens per Sec: 22810.4728662201
Epoch Step: 15 / 135 Loss: 8.317212104797363 Tokens per Sec: 20973.54953866199
Epoch Step: 20 / 135 Loss: 2.056952476501465 Tokens per Sec: 21139.73143000902
Epoch Step: 25 / 135 Loss: 1.9167193174362183 Tokens per Sec: 20535.823758929688
Epoch Step: 30 / 135 Loss: 5.21824836730957 Tokens per Sec: 17868.955041537472
Epoch Step: 35 / 135 Loss: 6.138729095458984 Tokens per Sec: 21993.512443659252
Epoch Step: 40 / 135 Loss: 7.64757776260376 Tokens per Sec: 19261.162986650317
Epoch Step: 45 / 135 Loss: 41.78592300415039 Tokens per Sec: 18560.249628522513
Epoch Step: 50 / 135 Loss: 2.702781915664673 Tokens per Sec: 21692.426624449556
Epoch Step: 55 / 135 Loss: 7.366955280303955 Tokens per Sec: 19654.524224638422
Epoch Step: 60 / 135 Loss: 25.457103729248047 Tokens per Sec: 19431.626433718215
Epoch Step: 65 / 135 Loss: 2.545323133468628 Tokens per Sec: 22145.118641052475
Epoch Step: 70 / 135 Loss: 5.007970333099365 Tokens per Sec: 21858.935241859966
Epoch Step: 75 / 135 Loss: 2.4476418495178223 Tokens per Sec: 21593.70580328168
Epoch Step: 80 / 135 Loss: 4.148639678955078 Tokens per Sec: 19217.880236214976
Epoch Step: 85 / 135 Loss: 7.387898921966553 Tokens per Sec: 18349.436774294758
Epoch Step: 90 / 135 Loss: 2.7620129585266113 Tokens per Sec: 22757.320952900216
Epoch Step: 95 / 135 Loss: 4.354206562042236 Tokens per Sec: 24159.06478419992
Epoch Step: 100 / 135 Loss: 7.051661968231201 Tokens per Sec: 16616.134297826513
Epoch Step: 105 / 135 Loss: 5.163114547729492 Tokens per Sec: 17545.411918478865
Epoch Step: 110 / 135 Loss: 5.894787788391113 Tokens per Sec: 18242.555562781436
Epoch Step: 115 / 135 Loss: 6.077572822570801 Tokens per Sec: 17771.84882318168
Epoch Step: 120 / 135 Loss: 4.361485481262207 Tokens per Sec: 16340.31122555095
Epoch Step: 125 / 135 Loss: 5.980904579162598 Tokens per Sec: 19231.27539460206
Epoch Step: 130 / 135 Loss: 4.385056018829346 Tokens per Sec: 18411.843032249686
Epoch Step: 135 / 135 Loss: 4.910468101501465 Tokens per Sec: 18428.174022679224
Epoch ended with duration 0:00:12.847481
Train perplexity: 1.314055234751053
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.672097
Validation perplexity: 1.583316107156176
Epoch 100 / 1000
Epoch Step: 5 / 135 Loss: 29.460098266601562 Tokens per Sec: 21978.987065997448
Epoch Step: 10 / 135 Loss: 4.914914131164551 Tokens per Sec: 21464.386115534042
Epoch Step: 15 / 135 Loss: 4.187109470367432 Tokens per Sec: 19684.179087284596
Epoch Step: 20 / 135 Loss: 2.966754674911499 Tokens per Sec: 21538.433475466692
Epoch Step: 25 / 135 Loss: 3.753052234649658 Tokens per Sec: 19124.019467487527
Epoch Step: 30 / 135 Loss: 5.153585433959961 Tokens per Sec: 20865.002599072253
Epoch Step: 35 / 135 Loss: 5.257375240325928 Tokens per Sec: 20177.597178280183
Epoch Step: 40 / 135 Loss: 6.3425469398498535 Tokens per Sec: 20622.28217812512
Epoch Step: 45 / 135 Loss: 5.35714054107666 Tokens per Sec: 20364.120526469545
Epoch Step: 50 / 135 Loss: 5.601160049438477 Tokens per Sec: 22197.889006405927
Epoch Step: 55 / 135 Loss: 4.679291248321533 Tokens per Sec: 18262.643993001355
Epoch Step: 60 / 135 Loss: 3.9845402240753174 Tokens per Sec: 20030.902705510518
Epoch Step: 65 / 135 Loss: 1.7107815742492676 Tokens per Sec: 15801.611566112315
Epoch Step: 70 / 135 Loss: 12.793102264404297 Tokens per Sec: 20909.523612024877
Epoch Step: 75 / 135 Loss: 5.7875752449035645 Tokens per Sec: 22597.93457136676
Epoch Step: 80 / 135 Loss: 4.833639621734619 Tokens per Sec: 19218.18736542204
Epoch Step: 85 / 135 Loss: 53.51344680786133 Tokens per Sec: 21814.66050772586
Epoch Step: 90 / 135 Loss: 4.951724529266357 Tokens per Sec: 21155.042991890117
Epoch Step: 95 / 135 Loss: 2.4208555221557617 Tokens per Sec: 21496.217291281995
Epoch Step: 100 / 135 Loss: 7.113933086395264 Tokens per Sec: 20445.468834938038
Epoch Step: 105 / 135 Loss: 3.375800132751465 Tokens per Sec: 17748.758906198294
Epoch Step: 110 / 135 Loss: 6.527073383331299 Tokens per Sec: 18184.572843174974
Epoch Step: 115 / 135 Loss: 5.283951759338379 Tokens per Sec: 15326.510317817681
Epoch Step: 120 / 135 Loss: 2.2496390342712402 Tokens per Sec: 18895.11331414551
Epoch Step: 125 / 135 Loss: 5.624660491943359 Tokens per Sec: 17479.153712125226
Epoch Step: 130 / 135 Loss: 4.981655120849609 Tokens per Sec: 19707.769682217713
Epoch Step: 135 / 135 Loss: 4.10770845413208 Tokens per Sec: 19048.51921518535
Epoch ended with duration 0:00:12.833210
Train perplexity: 1.2952340295622606
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651947
Validation perplexity: 1.3770012556079032
Model saved checkpoint!
Epoch 101 / 1000
Epoch Step: 5 / 135 Loss: 6.805011749267578 Tokens per Sec: 21407.23264747334
Epoch Step: 10 / 135 Loss: 5.333415985107422 Tokens per Sec: 23080.1546787899
Epoch Step: 15 / 135 Loss: 3.583265542984009 Tokens per Sec: 24217.66879547534
Epoch Step: 20 / 135 Loss: 3.7681119441986084 Tokens per Sec: 18045.681764444438
Epoch Step: 25 / 135 Loss: 6.296838760375977 Tokens per Sec: 23249.03690922817
Epoch Step: 30 / 135 Loss: 9.069538116455078 Tokens per Sec: 20973.32487393401
Epoch Step: 35 / 135 Loss: 8.203261375427246 Tokens per Sec: 20400.17000648146
Epoch Step: 40 / 135 Loss: 5.909883975982666 Tokens per Sec: 21341.41589132122
Epoch Step: 45 / 135 Loss: 4.9091715812683105 Tokens per Sec: 20910.75446817298
Epoch Step: 50 / 135 Loss: 3.346391439437866 Tokens per Sec: 19132.286172023512
Epoch Step: 55 / 135 Loss: 3.80271577835083 Tokens per Sec: 17464.05843653575
Epoch Step: 60 / 135 Loss: 5.051315784454346 Tokens per Sec: 16814.18282973725
Epoch Step: 65 / 135 Loss: 4.88144588470459 Tokens per Sec: 20647.41280849323
Epoch Step: 70 / 135 Loss: 6.8026838302612305 Tokens per Sec: 22362.79989996664
Epoch Step: 75 / 135 Loss: 7.981493949890137 Tokens per Sec: 21005.492513640504
Epoch Step: 80 / 135 Loss: 2.474364757537842 Tokens per Sec: 18459.35077457348
Epoch Step: 85 / 135 Loss: 2.1140189170837402 Tokens per Sec: 22802.019410781788
Epoch Step: 90 / 135 Loss: 2.7495644092559814 Tokens per Sec: 18534.502287970317
Epoch Step: 95 / 135 Loss: 5.329370498657227 Tokens per Sec: 16513.744485606498
Epoch Step: 100 / 135 Loss: 5.214371681213379 Tokens per Sec: 21351.150408779846
Epoch Step: 105 / 135 Loss: 4.064022541046143 Tokens per Sec: 17616.42238811585
Epoch Step: 110 / 135 Loss: 4.249515533447266 Tokens per Sec: 18928.716279057975
Epoch Step: 115 / 135 Loss: 7.946905612945557 Tokens per Sec: 19268.015640384776
Epoch Step: 120 / 135 Loss: 4.702524662017822 Tokens per Sec: 17998.08894135587
Epoch Step: 125 / 135 Loss: 4.4112396240234375 Tokens per Sec: 14675.504392733588
Epoch Step: 130 / 135 Loss: 5.621758937835693 Tokens per Sec: 19256.59179027149
Epoch Step: 135 / 135 Loss: 4.860347270965576 Tokens per Sec: 18136.789300138258
Epoch ended with duration 0:00:12.825260
Train perplexity: 1.2440481036995974
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656029
Validation perplexity: 1.4985621784830234
Epoch 102 / 1000
Epoch Step: 5 / 135 Loss: 3.052593231201172 Tokens per Sec: 19185.52686294308
Epoch Step: 10 / 135 Loss: 1.5785510540008545 Tokens per Sec: 22822.20187844395
Epoch Step: 15 / 135 Loss: 3.6929919719696045 Tokens per Sec: 22703.089368861085
Epoch Step: 20 / 135 Loss: 3.318713665008545 Tokens per Sec: 20338.39221827663
Epoch Step: 25 / 135 Loss: 2.819737434387207 Tokens per Sec: 22834.02055776033
Epoch Step: 30 / 135 Loss: 3.6979005336761475 Tokens per Sec: 18272.525804763645
Epoch Step: 35 / 135 Loss: 4.48557186126709 Tokens per Sec: 21040.151607257656
Epoch Step: 40 / 135 Loss: 4.422858715057373 Tokens per Sec: 18481.762900051788
Epoch Step: 45 / 135 Loss: 2.4907491207122803 Tokens per Sec: 18439.726934122777
Epoch Step: 50 / 135 Loss: 4.620624542236328 Tokens per Sec: 13641.054446882194
Epoch Step: 55 / 135 Loss: 2.795341968536377 Tokens per Sec: 20500.113449061984
Epoch Step: 60 / 135 Loss: 5.020532608032227 Tokens per Sec: 22681.821274705322
Epoch Step: 65 / 135 Loss: 7.240493297576904 Tokens per Sec: 17680.227780324825
Epoch Step: 70 / 135 Loss: 3.1684775352478027 Tokens per Sec: 25240.20128782856
Epoch Step: 75 / 135 Loss: 7.237804889678955 Tokens per Sec: 20685.775644688012
Epoch Step: 80 / 135 Loss: 6.246531963348389 Tokens per Sec: 19606.896218648595
Epoch Step: 85 / 135 Loss: 7.718392848968506 Tokens per Sec: 19641.100838474926
Epoch Step: 90 / 135 Loss: 5.3274407386779785 Tokens per Sec: 16715.260249415518
Epoch Step: 95 / 135 Loss: 53.448455810546875 Tokens per Sec: 23751.763732401843
Epoch Step: 100 / 135 Loss: 5.80241584777832 Tokens per Sec: 21216.806813049887
Epoch Step: 105 / 135 Loss: 4.882235050201416 Tokens per Sec: 17478.474451907696
Epoch Step: 110 / 135 Loss: 3.3275296688079834 Tokens per Sec: 19139.033653092753
Epoch Step: 115 / 135 Loss: 40.800174713134766 Tokens per Sec: 16758.944860412827
Epoch Step: 120 / 135 Loss: 2.250359296798706 Tokens per Sec: 16516.285055585508
Epoch Step: 125 / 135 Loss: 6.214810848236084 Tokens per Sec: 19214.484924973345
Epoch Step: 130 / 135 Loss: 5.213431358337402 Tokens per Sec: 17738.604872857315
Epoch Step: 135 / 135 Loss: 5.882050037384033 Tokens per Sec: 19621.36130531054
Epoch ended with duration 0:00:12.910211
Train perplexity: 1.2686694518984007
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657641
Validation perplexity: 1.4469630798168558
Epoch 103 / 1000
Epoch Step: 5 / 135 Loss: 3.9520604610443115 Tokens per Sec: 23583.218497637892
Epoch Step: 10 / 135 Loss: 5.5446248054504395 Tokens per Sec: 16485.36485370191
Epoch Step: 15 / 135 Loss: 8.422568321228027 Tokens per Sec: 19719.877257403718
Epoch Step: 20 / 135 Loss: 5.583342552185059 Tokens per Sec: 21179.186686032528
Epoch Step: 25 / 135 Loss: 5.363373279571533 Tokens per Sec: 19316.56231570739
Epoch Step: 30 / 135 Loss: 8.223928451538086 Tokens per Sec: 20663.754613096495
Epoch Step: 35 / 135 Loss: 2.884152889251709 Tokens per Sec: 21698.869962040193
Epoch Step: 40 / 135 Loss: 6.5631303787231445 Tokens per Sec: 23482.303842616333
Epoch Step: 45 / 135 Loss: 2.9429049491882324 Tokens per Sec: 20121.97522817185
Epoch Step: 50 / 135 Loss: 7.1186652183532715 Tokens per Sec: 23046.110430527828
Epoch Step: 55 / 135 Loss: 2.9293675422668457 Tokens per Sec: 20688.78966063347
Epoch Step: 60 / 135 Loss: 40.878204345703125 Tokens per Sec: 21610.82515836323
Epoch Step: 65 / 135 Loss: 3.9321811199188232 Tokens per Sec: 15821.63763380684
Epoch Step: 70 / 135 Loss: 2.734703302383423 Tokens per Sec: 18425.758986447596
Epoch Step: 75 / 135 Loss: 5.192521572113037 Tokens per Sec: 18660.446183953034
Epoch Step: 80 / 135 Loss: 5.605729103088379 Tokens per Sec: 21468.52285985038
Epoch Step: 85 / 135 Loss: 6.049492359161377 Tokens per Sec: 19737.643466334885
Epoch Step: 90 / 135 Loss: 3.461169719696045 Tokens per Sec: 21923.202106971035
Epoch Step: 95 / 135 Loss: 5.913144588470459 Tokens per Sec: 20341.416938033242
Epoch Step: 100 / 135 Loss: 4.19560432434082 Tokens per Sec: 18333.22260181763
Epoch Step: 105 / 135 Loss: 4.581284046173096 Tokens per Sec: 16216.799961037164
Epoch Step: 110 / 135 Loss: 11.604263305664062 Tokens per Sec: 16926.95274885634
Epoch Step: 115 / 135 Loss: 4.57808780670166 Tokens per Sec: 20007.41934172552
Epoch Step: 120 / 135 Loss: 4.075967311859131 Tokens per Sec: 19275.386484621242
Epoch Step: 125 / 135 Loss: 5.067432880401611 Tokens per Sec: 20414.481536540407
Epoch Step: 130 / 135 Loss: 24.152620315551758 Tokens per Sec: 17471.759261490424
Epoch Step: 135 / 135 Loss: 3.3176021575927734 Tokens per Sec: 17852.317959326407
Epoch ended with duration 0:00:12.860087
Train perplexity: 1.270899190211382
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653199
Validation perplexity: 1.3755188920476553
Epoch 104 / 1000
Epoch Step: 5 / 135 Loss: 1.8635369539260864 Tokens per Sec: 23507.951486432623
Epoch Step: 10 / 135 Loss: 4.692841529846191 Tokens per Sec: 21961.104904614804
Epoch Step: 15 / 135 Loss: 2.7758545875549316 Tokens per Sec: 19013.448686559823
Epoch Step: 20 / 135 Loss: 5.913022041320801 Tokens per Sec: 20366.633898067124
Epoch Step: 25 / 135 Loss: 2.854888916015625 Tokens per Sec: 19517.764279832678
Epoch Step: 30 / 135 Loss: 1.9028058052062988 Tokens per Sec: 20678.85383196798
Epoch Step: 35 / 135 Loss: 6.801018238067627 Tokens per Sec: 18508.895736724007
Epoch Step: 40 / 135 Loss: 18.62215232849121 Tokens per Sec: 22652.460833153287
Epoch Step: 45 / 135 Loss: 3.279275894165039 Tokens per Sec: 20309.830526774884
Epoch Step: 50 / 135 Loss: 2.668696165084839 Tokens per Sec: 15549.98029965064
Epoch Step: 55 / 135 Loss: 4.981678485870361 Tokens per Sec: 20149.135194877752
Epoch Step: 60 / 135 Loss: 1.3635506629943848 Tokens per Sec: 20873.485126672582
Epoch Step: 65 / 135 Loss: 2.84114146232605 Tokens per Sec: 19089.687726029857
Epoch Step: 70 / 135 Loss: 8.635766983032227 Tokens per Sec: 20767.55450566421
Epoch Step: 75 / 135 Loss: 4.50627326965332 Tokens per Sec: 22879.968266244727
Epoch Step: 80 / 135 Loss: 4.968383312225342 Tokens per Sec: 19471.8019325384
Epoch Step: 85 / 135 Loss: 6.4502973556518555 Tokens per Sec: 19938.074521049257
Epoch Step: 90 / 135 Loss: 3.3981502056121826 Tokens per Sec: 21082.15598093003
Epoch Step: 95 / 135 Loss: 3.6089024543762207 Tokens per Sec: 21275.25357712837
Epoch Step: 100 / 135 Loss: 4.8142409324646 Tokens per Sec: 21383.435427918066
Epoch Step: 105 / 135 Loss: 5.95519495010376 Tokens per Sec: 18727.644273657774
Epoch Step: 110 / 135 Loss: 5.35683536529541 Tokens per Sec: 15220.209254211684
Epoch Step: 115 / 135 Loss: 6.319173812866211 Tokens per Sec: 20216.657799654793
Epoch Step: 120 / 135 Loss: 7.110023021697998 Tokens per Sec: 19205.35766837946
Epoch Step: 125 / 135 Loss: 1.862309217453003 Tokens per Sec: 16595.294294760435
Epoch Step: 130 / 135 Loss: 49.447227478027344 Tokens per Sec: 19668.451945267498
Epoch Step: 135 / 135 Loss: 3.8594491481781006 Tokens per Sec: 18783.53589981515
Epoch ended with duration 0:00:12.797484
Train perplexity: 1.3028998781823369
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653503
Validation perplexity: 1.4077976735135411
Epoch 105 / 1000
Epoch Step: 5 / 135 Loss: 3.8772401809692383 Tokens per Sec: 20760.603376193507
Epoch Step: 10 / 135 Loss: 4.5195770263671875 Tokens per Sec: 18349.864226938607
Epoch Step: 15 / 135 Loss: 7.3811187744140625 Tokens per Sec: 22134.422780675988
Epoch Step: 20 / 135 Loss: 7.556651592254639 Tokens per Sec: 19782.269005365335
Epoch Step: 25 / 135 Loss: 2.621039628982544 Tokens per Sec: 22557.160409138305
Epoch Step: 30 / 135 Loss: 4.24159574508667 Tokens per Sec: 20473.68891332562
Epoch Step: 35 / 135 Loss: 2.632023334503174 Tokens per Sec: 18379.577367154165
Epoch Step: 40 / 135 Loss: 9.563860893249512 Tokens per Sec: 21077.403211239744
Epoch Step: 45 / 135 Loss: 4.7454705238342285 Tokens per Sec: 20212.087818364347
Epoch Step: 50 / 135 Loss: 4.842979907989502 Tokens per Sec: 17842.415133787974
Epoch Step: 55 / 135 Loss: 2.5432538986206055 Tokens per Sec: 21585.046528637067
Epoch Step: 60 / 135 Loss: 4.48657751083374 Tokens per Sec: 17830.958813480403
Epoch Step: 65 / 135 Loss: 5.701865196228027 Tokens per Sec: 21553.557409039055
Epoch Step: 70 / 135 Loss: 2.5779128074645996 Tokens per Sec: 19429.984274800765
Epoch Step: 75 / 135 Loss: 3.2888121604919434 Tokens per Sec: 19154.40374207498
Epoch Step: 80 / 135 Loss: 2.951880931854248 Tokens per Sec: 21158.55016882976
Epoch Step: 85 / 135 Loss: 3.3914732933044434 Tokens per Sec: 22485.047739029105
Epoch Step: 90 / 135 Loss: 2.592064380645752 Tokens per Sec: 24899.5334182753
Epoch Step: 95 / 135 Loss: 4.383674621582031 Tokens per Sec: 18275.533798664685
Epoch Step: 100 / 135 Loss: 2.2911715507507324 Tokens per Sec: 23403.650916871724
Epoch Step: 105 / 135 Loss: 5.450349807739258 Tokens per Sec: 17854.515906721474
Epoch Step: 110 / 135 Loss: 2.7693634033203125 Tokens per Sec: 16550.773536212197
Epoch Step: 115 / 135 Loss: 5.876120090484619 Tokens per Sec: 20752.13454660517
Epoch Step: 120 / 135 Loss: 37.2027587890625 Tokens per Sec: 17880.58021811153
Epoch Step: 125 / 135 Loss: 3.045790433883667 Tokens per Sec: 17393.02764790891
Epoch Step: 130 / 135 Loss: 4.259228706359863 Tokens per Sec: 17559.779167304412
Epoch Step: 135 / 135 Loss: 5.663586139678955 Tokens per Sec: 19239.400679158673
Epoch ended with duration 0:00:12.796535
Train perplexity: 1.247042729622779
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648917
Validation perplexity: 1.3021280951463035
Model saved best_on_validation!
Model saved checkpoint!
Epoch 106 / 1000
Epoch Step: 5 / 135 Loss: 2.223654270172119 Tokens per Sec: 19128.611639244467
Epoch Step: 10 / 135 Loss: 4.616621494293213 Tokens per Sec: 21313.10454970992
Epoch Step: 15 / 135 Loss: 6.421084880828857 Tokens per Sec: 21800.936610588364
Epoch Step: 20 / 135 Loss: 2.0488715171813965 Tokens per Sec: 21301.90333213255
Epoch Step: 25 / 135 Loss: 5.965598106384277 Tokens per Sec: 23087.52746887915
Epoch Step: 30 / 135 Loss: 7.4764862060546875 Tokens per Sec: 21028.983749281
Epoch Step: 35 / 135 Loss: 2.3644824028015137 Tokens per Sec: 18086.613939815343
Epoch Step: 40 / 135 Loss: 4.099887371063232 Tokens per Sec: 23112.067217407402
Epoch Step: 45 / 135 Loss: 5.586685657501221 Tokens per Sec: 20098.83798442441
Epoch Step: 50 / 135 Loss: 6.687585830688477 Tokens per Sec: 19600.947241841317
Epoch Step: 55 / 135 Loss: 1.5788729190826416 Tokens per Sec: 20190.079904989405
Epoch Step: 60 / 135 Loss: 2.7515759468078613 Tokens per Sec: 21258.606433466262
Epoch Step: 65 / 135 Loss: 4.1023359298706055 Tokens per Sec: 19088.52730269051
Epoch Step: 70 / 135 Loss: 3.8015639781951904 Tokens per Sec: 19959.83741364695
Epoch Step: 75 / 135 Loss: 3.6370320320129395 Tokens per Sec: 21160.397309172855
Epoch Step: 80 / 135 Loss: 6.968777656555176 Tokens per Sec: 18998.963196565608
Epoch Step: 85 / 135 Loss: 4.545210838317871 Tokens per Sec: 21941.445267483818
Epoch Step: 90 / 135 Loss: 41.02931213378906 Tokens per Sec: 21070.911090047393
Epoch Step: 95 / 135 Loss: 6.947319984436035 Tokens per Sec: 18915.36702432
Epoch Step: 100 / 135 Loss: 6.056776523590088 Tokens per Sec: 18448.543102593496
Epoch Step: 105 / 135 Loss: 3.2875401973724365 Tokens per Sec: 18758.946219336398
Epoch Step: 110 / 135 Loss: 2.9908578395843506 Tokens per Sec: 18443.893011414024
Epoch Step: 115 / 135 Loss: 5.217093467712402 Tokens per Sec: 16230.613599974591
Epoch Step: 120 / 135 Loss: 4.3841071128845215 Tokens per Sec: 17821.23124705801
Epoch Step: 125 / 135 Loss: 4.586938858032227 Tokens per Sec: 18015.03295780501
Epoch Step: 130 / 135 Loss: 5.270220756530762 Tokens per Sec: 18155.592803463904
Epoch Step: 135 / 135 Loss: 2.333110809326172 Tokens per Sec: 18573.625784140506
Epoch ended with duration 0:00:12.870921
Train perplexity: 1.2343114466995901
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657199
Validation perplexity: 1.5398924497162998
Epoch 107 / 1000
Epoch Step: 5 / 135 Loss: 2.8147013187408447 Tokens per Sec: 21089.94817049586
Epoch Step: 10 / 135 Loss: 5.642190933227539 Tokens per Sec: 16722.402692791133
Epoch Step: 15 / 135 Loss: 4.684134006500244 Tokens per Sec: 24524.968645905494
Epoch Step: 20 / 135 Loss: 3.5019376277923584 Tokens per Sec: 18996.03833043302
Epoch Step: 25 / 135 Loss: 5.92938756942749 Tokens per Sec: 20348.774589681692
Epoch Step: 30 / 135 Loss: 23.760051727294922 Tokens per Sec: 23318.33319068626
Epoch Step: 35 / 135 Loss: 4.249077320098877 Tokens per Sec: 19548.21600801171
Epoch Step: 40 / 135 Loss: 2.0375194549560547 Tokens per Sec: 19086.21081824181
Epoch Step: 45 / 135 Loss: 4.3317670822143555 Tokens per Sec: 19516.591755872112
Epoch Step: 50 / 135 Loss: 1.8535428047180176 Tokens per Sec: 21678.18999633975
Epoch Step: 55 / 135 Loss: 4.018299102783203 Tokens per Sec: 17539.40248833861
Epoch Step: 60 / 135 Loss: 2.930765390396118 Tokens per Sec: 22572.426321679617
Epoch Step: 65 / 135 Loss: 5.143416881561279 Tokens per Sec: 16609.22928017539
Epoch Step: 70 / 135 Loss: 36.31291961669922 Tokens per Sec: 21721.21083755458
Epoch Step: 75 / 135 Loss: 1.4154391288757324 Tokens per Sec: 20621.390744634344
Epoch Step: 80 / 135 Loss: 6.906994342803955 Tokens per Sec: 20471.23718822026
Epoch Step: 85 / 135 Loss: 4.662228584289551 Tokens per Sec: 18748.792257380508
Epoch Step: 90 / 135 Loss: 2.696239948272705 Tokens per Sec: 22492.499545521016
Epoch Step: 95 / 135 Loss: 4.319451332092285 Tokens per Sec: 21812.879144097267
Epoch Step: 100 / 135 Loss: 2.8478682041168213 Tokens per Sec: 21081.45017173389
Epoch Step: 105 / 135 Loss: 4.473905563354492 Tokens per Sec: 17492.424224104077
Epoch Step: 110 / 135 Loss: 5.005911350250244 Tokens per Sec: 19657.713354525426
Epoch Step: 115 / 135 Loss: 27.69784927368164 Tokens per Sec: 17398.59246833919
Epoch Step: 120 / 135 Loss: 2.737837791442871 Tokens per Sec: 17563.591468550672
Epoch Step: 125 / 135 Loss: 3.976844072341919 Tokens per Sec: 18026.315879269532
Epoch Step: 130 / 135 Loss: 3.152658224105835 Tokens per Sec: 17580.00608192164
Epoch Step: 135 / 135 Loss: 26.909170150756836 Tokens per Sec: 19866.56959853858
Epoch ended with duration 0:00:12.856461
Train perplexity: 1.2090124075639055
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652569
Validation perplexity: 1.4293209169800967
Epoch 108 / 1000
Epoch Step: 5 / 135 Loss: 7.77106237411499 Tokens per Sec: 20818.494623742936
Epoch Step: 10 / 135 Loss: 4.528619766235352 Tokens per Sec: 21335.06637548197
Epoch Step: 15 / 135 Loss: 4.6732611656188965 Tokens per Sec: 21650.808976689103
Epoch Step: 20 / 135 Loss: 2.160305976867676 Tokens per Sec: 17299.36967608377
Epoch Step: 25 / 135 Loss: 4.241430282592773 Tokens per Sec: 17416.59090862015
Epoch Step: 30 / 135 Loss: 3.010052442550659 Tokens per Sec: 18231.089817022552
Epoch Step: 35 / 135 Loss: 2.897319793701172 Tokens per Sec: 22388.7537134656
Epoch Step: 40 / 135 Loss: 4.656000137329102 Tokens per Sec: 19044.892212767892
Epoch Step: 45 / 135 Loss: 3.3006949424743652 Tokens per Sec: 19477.11749127987
Epoch Step: 50 / 135 Loss: 3.151717185974121 Tokens per Sec: 21921.50403559989
Epoch Step: 55 / 135 Loss: 6.754505634307861 Tokens per Sec: 17935.19432392839
Epoch Step: 60 / 135 Loss: 5.254490375518799 Tokens per Sec: 23320.37487495174
Epoch Step: 65 / 135 Loss: 2.1308202743530273 Tokens per Sec: 21069.406706773043
Epoch Step: 70 / 135 Loss: 4.725900173187256 Tokens per Sec: 21673.01001779733
Epoch Step: 75 / 135 Loss: 2.853854179382324 Tokens per Sec: 21236.17969883748
Epoch Step: 80 / 135 Loss: 5.449793815612793 Tokens per Sec: 20779.964570519667
Epoch Step: 85 / 135 Loss: 5.31533145904541 Tokens per Sec: 22818.092961695347
Epoch Step: 90 / 135 Loss: 2.196890354156494 Tokens per Sec: 23827.94156179055
Epoch Step: 95 / 135 Loss: 21.78409767150879 Tokens per Sec: 20713.527010410315
Epoch Step: 100 / 135 Loss: 5.6207756996154785 Tokens per Sec: 19912.691356194635
Epoch Step: 105 / 135 Loss: 2.4905917644500732 Tokens per Sec: 18082.43081444828
Epoch Step: 110 / 135 Loss: 4.702925682067871 Tokens per Sec: 19217.582643782345
Epoch Step: 115 / 135 Loss: 2.278968095779419 Tokens per Sec: 19218.270596555536
Epoch Step: 120 / 135 Loss: 3.757795810699463 Tokens per Sec: 18083.77520044046
Epoch Step: 125 / 135 Loss: 4.801591873168945 Tokens per Sec: 17886.031459351932
Epoch Step: 130 / 135 Loss: 2.6970458030700684 Tokens per Sec: 16917.95534496434
Epoch Step: 135 / 135 Loss: 4.794623374938965 Tokens per Sec: 19377.97225858205
Epoch ended with duration 0:00:12.707484
Train perplexity: 1.1900188120539774
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.659629
Validation perplexity: 1.596052248767936
Epoch 109 / 1000
Epoch Step: 5 / 135 Loss: 4.7142720222473145 Tokens per Sec: 18755.66848931345
Epoch Step: 10 / 135 Loss: 6.3574323654174805 Tokens per Sec: 21302.262002315132
Epoch Step: 15 / 135 Loss: 3.447864055633545 Tokens per Sec: 19921.572852967616
Epoch Step: 20 / 135 Loss: 2.484525680541992 Tokens per Sec: 18465.434939285922
Epoch Step: 25 / 135 Loss: 4.371257781982422 Tokens per Sec: 22106.182150450157
Epoch Step: 30 / 135 Loss: 4.524192810058594 Tokens per Sec: 17792.75127936071
Epoch Step: 35 / 135 Loss: 5.641485691070557 Tokens per Sec: 21822.865375676465
Epoch Step: 40 / 135 Loss: 6.360746383666992 Tokens per Sec: 20512.080630546763
Epoch Step: 45 / 135 Loss: 4.925600051879883 Tokens per Sec: 19897.94936949882
Epoch Step: 50 / 135 Loss: 4.063586235046387 Tokens per Sec: 21068.92630042872
Epoch Step: 55 / 135 Loss: 1.5539026260375977 Tokens per Sec: 18370.484695095744
Epoch Step: 60 / 135 Loss: 3.4197888374328613 Tokens per Sec: 17872.07441844086
Epoch Step: 65 / 135 Loss: 2.7840609550476074 Tokens per Sec: 18908.38206611226
Epoch Step: 70 / 135 Loss: 6.345937252044678 Tokens per Sec: 20439.385823283723
Epoch Step: 75 / 135 Loss: 3.473036289215088 Tokens per Sec: 19480.778531579035
Epoch Step: 80 / 135 Loss: 4.865058422088623 Tokens per Sec: 19821.0401858989
Epoch Step: 85 / 135 Loss: 4.076791763305664 Tokens per Sec: 21260.090321728105
Epoch Step: 90 / 135 Loss: 47.801246643066406 Tokens per Sec: 22233.145098265504
Epoch Step: 95 / 135 Loss: 3.4880588054656982 Tokens per Sec: 21835.642005133883
Epoch Step: 100 / 135 Loss: 9.25209903717041 Tokens per Sec: 21523.07185679932
Epoch Step: 105 / 135 Loss: 3.272357702255249 Tokens per Sec: 19305.02967361944
Epoch Step: 110 / 135 Loss: 3.7839787006378174 Tokens per Sec: 19242.916905175247
Epoch Step: 115 / 135 Loss: 3.925337791442871 Tokens per Sec: 17401.390685051574
Epoch Step: 120 / 135 Loss: 3.6435976028442383 Tokens per Sec: 17187.644629505477
Epoch Step: 125 / 135 Loss: 18.440195083618164 Tokens per Sec: 19918.35901753146
Epoch Step: 130 / 135 Loss: 2.365541458129883 Tokens per Sec: 16545.64890509905
Epoch Step: 135 / 135 Loss: 4.666877269744873 Tokens per Sec: 20263.068039996357
Epoch ended with duration 0:00:12.855208
Train perplexity: 1.274678285430927
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649707
Validation perplexity: 1.300332903254964
Model saved best_on_validation!
Epoch 110 / 1000
Epoch Step: 5 / 135 Loss: 4.335339069366455 Tokens per Sec: 17213.011365234415
Epoch Step: 10 / 135 Loss: 3.886939764022827 Tokens per Sec: 21248.88121039276
Epoch Step: 15 / 135 Loss: 3.9352171421051025 Tokens per Sec: 22012.720532916905
Epoch Step: 20 / 135 Loss: 24.816165924072266 Tokens per Sec: 18174.445394891314
Epoch Step: 25 / 135 Loss: 2.1612064838409424 Tokens per Sec: 20089.598828782222
Epoch Step: 30 / 135 Loss: 6.852902889251709 Tokens per Sec: 21776.905029466037
Epoch Step: 35 / 135 Loss: 2.172910213470459 Tokens per Sec: 18712.173210863017
Epoch Step: 40 / 135 Loss: 3.549581527709961 Tokens per Sec: 18123.625781745184
Epoch Step: 45 / 135 Loss: 4.067364692687988 Tokens per Sec: 23226.734683401566
Epoch Step: 50 / 135 Loss: 3.732663869857788 Tokens per Sec: 23176.448299161853
Epoch Step: 55 / 135 Loss: 6.334734916687012 Tokens per Sec: 14979.42949195301
Epoch Step: 60 / 135 Loss: 5.937170505523682 Tokens per Sec: 21699.32750050858
Epoch Step: 65 / 135 Loss: 3.0383362770080566 Tokens per Sec: 21757.1335386989
Epoch Step: 70 / 135 Loss: 4.130515098571777 Tokens per Sec: 22513.77319660237
Epoch Step: 75 / 135 Loss: 7.07793664932251 Tokens per Sec: 20590.274763256748
Epoch Step: 80 / 135 Loss: 1.9469866752624512 Tokens per Sec: 19679.60300834175
Epoch Step: 85 / 135 Loss: 3.2105226516723633 Tokens per Sec: 22664.62479609412
Epoch Step: 90 / 135 Loss: 1.7105625867843628 Tokens per Sec: 18777.054517372097
Epoch Step: 95 / 135 Loss: 2.858964204788208 Tokens per Sec: 21849.248436369246
Epoch Step: 100 / 135 Loss: 3.3552725315093994 Tokens per Sec: 19295.01461697685
Epoch Step: 105 / 135 Loss: 2.3756520748138428 Tokens per Sec: 17652.7735632321
Epoch Step: 110 / 135 Loss: 4.958939552307129 Tokens per Sec: 18355.577618384646
Epoch Step: 115 / 135 Loss: 4.551456928253174 Tokens per Sec: 19733.164830773738
Epoch Step: 120 / 135 Loss: 2.8379299640655518 Tokens per Sec: 17895.867712217223
Epoch Step: 125 / 135 Loss: 4.084539890289307 Tokens per Sec: 17796.734410719302
Epoch Step: 130 / 135 Loss: 3.6643269062042236 Tokens per Sec: 17653.72679872233
Epoch Step: 135 / 135 Loss: 3.564640998840332 Tokens per Sec: 19398.674961333047
Epoch ended with duration 0:00:12.818647
Train perplexity: 1.2279694101679601
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656969
Validation perplexity: 1.4772735504422867
Model saved checkpoint!
Epoch 111 / 1000
Epoch Step: 5 / 135 Loss: 4.273340225219727 Tokens per Sec: 19839.840441979795
Epoch Step: 10 / 135 Loss: 4.534395217895508 Tokens per Sec: 21333.327493850677
Epoch Step: 15 / 135 Loss: 2.170635461807251 Tokens per Sec: 22115.92393646916
Epoch Step: 20 / 135 Loss: 7.237846374511719 Tokens per Sec: 19166.661316376194
Epoch Step: 25 / 135 Loss: 5.9163923263549805 Tokens per Sec: 21796.841006871688
Epoch Step: 30 / 135 Loss: 5.105027198791504 Tokens per Sec: 23084.720961766176
Epoch Step: 35 / 135 Loss: 3.686414957046509 Tokens per Sec: 21626.516807191776
Epoch Step: 40 / 135 Loss: 3.02592134475708 Tokens per Sec: 20491.684203815104
Epoch Step: 45 / 135 Loss: 1.5926042795181274 Tokens per Sec: 20307.478364268063
Epoch Step: 50 / 135 Loss: 2.0422704219818115 Tokens per Sec: 21608.21404911211
Epoch Step: 55 / 135 Loss: 5.58705997467041 Tokens per Sec: 19749.14013244052
Epoch Step: 60 / 135 Loss: 4.975504398345947 Tokens per Sec: 24189.854894707107
Epoch Step: 65 / 135 Loss: 6.0370588302612305 Tokens per Sec: 19450.72744842683
Epoch Step: 70 / 135 Loss: 6.6796183586120605 Tokens per Sec: 21795.610866397026
Epoch Step: 75 / 135 Loss: 2.532930374145508 Tokens per Sec: 14232.973853814598
Epoch Step: 80 / 135 Loss: 9.202601432800293 Tokens per Sec: 19246.835752051666
Epoch Step: 85 / 135 Loss: 38.55195617675781 Tokens per Sec: 19490.29835324718
Epoch Step: 90 / 135 Loss: 5.805543899536133 Tokens per Sec: 18452.869772250353
Epoch Step: 95 / 135 Loss: 2.1960315704345703 Tokens per Sec: 16449.50848340651
Epoch Step: 100 / 135 Loss: 6.733931541442871 Tokens per Sec: 23806.90669680312
Epoch Step: 105 / 135 Loss: 3.7347750663757324 Tokens per Sec: 18616.188336498202
Epoch Step: 110 / 135 Loss: 6.67756462097168 Tokens per Sec: 19015.744774986444
Epoch Step: 115 / 135 Loss: 3.9765985012054443 Tokens per Sec: 16215.75511604539
Epoch Step: 120 / 135 Loss: 4.3111042976379395 Tokens per Sec: 16249.050361454858
Epoch Step: 125 / 135 Loss: 4.038890361785889 Tokens per Sec: 19110.55959411726
Epoch Step: 130 / 135 Loss: 11.517446517944336 Tokens per Sec: 18201.98001623751
Epoch Step: 135 / 135 Loss: 3.2883520126342773 Tokens per Sec: 20420.822300719607
Epoch ended with duration 0:00:12.792870
Train perplexity: 1.2756292291854594
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.669486
Validation perplexity: 1.7872734739546545
Epoch 112 / 1000
Epoch Step: 5 / 135 Loss: 1.778603196144104 Tokens per Sec: 16257.78879226836
Epoch Step: 10 / 135 Loss: 4.201709270477295 Tokens per Sec: 22268.152741919137
Epoch Step: 15 / 135 Loss: 6.596467018127441 Tokens per Sec: 20289.14663497911
Epoch Step: 20 / 135 Loss: 2.6840672492980957 Tokens per Sec: 21844.028762706534
Epoch Step: 25 / 135 Loss: 2.732570171356201 Tokens per Sec: 15986.157107821316
Epoch Step: 30 / 135 Loss: 6.445290565490723 Tokens per Sec: 21623.993538441857
Epoch Step: 35 / 135 Loss: 3.1079280376434326 Tokens per Sec: 21859.670559098508
Epoch Step: 40 / 135 Loss: 5.92241096496582 Tokens per Sec: 22227.511287297933
Epoch Step: 45 / 135 Loss: 2.086354970932007 Tokens per Sec: 19228.031978221
Epoch Step: 50 / 135 Loss: 2.3966383934020996 Tokens per Sec: 17240.89428715685
Epoch Step: 55 / 135 Loss: 1.8116645812988281 Tokens per Sec: 21403.869489371427
Epoch Step: 60 / 135 Loss: 4.14014196395874 Tokens per Sec: 21801.296256358528
Epoch Step: 65 / 135 Loss: 4.24269437789917 Tokens per Sec: 18738.47097121327
Epoch Step: 70 / 135 Loss: 4.094709873199463 Tokens per Sec: 23563.13693974114
Epoch Step: 75 / 135 Loss: 3.8943111896514893 Tokens per Sec: 18885.87347291837
Epoch Step: 80 / 135 Loss: 4.789403438568115 Tokens per Sec: 20218.3356557019
Epoch Step: 85 / 135 Loss: 4.565432548522949 Tokens per Sec: 19058.54907572695
Epoch Step: 90 / 135 Loss: 4.426002025604248 Tokens per Sec: 23297.544031056477
Epoch Step: 95 / 135 Loss: 43.55625534057617 Tokens per Sec: 23365.160849047024
Epoch Step: 100 / 135 Loss: 2.6869747638702393 Tokens per Sec: 16863.707307084966
Epoch Step: 105 / 135 Loss: 2.9082326889038086 Tokens per Sec: 15941.13496801053
Epoch Step: 110 / 135 Loss: 5.569323539733887 Tokens per Sec: 17833.126655065655
Epoch Step: 115 / 135 Loss: 7.033790588378906 Tokens per Sec: 19897.71132024067
Epoch Step: 120 / 135 Loss: 4.692987442016602 Tokens per Sec: 18755.341617648617
Epoch Step: 125 / 135 Loss: 5.098817348480225 Tokens per Sec: 19391.092173539662
Epoch Step: 130 / 135 Loss: 3.979727268218994 Tokens per Sec: 18472.79970075174
Epoch Step: 135 / 135 Loss: 1.882594108581543 Tokens per Sec: 16432.8697717749
Epoch ended with duration 0:00:12.928546
Train perplexity: 1.2678667488526145
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656044
Validation perplexity: 1.4878693671454755
Epoch 113 / 1000
Epoch Step: 5 / 135 Loss: 2.8119237422943115 Tokens per Sec: 19175.19266670316
Epoch Step: 10 / 135 Loss: 4.366329193115234 Tokens per Sec: 22542.280575162844
Epoch Step: 15 / 135 Loss: 5.221047401428223 Tokens per Sec: 21806.14283031699
Epoch Step: 20 / 135 Loss: 34.14653015136719 Tokens per Sec: 19055.65675565404
Epoch Step: 25 / 135 Loss: 1.3528294563293457 Tokens per Sec: 21653.809993203355
Epoch Step: 30 / 135 Loss: 3.669800281524658 Tokens per Sec: 19614.81452234401
Epoch Step: 35 / 135 Loss: 22.114233016967773 Tokens per Sec: 21407.551669476605
Epoch Step: 40 / 135 Loss: 3.458460807800293 Tokens per Sec: 18476.126676923155
Epoch Step: 45 / 135 Loss: 4.675095558166504 Tokens per Sec: 17176.0028912771
Epoch Step: 50 / 135 Loss: 51.32766342163086 Tokens per Sec: 22150.75812395524
Epoch Step: 55 / 135 Loss: 2.900373935699463 Tokens per Sec: 20832.11583381951
Epoch Step: 60 / 135 Loss: 14.173493385314941 Tokens per Sec: 16528.966070656363
Epoch Step: 65 / 135 Loss: 6.651789665222168 Tokens per Sec: 19377.958521839224
Epoch Step: 70 / 135 Loss: 6.088246822357178 Tokens per Sec: 22023.712181555235
Epoch Step: 75 / 135 Loss: 3.2075552940368652 Tokens per Sec: 22250.73852458538
Epoch Step: 80 / 135 Loss: 5.93228006362915 Tokens per Sec: 21788.55846082838
Epoch Step: 85 / 135 Loss: 4.604729652404785 Tokens per Sec: 20230.603691997985
Epoch Step: 90 / 135 Loss: 5.8828582763671875 Tokens per Sec: 22888.410141154494
Epoch Step: 95 / 135 Loss: 30.54639434814453 Tokens per Sec: 21364.805858277865
Epoch Step: 100 / 135 Loss: 6.263336181640625 Tokens per Sec: 19205.005329467353
Epoch Step: 105 / 135 Loss: 3.2629802227020264 Tokens per Sec: 18800.681865098275
Epoch Step: 110 / 135 Loss: 4.674630641937256 Tokens per Sec: 18013.159057564073
Epoch Step: 115 / 135 Loss: 3.027801513671875 Tokens per Sec: 18624.249673558654
Epoch Step: 120 / 135 Loss: 6.106651782989502 Tokens per Sec: 19020.696602839304
Epoch Step: 125 / 135 Loss: 3.129045009613037 Tokens per Sec: 18191.710640559697
Epoch Step: 130 / 135 Loss: 36.999385833740234 Tokens per Sec: 20447.41034737163
Epoch Step: 135 / 135 Loss: 5.577664852142334 Tokens per Sec: 16915.109324253015
Epoch ended with duration 0:00:12.723606
Train perplexity: 1.276431296612296
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645976
Validation perplexity: 1.29406706122679
Model saved best_on_validation!
Epoch 114 / 1000
Epoch Step: 5 / 135 Loss: 36.47187423706055 Tokens per Sec: 18634.65480961467
Epoch Step: 10 / 135 Loss: 4.557986259460449 Tokens per Sec: 22705.38477233079
Epoch Step: 15 / 135 Loss: 5.349440574645996 Tokens per Sec: 23408.097302266076
Epoch Step: 20 / 135 Loss: 3.294220447540283 Tokens per Sec: 20700.524725535757
Epoch Step: 25 / 135 Loss: 3.458498001098633 Tokens per Sec: 19029.993247020106
Epoch Step: 30 / 135 Loss: 4.599906921386719 Tokens per Sec: 18320.95751539331
Epoch Step: 35 / 135 Loss: 5.278173923492432 Tokens per Sec: 21707.073239689787
Epoch Step: 40 / 135 Loss: 1.9449913501739502 Tokens per Sec: 21091.10673174738
Epoch Step: 45 / 135 Loss: 4.000945091247559 Tokens per Sec: 25315.366825957775
Epoch Step: 50 / 135 Loss: 7.002866268157959 Tokens per Sec: 19914.297718001602
Epoch Step: 55 / 135 Loss: 2.7483091354370117 Tokens per Sec: 20794.674798332217
Epoch Step: 60 / 135 Loss: 7.042724132537842 Tokens per Sec: 21055.595203214234
Epoch Step: 65 / 135 Loss: 1.747202754020691 Tokens per Sec: 21786.140516153577
Epoch Step: 70 / 135 Loss: 3.2794244289398193 Tokens per Sec: 16828.97260569964
Epoch Step: 75 / 135 Loss: 6.2200927734375 Tokens per Sec: 18183.402196392075
Epoch Step: 80 / 135 Loss: 2.7029457092285156 Tokens per Sec: 19590.386233227524
Epoch Step: 85 / 135 Loss: 4.757301330566406 Tokens per Sec: 17081.673628049226
Epoch Step: 90 / 135 Loss: 3.0105538368225098 Tokens per Sec: 21262.800240774726
Epoch Step: 95 / 135 Loss: 3.7552943229675293 Tokens per Sec: 21589.82152636803
Epoch Step: 100 / 135 Loss: 2.5408008098602295 Tokens per Sec: 19543.95946955894
Epoch Step: 105 / 135 Loss: 2.561875104904175 Tokens per Sec: 17840.946248615288
Epoch Step: 110 / 135 Loss: 4.447287082672119 Tokens per Sec: 17894.391003865527
Epoch Step: 115 / 135 Loss: 4.460272312164307 Tokens per Sec: 20849.303377148826
Epoch Step: 120 / 135 Loss: 2.918017864227295 Tokens per Sec: 16029.846453619575
Epoch Step: 125 / 135 Loss: 2.152627468109131 Tokens per Sec: 17069.385231883152
Epoch Step: 130 / 135 Loss: 4.528255939483643 Tokens per Sec: 19841.986563436323
Epoch Step: 135 / 135 Loss: 3.59195876121521 Tokens per Sec: 18103.4654786776
Epoch ended with duration 0:00:12.824038
Train perplexity: 1.2380447515654591
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657877
Validation perplexity: 1.6830204682776797
Epoch 115 / 1000
Epoch Step: 5 / 135 Loss: 2.7174715995788574 Tokens per Sec: 21516.981358782417
Epoch Step: 10 / 135 Loss: 4.093716621398926 Tokens per Sec: 23649.785798936064
Epoch Step: 15 / 135 Loss: 4.72112512588501 Tokens per Sec: 23629.771391280072
Epoch Step: 20 / 135 Loss: 2.2840142250061035 Tokens per Sec: 17926.75110164338
Epoch Step: 25 / 135 Loss: 2.5314340591430664 Tokens per Sec: 18783.7584153313
Epoch Step: 30 / 135 Loss: 4.220098972320557 Tokens per Sec: 22456.83007121876
Epoch Step: 35 / 135 Loss: 4.668639183044434 Tokens per Sec: 22203.53811641894
Epoch Step: 40 / 135 Loss: 2.827224016189575 Tokens per Sec: 20117.712511947248
Epoch Step: 45 / 135 Loss: 4.356566429138184 Tokens per Sec: 18465.6568123199
Epoch Step: 50 / 135 Loss: 4.673164367675781 Tokens per Sec: 18286.90689141242
Epoch Step: 55 / 135 Loss: 4.112128257751465 Tokens per Sec: 18792.518252948827
Epoch Step: 60 / 135 Loss: 7.170596599578857 Tokens per Sec: 23496.995211383382
Epoch Step: 65 / 135 Loss: 6.338665008544922 Tokens per Sec: 20432.425882386113
Epoch Step: 70 / 135 Loss: 3.729076862335205 Tokens per Sec: 17328.933843733386
Epoch Step: 75 / 135 Loss: 5.936015605926514 Tokens per Sec: 18127.858568373325
Epoch Step: 80 / 135 Loss: 14.93266487121582 Tokens per Sec: 21490.246820911918
Epoch Step: 85 / 135 Loss: 3.8082969188690186 Tokens per Sec: 20572.536403552927
Epoch Step: 90 / 135 Loss: 6.307076454162598 Tokens per Sec: 18107.35268645589
Epoch Step: 95 / 135 Loss: 2.665830135345459 Tokens per Sec: 21505.830867678444
Epoch Step: 100 / 135 Loss: 66.61260223388672 Tokens per Sec: 21011.8154776261
Epoch Step: 105 / 135 Loss: 3.1930603981018066 Tokens per Sec: 17375.772325825896
Epoch Step: 110 / 135 Loss: 5.451669692993164 Tokens per Sec: 19206.24961486189
Epoch Step: 115 / 135 Loss: 5.544900894165039 Tokens per Sec: 19949.019187131667
Epoch Step: 120 / 135 Loss: 3.238574981689453 Tokens per Sec: 19182.97116566676
Epoch Step: 125 / 135 Loss: 3.1197173595428467 Tokens per Sec: 17265.594926400732
Epoch Step: 130 / 135 Loss: 3.625808000564575 Tokens per Sec: 16638.441003009277
Epoch Step: 135 / 135 Loss: 3.6400511264801025 Tokens per Sec: 20179.357072251296
Epoch ended with duration 0:00:12.780610
Train perplexity: 1.2361324575415014
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658279
Validation perplexity: 1.6426092993536685
Model saved checkpoint!
Epoch 116 / 1000
Epoch Step: 5 / 135 Loss: 13.03504467010498 Tokens per Sec: 18375.530229942815
Epoch Step: 10 / 135 Loss: 4.742847919464111 Tokens per Sec: 21947.95619237319
Epoch Step: 15 / 135 Loss: 1.990228533744812 Tokens per Sec: 17230.662956915272
Epoch Step: 20 / 135 Loss: 1.7394986152648926 Tokens per Sec: 19577.47574437933
Epoch Step: 25 / 135 Loss: 5.098355293273926 Tokens per Sec: 20790.50021139702
Epoch Step: 30 / 135 Loss: 4.954457759857178 Tokens per Sec: 23679.418020670615
Epoch Step: 35 / 135 Loss: 5.266748905181885 Tokens per Sec: 19443.30245691859
Epoch Step: 40 / 135 Loss: 1.4193497896194458 Tokens per Sec: 19961.741350436507
Epoch Step: 45 / 135 Loss: 46.0644645690918 Tokens per Sec: 23899.12114965534
Epoch Step: 50 / 135 Loss: 1.7827534675598145 Tokens per Sec: 20645.6730223783
Epoch Step: 55 / 135 Loss: 1.559773564338684 Tokens per Sec: 20983.757876536954
Epoch Step: 60 / 135 Loss: 2.1969239711761475 Tokens per Sec: 17930.372162311527
Epoch Step: 65 / 135 Loss: 4.6176886558532715 Tokens per Sec: 20544.553588093022
Epoch Step: 70 / 135 Loss: 2.7725372314453125 Tokens per Sec: 19425.23761869557
Epoch Step: 75 / 135 Loss: 3.950523853302002 Tokens per Sec: 20113.977789497258
Epoch Step: 80 / 135 Loss: 4.610116958618164 Tokens per Sec: 21434.989850337894
Epoch Step: 85 / 135 Loss: 2.9007513523101807 Tokens per Sec: 23144.45964740582
Epoch Step: 90 / 135 Loss: 5.563571453094482 Tokens per Sec: 22788.966115995572
Epoch Step: 95 / 135 Loss: 4.8478779792785645 Tokens per Sec: 19828.004757571525
Epoch Step: 100 / 135 Loss: 4.051167964935303 Tokens per Sec: 19054.15576553686
Epoch Step: 105 / 135 Loss: 2.3789193630218506 Tokens per Sec: 17514.71590331622
Epoch Step: 110 / 135 Loss: 5.7620978355407715 Tokens per Sec: 20420.82474378139
Epoch Step: 115 / 135 Loss: 5.117633819580078 Tokens per Sec: 17865.881176127987
Epoch Step: 120 / 135 Loss: 4.908393383026123 Tokens per Sec: 17404.053659544094
Epoch Step: 125 / 135 Loss: 2.823392629623413 Tokens per Sec: 18777.853322441206
Epoch Step: 130 / 135 Loss: 3.6758861541748047 Tokens per Sec: 17340.409283273577
Epoch Step: 135 / 135 Loss: 2.252762794494629 Tokens per Sec: 16199.875405953026
Epoch ended with duration 0:00:12.825669
Train perplexity: 1.2242300564794857
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.661660
Validation perplexity: 1.5926646827907411
Epoch 117 / 1000
Epoch Step: 5 / 135 Loss: 4.710533142089844 Tokens per Sec: 22872.282972818397
Epoch Step: 10 / 135 Loss: 4.887117385864258 Tokens per Sec: 18233.47622361577
Epoch Step: 15 / 135 Loss: 4.347137928009033 Tokens per Sec: 21078.744652698646
Epoch Step: 20 / 135 Loss: 2.979902744293213 Tokens per Sec: 21768.313630157965
Epoch Step: 25 / 135 Loss: 7.51263952255249 Tokens per Sec: 20861.502745162503
Epoch Step: 30 / 135 Loss: 3.060323715209961 Tokens per Sec: 17357.991676373673
Epoch Step: 35 / 135 Loss: 4.634572505950928 Tokens per Sec: 20989.421945685288
Epoch Step: 40 / 135 Loss: 1.729457139968872 Tokens per Sec: 19322.21541222677
Epoch Step: 45 / 135 Loss: 4.83104133605957 Tokens per Sec: 20403.55661038036
Epoch Step: 50 / 135 Loss: 4.920771598815918 Tokens per Sec: 20519.54049676473
Epoch Step: 55 / 135 Loss: 4.607893943786621 Tokens per Sec: 23347.051138532122
Epoch Step: 60 / 135 Loss: 29.963207244873047 Tokens per Sec: 22524.91519572923
Epoch Step: 65 / 135 Loss: 1.4007399082183838 Tokens per Sec: 19170.995308790727
Epoch Step: 70 / 135 Loss: 2.0297117233276367 Tokens per Sec: 16629.68892070447
Epoch Step: 75 / 135 Loss: 3.2201988697052 Tokens per Sec: 22412.651654030735
Epoch Step: 80 / 135 Loss: 4.259955406188965 Tokens per Sec: 22883.721242749718
Epoch Step: 85 / 135 Loss: 3.2689015865325928 Tokens per Sec: 18604.8761253488
Epoch Step: 90 / 135 Loss: 3.728572368621826 Tokens per Sec: 20115.657560963387
Epoch Step: 95 / 135 Loss: 4.373082637786865 Tokens per Sec: 21681.71546738419
Epoch Step: 100 / 135 Loss: 6.12574577331543 Tokens per Sec: 19860.559512091237
Epoch Step: 105 / 135 Loss: 3.201995611190796 Tokens per Sec: 18996.38065508322
Epoch Step: 110 / 135 Loss: 2.7474942207336426 Tokens per Sec: 19684.085486720596
Epoch Step: 115 / 135 Loss: 3.1475470066070557 Tokens per Sec: 15977.181739052507
Epoch Step: 120 / 135 Loss: 5.108570098876953 Tokens per Sec: 18380.332522126162
Epoch Step: 125 / 135 Loss: 3.4319000244140625 Tokens per Sec: 17627.67589939734
Epoch Step: 130 / 135 Loss: 3.9832324981689453 Tokens per Sec: 17706.216650544713
Epoch Step: 135 / 135 Loss: 1.851321816444397 Tokens per Sec: 18448.65619417259
Epoch ended with duration 0:00:12.811466
Train perplexity: 1.2235222586431034
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648860
Validation perplexity: 1.371268345333885
Epoch 118 / 1000
Epoch Step: 5 / 135 Loss: 4.256378173828125 Tokens per Sec: 17671.995999125946
Epoch Step: 10 / 135 Loss: 1.8345463275909424 Tokens per Sec: 21613.495552185257
Epoch Step: 15 / 135 Loss: 3.7859668731689453 Tokens per Sec: 17277.029043977578
Epoch Step: 20 / 135 Loss: 24.005447387695312 Tokens per Sec: 23409.575718867123
Epoch Step: 25 / 135 Loss: 23.76568603515625 Tokens per Sec: 19606.154070901022
Epoch Step: 30 / 135 Loss: 2.4905292987823486 Tokens per Sec: 19243.39214698852
Epoch Step: 35 / 135 Loss: 4.416306972503662 Tokens per Sec: 18163.720847063683
Epoch Step: 40 / 135 Loss: 4.702953815460205 Tokens per Sec: 21457.245651239704
Epoch Step: 45 / 135 Loss: 2.1193552017211914 Tokens per Sec: 19316.277584343614
Epoch Step: 50 / 135 Loss: 7.124127388000488 Tokens per Sec: 22577.923601357288
Epoch Step: 55 / 135 Loss: 3.3460803031921387 Tokens per Sec: 19938.656006920213
Epoch Step: 60 / 135 Loss: 1.7747124433517456 Tokens per Sec: 22065.090692385547
Epoch Step: 65 / 135 Loss: 2.570929527282715 Tokens per Sec: 21528.898739694047
Epoch Step: 70 / 135 Loss: 4.135831356048584 Tokens per Sec: 21743.58833212937
Epoch Step: 75 / 135 Loss: 7.704659461975098 Tokens per Sec: 20706.126543214697
Epoch Step: 80 / 135 Loss: 4.498790264129639 Tokens per Sec: 24294.38667519452
Epoch Step: 85 / 135 Loss: 3.066669225692749 Tokens per Sec: 20771.19096517089
Epoch Step: 90 / 135 Loss: 2.8741140365600586 Tokens per Sec: 22653.51273354557
Epoch Step: 95 / 135 Loss: 2.785839796066284 Tokens per Sec: 19942.491840164268
Epoch Step: 100 / 135 Loss: 6.1263041496276855 Tokens per Sec: 18817.681719880744
Epoch Step: 105 / 135 Loss: 21.0017032623291 Tokens per Sec: 18492.55995169472
Epoch Step: 110 / 135 Loss: 5.690179347991943 Tokens per Sec: 19131.314576635876
Epoch Step: 115 / 135 Loss: 3.7549822330474854 Tokens per Sec: 18422.33227606617
Epoch Step: 120 / 135 Loss: 2.641209125518799 Tokens per Sec: 16541.113126534583
Epoch Step: 125 / 135 Loss: 2.1166038513183594 Tokens per Sec: 19399.459545718073
Epoch Step: 130 / 135 Loss: 3.613661766052246 Tokens per Sec: 19141.39502877143
Epoch Step: 135 / 135 Loss: 3.4179508686065674 Tokens per Sec: 16715.839049419388
Epoch ended with duration 0:00:12.768141
Train perplexity: 1.2026122013496723
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.647362
Validation perplexity: 1.2983435930846325
Epoch 119 / 1000
Epoch Step: 5 / 135 Loss: 4.817260265350342 Tokens per Sec: 19367.142721970533
Epoch Step: 10 / 135 Loss: 4.942266941070557 Tokens per Sec: 21428.134957270257
Epoch Step: 15 / 135 Loss: 3.6729791164398193 Tokens per Sec: 19134.612643822187
Epoch Step: 20 / 135 Loss: 2.3979451656341553 Tokens per Sec: 20850.158652422208
Epoch Step: 25 / 135 Loss: 2.9668707847595215 Tokens per Sec: 24556.680886522958
Epoch Step: 30 / 135 Loss: 3.290104627609253 Tokens per Sec: 20504.53580566509
Epoch Step: 35 / 135 Loss: 2.3708291053771973 Tokens per Sec: 18754.74224402309
Epoch Step: 40 / 135 Loss: 34.947547912597656 Tokens per Sec: 21524.71863001909
Epoch Step: 45 / 135 Loss: 1.1975771188735962 Tokens per Sec: 18728.86164365576
Epoch Step: 50 / 135 Loss: 2.103595018386841 Tokens per Sec: 22952.46314470793
Epoch Step: 55 / 135 Loss: 2.642930507659912 Tokens per Sec: 24366.1804760231
Epoch Step: 60 / 135 Loss: 4.670406341552734 Tokens per Sec: 18142.18307681277
Epoch Step: 65 / 135 Loss: 2.2441153526306152 Tokens per Sec: 22294.96041048479
Epoch Step: 70 / 135 Loss: 3.7065651416778564 Tokens per Sec: 20621.939790916957
Epoch Step: 75 / 135 Loss: 7.335492134094238 Tokens per Sec: 20488.295393234195
Epoch Step: 80 / 135 Loss: 2.363640308380127 Tokens per Sec: 21221.161612311826
Epoch Step: 85 / 135 Loss: 3.265253782272339 Tokens per Sec: 21118.24076833913
Epoch Step: 90 / 135 Loss: 2.5856385231018066 Tokens per Sec: 18895.362033400364
Epoch Step: 95 / 135 Loss: 3.203176259994507 Tokens per Sec: 17353.46831899754
Epoch Step: 100 / 135 Loss: 32.372657775878906 Tokens per Sec: 17237.990680464558
Epoch Step: 105 / 135 Loss: 3.7397539615631104 Tokens per Sec: 17039.015979447424
Epoch Step: 110 / 135 Loss: 9.585963249206543 Tokens per Sec: 17520.127030644537
Epoch Step: 115 / 135 Loss: 13.307073593139648 Tokens per Sec: 17983.56822377451
Epoch Step: 120 / 135 Loss: 17.959802627563477 Tokens per Sec: 19143.271220902996
Epoch Step: 125 / 135 Loss: 16.437414169311523 Tokens per Sec: 16712.230796791744
Epoch Step: 130 / 135 Loss: 3.5696215629577637 Tokens per Sec: 19827.542406693483
Epoch Step: 135 / 135 Loss: 4.226740837097168 Tokens per Sec: 18381.913402366787
Epoch ended with duration 0:00:12.841379
Train perplexity: 1.2049913681135516
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650775
Validation perplexity: 1.4336328923749235
Epoch 120 / 1000
Epoch Step: 5 / 135 Loss: 2.98844051361084 Tokens per Sec: 17098.985590026237
Epoch Step: 10 / 135 Loss: 4.193244457244873 Tokens per Sec: 19741.325800743063
Epoch Step: 15 / 135 Loss: 4.129072189331055 Tokens per Sec: 23447.059717559678
Epoch Step: 20 / 135 Loss: 3.749833583831787 Tokens per Sec: 19348.000010812593
Epoch Step: 25 / 135 Loss: 4.67425012588501 Tokens per Sec: 21677.1868351596
Epoch Step: 30 / 135 Loss: 4.165764331817627 Tokens per Sec: 22031.897618345065
Epoch Step: 35 / 135 Loss: 2.1449224948883057 Tokens per Sec: 19144.918847446483
Epoch Step: 40 / 135 Loss: 4.715015411376953 Tokens per Sec: 20033.303828579323
Epoch Step: 45 / 135 Loss: 5.135342121124268 Tokens per Sec: 21248.808727996402
Epoch Step: 50 / 135 Loss: 28.944110870361328 Tokens per Sec: 20012.264753679392
Epoch Step: 55 / 135 Loss: 3.4696812629699707 Tokens per Sec: 24262.5851965468
Epoch Step: 60 / 135 Loss: 2.2257015705108643 Tokens per Sec: 19321.524214159224
Epoch Step: 65 / 135 Loss: 2.081631660461426 Tokens per Sec: 22803.544074897287
Epoch Step: 70 / 135 Loss: 2.260514974594116 Tokens per Sec: 20830.229249435768
Epoch Step: 75 / 135 Loss: 3.2470502853393555 Tokens per Sec: 20388.315897426997
Epoch Step: 80 / 135 Loss: 46.80647659301758 Tokens per Sec: 21837.001571929126
Epoch Step: 85 / 135 Loss: 2.2117273807525635 Tokens per Sec: 21218.909871756063
Epoch Step: 90 / 135 Loss: 4.580381393432617 Tokens per Sec: 19029.04958279804
Epoch Step: 95 / 135 Loss: 27.13510513305664 Tokens per Sec: 19078.741419580598
Epoch Step: 100 / 135 Loss: 4.216362953186035 Tokens per Sec: 20717.252780240804
Epoch Step: 105 / 135 Loss: 4.150665283203125 Tokens per Sec: 19469.372401005414
Epoch Step: 110 / 135 Loss: 4.701608657836914 Tokens per Sec: 16350.501525221422
Epoch Step: 115 / 135 Loss: 33.762603759765625 Tokens per Sec: 17201.469007540836
Epoch Step: 120 / 135 Loss: 3.165125608444214 Tokens per Sec: 17971.326875631403
Epoch Step: 125 / 135 Loss: 3.4405932426452637 Tokens per Sec: 16793.522784812692
Epoch Step: 130 / 135 Loss: 4.455247402191162 Tokens per Sec: 21082.021968760444
Epoch Step: 135 / 135 Loss: 3.0143208503723145 Tokens per Sec: 15411.365953674695
Epoch ended with duration 0:00:12.847162
Train perplexity: 1.2731912662691462
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654712
Validation perplexity: 1.4938669058033933
Model saved checkpoint!
Epoch 121 / 1000
Epoch Step: 5 / 135 Loss: 28.476486206054688 Tokens per Sec: 17422.35171133573
Epoch Step: 10 / 135 Loss: 1.329918622970581 Tokens per Sec: 18140.82733397055
Epoch Step: 15 / 135 Loss: 5.846258640289307 Tokens per Sec: 18841.03317958918
Epoch Step: 20 / 135 Loss: 1.6377344131469727 Tokens per Sec: 18936.73779673132
Epoch Step: 25 / 135 Loss: 1.1244215965270996 Tokens per Sec: 21223.71342535613
Epoch Step: 30 / 135 Loss: 3.2560901641845703 Tokens per Sec: 19872.796748794644
Epoch Step: 35 / 135 Loss: 28.635578155517578 Tokens per Sec: 20339.54990630984
Epoch Step: 40 / 135 Loss: 2.387028932571411 Tokens per Sec: 20885.716197014084
Epoch Step: 45 / 135 Loss: 4.8425750732421875 Tokens per Sec: 21653.980540624456
Epoch Step: 50 / 135 Loss: 3.3106961250305176 Tokens per Sec: 20446.562618485703
Epoch Step: 55 / 135 Loss: 2.2203378677368164 Tokens per Sec: 21819.634321606824
Epoch Step: 60 / 135 Loss: 3.320667028427124 Tokens per Sec: 17217.260035168536
Epoch Step: 65 / 135 Loss: 1.2665761709213257 Tokens per Sec: 21617.53776898235
Epoch Step: 70 / 135 Loss: 2.4410667419433594 Tokens per Sec: 16053.13457934046
Epoch Step: 75 / 135 Loss: 2.259605646133423 Tokens per Sec: 20568.046830262723
Epoch Step: 80 / 135 Loss: 3.088547468185425 Tokens per Sec: 23381.372194306237
Epoch Step: 85 / 135 Loss: 5.351525783538818 Tokens per Sec: 18656.236733562553
Epoch Step: 90 / 135 Loss: 3.772158145904541 Tokens per Sec: 21568.623673521808
Epoch Step: 95 / 135 Loss: 1.9428520202636719 Tokens per Sec: 24736.524380573028
Epoch Step: 100 / 135 Loss: 5.4760637283325195 Tokens per Sec: 24764.69105553749
Epoch Step: 105 / 135 Loss: 1.7096508741378784 Tokens per Sec: 16460.207008278012
Epoch Step: 110 / 135 Loss: 3.7305686473846436 Tokens per Sec: 18904.257887716412
Epoch Step: 115 / 135 Loss: 3.7694008350372314 Tokens per Sec: 19435.259783725498
Epoch Step: 120 / 135 Loss: 1.7628973722457886 Tokens per Sec: 17871.14384991782
Epoch Step: 125 / 135 Loss: 4.590997219085693 Tokens per Sec: 19053.914728581523
Epoch Step: 130 / 135 Loss: 5.3026123046875 Tokens per Sec: 18513.237874256298
Epoch Step: 135 / 135 Loss: 2.9206621646881104 Tokens per Sec: 18648.48498136797
Epoch ended with duration 0:00:12.800508
Train perplexity: 1.2023050995624123
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.661197
Validation perplexity: 1.5656890692928256
Epoch 122 / 1000
Epoch Step: 5 / 135 Loss: 3.3385002613067627 Tokens per Sec: 23012.480358743876
Epoch Step: 10 / 135 Loss: 3.683955669403076 Tokens per Sec: 21103.191084693623
Epoch Step: 15 / 135 Loss: 3.149686574935913 Tokens per Sec: 17374.342444170965
Epoch Step: 20 / 135 Loss: 3.14418888092041 Tokens per Sec: 21072.41893506358
Epoch Step: 25 / 135 Loss: 2.9448225498199463 Tokens per Sec: 19418.606089619214
Epoch Step: 30 / 135 Loss: 3.2503185272216797 Tokens per Sec: 20598.341413131464
Epoch Step: 35 / 135 Loss: 3.9630885124206543 Tokens per Sec: 24431.020743094978
Epoch Step: 40 / 135 Loss: 2.714677572250366 Tokens per Sec: 15753.148489786628
Epoch Step: 45 / 135 Loss: 18.42885398864746 Tokens per Sec: 21578.507692172472
Epoch Step: 50 / 135 Loss: 3.133302927017212 Tokens per Sec: 19720.33519591997
Epoch Step: 55 / 135 Loss: 4.171340465545654 Tokens per Sec: 18962.3834278769
Epoch Step: 60 / 135 Loss: 11.531951904296875 Tokens per Sec: 20451.55678280894
Epoch Step: 65 / 135 Loss: 4.656989574432373 Tokens per Sec: 21596.400835714332
Epoch Step: 70 / 135 Loss: 3.7330024242401123 Tokens per Sec: 16228.350185307827
Epoch Step: 75 / 135 Loss: 2.8680849075317383 Tokens per Sec: 23637.520283465998
Epoch Step: 80 / 135 Loss: 2.514542579650879 Tokens per Sec: 17615.880692307073
Epoch Step: 85 / 135 Loss: 3.6279890537261963 Tokens per Sec: 21764.75417455386
Epoch Step: 90 / 135 Loss: 2.128730535507202 Tokens per Sec: 18219.969673280728
Epoch Step: 95 / 135 Loss: 2.6239962577819824 Tokens per Sec: 23728.70057411936
Epoch Step: 100 / 135 Loss: 3.7819039821624756 Tokens per Sec: 21678.000983986734
Epoch Step: 105 / 135 Loss: 4.5815348625183105 Tokens per Sec: 19167.878326996197
Epoch Step: 110 / 135 Loss: 3.692267417907715 Tokens per Sec: 17346.80645608121
Epoch Step: 115 / 135 Loss: 2.9120054244995117 Tokens per Sec: 18844.177376707645
Epoch Step: 120 / 135 Loss: 4.71083402633667 Tokens per Sec: 17861.262324457675
Epoch Step: 125 / 135 Loss: 3.4090352058410645 Tokens per Sec: 16733.93447232263
Epoch Step: 130 / 135 Loss: 3.0556204319000244 Tokens per Sec: 17903.59149478927
Epoch Step: 135 / 135 Loss: 4.245641231536865 Tokens per Sec: 19802.45056366627
Epoch ended with duration 0:00:12.843090
Train perplexity: 1.1598046361551038
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654076
Validation perplexity: 1.6566962010251665
Epoch 123 / 1000
Epoch Step: 5 / 135 Loss: 4.499175548553467 Tokens per Sec: 16075.015624051523
Epoch Step: 10 / 135 Loss: 4.775969505310059 Tokens per Sec: 24427.34072987394
Epoch Step: 15 / 135 Loss: 1.5927449464797974 Tokens per Sec: 17801.506035150982
Epoch Step: 20 / 135 Loss: 4.187817096710205 Tokens per Sec: 19489.74809153819
Epoch Step: 25 / 135 Loss: 18.55422019958496 Tokens per Sec: 24584.935614493836
Epoch Step: 30 / 135 Loss: 2.826183557510376 Tokens per Sec: 24364.273586479456
Epoch Step: 35 / 135 Loss: 1.7409847974777222 Tokens per Sec: 18661.02848916925
Epoch Step: 40 / 135 Loss: 2.119980573654175 Tokens per Sec: 21847.316591424038
Epoch Step: 45 / 135 Loss: 2.979534864425659 Tokens per Sec: 16329.855283690611
Epoch Step: 50 / 135 Loss: 2.6783037185668945 Tokens per Sec: 21783.804639006234
Epoch Step: 55 / 135 Loss: 6.669509410858154 Tokens per Sec: 20309.51587213774
Epoch Step: 60 / 135 Loss: 7.595581531524658 Tokens per Sec: 19118.816981602737
Epoch Step: 65 / 135 Loss: 5.517242908477783 Tokens per Sec: 22623.11589982904
Epoch Step: 70 / 135 Loss: 26.296804428100586 Tokens per Sec: 19707.965659764523
Epoch Step: 75 / 135 Loss: 33.64430618286133 Tokens per Sec: 21313.06601802362
Epoch Step: 80 / 135 Loss: 32.76007080078125 Tokens per Sec: 19401.954116675784
Epoch Step: 85 / 135 Loss: 56.36832809448242 Tokens per Sec: 22770.51486376335
Epoch Step: 90 / 135 Loss: 4.081585884094238 Tokens per Sec: 19797.16706833616
Epoch Step: 95 / 135 Loss: 4.305243015289307 Tokens per Sec: 22872.476404019562
Epoch Step: 100 / 135 Loss: 2.748197317123413 Tokens per Sec: 18991.10586789192
Epoch Step: 105 / 135 Loss: 4.2148966789245605 Tokens per Sec: 18820.744305568725
Epoch Step: 110 / 135 Loss: 4.7176833152771 Tokens per Sec: 17694.209875663022
Epoch Step: 115 / 135 Loss: 5.6167402267456055 Tokens per Sec: 17599.232543383645
Epoch Step: 120 / 135 Loss: 3.772979259490967 Tokens per Sec: 19479.378847160056
Epoch Step: 125 / 135 Loss: 2.691774606704712 Tokens per Sec: 17081.80180696307
Epoch Step: 130 / 135 Loss: 3.6986331939697266 Tokens per Sec: 18968.20277164967
Epoch Step: 135 / 135 Loss: 2.4780426025390625 Tokens per Sec: 16183.99333817615
Epoch ended with duration 0:00:12.778661
Train perplexity: 1.3670535903152972
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649448
Validation perplexity: 1.3193157111918994
Epoch 124 / 1000
Epoch Step: 5 / 135 Loss: 3.288451671600342 Tokens per Sec: 20890.99990914424
Epoch Step: 10 / 135 Loss: 2.0878422260284424 Tokens per Sec: 17832.832993575277
Epoch Step: 15 / 135 Loss: 2.71100115776062 Tokens per Sec: 22466.844477011782
Epoch Step: 20 / 135 Loss: 2.251512050628662 Tokens per Sec: 24509.552917737885
Epoch Step: 25 / 135 Loss: 1.7685246467590332 Tokens per Sec: 16934.8801748028
Epoch Step: 30 / 135 Loss: 3.525397777557373 Tokens per Sec: 15837.99003087117
Epoch Step: 35 / 135 Loss: 5.649609088897705 Tokens per Sec: 21904.65241137271
Epoch Step: 40 / 135 Loss: 4.687047481536865 Tokens per Sec: 18340.3586887128
Epoch Step: 45 / 135 Loss: 3.4580929279327393 Tokens per Sec: 22434.57109805404
Epoch Step: 50 / 135 Loss: 4.415094375610352 Tokens per Sec: 17955.554231045313
Epoch Step: 55 / 135 Loss: 4.2222795486450195 Tokens per Sec: 21206.576648910213
Epoch Step: 60 / 135 Loss: 3.017486572265625 Tokens per Sec: 21393.049920023146
Epoch Step: 65 / 135 Loss: 4.538020610809326 Tokens per Sec: 19927.955017822947
Epoch Step: 70 / 135 Loss: 3.4337878227233887 Tokens per Sec: 22094.53393895572
Epoch Step: 75 / 135 Loss: 2.421973943710327 Tokens per Sec: 20950.102088469957
Epoch Step: 80 / 135 Loss: 2.7025134563446045 Tokens per Sec: 21982.425851535645
Epoch Step: 85 / 135 Loss: 4.344100475311279 Tokens per Sec: 21235.796404542652
Epoch Step: 90 / 135 Loss: 2.2248616218566895 Tokens per Sec: 19572.17323483947
Epoch Step: 95 / 135 Loss: 2.812544584274292 Tokens per Sec: 18814.38578524174
Epoch Step: 100 / 135 Loss: 2.9460246562957764 Tokens per Sec: 21638.84974130662
Epoch Step: 105 / 135 Loss: 25.745506286621094 Tokens per Sec: 16180.791578712515
Epoch Step: 110 / 135 Loss: 4.494176387786865 Tokens per Sec: 18729.305816564203
Epoch Step: 115 / 135 Loss: 3.799220085144043 Tokens per Sec: 18861.909178127997
Epoch Step: 120 / 135 Loss: 3.8567802906036377 Tokens per Sec: 20146.528520235064
Epoch Step: 125 / 135 Loss: 2.102065086364746 Tokens per Sec: 18467.0584259017
Epoch Step: 130 / 135 Loss: 3.1771786212921143 Tokens per Sec: 17030.278991170024
Epoch Step: 135 / 135 Loss: 1.7798813581466675 Tokens per Sec: 18955.049363249105
Epoch ended with duration 0:00:12.780568
Train perplexity: 1.1637609839084653
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650974
Validation perplexity: 1.4779471082943638
Epoch 125 / 1000
Epoch Step: 5 / 135 Loss: 4.149472236633301 Tokens per Sec: 21164.24675187894
Epoch Step: 10 / 135 Loss: 3.4936821460723877 Tokens per Sec: 22182.29482041495
Epoch Step: 15 / 135 Loss: 3.463268756866455 Tokens per Sec: 21789.514036893426
Epoch Step: 20 / 135 Loss: 1.4958140850067139 Tokens per Sec: 21064.381617689218
Epoch Step: 25 / 135 Loss: 2.685598611831665 Tokens per Sec: 24221.485330163257
Epoch Step: 30 / 135 Loss: 2.235072612762451 Tokens per Sec: 19397.767085072734
Epoch Step: 35 / 135 Loss: 2.46578049659729 Tokens per Sec: 24758.86339802638
Epoch Step: 40 / 135 Loss: 3.311361789703369 Tokens per Sec: 19988.652761178208
Epoch Step: 45 / 135 Loss: 56.6569938659668 Tokens per Sec: 18633.326386022978
Epoch Step: 50 / 135 Loss: 2.3939661979675293 Tokens per Sec: 18379.104017092388
Epoch Step: 55 / 135 Loss: 3.464888572692871 Tokens per Sec: 22940.094348471557
Epoch Step: 60 / 135 Loss: 5.581335544586182 Tokens per Sec: 14666.088107720989
Epoch Step: 65 / 135 Loss: 18.132530212402344 Tokens per Sec: 20387.31860716553
Epoch Step: 70 / 135 Loss: 5.109498023986816 Tokens per Sec: 20369.279958453077
Epoch Step: 75 / 135 Loss: 2.964630603790283 Tokens per Sec: 19611.500448995484
Epoch Step: 80 / 135 Loss: 3.8493549823760986 Tokens per Sec: 20502.352810880853
Epoch Step: 85 / 135 Loss: 2.6197142601013184 Tokens per Sec: 21098.822279714506
Epoch Step: 90 / 135 Loss: 2.5015573501586914 Tokens per Sec: 23764.99006208042
Epoch Step: 95 / 135 Loss: 3.7014880180358887 Tokens per Sec: 19155.800393035457
Epoch Step: 100 / 135 Loss: 3.2399630546569824 Tokens per Sec: 20772.437546110814
Epoch Step: 105 / 135 Loss: 3.393939971923828 Tokens per Sec: 17575.63723113933
Epoch Step: 110 / 135 Loss: 3.144251823425293 Tokens per Sec: 20530.16095916571
Epoch Step: 115 / 135 Loss: 2.6462643146514893 Tokens per Sec: 18451.27715530584
Epoch Step: 120 / 135 Loss: 3.85799503326416 Tokens per Sec: 17592.193534946124
Epoch Step: 125 / 135 Loss: 1.5555616617202759 Tokens per Sec: 18656.10554901436
Epoch Step: 130 / 135 Loss: 2.8987584114074707 Tokens per Sec: 17124.83419981836
Epoch Step: 135 / 135 Loss: 2.913074254989624 Tokens per Sec: 17312.09291275612
Epoch ended with duration 0:00:12.719537
Train perplexity: 1.187786581619282
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.656505
Validation perplexity: 1.4943205741576275
Model saved checkpoint!
Epoch 126 / 1000
Epoch Step: 5 / 135 Loss: 3.049295663833618 Tokens per Sec: 22962.329123018735
Epoch Step: 10 / 135 Loss: 4.416003227233887 Tokens per Sec: 20222.69454365845
Epoch Step: 15 / 135 Loss: 1.8118799924850464 Tokens per Sec: 23067.84566896262
Epoch Step: 20 / 135 Loss: 3.0331199169158936 Tokens per Sec: 17199.06481705281
Epoch Step: 25 / 135 Loss: 3.548367977142334 Tokens per Sec: 21673.452240738745
Epoch Step: 30 / 135 Loss: 1.9471491575241089 Tokens per Sec: 19164.22858856684
Epoch Step: 35 / 135 Loss: 1.985036015510559 Tokens per Sec: 21203.965942437517
Epoch Step: 40 / 135 Loss: 2.939995050430298 Tokens per Sec: 16593.982015261125
Epoch Step: 45 / 135 Loss: 2.1706349849700928 Tokens per Sec: 21766.89692809896
Epoch Step: 50 / 135 Loss: 2.5999374389648438 Tokens per Sec: 15051.165463847641
Epoch Step: 55 / 135 Loss: 1.409363031387329 Tokens per Sec: 20245.047738025194
Epoch Step: 60 / 135 Loss: 2.1204442977905273 Tokens per Sec: 20001.379139115837
Epoch Step: 65 / 135 Loss: 3.241647958755493 Tokens per Sec: 16383.06886927939
Epoch Step: 70 / 135 Loss: 5.518927097320557 Tokens per Sec: 18423.0861930594
Epoch Step: 75 / 135 Loss: 3.654872179031372 Tokens per Sec: 22919.215793808573
Epoch Step: 80 / 135 Loss: 3.5786075592041016 Tokens per Sec: 21191.85354739369
Epoch Step: 85 / 135 Loss: 2.949727773666382 Tokens per Sec: 22844.97161968373
Epoch Step: 90 / 135 Loss: 4.6871161460876465 Tokens per Sec: 22266.029265013625
Epoch Step: 95 / 135 Loss: 1.135514259338379 Tokens per Sec: 24320.17045505073
Epoch Step: 100 / 135 Loss: 1.1160659790039062 Tokens per Sec: 20657.3840543536
Epoch Step: 105 / 135 Loss: 1.345892310142517 Tokens per Sec: 18361.44336496908
Epoch Step: 110 / 135 Loss: 2.340791702270508 Tokens per Sec: 17019.929000454704
Epoch Step: 115 / 135 Loss: 12.892822265625 Tokens per Sec: 16358.1916659054
Epoch Step: 120 / 135 Loss: 2.6837146282196045 Tokens per Sec: 18674.353498476914
Epoch Step: 125 / 135 Loss: 4.058002948760986 Tokens per Sec: 19044.415931471456
Epoch Step: 130 / 135 Loss: 1.9774949550628662 Tokens per Sec: 19754.644228286837
Epoch Step: 135 / 135 Loss: 2.8905656337738037 Tokens per Sec: 19855.917462781617
Epoch ended with duration 0:00:12.790936
Train perplexity: 1.1986423452513986
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.677592
Validation perplexity: 1.4298703405218933
Epoch 127 / 1000
Epoch Step: 5 / 135 Loss: 33.95398712158203 Tokens per Sec: 20517.656424104967
Epoch Step: 10 / 135 Loss: 4.144586086273193 Tokens per Sec: 17648.477106210583
Epoch Step: 15 / 135 Loss: 1.8517545461654663 Tokens per Sec: 23503.160957900163
Epoch Step: 20 / 135 Loss: 4.531397819519043 Tokens per Sec: 21911.4816814212
Epoch Step: 25 / 135 Loss: 1.4982067346572876 Tokens per Sec: 18348.93223259836
Epoch Step: 30 / 135 Loss: 2.5655815601348877 Tokens per Sec: 18963.663156224997
Epoch Step: 35 / 135 Loss: 33.78855514526367 Tokens per Sec: 22822.35557616378
Epoch Step: 40 / 135 Loss: 1.886898398399353 Tokens per Sec: 20997.960850295378
Epoch Step: 45 / 135 Loss: 6.3942179679870605 Tokens per Sec: 16153.650786348868
Epoch Step: 50 / 135 Loss: 1.5038026571273804 Tokens per Sec: 20616.63209954266
Epoch Step: 55 / 135 Loss: 4.416145324707031 Tokens per Sec: 20503.899898249114
Epoch Step: 60 / 135 Loss: 2.870147228240967 Tokens per Sec: 16589.950489044244
Epoch Step: 65 / 135 Loss: 22.904077529907227 Tokens per Sec: 16916.638510216126
Epoch Step: 70 / 135 Loss: 1.1893110275268555 Tokens per Sec: 19812.980561393553
Epoch Step: 75 / 135 Loss: 2.5012874603271484 Tokens per Sec: 20485.08504034761
Epoch Step: 80 / 135 Loss: 3.936858892440796 Tokens per Sec: 19740.51382569278
Epoch Step: 85 / 135 Loss: 4.157775402069092 Tokens per Sec: 21891.938064675214
Epoch Step: 90 / 135 Loss: 4.624841213226318 Tokens per Sec: 23046.136144647604
Epoch Step: 95 / 135 Loss: 2.9116921424865723 Tokens per Sec: 22525.996490880647
Epoch Step: 100 / 135 Loss: 4.0167083740234375 Tokens per Sec: 21538.651821444742
Epoch Step: 105 / 135 Loss: 2.2248544692993164 Tokens per Sec: 19287.364824035216
Epoch Step: 110 / 135 Loss: 3.248232126235962 Tokens per Sec: 16870.544324245755
Epoch Step: 115 / 135 Loss: 1.7196059226989746 Tokens per Sec: 17006.96839892204
Epoch Step: 120 / 135 Loss: 4.522776126861572 Tokens per Sec: 19808.388245085203
Epoch Step: 125 / 135 Loss: 21.654359817504883 Tokens per Sec: 18439.816402018376
Epoch Step: 130 / 135 Loss: 3.1139109134674072 Tokens per Sec: 19877.42868146331
Epoch Step: 135 / 135 Loss: 2.030411720275879 Tokens per Sec: 17358.768662883052
Epoch ended with duration 0:00:12.911663
Train perplexity: 1.184303466151804
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650235
Validation perplexity: 1.353349588900857
Epoch 128 / 1000
Epoch Step: 5 / 135 Loss: 3.3305349349975586 Tokens per Sec: 20553.500787897232
Epoch Step: 10 / 135 Loss: 3.958317995071411 Tokens per Sec: 21907.565088011583
Epoch Step: 15 / 135 Loss: 3.1899495124816895 Tokens per Sec: 20257.333047490025
Epoch Step: 20 / 135 Loss: 2.817157506942749 Tokens per Sec: 20983.48854799572
Epoch Step: 25 / 135 Loss: 2.784945011138916 Tokens per Sec: 18082.61264494743
Epoch Step: 30 / 135 Loss: 3.670736312866211 Tokens per Sec: 24494.513346298598
Epoch Step: 35 / 135 Loss: 1.4417794942855835 Tokens per Sec: 18085.145923678436
Epoch Step: 40 / 135 Loss: 33.19243240356445 Tokens per Sec: 23447.547004827495
Epoch Step: 45 / 135 Loss: 3.3604025840759277 Tokens per Sec: 18770.203212382658
Epoch Step: 50 / 135 Loss: 3.3969101905822754 Tokens per Sec: 20402.472387937098
Epoch Step: 55 / 135 Loss: 3.6203999519348145 Tokens per Sec: 20710.30630018788
Epoch Step: 60 / 135 Loss: 2.1859970092773438 Tokens per Sec: 17389.578431185266
Epoch Step: 65 / 135 Loss: 2.7969226837158203 Tokens per Sec: 18457.74451724324
Epoch Step: 70 / 135 Loss: 19.317264556884766 Tokens per Sec: 23140.44606568502
Epoch Step: 75 / 135 Loss: 3.462161064147949 Tokens per Sec: 23588.321349284033
Epoch Step: 80 / 135 Loss: 3.3237838745117188 Tokens per Sec: 20211.318234571503
Epoch Step: 85 / 135 Loss: 2.3908822536468506 Tokens per Sec: 20072.742213961854
Epoch Step: 90 / 135 Loss: 1.0441261529922485 Tokens per Sec: 20122.541915533253
Epoch Step: 95 / 135 Loss: 4.564146518707275 Tokens per Sec: 20666.249696136885
Epoch Step: 100 / 135 Loss: 1.644418716430664 Tokens per Sec: 19489.64987424676
Epoch Step: 105 / 135 Loss: 3.1044063568115234 Tokens per Sec: 16150.156127827515
Epoch Step: 110 / 135 Loss: 3.0595972537994385 Tokens per Sec: 18400.401965874284
Epoch Step: 115 / 135 Loss: 2.770702838897705 Tokens per Sec: 18373.803493229825
Epoch Step: 120 / 135 Loss: 3.4548916816711426 Tokens per Sec: 19344.30024163874
Epoch Step: 125 / 135 Loss: 2.22434401512146 Tokens per Sec: 16544.61175449928
Epoch Step: 130 / 135 Loss: 1.1391631364822388 Tokens per Sec: 18584.897291800367
Epoch Step: 135 / 135 Loss: 3.5577220916748047 Tokens per Sec: 19002.643081279904
Epoch ended with duration 0:00:12.818009
Train perplexity: 1.1576488990599867
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.660559
Validation perplexity: 1.6443646175431217
Epoch 129 / 1000
Epoch Step: 5 / 135 Loss: 2.2909083366394043 Tokens per Sec: 19425.08547982565
Epoch Step: 10 / 135 Loss: 2.2346181869506836 Tokens per Sec: 23602.75605584907
Epoch Step: 15 / 135 Loss: 4.560765743255615 Tokens per Sec: 20171.52292811201
Epoch Step: 20 / 135 Loss: 1.3850833177566528 Tokens per Sec: 18369.611619353014
Epoch Step: 25 / 135 Loss: 37.433189392089844 Tokens per Sec: 19753.16614539408
Epoch Step: 30 / 135 Loss: 5.608689308166504 Tokens per Sec: 23357.78848772662
Epoch Step: 35 / 135 Loss: 3.3438916206359863 Tokens per Sec: 19435.971792410848
Epoch Step: 40 / 135 Loss: 2.023969888687134 Tokens per Sec: 18717.71559888828
Epoch Step: 45 / 135 Loss: 2.6956257820129395 Tokens per Sec: 21765.956035169827
Epoch Step: 50 / 135 Loss: 3.3727355003356934 Tokens per Sec: 18803.406638253906
Epoch Step: 55 / 135 Loss: 5.236569881439209 Tokens per Sec: 21819.7059441001
Epoch Step: 60 / 135 Loss: 2.364927053451538 Tokens per Sec: 20697.3970571273
Epoch Step: 65 / 135 Loss: 4.764270305633545 Tokens per Sec: 22212.424265909187
Epoch Step: 70 / 135 Loss: 3.633382797241211 Tokens per Sec: 21803.070577831466
Epoch Step: 75 / 135 Loss: 6.492366790771484 Tokens per Sec: 20208.509629747994
Epoch Step: 80 / 135 Loss: 4.079816818237305 Tokens per Sec: 19121.73519298381
Epoch Step: 85 / 135 Loss: 5.66899299621582 Tokens per Sec: 21400.318395220333
Epoch Step: 90 / 135 Loss: 5.656347751617432 Tokens per Sec: 23751.801557109455
Epoch Step: 95 / 135 Loss: 6.281350135803223 Tokens per Sec: 18995.925470386464
Epoch Step: 100 / 135 Loss: 3.378469228744507 Tokens per Sec: 20929.747816959894
Epoch Step: 105 / 135 Loss: 3.771503210067749 Tokens per Sec: 19538.6802652284
Epoch Step: 110 / 135 Loss: 2.500910758972168 Tokens per Sec: 19621.20891101692
Epoch Step: 115 / 135 Loss: 2.6499156951904297 Tokens per Sec: 18312.81632730342
Epoch Step: 120 / 135 Loss: 4.303039073944092 Tokens per Sec: 18554.545750558038
Epoch Step: 125 / 135 Loss: 1.6902978420257568 Tokens per Sec: 17004.557702796963
Epoch Step: 130 / 135 Loss: 4.023061275482178 Tokens per Sec: 18163.62514428894
Epoch Step: 135 / 135 Loss: 2.015570640563965 Tokens per Sec: 17804.853508584318
Epoch ended with duration 0:00:12.689581
Train perplexity: 1.204034092110013
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.662156
Validation perplexity: 1.7476103169443473
Epoch 130 / 1000
Epoch Step: 5 / 135 Loss: 4.674208641052246 Tokens per Sec: 20929.69953817474
Epoch Step: 10 / 135 Loss: 4.6517229080200195 Tokens per Sec: 18390.93486209174
Epoch Step: 15 / 135 Loss: 3.449848175048828 Tokens per Sec: 24528.52956024032
Epoch Step: 20 / 135 Loss: 1.843346357345581 Tokens per Sec: 21219.396123457747
Epoch Step: 25 / 135 Loss: 1.2931445837020874 Tokens per Sec: 19930.995018180933
Epoch Step: 30 / 135 Loss: 3.382458209991455 Tokens per Sec: 20333.368292120376
Epoch Step: 35 / 135 Loss: 4.5543036460876465 Tokens per Sec: 19604.7371052316
Epoch Step: 40 / 135 Loss: 28.06427764892578 Tokens per Sec: 16931.104085537117
Epoch Step: 45 / 135 Loss: 1.6414964199066162 Tokens per Sec: 18371.491526627262
Epoch Step: 50 / 135 Loss: 4.558064937591553 Tokens per Sec: 21339.566789431745
Epoch Step: 55 / 135 Loss: 1.7071763277053833 Tokens per Sec: 18472.719717882665
Epoch Step: 60 / 135 Loss: 3.1062099933624268 Tokens per Sec: 19638.243961912278
Epoch Step: 65 / 135 Loss: 1.7132620811462402 Tokens per Sec: 19798.330781072287
Epoch Step: 70 / 135 Loss: 14.107678413391113 Tokens per Sec: 20414.76296944754
Epoch Step: 75 / 135 Loss: 3.02787446975708 Tokens per Sec: 23830.467457363666
Epoch Step: 80 / 135 Loss: 3.3405044078826904 Tokens per Sec: 19126.488547439323
Epoch Step: 85 / 135 Loss: 4.5571699142456055 Tokens per Sec: 22053.631557814046
Epoch Step: 90 / 135 Loss: 6.836243629455566 Tokens per Sec: 21607.43125458009
Epoch Step: 95 / 135 Loss: 1.9966750144958496 Tokens per Sec: 20826.28522912315
Epoch Step: 100 / 135 Loss: 3.1711435317993164 Tokens per Sec: 18903.75079591312
Epoch Step: 105 / 135 Loss: 3.2594094276428223 Tokens per Sec: 18259.60255967901
Epoch Step: 110 / 135 Loss: 4.37752103805542 Tokens per Sec: 17023.53047117419
Epoch Step: 115 / 135 Loss: 3.114360809326172 Tokens per Sec: 18864.859614861834
Epoch Step: 120 / 135 Loss: 3.3980023860931396 Tokens per Sec: 17143.796253515276
Epoch Step: 125 / 135 Loss: 2.2733049392700195 Tokens per Sec: 18589.575700271835
Epoch Step: 130 / 135 Loss: 5.0672783851623535 Tokens per Sec: 19139.234439809807
Epoch Step: 135 / 135 Loss: 3.8923134803771973 Tokens per Sec: 18075.402852255236
Epoch ended with duration 0:00:12.906209
Train perplexity: 1.1983454855807767
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658111
Validation perplexity: 1.629509850574765
Model saved checkpoint!
Epoch 131 / 1000
Epoch Step: 5 / 135 Loss: 4.610952377319336 Tokens per Sec: 20558.985864437273
Epoch Step: 10 / 135 Loss: 2.330273151397705 Tokens per Sec: 20048.891090410594
Epoch Step: 15 / 135 Loss: 2.4225282669067383 Tokens per Sec: 20760.75740106699
Epoch Step: 20 / 135 Loss: 2.1596789360046387 Tokens per Sec: 20910.344823742835
Epoch Step: 25 / 135 Loss: 3.812727451324463 Tokens per Sec: 16782.600429396214
Epoch Step: 30 / 135 Loss: 1.1908478736877441 Tokens per Sec: 18965.650489867334
Epoch Step: 35 / 135 Loss: 2.2204253673553467 Tokens per Sec: 21249.996282645883
Epoch Step: 40 / 135 Loss: 1.5299265384674072 Tokens per Sec: 21586.319556745035
Epoch Step: 45 / 135 Loss: 4.132133483886719 Tokens per Sec: 19609.435070659503
Epoch Step: 50 / 135 Loss: 3.27175235748291 Tokens per Sec: 21489.251088736764
Epoch Step: 55 / 135 Loss: 2.2263505458831787 Tokens per Sec: 25319.287685571027
Epoch Step: 60 / 135 Loss: 3.557269811630249 Tokens per Sec: 18794.29603765058
Epoch Step: 65 / 135 Loss: 3.8125412464141846 Tokens per Sec: 18400.738111215735
Epoch Step: 70 / 135 Loss: 1.92860746383667 Tokens per Sec: 20380.624275617793
Epoch Step: 75 / 135 Loss: 3.7670176029205322 Tokens per Sec: 18460.507939098286
Epoch Step: 80 / 135 Loss: 2.3083441257476807 Tokens per Sec: 23007.06310133776
Epoch Step: 85 / 135 Loss: 4.4843220710754395 Tokens per Sec: 20370.767651749105
Epoch Step: 90 / 135 Loss: 1.7975256443023682 Tokens per Sec: 20678.788530500944
Epoch Step: 95 / 135 Loss: 2.721890687942505 Tokens per Sec: 21310.102110557717
Epoch Step: 100 / 135 Loss: 3.430109977722168 Tokens per Sec: 20701.099787691714
Epoch Step: 105 / 135 Loss: 3.2806506156921387 Tokens per Sec: 19365.711096829174
Epoch Step: 110 / 135 Loss: 2.114989757537842 Tokens per Sec: 19503.284869575367
Epoch Step: 115 / 135 Loss: 2.5668694972991943 Tokens per Sec: 18097.964005961632
Epoch Step: 120 / 135 Loss: 1.6934757232666016 Tokens per Sec: 17920.082754484254
Epoch Step: 125 / 135 Loss: 2.036360025405884 Tokens per Sec: 17829.454604027793
Epoch Step: 130 / 135 Loss: 2.296762228012085 Tokens per Sec: 17215.756528418467
Epoch Step: 135 / 135 Loss: 2.59770131111145 Tokens per Sec: 16196.42149304515
Epoch ended with duration 0:00:12.835882
Train perplexity: 1.1559170130462353
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649853
Validation perplexity: 1.3169930761703044
Epoch 132 / 1000
Epoch Step: 5 / 135 Loss: 1.1614990234375 Tokens per Sec: 17359.71956026076
Epoch Step: 10 / 135 Loss: 4.199736595153809 Tokens per Sec: 22305.900561965795
Epoch Step: 15 / 135 Loss: 7.659247398376465 Tokens per Sec: 18655.526598142264
Epoch Step: 20 / 135 Loss: 4.152090549468994 Tokens per Sec: 22506.415719326513
Epoch Step: 25 / 135 Loss: 3.23396897315979 Tokens per Sec: 20841.24111930922
Epoch Step: 30 / 135 Loss: 1.8968085050582886 Tokens per Sec: 19310.632463254013
Epoch Step: 35 / 135 Loss: 2.0389840602874756 Tokens per Sec: 18764.357235617645
Epoch Step: 40 / 135 Loss: 2.1596908569335938 Tokens per Sec: 19255.99972862287
Epoch Step: 45 / 135 Loss: 22.57496452331543 Tokens per Sec: 17664.71558911702
Epoch Step: 50 / 135 Loss: 1.8386094570159912 Tokens per Sec: 20413.343820496204
Epoch Step: 55 / 135 Loss: 2.0883548259735107 Tokens per Sec: 21391.1193361412
Epoch Step: 60 / 135 Loss: 1.6626664400100708 Tokens per Sec: 23167.403570657727
Epoch Step: 65 / 135 Loss: 1.7367091178894043 Tokens per Sec: 16464.92237397642
Epoch Step: 70 / 135 Loss: 40.41172409057617 Tokens per Sec: 22010.101867461213
Epoch Step: 75 / 135 Loss: 27.43937110900879 Tokens per Sec: 20403.11388095733
Epoch Step: 80 / 135 Loss: 3.3545894622802734 Tokens per Sec: 20567.179016954367
Epoch Step: 85 / 135 Loss: 1.4232527017593384 Tokens per Sec: 21689.378637625967
Epoch Step: 90 / 135 Loss: 5.47302770614624 Tokens per Sec: 22187.246045346827
Epoch Step: 95 / 135 Loss: 3.4593372344970703 Tokens per Sec: 20478.132194160433
Epoch Step: 100 / 135 Loss: 4.419241428375244 Tokens per Sec: 18220.367959402327
Epoch Step: 105 / 135 Loss: 1.5507514476776123 Tokens per Sec: 17461.359256219184
Epoch Step: 110 / 135 Loss: 3.3128044605255127 Tokens per Sec: 20892.784165739416
Epoch Step: 115 / 135 Loss: 5.147058010101318 Tokens per Sec: 17722.74668049143
Epoch Step: 120 / 135 Loss: 4.76366662979126 Tokens per Sec: 18376.569489484216
Epoch Step: 125 / 135 Loss: 2.968621015548706 Tokens per Sec: 18924.635814917638
Epoch Step: 130 / 135 Loss: 3.503981351852417 Tokens per Sec: 16400.382055565726
Epoch Step: 135 / 135 Loss: 1.8831257820129395 Tokens per Sec: 17876.166950333747
Epoch ended with duration 0:00:12.924341
Train perplexity: 1.2528554518806754
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658995
Validation perplexity: 1.6517484512198717
Epoch 133 / 1000
Epoch Step: 5 / 135 Loss: 1.2790277004241943 Tokens per Sec: 21492.82298016284
Epoch Step: 10 / 135 Loss: 3.9912655353546143 Tokens per Sec: 19453.49818830802
Epoch Step: 15 / 135 Loss: 4.319587707519531 Tokens per Sec: 24616.440706341324
Epoch Step: 20 / 135 Loss: 3.2427608966827393 Tokens per Sec: 15907.524912668174
Epoch Step: 25 / 135 Loss: 1.0118517875671387 Tokens per Sec: 17204.971938876934
Epoch Step: 30 / 135 Loss: 3.302471399307251 Tokens per Sec: 17635.59444401817
Epoch Step: 35 / 135 Loss: 3.807755947113037 Tokens per Sec: 21503.052332552732
Epoch Step: 40 / 135 Loss: 2.2554831504821777 Tokens per Sec: 19281.119518054526
Epoch Step: 45 / 135 Loss: 5.846724033355713 Tokens per Sec: 20712.334167211342
Epoch Step: 50 / 135 Loss: 2.4193997383117676 Tokens per Sec: 19875.132780926284
Epoch Step: 55 / 135 Loss: 2.1281657218933105 Tokens per Sec: 20622.187677033173
Epoch Step: 60 / 135 Loss: 2.009521007537842 Tokens per Sec: 19852.043471036854
Epoch Step: 65 / 135 Loss: 2.945762872695923 Tokens per Sec: 21507.642119892924
Epoch Step: 70 / 135 Loss: 4.9876389503479 Tokens per Sec: 21548.811690496583
Epoch Step: 75 / 135 Loss: 3.7970311641693115 Tokens per Sec: 19698.957293197815
Epoch Step: 80 / 135 Loss: 1.9877725839614868 Tokens per Sec: 22630.35685864528
Epoch Step: 85 / 135 Loss: 3.987025022506714 Tokens per Sec: 22212.992854768145
Epoch Step: 90 / 135 Loss: 28.671606063842773 Tokens per Sec: 22709.923765010026
Epoch Step: 95 / 135 Loss: 3.6869893074035645 Tokens per Sec: 17843.48870289599
Epoch Step: 100 / 135 Loss: 53.584739685058594 Tokens per Sec: 20876.177872633794
Epoch Step: 105 / 135 Loss: 3.5378835201263428 Tokens per Sec: 17640.459209389115
Epoch Step: 110 / 135 Loss: 1.7204227447509766 Tokens per Sec: 16887.23768046215
Epoch Step: 115 / 135 Loss: 2.4209015369415283 Tokens per Sec: 19304.026082391527
Epoch Step: 120 / 135 Loss: 1.3993910551071167 Tokens per Sec: 19665.93191458748
Epoch Step: 125 / 135 Loss: 2.730318546295166 Tokens per Sec: 18810.319937167114
Epoch Step: 130 / 135 Loss: 2.862574338912964 Tokens per Sec: 17452.31175568919
Epoch Step: 135 / 135 Loss: 3.0965042114257812 Tokens per Sec: 19363.077241657862
Epoch ended with duration 0:00:12.786768
Train perplexity: 1.2228938748086617
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650025
Validation perplexity: 1.4284499967033528
Epoch 134 / 1000
Epoch Step: 5 / 135 Loss: 0.9726496934890747 Tokens per Sec: 19745.955728386198
Epoch Step: 10 / 135 Loss: 2.5479140281677246 Tokens per Sec: 20017.203330719043
Epoch Step: 15 / 135 Loss: 1.1193689107894897 Tokens per Sec: 20931.972845655884
Epoch Step: 20 / 135 Loss: 11.735393524169922 Tokens per Sec: 20449.261231927823
Epoch Step: 25 / 135 Loss: 1.215211033821106 Tokens per Sec: 20807.750265010647
Epoch Step: 30 / 135 Loss: 3.0649473667144775 Tokens per Sec: 19623.115943544173
Epoch Step: 35 / 135 Loss: 1.694465160369873 Tokens per Sec: 22908.69878445623
Epoch Step: 40 / 135 Loss: 2.804063320159912 Tokens per Sec: 19021.897588906
Epoch Step: 45 / 135 Loss: 2.6486053466796875 Tokens per Sec: 20006.32523541167
Epoch Step: 50 / 135 Loss: 5.76392936706543 Tokens per Sec: 19066.93032890775
Epoch Step: 55 / 135 Loss: 2.7697606086730957 Tokens per Sec: 23994.778474150353
Epoch Step: 60 / 135 Loss: 3.1096572875976562 Tokens per Sec: 18461.986238715483
Epoch Step: 65 / 135 Loss: 4.190829277038574 Tokens per Sec: 17923.22810630436
Epoch Step: 70 / 135 Loss: 3.380185127258301 Tokens per Sec: 22439.51550703131
Epoch Step: 75 / 135 Loss: 2.1082923412323 Tokens per Sec: 23515.447526668257
Epoch Step: 80 / 135 Loss: 1.8993008136749268 Tokens per Sec: 21633.885831343334
Epoch Step: 85 / 135 Loss: 1.8693935871124268 Tokens per Sec: 24266.506290608922
Epoch Step: 90 / 135 Loss: 4.476827144622803 Tokens per Sec: 18448.607366950866
Epoch Step: 95 / 135 Loss: 4.146035671234131 Tokens per Sec: 22151.447442643996
Epoch Step: 100 / 135 Loss: 3.0463786125183105 Tokens per Sec: 17806.934148333687
Epoch Step: 105 / 135 Loss: 1.90176260471344 Tokens per Sec: 18680.68069096284
Epoch Step: 110 / 135 Loss: 3.417618989944458 Tokens per Sec: 20353.3692558535
Epoch Step: 115 / 135 Loss: 2.3032684326171875 Tokens per Sec: 15451.829527094278
Epoch Step: 120 / 135 Loss: 3.331692695617676 Tokens per Sec: 18138.943611154384
Epoch Step: 125 / 135 Loss: 2.4893057346343994 Tokens per Sec: 19110.44772277704
Epoch Step: 130 / 135 Loss: 2.848781108856201 Tokens per Sec: 18268.75213671889
Epoch Step: 135 / 135 Loss: 1.6238765716552734 Tokens per Sec: 18500.37264381763
Epoch ended with duration 0:00:12.727067
Train perplexity: 1.1584025551892043
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657960
Validation perplexity: 1.5807868516756014
Epoch 135 / 1000
Epoch Step: 5 / 135 Loss: 3.8737668991088867 Tokens per Sec: 17491.392574577334
Epoch Step: 10 / 135 Loss: 1.9869271516799927 Tokens per Sec: 20731.068681525947
Epoch Step: 15 / 135 Loss: 2.2850565910339355 Tokens per Sec: 20416.544837467714
Epoch Step: 20 / 135 Loss: 0.8999184370040894 Tokens per Sec: 20509.66336623595
Epoch Step: 25 / 135 Loss: 4.447836399078369 Tokens per Sec: 19610.272393443232
Epoch Step: 30 / 135 Loss: 3.604074001312256 Tokens per Sec: 20574.400352795197
Epoch Step: 35 / 135 Loss: 3.5084962844848633 Tokens per Sec: 21828.195340895774
Epoch Step: 40 / 135 Loss: 21.863269805908203 Tokens per Sec: 18963.67156935613
Epoch Step: 45 / 135 Loss: 1.1674201488494873 Tokens per Sec: 20821.90237170471
Epoch Step: 50 / 135 Loss: 3.3067736625671387 Tokens per Sec: 21360.437562103474
Epoch Step: 55 / 135 Loss: 3.821227788925171 Tokens per Sec: 23350.719445222883
Epoch Step: 60 / 135 Loss: 0.7560766339302063 Tokens per Sec: 24028.025819135597
Epoch Step: 65 / 135 Loss: 4.581371784210205 Tokens per Sec: 19601.275209359927
Epoch Step: 70 / 135 Loss: 2.4604148864746094 Tokens per Sec: 22545.569946841577
Epoch Step: 75 / 135 Loss: 1.2672672271728516 Tokens per Sec: 20964.09699830774
Epoch Step: 80 / 135 Loss: 2.820155382156372 Tokens per Sec: 22417.5523011664
Epoch Step: 85 / 135 Loss: 2.919377565383911 Tokens per Sec: 16586.838264216083
Epoch Step: 90 / 135 Loss: 3.1787467002868652 Tokens per Sec: 20536.938488257736
Epoch Step: 95 / 135 Loss: 3.7074263095855713 Tokens per Sec: 17592.816751962568
Epoch Step: 100 / 135 Loss: 3.487957000732422 Tokens per Sec: 22955.24292907578
Epoch Step: 105 / 135 Loss: 1.9302284717559814 Tokens per Sec: 19545.27514238087
Epoch Step: 110 / 135 Loss: 3.704848289489746 Tokens per Sec: 19518.5242309221
Epoch Step: 115 / 135 Loss: 2.665717840194702 Tokens per Sec: 16677.43934808004
Epoch Step: 120 / 135 Loss: 2.4889092445373535 Tokens per Sec: 17753.467610485404
Epoch Step: 125 / 135 Loss: 3.1159329414367676 Tokens per Sec: 18462.618868628637
Epoch Step: 130 / 135 Loss: 3.267707586288452 Tokens per Sec: 18774.944399438136
Epoch Step: 135 / 135 Loss: 34.26729202270508 Tokens per Sec: 17482.88382960683
Epoch ended with duration 0:00:12.735772
Train perplexity: 1.166571674588282
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658727
Validation perplexity: 1.474267702578464
Model saved checkpoint!
Epoch 136 / 1000
Epoch Step: 5 / 135 Loss: 3.81532621383667 Tokens per Sec: 21044.42315838512
Epoch Step: 10 / 135 Loss: 29.215930938720703 Tokens per Sec: 16518.055447445247
Epoch Step: 15 / 135 Loss: 1.2038953304290771 Tokens per Sec: 24232.38851458633
Epoch Step: 20 / 135 Loss: 2.985170841217041 Tokens per Sec: 18745.44888350298
Epoch Step: 25 / 135 Loss: 1.4780250787734985 Tokens per Sec: 22064.462861567295
Epoch Step: 30 / 135 Loss: 3.1768643856048584 Tokens per Sec: 23170.946858210536
Epoch Step: 35 / 135 Loss: 1.3573614358901978 Tokens per Sec: 20022.49568746032
Epoch Step: 40 / 135 Loss: 1.5493230819702148 Tokens per Sec: 20050.43628487575
Epoch Step: 45 / 135 Loss: 0.9827725291252136 Tokens per Sec: 19630.537123460042
Epoch Step: 50 / 135 Loss: 1.8230558633804321 Tokens per Sec: 21330.20337132181
Epoch Step: 55 / 135 Loss: 1.8281923532485962 Tokens per Sec: 21735.36114133795
Epoch Step: 60 / 135 Loss: 4.067663192749023 Tokens per Sec: 20791.73836282799
Epoch Step: 65 / 135 Loss: 23.861902236938477 Tokens per Sec: 16751.37494115047
Epoch Step: 70 / 135 Loss: 1.7281044721603394 Tokens per Sec: 16620.97687678879
Epoch Step: 75 / 135 Loss: 5.327473163604736 Tokens per Sec: 22442.713124626644
Epoch Step: 80 / 135 Loss: 2.3931849002838135 Tokens per Sec: 23095.15101607119
Epoch Step: 85 / 135 Loss: 8.072563171386719 Tokens per Sec: 20328.792442579645
Epoch Step: 90 / 135 Loss: 1.983382225036621 Tokens per Sec: 20412.296442783398
Epoch Step: 95 / 135 Loss: 1.8247616291046143 Tokens per Sec: 16692.683642108583
Epoch Step: 100 / 135 Loss: 2.749629497528076 Tokens per Sec: 20530.46110524463
Epoch Step: 105 / 135 Loss: 1.2416186332702637 Tokens per Sec: 19794.017100497495
Epoch Step: 110 / 135 Loss: 2.686797857284546 Tokens per Sec: 16952.97318393529
Epoch Step: 115 / 135 Loss: 4.0821661949157715 Tokens per Sec: 17024.98705341351
Epoch Step: 120 / 135 Loss: 26.41994857788086 Tokens per Sec: 18153.938136887882
Epoch Step: 125 / 135 Loss: 3.0273184776306152 Tokens per Sec: 19314.772709136854
Epoch Step: 130 / 135 Loss: 18.762081146240234 Tokens per Sec: 19198.05884790872
Epoch Step: 135 / 135 Loss: 2.3584845066070557 Tokens per Sec: 20496.85013541492
Epoch ended with duration 0:00:12.797187
Train perplexity: 1.1586647503687266
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645812
Validation perplexity: 1.2898589944775714
Model saved best_on_validation!
Epoch 137 / 1000
Epoch Step: 5 / 135 Loss: 1.1388672590255737 Tokens per Sec: 23253.267878062685
Epoch Step: 10 / 135 Loss: 2.913613796234131 Tokens per Sec: 22551.142047882648
Epoch Step: 15 / 135 Loss: 2.1618781089782715 Tokens per Sec: 20841.73862146755
Epoch Step: 20 / 135 Loss: 2.6478259563446045 Tokens per Sec: 21500.157795741103
Epoch Step: 25 / 135 Loss: 15.690458297729492 Tokens per Sec: 20500.417459108972
Epoch Step: 30 / 135 Loss: 2.684051752090454 Tokens per Sec: 19088.424287779806
Epoch Step: 35 / 135 Loss: 1.6697795391082764 Tokens per Sec: 17127.968590571967
Epoch Step: 40 / 135 Loss: 0.8888393640518188 Tokens per Sec: 22504.897294143982
Epoch Step: 45 / 135 Loss: 3.4098269939422607 Tokens per Sec: 16469.80952905321
Epoch Step: 50 / 135 Loss: 4.577149868011475 Tokens per Sec: 23030.24281470792
Epoch Step: 55 / 135 Loss: 4.070538520812988 Tokens per Sec: 23100.909961676014
Epoch Step: 60 / 135 Loss: 2.744523525238037 Tokens per Sec: 20587.246070787936
Epoch Step: 65 / 135 Loss: 2.1959636211395264 Tokens per Sec: 19017.334916208714
Epoch Step: 70 / 135 Loss: 1.6084249019622803 Tokens per Sec: 18117.600004639033
Epoch Step: 75 / 135 Loss: 2.2048115730285645 Tokens per Sec: 19742.82096656212
Epoch Step: 80 / 135 Loss: 1.8399403095245361 Tokens per Sec: 19119.19493240901
Epoch Step: 85 / 135 Loss: 3.8637936115264893 Tokens per Sec: 22082.466168115567
Epoch Step: 90 / 135 Loss: 1.5665154457092285 Tokens per Sec: 20385.57540351021
Epoch Step: 95 / 135 Loss: 3.3404524326324463 Tokens per Sec: 22990.363396116645
Epoch Step: 100 / 135 Loss: 4.02167272567749 Tokens per Sec: 17685.037715612896
Epoch Step: 105 / 135 Loss: 7.155970096588135 Tokens per Sec: 16828.932556178337
Epoch Step: 110 / 135 Loss: 41.898494720458984 Tokens per Sec: 17904.101103777488
Epoch Step: 115 / 135 Loss: 3.1672065258026123 Tokens per Sec: 16798.37190521525
Epoch Step: 120 / 135 Loss: 3.9957664012908936 Tokens per Sec: 18746.971720786063
Epoch Step: 125 / 135 Loss: 3.396928310394287 Tokens per Sec: 18166.326937519894
Epoch Step: 130 / 135 Loss: 1.874094009399414 Tokens per Sec: 18501.424853821794
Epoch Step: 135 / 135 Loss: 3.884875774383545 Tokens per Sec: 19800.587031048028
Epoch ended with duration 0:00:12.815245
Train perplexity: 1.1691350093007933
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645745
Validation perplexity: 1.2995332742806438
Epoch 138 / 1000
Epoch Step: 5 / 135 Loss: 2.1259944438934326 Tokens per Sec: 22965.646104336138
Epoch Step: 10 / 135 Loss: 2.906710386276245 Tokens per Sec: 22298.265646917596
Epoch Step: 15 / 135 Loss: 2.0642898082733154 Tokens per Sec: 17358.830880660273
Epoch Step: 20 / 135 Loss: 3.709157943725586 Tokens per Sec: 20899.135162692644
Epoch Step: 25 / 135 Loss: 5.498291492462158 Tokens per Sec: 19555.36873110381
Epoch Step: 30 / 135 Loss: 1.3681796789169312 Tokens per Sec: 19734.54882177372
Epoch Step: 35 / 135 Loss: 3.824676036834717 Tokens per Sec: 18404.682299049957
Epoch Step: 40 / 135 Loss: 3.053244113922119 Tokens per Sec: 19547.982343290852
Epoch Step: 45 / 135 Loss: 1.1185522079467773 Tokens per Sec: 21872.830255414687
Epoch Step: 50 / 135 Loss: 3.310925245285034 Tokens per Sec: 20820.215933195006
Epoch Step: 55 / 135 Loss: 2.1093342304229736 Tokens per Sec: 16909.304526837772
Epoch Step: 60 / 135 Loss: 2.334317922592163 Tokens per Sec: 19436.421796320334
Epoch Step: 65 / 135 Loss: 2.358468532562256 Tokens per Sec: 21717.331592260118
Epoch Step: 70 / 135 Loss: 2.4374234676361084 Tokens per Sec: 20031.241101497177
Epoch Step: 75 / 135 Loss: 1.1967028379440308 Tokens per Sec: 20251.90396371011
Epoch Step: 80 / 135 Loss: 2.7354135513305664 Tokens per Sec: 23371.684195971393
Epoch Step: 85 / 135 Loss: 1.8611950874328613 Tokens per Sec: 20561.423608955585
Epoch Step: 90 / 135 Loss: 1.6763954162597656 Tokens per Sec: 23718.08332156267
Epoch Step: 95 / 135 Loss: 4.53311014175415 Tokens per Sec: 22779.276788068404
Epoch Step: 100 / 135 Loss: 2.3199758529663086 Tokens per Sec: 20230.784223365772
Epoch Step: 105 / 135 Loss: 3.003323793411255 Tokens per Sec: 18405.35059873885
Epoch Step: 110 / 135 Loss: 1.6132738590240479 Tokens per Sec: 17757.474733975305
Epoch Step: 115 / 135 Loss: 5.23317289352417 Tokens per Sec: 17161.76320071313
Epoch Step: 120 / 135 Loss: 3.6590323448181152 Tokens per Sec: 20322.186652159988
Epoch Step: 125 / 135 Loss: 1.2772501707077026 Tokens per Sec: 17731.750678278975
Epoch Step: 130 / 135 Loss: 1.202775478363037 Tokens per Sec: 18129.52916390491
Epoch Step: 135 / 135 Loss: 2.839923858642578 Tokens per Sec: 18013.455313865325
Epoch ended with duration 0:00:12.742063
Train perplexity: 1.1483383219884864
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.646032
Validation perplexity: 1.2810685680071887
Model saved best_on_validation!
Epoch 139 / 1000
Epoch Step: 5 / 135 Loss: 1.0088809728622437 Tokens per Sec: 19798.50289647092
Epoch Step: 10 / 135 Loss: 1.8940393924713135 Tokens per Sec: 19327.511151134404
Epoch Step: 15 / 135 Loss: 1.5978829860687256 Tokens per Sec: 17811.88583584323
Epoch Step: 20 / 135 Loss: 1.6236555576324463 Tokens per Sec: 19414.607693258353
Epoch Step: 25 / 135 Loss: 0.8092208504676819 Tokens per Sec: 20729.749028402224
Epoch Step: 30 / 135 Loss: 1.6988270282745361 Tokens per Sec: 20772.934475348808
Epoch Step: 35 / 135 Loss: 2.7866547107696533 Tokens per Sec: 17254.66539637311
Epoch Step: 40 / 135 Loss: 1.8292659521102905 Tokens per Sec: 24505.815122585966
Epoch Step: 45 / 135 Loss: 1.0616284608840942 Tokens per Sec: 22349.129422261347
Epoch Step: 50 / 135 Loss: 3.0666024684906006 Tokens per Sec: 22593.90164192999
Epoch Step: 55 / 135 Loss: 2.7505812644958496 Tokens per Sec: 23732.42936384329
Epoch Step: 60 / 135 Loss: 3.479557991027832 Tokens per Sec: 20756.256385634195
Epoch Step: 65 / 135 Loss: 1.2798614501953125 Tokens per Sec: 18785.395527659388
Epoch Step: 70 / 135 Loss: 4.214521884918213 Tokens per Sec: 17659.335302790147
Epoch Step: 75 / 135 Loss: 2.471435070037842 Tokens per Sec: 19417.60495914947
Epoch Step: 80 / 135 Loss: 3.320786714553833 Tokens per Sec: 22020.41887454788
Epoch Step: 85 / 135 Loss: 2.478076934814453 Tokens per Sec: 21194.618990529943
Epoch Step: 90 / 135 Loss: 3.2567875385284424 Tokens per Sec: 20610.668143595263
Epoch Step: 95 / 135 Loss: 4.108397483825684 Tokens per Sec: 20485.581567175384
Epoch Step: 100 / 135 Loss: 1.7253859043121338 Tokens per Sec: 20313.97958242129
Epoch Step: 105 / 135 Loss: 1.9012489318847656 Tokens per Sec: 18392.696714318747
Epoch Step: 110 / 135 Loss: 2.7528984546661377 Tokens per Sec: 17976.558444648414
Epoch Step: 115 / 135 Loss: 2.3029627799987793 Tokens per Sec: 18845.10062485549
Epoch Step: 120 / 135 Loss: 3.1866421699523926 Tokens per Sec: 18496.914674323
Epoch Step: 125 / 135 Loss: 1.3948496580123901 Tokens per Sec: 14764.524515601297
Epoch Step: 130 / 135 Loss: 2.622394561767578 Tokens per Sec: 18220.0919795593
Epoch Step: 135 / 135 Loss: 8.520536422729492 Tokens per Sec: 16771.711438297174
Epoch ended with duration 0:00:12.889934
Train perplexity: 1.136939011105583
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.651861
Validation perplexity: 1.3868626239743602
Epoch 140 / 1000
Epoch Step: 5 / 135 Loss: 3.649150848388672 Tokens per Sec: 17125.470655394936
Epoch Step: 10 / 135 Loss: 2.382552146911621 Tokens per Sec: 20303.06638144863
Epoch Step: 15 / 135 Loss: 2.239093065261841 Tokens per Sec: 22408.1152549489
Epoch Step: 20 / 135 Loss: 1.781050443649292 Tokens per Sec: 23113.071305123274
Epoch Step: 25 / 135 Loss: 1.600516676902771 Tokens per Sec: 23946.17904291918
Epoch Step: 30 / 135 Loss: 4.400876045227051 Tokens per Sec: 17467.626765255896
Epoch Step: 35 / 135 Loss: 2.244378089904785 Tokens per Sec: 18266.387833557077
Epoch Step: 40 / 135 Loss: 33.08753967285156 Tokens per Sec: 20307.456181065412
Epoch Step: 45 / 135 Loss: 1.8322738409042358 Tokens per Sec: 25250.13053523587
Epoch Step: 50 / 135 Loss: 5.548698425292969 Tokens per Sec: 18959.030571516632
Epoch Step: 55 / 135 Loss: 1.4326913356781006 Tokens per Sec: 19396.088534883078
Epoch Step: 60 / 135 Loss: 24.817508697509766 Tokens per Sec: 20648.73269087903
Epoch Step: 65 / 135 Loss: 1.8386188745498657 Tokens per Sec: 23103.96163924844
Epoch Step: 70 / 135 Loss: 5.771961212158203 Tokens per Sec: 20509.498047244586
Epoch Step: 75 / 135 Loss: 3.5868310928344727 Tokens per Sec: 22926.924397974202
Epoch Step: 80 / 135 Loss: 1.9649536609649658 Tokens per Sec: 17768.65299996709
Epoch Step: 85 / 135 Loss: 3.4378600120544434 Tokens per Sec: 21034.954785224454
Epoch Step: 90 / 135 Loss: 3.3820228576660156 Tokens per Sec: 18969.767949212477
Epoch Step: 95 / 135 Loss: 2.5110840797424316 Tokens per Sec: 19124.00773787281
Epoch Step: 100 / 135 Loss: 4.871431350708008 Tokens per Sec: 20451.4276650267
Epoch Step: 105 / 135 Loss: 2.301098585128784 Tokens per Sec: 19585.69925349679
Epoch Step: 110 / 135 Loss: 3.5231986045837402 Tokens per Sec: 18166.572637567602
Epoch Step: 115 / 135 Loss: 5.802548885345459 Tokens per Sec: 18458.19182607099
Epoch Step: 120 / 135 Loss: 4.918403625488281 Tokens per Sec: 16750.81609629064
Epoch Step: 125 / 135 Loss: 5.156413555145264 Tokens per Sec: 19578.624550860874
Epoch Step: 130 / 135 Loss: 3.0289745330810547 Tokens per Sec: 16961.250179904167
Epoch Step: 135 / 135 Loss: 3.6312265396118164 Tokens per Sec: 18959.69887304795
Epoch ended with duration 0:00:12.726096
Train perplexity: 1.2868616493483376
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.652357
Validation perplexity: 1.371138099517345
Model saved checkpoint!
Epoch 141 / 1000
Epoch Step: 5 / 135 Loss: 2.812309980392456 Tokens per Sec: 17387.372230176203
Epoch Step: 10 / 135 Loss: 5.493061065673828 Tokens per Sec: 20896.47011404062
Epoch Step: 15 / 135 Loss: 1.8696136474609375 Tokens per Sec: 21679.52662401769
Epoch Step: 20 / 135 Loss: 3.3202524185180664 Tokens per Sec: 21258.707482244594
Epoch Step: 25 / 135 Loss: 1.5043635368347168 Tokens per Sec: 19214.879543931518
Epoch Step: 30 / 135 Loss: 3.2393593788146973 Tokens per Sec: 22595.93360706834
Epoch Step: 35 / 135 Loss: 4.326370716094971 Tokens per Sec: 20440.744406812744
Epoch Step: 40 / 135 Loss: 1.2931450605392456 Tokens per Sec: 17569.83290676579
Epoch Step: 45 / 135 Loss: 3.34438157081604 Tokens per Sec: 21312.364213415076
Epoch Step: 50 / 135 Loss: 3.2630999088287354 Tokens per Sec: 20202.20539089478
Epoch Step: 55 / 135 Loss: 16.28021812438965 Tokens per Sec: 22927.58483751976
Epoch Step: 60 / 135 Loss: 2.511594295501709 Tokens per Sec: 19764.835454487835
Epoch Step: 65 / 135 Loss: 2.1025288105010986 Tokens per Sec: 20997.612034777503
Epoch Step: 70 / 135 Loss: 4.292311668395996 Tokens per Sec: 19409.537418614567
Epoch Step: 75 / 135 Loss: 2.2475969791412354 Tokens per Sec: 23106.190521992856
Epoch Step: 80 / 135 Loss: 2.2765092849731445 Tokens per Sec: 20021.42946342447
Epoch Step: 85 / 135 Loss: 3.890700340270996 Tokens per Sec: 20054.56887873954
Epoch Step: 90 / 135 Loss: 2.2062106132507324 Tokens per Sec: 19152.2096852853
Epoch Step: 95 / 135 Loss: 1.239572286605835 Tokens per Sec: 24822.410461493982
Epoch Step: 100 / 135 Loss: 3.8752527236938477 Tokens per Sec: 17826.12927241708
Epoch Step: 105 / 135 Loss: 22.599220275878906 Tokens per Sec: 18740.399691427254
Epoch Step: 110 / 135 Loss: 2.1693687438964844 Tokens per Sec: 18883.048501627203
Epoch Step: 115 / 135 Loss: 1.0086597204208374 Tokens per Sec: 18835.106272069603
Epoch Step: 120 / 135 Loss: 1.1507816314697266 Tokens per Sec: 18860.538743924863
Epoch Step: 125 / 135 Loss: 16.74123764038086 Tokens per Sec: 16761.072806824166
Epoch Step: 130 / 135 Loss: 1.8034379482269287 Tokens per Sec: 16072.264470947972
Epoch Step: 135 / 135 Loss: 3.209357976913452 Tokens per Sec: 19483.39427308318
Epoch ended with duration 0:00:12.776689
Train perplexity: 1.177947344161504
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654156
Validation perplexity: 1.5207805082070611
Epoch 142 / 1000
Epoch Step: 5 / 135 Loss: 3.170694351196289 Tokens per Sec: 21343.499312685763
Epoch Step: 10 / 135 Loss: 1.3612545728683472 Tokens per Sec: 21101.987404349264
Epoch Step: 15 / 135 Loss: 2.7206356525421143 Tokens per Sec: 18694.164248269015
Epoch Step: 20 / 135 Loss: 1.1328121423721313 Tokens per Sec: 21020.09153835606
Epoch Step: 25 / 135 Loss: 1.6105035543441772 Tokens per Sec: 21766.645799368936
Epoch Step: 30 / 135 Loss: 1.887391448020935 Tokens per Sec: 19498.910634162145
Epoch Step: 35 / 135 Loss: 2.5255045890808105 Tokens per Sec: 21941.72535481853
Epoch Step: 40 / 135 Loss: 3.1566030979156494 Tokens per Sec: 25156.74005595245
Epoch Step: 45 / 135 Loss: 2.1226766109466553 Tokens per Sec: 18777.943597177324
Epoch Step: 50 / 135 Loss: 1.6807368993759155 Tokens per Sec: 22970.458423080363
Epoch Step: 55 / 135 Loss: 19.509429931640625 Tokens per Sec: 22257.852036209904
Epoch Step: 60 / 135 Loss: 4.171704292297363 Tokens per Sec: 20310.31479006341
Epoch Step: 65 / 135 Loss: 3.3068273067474365 Tokens per Sec: 22086.653228144583
Epoch Step: 70 / 135 Loss: 2.8053815364837646 Tokens per Sec: 21873.928855447743
Epoch Step: 75 / 135 Loss: 3.7741105556488037 Tokens per Sec: 19282.62911160723
Epoch Step: 80 / 135 Loss: 1.6176866292953491 Tokens per Sec: 17214.125263941318
Epoch Step: 85 / 135 Loss: 1.9155998229980469 Tokens per Sec: 19967.477456008633
Epoch Step: 90 / 135 Loss: 4.184467315673828 Tokens per Sec: 20906.96524942504
Epoch Step: 95 / 135 Loss: 1.23647141456604 Tokens per Sec: 19593.705522708613
Epoch Step: 100 / 135 Loss: 3.9081008434295654 Tokens per Sec: 17020.27062214195
Epoch Step: 105 / 135 Loss: 2.7012150287628174 Tokens per Sec: 19185.427776192042
Epoch Step: 110 / 135 Loss: 3.4372196197509766 Tokens per Sec: 16508.953365692127
Epoch Step: 115 / 135 Loss: 51.389461517333984 Tokens per Sec: 17909.48458547116
Epoch Step: 120 / 135 Loss: 3.387615203857422 Tokens per Sec: 19411.80710937213
Epoch Step: 125 / 135 Loss: 2.67502498626709 Tokens per Sec: 18190.841048413557
Epoch Step: 130 / 135 Loss: 2.6157145500183105 Tokens per Sec: 19808.27924105833
Epoch Step: 135 / 135 Loss: 3.591902256011963 Tokens per Sec: 16599.69067101983
Epoch ended with duration 0:00:12.766274
Train perplexity: 1.1353572635017721
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.658522
Validation perplexity: 1.6187024315633367
Epoch 143 / 1000
Epoch Step: 5 / 135 Loss: 1.7283563613891602 Tokens per Sec: 15946.53080174223
Epoch Step: 10 / 135 Loss: 3.203774929046631 Tokens per Sec: 17869.397354572022
Epoch Step: 15 / 135 Loss: 1.6056886911392212 Tokens per Sec: 18706.42948607542
Epoch Step: 20 / 135 Loss: 3.7585482597351074 Tokens per Sec: 19007.185521523308
Epoch Step: 25 / 135 Loss: 2.4673283100128174 Tokens per Sec: 21089.307296935138
Epoch Step: 30 / 135 Loss: 2.8837106227874756 Tokens per Sec: 21875.971065551304
Epoch Step: 35 / 135 Loss: 1.8458386659622192 Tokens per Sec: 23757.345919965708
Epoch Step: 40 / 135 Loss: 3.0458803176879883 Tokens per Sec: 19246.229442443026
Epoch Step: 45 / 135 Loss: 2.7578189373016357 Tokens per Sec: 22098.02283319931
Epoch Step: 50 / 135 Loss: 1.2132923603057861 Tokens per Sec: 19382.78702285183
Epoch Step: 55 / 135 Loss: 1.469277262687683 Tokens per Sec: 17818.966116625612
Epoch Step: 60 / 135 Loss: 1.9012058973312378 Tokens per Sec: 19690.673451153212
Epoch Step: 65 / 135 Loss: 1.8479740619659424 Tokens per Sec: 22415.76275681721
Epoch Step: 70 / 135 Loss: 3.647960662841797 Tokens per Sec: 20216.900583397826
Epoch Step: 75 / 135 Loss: 3.5779945850372314 Tokens per Sec: 23753.257604892646
Epoch Step: 80 / 135 Loss: 1.8909833431243896 Tokens per Sec: 22559.079544161123
Epoch Step: 85 / 135 Loss: 10.352248191833496 Tokens per Sec: 22418.23024083484
Epoch Step: 90 / 135 Loss: 3.769070625305176 Tokens per Sec: 20530.113412734318
Epoch Step: 95 / 135 Loss: 3.792548656463623 Tokens per Sec: 22100.24751083708
Epoch Step: 100 / 135 Loss: 23.619335174560547 Tokens per Sec: 18921.87666555694
Epoch Step: 105 / 135 Loss: 2.74780535697937 Tokens per Sec: 18172.63391251095
Epoch Step: 110 / 135 Loss: 2.4499528408050537 Tokens per Sec: 18555.61308985191
Epoch Step: 115 / 135 Loss: 11.348481178283691 Tokens per Sec: 18075.809623496487
Epoch Step: 120 / 135 Loss: 2.3468244075775146 Tokens per Sec: 18705.214759469378
Epoch Step: 125 / 135 Loss: 3.5646607875823975 Tokens per Sec: 19278.43604726509
Epoch Step: 130 / 135 Loss: 2.6854803562164307 Tokens per Sec: 17881.773454408143
Epoch Step: 135 / 135 Loss: 4.898191928863525 Tokens per Sec: 19644.353994493304
Epoch ended with duration 0:00:12.735035
Train perplexity: 1.1599172419446917
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.660983
Validation perplexity: 1.656744241377225
Epoch 144 / 1000
Epoch Step: 5 / 135 Loss: 15.356569290161133 Tokens per Sec: 18789.49166093684
Epoch Step: 10 / 135 Loss: 4.403215408325195 Tokens per Sec: 23884.687019032943
Epoch Step: 15 / 135 Loss: 1.1721899509429932 Tokens per Sec: 19764.55011903148
Epoch Step: 20 / 135 Loss: 2.5117015838623047 Tokens per Sec: 21628.384512497196
Epoch Step: 25 / 135 Loss: 2.7046401500701904 Tokens per Sec: 22128.950305463168
Epoch Step: 30 / 135 Loss: 3.2771852016448975 Tokens per Sec: 19122.558385447377
Epoch Step: 35 / 135 Loss: 1.6561912298202515 Tokens per Sec: 18258.138643272858
Epoch Step: 40 / 135 Loss: 0.9461581707000732 Tokens per Sec: 22727.676997936385
Epoch Step: 45 / 135 Loss: 20.21539878845215 Tokens per Sec: 21404.074393316336
Epoch Step: 50 / 135 Loss: 4.766525745391846 Tokens per Sec: 15197.350330920688
Epoch Step: 55 / 135 Loss: 2.4034862518310547 Tokens per Sec: 19475.41928434145
Epoch Step: 60 / 135 Loss: 2.3857438564300537 Tokens per Sec: 20661.71831961017
Epoch Step: 65 / 135 Loss: 1.7784297466278076 Tokens per Sec: 22736.52217201401
Epoch Step: 70 / 135 Loss: 2.404104709625244 Tokens per Sec: 23629.31540247845
Epoch Step: 75 / 135 Loss: 2.7662837505340576 Tokens per Sec: 23589.646355369634
Epoch Step: 80 / 135 Loss: 7.952733516693115 Tokens per Sec: 21473.429374868952
Epoch Step: 85 / 135 Loss: 1.6356865167617798 Tokens per Sec: 17905.026669357412
Epoch Step: 90 / 135 Loss: 1.7872051000595093 Tokens per Sec: 16713.707209194254
Epoch Step: 95 / 135 Loss: 2.324953317642212 Tokens per Sec: 22584.458203579023
Epoch Step: 100 / 135 Loss: 6.79290246963501 Tokens per Sec: 19608.414331039145
Epoch Step: 105 / 135 Loss: 3.2616896629333496 Tokens per Sec: 17662.694836131264
Epoch Step: 110 / 135 Loss: 26.530391693115234 Tokens per Sec: 17584.050709236148
Epoch Step: 115 / 135 Loss: 7.415511131286621 Tokens per Sec: 15054.811844898439
Epoch Step: 120 / 135 Loss: 4.159733295440674 Tokens per Sec: 21092.715256919204
Epoch Step: 125 / 135 Loss: 2.6150577068328857 Tokens per Sec: 19784.170452466475
Epoch Step: 130 / 135 Loss: 3.033763885498047 Tokens per Sec: 17962.921291861247
Epoch Step: 135 / 135 Loss: 4.097377300262451 Tokens per Sec: 17889.37117027171
Epoch ended with duration 0:00:12.787539
Train perplexity: 1.1807183950309648
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653808
Validation perplexity: 1.4669749554883191
Epoch 145 / 1000
Epoch Step: 5 / 135 Loss: 0.6340705156326294 Tokens per Sec: 17971.68846542479
Epoch Step: 10 / 135 Loss: 2.025690793991089 Tokens per Sec: 22507.164325681668
Epoch Step: 15 / 135 Loss: 4.534306526184082 Tokens per Sec: 19246.667460810655
Epoch Step: 20 / 135 Loss: 4.261907577514648 Tokens per Sec: 19138.925453482145
Epoch Step: 25 / 135 Loss: 4.406698226928711 Tokens per Sec: 19554.43959298218
Epoch Step: 30 / 135 Loss: 2.855980634689331 Tokens per Sec: 21574.890142180036
Epoch Step: 35 / 135 Loss: 3.155862331390381 Tokens per Sec: 16456.832133249027
Epoch Step: 40 / 135 Loss: 2.2339744567871094 Tokens per Sec: 18645.195481313443
Epoch Step: 45 / 135 Loss: 4.566044807434082 Tokens per Sec: 20998.7853405219
Epoch Step: 50 / 135 Loss: 2.3112270832061768 Tokens per Sec: 21715.45287769747
Epoch Step: 55 / 135 Loss: 1.182615876197815 Tokens per Sec: 21248.086810451055
Epoch Step: 60 / 135 Loss: 4.009444713592529 Tokens per Sec: 17897.58051675058
Epoch Step: 65 / 135 Loss: 2.1546430587768555 Tokens per Sec: 24862.44078662383
Epoch Step: 70 / 135 Loss: 3.910311698913574 Tokens per Sec: 21906.018722180506
Epoch Step: 75 / 135 Loss: 2.4762110710144043 Tokens per Sec: 21683.337768549514
Epoch Step: 80 / 135 Loss: 2.490966320037842 Tokens per Sec: 20406.667701371636
Epoch Step: 85 / 135 Loss: 1.6365159749984741 Tokens per Sec: 22023.585882342486
Epoch Step: 90 / 135 Loss: 1.541192889213562 Tokens per Sec: 23472.9008244443
Epoch Step: 95 / 135 Loss: 5.1859331130981445 Tokens per Sec: 20490.65520566999
Epoch Step: 100 / 135 Loss: 2.778142213821411 Tokens per Sec: 20975.733377636454
Epoch Step: 105 / 135 Loss: 1.010995626449585 Tokens per Sec: 17854.57271574002
Epoch Step: 110 / 135 Loss: 2.60998272895813 Tokens per Sec: 20524.59806759994
Epoch Step: 115 / 135 Loss: 3.2665934562683105 Tokens per Sec: 16911.419651812444
Epoch Step: 120 / 135 Loss: 1.9103034734725952 Tokens per Sec: 19318.77569235392
Epoch Step: 125 / 135 Loss: 2.8208441734313965 Tokens per Sec: 17576.925020867653
Epoch Step: 130 / 135 Loss: 3.2376320362091064 Tokens per Sec: 19587.98605169453
Epoch Step: 135 / 135 Loss: 1.4344807863235474 Tokens per Sec: 16948.88682953061
Epoch ended with duration 0:00:12.710412
Train perplexity: 1.161099604890403
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650268
Validation perplexity: 1.3915945148537245
Model saved checkpoint!
Epoch 146 / 1000
Epoch Step: 5 / 135 Loss: 1.6650471687316895 Tokens per Sec: 14690.884650197024
Epoch Step: 10 / 135 Loss: 2.4125289916992188 Tokens per Sec: 23209.84579234261
Epoch Step: 15 / 135 Loss: 2.8749077320098877 Tokens per Sec: 22738.503143022088
Epoch Step: 20 / 135 Loss: 1.909177541732788 Tokens per Sec: 23755.431439159285
Epoch Step: 25 / 135 Loss: 3.2299671173095703 Tokens per Sec: 20595.690235941573
Epoch Step: 30 / 135 Loss: 2.7655556201934814 Tokens per Sec: 21914.538186293503
Epoch Step: 35 / 135 Loss: 2.7703495025634766 Tokens per Sec: 22408.47878490888
Epoch Step: 40 / 135 Loss: 1.6996350288391113 Tokens per Sec: 19715.168475114537
Epoch Step: 45 / 135 Loss: 1.815617561340332 Tokens per Sec: 21069.73077155141
Epoch Step: 50 / 135 Loss: 1.4490678310394287 Tokens per Sec: 20982.171762665363
Epoch Step: 55 / 135 Loss: 2.062535047531128 Tokens per Sec: 23195.97874635487
Epoch Step: 60 / 135 Loss: 3.271299362182617 Tokens per Sec: 17703.883184434653
Epoch Step: 65 / 135 Loss: 3.04663348197937 Tokens per Sec: 23288.046379915617
Epoch Step: 70 / 135 Loss: 1.6468497514724731 Tokens per Sec: 18779.109452856075
Epoch Step: 75 / 135 Loss: 1.7213006019592285 Tokens per Sec: 18753.961144114775
Epoch Step: 80 / 135 Loss: 25.376880645751953 Tokens per Sec: 19918.535427287912
Epoch Step: 85 / 135 Loss: 3.0282444953918457 Tokens per Sec: 19949.234855849896
Epoch Step: 90 / 135 Loss: 2.2062859535217285 Tokens per Sec: 19875.488686651763
Epoch Step: 95 / 135 Loss: 2.850372552871704 Tokens per Sec: 17778.033479467154
Epoch Step: 100 / 135 Loss: 1.3887779712677002 Tokens per Sec: 19638.87322934476
Epoch Step: 105 / 135 Loss: 2.580477476119995 Tokens per Sec: 16584.537520012396
Epoch Step: 110 / 135 Loss: 1.9249354600906372 Tokens per Sec: 17625.4164536672
Epoch Step: 115 / 135 Loss: 3.1427125930786133 Tokens per Sec: 19897.61352256574
Epoch Step: 120 / 135 Loss: 2.6782665252685547 Tokens per Sec: 19320.99805453831
Epoch Step: 125 / 135 Loss: 1.228757381439209 Tokens per Sec: 17392.55011821897
Epoch Step: 130 / 135 Loss: 1.6284817457199097 Tokens per Sec: 19185.17821678443
Epoch Step: 135 / 135 Loss: 1.3962461948394775 Tokens per Sec: 15900.438257608488
Epoch ended with duration 0:00:12.829268
Train perplexity: 1.119959831798199
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653868
Validation perplexity: 1.536666560728332
Epoch 147 / 1000
Epoch Step: 5 / 135 Loss: 2.0862839221954346 Tokens per Sec: 19882.296193029302
Epoch Step: 10 / 135 Loss: 1.2870304584503174 Tokens per Sec: 22819.606756221296
Epoch Step: 15 / 135 Loss: 2.9013686180114746 Tokens per Sec: 21772.718137455813
Epoch Step: 20 / 135 Loss: 2.2150068283081055 Tokens per Sec: 19754.129689310783
Epoch Step: 25 / 135 Loss: 0.7140027284622192 Tokens per Sec: 17605.558281031634
Epoch Step: 30 / 135 Loss: 1.105414867401123 Tokens per Sec: 20727.377332109794
Epoch Step: 35 / 135 Loss: 1.7030143737792969 Tokens per Sec: 24830.179922631898
Epoch Step: 40 / 135 Loss: 2.232484817504883 Tokens per Sec: 21778.946239308905
Epoch Step: 45 / 135 Loss: 3.512068748474121 Tokens per Sec: 19453.534836196584
Epoch Step: 50 / 135 Loss: 2.707885980606079 Tokens per Sec: 22155.153840529278
Epoch Step: 55 / 135 Loss: 2.920443534851074 Tokens per Sec: 21390.19211696567
Epoch Step: 60 / 135 Loss: 1.6643997430801392 Tokens per Sec: 21999.629650915576
Epoch Step: 65 / 135 Loss: 2.4038095474243164 Tokens per Sec: 16765.858408426124
Epoch Step: 70 / 135 Loss: 1.9547739028930664 Tokens per Sec: 18904.97151555411
Epoch Step: 75 / 135 Loss: 2.7623729705810547 Tokens per Sec: 23275.5106361855
Epoch Step: 80 / 135 Loss: 1.0730239152908325 Tokens per Sec: 17374.32635419836
Epoch Step: 85 / 135 Loss: 3.246469497680664 Tokens per Sec: 22438.357676821346
Epoch Step: 90 / 135 Loss: 1.8256298303604126 Tokens per Sec: 19690.776231459855
Epoch Step: 95 / 135 Loss: 1.1130403280258179 Tokens per Sec: 20311.32232746485
Epoch Step: 100 / 135 Loss: 4.031201362609863 Tokens per Sec: 20931.649646361187
Epoch Step: 105 / 135 Loss: 2.2564029693603516 Tokens per Sec: 16193.75915950532
Epoch Step: 110 / 135 Loss: 2.075807571411133 Tokens per Sec: 19207.88106311518
Epoch Step: 115 / 135 Loss: 1.1841957569122314 Tokens per Sec: 19313.652932035453
Epoch Step: 120 / 135 Loss: 1.2689847946166992 Tokens per Sec: 16532.68076855016
Epoch Step: 125 / 135 Loss: 27.81315803527832 Tokens per Sec: 18791.808582939957
Epoch Step: 130 / 135 Loss: 1.9018787145614624 Tokens per Sec: 20661.32539031109
Epoch Step: 135 / 135 Loss: 2.8686747550964355 Tokens per Sec: 18022.99325423398
Epoch ended with duration 0:00:12.662646
Train perplexity: 1.122111606779171
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.668271
Validation perplexity: 1.6232053810255749
Epoch 148 / 1000
Epoch Step: 5 / 135 Loss: 2.868696928024292 Tokens per Sec: 16658.85206589792
Epoch Step: 10 / 135 Loss: 2.751903772354126 Tokens per Sec: 21884.433275452506
Epoch Step: 15 / 135 Loss: 2.878523588180542 Tokens per Sec: 19449.23303075927
Epoch Step: 20 / 135 Loss: 2.546067237854004 Tokens per Sec: 19695.679394521238
Epoch Step: 25 / 135 Loss: 1.8963603973388672 Tokens per Sec: 21722.420028129887
Epoch Step: 30 / 135 Loss: 3.0721840858459473 Tokens per Sec: 22490.791099547503
Epoch Step: 35 / 135 Loss: 3.0913281440734863 Tokens per Sec: 22586.28373406755
Epoch Step: 40 / 135 Loss: 1.1160945892333984 Tokens per Sec: 19429.36328819393
Epoch Step: 45 / 135 Loss: 1.2689825296401978 Tokens per Sec: 20595.137896216223
Epoch Step: 50 / 135 Loss: 1.5996081829071045 Tokens per Sec: 18301.153738514826
Epoch Step: 55 / 135 Loss: 18.200748443603516 Tokens per Sec: 21988.29177714178
Epoch Step: 60 / 135 Loss: 1.8490550518035889 Tokens per Sec: 17419.159447635535
Epoch Step: 65 / 135 Loss: 2.211430549621582 Tokens per Sec: 21633.06691227262
Epoch Step: 70 / 135 Loss: 3.7583560943603516 Tokens per Sec: 18708.36638365386
Epoch Step: 75 / 135 Loss: 1.3631908893585205 Tokens per Sec: 19523.086201274975
Epoch Step: 80 / 135 Loss: 1.4112013578414917 Tokens per Sec: 22866.617105208217
Epoch Step: 85 / 135 Loss: 2.342691659927368 Tokens per Sec: 21281.23658612052
Epoch Step: 90 / 135 Loss: 1.5849225521087646 Tokens per Sec: 21066.894146712904
Epoch Step: 95 / 135 Loss: 0.6930065751075745 Tokens per Sec: 18561.312186951367
Epoch Step: 100 / 135 Loss: 2.721447706222534 Tokens per Sec: 21003.124757533657
Epoch Step: 105 / 135 Loss: 3.2754616737365723 Tokens per Sec: 17082.22903656328
Epoch Step: 110 / 135 Loss: 2.3005917072296143 Tokens per Sec: 15790.97696038391
Epoch Step: 115 / 135 Loss: 2.249370574951172 Tokens per Sec: 18136.181199687144
Epoch Step: 120 / 135 Loss: 2.665710926055908 Tokens per Sec: 19915.301376730553
Epoch Step: 125 / 135 Loss: 3.8612585067749023 Tokens per Sec: 19520.817927882057
Epoch Step: 130 / 135 Loss: 2.37576961517334 Tokens per Sec: 20357.671197129315
Epoch Step: 135 / 135 Loss: 1.7691738605499268 Tokens per Sec: 16440.214483692624
Epoch ended with duration 0:00:12.879750
Train perplexity: 1.1259514444504084
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.650564
Validation perplexity: 1.4024145232698297
Epoch 149 / 1000
Epoch Step: 5 / 135 Loss: 2.089430093765259 Tokens per Sec: 17540.198966118307
Epoch Step: 10 / 135 Loss: 2.2838926315307617 Tokens per Sec: 17546.576086096466
Epoch Step: 15 / 135 Loss: 2.969420909881592 Tokens per Sec: 22089.0514371391
Epoch Step: 20 / 135 Loss: 2.622480869293213 Tokens per Sec: 22208.794920339213
Epoch Step: 25 / 135 Loss: 1.8949511051177979 Tokens per Sec: 23289.944631941402
Epoch Step: 30 / 135 Loss: 2.16959810256958 Tokens per Sec: 22168.22659872535
Epoch Step: 35 / 135 Loss: 2.0725831985473633 Tokens per Sec: 19036.749899495575
Epoch Step: 40 / 135 Loss: 2.2658979892730713 Tokens per Sec: 22030.119056225903
Epoch Step: 45 / 135 Loss: 2.509425163269043 Tokens per Sec: 21578.018961587608
Epoch Step: 50 / 135 Loss: 1.0402131080627441 Tokens per Sec: 17153.329983601157
Epoch Step: 55 / 135 Loss: 28.059791564941406 Tokens per Sec: 20920.744536236223
Epoch Step: 60 / 135 Loss: 1.540776252746582 Tokens per Sec: 23474.28859148944
Epoch Step: 65 / 135 Loss: 43.79737854003906 Tokens per Sec: 21878.478604508175
Epoch Step: 70 / 135 Loss: 2.1562631130218506 Tokens per Sec: 20043.50294221349
Epoch Step: 75 / 135 Loss: 2.8902499675750732 Tokens per Sec: 17354.759376787184
Epoch Step: 80 / 135 Loss: 2.653202533721924 Tokens per Sec: 16949.19071834598
Epoch Step: 85 / 135 Loss: 1.4041309356689453 Tokens per Sec: 19528.53645574149
Epoch Step: 90 / 135 Loss: 1.7165007591247559 Tokens per Sec: 22264.524379085593
Epoch Step: 95 / 135 Loss: 31.816762924194336 Tokens per Sec: 20118.847221632026
Epoch Step: 100 / 135 Loss: 1.0750583410263062 Tokens per Sec: 23094.49457097336
Epoch Step: 105 / 135 Loss: 1.7867628335952759 Tokens per Sec: 16661.916250832022
Epoch Step: 110 / 135 Loss: 2.0477828979492188 Tokens per Sec: 17823.822087131914
Epoch Step: 115 / 135 Loss: 3.010560989379883 Tokens per Sec: 20270.082398151517
Epoch Step: 120 / 135 Loss: 2.6572909355163574 Tokens per Sec: 19447.3558580351
Epoch Step: 125 / 135 Loss: 29.236543655395508 Tokens per Sec: 19114.339582636327
Epoch Step: 130 / 135 Loss: 2.133897304534912 Tokens per Sec: 18610.73173936685
Epoch Step: 135 / 135 Loss: 3.181924343109131 Tokens per Sec: 17190.19066323133
Epoch ended with duration 0:00:12.775804
Train perplexity: 1.1553824529912724
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.653726
Validation perplexity: 1.463278309943328
Epoch 150 / 1000
Epoch Step: 5 / 135 Loss: 25.21946907043457 Tokens per Sec: 19322.379243126637
Epoch Step: 10 / 135 Loss: 3.5694212913513184 Tokens per Sec: 22268.27180207655
Epoch Step: 15 / 135 Loss: 2.761906147003174 Tokens per Sec: 20395.220481049084
Epoch Step: 20 / 135 Loss: 1.6908546686172485 Tokens per Sec: 20323.649901954574
Epoch Step: 25 / 135 Loss: 3.7502710819244385 Tokens per Sec: 20155.8091719969
Epoch Step: 30 / 135 Loss: 1.6240440607070923 Tokens per Sec: 21192.994778383334
Epoch Step: 35 / 135 Loss: 3.2911486625671387 Tokens per Sec: 19564.513752965566
Epoch Step: 40 / 135 Loss: 3.2450270652770996 Tokens per Sec: 20611.784433836965
Epoch Step: 45 / 135 Loss: 2.595134973526001 Tokens per Sec: 21820.576633147637
Epoch Step: 50 / 135 Loss: 2.1818857192993164 Tokens per Sec: 16202.248335226326
Epoch Step: 55 / 135 Loss: 2.850158214569092 Tokens per Sec: 20521.880636007387
Epoch Step: 60 / 135 Loss: 0.8131122589111328 Tokens per Sec: 21444.977150454135
Epoch Step: 65 / 135 Loss: 1.017438530921936 Tokens per Sec: 20709.431310436095
Epoch Step: 70 / 135 Loss: 1.6368401050567627 Tokens per Sec: 19241.953176226856
Epoch Step: 75 / 135 Loss: 24.553943634033203 Tokens per Sec: 19174.180368977828
Epoch Step: 80 / 135 Loss: 3.8492960929870605 Tokens per Sec: 20582.16104109932
Epoch Step: 85 / 135 Loss: 1.137984275817871 Tokens per Sec: 20523.53143641306
Epoch Step: 90 / 135 Loss: 12.078790664672852 Tokens per Sec: 20302.9420373281
Epoch Step: 95 / 135 Loss: 9.47669506072998 Tokens per Sec: 20001.50058104516
Epoch Step: 100 / 135 Loss: 1.0096685886383057 Tokens per Sec: 22327.16371635613
Epoch Step: 105 / 135 Loss: 1.427369236946106 Tokens per Sec: 16814.189510219425
Epoch Step: 110 / 135 Loss: 2.154730796813965 Tokens per Sec: 20341.543206397055
Epoch Step: 115 / 135 Loss: 2.167928695678711 Tokens per Sec: 18133.736948885202
Epoch Step: 120 / 135 Loss: 3.28691029548645 Tokens per Sec: 18418.14125862378
Epoch Step: 125 / 135 Loss: 2.6042327880859375 Tokens per Sec: 18924.82068709023
Epoch Step: 130 / 135 Loss: 2.793897867202759 Tokens per Sec: 20045.683217783495
Epoch Step: 135 / 135 Loss: 2.3134186267852783 Tokens per Sec: 17314.742745573985
Epoch ended with duration 0:00:12.798572
Train perplexity: 1.1443849528895722
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.649029
Validation perplexity: 1.3506587116404474
Model saved checkpoint!
Epoch 151 / 1000
Epoch Step: 5 / 135 Loss: 14.462675094604492 Tokens per Sec: 23070.684106242417
Epoch Step: 10 / 135 Loss: 1.5598392486572266 Tokens per Sec: 16552.57931720449
Epoch Step: 15 / 135 Loss: 0.6786924600601196 Tokens per Sec: 18933.336532417263
Epoch Step: 20 / 135 Loss: 1.6570700407028198 Tokens per Sec: 20298.05661825525
Epoch Step: 25 / 135 Loss: 3.7787792682647705 Tokens per Sec: 19104.913825385087
Epoch Step: 30 / 135 Loss: 1.4153437614440918 Tokens per Sec: 18296.38563353732
Epoch Step: 35 / 135 Loss: 2.9393999576568604 Tokens per Sec: 22633.1650451018
Epoch Step: 40 / 135 Loss: 2.206069231033325 Tokens per Sec: 23138.03221981566
Epoch Step: 45 / 135 Loss: 2.024458885192871 Tokens per Sec: 17555.59361969167
Epoch Step: 50 / 135 Loss: 1.9093176126480103 Tokens per Sec: 22904.986571814654
Epoch Step: 55 / 135 Loss: 1.4725395441055298 Tokens per Sec: 18583.058523395728
Epoch Step: 60 / 135 Loss: 2.835716485977173 Tokens per Sec: 23865.710325493932
Epoch Step: 65 / 135 Loss: 2.3396198749542236 Tokens per Sec: 18686.656753176176
Epoch Step: 70 / 135 Loss: 1.4628584384918213 Tokens per Sec: 18937.238147439843
Epoch Step: 75 / 135 Loss: 1.08894681930542 Tokens per Sec: 20880.830261599014
Epoch Step: 80 / 135 Loss: 2.928175210952759 Tokens per Sec: 21579.044351576704
Epoch Step: 85 / 135 Loss: 2.5248656272888184 Tokens per Sec: 19263.954422070616
Epoch Step: 90 / 135 Loss: 1.3912582397460938 Tokens per Sec: 22342.721118115434
Epoch Step: 95 / 135 Loss: 2.050905466079712 Tokens per Sec: 20983.50499727286
Epoch Step: 100 / 135 Loss: 0.7106473445892334 Tokens per Sec: 22236.194248246637
Epoch Step: 105 / 135 Loss: 2.108319044113159 Tokens per Sec: 17130.802286949474
Epoch Step: 110 / 135 Loss: 3.573045015335083 Tokens per Sec: 18217.144504546963
Epoch Step: 115 / 135 Loss: 3.1921210289001465 Tokens per Sec: 18197.389449716593
Epoch Step: 120 / 135 Loss: 2.165956497192383 Tokens per Sec: 19510.464372153234
Epoch Step: 125 / 135 Loss: 1.2700035572052002 Tokens per Sec: 18392.72047611159
Epoch Step: 130 / 135 Loss: 10.304244041442871 Tokens per Sec: 19113.720562373703
Epoch Step: 135 / 135 Loss: 1.193807601928711 Tokens per Sec: 17601.4720392297
Epoch ended with duration 0:00:12.797247
Train perplexity: 1.157429067035991
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.662272
Validation perplexity: 1.7364956355526562
Epoch 152 / 1000
Epoch Step: 5 / 135 Loss: 3.2939815521240234 Tokens per Sec: 18049.68466615911
Epoch Step: 10 / 135 Loss: 0.773003101348877 Tokens per Sec: 24303.69058908969
Epoch Step: 15 / 135 Loss: 1.7545515298843384 Tokens per Sec: 18546.012123522127
Epoch Step: 20 / 135 Loss: 2.094696283340454 Tokens per Sec: 19031.514636268672
Epoch Step: 25 / 135 Loss: 2.5809125900268555 Tokens per Sec: 21035.21862480428
Epoch Step: 30 / 135 Loss: 1.393162727355957 Tokens per Sec: 23879.338803553095
Epoch Step: 35 / 135 Loss: 1.935060977935791 Tokens per Sec: 20718.40200620102
Epoch Step: 40 / 135 Loss: 55.46983337402344 Tokens per Sec: 19895.565820755266
Epoch Step: 45 / 135 Loss: 3.2164864540100098 Tokens per Sec: 18993.990014054772
Epoch Step: 50 / 135 Loss: 3.679448127746582 Tokens per Sec: 21446.310948676342
Epoch Step: 55 / 135 Loss: 2.380518913269043 Tokens per Sec: 22132.72944733186
Epoch Step: 60 / 135 Loss: 1.3283309936523438 Tokens per Sec: 20949.606687412288
Epoch Step: 65 / 135 Loss: 11.943408012390137 Tokens per Sec: 21663.688875351534
Epoch Step: 70 / 135 Loss: 3.583855390548706 Tokens per Sec: 17886.58926442135
Epoch Step: 75 / 135 Loss: 3.7919018268585205 Tokens per Sec: 15888.354218170882
Epoch Step: 80 / 135 Loss: 1.9311895370483398 Tokens per Sec: 20502.213761393254
Epoch Step: 85 / 135 Loss: 0.8401163220405579 Tokens per Sec: 23563.448379225618
Epoch Step: 90 / 135 Loss: 2.770860433578491 Tokens per Sec: 20862.087220897738
Epoch Step: 95 / 135 Loss: 1.270079255104065 Tokens per Sec: 21019.63688386815
Epoch Step: 100 / 135 Loss: 2.2341713905334473 Tokens per Sec: 19261.80127400287
Epoch Step: 105 / 135 Loss: 2.1326146125793457 Tokens per Sec: 17837.752513007137
Epoch Step: 110 / 135 Loss: 1.11619234085083 Tokens per Sec: 18293.03098175258
Epoch Step: 115 / 135 Loss: 12.606317520141602 Tokens per Sec: 18178.228569081733
Epoch Step: 120 / 135 Loss: 2.0566630363464355 Tokens per Sec: 17252.15365645724
Epoch Step: 125 / 135 Loss: 2.7064428329467773 Tokens per Sec: 17495.33825481483
Epoch Step: 130 / 135 Loss: 3.2856743335723877 Tokens per Sec: 18996.064269047216
Epoch Step: 135 / 135 Loss: 3.044191360473633 Tokens per Sec: 17882.93897076359
Epoch ended with duration 0:00:12.893242
Train perplexity: 1.158209515132257
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.645501
Validation perplexity: 1.2910584971204568
Epoch 153 / 1000
Epoch Step: 5 / 135 Loss: 1.174588680267334 Tokens per Sec: 21459.9506391625
Epoch Step: 10 / 135 Loss: 2.8468356132507324 Tokens per Sec: 23012.53802458882
Epoch Step: 15 / 135 Loss: 0.9812345504760742 Tokens per Sec: 21436.52118468454
Epoch Step: 20 / 135 Loss: 1.4610648155212402 Tokens per Sec: 16873.246538735337
Epoch Step: 25 / 135 Loss: 0.9470466375350952 Tokens per Sec: 19902.644415717627
Epoch Step: 30 / 135 Loss: 0.9691128134727478 Tokens per Sec: 21340.674249014617
Epoch Step: 35 / 135 Loss: 1.252996563911438 Tokens per Sec: 17603.451394320033
Epoch Step: 40 / 135 Loss: 3.3059210777282715 Tokens per Sec: 17398.42897820365
Epoch Step: 45 / 135 Loss: 13.31095027923584 Tokens per Sec: 23170.44224617883
Epoch Step: 50 / 135 Loss: 2.1142685413360596 Tokens per Sec: 18704.356396560743
Epoch Step: 55 / 135 Loss: 4.50990104675293 Tokens per Sec: 20378.93099528984
Epoch Step: 60 / 135 Loss: 0.6915256977081299 Tokens per Sec: 17735.556017921794
Epoch Step: 65 / 135 Loss: 2.166344165802002 Tokens per Sec: 22616.53368800425
Epoch Step: 70 / 135 Loss: 2.498506546020508 Tokens per Sec: 21171.0193413984
Epoch Step: 75 / 135 Loss: 2.256495475769043 Tokens per Sec: 19283.130302621335
Epoch Step: 80 / 135 Loss: 2.915055751800537 Tokens per Sec: 20877.881368155013
Epoch Step: 85 / 135 Loss: 3.243687868118286 Tokens per Sec: 24105.46843575356
Epoch Step: 90 / 135 Loss: 1.5768598318099976 Tokens per Sec: 22674.86336152578
Epoch Step: 95 / 135 Loss: 1.439220905303955 Tokens per Sec: 19687.40192045554
Epoch Step: 100 / 135 Loss: 2.503592014312744 Tokens per Sec: 15858.694096156081
Epoch Step: 105 / 135 Loss: 2.0674140453338623 Tokens per Sec: 18655.505393407664
Epoch Step: 110 / 135 Loss: 1.489537239074707 Tokens per Sec: 18130.63857027622
Epoch Step: 115 / 135 Loss: 1.2181929349899292 Tokens per Sec: 19447.963537897216
Epoch Step: 120 / 135 Loss: 2.2101736068725586 Tokens per Sec: 17917.18001378172
Epoch Step: 125 / 135 Loss: 2.0484812259674072 Tokens per Sec: 19717.668677032845
Epoch Step: 130 / 135 Loss: 2.2544379234313965 Tokens per Sec: 18529.447472526233
Epoch Step: 135 / 135 Loss: 1.254366159439087 Tokens per Sec: 18013.61300102492
Epoch ended with duration 0:00:12.829955
Train perplexity: 1.117521435676498
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.654456
Validation perplexity: 1.4083205344390681
Epoch 154 / 1000
Epoch Step: 5 / 135 Loss: 3.597233533859253 Tokens per Sec: 21580.745259228683
Epoch Step: 10 / 135 Loss: 0.6633400917053223 Tokens per Sec: 18396.123623208026
Epoch Step: 15 / 135 Loss: 2.2730519771575928 Tokens per Sec: 23027.707111049902
Epoch Step: 20 / 135 Loss: 1.9384441375732422 Tokens per Sec: 20690.921962219607
Epoch Step: 25 / 135 Loss: 1.0596694946289062 Tokens per Sec: 19628.117076301154
Epoch Step: 30 / 135 Loss: 1.7379066944122314 Tokens per Sec: 21378.01133423583
Epoch Step: 35 / 135 Loss: 29.854700088500977 Tokens per Sec: 21104.671805239577
Epoch Step: 40 / 135 Loss: 1.592837929725647 Tokens per Sec: 16686.11326202507
Epoch Step: 45 / 135 Loss: 0.9151432514190674 Tokens per Sec: 19384.381610076736
Epoch Step: 50 / 135 Loss: 2.5968780517578125 Tokens per Sec: 20168.52934663572
Epoch Step: 55 / 135 Loss: 3.1728997230529785 Tokens per Sec: 21238.091298764495
Epoch Step: 60 / 135 Loss: 1.2665448188781738 Tokens per Sec: 19066.87160854476
Epoch Step: 65 / 135 Loss: 2.106025218963623 Tokens per Sec: 19075.000869289015
Epoch Step: 70 / 135 Loss: 3.1741175651550293 Tokens per Sec: 22167.889441836018
Epoch Step: 75 / 135 Loss: 1.3839802742004395 Tokens per Sec: 19853.06993680009
Epoch Step: 80 / 135 Loss: 1.9509778022766113 Tokens per Sec: 23381.627975853393
Epoch Step: 85 / 135 Loss: 5.044801712036133 Tokens per Sec: 17580.093362798696
Epoch Step: 90 / 135 Loss: 2.478203058242798 Tokens per Sec: 19031.753373147814
Epoch Step: 95 / 135 Loss: 2.3783345222473145 Tokens per Sec: 20645.313595321284
Epoch Step: 100 / 135 Loss: 2.649033308029175 Tokens per Sec: 24588.14457244677
Epoch Step: 105 / 135 Loss: 1.541804552078247 Tokens per Sec: 18598.2723642557
Epoch Step: 110 / 135 Loss: 2.7434871196746826 Tokens per Sec: 18564.469502418335
Epoch Step: 115 / 135 Loss: 2.1046369075775146 Tokens per Sec: 17953.528585657903
Epoch Step: 120 / 135 Loss: 1.831501841545105 Tokens per Sec: 18831.623929385332
Epoch Step: 125 / 135 Loss: 8.758787155151367 Tokens per Sec: 17065.413391805676
Epoch Step: 130 / 135 Loss: 2.203585147857666 Tokens per Sec: 19979.15878612398
Epoch Step: 135 / 135 Loss: 2.2907607555389404 Tokens per Sec: 17994.451250696093
Epoch ended with duration 0:00:12.800628
Train perplexity: 1.1313001481795601
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.648901
Validation perplexity: 1.340642730436229
Epoch 155 / 1000
Epoch Step: 5 / 135 Loss: 21.679534912109375 Tokens per Sec: 18099.9002851439
Epoch Step: 10 / 135 Loss: 3.5561442375183105 Tokens per Sec: 21362.433566512627
Epoch Step: 15 / 135 Loss: 1.477046251296997 Tokens per Sec: 19822.092692885828
Epoch Step: 20 / 135 Loss: 2.823127269744873 Tokens per Sec: 19020.30270112274
Epoch Step: 25 / 135 Loss: 0.5352581143379211 Tokens per Sec: 21969.514535342052
Epoch Step: 30 / 135 Loss: 1.3634670972824097 Tokens per Sec: 18270.963239371544
Epoch Step: 35 / 135 Loss: 1.05926513671875 Tokens per Sec: 18382.416576647924
Epoch Step: 40 / 135 Loss: 2.2273271083831787 Tokens per Sec: 25355.008083610097
Epoch Step: 45 / 135 Loss: 18.387113571166992 Tokens per Sec: 21680.13004890342
Epoch Step: 50 / 135 Loss: 1.3772013187408447 Tokens per Sec: 18404.454395298602
Epoch Step: 55 / 135 Loss: 2.64528751373291 Tokens per Sec: 21204.780946148327
Epoch Step: 60 / 135 Loss: 1.5268505811691284 Tokens per Sec: 22234.49385678048
Epoch Step: 65 / 135 Loss: 14.97329044342041 Tokens per Sec: 21255.50896946883
Epoch Step: 70 / 135 Loss: 0.8148057460784912 Tokens per Sec: 21342.767511267346
Epoch Step: 75 / 135 Loss: 2.545154094696045 Tokens per Sec: 21543.66283530996
Epoch Step: 80 / 135 Loss: 1.044816017150879 Tokens per Sec: 21587.49835623821
Epoch Step: 85 / 135 Loss: 0.703987181186676 Tokens per Sec: 18873.374866296144
Epoch Step: 90 / 135 Loss: 2.9784677028656006 Tokens per Sec: 19702.35837040875
Epoch Step: 95 / 135 Loss: 1.981931209564209 Tokens per Sec: 21878.236054289595
Epoch Step: 100 / 135 Loss: 1.6820499897003174 Tokens per Sec: 20447.636274832177
Epoch Step: 105 / 135 Loss: 2.7476015090942383 Tokens per Sec: 19281.92004240991
Epoch Step: 110 / 135 Loss: 0.8863892555236816 Tokens per Sec: 18318.74467211924
Epoch Step: 115 / 135 Loss: 1.079664945602417 Tokens per Sec: 15807.26550294146
Epoch Step: 120 / 135 Loss: 0.8753904104232788 Tokens per Sec: 18933.672328023415
Epoch Step: 125 / 135 Loss: 6.306158542633057 Tokens per Sec: 19086.472696581797
Epoch Step: 130 / 135 Loss: 2.068045139312744 Tokens per Sec: 17044.603085562045
Epoch Step: 135 / 135 Loss: 1.6664326190948486 Tokens per Sec: 18431.429092573537
Epoch ended with duration 0:00:12.738983
Train perplexity: 1.0977821303108368
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.657701
Validation perplexity: 1.5869128334871652
Model saved checkpoint!
Epoch 156 / 1000
Epoch Step: 5 / 135 Loss: 1.3558838367462158 Tokens per Sec: 20750.846347004663
Epoch Step: 10 / 135 Loss: 1.6021567583084106 Tokens per Sec: 22416.59832108313
Epoch Step: 15 / 135 Loss: 2.395665168762207 Tokens per Sec: 20389.02838488337
Epoch Step: 20 / 135 Loss: 2.6149234771728516 Tokens per Sec: 18998.040707115786
Epoch Step: 25 / 135 Loss: 1.1713169813156128 Tokens per Sec: 23492.514434686353
Epoch Step: 30 / 135 Loss: 1.956472635269165 Tokens per Sec: 21358.92401758389
Epoch Step: 35 / 135 Loss: 1.2316746711730957 Tokens per Sec: 19863.415831428236
Epoch Step: 40 / 135 Loss: 2.4942471981048584 Tokens per Sec: 21004.645041629854
Epoch Step: 45 / 135 Loss: 1.3502509593963623 Tokens per Sec: 20616.38923496518
Epoch Step: 50 / 135 Loss: 1.280178427696228 Tokens per Sec: 20292.385238405685
Epoch Step: 55 / 135 Loss: 2.662980318069458 Tokens per Sec: 19319.309854956362
Epoch Step: 60 / 135 Loss: 1.7202389240264893 Tokens per Sec: 19739.460923163377
Epoch Step: 65 / 135 Loss: 1.058335542678833 Tokens per Sec: 20627.598395810932
Epoch Step: 70 / 135 Loss: 1.0855082273483276 Tokens per Sec: 21793.382316445448
Epoch Step: 75 / 135 Loss: 4.5255913734436035 Tokens per Sec: 20354.384023392722
Epoch Step: 80 / 135 Loss: 0.7254437804222107 Tokens per Sec: 22853.4731259157
Epoch Step: 85 / 135 Loss: 1.020648717880249 Tokens per Sec: 20771.46107380239
Epoch Step: 90 / 135 Loss: 0.6683170795440674 Tokens per Sec: 19805.867011069568
Epoch Step: 95 / 135 Loss: 2.9266932010650635 Tokens per Sec: 18118.92174349956
Epoch Step: 100 / 135 Loss: 1.9760910272598267 Tokens per Sec: 17520.26747688017
Epoch Step: 105 / 135 Loss: 2.2936525344848633 Tokens per Sec: 20775.22842672203
Epoch Step: 110 / 135 Loss: 1.6274936199188232 Tokens per Sec: 20094.601984290726
Epoch Step: 115 / 135 Loss: 0.8479787707328796 Tokens per Sec: 20928.24333206991
Epoch Step: 120 / 135 Loss: 1.9477874040603638 Tokens per Sec: 19481.28666594891
Epoch Step: 125 / 135 Loss: 2.167670726776123 Tokens per Sec: 20205.580188409855
Epoch Step: 130 / 135 Loss: 9.534360885620117 Tokens per Sec: 19242.643464257493
Epoch Step: 135 / 135 Loss: 1.9220926761627197 Tokens per Sec: 19170.98301143197
Epoch ended with duration 0:00:12.480111
Train perplexity: 1.1385882766554314
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.567348
Validation perplexity: 1.4481944267971576
Epoch 157 / 1000
Epoch Step: 5 / 135 Loss: 1.7570196390151978 Tokens per Sec: 19898.48759584608
Epoch Step: 10 / 135 Loss: 0.9355922937393188 Tokens per Sec: 23293.236421046528
Epoch Step: 15 / 135 Loss: 1.3672868013381958 Tokens per Sec: 22717.952325859555
Epoch Step: 20 / 135 Loss: 0.5696415901184082 Tokens per Sec: 21750.39334282644
Epoch Step: 25 / 135 Loss: 2.8387467861175537 Tokens per Sec: 21838.712145325466
Epoch Step: 30 / 135 Loss: 18.841228485107422 Tokens per Sec: 18987.741191285495
Epoch Step: 35 / 135 Loss: 21.17242431640625 Tokens per Sec: 22052.021008543496
Epoch Step: 40 / 135 Loss: 2.355593204498291 Tokens per Sec: 24596.136519304255
Epoch Step: 45 / 135 Loss: 0.8785712718963623 Tokens per Sec: 19678.422479679033
Epoch Step: 50 / 135 Loss: 1.547385811805725 Tokens per Sec: 21241.549125914695
Epoch Step: 55 / 135 Loss: 1.4352117776870728 Tokens per Sec: 21587.59499120207
Epoch Step: 60 / 135 Loss: 2.6586194038391113 Tokens per Sec: 26643.448083281066
Epoch Step: 65 / 135 Loss: 33.55319595336914 Tokens per Sec: 19701.485552127855
Epoch Step: 70 / 135 Loss: 4.11100959777832 Tokens per Sec: 20110.613509824998
Epoch Step: 75 / 135 Loss: 3.378657817840576 Tokens per Sec: 19433.34999335915
Epoch Step: 80 / 135 Loss: 1.6746171712875366 Tokens per Sec: 25030.449992685222
Epoch Step: 85 / 135 Loss: 2.3390164375305176 Tokens per Sec: 24972.6249691429
Epoch Step: 90 / 135 Loss: 1.308019757270813 Tokens per Sec: 20708.453799033043
Epoch Step: 95 / 135 Loss: 17.59902000427246 Tokens per Sec: 22538.84628930319
Epoch Step: 100 / 135 Loss: 3.2384512424468994 Tokens per Sec: 23418.733438397794
Epoch Step: 105 / 135 Loss: 2.3743321895599365 Tokens per Sec: 19490.378390931928
Epoch Step: 110 / 135 Loss: 2.4932174682617188 Tokens per Sec: 19374.844645903984
Epoch Step: 115 / 135 Loss: 3.788300037384033 Tokens per Sec: 21164.91137379629
Epoch Step: 120 / 135 Loss: 3.3360488414764404 Tokens per Sec: 22445.34919041174
Epoch Step: 125 / 135 Loss: 1.2914767265319824 Tokens per Sec: 18460.726018121433
Epoch Step: 130 / 135 Loss: 1.651429533958435 Tokens per Sec: 18437.076326698934
Epoch Step: 135 / 135 Loss: 1.7859562635421753 Tokens per Sec: 21551.675404856986
Epoch ended with duration 0:00:11.826441
Train perplexity: 1.1581554748344982
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.578045
Validation perplexity: 1.6123672722034295
Epoch 158 / 1000
Epoch Step: 5 / 135 Loss: 2.426889657974243 Tokens per Sec: 15853.391554809925
Epoch Step: 10 / 135 Loss: 17.724084854125977 Tokens per Sec: 23674.080845886194
Epoch Step: 15 / 135 Loss: 1.9825067520141602 Tokens per Sec: 22950.136972651515
Epoch Step: 20 / 135 Loss: 2.3914568424224854 Tokens per Sec: 21058.189487775646
Epoch Step: 25 / 135 Loss: 1.3668112754821777 Tokens per Sec: 18075.607018364153
Epoch Step: 30 / 135 Loss: 2.704489231109619 Tokens per Sec: 20905.6157145734
Epoch Step: 35 / 135 Loss: 1.4410481452941895 Tokens per Sec: 24045.454680131355
Epoch Step: 40 / 135 Loss: 0.7830318808555603 Tokens per Sec: 24734.58659435094
Epoch Step: 45 / 135 Loss: 2.958066701889038 Tokens per Sec: 19155.394384799907
Epoch Step: 50 / 135 Loss: 3.003427505493164 Tokens per Sec: 24998.51335808361
Epoch Step: 55 / 135 Loss: 2.129384756088257 Tokens per Sec: 23313.244671357377
Epoch Step: 60 / 135 Loss: 1.5883089303970337 Tokens per Sec: 24709.531744820153
Epoch Step: 65 / 135 Loss: 1.2634553909301758 Tokens per Sec: 19686.123661653608
Epoch Step: 70 / 135 Loss: 2.981475591659546 Tokens per Sec: 26051.466007914452
Epoch Step: 75 / 135 Loss: 2.714771032333374 Tokens per Sec: 21807.225418439848
Epoch Step: 80 / 135 Loss: 1.4986966848373413 Tokens per Sec: 23050.184938198003
Epoch Step: 85 / 135 Loss: 2.344067096710205 Tokens per Sec: 22658.409679233326
Epoch Step: 90 / 135 Loss: 0.9668772220611572 Tokens per Sec: 18967.96832812277
Epoch Step: 95 / 135 Loss: 0.9128445386886597 Tokens per Sec: 24165.257972194733
Epoch Step: 100 / 135 Loss: 3.169725179672241 Tokens per Sec: 20906.87418509906
Epoch Step: 105 / 135 Loss: 2.3177902698516846 Tokens per Sec: 18361.8733747065
Epoch Step: 110 / 135 Loss: 2.3611717224121094 Tokens per Sec: 21931.266580945077
Epoch Step: 115 / 135 Loss: 1.9069875478744507 Tokens per Sec: 20466.825381988925
Epoch Step: 120 / 135 Loss: 2.1431071758270264 Tokens per Sec: 19654.355794094292
Epoch Step: 125 / 135 Loss: 0.7524780035018921 Tokens per Sec: 18451.121107059476
Epoch Step: 130 / 135 Loss: 1.0968098640441895 Tokens per Sec: 17873.89814745873
Epoch Step: 135 / 135 Loss: 1.8495655059814453 Tokens per Sec: 20796.830895265157
Epoch ended with duration 0:00:11.926982
Train perplexity: 1.1033781977272528
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.568948
Validation perplexity: 1.4747064028209118
Epoch 159 / 1000
Epoch Step: 5 / 135 Loss: 1.345752477645874 Tokens per Sec: 23777.814624629485
Epoch Step: 10 / 135 Loss: 1.950461506843567 Tokens per Sec: 19541.097849134414
Epoch Step: 15 / 135 Loss: 1.7548012733459473 Tokens per Sec: 20935.37018408567
Epoch Step: 20 / 135 Loss: 1.580432653427124 Tokens per Sec: 20714.010147151825
Epoch Step: 25 / 135 Loss: 1.7367640733718872 Tokens per Sec: 20077.360413033817
Epoch Step: 30 / 135 Loss: 0.9723386764526367 Tokens per Sec: 21701.073886116716
Epoch Step: 35 / 135 Loss: 0.7385883331298828 Tokens per Sec: 21230.83987684628
Epoch Step: 40 / 135 Loss: 17.89130973815918 Tokens per Sec: 21094.27325861239
Epoch Step: 45 / 135 Loss: 1.1869611740112305 Tokens per Sec: 22757.97842871135
Epoch Step: 50 / 135 Loss: 2.427478790283203 Tokens per Sec: 26083.359967535594
Epoch Step: 55 / 135 Loss: 0.9449750185012817 Tokens per Sec: 22730.55144607496
Epoch Step: 60 / 135 Loss: 1.512162685394287 Tokens per Sec: 19765.213919531066
Epoch Step: 65 / 135 Loss: 1.2972745895385742 Tokens per Sec: 23655.021496383182
Epoch Step: 70 / 135 Loss: 0.9520723223686218 Tokens per Sec: 22638.632946114572
Epoch Step: 75 / 135 Loss: 3.5208940505981445 Tokens per Sec: 20229.349273427677
Epoch Step: 80 / 135 Loss: 1.1065784692764282 Tokens per Sec: 22869.353224833027
Epoch Step: 85 / 135 Loss: 1.605565071105957 Tokens per Sec: 26267.580694875407
Epoch Step: 90 / 135 Loss: 2.1974294185638428 Tokens per Sec: 23595.954143780487
Epoch Step: 95 / 135 Loss: 15.539886474609375 Tokens per Sec: 21825.07317318846
Epoch Step: 100 / 135 Loss: 0.7238265872001648 Tokens per Sec: 23701.451762109773
Epoch Step: 105 / 135 Loss: 2.1954104900360107 Tokens per Sec: 20733.697008917792
Epoch Step: 110 / 135 Loss: 2.7160868644714355 Tokens per Sec: 20824.7821600311
Epoch Step: 115 / 135 Loss: 2.1909875869750977 Tokens per Sec: 18367.81287186655
Epoch Step: 120 / 135 Loss: 2.518207550048828 Tokens per Sec: 19461.391248616314
Epoch Step: 125 / 135 Loss: 1.2486536502838135 Tokens per Sec: 20353.856141249937
Epoch Step: 130 / 135 Loss: 1.967821717262268 Tokens per Sec: 18103.964348180365
Epoch Step: 135 / 135 Loss: 1.0802319049835205 Tokens per Sec: 18788.647174373094
Epoch ended with duration 0:00:11.845694
Train perplexity: 1.0918251567188746
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.567921
Validation perplexity: 1.4255340187502694
Epoch 160 / 1000
Epoch Step: 5 / 135 Loss: 33.13350296020508 Tokens per Sec: 20805.212131624743
Epoch Step: 10 / 135 Loss: 1.8445096015930176 Tokens per Sec: 23609.054185155917
Epoch Step: 15 / 135 Loss: 4.916744709014893 Tokens per Sec: 22877.788553247214
Epoch Step: 20 / 135 Loss: 2.462045192718506 Tokens per Sec: 24184.27916352189
Epoch Step: 25 / 135 Loss: 2.390458345413208 Tokens per Sec: 22478.18286558791
Epoch Step: 30 / 135 Loss: 2.8723766803741455 Tokens per Sec: 23467.438629587043
Epoch Step: 35 / 135 Loss: 1.8236291408538818 Tokens per Sec: 22932.652150340655
Epoch Step: 40 / 135 Loss: 1.5579859018325806 Tokens per Sec: 18905.24398248779
Epoch Step: 45 / 135 Loss: 1.0084692239761353 Tokens per Sec: 19579.965468523766
Epoch Step: 50 / 135 Loss: 2.771378517150879 Tokens per Sec: 22495.45910394499
Epoch Step: 55 / 135 Loss: 3.1075809001922607 Tokens per Sec: 19782.313532217126
Epoch Step: 60 / 135 Loss: 1.5281845331192017 Tokens per Sec: 18968.652115270004
Epoch Step: 65 / 135 Loss: 3.1780123710632324 Tokens per Sec: 23396.24930314751
Epoch Step: 70 / 135 Loss: 0.7465242743492126 Tokens per Sec: 20158.909749210656
Epoch Step: 75 / 135 Loss: 2.4017703533172607 Tokens per Sec: 21136.446619687333
Epoch Step: 80 / 135 Loss: 2.1599557399749756 Tokens per Sec: 20722.385700011102
Epoch Step: 85 / 135 Loss: 2.1324896812438965 Tokens per Sec: 23288.050913656512
Epoch Step: 90 / 135 Loss: 2.798927068710327 Tokens per Sec: 23949.821169015562
Epoch Step: 95 / 135 Loss: 1.7530463933944702 Tokens per Sec: 22381.921587151628
Epoch Step: 100 / 135 Loss: 1.1779510974884033 Tokens per Sec: 18756.02309309543
Epoch Step: 105 / 135 Loss: 1.9372763633728027 Tokens per Sec: 19020.32219748537
Epoch Step: 110 / 135 Loss: 1.9371200799942017 Tokens per Sec: 21662.227901212183
Epoch Step: 115 / 135 Loss: 0.9799426794052124 Tokens per Sec: 21863.54006033205
Epoch Step: 120 / 135 Loss: 1.647114634513855 Tokens per Sec: 19058.395427251522
Epoch Step: 125 / 135 Loss: 1.4059404134750366 Tokens per Sec: 20086.90661900295
Epoch Step: 130 / 135 Loss: 1.7108296155929565 Tokens per Sec: 17667.729421759985
Epoch Step: 135 / 135 Loss: 1.682210087776184 Tokens per Sec: 17729.581825620793
Epoch ended with duration 0:00:12.007320
Train perplexity: 1.129336732498766
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.566163
Validation perplexity: 1.3203824539486038
Model saved checkpoint!
Epoch 161 / 1000
Epoch Step: 5 / 135 Loss: 0.5524318218231201 Tokens per Sec: 22130.573196529996
Epoch Step: 10 / 135 Loss: 0.7743363380432129 Tokens per Sec: 20044.05549684074
Epoch Step: 15 / 135 Loss: 0.44745326042175293 Tokens per Sec: 22879.23473139796
Epoch Step: 20 / 135 Loss: 2.950873374938965 Tokens per Sec: 24073.651499921736
Epoch Step: 25 / 135 Loss: 2.522027015686035 Tokens per Sec: 23278.53044888815
Epoch Step: 30 / 135 Loss: 0.8473612666130066 Tokens per Sec: 23543.803489308768
Epoch Step: 35 / 135 Loss: 1.8598580360412598 Tokens per Sec: 19779.94726948866
Epoch Step: 40 / 135 Loss: 3.713261842727661 Tokens per Sec: 21088.858113017188
Epoch Step: 45 / 135 Loss: 2.9100341796875 Tokens per Sec: 20041.864269158494
Epoch Step: 50 / 135 Loss: 3.1992006301879883 Tokens per Sec: 24523.489643651516
Epoch Step: 55 / 135 Loss: 2.1731204986572266 Tokens per Sec: 20135.833080934248
Epoch Step: 60 / 135 Loss: 26.269268035888672 Tokens per Sec: 23367.97073789672
Epoch Step: 65 / 135 Loss: 1.1104815006256104 Tokens per Sec: 24568.416912109446
Epoch Step: 70 / 135 Loss: 3.5040173530578613 Tokens per Sec: 18343.22321352522
Epoch Step: 75 / 135 Loss: 0.7896838188171387 Tokens per Sec: 24773.523262974046
Epoch Step: 80 / 135 Loss: 2.818906545639038 Tokens per Sec: 26667.43789734056
Epoch Step: 85 / 135 Loss: 16.55565643310547 Tokens per Sec: 20693.056042355125
Epoch Step: 90 / 135 Loss: 1.2727195024490356 Tokens per Sec: 21012.508315307117
Epoch Step: 95 / 135 Loss: 1.6226123571395874 Tokens per Sec: 23946.311713671614
Epoch Step: 100 / 135 Loss: 1.3749022483825684 Tokens per Sec: 18916.570398357177
Epoch Step: 105 / 135 Loss: 14.356033325195312 Tokens per Sec: 20204.401617827538
Epoch Step: 110 / 135 Loss: 3.274108409881592 Tokens per Sec: 18764.622163834527
Epoch Step: 115 / 135 Loss: 1.3171435594558716 Tokens per Sec: 18609.112759046257
Epoch Step: 120 / 135 Loss: 3.0116944313049316 Tokens per Sec: 22204.60091030691
Epoch Step: 125 / 135 Loss: 2.103477954864502 Tokens per Sec: 19340.147299288637
Epoch Step: 130 / 135 Loss: 22.153974533081055 Tokens per Sec: 19089.074732473775
Epoch Step: 135 / 135 Loss: 1.3019015789031982 Tokens per Sec: 18831.733743372122
Epoch ended with duration 0:00:11.848333
Train perplexity: 1.139102712447508
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.584426
Validation perplexity: 2.0774145742773107
Epoch 162 / 1000
Epoch Step: 5 / 135 Loss: 1.474782943725586 Tokens per Sec: 24430.257525074045
Epoch Step: 10 / 135 Loss: 2.228375196456909 Tokens per Sec: 19702.2881232599
Epoch Step: 15 / 135 Loss: 1.4722765684127808 Tokens per Sec: 21980.431441797013
Epoch Step: 20 / 135 Loss: 44.338829040527344 Tokens per Sec: 21997.70173410814
Epoch Step: 25 / 135 Loss: 1.992533802986145 Tokens per Sec: 22915.735377469864
Epoch Step: 30 / 135 Loss: 29.890316009521484 Tokens per Sec: 19219.78582257767
Epoch Step: 35 / 135 Loss: 1.778825283050537 Tokens per Sec: 21120.22903264876
Epoch Step: 40 / 135 Loss: 1.4604829549789429 Tokens per Sec: 21750.747160826875
Epoch Step: 45 / 135 Loss: 2.126612424850464 Tokens per Sec: 23994.03153247207
Epoch Step: 50 / 135 Loss: 2.6408255100250244 Tokens per Sec: 20261.906658790907
Epoch Step: 55 / 135 Loss: 1.1448118686676025 Tokens per Sec: 19538.339047474892
Epoch Step: 60 / 135 Loss: 14.885359764099121 Tokens per Sec: 23602.065775102787
Epoch Step: 65 / 135 Loss: 1.1662979125976562 Tokens per Sec: 21492.694452844535
Epoch Step: 70 / 135 Loss: 1.2144418954849243 Tokens per Sec: 22488.539264127507
Epoch Step: 75 / 135 Loss: 2.8304314613342285 Tokens per Sec: 24592.91906129382
Epoch Step: 80 / 135 Loss: 9.396016120910645 Tokens per Sec: 19233.85862178529
Epoch Step: 85 / 135 Loss: 1.6381748914718628 Tokens per Sec: 23048.84452075178
Epoch Step: 90 / 135 Loss: 1.1171228885650635 Tokens per Sec: 22255.951433513168
Epoch Step: 95 / 135 Loss: 2.0100274085998535 Tokens per Sec: 24950.116563008025
Epoch Step: 100 / 135 Loss: 1.5545036792755127 Tokens per Sec: 20056.40449400992
Epoch Step: 105 / 135 Loss: 2.7492077350616455 Tokens per Sec: 19236.32142931079
Epoch Step: 110 / 135 Loss: 0.7763787508010864 Tokens per Sec: 20771.40754723658
Epoch Step: 115 / 135 Loss: 1.7010875940322876 Tokens per Sec: 18116.68162184757
Epoch Step: 120 / 135 Loss: 1.844867467880249 Tokens per Sec: 22086.937596513693
Epoch Step: 125 / 135 Loss: 1.3159458637237549 Tokens per Sec: 20905.769422201298
Epoch Step: 130 / 135 Loss: 1.5324097871780396 Tokens per Sec: 19533.13065348054
Epoch Step: 135 / 135 Loss: 1.9698104858398438 Tokens per Sec: 18830.406171167982
Epoch ended with duration 0:00:11.893332
Train perplexity: 1.1295248062716159
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.571739
Validation perplexity: 1.5946360027251862
Epoch 163 / 1000
Epoch Step: 5 / 135 Loss: 1.4343528747558594 Tokens per Sec: 24150.558647649454
Epoch Step: 10 / 135 Loss: 1.1583300828933716 Tokens per Sec: 24102.2953351276
Epoch Step: 15 / 135 Loss: 3.131937265396118 Tokens per Sec: 22466.118155654243
Epoch Step: 20 / 135 Loss: 1.8003194332122803 Tokens per Sec: 23486.120988517792
Epoch Step: 25 / 135 Loss: 0.9083279967308044 Tokens per Sec: 21015.721509907373
Epoch Step: 30 / 135 Loss: 0.9432681202888489 Tokens per Sec: 23089.65810120625
Epoch Step: 35 / 135 Loss: 1.1442821025848389 Tokens per Sec: 22109.045233316403
Epoch Step: 40 / 135 Loss: 2.535801887512207 Tokens per Sec: 23603.607687086245
Epoch Step: 45 / 135 Loss: 1.6940221786499023 Tokens per Sec: 24244.295865243326
Epoch Step: 50 / 135 Loss: 1.6722602844238281 Tokens per Sec: 23153.65480735985
Epoch Step: 55 / 135 Loss: 0.6979936361312866 Tokens per Sec: 17304.595263443232
Epoch Step: 60 / 135 Loss: 3.415982961654663 Tokens per Sec: 23051.545972726668
Epoch Step: 65 / 135 Loss: 1.4417212009429932 Tokens per Sec: 21149.701332686946
Epoch Step: 70 / 135 Loss: 1.9470875263214111 Tokens per Sec: 24067.024770912933
Epoch Step: 75 / 135 Loss: 5.832489013671875 Tokens per Sec: 19041.58152451086
Epoch Step: 80 / 135 Loss: 0.8591905832290649 Tokens per Sec: 22773.538419979835
Epoch Step: 85 / 135 Loss: 2.2157466411590576 Tokens per Sec: 24327.21606134696
Epoch Step: 90 / 135 Loss: 2.7481634616851807 Tokens per Sec: 19780.89269346528
Epoch Step: 95 / 135 Loss: 1.2157726287841797 Tokens per Sec: 20120.202186979506
Epoch Step: 100 / 135 Loss: 7.056286334991455 Tokens per Sec: 23059.116456118398
Epoch Step: 105 / 135 Loss: 2.1556196212768555 Tokens per Sec: 21719.444766349152
Epoch Step: 110 / 135 Loss: 4.097233772277832 Tokens per Sec: 20045.14846198101
Epoch Step: 115 / 135 Loss: 1.4171642065048218 Tokens per Sec: 16557.62390590367
Epoch Step: 120 / 135 Loss: 2.321321487426758 Tokens per Sec: 19998.753386376902
Epoch Step: 125 / 135 Loss: 1.517367959022522 Tokens per Sec: 18734.113547270194
Epoch Step: 130 / 135 Loss: 2.42529559135437 Tokens per Sec: 17930.534139088064
Epoch Step: 135 / 135 Loss: 2.3482260704040527 Tokens per Sec: 19870.877864196358
Epoch ended with duration 0:00:11.821689
Train perplexity: 1.1159775580203704
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.594644
Validation perplexity: 1.3250134424631166
Training was early stopped on epoch 164 with early stopping rounds 25
[68.2066498694595, 18.910216141641975, 13.991320394981923, 10.72308932127444, 9.638846737461181, 8.015039383425973, 8.048369337050847, 6.8945074829791935, 6.621333668212902, 5.856573415207372, 4.797694567307988, 5.12066173538019, 4.89463566176879, 4.78152260981567, 4.4423218641237705, 3.648046276272597, 3.915361341490908, 4.309491671967366, 3.969206915417764, 3.48493552653714, 2.973047753727155, 3.1168330827597797, 2.9824363036247576, 2.9862111259500796, 2.6487308576284536, 2.7418723923238573, 2.6719139641108227, 2.357339230303115, 2.831754535948269, 2.837174801344819, 2.639687094582918, 2.3786224484315865, 2.4036430654025334, 2.1734943093583534, 2.525433803473071, 2.3254281600595634, 2.079517931090473, 2.175499400435811, 2.1327571405194603, 2.2014661182392983, 1.9263584747015734, 1.8969706167754103, 2.0061328345035117, 1.8939344467057804, 1.769013435605953, 1.8833045958971346, 1.8005412844630988, 1.7999753839608013, 1.7932798689438285, 1.7167731845208822, 1.8685233099280518, 1.650184875469882, 1.6949638944698058, 1.6863054234491366, 1.6541160226951686, 1.5813182834631863, 1.5663431533793732, 1.6493106387649241, 1.5548433006677955, 1.6130820568008015, 1.6664295258581017, 1.5732473589029283, 1.557082613568551, 1.590066844502522, 1.7044409770817777, 1.4998492587698338, 1.488123733339092, 1.4021550554718831, 1.526752271424559, 1.4828562473430904, 1.5133353292813154, 1.4501911838105803, 1.4669714085230436, 1.4277975798489688, 1.3980828181415428, 1.4946836136437411, 1.4357583881782925, 1.3725748141000367, 1.413449006619509, 1.4293903010763869, 1.441509895216755, 1.4475063412663853, 1.3995591779612955, 1.375628146418339, 1.3931715722793026, 1.3075934793230466, 1.3637902129570882, 1.3508961977675773, 1.3853364174882739, 1.35706355884371, 1.480354479040105, 1.2906882474573584, 1.286180141709943, 1.2853431896785372, 1.3020349321247837, 1.2876696884444296, 1.2814109629217434, 1.3243973621856844, 1.2318155365400054, 1.314055234751053, 1.2952340295622606, 1.2440481036995974, 1.2686694518984007, 1.270899190211382, 1.3028998781823369, 1.247042729622779, 1.2343114466995901, 1.2090124075639055, 1.1900188120539774, 1.274678285430927, 1.2279694101679601, 1.2756292291854594, 1.2678667488526145, 1.276431296612296, 1.2380447515654591, 1.2361324575415014, 1.2242300564794857, 1.2235222586431034, 1.2026122013496723, 1.2049913681135516, 1.2731912662691462, 1.2023050995624123, 1.1598046361551038, 1.3670535903152972, 1.1637609839084653, 1.187786581619282, 1.1986423452513986, 1.184303466151804, 1.1576488990599867, 1.204034092110013, 1.1983454855807767, 1.1559170130462353, 1.2528554518806754, 1.2228938748086617, 1.1584025551892043, 1.166571674588282, 1.1586647503687266, 1.1691350093007933, 1.1483383219884864, 1.136939011105583, 1.2868616493483376, 1.177947344161504, 1.1353572635017721, 1.1599172419446917, 1.1807183950309648, 1.161099604890403, 1.119959831798199, 1.122111606779171, 1.1259514444504084, 1.1553824529912724, 1.1443849528895722, 1.157429067035991, 1.158209515132257, 1.117521435676498, 1.1313001481795601, 1.0977821303108368, 1.1385882766554314, 1.1581554748344982, 1.1033781977272528, 1.0918251567188746, 1.129336732498766, 1.139102712447508, 1.1295248062716159, 1.1159775580203704]
[20.725953126909744, 15.067240136418624, 10.499716701712112, 10.184011665918183, 8.696246317045999, 6.09419680224638, 6.181238424146283, 5.461473645267554, 6.252417970553486, 4.948395657386081, 4.983373706915092, 4.119903195125611, 3.4633346470234283, 4.270826095697188, 4.4028225892192765, 4.070933387129766, 3.081332518660152, 3.7098594562284566, 3.495830930295629, 2.7207018603210984, 3.1386879816890993, 3.28031470014316, 2.5072810239403855, 3.7403525672089124, 2.954400879794471, 2.5799235162619163, 3.5301885667775195, 2.549177249307312, 2.3400214921791864, 2.222272365611772, 2.2429570055360717, 1.9254010460403723, 2.4435687365572374, 2.5028535480680394, 2.3762186822306606, 2.1268093195184368, 2.399404128250758, 1.8306706706970892, 1.7236541197681292, 2.2527141116954965, 1.8621512598610301, 2.7075221075772555, 1.8631354983554145, 2.161734075549435, 1.5979224974914694, 1.589002553762903, 1.726685163134072, 1.6838599857411027, 2.141254412637503, 2.1447707553308164, 1.6733611376623163, 1.5075817564520735, 1.8324595965920065, 1.6384067659869823, 1.9186467548022124, 2.0302367735511453, 1.8244186541146623, 1.4563309756168303, 1.7115377130080132, 1.7364009434802754, 1.4355768268071623, 1.7055301192435044, 1.5753419582059656, 1.5199938291514152, 1.5649861126297784, 1.6203279676479916, 1.3960814613900354, 1.5256523548646665, 1.7858348448988022, 1.6210356356995317, 1.9718853805159644, 2.0344671044375553, 1.934479525404674, 1.4953499244532271, 1.3703675555400772, 1.5943866329475693, 1.65247217358401, 1.59979407250005, 1.4755581651739613, 1.5540121237111604, 1.4645186823621175, 1.583774618304566, 1.3543120578042163, 1.512201695684824, 1.3818726226046145, 1.5387707747406996, 1.6342565053799325, 1.4884079594430708, 1.4380030464058577, 1.3974691180696173, 1.5296102685818236, 1.438246453390536, 1.4843880070766697, 1.3872488241554843, 1.3975826398098719, 1.3894516080160317, 1.380848715851306, 1.7059514559654505, 1.3856377986442523, 1.583316107156176, 1.3770012556079032, 1.4985621784830234, 1.4469630798168558, 1.3755188920476553, 1.4077976735135411, 1.3021280951463035, 1.5398924497162998, 1.4293209169800967, 1.596052248767936, 1.300332903254964, 1.4772735504422867, 1.7872734739546545, 1.4878693671454755, 1.29406706122679, 1.6830204682776797, 1.6426092993536685, 1.5926646827907411, 1.371268345333885, 1.2983435930846325, 1.4336328923749235, 1.4938669058033933, 1.5656890692928256, 1.6566962010251665, 1.3193157111918994, 1.4779471082943638, 1.4943205741576275, 1.4298703405218933, 1.353349588900857, 1.6443646175431217, 1.7476103169443473, 1.629509850574765, 1.3169930761703044, 1.6517484512198717, 1.4284499967033528, 1.5807868516756014, 1.474267702578464, 1.2898589944775714, 1.2995332742806438, 1.2810685680071887, 1.3868626239743602, 1.371138099517345, 1.5207805082070611, 1.6187024315633367, 1.656744241377225, 1.4669749554883191, 1.3915945148537245, 1.536666560728332, 1.6232053810255749, 1.4024145232698297, 1.463278309943328, 1.3506587116404474, 1.7364956355526562, 1.2910584971204568, 1.4083205344390681, 1.340642730436229, 1.5869128334871652, 1.4481944267971576, 1.6123672722034295, 1.4747064028209118, 1.4255340187502694, 1.3203824539486038, 2.0774145742773107, 1.5946360027251862, 1.3250134424631166]
Model saved checkpoint!

====STARTING EVALUATION====
Data set sizes (number of sentence pairs):
train 8627
valid 1079
test 1077 

First training example:
src: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
trg: private void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
diff_alignment: —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ
diff_prev: VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ;
diff_updated: –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ 

Most common words:
         (      76236
         )      76208
   –ø–∞–¥–¥–∏–Ω–≥      44322
  —É–¥–∞–ª–µ–Ω–∏–µ      34492
         ;      33724
         .      30504
     VAR_1      24100
         ,      23668
         {      22776
         }      22616 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 (
05 )
06 –ø–∞–¥–¥–∏–Ω–≥
07 —É–¥–∞–ª–µ–Ω–∏–µ
08 ;
09 . 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 6423 25
—É–¥–∞–ª–µ–Ω–∏–µ 34492 7
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 9830 19
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 44322 6
Number of words (types): 662
Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations.png...
Duration: 0:00:04.250370

Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations_8_threshold.png...
Duration: 0:00:01.825263

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations.png...
Duration: 0:00:03.253159

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations_8_threshold.png...
Duration: 0:00:01.258865

Starting conducting edit representation visualization experiment for defects4j_2d_representations.png...
Duration: 0:00:00.623550

Starting conducting edit representation visualization experiment for test300_2d_representations.png...
Duration: 0:00:01.054565

Starting conducting edit representation visualization experiment for val300_2d_representations.png...
Duration: 0:00:01.002656

Starting conducting edit representation visualization experiment for train300_2d_representations.png...
Duration: 0:00:01.024646

Starting conducting edit representation visualization experiment for test_2d_representations.png...
Duration: 0:00:02.799069

Starting conducting edit representation visualization experiment for val_2d_representations.png...
Duration: 0:00:04.071784

Starting conducting edit representation visualization experiment for train5000_2d_representations.png...
Duration: 0:00:09.970718

Start conducting accuracy calculation experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy: 325 / 388 = 0.8376288659793815
Top-3 accuracy: 357 / 388 = 0.9201030927835051
Top-5 accuracy: 367 / 388 = 0.9458762886597938
Top-10 accuracy: 373 / 388 = 0.961340206185567
Top-50 accuracy: 376 / 388 = 0.9690721649484536
Duration: 0:02:42.865688

Start conducting accuracy calculation experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy: 15 / 244 = 0.06147540983606557
Top-3 accuracy: 20 / 244 = 0.08196721311475409
Top-5 accuracy: 24 / 244 = 0.09836065573770492
Top-10 accuracy: 24 / 244 = 0.09836065573770492
Top-50 accuracy: 29 / 244 = 0.11885245901639344
Duration: 0:01:17.312715

Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:06.422894

Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 135 / 300 = 0.45
Top-3 accuracy: 158 / 300 = 0.5266666666666666
Top-5 accuracy: 163 / 300 = 0.5433333333333333
Top-10 accuracy: 178 / 300 = 0.5933333333333334
Top-50 accuracy: 190 / 300 = 0.6333333333333333
Duration: 0:02:05.394295

Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 155 / 300 = 0.5166666666666667
Top-3 accuracy: 179 / 300 = 0.5966666666666667
Top-5 accuracy: 189 / 300 = 0.63
Top-10 accuracy: 200 / 300 = 0.6666666666666666
Top-50 accuracy: 219 / 300 = 0.73
Duration: 0:02:05.836334

Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 239 / 300 = 0.7966666666666666
Top-3 accuracy: 268 / 300 = 0.8933333333333333
Top-5 accuracy: 278 / 300 = 0.9266666666666666
Top-10 accuracy: 282 / 300 = 0.94
Top-50 accuracy: 284 / 300 = 0.9466666666666667
Duration: 0:02:06.636753

Start conducting one shot learning experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 56 / 64 = 0.875
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 57 / 64 = 0.890625
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 57 / 64 = 0.890625
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 59 / 64 = 0.921875
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 60 / 64 = 0.9375

Top-1 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 114 / 324 = 0.35185185185185186
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 149 / 324 = 0.45987654320987653
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 156 / 324 = 0.48148148148148145
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 170 / 324 = 0.5246913580246914
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 197 / 324 = 0.6080246913580247
================
Correct Examples
Class: Abstract an existing method using the abstract keyword
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract void METHOD_1 ( int index , short value ) ;[0m
Pred: abstract void METHOD_1 ( int index , short value ) ;[0m
+++++++++++++++
[32mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract java.lang.String METHOD_1 ( ) ;[0m
Pred: public abstract java.lang.String METHOD_1 ( ) ;[0m
[32mExample #2[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: public abstract java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
[32mExample #3[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract float METHOD_1 ( int index ) ;[0m
Pred: abstract float METHOD_1 ( int index ) ;[0m
[32mExample #4[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
Trg : public abstract void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
Pred: public abstract void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
+++++++++++++++
[32mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Pred: private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
[32mExample #6[0m
Src : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
[32mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
[32mExample #6[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
[32mExample #7[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: void METHOD_1 ( ) ;[0m
[32mExample #8[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
[32mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
[32mExample #3[0m
Src : public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (True):
[32mExample #1[0m
Src : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
Pred: public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
---------------
Class: Add/Remove this qualifier
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
[32mExample #2[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
+++++++++++++++
[32mExample #1[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
[32mExample #2[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
[32mExample #3[0m
Src : protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Trg : public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Pred: public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
[32mExample #4[0m
Src : private static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
[32mExample #5[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
[32mExample #3[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
---------------
Class: Change method return value
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public boolean METHOD_1 ( ) { return true ; }[0m
---------------
Class: Change method return value,Change return type
Golden example (True):
[32mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
[32mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[32mExample #3[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
[32mExample #4[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
[32mExample #5[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Pred: synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
[32mExample #6[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[32mExample #7[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
[32mExample #8[0m
Src : private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Pred: private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
[32mExample #9[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . network object ) { return object . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
[32mExample #10[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[32mExample #11[0m
Src : public static native byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static native byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: public static native byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
[32mExample #12[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
[32mExample #13[0m
Src : native void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
[32mExample #14[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[32mExample #15[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
[32mExample #16[0m
Src : public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
[32mExample #17[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[32mExample #18[0m
Src : public static native void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
[32mExample #19[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Pred: synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
[32mExample #20[0m
Src : public static native void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
[32mExample #21[0m
Src : native void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
[32mExample #22[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
[32mExample #2[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (True):
[32mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (True):
[32mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Narrow method visibility
Golden example (True):
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: public synchronized void METHOD_1 ( ) { }[0m
---------------
Class: Remove condition
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
[32mExample #2[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
[32mExample #3[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #4[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #5[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
[32mExample #7[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
[32mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
[32mExample #4[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
[32mExample #7[0m
Src : public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
[32mExample #8[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
[32mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
[32mExample #10[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
[32mExample #11[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
[32mExample #12[0m
Src : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[32mExample #7[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean validate ( ) ;[0m
Pred: boolean validate ( ) ;[0m
[32mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
[32mExample #9[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Rename parameter
Golden example (True):
[32mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
+++++++++++++++
[32mExample #1[0m
Src : public native boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
[32mExample #2[0m
Src : public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
Trg : public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
Pred: public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
[32mExample #3[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
[32mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
[32mExample #4[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
[32mExample #5[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
[32mExample #4[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
[32mExample #7[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
---------------
Class: unclear
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract void METHOD_1 ( int index , short value ) ;[0m
Pred: abstract void METHOD_1 ( int index , short value ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract boolean METHOD_1 ( ) ;[0m
Pred: public abstract synchronized boolean METHOD_1 ( ) ;[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
Trg : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . get ( ) . project ) ; }[0m
Pred: public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( project . get ( ) ) ; }[0m
[31mExample #2[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
Pred: final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = new java.lang.StringBuilder ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
[31mExample #4[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
Pred: static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; return r ; }[0m
---------------
Class: Add null check
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public void run ( ) ;[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . METHOD_2 ( ) ) ; }[0m
[31mExample #3[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
[31mExample #4[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public int [ ] METHOD_1 ) ;[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } }[0m
Pred: public void METHOD_1 ( ) ;[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . StorageDomain ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Pred: public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( ) ) , true ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . VM ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #3[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , true ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , true ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) , true ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
[31mExample #8[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , VAR_4 ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
[31mExample #12[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , false ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , true ) ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( uri , true ) ; }[0m
[31mExample #15[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , false , null ) , STRING_1 , true ) ; }[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String path ) ;[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int netId ) throws TYPE_2 ;[0m
Pred: TYPE_1 [ ] METHOD_1 ( ) throws TYPE_2 ;[0m
[31mExample #2[0m
Src : public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Pred: public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
[31mExample #3[0m
Src : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: public static native void METHOD_1 ( long ret , int VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
[31mExample #4[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_3 VAR_1 , java.lang.String location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
[31mExample #5[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: void METHOD_1 ( long type , int VAR_2 ) ;[0m
[31mExample #6[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #7[0m
Src : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
[31mExample #8[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 VAR_2 ) ;[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , null , 0 , false , null ) ; }[0m
[31mExample #10[0m
Src : native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : native boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , int [ ] VAR_3 ) ;[0m
[31mExample #11[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String project , int to ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: private static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
[31mExample #3[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: private boolean validate METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #4[0m
Src : private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: private static boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public TYPE_1 TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: public static void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
[31mExample #7[0m
Src : private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: private static boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
[31mExample #8[0m
Src : private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: static static TYPE_1 set ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #9[0m
Src : protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Trg : public TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Pred: protected abstract TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
[31mExample #10[0m
Src : protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Trg : public void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Pred: public final void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( STRING_1 , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #3[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
---------------
Class: Change method return value
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
[31mExample #2[0m
Src : protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String getRefName ( ) { return ref ; }[0m
Pred: protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
---------------
Class: Change parameter type
Golden example (True):
[32mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
[31mExample #2[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: static long METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[31mExample #3[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Trg : private static org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
[31mExample #4[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
[31mExample #5[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
[31mExample #6[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . Disk entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_3 ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
Pred: protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args , t ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
---------------
Class: Change return type
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } return iface ; } return null ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (True):
[32mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { if ( TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
[31mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Object VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { return super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return METHOD_3 ( VAR_3 ) ; }[0m
[31mExample #3[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( name ( name + ( VAR_2 ) ) ) ; }[0m
---------------
Class: Narrow method visibility
Golden example (True):
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( ) { return user ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return user ; }[0m
Pred: public TYPE_1 METHOD_2 ( ) { return user ; }[0m
[31mExample #4[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
---------------
Class: Remove condition
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String line ) { }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { VAR_1 . METHOD_1 ( value ) ; }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( TYPE_2 . METHOD_2 ( args , args . in ) ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 2 , 1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
[31mExample #4[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return VAR_1 ; }[0m
[31mExample #5[0m
Src : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( source ) source . METHOD_1 ( ) ; }[0m
[31mExample #6[0m
Src : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
Pred: public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 class ) , TYPE_1 . any ( VAR_3 ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false ) ; METHOD_3 ( 0 , false ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public static void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( null ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , branch , null , null ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > c ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , null , null , null ) ; }[0m
[31mExample #8[0m
Src : public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public TYPE_1 create ( ) { return new TYPE_1 ( null ) ; }[0m
[31mExample #9[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 ) ; }[0m
[31mExample #11[0m
Src : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_3 , VAR_4 ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
[31mExample #15[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_2 , VAR_3 , version ) ; }[0m
[31mExample #16[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( STRING_1 ) ; }[0m
[31mExample #17[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) . ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[31mExample #21[0m
Src : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) . getId ( ) ; }[0m
[31mExample #22[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public final void METHOD_1 ( final TYPE_1 < VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( null ) ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap ( ) , true ) ; }[0m
[31mExample #24[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; METHOD_2 ( TYPE_2 . create ( 0 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #26[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
[31mExample #27[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
---------------
Class: Remove redundant initialization
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 [ ] = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_3 ( METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; }[0m
[31mExample #2[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
Pred: public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { } log ( msg ) ; }[0m
[31mExample #3[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { if ( ( ) ) { } return arg > 0 ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #7[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( class ) ) == null ; return METHOD_3 ( VAR_1 ) , null ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
[31mExample #9[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { int VAR_2 = ) ; int VAR_2 = x + y ; return VAR_2 - y ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( command ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #11[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public static long METHOD_1 ( long arg ) { return ( ( ) - INT_1 ) { return INT_1 - INT_1 ; } }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
[31mExample #13[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( INT_1 INT_1 ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } } METHOD_3 ( ) { } ; }[0m
[31mExample #18[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { METHOD_3 ( ( ( ( STRING_1 + id ) + action ) ) ) ; } }[0m
[31mExample #19[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { int VAR_2 = ) ; int VAR_2 = x - y ; return y + VAR_2 ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_4 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
[31mExample #23[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_4 ( STRING_1 ) ; METHOD_5 ( VAR_1 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #24[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #25[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public static void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 , class ) ; TYPE_2 . METHOD_3 ( ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
[31mExample #27[0m
Src : public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( STRING_1 , STRING_1 ) ; }[0m
[31mExample #28[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 2 ) ; }[0m
[31mExample #29[0m
Src : public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
Pred: public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( ( ) - > - arg1 ) ; }[0m
[31mExample #30[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #31[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
[31mExample #32[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_3 ( null ) ; METHOD_4 ( ) ; }[0m
[31mExample #33[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #34[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { try { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[31mExample #35[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: public static byte METHOD_1 ( short value ) { return ( ( ) ) - > ( ( ( byte ) ( value ) ) ) ; }[0m
[31mExample #36[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
[31mExample #37[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[31mExample #38[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator ( vmId ) , VAR_3 ) ; }[0m
[31mExample #39[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; }[0m
[31mExample #40[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { return - ( ) ; } return arg ; }[0m
[31mExample #41[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
[31mExample #42[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( STRING_1 ) ; }[0m
[31mExample #43[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
[31mExample #44[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_3 ) ; METHOD_2 ( INT_1 ) ; }[0m
[31mExample #45[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ! ( VAR_1 ) ) ; METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #46[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public static float METHOD_1 ( float arg ) { return new TYPE_1 ( ) ; }[0m
[31mExample #47[0m
Src : public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Pred: public static long METHOD_1 ( long arg1 , long VAR_1 ) { try { long VAR_3 = - ( ) ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
[31mExample #48[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { try { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[31mExample #49[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 ) ) ) { file = VAR_1 ; } }[0m
[31mExample #50[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 2 ) ; Main . METHOD_3 ( ) ; }[0m
[31mExample #51[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return ( VAR_1 instanceof ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
[31mExample #52[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) . METHOD_1 ( ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_2 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
---------------
Class: Rename parameter
Golden example (True):
[32mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
+++++++++++++++
[31mExample #1[0m
Src : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) ;[0m
Pred: public int METHOD_1 ( int count , org.ovirt.engine.core.compat . Version Version ) ;[0m
---------------
Class: Rename variable
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private native java.lang.String METHOD_1 ( ) ;[0m
Pred: private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( t ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { assertEquals . assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) ) . METHOD_2 ( STRING_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - 1 ) ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 , null ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
[31mExample #6[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length , length ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_2 ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
[31mExample #3[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
Pred: final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
[31mExample #4[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
[31mExample #5[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; VAR_1 ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
[31mExample #8[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
[31mExample #10[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
[31mExample #11[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getStoragePoolId ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #15[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . getStoragePoolId ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
[31mExample #16[0m
Src : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
[31mExample #17[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #19[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #20[0m
Src : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . getName ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
[31mExample #21[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_1 ( storage ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
[31mExample #23[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
---------------
Class: Replace statement
Golden example (False):
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = 10 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
Pred: public static long METHOD_1 ( ) { long VAR_1 = INT_1 ; int VAR_2 = 3 ; return VAR_1 & ( VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ; }[0m
---------------
Class: unclear
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected native byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
---------------
================
Duration: 0:05:18.289514

Start conducting one shot learning experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 3 / 56 = 0.05357142857142857
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 3 / 56 = 0.05357142857142857
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 5 / 56 = 0.08928571428571429
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 5 / 56 = 0.08928571428571429
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 5 / 56 = 0.08928571428571429

Top-1 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 7 / 188 = 0.03723404255319149
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 11 / 188 = 0.05851063829787234
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 11 / 188 = 0.05851063829787234
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 13 / 188 = 0.06914893617021277
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 17 / 188 = 0.09042553191489362
================
Correct Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { STRING_2 ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; return true . VAR_6 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Trg : protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Pred: protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; { METHOD_2 ( METHOD_3 ( VAR_2 ) . getName ( ) ) ; } ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_5 . Guid class ) ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { STRING_2 ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { if ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; <unk> = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Trg : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; <unk> = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Pred: private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; } VAR_4 . METHOD_3 ( msg ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Trg : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Pred: TYPE_1 < TYPE_2 > . METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . equals ( ) ) { return ; } ( TYPE_1 . equals ( STRING_1 + name ) ) ; return null ; }[0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Trg : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Pred: public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } }[0m
[31mExample #3[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . METHOD_2 ( ) . getParameters ( ) . getParameters ( ) . METHOD_2 ( ) . getId ( ) . get ( ) . METHOD_2 ( ) , METHOD_2 ( ) . getStoragePoolId ( ) , null ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( true ) ; METHOD_4 ( ) . METHOD_6 ( TYPE_3 . METHOD_6 ( VAR_1 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
[31mExample #5[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 , 0 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; r r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d ) ; }[0m
[31mExample #8[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( VAR_1 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
---------------
Class: Add statement
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = <unk> . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = <unk> . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_3 . METHOD_2 ( VAR_3 ) ; return VAR_1 . METHOD_4 ( VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; s . METHOD_10 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 , true ) ; s . METHOD_5 ( VAR_5 ) ; return VAR_1 . METHOD_7 ( ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) && ( VAR_4 . METHOD_3 ( VAR_2 ) ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; return null ; } return VAR_6 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
[31mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < > ( ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk ( ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: public java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( ! ( VAR_1 . size ( ) ) in ) { return false ; } } return true ; }[0m
[31mExample #3[0m
Src : private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Pred: public boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return VAR_1 ; }[0m
[31mExample #4[0m
Src : private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( ( VAR_2 [ ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } }[0m
---------------
Class: Change comparison operator (e.g. >) in condition
Golden example (False):
[31mExample #1[0m
Src : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Trg : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Pred: private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] { for ( ( ( VAR_3 ) - 1 ) ) ++ i ; TYPE_2 . METHOD_2 ( ( VAR_1 + ( CHAR_1 + 1 ) ) + STRING_1 ) ; } return VAR_2 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Trg : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Pred: private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 . METHOD_3 ( ) + STRING_2 ) VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
---------------
Class: Change exception type in catch clause
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_3 ( VAR_6 , VAR_6 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; return true . VAR_6 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . VAR_7 , VAR_7 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , false ) ; }[0m
[31mExample #2[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , a , d , VAR_5 ) ; }[0m
[31mExample #3[0m
Src : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Trg : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Pred: public final TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , long VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( ) ; } METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( java.util.Map VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Trg : private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Pred: private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 : : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return . METHOD_5 ( ) ; } } } return ; }[0m
[31mExample #6[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
[31mExample #7[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_6 , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_3 , VAR_4 , , a , VAR_6 , VAR_6 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , long VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , new java.lang.String ( VAR_3 ) ) ; } super . METHOD_1 ( session , VAR_1 , VAR_2 , fd , callback ) ; }[0m
[31mExample #9[0m
Src : static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Trg : static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Pred: static long METHOD_1 ( long VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , git . METHOD_4 ( ) ) ) ; TYPE_2 . METHOD_6 ( command . validate ( ) . METHOD_7 ( ) . METHOD_7 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_6 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_7 ( VAR_7 class , VAR_8 ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; input . setId ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source . DiskImage ( ) ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } ; METHOD_6 ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( args . inV ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( ( float ) ( - / ( VAR_3 ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , version , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Trg : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 . length , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Pred: protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( i . size ( i ) , i ) ; } }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , 0 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . getId ( ) , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 cfg , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { METHOD_2 ( VAR_1 == null ) ; } else { m . METHOD_2 ( service , value ) ; } } catch ( java.io.IOException e ) { VAR_2 . assertEquals ( VAR_2 , VAR_1 ) ; } }[0m
[31mExample #2[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 cfg , long VAR_1 , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { long VAR_3 = ( long ) == ( TYPE_3 . METHOD_2 ( ) ) ; } catch ( TYPE_4 e ) { VAR_2 = VAR_1 ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new java.util.HashMap ( ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_2 . get ( 0 ) ) ; }[0m
[31mExample #4[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 cfg , long VAR_1 , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( service == null ) { m . METHOD_2 ( service , value ) ; } } catch ( TYPE_3 e ) { VAR_2 . assertEquals ( VAR_2 , VAR_1 ) ; } }[0m
---------------
Class: Change qualified name in response to a move class refactoring
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , METHOD_6 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_4 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_5 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Trg : public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Pred: public java.lang.String toString ( ) { java.lang.StringBuilder sb = new ( ( ( ( size ) * 5 ) + obj ) ) ; sb.append ( CHAR_1 ) ; for ( java.lang.Object [ i ] ) ; } sb.append ( CHAR_2 ) ] ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) . setId ( ( source , version ) ) { return source != null ? ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk ( ) ) ; } } . METHOD_5 ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_2 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( VAR_3 . getId ( ) ) ) ; validator . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid vmId : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( id ) ; } return . METHOD_6 ( id , VAR_3 ) ; } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network = METHOD_3 ( ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Disk > VAR_3 ) ; } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; <unk> ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; <unk> ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 . METHOD_6 ( ) ) ; METHOD_6 ( VAR_4 ) ; METHOD_6 ( VAR_4 ) ; VAR_4 . VAR_4 ( VAR_4 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) { public java.lang.Object Convert ( java.util.ArrayList < ? > ( source ) ) : null ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } METHOD_4 ( ) . METHOD_4 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) { public java.lang.Object Convert ( java.lang.Object source , version ) ; return source . valueOf ( java.util.ArrayList ) ; } } return VAR_1 . valueOf ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
[31mExample #3[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) . equals ( STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new com.google.gerrit.reviewdb.client.Account.Id ( ) { public java.lang.Object Convert ( java.lang.Object source , version ) ; if ( source == null ) { return ; } } ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new TYPE_1 ( getModel ( ) , new . getSelectedItem ( returnValue ) ) { getModel ( returnValue . getStoragePoolId ( returnValue ) ) { getModel ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; java.lang.Object . valueOf ( java.lang.Object source , version ) ; return source != null ? new java.util.ArrayList < TYPE_1 > ( ) ; } . METHOD_8 ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new TYPE_1 ( ) ; java.lang.Object . valueOf ( java.lang.Object source , version ) { if ( source != null ) ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; org.ovirt.engine.ui.frontend.Frontend . runQuery ( VAR_2 , params , aQuery ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , METHOD_3 ( ) ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new TYPE_1 ( ) ; java.lang.Object . setId ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery ( source ) ) : return source != null ? ( ! . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ) ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Trg : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Pred: private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new TYPE_1 ( this , new java.lang.Object ( ) , returnValue ) ) { VAR_1 = ( ( java.lang.Integer . getSelectedItem ( ) ) ) ; } } ( model . METHOD_4 ( ) ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; java.lang.Object . valueOf ( java.lang.Object source , version ) ; return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; java.lang.Object . valueOf ( java.lang.Object source , version ) { if ( source < org.ovirt.engine.core.common.businessentities . Disk ( ) ) { return ; } . METHOD_5 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { submit VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new TYPE_1 ( model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #8[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; java.lang.Object . valueOf ( java.lang.Object source , version ) { if ( source != null ) { return new java.util.ArrayList < TYPE_2 ( ) ; } . METHOD_2 ( VAR_1 ) ; VAR_6 . runQuery ( VAR_2 , params , aQuery ) ; }[0m
[31mExample #9[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new ( ( this , new > ( returnValue ) ) ) ; setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) . getId ( ) ) ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Trg : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Pred: private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new TYPE_1 ( this , new android.content.Intent ( returnValue ) ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ; }[0m
[31mExample #11[0m
Src : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 VAR_1 = new TYPE_1 ( ) ; VAR_2 = new TYPE_1 ( java.util.List < java.lang.Object > , java.lang.Object returnValue ) ; VAR_3 = ( ( java.util.Map < TYPE_1 > ) ( returnValue ) ) ; } ) . METHOD_5 ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
[31mExample #12[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new TYPE_1 ( ) ; java.lang.Object . setId ( java.lang.Object source , version ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) : false ; } } . METHOD_8 ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
[31mExample #13[0m
Src : private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_1 ( this , new android.content.Intent ( returnValue ) ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new TYPE_1 . getSelectedItem ( ) ; java.lang.Object . setId ( ( source , version ) ) { if ( source != null ) ; } org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
[31mExample #15[0m
Src : public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < org.ovirt.engine.core.compat . Version > > getValue ( ) ) ; VAR_2 . put ( VAR_3 , VAR_3 ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
[31mExample #16[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new TYPE_1 ( ) ; java.lang.Object . setId ( java.lang.Object source , version ) { if ( source == null ) { return ; } . METHOD_5 ( VAR_1 , new ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , long <unk> , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( <unk> , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , long <unk> , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( <unk> , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { return VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } return VAR_5 ; VAR_4 ( VAR_5 . METHOD_2 ( ) ) ) { VAR_5 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; try { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ ] VAR_3 ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Trg : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Pred: public static void METHOD_1 ( int id , int VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; try { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( e ) { } finally { . METHOD_5 ( e ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; try { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ) ; for ( i < TYPE_1 > ) ; VAR_1 . METHOD_2 ( ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; models = new TYPE_1 ( STRING_2 ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat ( STRING_6 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new com.google.gerrit.reviewdb.client.Account.Id ( ) { public java.lang.Object . valueOf ( java.lang.Object source ) ; return source != null ? METHOD_3 ( ) : - 1 ; } } METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; } METHOD_4 ( result . METHOD_5 ( ) ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
Trg : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type ) ; return vm ; }[0m
Pred: public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new java.util.ArrayList ( ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_1 , response , VAR_3 , VAR_2 ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , config . METHOD_3 ( ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
[31mExample #3[0m
Src : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_6 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( VAR_3 . getStatus ( ) ) ; METHOD_8 ( ( ( TYPE_3 ) ( super . getStatus ( ) ) ) , 1 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , null ) ) ) ; METHOD_5 ( cmd ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; final VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_5 ( VAR_5 . any ( ) ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 . getId ( ) ) ) . thenReturn ( command . any ( ) ) ; TYPE_4 . METHOD_6 ( command . validate ( ) . getSucceeded ( ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , null ) ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
[31mExample #10[0m
Src : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( ) ) ; return VAR_2 ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 != null ) { VAR_3 = TYPE_1 . METHOD_5 ( VAR_3 ) ; } METHOD_6 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 ) ) ; return VAR_2 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( true ) . METHOD_6 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_5 ( command ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , VAR_3 ) . METHOD_3 ( VAR_4 ) ; org.junit.Assert.assertEquals ( expected , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node , true , location ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , true , true ) ; VAR_6 ( VAR_7 . METHOD_4 ( VAR_8 ) VAR_7 ) ; METHOD_7 ( VAR_6 ) . METHOD_5 ( VAR_6 , VAR_7 , VAR_7 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) ) { context . METHOD_4 ( VAR_2 , node . METHOD_2 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
[31mExample #16[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( cluster == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; }[0m
Trg : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
Pred: protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 ) ) ; }[0m
[31mExample #18[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 ) ; } }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
[31mExample #19[0m
Src : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { METHOD_2 ( ) ; } finally { VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_3 ) + STRING_3 ) ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( VAR_2 , true ) ; org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 index ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd . getParameters ( ) . METHOD_2 ( ) . METHOD_2 ( cluster ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . any ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; if ( VAR_4 . METHOD_4 ( null ) ) { return ; } context . METHOD_1 ( VAR_1 , version , VAR_3 , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_2 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , . METHOD_5 ( 1 ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
[31mExample #25[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , options ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; for ( TYPE_3 VAR_3 ) { for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
[31mExample #26[0m
Src : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Trg : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 : for ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ( ) ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; } }[0m
---------------
Class: Remove redundant initialization,Replace statement
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 < ? extends TYPE_2 > VAR_1 , java.util.List < TYPE_2 > config ) { TYPE_3 . display ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; java.util.ArrayList < TYPE_4 > VAR_1 = null ; } . METHOD_4 ( VAR_4 , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , TYPE_3 VAR_2 ) { TYPE_3 VAR_3 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 = VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; } . METHOD_4 ( VAR_5 , VAR_1 ) ; }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { return ( ( TYPE_2 . equals ( action ) ) ) || ( STRING_1 . equals ( action ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( <unk> , STRING_8 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( <unk> , STRING_8 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , STRING_8 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 . size ( ) ) ? VAR_3 . METHOD_3 ( true ) ; } if ( VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_6 ( STRING_1 , VAR_3 . METHOD_7 ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; }[0m
[31mExample #5[0m
Src : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Trg : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 parameters = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 , VAR_4 . IdQueryParameters class ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , false , false ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( null ) ; final org.ovirt.engine.core.common.businessentities.VM vm = null ; VAR_1 . METHOD_2 ( vds ) ; VAR_1 . METHOD_6 ( model ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) , VAR_2 , null , VAR_3 ) ; METHOD_7 ( disk ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( VAR_1 , STRING_1 ) ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; }[0m
Pred: private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( storageDomain ) . METHOD_3 ( ) ; METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; command . METHOD_4 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . METHOD_6 ( ) ; METHOD_7 ( ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 . OrmException VAR_1 = new TYPE_3 ( ) ; TYPE_1 . METHOD_4 ( VAR_2 ) . METHOD_6 ( ) ; METHOD_6 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 , VAR_4 , null ) ; }[0m
[31mExample #16[0m
Src : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( source , boolean VAR_1 , TYPE_2 VAR_2 ) { return VAR_3 . get ( ( ) . METHOD_2 ( ) ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { command . METHOD_2 ( ) ; TYPE_1 . METHOD_4 ( STRING_1 , cmd , VAR_2 . METHOD_6 ( ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , validator . METHOD_7 ( 0 ) ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 ) ; int c = TYPE_1 . METHOD_4 ( c ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_2 . METHOD_7 ( c ) ; }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( true ) ; disk . METHOD_5 ( METHOD_6 ) ; METHOD_7 ( false ) ; }[0m
[31mExample #20[0m
Src : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( STRING_1 == STRING_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) { throw new TYPE_1 ( STRING_2 ) ; } }[0m
[31mExample #21[0m
Src : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
Trg : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }[0m
Pred: protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ) ; TYPE_1 res = res . METHOD_3 ( index , null ) ; if ( obj != null ) { return INT_1 ; } }[0m
[31mExample #22[0m
Src : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Trg : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Pred: private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = VAR_3 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_2 ) ; VAR_2 . METHOD_2 ( STRING_4 , null ) ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , VAR_1 ) . METHOD_9 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage . DiskImage ( new TYPE_1 . METHOD_3 ( VAR_1 ) ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network network . METHOD_1 ( 0 , 0 ) ; VAR_2 . METHOD_5 ( model ) ; }[0m
[31mExample #25[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ! ( METHOD_2 ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { return new TYPE_1 ( VAR_1 , , ( - 1 ) , true , true , null ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) , false , false ) ; }[0m
---------------
Class: Remove statement,Add try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; server . METHOD_7 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( ) ; VAR_1 = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) . METHOD_3 ( ) ; VAR_1 . METHOD_4 ( VAR_2 ) ; } VAR_1 . METHOD_7 ( ) ; index . METHOD_7 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( ) ; VAR_1 = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_3 ( ) , VAR_1 ) ; assertTrue ( STRING_1 , ( VAR_1 . METHOD_5 ( ) ) ) ; }[0m
---------------
Class: Remove statement,Move existing statements in try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } METHOD_6 ( VAR_3 , STRING_4 , STRING_3 , STRING_4 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { VAR_3 } , new java.util.ArrayList < java.lang.String > ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 expected ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class , new java.lang.String [ ] { VAR_3 } , new java.lang.Object [ ) ; } resource . METHOD_5 ( ) ; METHOD_6 ( STRING_2 ) ; METHOD_7 ( VAR_5 ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; METHOD_8 ( TYPE_1 VAR_2 ) ; } }[0m
---------------
Class: Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { else { METHOD_3 ( ) . setIsChangable ( ( METHOD_2 ( ) . getEntity ( ) ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ; } }[0m
Trg : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
Pred: public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( VAR_1 == INT_1 ) || ( VAR_1 == null ) ) { } else { VAR_2 . METHOD_4 ( new TYPE_2 . value ( ) ) ; } }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Pred: public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; METHOD_2 ( 1 ) ; org.junit.Assert . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { } } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } }[0m
[31mExample #3[0m
Src : protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Trg : protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Pred: protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( validate ( validate ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ) ; }[0m
[31mExample #4[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Pred: public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( VAR_1 ) != ( ) . isEmpty ( ) ) ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
[31mExample #5[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) ) ; return ( VAR_4 . ValidationResult ( ) ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) ; } VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . setId ( hosts ) ; VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( VAR_6 != null ) { TYPE_2 . METHOD_2 ( ( ( cluster ) ( model ) ) , pool . getId ( ) ) ; } }[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_6 ( VAR_4 . METHOD_6 ( ) ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( ! ( VAR_3 . METHOD_2 ( VAR_3 ) ) ) ) { add . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
[31mExample #2[0m
Src : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
Trg : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( fail ) ; return new byte [ 0 ] ; } }[0m
Pred: protected byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; VAR_3 . METHOD_4 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; } return new byte [ 0 ] ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; { METHOD_2 ( METHOD_3 ( VAR_2 ) . getName ( ) ) ; } ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( VAR_5 . Guid class ) ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Trg : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Pred: public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b ; } java.lang.System.out.println ( ( ( STRING_1 + ( b . toString ( ) ) ) + STRING_2 ) ) ; return a ? b : b ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , <unk> . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , <unk> . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , . METHOD_5 ( . getName class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; mContext . METHOD_4 ( ( ) ( VAR_1 . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , callback ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params = org.mockito.Mockito . METHOD_5 ( cmd . METHOD_6 ( ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 ( ) > { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) ; } return TYPE_5 . METHOD_2 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 , VAR_2 , VAR_4 ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 ( TYPE_1 , cluster ) . map ( VAR_5 , entity ) ) ; } ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( ) . toString ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getId ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
---------------
Class: Replace if statement with assert statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Trg : public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Pred: public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { public new TYPE_1 ( STRING_1 ) ; } c = VAR_2 . get ( VAR_1 ) ; if ( s != null ) { return s . METHOD_3 ( ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } TYPE_2 value = VAR_1 . get ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( null ) ; return VAR_3 . METHOD_4 ( VAR_1 ) ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , mContext . METHOD_4 ( ) . METHOD_6 ( ) ) ; org.junit.Assert.assertEquals ( INT_2 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 s , boolean value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( ( service == null ) : ( ( double ) . METHOD_2 ( ) ) ) ; } catch ( TYPE_4 e ) { VAR_2 . METHOD_3 ( VAR_2 , VAR_1 ) ; } }[0m
[31mExample #2[0m
Src : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Trg : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Pred: void METHOD_1 ( ) { if ( VAR_1 ) { android.util.Log.d ( VAR_2 . TAG , ( ( ( ( STRING_1 + ( this ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) ) + ( VAR_4 ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
[31mExample #3[0m
Src : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Trg : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . log ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Pred: public void run ( ) { TYPE_1 = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( ) ; try { VAR_1 = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { break break ; } } } catch ( java.io.IOException e ) { } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Trg : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Pred: boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; return true ; } return false ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 ( VAR_1 , version ) ; java.lang.Object value = VAR_4 . METHOD_2 ( VAR_1 . toString ( ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; return true ; }[0m
Pred: protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( STRING_1 + VAR_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } return ( TYPE_1 . METHOD_4 ( . getName ( ) , STRING_2 ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . getParameters ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . <unk> class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . any ( ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . Guid ) ) ; org.mockito.Mockito.doReturn ( ) . METHOD_6 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 , VAR_1 . METHOD_7 ( VAR_4 ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 parent = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( VAR_1 . getName ( ) , new TYPE_3 ( ) , new TYPE_4 ( VAR_6 ) , TYPE_4 . METHOD_7 ( id ) ) ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } }[0m
[31mExample #15[0m
Src : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Trg : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 . setId ( cluster . getSucceeded ( ) ) ; return true ; } return false ; }[0m
[31mExample #16[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; METHOD_6 . METHOD_6 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getVm ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
[31mExample #19[0m
Src : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Trg : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Pred: private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
[31mExample #20[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : log . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . METHOD_5 ( ) ) ) ; return ; METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
[31mExample #22[0m
Src : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_7 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_8 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
[31mExample #24[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . getStoragePoolId ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
[31mExample #25[0m
Src : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . getStatus ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Pred: protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; } else if ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; } return returnValue ; }[0m
[31mExample #26[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) ) ; if ( vds != null ) { model . METHOD_5 ( TYPE_2 . METHOD_6 ( vds ) , vds . METHOD_8 ( ) ) ; } }[0m
[31mExample #27[0m
Src : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
Trg : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . getName ( ) ) ) ) ) { return network ; } } return null ; }[0m
Pred: protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String < TYPE_1 > VAR_2 ) { for ( TYPE_1 . Network Network > VAR_2 ) { if ( ( ( id != null ) ) || ( name . equals ( network . METHOD_2 ( ) ) ) ) { return network ; } } return null ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 parent = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( VAR_1 . getName ( ) , new TYPE_3 ( TYPE_4 ) , TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) ) ; }[0m
---------------
================
Duration: 0:02:30.036179

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : new TYPE_1 ( VAR_1 ) ; case obj : return ; } return - 1 ; case 1 : return ; } else { return VAR_1 |= ; } else { VAR_3 = VAR_1 ; VAR_2 . equals ( VAR_1 + VAR_2 ) ; } return VAR_3 ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Pred: public void ( int VAR_2 , int VAR_3 ) { super . METHOD_1 ( VAR_3 , VAR_3 ) ; this . setId ( VAR_2 ) ; this . VAR_4 = VAR_3 ; this . VAR_4 = VAR_3 ; this . VAR_5 = VAR_3 ; return VAR_5 = new TYPE_1 ( VAR_3 ) ; } return VAR_5 ; }[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: private void add ( final VAR_1 ) { METHOD_1 ( ) ; if ( ( VAR_1 . isEmpty ( ) ) == null ) { return ; } if ( VAR_1 . length ( ) == 0 ) { return ; } c c = VAR_1 . METHOD_2 ( METHOD_4 ( ) ) ) { break ; } } return ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws java.lang.Exception TYPE_2 { if ( ( VAR_1 ) == null ) { return null ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: public static boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null == null ) { return null ; } if ( VAR_1 == null ) { return null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . <unk> ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_1 == null ) { return ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 != null ) { for ( ! ( VAR_1 . METHOD_2 ( ) ) ) { for ( ! VAR_2 : VAR_1 . METHOD_3 ( ) ) ; if ( ! ( ! VAR_3 ) . METHOD_8 ( VAR_3 ) ) ; } return ! ( VAR_3 , VAR_4 ) ; } } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: boolean METHOD_1 ( ) { synchronized ( VAR_1 ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 VAR_1 . METHOD_3 ( ) ) { break ; } else if ( VAR_3 ) { break ; } return false ; } return false ; }[0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . <unk> ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: public java.util.List < ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { try { return VAR_1 [ ] ; for ( TYPE_1 [ ] values ) { out = i ] ; } return out ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Pred: public static synchronized double METHOD_1 ( int [ VAR_1 , int [ ] VAR_2 ) { final int i = VAR_1 ; i [ i ] ; } return VAR_3 ; }[0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: public static METHOD_1 ( java.lang.Object VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { this . METHOD_1 ( VAR_4 ) ; } finally { } = METHOD_3 ( VAR_4 ) ; } catch ( android.os.RemoteException e ) { throw e ; } }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 { final int VAR_4 = VAR_2 ; VAR_3 = VAR_5 ; final java.lang.Object = ( VAR_1 + VAR_3 ) ; final java.lang.Object = new TYPE_4 ( 0 , 1 ) ; return INT_1 ; mContext . METHOD_3 ( VAR_7 ) ; }[0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public void METHOD_1 ( ) { if ( this . VAR_1 != null ) { synchronized ( this . VAR_1 . size ( VAR_3 ) ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null ) { return ; } if ( VAR_1 == null == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 ) == null ) { return null ; } METHOD_1 ( ( TYPE_2 < ? > > VAR_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null ) { if ( VAR_1 != null ) { if ( VAR_1 != null ) { TYPE_3 VAR_2 = ( ( ) ) [ 0 ] ; } return ( TYPE_1 . isEmpty ( ) ) ; } return VAR_3 ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( final int x ) { if ( x != null ) { return METHOD_2 ( x ) ; } return x . METHOD_2 ( x ) ; }[0m
---------------
================
Duration: 0:00:12.845504

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
Top-1 accuracy: 482 / 1077 = 0.44753946146703805
Top-3 accuracy: 582 / 1077 = 0.5403899721448467
Top-5 accuracy: 613 / 1077 = 0.5691736304549675
Top-10 accuracy: 651 / 1077 = 0.6044568245125348
Top-50 accuracy: 711 / 1077 = 0.6601671309192201
Duration: 0:07:22.357287

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
Top-1 accuracy: 65 / 300 = 0.21666666666666667
Top-3 accuracy: 88 / 300 = 0.29333333333333333
Top-5 accuracy: 92 / 300 = 0.30666666666666664
Top-10 accuracy: 99 / 300 = 0.33
Top-50 accuracy: 111 / 300 = 0.37
Duration: 0:02:03.155410

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
Top-1 accuracy: 70 / 300 = 0.23333333333333334
Top-3 accuracy: 81 / 300 = 0.27
Top-5 accuracy: 86 / 300 = 0.2866666666666667
Top-10 accuracy: 93 / 300 = 0.31
Top-50 accuracy: 101 / 300 = 0.33666666666666667
Duration: 0:02:03.428660

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
Top-1 accuracy: 72 / 300 = 0.24
Top-3 accuracy: 90 / 300 = 0.3
Top-5 accuracy: 97 / 300 = 0.3233333333333333
Top-10 accuracy: 103 / 300 = 0.3433333333333333
Top-50 accuracy: 120 / 300 = 0.4
Duration: 0:02:01.974543

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
Top-1 accuracy: 1 / 300 = 0.0033333333333333335
Top-3 accuracy: 2 / 300 = 0.006666666666666667
Top-5 accuracy: 2 / 300 = 0.006666666666666667
Top-10 accuracy: 2 / 300 = 0.006666666666666667
Top-50 accuracy: 2 / 300 = 0.006666666666666667
Duration: 0:01:35.639082

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 1 / 300 = 0.0033333333333333335
Top-5 accuracy: 1 / 300 = 0.0033333333333333335
Top-10 accuracy: 2 / 300 = 0.006666666666666667
Top-50 accuracy: 3 / 300 = 0.01
Duration: 0:01:34.566952

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 2 / 300 = 0.006666666666666667
Top-5 accuracy: 2 / 300 = 0.006666666666666667
Top-10 accuracy: 3 / 300 = 0.01
Top-50 accuracy: 4 / 300 = 0.013333333333333334
Duration: 0:01:35.901123

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
Top-1 accuracy: 239 / 300 = 0.7966666666666666
Top-3 accuracy: 268 / 300 = 0.8933333333333333
Top-5 accuracy: 278 / 300 = 0.9266666666666666
Top-10 accuracy: 282 / 300 = 0.94
Top-50 accuracy: 284 / 300 = 0.9466666666666667
Duration: 0:02:05.285301

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
Top-1 accuracy: 155 / 300 = 0.5166666666666667
Top-3 accuracy: 179 / 300 = 0.5966666666666667
Top-5 accuracy: 189 / 300 = 0.63
Top-10 accuracy: 200 / 300 = 0.6666666666666666
Top-50 accuracy: 219 / 300 = 0.73
Duration: 0:02:06.693234

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
Top-1 accuracy: 135 / 300 = 0.45
Top-3 accuracy: 158 / 300 = 0.5266666666666666
Top-5 accuracy: 163 / 300 = 0.5433333333333333
Top-10 accuracy: 178 / 300 = 0.5933333333333334
Top-50 accuracy: 190 / 300 = 0.6333333333333333
Duration: 0:02:04.685402

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
Top-1 accuracy: 12 / 300 = 0.04
Top-3 accuracy: 14 / 300 = 0.04666666666666667
Top-5 accuracy: 16 / 300 = 0.05333333333333334
Top-10 accuracy: 17 / 300 = 0.056666666666666664
Top-50 accuracy: 22 / 300 = 0.07333333333333333
Duration: 0:01:35.615130

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
Top-1 accuracy: 3 / 300 = 0.01
Top-3 accuracy: 7 / 300 = 0.023333333333333334
Top-5 accuracy: 8 / 300 = 0.02666666666666667
Top-10 accuracy: 9 / 300 = 0.03
Top-50 accuracy: 10 / 300 = 0.03333333333333333
Duration: 0:01:37.178520

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
Top-1 accuracy: 10 / 300 = 0.03333333333333333
Top-3 accuracy: 11 / 300 = 0.03666666666666667
Top-5 accuracy: 11 / 300 = 0.03666666666666667
Top-10 accuracy: 11 / 300 = 0.03666666666666667
Top-50 accuracy: 14 / 300 = 0.04666666666666667
Duration: 0:01:35.331522

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
Top-1 accuracy: 1193 / 5835 = 0.20445586975149957
Top-3 accuracy: 1577 / 5835 = 0.2702656383890317
Top-5 accuracy: 1691 / 5835 = 0.28980291345329906
Top-10 accuracy: 1831 / 5835 = 0.313796058269066
Top-50 accuracy: 2137 / 5835 = 0.3662382176520994
Duration: 0:37:04.818964

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
Top-1 accuracy: 34 / 6545 = 0.005194805194805195
Top-3 accuracy: 50 / 6545 = 0.007639419404125287
Top-5 accuracy: 58 / 6545 = 0.008861726508785332
Top-10 accuracy: 69 / 6545 = 0.010542398777692896
Top-50 accuracy: 100 / 6545 = 0.015278838808250574
Duration: 0:29:38.438831

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
Top-1 accuracy: 482 / 1077 = 0.44753946146703805
Top-3 accuracy: 582 / 1077 = 0.5403899721448467
Top-5 accuracy: 613 / 1077 = 0.5691736304549675
Top-10 accuracy: 651 / 1077 = 0.6044568245125348
Top-50 accuracy: 711 / 1077 = 0.6601671309192201
Duration: 0:06:15.485061

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
Top-1 accuracy: 29 / 1098 = 0.026411657559198543
Top-3 accuracy: 39 / 1098 = 0.03551912568306011
Top-5 accuracy: 45 / 1098 = 0.040983606557377046
Top-10 accuracy: 48 / 1098 = 0.04371584699453552
Top-50 accuracy: 64 / 1098 = 0.058287795992714025
Duration: 0:04:59.066779

