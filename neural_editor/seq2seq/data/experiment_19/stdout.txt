
====STARTING TRAINING====
{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 25,
 'EDIT_REPRESENTATION_SIZE': 16,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LEAVE_ONLY_CHANGED': True,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_19/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEACHER_FORCING_RATIO': 0.9,
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'TUFANO_LABELED_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/50_100',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 8627
valid 1079
test 1077 

First training example:
src: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
trg: private void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
diff_alignment: —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ
diff_prev: VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ;
diff_updated: –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ 

Most common words:
         (      76236
         )      76208
   –ø–∞–¥–¥–∏–Ω–≥      44322
  —É–¥–∞–ª–µ–Ω–∏–µ      34492
         ;      33724
         .      30504
     VAR_1      24100
         ,      23668
         {      22776
         }      22616 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 (
05 )
06 –ø–∞–¥–¥–∏–Ω–≥
07 —É–¥–∞–ª–µ–Ω–∏–µ
08 ;
09 . 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 6423 25
—É–¥–∞–ª–µ–Ω–∏–µ 34492 7
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 9830 19
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 44322 6
Number of words (types): 662
Epoch 0 / 1000
Epoch Step: 5 / 135 Loss: 169.70115661621094 Tokens per Sec: 11390.41232926452
Epoch Step: 10 / 135 Loss: 241.6058349609375 Tokens per Sec: 20558.35394955899
Epoch Step: 15 / 135 Loss: 149.73291015625 Tokens per Sec: 19465.9706647771
Epoch Step: 20 / 135 Loss: 255.7412872314453 Tokens per Sec: 22458.895624268265
Epoch Step: 25 / 135 Loss: 212.1512451171875 Tokens per Sec: 20452.34429831481
Epoch Step: 30 / 135 Loss: 202.81765747070312 Tokens per Sec: 21052.89734946413
Epoch Step: 35 / 135 Loss: 239.71824645996094 Tokens per Sec: 21994.31482528576
Epoch Step: 40 / 135 Loss: 143.14553833007812 Tokens per Sec: 22248.04970674114
Epoch Step: 45 / 135 Loss: 168.10491943359375 Tokens per Sec: 21451.856709792843
Epoch Step: 50 / 135 Loss: 157.8255615234375 Tokens per Sec: 18119.482182597876
Epoch Step: 55 / 135 Loss: 133.80809020996094 Tokens per Sec: 22344.921033550094
Epoch Step: 60 / 135 Loss: 114.94305419921875 Tokens per Sec: 22424.19498572456
Epoch Step: 65 / 135 Loss: 113.91746520996094 Tokens per Sec: 21604.801264491885
Epoch Step: 70 / 135 Loss: 68.70634460449219 Tokens per Sec: 17534.32812212711
Epoch Step: 75 / 135 Loss: 119.29632568359375 Tokens per Sec: 17502.509484984523
Epoch Step: 80 / 135 Loss: 41.54648971557617 Tokens per Sec: 16726.398434371706
Epoch Step: 85 / 135 Loss: 70.72380828857422 Tokens per Sec: 20708.057714742114
Epoch Step: 90 / 135 Loss: 128.38400268554688 Tokens per Sec: 20287.434633383018
Epoch Step: 95 / 135 Loss: 97.2026138305664 Tokens per Sec: 19669.118706219735
Epoch Step: 100 / 135 Loss: 98.90116882324219 Tokens per Sec: 15699.729270010048
Epoch Step: 105 / 135 Loss: 141.9266815185547 Tokens per Sec: 17255.31485718816
Epoch Step: 110 / 135 Loss: 123.69589233398438 Tokens per Sec: 18031.34938296581
Epoch Step: 115 / 135 Loss: 117.17112731933594 Tokens per Sec: 19717.250882437726
Epoch Step: 120 / 135 Loss: 53.18972396850586 Tokens per Sec: 17305.081581702663
Epoch Step: 125 / 135 Loss: 127.5177230834961 Tokens per Sec: 19798.166596875617
Epoch Step: 130 / 135 Loss: 93.77645111083984 Tokens per Sec: 18433.470104194446
Epoch Step: 135 / 135 Loss: 81.23204040527344 Tokens per Sec: 17160.135293804782
Epoch ended with duration 0:00:13.324133
Train perplexity: 68.19886838603878
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { ( ) { ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( ) { return ) { return ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { ( ) { ( ) ; }[0m
Epoch ended with duration 0:00:00.600578
Validation perplexity: 20.71450513317302
Model saved best_on_validation!
Model saved checkpoint!
Epoch 1 / 1000
Epoch Step: 5 / 135 Loss: 83.53915405273438 Tokens per Sec: 19932.567204309784
Epoch Step: 10 / 135 Loss: 131.9069366455078 Tokens per Sec: 22362.25874128566
Epoch Step: 15 / 135 Loss: 139.1207275390625 Tokens per Sec: 20945.605921450027
Epoch Step: 20 / 135 Loss: 95.00531005859375 Tokens per Sec: 20078.757895610226
Epoch Step: 25 / 135 Loss: 54.161441802978516 Tokens per Sec: 21791.244877267694
Epoch Step: 30 / 135 Loss: 105.87982940673828 Tokens per Sec: 18336.91780727698
Epoch Step: 35 / 135 Loss: 108.55887603759766 Tokens per Sec: 18927.827142710154
Epoch Step: 40 / 135 Loss: 35.11205291748047 Tokens per Sec: 19086.036467503833
Epoch Step: 45 / 135 Loss: 129.50865173339844 Tokens per Sec: 23024.813694823926
Epoch Step: 50 / 135 Loss: 46.58378601074219 Tokens per Sec: 21741.08733156951
Epoch Step: 55 / 135 Loss: 54.2204475402832 Tokens per Sec: 20682.73697968594
Epoch Step: 60 / 135 Loss: 127.06303405761719 Tokens per Sec: 22669.499459179755
Epoch Step: 65 / 135 Loss: 126.42294311523438 Tokens per Sec: 19754.612762960438
Epoch Step: 70 / 135 Loss: 96.55178833007812 Tokens per Sec: 20059.781154444434
Epoch Step: 75 / 135 Loss: 68.1839599609375 Tokens per Sec: 21278.252879206302
Epoch Step: 80 / 135 Loss: 39.118412017822266 Tokens per Sec: 16249.445088450502
Epoch Step: 85 / 135 Loss: 69.9555892944336 Tokens per Sec: 19058.89469405789
Epoch Step: 90 / 135 Loss: 66.21002197265625 Tokens per Sec: 21324.479408490464
Epoch Step: 95 / 135 Loss: 178.2543182373047 Tokens per Sec: 23282.942558326627
Epoch Step: 100 / 135 Loss: 53.41714859008789 Tokens per Sec: 19641.494592978263
Epoch Step: 105 / 135 Loss: 90.5926284790039 Tokens per Sec: 19352.8619015142
Epoch Step: 110 / 135 Loss: 83.46946716308594 Tokens per Sec: 18031.24797808842
Epoch Step: 115 / 135 Loss: 31.063720703125 Tokens per Sec: 17881.536596543876
Epoch Step: 120 / 135 Loss: 62.72722625732422 Tokens per Sec: 16818.92367016754
Epoch Step: 125 / 135 Loss: 97.86482238769531 Tokens per Sec: 18156.53681556016
Epoch Step: 130 / 135 Loss: 114.12908935546875 Tokens per Sec: 18058.20251684989
Epoch Step: 135 / 135 Loss: 103.01496124267578 Tokens per Sec: 18242.455901432364
Epoch ended with duration 0:00:12.867760
Train perplexity: 18.898549281685362
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ) { return ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 ) { return VAR_1 , VAR_2 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ) { return ) ; }[0m
Epoch ended with duration 0:00:00.597906
Validation perplexity: 15.04916194403319
Model saved best_on_validation!
Epoch 2 / 1000
Epoch Step: 5 / 135 Loss: 31.684240341186523 Tokens per Sec: 19096.56434662081
Epoch Step: 10 / 135 Loss: 104.01221466064453 Tokens per Sec: 19437.999881697284
Epoch Step: 15 / 135 Loss: 103.34867858886719 Tokens per Sec: 16984.697865352115
Epoch Step: 20 / 135 Loss: 32.0247917175293 Tokens per Sec: 20345.368712089028
Epoch Step: 25 / 135 Loss: 97.45968627929688 Tokens per Sec: 19395.56454882422
Epoch Step: 30 / 135 Loss: 106.67166137695312 Tokens per Sec: 21914.35026360368
Epoch Step: 35 / 135 Loss: 120.41283416748047 Tokens per Sec: 21161.929553214464
Epoch Step: 40 / 135 Loss: 109.30603790283203 Tokens per Sec: 19154.138761316986
Epoch Step: 45 / 135 Loss: 109.29144287109375 Tokens per Sec: 22410.385209482683
Epoch Step: 50 / 135 Loss: 65.03221130371094 Tokens per Sec: 18878.853285712066
Epoch Step: 55 / 135 Loss: 126.07969665527344 Tokens per Sec: 23643.403467159893
Epoch Step: 60 / 135 Loss: 68.00401306152344 Tokens per Sec: 22796.974733586223
Epoch Step: 65 / 135 Loss: 50.36991500854492 Tokens per Sec: 23281.125457750684
Epoch Step: 70 / 135 Loss: 60.29629898071289 Tokens per Sec: 17753.789718887645
Epoch Step: 75 / 135 Loss: 97.16993713378906 Tokens per Sec: 15919.894704011958
Epoch Step: 80 / 135 Loss: 98.86491394042969 Tokens per Sec: 19231.05886043858
Epoch Step: 85 / 135 Loss: 71.91671752929688 Tokens per Sec: 23455.79345186766
Epoch Step: 90 / 135 Loss: 54.85498046875 Tokens per Sec: 20342.038376193872
Epoch Step: 95 / 135 Loss: 34.5478401184082 Tokens per Sec: 18986.402179473967
Epoch Step: 100 / 135 Loss: 110.19161987304688 Tokens per Sec: 22787.07177678638
Epoch Step: 105 / 135 Loss: 58.89547348022461 Tokens per Sec: 17737.92393583901
Epoch Step: 110 / 135 Loss: 52.44445037841797 Tokens per Sec: 17887.268714023303
Epoch Step: 115 / 135 Loss: 40.31095886230469 Tokens per Sec: 18169.96886792102
Epoch Step: 120 / 135 Loss: 26.720779418945312 Tokens per Sec: 19711.838067932047
Epoch Step: 125 / 135 Loss: 165.22891235351562 Tokens per Sec: 20005.926158978185
Epoch Step: 130 / 135 Loss: 71.02692413330078 Tokens per Sec: 17272.161725258076
Epoch Step: 135 / 135 Loss: 103.7369384765625 Tokens per Sec: 18381.0040949182
Epoch ended with duration 0:00:12.825878
Train perplexity: 13.99302068947562
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 , VAR_1 , VAR_1 , VAR_1 , VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.641558
Validation perplexity: 10.501628844402022
Model saved best_on_validation!
Epoch 3 / 1000
Epoch Step: 5 / 135 Loss: 74.99962615966797 Tokens per Sec: 17167.91783839453
Epoch Step: 10 / 135 Loss: 61.881309509277344 Tokens per Sec: 21193.158073116585
Epoch Step: 15 / 135 Loss: 89.82335662841797 Tokens per Sec: 19142.491919537086
Epoch Step: 20 / 135 Loss: 84.39571380615234 Tokens per Sec: 16642.496183688607
Epoch Step: 25 / 135 Loss: 68.5990219116211 Tokens per Sec: 21023.26471609611
Epoch Step: 30 / 135 Loss: 26.332612991333008 Tokens per Sec: 18562.883385549827
Epoch Step: 35 / 135 Loss: 124.61575317382812 Tokens per Sec: 18067.5090882685
Epoch Step: 40 / 135 Loss: 69.85734558105469 Tokens per Sec: 22915.342991341247
Epoch Step: 45 / 135 Loss: 78.98721313476562 Tokens per Sec: 20607.484584703583
Epoch Step: 50 / 135 Loss: 24.870433807373047 Tokens per Sec: 18060.529046162777
Epoch Step: 55 / 135 Loss: 40.042781829833984 Tokens per Sec: 16095.555636839621
Epoch Step: 60 / 135 Loss: 62.571746826171875 Tokens per Sec: 22326.361028495547
Epoch Step: 65 / 135 Loss: 100.93305969238281 Tokens per Sec: 18128.968029456646
Epoch Step: 70 / 135 Loss: 57.1682014465332 Tokens per Sec: 20926.95737677597
Epoch Step: 75 / 135 Loss: 96.09233093261719 Tokens per Sec: 21822.460849535284
Epoch Step: 80 / 135 Loss: 100.2574234008789 Tokens per Sec: 20703.662263960214
Epoch Step: 85 / 135 Loss: 57.91609191894531 Tokens per Sec: 19304.99002038277
Epoch Step: 90 / 135 Loss: 42.12668991088867 Tokens per Sec: 18609.930443048477
Epoch Step: 95 / 135 Loss: 96.39385986328125 Tokens per Sec: 17877.973394374578
Epoch Step: 100 / 135 Loss: 34.249656677246094 Tokens per Sec: 21323.536101457827
Epoch Step: 105 / 135 Loss: 105.19462585449219 Tokens per Sec: 17913.30447228322
Epoch Step: 110 / 135 Loss: 136.29843139648438 Tokens per Sec: 17153.877198853832
Epoch Step: 115 / 135 Loss: 78.34693908691406 Tokens per Sec: 18104.661470697913
Epoch Step: 120 / 135 Loss: 68.81909942626953 Tokens per Sec: 19140.42945501308
Epoch Step: 125 / 135 Loss: 84.93890380859375 Tokens per Sec: 18027.929111780122
Epoch Step: 130 / 135 Loss: 25.60755729675293 Tokens per Sec: 17913.344040786444
Epoch Step: 135 / 135 Loss: 33.28730773925781 Tokens per Sec: 15345.809300880373
Epoch ended with duration 0:00:13.424107
Train perplexity: 10.71970138870105
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public void METHOD_1 ( TYPE_1 > ) { return VAR_1 = ( VAR_1 , VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.631077
Validation perplexity: 10.268280014761707
Model saved best_on_validation!
Epoch 4 / 1000
Epoch Step: 5 / 135 Loss: 40.58918762207031 Tokens per Sec: 20554.668711179722
Epoch Step: 10 / 135 Loss: 66.75529479980469 Tokens per Sec: 20116.555013167155
Epoch Step: 15 / 135 Loss: 69.45289611816406 Tokens per Sec: 18409.901971392133
Epoch Step: 20 / 135 Loss: 86.00589752197266 Tokens per Sec: 16352.13945491121
Epoch Step: 25 / 135 Loss: 52.32132339477539 Tokens per Sec: 19997.54735130433
Epoch Step: 30 / 135 Loss: 43.2110710144043 Tokens per Sec: 16423.913727973162
Epoch Step: 35 / 135 Loss: 77.83048248291016 Tokens per Sec: 20520.674355058014
Epoch Step: 40 / 135 Loss: 89.37516021728516 Tokens per Sec: 17423.646326890124
Epoch Step: 45 / 135 Loss: 104.7912368774414 Tokens per Sec: 20217.462072748407
Epoch Step: 50 / 135 Loss: 44.564186096191406 Tokens per Sec: 18325.89581366747
Epoch Step: 55 / 135 Loss: 72.06945037841797 Tokens per Sec: 20416.190135800094
Epoch Step: 60 / 135 Loss: 72.10256958007812 Tokens per Sec: 19272.218759130934
Epoch Step: 65 / 135 Loss: 39.492401123046875 Tokens per Sec: 21161.815699986364
Epoch Step: 70 / 135 Loss: 48.71242141723633 Tokens per Sec: 22306.730873550758
Epoch Step: 75 / 135 Loss: 30.836483001708984 Tokens per Sec: 14837.769818505996
Epoch Step: 80 / 135 Loss: 42.6621208190918 Tokens per Sec: 18972.18193586551
Epoch Step: 85 / 135 Loss: 79.24826049804688 Tokens per Sec: 21152.052932755596
Epoch Step: 90 / 135 Loss: 68.35064697265625 Tokens per Sec: 21254.840257221058
Epoch Step: 95 / 135 Loss: 69.0167236328125 Tokens per Sec: 19783.672798376054
Epoch Step: 100 / 135 Loss: 103.96819305419922 Tokens per Sec: 22686.103063442915
Epoch Step: 105 / 135 Loss: 90.4355239868164 Tokens per Sec: 18099.85413938242
Epoch Step: 110 / 135 Loss: 67.18329620361328 Tokens per Sec: 17596.253778445647
Epoch Step: 115 / 135 Loss: 74.36398315429688 Tokens per Sec: 16666.799344284278
Epoch Step: 120 / 135 Loss: 92.21272277832031 Tokens per Sec: 18144.22526503657
Epoch Step: 125 / 135 Loss: 38.477542877197266 Tokens per Sec: 16318.672311747023
Epoch Step: 130 / 135 Loss: 62.24546432495117 Tokens per Sec: 17399.93639412969
Epoch Step: 135 / 135 Loss: 28.5670108795166 Tokens per Sec: 16538.08515866349
Epoch ended with duration 0:00:13.479118
Train perplexity: 9.688996452011896
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.697004
Validation perplexity: 8.751742016154024
Model saved best_on_validation!
Epoch 5 / 1000
Epoch Step: 5 / 135 Loss: 38.246028900146484 Tokens per Sec: 18219.53281245086
Epoch Step: 10 / 135 Loss: 36.40016555786133 Tokens per Sec: 20970.61307354508
Epoch Step: 15 / 135 Loss: 30.11876678466797 Tokens per Sec: 19023.70010836096
Epoch Step: 20 / 135 Loss: 68.97743225097656 Tokens per Sec: 21008.327041987308
Epoch Step: 25 / 135 Loss: 103.83277893066406 Tokens per Sec: 19292.59495459989
Epoch Step: 30 / 135 Loss: 51.06925582885742 Tokens per Sec: 16609.82030381918
Epoch Step: 35 / 135 Loss: 41.43531036376953 Tokens per Sec: 20723.354877278234
Epoch Step: 40 / 135 Loss: 39.587432861328125 Tokens per Sec: 21403.198107761782
Epoch Step: 45 / 135 Loss: 79.96660614013672 Tokens per Sec: 20759.30804784556
Epoch Step: 50 / 135 Loss: 25.915403366088867 Tokens per Sec: 15621.429498296155
Epoch Step: 55 / 135 Loss: 20.721271514892578 Tokens per Sec: 20303.90252356258
Epoch Step: 60 / 135 Loss: 20.375778198242188 Tokens per Sec: 18809.06746246934
Epoch Step: 65 / 135 Loss: 63.4243049621582 Tokens per Sec: 18710.648291606674
Epoch Step: 70 / 135 Loss: 78.94014739990234 Tokens per Sec: 21455.983792328512
Epoch Step: 75 / 135 Loss: 76.34697723388672 Tokens per Sec: 22338.884577623852
Epoch Step: 80 / 135 Loss: 42.39789962768555 Tokens per Sec: 21009.88676199968
Epoch Step: 85 / 135 Loss: 86.36369323730469 Tokens per Sec: 19663.0037459368
Epoch Step: 90 / 135 Loss: 67.90232849121094 Tokens per Sec: 21079.029305643922
Epoch Step: 95 / 135 Loss: 67.36629486083984 Tokens per Sec: 18244.92312360435
Epoch Step: 100 / 135 Loss: 82.2182388305664 Tokens per Sec: 21318.63776914901
Epoch Step: 105 / 135 Loss: 40.68056869506836 Tokens per Sec: 16661.275387431568
Epoch Step: 110 / 135 Loss: 64.24274444580078 Tokens per Sec: 17876.504307393006
Epoch Step: 115 / 135 Loss: 40.601318359375 Tokens per Sec: 18067.110869967844
Epoch Step: 120 / 135 Loss: 50.88421630859375 Tokens per Sec: 18449.279797727413
Epoch Step: 125 / 135 Loss: 37.490665435791016 Tokens per Sec: 18021.093998826218
Epoch Step: 130 / 135 Loss: 85.39142608642578 Tokens per Sec: 18311.741784513
Epoch Step: 135 / 135 Loss: 49.65353775024414 Tokens per Sec: 18313.648988643592
Epoch ended with duration 0:00:13.122108
Train perplexity: 8.075889307450119
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.590903
Validation perplexity: 6.106840741296037
Model saved best_on_validation!
Model saved checkpoint!
Epoch 6 / 1000
Epoch Step: 5 / 135 Loss: 80.290771484375 Tokens per Sec: 16770.82975688066
Epoch Step: 10 / 135 Loss: 23.88456916809082 Tokens per Sec: 19662.713866646704
Epoch Step: 15 / 135 Loss: 74.6357421875 Tokens per Sec: 19674.779442069903
Epoch Step: 20 / 135 Loss: 24.274993896484375 Tokens per Sec: 22142.97535564338
Epoch Step: 25 / 135 Loss: 34.009708404541016 Tokens per Sec: 17272.673784440165
Epoch Step: 30 / 135 Loss: 70.82423400878906 Tokens per Sec: 24585.001617084457
Epoch Step: 35 / 135 Loss: 72.04954528808594 Tokens per Sec: 20530.089918069498
Epoch Step: 40 / 135 Loss: 96.20643615722656 Tokens per Sec: 21984.528974984103
Epoch Step: 45 / 135 Loss: 111.57396697998047 Tokens per Sec: 18952.70307105348
Epoch Step: 50 / 135 Loss: 77.46178436279297 Tokens per Sec: 21638.903014559746
Epoch Step: 55 / 135 Loss: 61.74473190307617 Tokens per Sec: 20975.674212746835
Epoch Step: 60 / 135 Loss: 66.59475708007812 Tokens per Sec: 21242.243153230025
Epoch Step: 65 / 135 Loss: 83.02401733398438 Tokens per Sec: 21609.816646659125
Epoch Step: 70 / 135 Loss: 35.311988830566406 Tokens per Sec: 18472.170662117187
Epoch Step: 75 / 135 Loss: 21.55113983154297 Tokens per Sec: 20719.063045051083
Epoch Step: 80 / 135 Loss: 95.94723510742188 Tokens per Sec: 22309.470104972726
Epoch Step: 85 / 135 Loss: 80.396240234375 Tokens per Sec: 19897.89588557216
Epoch Step: 90 / 135 Loss: 35.6801643371582 Tokens per Sec: 18543.029579347673
Epoch Step: 95 / 135 Loss: 30.389297485351562 Tokens per Sec: 20849.649206098904
Epoch Step: 100 / 135 Loss: 48.7387809753418 Tokens per Sec: 17627.40585889599
Epoch Step: 105 / 135 Loss: 81.44358825683594 Tokens per Sec: 20499.078865188327
Epoch Step: 110 / 135 Loss: 24.590822219848633 Tokens per Sec: 18860.262259920666
Epoch Step: 115 / 135 Loss: 132.26597595214844 Tokens per Sec: 18361.211030600072
Epoch Step: 120 / 135 Loss: 39.20911407470703 Tokens per Sec: 16841.262611139275
Epoch Step: 125 / 135 Loss: 50.974510192871094 Tokens per Sec: 17146.579476124934
Epoch Step: 130 / 135 Loss: 78.05414581298828 Tokens per Sec: 17658.224499053984
Epoch Step: 135 / 135 Loss: 28.194555282592773 Tokens per Sec: 18813.053437998118
Epoch ended with duration 0:00:12.936942
Train perplexity: 8.145539684930739
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_1 , java.lang.String VAR_1 ) { return new TYPE_1 ( VAR_1 ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_1 ( VAR_1 ) ; }[0m
Epoch ended with duration 0:00:00.593418
Validation perplexity: 6.389303568241676
Epoch 7 / 1000
Epoch Step: 5 / 135 Loss: 39.53944396972656 Tokens per Sec: 19591.45858159808
Epoch Step: 10 / 135 Loss: 50.950347900390625 Tokens per Sec: 17795.774947394642
Epoch Step: 15 / 135 Loss: 35.0301513671875 Tokens per Sec: 22353.437973153646
Epoch Step: 20 / 135 Loss: 54.47019958496094 Tokens per Sec: 19468.107447949795
Epoch Step: 25 / 135 Loss: 64.89521026611328 Tokens per Sec: 23345.424750986822
Epoch Step: 30 / 135 Loss: 65.45967102050781 Tokens per Sec: 20439.76598811005
Epoch Step: 35 / 135 Loss: 53.04646301269531 Tokens per Sec: 20127.006356553335
Epoch Step: 40 / 135 Loss: 151.26976013183594 Tokens per Sec: 22518.197716317634
Epoch Step: 45 / 135 Loss: 178.66734313964844 Tokens per Sec: 19769.979009294093
Epoch Step: 50 / 135 Loss: 172.76161193847656 Tokens per Sec: 21771.58834085797
Epoch Step: 55 / 135 Loss: 23.44156265258789 Tokens per Sec: 17525.10514751957
Epoch Step: 60 / 135 Loss: 53.695980072021484 Tokens per Sec: 23275.706831060463
Epoch Step: 65 / 135 Loss: 57.159454345703125 Tokens per Sec: 20837.360676341606
Epoch Step: 70 / 135 Loss: 63.015071868896484 Tokens per Sec: 19549.84294221428
Epoch Step: 75 / 135 Loss: 95.74346923828125 Tokens per Sec: 21243.169173020604
Epoch Step: 80 / 135 Loss: 127.02668762207031 Tokens per Sec: 17196.638109436703
Epoch Step: 85 / 135 Loss: 84.50228881835938 Tokens per Sec: 19917.753304567825
Epoch Step: 90 / 135 Loss: 82.22916412353516 Tokens per Sec: 19911.79291475387
Epoch Step: 95 / 135 Loss: 17.791275024414062 Tokens per Sec: 20468.31763203305
Epoch Step: 100 / 135 Loss: 51.51616668701172 Tokens per Sec: 19978.129531525454
Epoch Step: 105 / 135 Loss: 49.818199157714844 Tokens per Sec: 17678.190786498533
Epoch Step: 110 / 135 Loss: 46.0520133972168 Tokens per Sec: 16939.34523077154
Epoch Step: 115 / 135 Loss: 27.953771591186523 Tokens per Sec: 17693.914817202793
Epoch Step: 120 / 135 Loss: 68.77686309814453 Tokens per Sec: 17879.025644694626
Epoch Step: 125 / 135 Loss: 96.75432586669922 Tokens per Sec: 18441.91108336099
Epoch Step: 130 / 135 Loss: 32.82502746582031 Tokens per Sec: 18797.993972419146
Epoch Step: 135 / 135 Loss: 49.170440673828125 Tokens per Sec: 19002.229126907714
Epoch ended with duration 0:00:12.902410
Train perplexity: 6.974265455384154
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.592867
Validation perplexity: 5.476711030273409
Model saved best_on_validation!
Epoch 8 / 1000
Epoch Step: 5 / 135 Loss: 67.16232299804688 Tokens per Sec: 22693.743976112357
Epoch Step: 10 / 135 Loss: 70.73320770263672 Tokens per Sec: 19687.56048684208
Epoch Step: 15 / 135 Loss: 61.022586822509766 Tokens per Sec: 21699.09207468315
Epoch Step: 20 / 135 Loss: 137.9253387451172 Tokens per Sec: 20743.645117612356
Epoch Step: 25 / 135 Loss: 33.75875473022461 Tokens per Sec: 18182.63851685459
Epoch Step: 30 / 135 Loss: 27.62131690979004 Tokens per Sec: 18566.99009126255
Epoch Step: 35 / 135 Loss: 111.71649169921875 Tokens per Sec: 16426.80116832692
Epoch Step: 40 / 135 Loss: 29.1031551361084 Tokens per Sec: 20027.05143458622
Epoch Step: 45 / 135 Loss: 46.395957946777344 Tokens per Sec: 23122.15721784241
Epoch Step: 50 / 135 Loss: 44.16132736206055 Tokens per Sec: 20642.10560492937
Epoch Step: 55 / 135 Loss: 36.64940643310547 Tokens per Sec: 21084.08425383225
Epoch Step: 60 / 135 Loss: 66.46316528320312 Tokens per Sec: 21594.049190281305
Epoch Step: 65 / 135 Loss: 54.869869232177734 Tokens per Sec: 20851.36342582628
Epoch Step: 70 / 135 Loss: 65.68279266357422 Tokens per Sec: 21820.061661845135
Epoch Step: 75 / 135 Loss: 20.716590881347656 Tokens per Sec: 20841.15131453036
Epoch Step: 80 / 135 Loss: 74.6224136352539 Tokens per Sec: 20222.72548371608
Epoch Step: 85 / 135 Loss: 21.649099349975586 Tokens per Sec: 22722.287874192774
Epoch Step: 90 / 135 Loss: 30.184396743774414 Tokens per Sec: 18878.727795534192
Epoch Step: 95 / 135 Loss: 73.25765228271484 Tokens per Sec: 22142.346966325793
Epoch Step: 100 / 135 Loss: 58.82273864746094 Tokens per Sec: 16841.44414992848
Epoch Step: 105 / 135 Loss: 77.33071899414062 Tokens per Sec: 18754.469145369385
Epoch Step: 110 / 135 Loss: 20.84185218811035 Tokens per Sec: 17974.586385936716
Epoch Step: 115 / 135 Loss: 65.22122192382812 Tokens per Sec: 17846.556053513927
Epoch Step: 120 / 135 Loss: 84.51107025146484 Tokens per Sec: 19209.1870305008
Epoch Step: 125 / 135 Loss: 30.800195693969727 Tokens per Sec: 17434.042659175953
Epoch Step: 130 / 135 Loss: 26.536151885986328 Tokens per Sec: 18068.764298758168
Epoch Step: 135 / 135 Loss: 36.01485061645508 Tokens per Sec: 19063.962885942856
Epoch ended with duration 0:00:12.831843
Train perplexity: 6.708035726973475
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.601156
Validation perplexity: 6.452150693869631
Epoch 9 / 1000
Epoch Step: 5 / 135 Loss: 46.600223541259766 Tokens per Sec: 17764.340763173517
Epoch Step: 10 / 135 Loss: 26.32102394104004 Tokens per Sec: 18807.756535404515
Epoch Step: 15 / 135 Loss: 23.251401901245117 Tokens per Sec: 20340.566926528976
Epoch Step: 20 / 135 Loss: 42.34208679199219 Tokens per Sec: 18799.60618417925
Epoch Step: 25 / 135 Loss: 47.60547637939453 Tokens per Sec: 21715.03466439444
Epoch Step: 30 / 135 Loss: 62.63998794555664 Tokens per Sec: 21677.58361652283
Epoch Step: 35 / 135 Loss: 49.44361114501953 Tokens per Sec: 20371.74991112561
Epoch Step: 40 / 135 Loss: 66.11068725585938 Tokens per Sec: 19710.594489120973
Epoch Step: 45 / 135 Loss: 58.63330841064453 Tokens per Sec: 20293.675901213053
Epoch Step: 50 / 135 Loss: 142.27992248535156 Tokens per Sec: 20148.5576712875
Epoch Step: 55 / 135 Loss: 78.24502563476562 Tokens per Sec: 21348.20597858411
Epoch Step: 60 / 135 Loss: 139.46652221679688 Tokens per Sec: 22530.721151601687
Epoch Step: 65 / 135 Loss: 27.611812591552734 Tokens per Sec: 16378.185417412467
Epoch Step: 70 / 135 Loss: 43.285152435302734 Tokens per Sec: 22485.45808694094
Epoch Step: 75 / 135 Loss: 62.33374786376953 Tokens per Sec: 20593.41556598776
Epoch Step: 80 / 135 Loss: 74.76881408691406 Tokens per Sec: 24735.39174918086
Epoch Step: 85 / 135 Loss: 37.779911041259766 Tokens per Sec: 21155.658936049185
Epoch Step: 90 / 135 Loss: 16.377307891845703 Tokens per Sec: 18618.923070204895
Epoch Step: 95 / 135 Loss: 36.93889617919922 Tokens per Sec: 19118.491905366576
Epoch Step: 100 / 135 Loss: 51.59490203857422 Tokens per Sec: 20555.082854076427
Epoch Step: 105 / 135 Loss: 97.34258270263672 Tokens per Sec: 16132.327132373137
Epoch Step: 110 / 135 Loss: 60.37992477416992 Tokens per Sec: 17373.711413657562
Epoch Step: 115 / 135 Loss: 52.91442108154297 Tokens per Sec: 19544.233692597147
Epoch Step: 120 / 135 Loss: 61.96379852294922 Tokens per Sec: 16893.882590228197
Epoch Step: 125 / 135 Loss: 42.28993225097656 Tokens per Sec: 19409.083438323265
Epoch Step: 130 / 135 Loss: 29.50679588317871 Tokens per Sec: 15767.883568530471
Epoch Step: 135 / 135 Loss: 31.319557189941406 Tokens per Sec: 19303.514705849928
Epoch ended with duration 0:00:12.945863
Train perplexity: 5.93622115982218
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.594694
Validation perplexity: 5.05856711170466
Model saved best_on_validation!
Epoch 10 / 1000
Epoch Step: 5 / 135 Loss: 28.273473739624023 Tokens per Sec: 20463.56040597232
Epoch Step: 10 / 135 Loss: 68.06514739990234 Tokens per Sec: 21517.214089987578
Epoch Step: 15 / 135 Loss: 65.57147979736328 Tokens per Sec: 18354.487844539515
Epoch Step: 20 / 135 Loss: 71.85022735595703 Tokens per Sec: 23579.03145319749
Epoch Step: 25 / 135 Loss: 25.57504653930664 Tokens per Sec: 17172.718145151186
Epoch Step: 30 / 135 Loss: 45.241615295410156 Tokens per Sec: 21444.69147913473
Epoch Step: 35 / 135 Loss: 24.51914405822754 Tokens per Sec: 17844.085106181352
Epoch Step: 40 / 135 Loss: 41.82353210449219 Tokens per Sec: 21147.858451981647
Epoch Step: 45 / 135 Loss: 19.339439392089844 Tokens per Sec: 19526.8448050087
Epoch Step: 50 / 135 Loss: 36.254825592041016 Tokens per Sec: 22688.60996047969
Epoch Step: 55 / 135 Loss: 19.832616806030273 Tokens per Sec: 18641.205328990425
Epoch Step: 60 / 135 Loss: 21.16666603088379 Tokens per Sec: 20256.17270056395
Epoch Step: 65 / 135 Loss: 30.048694610595703 Tokens per Sec: 20433.79594935897
Epoch Step: 70 / 135 Loss: 33.69282531738281 Tokens per Sec: 22041.601437020632
Epoch Step: 75 / 135 Loss: 26.71159553527832 Tokens per Sec: 22568.986884543992
Epoch Step: 80 / 135 Loss: 26.0365047454834 Tokens per Sec: 18554.479088186526
Epoch Step: 85 / 135 Loss: 44.69453811645508 Tokens per Sec: 17669.048942301557
Epoch Step: 90 / 135 Loss: 55.60070037841797 Tokens per Sec: 23101.04817900239
Epoch Step: 95 / 135 Loss: 116.76556396484375 Tokens per Sec: 19647.13574914246
Epoch Step: 100 / 135 Loss: 78.31575012207031 Tokens per Sec: 21056.42826864823
Epoch Step: 105 / 135 Loss: 61.397216796875 Tokens per Sec: 18762.44872889114
Epoch Step: 110 / 135 Loss: 48.13544464111328 Tokens per Sec: 17540.695500882655
Epoch Step: 115 / 135 Loss: 59.898990631103516 Tokens per Sec: 18818.568120970758
Epoch Step: 120 / 135 Loss: 64.10814666748047 Tokens per Sec: 17724.32865985494
Epoch Step: 125 / 135 Loss: 25.92177391052246 Tokens per Sec: 15999.985308700054
Epoch Step: 130 / 135 Loss: 35.79218292236328 Tokens per Sec: 18742.916677527563
Epoch Step: 135 / 135 Loss: 41.818885803222656 Tokens per Sec: 17224.924062477312
Epoch ended with duration 0:00:12.946251
Train perplexity: 4.822345291862491
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.608947
Validation perplexity: 5.070103632719516
Model saved checkpoint!
Epoch 11 / 1000
Epoch Step: 5 / 135 Loss: 41.17679977416992 Tokens per Sec: 20205.261792024376
Epoch Step: 10 / 135 Loss: 67.46257781982422 Tokens per Sec: 22760.516209616653
Epoch Step: 15 / 135 Loss: 44.94895935058594 Tokens per Sec: 19549.424562624
Epoch Step: 20 / 135 Loss: 43.74692916870117 Tokens per Sec: 17401.89201828397
Epoch Step: 25 / 135 Loss: 46.99534225463867 Tokens per Sec: 19753.29204753098
Epoch Step: 30 / 135 Loss: 44.014305114746094 Tokens per Sec: 17034.34677190469
Epoch Step: 35 / 135 Loss: 44.9339485168457 Tokens per Sec: 20296.630354679033
Epoch Step: 40 / 135 Loss: 58.9714469909668 Tokens per Sec: 19952.61138501177
Epoch Step: 45 / 135 Loss: 30.5047664642334 Tokens per Sec: 19520.583759669866
Epoch Step: 50 / 135 Loss: 75.28244018554688 Tokens per Sec: 18213.122599834714
Epoch Step: 55 / 135 Loss: 30.188232421875 Tokens per Sec: 19226.11658300928
Epoch Step: 60 / 135 Loss: 73.06306457519531 Tokens per Sec: 19816.54181782431
Epoch Step: 65 / 135 Loss: 63.171146392822266 Tokens per Sec: 24104.494117505805
Epoch Step: 70 / 135 Loss: 41.790252685546875 Tokens per Sec: 19449.109489300976
Epoch Step: 75 / 135 Loss: 27.637470245361328 Tokens per Sec: 19384.054679819455
Epoch Step: 80 / 135 Loss: 28.261505126953125 Tokens per Sec: 17681.815493293867
Epoch Step: 85 / 135 Loss: 37.468231201171875 Tokens per Sec: 23451.922329094967
Epoch Step: 90 / 135 Loss: 204.24085998535156 Tokens per Sec: 22445.756148403478
Epoch Step: 95 / 135 Loss: 74.88734436035156 Tokens per Sec: 23022.022635163798
Epoch Step: 100 / 135 Loss: 48.819087982177734 Tokens per Sec: 23041.783859330662
Epoch Step: 105 / 135 Loss: 28.06876564025879 Tokens per Sec: 18978.825319486146
Epoch Step: 110 / 135 Loss: 47.417457580566406 Tokens per Sec: 18967.259474638664
Epoch Step: 115 / 135 Loss: 52.184295654296875 Tokens per Sec: 18732.755748905074
Epoch Step: 120 / 135 Loss: 90.50887298583984 Tokens per Sec: 17512.755682536757
Epoch Step: 125 / 135 Loss: 22.172344207763672 Tokens per Sec: 17888.182657276662
Epoch Step: 130 / 135 Loss: 28.2902889251709 Tokens per Sec: 16587.27891997328
Epoch Step: 135 / 135 Loss: 57.759246826171875 Tokens per Sec: 19028.599344064434
Epoch ended with duration 0:00:12.890458
Train perplexity: 5.135946668467501
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 > VAR_1 ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_1 > METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Epoch ended with duration 0:00:00.608891
Validation perplexity: 4.223146623501102
Model saved best_on_validation!
Epoch 12 / 1000
Epoch Step: 5 / 135 Loss: 13.164226531982422 Tokens per Sec: 19818.282447173526
Epoch Step: 10 / 135 Loss: 43.57661056518555 Tokens per Sec: 16912.506267052533
Epoch Step: 15 / 135 Loss: 64.96446228027344 Tokens per Sec: 21946.388292432057
Epoch Step: 20 / 135 Loss: 47.62123107910156 Tokens per Sec: 17361.279139389848
Epoch Step: 25 / 135 Loss: 35.83013916015625 Tokens per Sec: 19511.28478028208
Epoch Step: 30 / 135 Loss: 31.72853660583496 Tokens per Sec: 22459.30178749636
Epoch Step: 35 / 135 Loss: 23.61888313293457 Tokens per Sec: 19861.03708387964
Epoch Step: 40 / 135 Loss: 51.13422393798828 Tokens per Sec: 21675.781885035773
Epoch Step: 45 / 135 Loss: 54.01802062988281 Tokens per Sec: 23095.068442986776
Epoch Step: 50 / 135 Loss: 14.566987037658691 Tokens per Sec: 18034.280314254655
Epoch Step: 55 / 135 Loss: 41.84130096435547 Tokens per Sec: 19213.21098816153
Epoch Step: 60 / 135 Loss: 57.57998275756836 Tokens per Sec: 19757.14683236415
Epoch Step: 65 / 135 Loss: 31.123218536376953 Tokens per Sec: 16558.631927380087
Epoch Step: 70 / 135 Loss: 26.38005256652832 Tokens per Sec: 23328.15856941332
Epoch Step: 75 / 135 Loss: 45.818702697753906 Tokens per Sec: 21167.487261202332
Epoch Step: 80 / 135 Loss: 132.11070251464844 Tokens per Sec: 20909.426560738666
Epoch Step: 85 / 135 Loss: 52.66025924682617 Tokens per Sec: 21276.091579067193
Epoch Step: 90 / 135 Loss: 24.72515296936035 Tokens per Sec: 18528.541040290544
Epoch Step: 95 / 135 Loss: 50.536651611328125 Tokens per Sec: 22732.08469833944
Epoch Step: 100 / 135 Loss: 42.78731155395508 Tokens per Sec: 21835.391379741544
Epoch Step: 105 / 135 Loss: 69.93694305419922 Tokens per Sec: 17062.430605868307
Epoch Step: 110 / 135 Loss: 39.80811309814453 Tokens per Sec: 19131.374251166468
Epoch Step: 115 / 135 Loss: 48.232967376708984 Tokens per Sec: 20112.893015312853
Epoch Step: 120 / 135 Loss: 60.35551452636719 Tokens per Sec: 18522.439745296775
Epoch Step: 125 / 135 Loss: 29.774744033813477 Tokens per Sec: 15412.38381631685
Epoch Step: 130 / 135 Loss: 37.780555725097656 Tokens per Sec: 17157.6672267494
Epoch Step: 135 / 135 Loss: 87.91356658935547 Tokens per Sec: 17668.083742701154
Epoch ended with duration 0:00:12.952722
Train perplexity: 5.025994014461638
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 < TYPE_2 > ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.602581
Validation perplexity: 3.5571555034080595
Model saved best_on_validation!
Epoch 13 / 1000
Epoch Step: 5 / 135 Loss: 65.20928192138672 Tokens per Sec: 17415.19132996211
Epoch Step: 10 / 135 Loss: 14.080851554870605 Tokens per Sec: 17519.42252951235
Epoch Step: 15 / 135 Loss: 89.51526641845703 Tokens per Sec: 19312.70134746221
Epoch Step: 20 / 135 Loss: 74.7564926147461 Tokens per Sec: 23405.599797820043
Epoch Step: 25 / 135 Loss: 150.0391387939453 Tokens per Sec: 22886.83670702542
Epoch Step: 30 / 135 Loss: 40.4888916015625 Tokens per Sec: 20202.803333172775
Epoch Step: 35 / 135 Loss: 30.099035263061523 Tokens per Sec: 20782.816621591475
Epoch Step: 40 / 135 Loss: 37.77567672729492 Tokens per Sec: 19155.626815692525
Epoch Step: 45 / 135 Loss: 21.4487361907959 Tokens per Sec: 20144.26858522648
Epoch Step: 50 / 135 Loss: 40.72124099731445 Tokens per Sec: 19805.621414704132
Epoch Step: 55 / 135 Loss: 33.561195373535156 Tokens per Sec: 22462.963705620055
Epoch Step: 60 / 135 Loss: 54.52855682373047 Tokens per Sec: 21473.919412159594
Epoch Step: 65 / 135 Loss: 58.294193267822266 Tokens per Sec: 21403.5432526085
Epoch Step: 70 / 135 Loss: 35.5753288269043 Tokens per Sec: 18976.9761403093
Epoch Step: 75 / 135 Loss: 17.88136863708496 Tokens per Sec: 19188.017777136498
Epoch Step: 80 / 135 Loss: 57.13340759277344 Tokens per Sec: 21982.21285419356
Epoch Step: 85 / 135 Loss: 25.251224517822266 Tokens per Sec: 16329.013072010077
Epoch Step: 90 / 135 Loss: 17.26046371459961 Tokens per Sec: 17938.629118738572
Epoch Step: 95 / 135 Loss: 32.901180267333984 Tokens per Sec: 21722.603793627113
Epoch Step: 100 / 135 Loss: 44.167972564697266 Tokens per Sec: 22382.559690763854
Epoch Step: 105 / 135 Loss: 61.64419937133789 Tokens per Sec: 19358.71283522026
Epoch Step: 110 / 135 Loss: 45.32274627685547 Tokens per Sec: 18167.39411649407
Epoch Step: 115 / 135 Loss: 49.43916320800781 Tokens per Sec: 16648.41905708258
Epoch Step: 120 / 135 Loss: 55.556480407714844 Tokens per Sec: 18585.522286236555
Epoch Step: 125 / 135 Loss: 38.87010955810547 Tokens per Sec: 17749.695667985714
Epoch Step: 130 / 135 Loss: 64.55025482177734 Tokens per Sec: 17057.282275444726
Epoch Step: 135 / 135 Loss: 62.69993591308594 Tokens per Sec: 18349.147924614324
Epoch ended with duration 0:00:12.973414
Train perplexity: 4.8553098358393285
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 < TYPE_2 > ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.612334
Validation perplexity: 4.5908791114973635
Epoch 14 / 1000
Epoch Step: 5 / 135 Loss: 22.740995407104492 Tokens per Sec: 22635.896813399402
Epoch Step: 10 / 135 Loss: 20.071983337402344 Tokens per Sec: 24409.989852236766
Epoch Step: 15 / 135 Loss: 14.799394607543945 Tokens per Sec: 19154.808569648514
Epoch Step: 20 / 135 Loss: 67.51654052734375 Tokens per Sec: 24082.06640394216
Epoch Step: 25 / 135 Loss: 17.662302017211914 Tokens per Sec: 20858.68494497813
Epoch Step: 30 / 135 Loss: 48.60643768310547 Tokens per Sec: 20399.01632548934
Epoch Step: 35 / 135 Loss: 29.137407302856445 Tokens per Sec: 19366.234665518943
Epoch Step: 40 / 135 Loss: 41.469696044921875 Tokens per Sec: 22293.68557090958
Epoch Step: 45 / 135 Loss: 59.05339431762695 Tokens per Sec: 21450.094406536333
Epoch Step: 50 / 135 Loss: 29.085357666015625 Tokens per Sec: 20674.0342499606
Epoch Step: 55 / 135 Loss: 62.462242126464844 Tokens per Sec: 19542.053350894123
Epoch Step: 60 / 135 Loss: 54.82329177856445 Tokens per Sec: 18442.94553863987
Epoch Step: 65 / 135 Loss: 41.8759765625 Tokens per Sec: 17792.390820409266
Epoch Step: 70 / 135 Loss: 23.332422256469727 Tokens per Sec: 21793.358808300603
Epoch Step: 75 / 135 Loss: 45.348297119140625 Tokens per Sec: 19741.42405972941
Epoch Step: 80 / 135 Loss: 33.153221130371094 Tokens per Sec: 19111.83941267639
Epoch Step: 85 / 135 Loss: 23.78748321533203 Tokens per Sec: 17052.538055952802
Epoch Step: 90 / 135 Loss: 29.31342887878418 Tokens per Sec: 19998.172413135726
Epoch Step: 95 / 135 Loss: 23.508953094482422 Tokens per Sec: 18773.797534560486
Epoch Step: 100 / 135 Loss: 21.236957550048828 Tokens per Sec: 20638.35149555729
Epoch Step: 105 / 135 Loss: 36.353118896484375 Tokens per Sec: 16601.242826043934
Epoch Step: 110 / 135 Loss: 57.7238655090332 Tokens per Sec: 18036.220839676073
Epoch Step: 115 / 135 Loss: 46.331783294677734 Tokens per Sec: 16720.503677488636
Epoch Step: 120 / 135 Loss: 13.396973609924316 Tokens per Sec: 19120.027219533393
Epoch Step: 125 / 135 Loss: 18.31583023071289 Tokens per Sec: 15165.071039181134
Epoch Step: 130 / 135 Loss: 31.856372833251953 Tokens per Sec: 19395.34891986828
Epoch Step: 135 / 135 Loss: 49.97997283935547 Tokens per Sec: 18134.183126595253
Epoch ended with duration 0:00:12.965805
Train perplexity: 4.583549269268772
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_2 < ? > ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.612323
Validation perplexity: 4.354346734226138
Epoch 15 / 1000
Epoch Step: 5 / 135 Loss: 56.3583984375 Tokens per Sec: 22757.690668792715
Epoch Step: 10 / 135 Loss: 22.393367767333984 Tokens per Sec: 18839.312776352952
Epoch Step: 15 / 135 Loss: 39.4808349609375 Tokens per Sec: 19162.459158935962
Epoch Step: 20 / 135 Loss: 49.9666862487793 Tokens per Sec: 21441.102421179272
Epoch Step: 25 / 135 Loss: 47.873435974121094 Tokens per Sec: 20457.046017904893
Epoch Step: 30 / 135 Loss: 56.52254104614258 Tokens per Sec: 23213.67300922568
Epoch Step: 35 / 135 Loss: 47.9969482421875 Tokens per Sec: 20031.520747880364
Epoch Step: 40 / 135 Loss: 16.944782257080078 Tokens per Sec: 17494.16207098699
Epoch Step: 45 / 135 Loss: 56.0552864074707 Tokens per Sec: 19580.334622306145
Epoch Step: 50 / 135 Loss: 37.15190887451172 Tokens per Sec: 20790.705815435824
Epoch Step: 55 / 135 Loss: 27.58882713317871 Tokens per Sec: 17156.276701616076
Epoch Step: 60 / 135 Loss: 31.09891128540039 Tokens per Sec: 18756.249877394435
Epoch Step: 65 / 135 Loss: 55.00829315185547 Tokens per Sec: 20028.762793888644
Epoch Step: 70 / 135 Loss: 25.236013412475586 Tokens per Sec: 21011.159737907416
Epoch Step: 75 / 135 Loss: 45.2325325012207 Tokens per Sec: 18866.804080744678
Epoch Step: 80 / 135 Loss: 42.17757797241211 Tokens per Sec: 21302.91524556253
Epoch Step: 85 / 135 Loss: 45.96162796020508 Tokens per Sec: 22305.74081891285
Epoch Step: 90 / 135 Loss: 45.804046630859375 Tokens per Sec: 23271.788059378443
Epoch Step: 95 / 135 Loss: 26.582576751708984 Tokens per Sec: 17589.871867100035
Epoch Step: 100 / 135 Loss: 35.193634033203125 Tokens per Sec: 21858.022649842012
Epoch Step: 105 / 135 Loss: 51.17519760131836 Tokens per Sec: 19175.134241525637
Epoch Step: 110 / 135 Loss: 18.417308807373047 Tokens per Sec: 16358.005021140447
Epoch Step: 115 / 135 Loss: 14.898730278015137 Tokens per Sec: 17110.704881039812
Epoch Step: 120 / 135 Loss: 42.84432601928711 Tokens per Sec: 16594.91728816245
Epoch Step: 125 / 135 Loss: 58.785125732421875 Tokens per Sec: 18542.351037848795
Epoch Step: 130 / 135 Loss: 32.820430755615234 Tokens per Sec: 17687.4533874059
Epoch Step: 135 / 135 Loss: 39.367984771728516 Tokens per Sec: 20776.27840465117
Epoch ended with duration 0:00:12.895544
Train perplexity: 3.7410754942046465
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < ? > ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.611928
Validation perplexity: 4.181731473487568
Model saved checkpoint!
Epoch 16 / 1000
Epoch Step: 5 / 135 Loss: 42.87895584106445 Tokens per Sec: 19559.0646206145
Epoch Step: 10 / 135 Loss: 25.40962028503418 Tokens per Sec: 24018.371969580177
Epoch Step: 15 / 135 Loss: 30.665319442749023 Tokens per Sec: 23452.43408266987
Epoch Step: 20 / 135 Loss: 23.566404342651367 Tokens per Sec: 19001.079041043686
Epoch Step: 25 / 135 Loss: 23.582965850830078 Tokens per Sec: 19141.87787652027
Epoch Step: 30 / 135 Loss: 51.766265869140625 Tokens per Sec: 20596.371156926485
Epoch Step: 35 / 135 Loss: 48.460670471191406 Tokens per Sec: 23541.742829656876
Epoch Step: 40 / 135 Loss: 19.43092918395996 Tokens per Sec: 18439.169872904666
Epoch Step: 45 / 135 Loss: 29.289392471313477 Tokens per Sec: 21505.369229505548
Epoch Step: 50 / 135 Loss: 185.4781036376953 Tokens per Sec: 19608.13123730651
Epoch Step: 55 / 135 Loss: 26.29741668701172 Tokens per Sec: 18575.724398166563
Epoch Step: 60 / 135 Loss: 32.67929458618164 Tokens per Sec: 19238.86937153306
Epoch Step: 65 / 135 Loss: 81.66279602050781 Tokens per Sec: 22057.84443524719
Epoch Step: 70 / 135 Loss: 16.4383487701416 Tokens per Sec: 21478.467468365478
Epoch Step: 75 / 135 Loss: 12.963748931884766 Tokens per Sec: 21759.17341573057
Epoch Step: 80 / 135 Loss: 17.156211853027344 Tokens per Sec: 23175.70119036056
Epoch Step: 85 / 135 Loss: 48.031673431396484 Tokens per Sec: 15378.930151594426
Epoch Step: 90 / 135 Loss: 23.543550491333008 Tokens per Sec: 16222.333111358825
Epoch Step: 95 / 135 Loss: 27.00813865661621 Tokens per Sec: 18544.653227655057
Epoch Step: 100 / 135 Loss: 45.111610412597656 Tokens per Sec: 20193.536429630683
Epoch Step: 105 / 135 Loss: 22.555803298950195 Tokens per Sec: 16326.566761207363
Epoch Step: 110 / 135 Loss: 17.754980087280273 Tokens per Sec: 18940.35964039699
Epoch Step: 115 / 135 Loss: 38.22929382324219 Tokens per Sec: 16401.640019674112
Epoch Step: 120 / 135 Loss: 124.05337524414062 Tokens per Sec: 17871.33155750999
Epoch Step: 125 / 135 Loss: 52.99216842651367 Tokens per Sec: 17829.87971179636
Epoch Step: 130 / 135 Loss: 39.662132263183594 Tokens per Sec: 17996.13706867177
Epoch Step: 135 / 135 Loss: 23.009796142578125 Tokens per Sec: 16839.760967459133
Epoch ended with duration 0:00:13.096028
Train perplexity: 4.0882707962755696
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > METHOD_1 ( TYPE_2 < ? > > ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.692053
Validation perplexity: 3.231500565141963
Model saved best_on_validation!
Epoch 17 / 1000
Epoch Step: 5 / 135 Loss: 22.826473236083984 Tokens per Sec: 18432.14346240483
Epoch Step: 10 / 135 Loss: 35.57817077636719 Tokens per Sec: 20636.240716878
Epoch Step: 15 / 135 Loss: 28.04530143737793 Tokens per Sec: 21298.514481961338
Epoch Step: 20 / 135 Loss: 35.774017333984375 Tokens per Sec: 20297.813719846625
Epoch Step: 25 / 135 Loss: 29.47308921813965 Tokens per Sec: 16848.823499874467
Epoch Step: 30 / 135 Loss: 14.647536277770996 Tokens per Sec: 20659.98363003848
Epoch Step: 35 / 135 Loss: 26.15019416809082 Tokens per Sec: 22115.264674480866
Epoch Step: 40 / 135 Loss: 23.694429397583008 Tokens per Sec: 20591.96774097032
Epoch Step: 45 / 135 Loss: 49.95685577392578 Tokens per Sec: 24003.46664845246
Epoch Step: 50 / 135 Loss: 29.58468246459961 Tokens per Sec: 17008.28552415091
Epoch Step: 55 / 135 Loss: 21.516942977905273 Tokens per Sec: 17972.740260553146
Epoch Step: 60 / 135 Loss: 36.143714904785156 Tokens per Sec: 20130.38643360726
Epoch Step: 65 / 135 Loss: 142.9472198486328 Tokens per Sec: 21904.107310705098
Epoch Step: 70 / 135 Loss: 64.1696548461914 Tokens per Sec: 21787.07854761332
Epoch Step: 75 / 135 Loss: 15.618534088134766 Tokens per Sec: 23552.95306444408
Epoch Step: 80 / 135 Loss: 24.515859603881836 Tokens per Sec: 16632.583414584584
Epoch Step: 85 / 135 Loss: 29.87165641784668 Tokens per Sec: 22673.595609922013
Epoch Step: 90 / 135 Loss: 75.3968276977539 Tokens per Sec: 20086.98496756903
Epoch Step: 95 / 135 Loss: 60.73624801635742 Tokens per Sec: 18396.202562954244
Epoch Step: 100 / 135 Loss: 13.647523880004883 Tokens per Sec: 20176.584367940726
Epoch Step: 105 / 135 Loss: 36.41877365112305 Tokens per Sec: 17475.22485478974
Epoch Step: 110 / 135 Loss: 43.55402374267578 Tokens per Sec: 19283.014650405697
Epoch Step: 115 / 135 Loss: 35.963645935058594 Tokens per Sec: 18949.428254851075
Epoch Step: 120 / 135 Loss: 14.967535018920898 Tokens per Sec: 15702.624531025109
Epoch Step: 125 / 135 Loss: 13.323888778686523 Tokens per Sec: 17351.023860617992
Epoch Step: 130 / 135 Loss: 139.35411071777344 Tokens per Sec: 17234.72968125281
Epoch Step: 135 / 135 Loss: 30.415767669677734 Tokens per Sec: 18707.869647054617
Epoch ended with duration 0:00:12.972649
Train perplexity: 4.5142243920379626
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.603796
Validation perplexity: 3.946904361323993
Epoch 18 / 1000
Epoch Step: 5 / 135 Loss: 28.04996681213379 Tokens per Sec: 21014.690117896575
Epoch Step: 10 / 135 Loss: 22.233076095581055 Tokens per Sec: 21890.792684653654
Epoch Step: 15 / 135 Loss: 51.43766784667969 Tokens per Sec: 22488.692189643818
Epoch Step: 20 / 135 Loss: 51.55189514160156 Tokens per Sec: 21522.84723175496
Epoch Step: 25 / 135 Loss: 95.51629638671875 Tokens per Sec: 17653.03798157818
Epoch Step: 30 / 135 Loss: 50.675289154052734 Tokens per Sec: 22780.46228796001
Epoch Step: 35 / 135 Loss: 78.15857696533203 Tokens per Sec: 18242.515337363282
Epoch Step: 40 / 135 Loss: 47.121376037597656 Tokens per Sec: 20598.43565197504
Epoch Step: 45 / 135 Loss: 58.025779724121094 Tokens per Sec: 21148.063418574504
Epoch Step: 50 / 135 Loss: 22.226608276367188 Tokens per Sec: 19070.07092238988
Epoch Step: 55 / 135 Loss: 31.26881980895996 Tokens per Sec: 21508.243435886383
Epoch Step: 60 / 135 Loss: 46.41234588623047 Tokens per Sec: 19991.124560649976
Epoch Step: 65 / 135 Loss: 14.30705451965332 Tokens per Sec: 18066.08318937191
Epoch Step: 70 / 135 Loss: 26.425077438354492 Tokens per Sec: 20000.98317917154
Epoch Step: 75 / 135 Loss: 28.502182006835938 Tokens per Sec: 21437.59415878346
Epoch Step: 80 / 135 Loss: 50.6231689453125 Tokens per Sec: 18056.7256024489
Epoch Step: 85 / 135 Loss: 19.400890350341797 Tokens per Sec: 20960.047726853372
Epoch Step: 90 / 135 Loss: 16.01378059387207 Tokens per Sec: 19381.591127273914
Epoch Step: 95 / 135 Loss: 17.242427825927734 Tokens per Sec: 20182.0587947614
Epoch Step: 100 / 135 Loss: 26.558673858642578 Tokens per Sec: 19010.675493226496
Epoch Step: 105 / 135 Loss: 18.378238677978516 Tokens per Sec: 16586.915526895664
Epoch Step: 110 / 135 Loss: 44.86684036254883 Tokens per Sec: 17886.179268061223
Epoch Step: 115 / 135 Loss: 35.66788101196289 Tokens per Sec: 17561.85606645323
Epoch Step: 120 / 135 Loss: 51.85248947143555 Tokens per Sec: 19200.145872577927
Epoch Step: 125 / 135 Loss: 37.953330993652344 Tokens per Sec: 19506.50352978738
Epoch Step: 130 / 135 Loss: 52.43199157714844 Tokens per Sec: 20443.43025623543
Epoch Step: 135 / 135 Loss: 16.17232322692871 Tokens per Sec: 15746.198144801418
Epoch ended with duration 0:00:12.904619
Train perplexity: 4.048095404605028
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.597910
Validation perplexity: 3.6366339360717728
Epoch 19 / 1000
Epoch Step: 5 / 135 Loss: 25.2569637298584 Tokens per Sec: 22978.025646682312
Epoch Step: 10 / 135 Loss: 35.92533874511719 Tokens per Sec: 20199.42923944903
Epoch Step: 15 / 135 Loss: 40.387630462646484 Tokens per Sec: 20040.888254688936
Epoch Step: 20 / 135 Loss: 17.312788009643555 Tokens per Sec: 18854.921313827974
Epoch Step: 25 / 135 Loss: 25.492244720458984 Tokens per Sec: 19855.31505711342
Epoch Step: 30 / 135 Loss: 38.914329528808594 Tokens per Sec: 20043.96902867024
Epoch Step: 35 / 135 Loss: 41.148284912109375 Tokens per Sec: 20755.338163789525
Epoch Step: 40 / 135 Loss: 20.613876342773438 Tokens per Sec: 18821.59167582837
Epoch Step: 45 / 135 Loss: 45.60698699951172 Tokens per Sec: 23471.572348042722
Epoch Step: 50 / 135 Loss: 80.36450958251953 Tokens per Sec: 19942.285607757352
Epoch Step: 55 / 135 Loss: 30.86466407775879 Tokens per Sec: 22636.55379093023
Epoch Step: 60 / 135 Loss: 37.11640167236328 Tokens per Sec: 19042.453488993036
Epoch Step: 65 / 135 Loss: 30.494300842285156 Tokens per Sec: 18263.430170192532
Epoch Step: 70 / 135 Loss: 135.47743225097656 Tokens per Sec: 21259.06967990316
Epoch Step: 75 / 135 Loss: 13.540290832519531 Tokens per Sec: 20880.149988271518
Epoch Step: 80 / 135 Loss: 32.664794921875 Tokens per Sec: 21239.141346375356
Epoch Step: 85 / 135 Loss: 54.608341217041016 Tokens per Sec: 22394.757497963394
Epoch Step: 90 / 135 Loss: 36.362491607666016 Tokens per Sec: 15906.595979525893
Epoch Step: 95 / 135 Loss: 24.24574089050293 Tokens per Sec: 17462.156745900626
Epoch Step: 100 / 135 Loss: 74.75393676757812 Tokens per Sec: 23688.077835924676
Epoch Step: 105 / 135 Loss: 20.649675369262695 Tokens per Sec: 18543.4195480244
Epoch Step: 110 / 135 Loss: 18.304210662841797 Tokens per Sec: 19081.66749870951
Epoch Step: 115 / 135 Loss: 38.52372360229492 Tokens per Sec: 19231.312043390048
Epoch Step: 120 / 135 Loss: 74.74778747558594 Tokens per Sec: 15296.975675136498
Epoch Step: 125 / 135 Loss: 20.92014503479004 Tokens per Sec: 17446.276155817388
Epoch Step: 130 / 135 Loss: 68.71583557128906 Tokens per Sec: 18080.8278125741
Epoch Step: 135 / 135 Loss: 42.443267822265625 Tokens per Sec: 18541.07964049811
Epoch ended with duration 0:00:12.898208
Train perplexity: 3.6793118787292283
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.610180
Validation perplexity: 2.8244861870162183
Model saved best_on_validation!
Epoch 20 / 1000
Epoch Step: 5 / 135 Loss: 29.563817977905273 Tokens per Sec: 18600.190847605652
Epoch Step: 10 / 135 Loss: 24.9392147064209 Tokens per Sec: 18985.473112723994
Epoch Step: 15 / 135 Loss: 31.52904510498047 Tokens per Sec: 19830.992741732065
Epoch Step: 20 / 135 Loss: 21.38200569152832 Tokens per Sec: 19619.93896896068
Epoch Step: 25 / 135 Loss: 23.282363891601562 Tokens per Sec: 21549.853696960803
Epoch Step: 30 / 135 Loss: 17.785175323486328 Tokens per Sec: 23670.238269200203
Epoch Step: 35 / 135 Loss: 19.044403076171875 Tokens per Sec: 22228.032193033847
Epoch Step: 40 / 135 Loss: 26.049318313598633 Tokens per Sec: 18559.967978095534
Epoch Step: 45 / 135 Loss: 30.604032516479492 Tokens per Sec: 23175.466693921353
Epoch Step: 50 / 135 Loss: 16.394521713256836 Tokens per Sec: 17359.76267599839
Epoch Step: 55 / 135 Loss: 16.524568557739258 Tokens per Sec: 20673.76870715349
Epoch Step: 60 / 135 Loss: 46.793235778808594 Tokens per Sec: 19644.760533048004
Epoch Step: 65 / 135 Loss: 19.195589065551758 Tokens per Sec: 20298.834235128073
Epoch Step: 70 / 135 Loss: 27.09861946105957 Tokens per Sec: 20885.80234321607
Epoch Step: 75 / 135 Loss: 40.25236511230469 Tokens per Sec: 18031.734100932084
Epoch Step: 80 / 135 Loss: 41.40867233276367 Tokens per Sec: 20184.43267013926
Epoch Step: 85 / 135 Loss: 25.199724197387695 Tokens per Sec: 19141.435403533433
Epoch Step: 90 / 135 Loss: 30.22503089904785 Tokens per Sec: 21449.05870949251
Epoch Step: 95 / 135 Loss: 49.1016845703125 Tokens per Sec: 22776.76217157712
Epoch Step: 100 / 135 Loss: 38.830535888671875 Tokens per Sec: 20298.771391659593
Epoch Step: 105 / 135 Loss: 42.39675521850586 Tokens per Sec: 18544.870585203535
Epoch Step: 110 / 135 Loss: 14.310729026794434 Tokens per Sec: 18122.5220039774
Epoch Step: 115 / 135 Loss: 51.42714309692383 Tokens per Sec: 19771.192755304703
Epoch Step: 120 / 135 Loss: 41.56300354003906 Tokens per Sec: 19400.754924070457
Epoch Step: 125 / 135 Loss: 34.6906623840332 Tokens per Sec: 17643.202036520714
Epoch Step: 130 / 135 Loss: 23.705202102661133 Tokens per Sec: 15842.13433339822
Epoch Step: 135 / 135 Loss: 61.617164611816406 Tokens per Sec: 19364.185219875468
Epoch ended with duration 0:00:12.872780
Train perplexity: 3.0773035539279343
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.687659
Validation perplexity: 3.3213300108286243
Model saved checkpoint!
Epoch 21 / 1000
Epoch Step: 5 / 135 Loss: 20.690898895263672 Tokens per Sec: 15064.84015629462
Epoch Step: 10 / 135 Loss: 18.749250411987305 Tokens per Sec: 18646.731548686657
Epoch Step: 15 / 135 Loss: 16.959341049194336 Tokens per Sec: 17777.4981655669
Epoch Step: 20 / 135 Loss: 14.543412208557129 Tokens per Sec: 18971.372959942262
Epoch Step: 25 / 135 Loss: 35.5518798828125 Tokens per Sec: 20020.94002024176
Epoch Step: 30 / 135 Loss: 14.16682243347168 Tokens per Sec: 19685.6468826105
Epoch Step: 35 / 135 Loss: 33.71841812133789 Tokens per Sec: 23147.07777152515
Epoch Step: 40 / 135 Loss: 39.4899787902832 Tokens per Sec: 18342.065155784752
Epoch Step: 45 / 135 Loss: 24.650278091430664 Tokens per Sec: 22278.271675969463
Epoch Step: 50 / 135 Loss: 23.798845291137695 Tokens per Sec: 16119.692520075667
Epoch Step: 55 / 135 Loss: 20.416370391845703 Tokens per Sec: 18631.529137113444
Epoch Step: 60 / 135 Loss: 21.895931243896484 Tokens per Sec: 22390.120415047368
Epoch Step: 65 / 135 Loss: 44.245304107666016 Tokens per Sec: 23130.754938842743
Epoch Step: 70 / 135 Loss: 129.21177673339844 Tokens per Sec: 19178.81485981078
Epoch Step: 75 / 135 Loss: 33.498897552490234 Tokens per Sec: 18906.60762334827
Epoch Step: 80 / 135 Loss: 41.16907501220703 Tokens per Sec: 19931.28517416088
Epoch Step: 85 / 135 Loss: 111.54264068603516 Tokens per Sec: 20269.687894005896
Epoch Step: 90 / 135 Loss: 21.30992317199707 Tokens per Sec: 22351.376403701586
Epoch Step: 95 / 135 Loss: 33.3992919921875 Tokens per Sec: 16290.194031602245
Epoch Step: 100 / 135 Loss: 26.374027252197266 Tokens per Sec: 22475.639040420636
Epoch Step: 105 / 135 Loss: 27.623310089111328 Tokens per Sec: 18786.62715239249
Epoch Step: 110 / 135 Loss: 38.93120574951172 Tokens per Sec: 17162.83131080874
Epoch Step: 115 / 135 Loss: 32.41008377075195 Tokens per Sec: 16546.935190917742
Epoch Step: 120 / 135 Loss: 36.8529167175293 Tokens per Sec: 18707.717148358824
Epoch Step: 125 / 135 Loss: 29.381502151489258 Tokens per Sec: 16932.90601373904
Epoch Step: 130 / 135 Loss: 36.195777893066406 Tokens per Sec: 17368.673341749276
Epoch Step: 135 / 135 Loss: 12.675451278686523 Tokens per Sec: 16977.79852846219
Epoch ended with duration 0:00:13.343139
Train perplexity: 3.2645761386647703
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.683984
Validation perplexity: 3.4775451956671857
Epoch 22 / 1000
Epoch Step: 5 / 135 Loss: 10.197918891906738 Tokens per Sec: 19877.30945307385
Epoch Step: 10 / 135 Loss: 21.505945205688477 Tokens per Sec: 21806.47629875748
Epoch Step: 15 / 135 Loss: 26.294410705566406 Tokens per Sec: 21181.912669476245
Epoch Step: 20 / 135 Loss: 39.07598114013672 Tokens per Sec: 21429.92130872892
Epoch Step: 25 / 135 Loss: 33.912071228027344 Tokens per Sec: 22045.00138498325
Epoch Step: 30 / 135 Loss: 12.571142196655273 Tokens per Sec: 20822.111663066724
Epoch Step: 35 / 135 Loss: 38.25572967529297 Tokens per Sec: 21487.512322429226
Epoch Step: 40 / 135 Loss: 23.023834228515625 Tokens per Sec: 18530.838542791113
Epoch Step: 45 / 135 Loss: 23.98680877685547 Tokens per Sec: 20704.700161975987
Epoch Step: 50 / 135 Loss: 30.289968490600586 Tokens per Sec: 18495.618827782193
Epoch Step: 55 / 135 Loss: 42.72018814086914 Tokens per Sec: 20985.090694141934
Epoch Step: 60 / 135 Loss: 74.67464447021484 Tokens per Sec: 15916.459797684684
Epoch Step: 65 / 135 Loss: 16.23563575744629 Tokens per Sec: 21706.27914679556
Epoch Step: 70 / 135 Loss: 27.216022491455078 Tokens per Sec: 17177.852969239233
Epoch Step: 75 / 135 Loss: 38.42283630371094 Tokens per Sec: 19690.531556300066
Epoch Step: 80 / 135 Loss: 12.683627128601074 Tokens per Sec: 20653.721104552267
Epoch Step: 85 / 135 Loss: 27.51455307006836 Tokens per Sec: 16955.467297923456
Epoch Step: 90 / 135 Loss: 37.43269348144531 Tokens per Sec: 18979.58062692673
Epoch Step: 95 / 135 Loss: 29.279541015625 Tokens per Sec: 19156.79233130558
Epoch Step: 100 / 135 Loss: 39.83443832397461 Tokens per Sec: 22907.797373913178
Epoch Step: 105 / 135 Loss: 39.96677780151367 Tokens per Sec: 18201.905012409323
Epoch Step: 110 / 135 Loss: 19.681737899780273 Tokens per Sec: 16206.329159427236
Epoch Step: 115 / 135 Loss: 28.799741744995117 Tokens per Sec: 17504.759790887318
Epoch Step: 120 / 135 Loss: 10.487245559692383 Tokens per Sec: 18849.84598217826
Epoch Step: 125 / 135 Loss: 24.6098690032959 Tokens per Sec: 17806.583282696236
Epoch Step: 130 / 135 Loss: 17.501176834106445 Tokens per Sec: 16817.15598903477
Epoch Step: 135 / 135 Loss: 39.05145263671875 Tokens per Sec: 17615.886428466427
Epoch ended with duration 0:00:13.156700
Train perplexity: 3.0638700069352134
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String > , TYPE_2 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.582504
Validation perplexity: 2.661923330699608
Model saved best_on_validation!
Epoch 23 / 1000
Epoch Step: 5 / 135 Loss: 37.217437744140625 Tokens per Sec: 20113.134799525218
Epoch Step: 10 / 135 Loss: 29.30477523803711 Tokens per Sec: 22694.742493615806
Epoch Step: 15 / 135 Loss: 106.77169036865234 Tokens per Sec: 21833.31512559256
Epoch Step: 20 / 135 Loss: 12.164687156677246 Tokens per Sec: 20094.806044053672
Epoch Step: 25 / 135 Loss: 19.383481979370117 Tokens per Sec: 15336.573680349591
Epoch Step: 30 / 135 Loss: 43.6917839050293 Tokens per Sec: 20839.641095816583
Epoch Step: 35 / 135 Loss: 11.635761260986328 Tokens per Sec: 23165.072042447333
Epoch Step: 40 / 135 Loss: 12.725841522216797 Tokens per Sec: 20811.691584997352
Epoch Step: 45 / 135 Loss: 25.95587921142578 Tokens per Sec: 17561.279609549973
Epoch Step: 50 / 135 Loss: 24.424257278442383 Tokens per Sec: 20945.14164959692
Epoch Step: 55 / 135 Loss: 17.105520248413086 Tokens per Sec: 19830.96688115212
Epoch Step: 60 / 135 Loss: 20.57217025756836 Tokens per Sec: 21894.74353174822
Epoch Step: 65 / 135 Loss: 31.449316024780273 Tokens per Sec: 18655.126052445044
Epoch Step: 70 / 135 Loss: 16.82525062561035 Tokens per Sec: 16937.04796437749
Epoch Step: 75 / 135 Loss: 71.43400573730469 Tokens per Sec: 19655.835941400783
Epoch Step: 80 / 135 Loss: 40.62398910522461 Tokens per Sec: 20200.517292197495
Epoch Step: 85 / 135 Loss: 44.955360412597656 Tokens per Sec: 21110.049080806108
Epoch Step: 90 / 135 Loss: 38.90061950683594 Tokens per Sec: 21475.59350013016
Epoch Step: 95 / 135 Loss: 28.703886032104492 Tokens per Sec: 21861.260036977917
Epoch Step: 100 / 135 Loss: 30.54734992980957 Tokens per Sec: 19363.748003287074
Epoch Step: 105 / 135 Loss: 24.26719093322754 Tokens per Sec: 16073.988014300534
Epoch Step: 110 / 135 Loss: 37.195533752441406 Tokens per Sec: 19460.633899502358
Epoch Step: 115 / 135 Loss: 23.3209285736084 Tokens per Sec: 19123.43019904134
Epoch Step: 120 / 135 Loss: 40.00093460083008 Tokens per Sec: 17919.161135527138
Epoch Step: 125 / 135 Loss: 15.988885879516602 Tokens per Sec: 19658.691809465046
Epoch Step: 130 / 135 Loss: 84.61186218261719 Tokens per Sec: 18718.3256915753
Epoch Step: 135 / 135 Loss: 35.9293212890625 Tokens per Sec: 17953.758739932335
Epoch ended with duration 0:00:12.864258
Train perplexity: 3.0890619827617325
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.685345
Validation perplexity: 3.7149840975871626
Epoch 24 / 1000
Epoch Step: 5 / 135 Loss: 72.60248565673828 Tokens per Sec: 18754.26074734325
Epoch Step: 10 / 135 Loss: 12.118419647216797 Tokens per Sec: 21878.842309243344
Epoch Step: 15 / 135 Loss: 18.35773468017578 Tokens per Sec: 19164.911429081047
Epoch Step: 20 / 135 Loss: 15.230113983154297 Tokens per Sec: 17915.077691616487
Epoch Step: 25 / 135 Loss: 19.352279663085938 Tokens per Sec: 16826.382575749645
Epoch Step: 30 / 135 Loss: 25.08600616455078 Tokens per Sec: 20256.009226333492
Epoch Step: 35 / 135 Loss: 29.532928466796875 Tokens per Sec: 19491.88796491136
Epoch Step: 40 / 135 Loss: 35.55854415893555 Tokens per Sec: 19325.208086891158
Epoch Step: 45 / 135 Loss: 68.62267303466797 Tokens per Sec: 18911.012204397808
Epoch Step: 50 / 135 Loss: 37.93687438964844 Tokens per Sec: 21565.452279919085
Epoch Step: 55 / 135 Loss: 23.81237030029297 Tokens per Sec: 18799.758094795776
Epoch Step: 60 / 135 Loss: 82.29035949707031 Tokens per Sec: 20997.486939828013
Epoch Step: 65 / 135 Loss: 27.108455657958984 Tokens per Sec: 22175.99637370287
Epoch Step: 70 / 135 Loss: 38.269107818603516 Tokens per Sec: 19850.703146899312
Epoch Step: 75 / 135 Loss: 12.786672592163086 Tokens per Sec: 17833.28555323748
Epoch Step: 80 / 135 Loss: 21.68011474609375 Tokens per Sec: 21372.820801044592
Epoch Step: 85 / 135 Loss: 95.92745208740234 Tokens per Sec: 20018.458834044315
Epoch Step: 90 / 135 Loss: 36.14008331298828 Tokens per Sec: 20007.00243715853
Epoch Step: 95 / 135 Loss: 34.56241989135742 Tokens per Sec: 21091.405178540594
Epoch Step: 100 / 135 Loss: 41.567909240722656 Tokens per Sec: 18945.91588700231
Epoch Step: 105 / 135 Loss: 160.5770721435547 Tokens per Sec: 19529.278572816318
Epoch Step: 110 / 135 Loss: 33.29865264892578 Tokens per Sec: 17172.21521239674
Epoch Step: 115 / 135 Loss: 20.923751831054688 Tokens per Sec: 17130.90508113741
Epoch Step: 120 / 135 Loss: 38.412864685058594 Tokens per Sec: 18868.44124591205
Epoch Step: 125 / 135 Loss: 36.86648941040039 Tokens per Sec: 17107.269797433062
Epoch Step: 130 / 135 Loss: 30.083324432373047 Tokens per Sec: 18240.23955741519
Epoch Step: 135 / 135 Loss: 28.094053268432617 Tokens per Sec: 17669.107131599427
Epoch ended with duration 0:00:13.200840
Train perplexity: 2.7433183672587456
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.587881
Validation perplexity: 3.201587930323027
Epoch 25 / 1000
Epoch Step: 5 / 135 Loss: 28.396812438964844 Tokens per Sec: 21036.31670510116
Epoch Step: 10 / 135 Loss: 22.083539962768555 Tokens per Sec: 19691.188691358893
Epoch Step: 15 / 135 Loss: 23.152523040771484 Tokens per Sec: 20204.31539903691
Epoch Step: 20 / 135 Loss: 20.748319625854492 Tokens per Sec: 21829.670483036236
Epoch Step: 25 / 135 Loss: 16.675064086914062 Tokens per Sec: 22310.92922987894
Epoch Step: 30 / 135 Loss: 24.401378631591797 Tokens per Sec: 25856.11100009426
Epoch Step: 35 / 135 Loss: 14.336639404296875 Tokens per Sec: 18774.215930446408
Epoch Step: 40 / 135 Loss: 31.25678253173828 Tokens per Sec: 21428.413785477187
Epoch Step: 45 / 135 Loss: 135.09170532226562 Tokens per Sec: 21774.300038340432
Epoch Step: 50 / 135 Loss: 29.699691772460938 Tokens per Sec: 19847.523073702047
Epoch Step: 55 / 135 Loss: 22.75611686706543 Tokens per Sec: 23452.682635065692
Epoch Step: 60 / 135 Loss: 29.447690963745117 Tokens per Sec: 19299.0318728958
Epoch Step: 65 / 135 Loss: 37.54229736328125 Tokens per Sec: 19205.113127627254
Epoch Step: 70 / 135 Loss: 36.760440826416016 Tokens per Sec: 18460.098615383617
Epoch Step: 75 / 135 Loss: 20.79946517944336 Tokens per Sec: 20360.81665631153
Epoch Step: 80 / 135 Loss: 12.108610153198242 Tokens per Sec: 22508.27110141415
Epoch Step: 85 / 135 Loss: 13.313720703125 Tokens per Sec: 16250.008999498748
Epoch Step: 90 / 135 Loss: 18.791587829589844 Tokens per Sec: 21300.09902873139
Epoch Step: 95 / 135 Loss: 35.80329513549805 Tokens per Sec: 20011.44599726488
Epoch Step: 100 / 135 Loss: 18.4986515045166 Tokens per Sec: 22438.116291445567
Epoch Step: 105 / 135 Loss: 17.228498458862305 Tokens per Sec: 18322.213183542157
Epoch Step: 110 / 135 Loss: 33.45600891113281 Tokens per Sec: 19536.19013955756
Epoch Step: 115 / 135 Loss: 61.8895149230957 Tokens per Sec: 17476.670227562183
Epoch Step: 120 / 135 Loss: 28.79688262939453 Tokens per Sec: 18951.39495565486
Epoch Step: 125 / 135 Loss: 23.344087600708008 Tokens per Sec: 17762.966602794557
Epoch Step: 130 / 135 Loss: 12.819242477416992 Tokens per Sec: 18078.215728229126
Epoch Step: 135 / 135 Loss: 32.53334426879883 Tokens per Sec: 18389.013833183195
Epoch ended with duration 0:00:12.626328
Train perplexity: 2.88484877433068
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.586848
Validation perplexity: 2.7737688125840263
Model saved checkpoint!
Epoch 26 / 1000
Epoch Step: 5 / 135 Loss: 21.405590057373047 Tokens per Sec: 20253.29632791782
Epoch Step: 10 / 135 Loss: 14.242362976074219 Tokens per Sec: 18904.380419822366
Epoch Step: 15 / 135 Loss: 94.98341369628906 Tokens per Sec: 15915.304632398578
Epoch Step: 20 / 135 Loss: 70.76660919189453 Tokens per Sec: 20329.558296914867
Epoch Step: 25 / 135 Loss: 10.19275188446045 Tokens per Sec: 24852.655520201515
Epoch Step: 30 / 135 Loss: 38.48046112060547 Tokens per Sec: 21403.51768792187
Epoch Step: 35 / 135 Loss: 16.276926040649414 Tokens per Sec: 17049.973582308106
Epoch Step: 40 / 135 Loss: 27.4003849029541 Tokens per Sec: 20004.48152639843
Epoch Step: 45 / 135 Loss: 8.908038139343262 Tokens per Sec: 18277.069867088212
Epoch Step: 50 / 135 Loss: 41.0092887878418 Tokens per Sec: 23103.616709276343
Epoch Step: 55 / 135 Loss: 24.247819900512695 Tokens per Sec: 22401.042687171604
Epoch Step: 60 / 135 Loss: 17.162317276000977 Tokens per Sec: 20292.569673637525
Epoch Step: 65 / 135 Loss: 19.434797286987305 Tokens per Sec: 21850.3780614272
Epoch Step: 70 / 135 Loss: 44.49225616455078 Tokens per Sec: 20635.17702815617
Epoch Step: 75 / 135 Loss: 72.9027099609375 Tokens per Sec: 18472.466414740782
Epoch Step: 80 / 135 Loss: 28.413923263549805 Tokens per Sec: 23488.14890197763
Epoch Step: 85 / 135 Loss: 30.959012985229492 Tokens per Sec: 21622.39348639159
Epoch Step: 90 / 135 Loss: 19.5025577545166 Tokens per Sec: 19306.842169535113
Epoch Step: 95 / 135 Loss: 10.479900360107422 Tokens per Sec: 21659.282526204443
Epoch Step: 100 / 135 Loss: 41.044254302978516 Tokens per Sec: 21412.863923108325
Epoch Step: 105 / 135 Loss: 28.64140510559082 Tokens per Sec: 18968.824296262945
Epoch Step: 110 / 135 Loss: 25.132112503051758 Tokens per Sec: 19031.133800864085
Epoch Step: 115 / 135 Loss: 24.48898696899414 Tokens per Sec: 19710.08252731765
Epoch Step: 120 / 135 Loss: 27.434268951416016 Tokens per Sec: 19452.919305036496
Epoch Step: 125 / 135 Loss: 35.35334396362305 Tokens per Sec: 17408.490558782723
Epoch Step: 130 / 135 Loss: 101.59864807128906 Tokens per Sec: 15769.328286113672
Epoch Step: 135 / 135 Loss: 14.31195068359375 Tokens per Sec: 17777.287260788362
Epoch ended with duration 0:00:12.755180
Train perplexity: 2.8054561315221846
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.632728
Validation perplexity: 3.8654654031419966
Epoch 27 / 1000
Epoch Step: 5 / 135 Loss: 17.655380249023438 Tokens per Sec: 15486.163947751164
Epoch Step: 10 / 135 Loss: 11.25403118133545 Tokens per Sec: 15869.03718466347
Epoch Step: 15 / 135 Loss: 40.92693328857422 Tokens per Sec: 20898.49656927092
Epoch Step: 20 / 135 Loss: 25.49589729309082 Tokens per Sec: 21756.749588854822
Epoch Step: 25 / 135 Loss: 27.56804656982422 Tokens per Sec: 19985.05291005543
Epoch Step: 30 / 135 Loss: 37.52626419067383 Tokens per Sec: 19392.4611523491
Epoch Step: 35 / 135 Loss: 41.47285461425781 Tokens per Sec: 21325.600467814853
Epoch Step: 40 / 135 Loss: 18.830181121826172 Tokens per Sec: 20674.522158050528
Epoch Step: 45 / 135 Loss: 26.56702995300293 Tokens per Sec: 21510.551157353377
Epoch Step: 50 / 135 Loss: 18.927637100219727 Tokens per Sec: 18110.975381178603
Epoch Step: 55 / 135 Loss: 31.59340476989746 Tokens per Sec: 21268.708694443267
Epoch Step: 60 / 135 Loss: 15.310140609741211 Tokens per Sec: 18285.6565959698
Epoch Step: 65 / 135 Loss: 22.251237869262695 Tokens per Sec: 23872.4344404805
Epoch Step: 70 / 135 Loss: 34.74808120727539 Tokens per Sec: 19982.277359891115
Epoch Step: 75 / 135 Loss: 61.753570556640625 Tokens per Sec: 18902.54813088303
Epoch Step: 80 / 135 Loss: 16.63189125061035 Tokens per Sec: 19096.24390130482
Epoch Step: 85 / 135 Loss: 28.125274658203125 Tokens per Sec: 25214.64118013263
Epoch Step: 90 / 135 Loss: 13.561324119567871 Tokens per Sec: 17945.470058390816
Epoch Step: 95 / 135 Loss: 18.288471221923828 Tokens per Sec: 20673.567057401
Epoch Step: 100 / 135 Loss: 32.28266906738281 Tokens per Sec: 20437.24137872228
Epoch Step: 105 / 135 Loss: 33.75068283081055 Tokens per Sec: 19672.79434904804
Epoch Step: 110 / 135 Loss: 32.149105072021484 Tokens per Sec: 18968.113648831324
Epoch Step: 115 / 135 Loss: 70.1146011352539 Tokens per Sec: 18834.684561878832
Epoch Step: 120 / 135 Loss: 17.607202529907227 Tokens per Sec: 18062.60007662218
Epoch Step: 125 / 135 Loss: 9.633600234985352 Tokens per Sec: 20602.587414626825
Epoch Step: 130 / 135 Loss: 23.88514518737793 Tokens per Sec: 17801.175778776702
Epoch Step: 135 / 135 Loss: 13.896345138549805 Tokens per Sec: 16477.90110056702
Epoch ended with duration 0:00:12.913048
Train perplexity: 2.496693214465957
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.630422
Validation perplexity: 2.7833825762817126
Epoch 28 / 1000
Epoch Step: 5 / 135 Loss: 26.887022018432617 Tokens per Sec: 19600.012063982733
Epoch Step: 10 / 135 Loss: 34.522132873535156 Tokens per Sec: 24104.671253250763
Epoch Step: 15 / 135 Loss: 13.989596366882324 Tokens per Sec: 20309.03869565361
Epoch Step: 20 / 135 Loss: 26.157573699951172 Tokens per Sec: 17650.39349266278
Epoch Step: 25 / 135 Loss: 61.19264221191406 Tokens per Sec: 21491.8798382564
Epoch Step: 30 / 135 Loss: 24.50713348388672 Tokens per Sec: 17261.554108330653
Epoch Step: 35 / 135 Loss: 18.7662296295166 Tokens per Sec: 21154.654957969477
Epoch Step: 40 / 135 Loss: 78.05821228027344 Tokens per Sec: 20557.226893103543
Epoch Step: 45 / 135 Loss: 13.388700485229492 Tokens per Sec: 17826.80251114158
Epoch Step: 50 / 135 Loss: 20.056434631347656 Tokens per Sec: 22131.620385619553
Epoch Step: 55 / 135 Loss: 61.913516998291016 Tokens per Sec: 17715.249869489202
Epoch Step: 60 / 135 Loss: 13.777603149414062 Tokens per Sec: 19685.49731663287
Epoch Step: 65 / 135 Loss: 39.11554718017578 Tokens per Sec: 20120.395688413704
Epoch Step: 70 / 135 Loss: 25.628934860229492 Tokens per Sec: 17746.826184575355
Epoch Step: 75 / 135 Loss: 187.30897521972656 Tokens per Sec: 20162.856845894374
Epoch Step: 80 / 135 Loss: 79.69876861572266 Tokens per Sec: 16093.821414812244
Epoch Step: 85 / 135 Loss: 31.401119232177734 Tokens per Sec: 16702.8195852388
Epoch Step: 90 / 135 Loss: 36.25934600830078 Tokens per Sec: 21697.398712473943
Epoch Step: 95 / 135 Loss: 25.817773818969727 Tokens per Sec: 21743.35556758634
Epoch Step: 100 / 135 Loss: 110.71197509765625 Tokens per Sec: 20824.990218081726
Epoch Step: 105 / 135 Loss: 30.565685272216797 Tokens per Sec: 17731.430523837458
Epoch Step: 110 / 135 Loss: 34.595420837402344 Tokens per Sec: 17925.609839152985
Epoch Step: 115 / 135 Loss: 22.308067321777344 Tokens per Sec: 18566.35746640677
Epoch Step: 120 / 135 Loss: 17.01841163635254 Tokens per Sec: 16144.732827923304
Epoch Step: 125 / 135 Loss: 30.126163482666016 Tokens per Sec: 16290.45337698003
Epoch Step: 130 / 135 Loss: 33.52372360229492 Tokens per Sec: 16458.34979860537
Epoch Step: 135 / 135 Loss: 26.16462516784668 Tokens per Sec: 18116.98426410875
Epoch ended with duration 0:00:13.328553
Train perplexity: 3.0182402372802444
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.680393
Validation perplexity: 2.5290653495399926
Model saved best_on_validation!
Epoch 29 / 1000
Epoch Step: 5 / 135 Loss: 34.31896209716797 Tokens per Sec: 20844.877082441057
Epoch Step: 10 / 135 Loss: 30.721031188964844 Tokens per Sec: 20635.648550195463
Epoch Step: 15 / 135 Loss: 32.853485107421875 Tokens per Sec: 18021.775911060435
Epoch Step: 20 / 135 Loss: 13.674654960632324 Tokens per Sec: 20364.616526001304
Epoch Step: 25 / 135 Loss: 17.812580108642578 Tokens per Sec: 19649.03443846223
Epoch Step: 30 / 135 Loss: 20.872526168823242 Tokens per Sec: 21725.373976707724
Epoch Step: 35 / 135 Loss: 135.05789184570312 Tokens per Sec: 24058.46170530424
Epoch Step: 40 / 135 Loss: 17.360252380371094 Tokens per Sec: 21248.183267938086
Epoch Step: 45 / 135 Loss: 30.72370147705078 Tokens per Sec: 20868.87008376816
Epoch Step: 50 / 135 Loss: 29.753158569335938 Tokens per Sec: 23210.20339971423
Epoch Step: 55 / 135 Loss: 12.141579627990723 Tokens per Sec: 22360.760609792997
Epoch Step: 60 / 135 Loss: 14.567684173583984 Tokens per Sec: 16134.972865449183
Epoch Step: 65 / 135 Loss: 126.17811584472656 Tokens per Sec: 22299.733456481434
Epoch Step: 70 / 135 Loss: 27.228412628173828 Tokens per Sec: 17921.83305656698
Epoch Step: 75 / 135 Loss: 20.019573211669922 Tokens per Sec: 20305.935154837578
Epoch Step: 80 / 135 Loss: 14.113017082214355 Tokens per Sec: 22547.226364987946
Epoch Step: 85 / 135 Loss: 20.856672286987305 Tokens per Sec: 18259.942037621175
Epoch Step: 90 / 135 Loss: 15.532411575317383 Tokens per Sec: 18207.00598656973
Epoch Step: 95 / 135 Loss: 16.645160675048828 Tokens per Sec: 17925.2742547412
Epoch Step: 100 / 135 Loss: 29.31262969970703 Tokens per Sec: 21659.748441398835
Epoch Step: 105 / 135 Loss: 20.584102630615234 Tokens per Sec: 18686.3558084324
Epoch Step: 110 / 135 Loss: 15.247635841369629 Tokens per Sec: 15259.916616002967
Epoch Step: 115 / 135 Loss: 146.70455932617188 Tokens per Sec: 21191.438013374853
Epoch Step: 120 / 135 Loss: 27.999221801757812 Tokens per Sec: 18175.281047127904
Epoch Step: 125 / 135 Loss: 33.81865692138672 Tokens per Sec: 17819.886161722035
Epoch Step: 130 / 135 Loss: 33.89731216430664 Tokens per Sec: 18034.104154939563
Epoch Step: 135 / 135 Loss: 31.003795623779297 Tokens per Sec: 18964.73850369485
Epoch ended with duration 0:00:12.813320
Train perplexity: 2.9490999298955622
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.617014
Validation perplexity: 2.341221459907419
Model saved best_on_validation!
Epoch 30 / 1000
Epoch Step: 5 / 135 Loss: 41.519325256347656 Tokens per Sec: 18386.026606783747
Epoch Step: 10 / 135 Loss: 118.28815460205078 Tokens per Sec: 20915.30829924559
Epoch Step: 15 / 135 Loss: 35.053199768066406 Tokens per Sec: 22121.49655001301
Epoch Step: 20 / 135 Loss: 32.1623649597168 Tokens per Sec: 17090.6376697892
Epoch Step: 25 / 135 Loss: 18.267759323120117 Tokens per Sec: 22045.66592116531
Epoch Step: 30 / 135 Loss: 19.703441619873047 Tokens per Sec: 23117.827447508185
Epoch Step: 35 / 135 Loss: 13.167259216308594 Tokens per Sec: 23394.63893102502
Epoch Step: 40 / 135 Loss: 18.627792358398438 Tokens per Sec: 21254.025091464697
Epoch Step: 45 / 135 Loss: 14.892099380493164 Tokens per Sec: 22295.508083524866
Epoch Step: 50 / 135 Loss: 8.46268081665039 Tokens per Sec: 20303.64227777986
Epoch Step: 55 / 135 Loss: 23.290857315063477 Tokens per Sec: 22679.37418164168
Epoch Step: 60 / 135 Loss: 21.517091751098633 Tokens per Sec: 23242.239542691725
Epoch Step: 65 / 135 Loss: 148.21051025390625 Tokens per Sec: 24316.01336046226
Epoch Step: 70 / 135 Loss: 30.995527267456055 Tokens per Sec: 19530.718769122832
Epoch Step: 75 / 135 Loss: 10.597805976867676 Tokens per Sec: 16958.15808749436
Epoch Step: 80 / 135 Loss: 14.426460266113281 Tokens per Sec: 19426.90095069226
Epoch Step: 85 / 135 Loss: 9.58746337890625 Tokens per Sec: 20226.48439781578
Epoch Step: 90 / 135 Loss: 34.01313781738281 Tokens per Sec: 18683.66321062744
Epoch Step: 95 / 135 Loss: 19.049057006835938 Tokens per Sec: 20251.470114428375
Epoch Step: 100 / 135 Loss: 14.969496726989746 Tokens per Sec: 16877.367411010393
Epoch Step: 105 / 135 Loss: 76.42866516113281 Tokens per Sec: 16878.270413282353
Epoch Step: 110 / 135 Loss: 17.124101638793945 Tokens per Sec: 17710.260365888127
Epoch Step: 115 / 135 Loss: 34.77671813964844 Tokens per Sec: 19713.969643445198
Epoch Step: 120 / 135 Loss: 11.034802436828613 Tokens per Sec: 18828.462291133925
Epoch Step: 125 / 135 Loss: 20.570064544677734 Tokens per Sec: 18408.6459008776
Epoch Step: 130 / 135 Loss: 26.30426597595215 Tokens per Sec: 18982.528233355144
Epoch Step: 135 / 135 Loss: 22.842134475708008 Tokens per Sec: 18782.811346144663
Epoch ended with duration 0:00:12.714721
Train perplexity: 2.8397634028754504
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.681477
Validation perplexity: 2.4661985668777335
Model saved checkpoint!
Epoch 31 / 1000
Epoch Step: 5 / 135 Loss: 29.09337043762207 Tokens per Sec: 20603.58356514168
Epoch Step: 10 / 135 Loss: 25.795146942138672 Tokens per Sec: 21462.464594526882
Epoch Step: 15 / 135 Loss: 35.769691467285156 Tokens per Sec: 16603.44754184328
Epoch Step: 20 / 135 Loss: 134.36279296875 Tokens per Sec: 18080.98905535288
Epoch Step: 25 / 135 Loss: 19.93284797668457 Tokens per Sec: 18143.794339631077
Epoch Step: 30 / 135 Loss: 25.828954696655273 Tokens per Sec: 19794.60345707273
Epoch Step: 35 / 135 Loss: 30.36858558654785 Tokens per Sec: 21810.231840998567
Epoch Step: 40 / 135 Loss: 19.12049102783203 Tokens per Sec: 21420.21550829738
Epoch Step: 45 / 135 Loss: 18.610389709472656 Tokens per Sec: 21580.606484728516
Epoch Step: 50 / 135 Loss: 34.204429626464844 Tokens per Sec: 20397.2960630951
Epoch Step: 55 / 135 Loss: 13.589967727661133 Tokens per Sec: 20218.40033397706
Epoch Step: 60 / 135 Loss: 15.50708293914795 Tokens per Sec: 18833.509798038536
Epoch Step: 65 / 135 Loss: 18.812191009521484 Tokens per Sec: 18278.254273150622
Epoch Step: 70 / 135 Loss: 22.378211975097656 Tokens per Sec: 16983.006164720053
Epoch Step: 75 / 135 Loss: 19.489437103271484 Tokens per Sec: 20573.682136595293
Epoch Step: 80 / 135 Loss: 18.198766708374023 Tokens per Sec: 21605.42598006975
Epoch Step: 85 / 135 Loss: 35.45359420776367 Tokens per Sec: 21364.223694389693
Epoch Step: 90 / 135 Loss: 26.55645179748535 Tokens per Sec: 19897.44759978002
Epoch Step: 95 / 135 Loss: 14.558720588684082 Tokens per Sec: 19020.87034425162
Epoch Step: 100 / 135 Loss: 23.0797176361084 Tokens per Sec: 20020.991606493306
Epoch Step: 105 / 135 Loss: 18.615272521972656 Tokens per Sec: 16607.465507309345
Epoch Step: 110 / 135 Loss: 20.47199821472168 Tokens per Sec: 15311.368399652501
Epoch Step: 115 / 135 Loss: 33.095157623291016 Tokens per Sec: 18236.656615168966
Epoch Step: 120 / 135 Loss: 31.500869750976562 Tokens per Sec: 16652.07363198417
Epoch Step: 125 / 135 Loss: 27.738563537597656 Tokens per Sec: 20860.421698564904
Epoch Step: 130 / 135 Loss: 15.738677978515625 Tokens per Sec: 16725.537648188394
Epoch Step: 135 / 135 Loss: 26.09758186340332 Tokens per Sec: 19985.78396625712
Epoch ended with duration 0:00:13.143446
Train perplexity: 2.5370149247772718
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.587367
Validation perplexity: 2.035716799235857
Model saved best_on_validation!
Epoch 32 / 1000
Epoch Step: 5 / 135 Loss: 23.372257232666016 Tokens per Sec: 16728.667518334052
Epoch Step: 10 / 135 Loss: 26.37813949584961 Tokens per Sec: 20838.592709240995
Epoch Step: 15 / 135 Loss: 22.88638687133789 Tokens per Sec: 18264.07990713125
Epoch Step: 20 / 135 Loss: 9.769104957580566 Tokens per Sec: 22712.322387385797
Epoch Step: 25 / 135 Loss: 12.524575233459473 Tokens per Sec: 19620.96145256708
Epoch Step: 30 / 135 Loss: 15.154735565185547 Tokens per Sec: 20729.173615068277
Epoch Step: 35 / 135 Loss: 30.5639591217041 Tokens per Sec: 23398.50727698501
Epoch Step: 40 / 135 Loss: 9.635562896728516 Tokens per Sec: 15979.168977230069
Epoch Step: 45 / 135 Loss: 10.656810760498047 Tokens per Sec: 22859.441587291767
Epoch Step: 50 / 135 Loss: 22.83968734741211 Tokens per Sec: 21797.714002453115
Epoch Step: 55 / 135 Loss: 24.762096405029297 Tokens per Sec: 23045.163066728855
Epoch Step: 60 / 135 Loss: 10.89635944366455 Tokens per Sec: 21555.028752713777
Epoch Step: 65 / 135 Loss: 19.576446533203125 Tokens per Sec: 17490.309520498726
Epoch Step: 70 / 135 Loss: 28.204748153686523 Tokens per Sec: 19921.620646989217
Epoch Step: 75 / 135 Loss: 28.63694953918457 Tokens per Sec: 23490.49765850552
Epoch Step: 80 / 135 Loss: 9.21760368347168 Tokens per Sec: 18920.74175451646
Epoch Step: 85 / 135 Loss: 27.26498794555664 Tokens per Sec: 22304.804300090607
Epoch Step: 90 / 135 Loss: 24.508846282958984 Tokens per Sec: 17777.77675730689
Epoch Step: 95 / 135 Loss: 12.659985542297363 Tokens per Sec: 19714.031449673144
Epoch Step: 100 / 135 Loss: 9.717330932617188 Tokens per Sec: 21175.242487414027
Epoch Step: 105 / 135 Loss: 33.65557861328125 Tokens per Sec: 19596.010732960433
Epoch Step: 110 / 135 Loss: 73.88997650146484 Tokens per Sec: 16337.918005855248
Epoch Step: 115 / 135 Loss: 24.081003189086914 Tokens per Sec: 18849.14645361969
Epoch Step: 120 / 135 Loss: 26.034271240234375 Tokens per Sec: 17864.385404207602
Epoch Step: 125 / 135 Loss: 21.995845794677734 Tokens per Sec: 15771.686349381565
Epoch Step: 130 / 135 Loss: 33.391334533691406 Tokens per Sec: 18020.330320787783
Epoch Step: 135 / 135 Loss: 16.755077362060547 Tokens per Sec: 17503.48246632906
Epoch ended with duration 0:00:12.943560
Train perplexity: 2.5569740539211887
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > METHOD_1 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.590132
Validation perplexity: 2.6876893709304195
Epoch 33 / 1000
Epoch Step: 5 / 135 Loss: 27.69852066040039 Tokens per Sec: 20886.169570923816
Epoch Step: 10 / 135 Loss: 8.424386978149414 Tokens per Sec: 19944.186221039545
Epoch Step: 15 / 135 Loss: 10.849677085876465 Tokens per Sec: 18691.11369967348
Epoch Step: 20 / 135 Loss: 28.819297790527344 Tokens per Sec: 19868.983190867173
Epoch Step: 25 / 135 Loss: 13.789224624633789 Tokens per Sec: 17538.398995716463
Epoch Step: 30 / 135 Loss: 12.926749229431152 Tokens per Sec: 18996.11583329521
Epoch Step: 35 / 135 Loss: 29.637237548828125 Tokens per Sec: 16987.203861251484
Epoch Step: 40 / 135 Loss: 16.3582763671875 Tokens per Sec: 17713.42383587704
Epoch Step: 45 / 135 Loss: 52.0748405456543 Tokens per Sec: 23185.356473756816
Epoch Step: 50 / 135 Loss: 26.896059036254883 Tokens per Sec: 20821.99346254638
Epoch Step: 55 / 135 Loss: 29.76472282409668 Tokens per Sec: 21847.278756163774
Epoch Step: 60 / 135 Loss: 13.630036354064941 Tokens per Sec: 17156.069809421893
Epoch Step: 65 / 135 Loss: 16.48763084411621 Tokens per Sec: 19972.723476300434
Epoch Step: 70 / 135 Loss: 28.33859634399414 Tokens per Sec: 20230.745403108467
Epoch Step: 75 / 135 Loss: 24.933557510375977 Tokens per Sec: 17149.331621176763
Epoch Step: 80 / 135 Loss: 10.078492164611816 Tokens per Sec: 22679.718966373526
Epoch Step: 85 / 135 Loss: 13.036120414733887 Tokens per Sec: 20393.307167606272
Epoch Step: 90 / 135 Loss: 25.112489700317383 Tokens per Sec: 20948.989918426047
Epoch Step: 95 / 135 Loss: 13.821209907531738 Tokens per Sec: 23194.54366861618
Epoch Step: 100 / 135 Loss: 16.75646209716797 Tokens per Sec: 22420.476607948305
Epoch Step: 105 / 135 Loss: 22.75334930419922 Tokens per Sec: 17327.08381450159
Epoch Step: 110 / 135 Loss: 15.740398406982422 Tokens per Sec: 16634.125143707613
Epoch Step: 115 / 135 Loss: 16.121103286743164 Tokens per Sec: 18202.477201380927
Epoch Step: 120 / 135 Loss: 29.084640502929688 Tokens per Sec: 19429.255525741384
Epoch Step: 125 / 135 Loss: 21.637365341186523 Tokens per Sec: 17742.803940218295
Epoch Step: 130 / 135 Loss: 8.582954406738281 Tokens per Sec: 17858.277985609235
Epoch Step: 135 / 135 Loss: 12.24830436706543 Tokens per Sec: 17016.735108725796
Epoch ended with duration 0:00:13.174500
Train perplexity: 2.359610711332223
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.683909
Validation perplexity: 2.60269239963182
Epoch 34 / 1000
Epoch Step: 5 / 135 Loss: 19.39122200012207 Tokens per Sec: 18805.12256193808
Epoch Step: 10 / 135 Loss: 57.948184967041016 Tokens per Sec: 19574.148741577803
Epoch Step: 15 / 135 Loss: 15.710658073425293 Tokens per Sec: 20360.542019463595
Epoch Step: 20 / 135 Loss: 22.74566650390625 Tokens per Sec: 16944.849809372725
Epoch Step: 25 / 135 Loss: 27.108257293701172 Tokens per Sec: 21805.54584652328
Epoch Step: 30 / 135 Loss: 28.712383270263672 Tokens per Sec: 19832.87171963711
Epoch Step: 35 / 135 Loss: 23.646677017211914 Tokens per Sec: 18243.380876607116
Epoch Step: 40 / 135 Loss: 17.316329956054688 Tokens per Sec: 20406.21452566346
Epoch Step: 45 / 135 Loss: 25.592578887939453 Tokens per Sec: 24234.002248063374
Epoch Step: 50 / 135 Loss: 17.87518882751465 Tokens per Sec: 19977.85424548046
Epoch Step: 55 / 135 Loss: 12.312519073486328 Tokens per Sec: 18007.801107688978
Epoch Step: 60 / 135 Loss: 23.748985290527344 Tokens per Sec: 21888.467837291097
Epoch Step: 65 / 135 Loss: 29.591053009033203 Tokens per Sec: 19248.08492719714
Epoch Step: 70 / 135 Loss: 33.350746154785156 Tokens per Sec: 20203.450894288806
Epoch Step: 75 / 135 Loss: 23.186126708984375 Tokens per Sec: 21383.524874160237
Epoch Step: 80 / 135 Loss: 23.0853328704834 Tokens per Sec: 19161.89342359917
Epoch Step: 85 / 135 Loss: 17.46072769165039 Tokens per Sec: 19730.281074262126
Epoch Step: 90 / 135 Loss: 16.495555877685547 Tokens per Sec: 20437.87842550265
Epoch Step: 95 / 135 Loss: 50.350955963134766 Tokens per Sec: 16603.62354441681
Epoch Step: 100 / 135 Loss: 107.19062042236328 Tokens per Sec: 20785.05351713408
Epoch Step: 105 / 135 Loss: 128.8159942626953 Tokens per Sec: 17663.82258726587
Epoch Step: 110 / 135 Loss: 18.251537322998047 Tokens per Sec: 15936.333584888813
Epoch Step: 115 / 135 Loss: 128.19198608398438 Tokens per Sec: 18042.219916228518
Epoch Step: 120 / 135 Loss: 28.2379093170166 Tokens per Sec: 18917.714612986598
Epoch Step: 125 / 135 Loss: 20.864356994628906 Tokens per Sec: 17427.973132702664
Epoch Step: 130 / 135 Loss: 10.354780197143555 Tokens per Sec: 16489.09703566404
Epoch Step: 135 / 135 Loss: 10.395646095275879 Tokens per Sec: 17709.102752680934
Epoch ended with duration 0:00:13.241784
Train perplexity: 2.7278845073075395
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.681323
Validation perplexity: 2.549037284483979
Epoch 35 / 1000
Epoch Step: 5 / 135 Loss: 20.814725875854492 Tokens per Sec: 21489.084434052937
Epoch Step: 10 / 135 Loss: 23.88499641418457 Tokens per Sec: 16684.76815485198
Epoch Step: 15 / 135 Loss: 18.959962844848633 Tokens per Sec: 20476.37712345676
Epoch Step: 20 / 135 Loss: 24.293367385864258 Tokens per Sec: 24317.171351583638
Epoch Step: 25 / 135 Loss: 28.42416000366211 Tokens per Sec: 21628.1024881837
Epoch Step: 30 / 135 Loss: 30.25804328918457 Tokens per Sec: 19066.341314456244
Epoch Step: 35 / 135 Loss: 27.28641128540039 Tokens per Sec: 19628.242925127677
Epoch Step: 40 / 135 Loss: 17.072967529296875 Tokens per Sec: 17222.365912830093
Epoch Step: 45 / 135 Loss: 16.969104766845703 Tokens per Sec: 18833.854414886555
Epoch Step: 50 / 135 Loss: 9.550189018249512 Tokens per Sec: 17173.091063244512
Epoch Step: 55 / 135 Loss: 142.51852416992188 Tokens per Sec: 20947.219752931338
Epoch Step: 60 / 135 Loss: 25.809345245361328 Tokens per Sec: 21147.225140268263
Epoch Step: 65 / 135 Loss: 15.183452606201172 Tokens per Sec: 21325.83883736108
Epoch Step: 70 / 135 Loss: 15.087408065795898 Tokens per Sec: 21602.847580778754
Epoch Step: 75 / 135 Loss: 22.044269561767578 Tokens per Sec: 21898.292596888252
Epoch Step: 80 / 135 Loss: 15.253950119018555 Tokens per Sec: 17782.02555765624
Epoch Step: 85 / 135 Loss: 17.6865291595459 Tokens per Sec: 19237.85952776182
Epoch Step: 90 / 135 Loss: 17.705795288085938 Tokens per Sec: 20196.186980521208
Epoch Step: 95 / 135 Loss: 13.410115242004395 Tokens per Sec: 17965.751131922563
Epoch Step: 100 / 135 Loss: 17.888442993164062 Tokens per Sec: 15346.005987979655
Epoch Step: 105 / 135 Loss: 7.353456974029541 Tokens per Sec: 16694.67452036888
Epoch Step: 110 / 135 Loss: 18.269359588623047 Tokens per Sec: 19084.655244915797
Epoch Step: 115 / 135 Loss: 16.765104293823242 Tokens per Sec: 16908.888089224045
Epoch Step: 120 / 135 Loss: 26.85081672668457 Tokens per Sec: 19356.001680763122
Epoch Step: 125 / 135 Loss: 13.772429466247559 Tokens per Sec: 17197.04416800135
Epoch Step: 130 / 135 Loss: 13.341092109680176 Tokens per Sec: 16963.68597066462
Epoch Step: 135 / 135 Loss: 22.224746704101562 Tokens per Sec: 20205.004762482946
Epoch ended with duration 0:00:13.216567
Train perplexity: 2.503585297136469
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.593980
Validation perplexity: 2.335603253395959
Model saved checkpoint!
Epoch 36 / 1000
Epoch Step: 5 / 135 Loss: 26.502355575561523 Tokens per Sec: 22419.67646614951
Epoch Step: 10 / 135 Loss: 20.992000579833984 Tokens per Sec: 22086.75495549107
Epoch Step: 15 / 135 Loss: 13.801515579223633 Tokens per Sec: 21776.871375994106
Epoch Step: 20 / 135 Loss: 25.029216766357422 Tokens per Sec: 22546.978641918224
Epoch Step: 25 / 135 Loss: 22.579574584960938 Tokens per Sec: 18422.15061480158
Epoch Step: 30 / 135 Loss: 9.922440528869629 Tokens per Sec: 18533.54192240133
Epoch Step: 35 / 135 Loss: 22.239850997924805 Tokens per Sec: 21556.796901691872
Epoch Step: 40 / 135 Loss: 16.512678146362305 Tokens per Sec: 21560.86528008828
Epoch Step: 45 / 135 Loss: 29.490375518798828 Tokens per Sec: 23334.14947222849
Epoch Step: 50 / 135 Loss: 27.375045776367188 Tokens per Sec: 20726.913728362397
Epoch Step: 55 / 135 Loss: 27.477876663208008 Tokens per Sec: 21362.663677708206
Epoch Step: 60 / 135 Loss: 22.962778091430664 Tokens per Sec: 21871.138883657757
Epoch Step: 65 / 135 Loss: 18.075849533081055 Tokens per Sec: 22004.746195207797
Epoch Step: 70 / 135 Loss: 25.287246704101562 Tokens per Sec: 23215.40504762318
Epoch Step: 75 / 135 Loss: 16.94646644592285 Tokens per Sec: 19411.50909945494
Epoch Step: 80 / 135 Loss: 10.464502334594727 Tokens per Sec: 16592.714692958336
Epoch Step: 85 / 135 Loss: 21.99445915222168 Tokens per Sec: 18395.78676547052
Epoch Step: 90 / 135 Loss: 23.20585823059082 Tokens per Sec: 18707.485460535117
Epoch Step: 95 / 135 Loss: 23.909944534301758 Tokens per Sec: 19194.76134295198
Epoch Step: 100 / 135 Loss: 77.03962707519531 Tokens per Sec: 21027.56458678934
Epoch Step: 105 / 135 Loss: 82.52462768554688 Tokens per Sec: 18343.598846830493
Epoch Step: 110 / 135 Loss: 15.507980346679688 Tokens per Sec: 16085.570770710352
Epoch Step: 115 / 135 Loss: 8.956144332885742 Tokens per Sec: 18023.936097389127
Epoch Step: 120 / 135 Loss: 27.47380828857422 Tokens per Sec: 20406.414051946107
Epoch Step: 125 / 135 Loss: 15.692525863647461 Tokens per Sec: 17373.78712028314
Epoch Step: 130 / 135 Loss: 16.482786178588867 Tokens per Sec: 19677.512702630407
Epoch Step: 135 / 135 Loss: 18.216447830200195 Tokens per Sec: 18194.544980826675
Epoch ended with duration 0:00:12.672666
Train perplexity: 2.2043513160508557
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 > TYPE_3 > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.600450
Validation perplexity: 2.7506918527412476
Epoch 37 / 1000
Epoch Step: 5 / 135 Loss: 24.001487731933594 Tokens per Sec: 22829.97613463913
Epoch Step: 10 / 135 Loss: 27.780170440673828 Tokens per Sec: 21805.28895207558
Epoch Step: 15 / 135 Loss: 11.316261291503906 Tokens per Sec: 17176.322881813474
Epoch Step: 20 / 135 Loss: 18.42101287841797 Tokens per Sec: 18178.725165991316
Epoch Step: 25 / 135 Loss: 13.454208374023438 Tokens per Sec: 18790.655113685065
Epoch Step: 30 / 135 Loss: 18.41223907470703 Tokens per Sec: 20492.416609439333
Epoch Step: 35 / 135 Loss: 17.811315536499023 Tokens per Sec: 22432.24948122301
Epoch Step: 40 / 135 Loss: 14.673802375793457 Tokens per Sec: 20652.93257977027
Epoch Step: 45 / 135 Loss: 21.848939895629883 Tokens per Sec: 22330.469556118165
Epoch Step: 50 / 135 Loss: 15.348292350769043 Tokens per Sec: 19710.69894316131
Epoch Step: 55 / 135 Loss: 13.364143371582031 Tokens per Sec: 20701.48971820259
Epoch Step: 60 / 135 Loss: 25.81326675415039 Tokens per Sec: 20690.799382395446
Epoch Step: 65 / 135 Loss: 16.39292335510254 Tokens per Sec: 19862.265898918195
Epoch Step: 70 / 135 Loss: 81.98196411132812 Tokens per Sec: 20417.15330253118
Epoch Step: 75 / 135 Loss: 28.128265380859375 Tokens per Sec: 23031.967457764495
Epoch Step: 80 / 135 Loss: 13.444130897521973 Tokens per Sec: 17293.743144282726
Epoch Step: 85 / 135 Loss: 16.096508026123047 Tokens per Sec: 23742.123304066175
Epoch Step: 90 / 135 Loss: 7.888870716094971 Tokens per Sec: 22383.205870335893
Epoch Step: 95 / 135 Loss: 20.438596725463867 Tokens per Sec: 18287.15631198097
Epoch Step: 100 / 135 Loss: 11.313003540039062 Tokens per Sec: 20405.534900394327
Epoch Step: 105 / 135 Loss: 8.93587875366211 Tokens per Sec: 15444.37940945356
Epoch Step: 110 / 135 Loss: 22.10406494140625 Tokens per Sec: 17879.730249573142
Epoch Step: 115 / 135 Loss: 14.844534873962402 Tokens per Sec: 19440.794136449567
Epoch Step: 120 / 135 Loss: 24.172861099243164 Tokens per Sec: 17226.389337850476
Epoch Step: 125 / 135 Loss: 24.743953704833984 Tokens per Sec: 19097.005463785463
Epoch Step: 130 / 135 Loss: 14.367008209228516 Tokens per Sec: 19518.22439487996
Epoch Step: 135 / 135 Loss: 9.861959457397461 Tokens per Sec: 19026.960102260702
Epoch ended with duration 0:00:12.782065
Train perplexity: 2.315527967497909
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.601374
Validation perplexity: 1.9415140355993734
Model saved best_on_validation!
Epoch 38 / 1000
Epoch Step: 5 / 135 Loss: 8.92747974395752 Tokens per Sec: 20305.103780353744
Epoch Step: 10 / 135 Loss: 24.431058883666992 Tokens per Sec: 20981.365374209196
Epoch Step: 15 / 135 Loss: 23.415390014648438 Tokens per Sec: 22144.80927162591
Epoch Step: 20 / 135 Loss: 16.80768585205078 Tokens per Sec: 21408.08271766101
Epoch Step: 25 / 135 Loss: 23.92691421508789 Tokens per Sec: 18508.858269919965
Epoch Step: 30 / 135 Loss: 25.707595825195312 Tokens per Sec: 18561.46156562684
Epoch Step: 35 / 135 Loss: 6.541360855102539 Tokens per Sec: 18221.790765582806
Epoch Step: 40 / 135 Loss: 29.40268898010254 Tokens per Sec: 18777.45364302403
Epoch Step: 45 / 135 Loss: 75.63166046142578 Tokens per Sec: 20646.78298583548
Epoch Step: 50 / 135 Loss: 14.008400917053223 Tokens per Sec: 21497.238546477056
Epoch Step: 55 / 135 Loss: 24.63137435913086 Tokens per Sec: 20228.649440976493
Epoch Step: 60 / 135 Loss: 21.452194213867188 Tokens per Sec: 20406.747037936027
Epoch Step: 65 / 135 Loss: 9.86069393157959 Tokens per Sec: 19353.965794887918
Epoch Step: 70 / 135 Loss: 50.276512145996094 Tokens per Sec: 18621.84090277017
Epoch Step: 75 / 135 Loss: 10.3284273147583 Tokens per Sec: 18417.83441570159
Epoch Step: 80 / 135 Loss: 92.60875701904297 Tokens per Sec: 20307.85276294065
Epoch Step: 85 / 135 Loss: 23.830278396606445 Tokens per Sec: 19094.803802945156
Epoch Step: 90 / 135 Loss: 16.54750633239746 Tokens per Sec: 21741.23933642259
Epoch Step: 95 / 135 Loss: 17.339963912963867 Tokens per Sec: 18326.687817900114
Epoch Step: 100 / 135 Loss: 24.00889015197754 Tokens per Sec: 20536.34682525285
Epoch Step: 105 / 135 Loss: 18.159379959106445 Tokens per Sec: 18495.231953866725
Epoch Step: 110 / 135 Loss: 14.053059577941895 Tokens per Sec: 17237.753417196483
Epoch Step: 115 / 135 Loss: 21.341623306274414 Tokens per Sec: 17000.994403571178
Epoch Step: 120 / 135 Loss: 21.455562591552734 Tokens per Sec: 17950.7347001928
Epoch Step: 125 / 135 Loss: 15.383831977844238 Tokens per Sec: 19261.028424787306
Epoch Step: 130 / 135 Loss: 8.63983154296875 Tokens per Sec: 12588.471600654131
Epoch Step: 135 / 135 Loss: 16.27707290649414 Tokens per Sec: 17975.416482799865
Epoch ended with duration 0:00:13.235852
Train perplexity: 2.3738095971640796
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.674692
Validation perplexity: 1.833545886436423
Model saved best_on_validation!
Epoch 39 / 1000
Epoch Step: 5 / 135 Loss: 12.339519500732422 Tokens per Sec: 19044.831298778707
Epoch Step: 10 / 135 Loss: 78.16937255859375 Tokens per Sec: 20190.61724255556
Epoch Step: 15 / 135 Loss: 24.70830726623535 Tokens per Sec: 21796.16292931435
Epoch Step: 20 / 135 Loss: 23.76589584350586 Tokens per Sec: 18420.666166285544
Epoch Step: 25 / 135 Loss: 26.62905502319336 Tokens per Sec: 22350.751351227715
Epoch Step: 30 / 135 Loss: 20.764299392700195 Tokens per Sec: 22227.92328429153
Epoch Step: 35 / 135 Loss: 20.225820541381836 Tokens per Sec: 20203.012556801375
Epoch Step: 40 / 135 Loss: 11.746072769165039 Tokens per Sec: 20132.199247405493
Epoch Step: 45 / 135 Loss: 13.42052936553955 Tokens per Sec: 16567.601925348008
Epoch Step: 50 / 135 Loss: 7.934236526489258 Tokens per Sec: 20109.33597015575
Epoch Step: 55 / 135 Loss: 13.700160026550293 Tokens per Sec: 20328.570128415962
Epoch Step: 60 / 135 Loss: 11.031435012817383 Tokens per Sec: 22188.304129281034
Epoch Step: 65 / 135 Loss: 28.254772186279297 Tokens per Sec: 19419.64464369622
Epoch Step: 70 / 135 Loss: 29.58773422241211 Tokens per Sec: 19167.639523186404
Epoch Step: 75 / 135 Loss: 19.285181045532227 Tokens per Sec: 18849.96822037559
Epoch Step: 80 / 135 Loss: 17.601436614990234 Tokens per Sec: 17801.860210375115
Epoch Step: 85 / 135 Loss: 22.404863357543945 Tokens per Sec: 21207.953533780874
Epoch Step: 90 / 135 Loss: 9.915494918823242 Tokens per Sec: 20297.10142687822
Epoch Step: 95 / 135 Loss: 23.45880126953125 Tokens per Sec: 18459.03464486508
Epoch Step: 100 / 135 Loss: 17.261940002441406 Tokens per Sec: 19542.379016704745
Epoch Step: 105 / 135 Loss: 15.04887580871582 Tokens per Sec: 16840.591068607406
Epoch Step: 110 / 135 Loss: 42.45676040649414 Tokens per Sec: 15768.756194229614
Epoch Step: 115 / 135 Loss: 14.150530815124512 Tokens per Sec: 19058.278805233494
Epoch Step: 120 / 135 Loss: 7.771247863769531 Tokens per Sec: 16087.629826941391
Epoch Step: 125 / 135 Loss: 21.824405670166016 Tokens per Sec: 19053.148755434955
Epoch Step: 130 / 135 Loss: 19.410207748413086 Tokens per Sec: 18861.993617314096
Epoch Step: 135 / 135 Loss: 23.628618240356445 Tokens per Sec: 19557.27621458403
Epoch ended with duration 0:00:13.125577
Train perplexity: 2.472079533088291
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.595098
Validation perplexity: 2.4758910235185883
Epoch 40 / 1000
Epoch Step: 5 / 135 Loss: 13.22712516784668 Tokens per Sec: 20271.329971356263
Epoch Step: 10 / 135 Loss: 99.92282104492188 Tokens per Sec: 24007.149087919704
Epoch Step: 15 / 135 Loss: 13.526056289672852 Tokens per Sec: 18902.81115416929
Epoch Step: 20 / 135 Loss: 24.3749942779541 Tokens per Sec: 23763.112113611347
Epoch Step: 25 / 135 Loss: 23.872596740722656 Tokens per Sec: 21565.153977045542
Epoch Step: 30 / 135 Loss: 24.550752639770508 Tokens per Sec: 23792.405705148758
Epoch Step: 35 / 135 Loss: 22.052047729492188 Tokens per Sec: 16173.260864355501
Epoch Step: 40 / 135 Loss: 8.67816162109375 Tokens per Sec: 22332.65809224403
Epoch Step: 45 / 135 Loss: 21.493589401245117 Tokens per Sec: 23060.56434225693
Epoch Step: 50 / 135 Loss: 18.188732147216797 Tokens per Sec: 22270.765776027718
Epoch Step: 55 / 135 Loss: 15.864542961120605 Tokens per Sec: 18220.910961369373
Epoch Step: 60 / 135 Loss: 12.047286987304688 Tokens per Sec: 21184.56566660293
Epoch Step: 65 / 135 Loss: 10.594773292541504 Tokens per Sec: 20112.47042210204
Epoch Step: 70 / 135 Loss: 23.95330047607422 Tokens per Sec: 18385.181365753913
Epoch Step: 75 / 135 Loss: 13.933161735534668 Tokens per Sec: 19081.346506189195
Epoch Step: 80 / 135 Loss: 17.03243064880371 Tokens per Sec: 19546.36668952238
Epoch Step: 85 / 135 Loss: 23.129074096679688 Tokens per Sec: 18952.424249535365
Epoch Step: 90 / 135 Loss: 16.858367919921875 Tokens per Sec: 17720.240999265247
Epoch Step: 95 / 135 Loss: 14.039321899414062 Tokens per Sec: 23647.737459014104
Epoch Step: 100 / 135 Loss: 11.921712875366211 Tokens per Sec: 19567.619619868685
Epoch Step: 105 / 135 Loss: 25.417348861694336 Tokens per Sec: 17878.938828104518
Epoch Step: 110 / 135 Loss: 18.280153274536133 Tokens per Sec: 19188.91741681584
Epoch Step: 115 / 135 Loss: 11.264039993286133 Tokens per Sec: 17072.264066559354
Epoch Step: 120 / 135 Loss: 27.00823211669922 Tokens per Sec: 20221.54596578707
Epoch Step: 125 / 135 Loss: 29.961727142333984 Tokens per Sec: 17640.762080211574
Epoch Step: 130 / 135 Loss: 27.393404006958008 Tokens per Sec: 18700.04134105977
Epoch Step: 135 / 135 Loss: 55.226890563964844 Tokens per Sec: 19158.533103684258
Epoch ended with duration 0:00:12.665207
Train perplexity: 2.1102088706536084
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_2 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.588897
Validation perplexity: 2.127120747423228
Model saved checkpoint!
Epoch 41 / 1000
Epoch Step: 5 / 135 Loss: 17.75788688659668 Tokens per Sec: 20659.94187941398
Epoch Step: 10 / 135 Loss: 12.204387664794922 Tokens per Sec: 24184.579948105522
Epoch Step: 15 / 135 Loss: 84.1543197631836 Tokens per Sec: 20911.19233640254
Epoch Step: 20 / 135 Loss: 25.68182373046875 Tokens per Sec: 20614.01573279605
Epoch Step: 25 / 135 Loss: 8.237446784973145 Tokens per Sec: 19124.199107215256
Epoch Step: 30 / 135 Loss: 19.625328063964844 Tokens per Sec: 15506.157914362728
Epoch Step: 35 / 135 Loss: 11.171119689941406 Tokens per Sec: 21645.87655749269
Epoch Step: 40 / 135 Loss: 69.82227325439453 Tokens per Sec: 24213.964997733627
Epoch Step: 45 / 135 Loss: 46.55915069580078 Tokens per Sec: 21217.803020590218
Epoch Step: 50 / 135 Loss: 25.199934005737305 Tokens per Sec: 17023.929452042143
Epoch Step: 55 / 135 Loss: 9.992881774902344 Tokens per Sec: 21416.93620784515
Epoch Step: 60 / 135 Loss: 13.662785530090332 Tokens per Sec: 19863.968575167924
Epoch Step: 65 / 135 Loss: 13.685076713562012 Tokens per Sec: 18817.052144730034
Epoch Step: 70 / 135 Loss: 11.713851928710938 Tokens per Sec: 19826.793204097183
Epoch Step: 75 / 135 Loss: 19.575069427490234 Tokens per Sec: 18804.259794001155
Epoch Step: 80 / 135 Loss: 13.741471290588379 Tokens per Sec: 22036.678824712046
Epoch Step: 85 / 135 Loss: 7.083485126495361 Tokens per Sec: 19590.745082764006
Epoch Step: 90 / 135 Loss: 57.141319274902344 Tokens per Sec: 20696.82296431089
Epoch Step: 95 / 135 Loss: 16.904747009277344 Tokens per Sec: 16811.66462244573
Epoch Step: 100 / 135 Loss: 22.914915084838867 Tokens per Sec: 18158.909147464863
Epoch Step: 105 / 135 Loss: 17.86688995361328 Tokens per Sec: 16151.83660184114
Epoch Step: 110 / 135 Loss: 19.552858352661133 Tokens per Sec: 17673.221758175438
Epoch Step: 115 / 135 Loss: 23.85403823852539 Tokens per Sec: 18518.01837737984
Epoch Step: 120 / 135 Loss: 17.242422103881836 Tokens per Sec: 17697.920373934285
Epoch Step: 125 / 135 Loss: 22.44574546813965 Tokens per Sec: 18918.941099107564
Epoch Step: 130 / 135 Loss: 9.980844497680664 Tokens per Sec: 17394.863088765895
Epoch Step: 135 / 135 Loss: 24.015222549438477 Tokens per Sec: 17541.843501985262
Epoch ended with duration 0:00:13.173231
Train perplexity: 2.071350192396975
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.690297
Validation perplexity: 3.0840517584459235
Epoch 42 / 1000
Epoch Step: 5 / 135 Loss: 24.88056182861328 Tokens per Sec: 16153.898190497423
Epoch Step: 10 / 135 Loss: 13.351202011108398 Tokens per Sec: 20093.38937480735
Epoch Step: 15 / 135 Loss: 14.946598052978516 Tokens per Sec: 22909.570381828
Epoch Step: 20 / 135 Loss: 13.57994270324707 Tokens per Sec: 22111.78692227204
Epoch Step: 25 / 135 Loss: 22.516454696655273 Tokens per Sec: 19389.955391398165
Epoch Step: 30 / 135 Loss: 22.148765563964844 Tokens per Sec: 20546.882481331926
Epoch Step: 35 / 135 Loss: 21.024696350097656 Tokens per Sec: 21208.26659841876
Epoch Step: 40 / 135 Loss: 7.485673904418945 Tokens per Sec: 22058.080839938168
Epoch Step: 45 / 135 Loss: 16.087188720703125 Tokens per Sec: 19068.003812421808
Epoch Step: 50 / 135 Loss: 20.855606079101562 Tokens per Sec: 19145.793812759617
Epoch Step: 55 / 135 Loss: 10.170089721679688 Tokens per Sec: 19432.134456551812
Epoch Step: 60 / 135 Loss: 23.876480102539062 Tokens per Sec: 23330.222416243247
Epoch Step: 65 / 135 Loss: 15.622420310974121 Tokens per Sec: 17471.48548701543
Epoch Step: 70 / 135 Loss: 68.69937133789062 Tokens per Sec: 17998.246669675147
Epoch Step: 75 / 135 Loss: 45.74265670776367 Tokens per Sec: 16980.55304465351
Epoch Step: 80 / 135 Loss: 18.4429931640625 Tokens per Sec: 19178.21808280306
Epoch Step: 85 / 135 Loss: 15.348814964294434 Tokens per Sec: 22224.904259103627
Epoch Step: 90 / 135 Loss: 18.969959259033203 Tokens per Sec: 17716.917301105914
Epoch Step: 95 / 135 Loss: 10.06568431854248 Tokens per Sec: 18980.30863716101
Epoch Step: 100 / 135 Loss: 10.467292785644531 Tokens per Sec: 20838.573850376764
Epoch Step: 105 / 135 Loss: 16.74348258972168 Tokens per Sec: 17066.66163674008
Epoch Step: 110 / 135 Loss: 17.680341720581055 Tokens per Sec: 16666.677469543916
Epoch Step: 115 / 135 Loss: 130.84396362304688 Tokens per Sec: 17395.638136229998
Epoch Step: 120 / 135 Loss: 19.642642974853516 Tokens per Sec: 18461.42901287784
Epoch Step: 125 / 135 Loss: 102.01582336425781 Tokens per Sec: 19977.173845212066
Epoch Step: 130 / 135 Loss: 14.346616744995117 Tokens per Sec: 17121.70211663202
Epoch Step: 135 / 135 Loss: 10.749837875366211 Tokens per Sec: 16175.652920048966
Epoch ended with duration 0:00:13.244509
Train perplexity: 2.2433856514663315
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.677717
Validation perplexity: 2.0990457591565272
Epoch 43 / 1000
Epoch Step: 5 / 135 Loss: 23.884838104248047 Tokens per Sec: 17682.07227371531
Epoch Step: 10 / 135 Loss: 15.235367774963379 Tokens per Sec: 23300.066622831786
Epoch Step: 15 / 135 Loss: 16.92652130126953 Tokens per Sec: 18846.32790543062
Epoch Step: 20 / 135 Loss: 23.74666404724121 Tokens per Sec: 19760.920517545168
Epoch Step: 25 / 135 Loss: 19.002559661865234 Tokens per Sec: 22691.33684109487
Epoch Step: 30 / 135 Loss: 8.410524368286133 Tokens per Sec: 17933.942702184762
Epoch Step: 35 / 135 Loss: 10.58936595916748 Tokens per Sec: 19732.165162112393
Epoch Step: 40 / 135 Loss: 21.499248504638672 Tokens per Sec: 19709.1205198941
Epoch Step: 45 / 135 Loss: 8.292322158813477 Tokens per Sec: 14716.157011781313
Epoch Step: 50 / 135 Loss: 17.150632858276367 Tokens per Sec: 19224.436018909015
Epoch Step: 55 / 135 Loss: 22.519065856933594 Tokens per Sec: 21688.946889921
Epoch Step: 60 / 135 Loss: 13.734617233276367 Tokens per Sec: 22720.791109734746
Epoch Step: 65 / 135 Loss: 20.9912109375 Tokens per Sec: 21693.400357183076
Epoch Step: 70 / 135 Loss: 9.230948448181152 Tokens per Sec: 20967.58630812961
Epoch Step: 75 / 135 Loss: 21.063587188720703 Tokens per Sec: 19047.794276126868
Epoch Step: 80 / 135 Loss: 20.35798454284668 Tokens per Sec: 19400.746198187866
Epoch Step: 85 / 135 Loss: 10.455877304077148 Tokens per Sec: 15155.068591594481
Epoch Step: 90 / 135 Loss: 116.41789245605469 Tokens per Sec: 20729.369975288664
Epoch Step: 95 / 135 Loss: 19.05887794494629 Tokens per Sec: 23025.41405082054
Epoch Step: 100 / 135 Loss: 27.380321502685547 Tokens per Sec: 20277.607473899163
Epoch Step: 105 / 135 Loss: 13.029359817504883 Tokens per Sec: 17213.5706494499
Epoch Step: 110 / 135 Loss: 10.349732398986816 Tokens per Sec: 16904.561133493975
Epoch Step: 115 / 135 Loss: 8.904789924621582 Tokens per Sec: 14408.408274369109
Epoch Step: 120 / 135 Loss: 19.772523880004883 Tokens per Sec: 18268.26844654422
Epoch Step: 125 / 135 Loss: 23.668418884277344 Tokens per Sec: 19416.95616159085
Epoch Step: 130 / 135 Loss: 22.436779022216797 Tokens per Sec: 18814.053013154815
Epoch Step: 135 / 135 Loss: 21.699783325195312 Tokens per Sec: 18139.571672654663
Epoch ended with duration 0:00:13.176853
Train perplexity: 2.0218557259947643
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.681210
Validation perplexity: 2.4780510021359285
Epoch 44 / 1000
Epoch Step: 5 / 135 Loss: 12.717597961425781 Tokens per Sec: 18619.76912964719
Epoch Step: 10 / 135 Loss: 19.392635345458984 Tokens per Sec: 17638.348396231402
Epoch Step: 15 / 135 Loss: 22.88446807861328 Tokens per Sec: 19411.37581185648
Epoch Step: 20 / 135 Loss: 22.0490779876709 Tokens per Sec: 21934.3527682665
Epoch Step: 25 / 135 Loss: 20.41929817199707 Tokens per Sec: 22278.76088544303
Epoch Step: 30 / 135 Loss: 13.904946327209473 Tokens per Sec: 18045.921923926853
Epoch Step: 35 / 135 Loss: 9.222558975219727 Tokens per Sec: 21045.28369744193
Epoch Step: 40 / 135 Loss: 14.858269691467285 Tokens per Sec: 17953.693322507632
Epoch Step: 45 / 135 Loss: 20.13727378845215 Tokens per Sec: 20660.150686881112
Epoch Step: 50 / 135 Loss: 17.629100799560547 Tokens per Sec: 21712.561159786354
Epoch Step: 55 / 135 Loss: 54.246707916259766 Tokens per Sec: 21356.351196230953
Epoch Step: 60 / 135 Loss: 10.977923393249512 Tokens per Sec: 21151.103122954937
Epoch Step: 65 / 135 Loss: 22.558391571044922 Tokens per Sec: 18158.593379187965
Epoch Step: 70 / 135 Loss: 19.53851890563965 Tokens per Sec: 18709.25118754994
Epoch Step: 75 / 135 Loss: 14.88396167755127 Tokens per Sec: 20639.559920301086
Epoch Step: 80 / 135 Loss: 11.422361373901367 Tokens per Sec: 16445.170845671593
Epoch Step: 85 / 135 Loss: 14.98719310760498 Tokens per Sec: 22249.98113475059
Epoch Step: 90 / 135 Loss: 14.280561447143555 Tokens per Sec: 24559.591060954208
Epoch Step: 95 / 135 Loss: 9.214393615722656 Tokens per Sec: 15722.059778880086
Epoch Step: 100 / 135 Loss: 56.019371032714844 Tokens per Sec: 19248.95141359122
Epoch Step: 105 / 135 Loss: 17.71588897705078 Tokens per Sec: 18276.273315649465
Epoch Step: 110 / 135 Loss: 17.537992477416992 Tokens per Sec: 18065.43513871821
Epoch Step: 115 / 135 Loss: 11.975903511047363 Tokens per Sec: 16396.72914716422
Epoch Step: 120 / 135 Loss: 11.560604095458984 Tokens per Sec: 17132.55710343241
Epoch Step: 125 / 135 Loss: 48.058937072753906 Tokens per Sec: 19058.64080274728
Epoch Step: 130 / 135 Loss: 16.09394073486328 Tokens per Sec: 18203.841028870695
Epoch Step: 135 / 135 Loss: 13.298785209655762 Tokens per Sec: 18979.22888705024
Epoch ended with duration 0:00:13.147644
Train perplexity: 1.9577439241165957
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.672259
Validation perplexity: 1.7306080854274895
Model saved best_on_validation!
Epoch 45 / 1000
Epoch Step: 5 / 135 Loss: 9.28764820098877 Tokens per Sec: 20151.71172745141
Epoch Step: 10 / 135 Loss: 9.415583610534668 Tokens per Sec: 20273.654594995747
Epoch Step: 15 / 135 Loss: 22.21267318725586 Tokens per Sec: 20478.204535688834
Epoch Step: 20 / 135 Loss: 76.5979232788086 Tokens per Sec: 19251.3419763277
Epoch Step: 25 / 135 Loss: 8.407127380371094 Tokens per Sec: 21925.449361034676
Epoch Step: 30 / 135 Loss: 101.10462951660156 Tokens per Sec: 18883.400832643463
Epoch Step: 35 / 135 Loss: 13.017178535461426 Tokens per Sec: 17484.32331282195
Epoch Step: 40 / 135 Loss: 16.082353591918945 Tokens per Sec: 18967.51658771295
Epoch Step: 45 / 135 Loss: 8.922837257385254 Tokens per Sec: 19465.748018730887
Epoch Step: 50 / 135 Loss: 16.301424026489258 Tokens per Sec: 21657.416007964734
Epoch Step: 55 / 135 Loss: 21.846405029296875 Tokens per Sec: 19567.769855215633
Epoch Step: 60 / 135 Loss: 14.287643432617188 Tokens per Sec: 20706.72594726856
Epoch Step: 65 / 135 Loss: 69.02082061767578 Tokens per Sec: 19412.17718023425
Epoch Step: 70 / 135 Loss: 13.405561447143555 Tokens per Sec: 19962.813020711495
Epoch Step: 75 / 135 Loss: 22.74234390258789 Tokens per Sec: 22397.866943647685
Epoch Step: 80 / 135 Loss: 9.366063117980957 Tokens per Sec: 22325.84380685403
Epoch Step: 85 / 135 Loss: 17.29035758972168 Tokens per Sec: 19847.595338441646
Epoch Step: 90 / 135 Loss: 10.817298889160156 Tokens per Sec: 20186.309347441224
Epoch Step: 95 / 135 Loss: 12.518778800964355 Tokens per Sec: 15503.243689229235
Epoch Step: 100 / 135 Loss: 24.486650466918945 Tokens per Sec: 19051.79798225923
Epoch Step: 105 / 135 Loss: 19.103708267211914 Tokens per Sec: 18051.847646888455
Epoch Step: 110 / 135 Loss: 10.568641662597656 Tokens per Sec: 17254.463354206793
Epoch Step: 115 / 135 Loss: 17.47988510131836 Tokens per Sec: 18896.32038749662
Epoch Step: 120 / 135 Loss: 20.098527908325195 Tokens per Sec: 18337.083910068628
Epoch Step: 125 / 135 Loss: 12.827177047729492 Tokens per Sec: 15867.427710081398
Epoch Step: 130 / 135 Loss: 20.747447967529297 Tokens per Sec: 18082.24946821292
Epoch Step: 135 / 135 Loss: 17.81563949584961 Tokens per Sec: 17144.058846245927
Epoch ended with duration 0:00:13.172736
Train perplexity: 2.078705308225326
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.672273
Validation perplexity: 1.7322971020406446
Model saved checkpoint!
Epoch 46 / 1000
Epoch Step: 5 / 135 Loss: 20.592037200927734 Tokens per Sec: 20071.735122730403
Epoch Step: 10 / 135 Loss: 14.310818672180176 Tokens per Sec: 22088.471501359363
Epoch Step: 15 / 135 Loss: 6.2027997970581055 Tokens per Sec: 19545.73971792448
Epoch Step: 20 / 135 Loss: 113.90205383300781 Tokens per Sec: 21945.82820678544
Epoch Step: 25 / 135 Loss: 18.305328369140625 Tokens per Sec: 22873.406228740245
Epoch Step: 30 / 135 Loss: 6.961925506591797 Tokens per Sec: 17111.40307606089
Epoch Step: 35 / 135 Loss: 10.35913372039795 Tokens per Sec: 20834.11986171216
Epoch Step: 40 / 135 Loss: 17.379196166992188 Tokens per Sec: 21134.916843029354
Epoch Step: 45 / 135 Loss: 21.602094650268555 Tokens per Sec: 20390.031277011825
Epoch Step: 50 / 135 Loss: 9.669581413269043 Tokens per Sec: 17048.617477494947
Epoch Step: 55 / 135 Loss: 7.623955726623535 Tokens per Sec: 18663.856746227266
Epoch Step: 60 / 135 Loss: 20.07828140258789 Tokens per Sec: 19875.871396049493
Epoch Step: 65 / 135 Loss: 9.660863876342773 Tokens per Sec: 18446.287262131285
Epoch Step: 70 / 135 Loss: 10.913385391235352 Tokens per Sec: 19091.283274696325
Epoch Step: 75 / 135 Loss: 18.860076904296875 Tokens per Sec: 18649.764280865606
Epoch Step: 80 / 135 Loss: 7.880893707275391 Tokens per Sec: 18074.90971102395
Epoch Step: 85 / 135 Loss: 10.55322551727295 Tokens per Sec: 20320.764024153308
Epoch Step: 90 / 135 Loss: 13.424398422241211 Tokens per Sec: 21546.394886909813
Epoch Step: 95 / 135 Loss: 19.181522369384766 Tokens per Sec: 22628.417958696307
Epoch Step: 100 / 135 Loss: 14.51203441619873 Tokens per Sec: 18526.78192081762
Epoch Step: 105 / 135 Loss: 13.521627426147461 Tokens per Sec: 17594.90389183469
Epoch Step: 110 / 135 Loss: 13.723824501037598 Tokens per Sec: 19267.620537772927
Epoch Step: 115 / 135 Loss: 7.608852863311768 Tokens per Sec: 16199.247963981692
Epoch Step: 120 / 135 Loss: 18.42369842529297 Tokens per Sec: 17180.812287608296
Epoch Step: 125 / 135 Loss: 21.716798782348633 Tokens per Sec: 19516.62118309253
Epoch Step: 130 / 135 Loss: 20.805286407470703 Tokens per Sec: 19012.935155244602
Epoch Step: 135 / 135 Loss: 30.127073287963867 Tokens per Sec: 15822.38978372952
Epoch ended with duration 0:00:13.114124
Train perplexity: 1.9456404859598753
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.679661
Validation perplexity: 1.9755053994647038
Epoch 47 / 1000
Epoch Step: 5 / 135 Loss: 73.22882080078125 Tokens per Sec: 18565.47687611295
Epoch Step: 10 / 135 Loss: 11.096851348876953 Tokens per Sec: 20571.959139140774
Epoch Step: 15 / 135 Loss: 11.439438819885254 Tokens per Sec: 17804.999231621077
Epoch Step: 20 / 135 Loss: 67.8350830078125 Tokens per Sec: 20702.680799999544
Epoch Step: 25 / 135 Loss: 7.285086631774902 Tokens per Sec: 17681.437299504996
Epoch Step: 30 / 135 Loss: 18.769073486328125 Tokens per Sec: 17252.97062389631
Epoch Step: 35 / 135 Loss: 8.630085945129395 Tokens per Sec: 18191.80824240681
Epoch Step: 40 / 135 Loss: 18.052003860473633 Tokens per Sec: 17201.915802211326
Epoch Step: 45 / 135 Loss: 15.55500602722168 Tokens per Sec: 22575.088886795416
Epoch Step: 50 / 135 Loss: 111.86396026611328 Tokens per Sec: 20655.87290036481
Epoch Step: 55 / 135 Loss: 10.149017333984375 Tokens per Sec: 19097.50734979348
Epoch Step: 60 / 135 Loss: 18.560501098632812 Tokens per Sec: 18260.1431634188
Epoch Step: 65 / 135 Loss: 14.330495834350586 Tokens per Sec: 24000.175390460798
Epoch Step: 70 / 135 Loss: 104.91082763671875 Tokens per Sec: 19700.679853017784
Epoch Step: 75 / 135 Loss: 9.988280296325684 Tokens per Sec: 15590.61466808417
Epoch Step: 80 / 135 Loss: 12.633456230163574 Tokens per Sec: 23344.844025051418
Epoch Step: 85 / 135 Loss: 9.403831481933594 Tokens per Sec: 20278.231811299665
Epoch Step: 90 / 135 Loss: 6.233529090881348 Tokens per Sec: 18316.197249195637
Epoch Step: 95 / 135 Loss: 13.23956298828125 Tokens per Sec: 22920.147247756544
Epoch Step: 100 / 135 Loss: 19.297948837280273 Tokens per Sec: 23122.852622672453
Epoch Step: 105 / 135 Loss: 14.420117378234863 Tokens per Sec: 19760.67976564237
Epoch Step: 110 / 135 Loss: 12.624624252319336 Tokens per Sec: 17643.092847135304
Epoch Step: 115 / 135 Loss: 20.676376342773438 Tokens per Sec: 17290.14614610225
Epoch Step: 120 / 135 Loss: 7.582322120666504 Tokens per Sec: 16558.402765407372
Epoch Step: 125 / 135 Loss: 15.836198806762695 Tokens per Sec: 18061.8779680495
Epoch Step: 130 / 135 Loss: 17.85736083984375 Tokens per Sec: 17686.253291262597
Epoch Step: 135 / 135 Loss: 12.628600120544434 Tokens per Sec: 16116.98330091963
Epoch ended with duration 0:00:13.202372
Train perplexity: 1.9847213117019213
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.677738
Validation perplexity: 1.9088787889469097
Epoch 48 / 1000
Epoch Step: 5 / 135 Loss: 20.046512603759766 Tokens per Sec: 19581.91674331187
Epoch Step: 10 / 135 Loss: 11.86449909210205 Tokens per Sec: 21731.7641051183
Epoch Step: 15 / 135 Loss: 17.099964141845703 Tokens per Sec: 14863.281935109093
Epoch Step: 20 / 135 Loss: 9.074667930603027 Tokens per Sec: 19456.147943282904
Epoch Step: 25 / 135 Loss: 6.140830993652344 Tokens per Sec: 18833.455379557086
Epoch Step: 30 / 135 Loss: 20.391380310058594 Tokens per Sec: 20673.690629703153
Epoch Step: 35 / 135 Loss: 23.168842315673828 Tokens per Sec: 20750.60853579805
Epoch Step: 40 / 135 Loss: 14.289186477661133 Tokens per Sec: 23533.591973048166
Epoch Step: 45 / 135 Loss: 115.93843078613281 Tokens per Sec: 19234.734353165597
Epoch Step: 50 / 135 Loss: 14.032506942749023 Tokens per Sec: 15177.372171251056
Epoch Step: 55 / 135 Loss: 14.159677505493164 Tokens per Sec: 21809.041163451704
Epoch Step: 60 / 135 Loss: 12.021992683410645 Tokens per Sec: 21556.586689182262
Epoch Step: 65 / 135 Loss: 19.246070861816406 Tokens per Sec: 17255.37819744004
Epoch Step: 70 / 135 Loss: 12.714258193969727 Tokens per Sec: 23729.20826853366
Epoch Step: 75 / 135 Loss: 17.575037002563477 Tokens per Sec: 20567.237109786583
Epoch Step: 80 / 135 Loss: 18.84069061279297 Tokens per Sec: 21853.12325464486
Epoch Step: 85 / 135 Loss: 13.60325813293457 Tokens per Sec: 20262.11491276733
Epoch Step: 90 / 135 Loss: 11.659826278686523 Tokens per Sec: 21350.31990094186
Epoch Step: 95 / 135 Loss: 16.93134117126465 Tokens per Sec: 18203.36889821201
Epoch Step: 100 / 135 Loss: 6.77575159072876 Tokens per Sec: 18706.968841760146
Epoch Step: 105 / 135 Loss: 16.448505401611328 Tokens per Sec: 17129.69886135232
Epoch Step: 110 / 135 Loss: 86.32778930664062 Tokens per Sec: 16830.593869417302
Epoch Step: 115 / 135 Loss: 14.734110832214355 Tokens per Sec: 17961.953444360162
Epoch Step: 120 / 135 Loss: 13.492047309875488 Tokens per Sec: 17580.107405483668
Epoch Step: 125 / 135 Loss: 11.898247718811035 Tokens per Sec: 17316.545628543947
Epoch Step: 130 / 135 Loss: 17.458057403564453 Tokens per Sec: 18095.747392426205
Epoch Step: 135 / 135 Loss: 12.32314395904541 Tokens per Sec: 16651.639510254987
Epoch ended with duration 0:00:13.226735
Train perplexity: 2.010970341463787
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.686557
Validation perplexity: 2.5290266645261203
Epoch 49 / 1000
Epoch Step: 5 / 135 Loss: 21.54050064086914 Tokens per Sec: 17827.718739528376
Epoch Step: 10 / 135 Loss: 21.251277923583984 Tokens per Sec: 20405.03011647487
Epoch Step: 15 / 135 Loss: 17.276058197021484 Tokens per Sec: 21599.42076882279
Epoch Step: 20 / 135 Loss: 20.423606872558594 Tokens per Sec: 20336.663504792
Epoch Step: 25 / 135 Loss: 15.949844360351562 Tokens per Sec: 22028.82172152474
Epoch Step: 30 / 135 Loss: 6.702426433563232 Tokens per Sec: 16042.736409874087
Epoch Step: 35 / 135 Loss: 18.022186279296875 Tokens per Sec: 22085.470241184757
Epoch Step: 40 / 135 Loss: 20.36884117126465 Tokens per Sec: 22238.904889759124
Epoch Step: 45 / 135 Loss: 9.284038543701172 Tokens per Sec: 23128.353662400186
Epoch Step: 50 / 135 Loss: 40.907073974609375 Tokens per Sec: 19244.863657469636
Epoch Step: 55 / 135 Loss: 17.18303871154785 Tokens per Sec: 17348.389500839126
Epoch Step: 60 / 135 Loss: 16.757822036743164 Tokens per Sec: 19955.642156151247
Epoch Step: 65 / 135 Loss: 13.363465309143066 Tokens per Sec: 15860.599449008952
Epoch Step: 70 / 135 Loss: 12.592595100402832 Tokens per Sec: 23719.24251734788
Epoch Step: 75 / 135 Loss: 11.604978561401367 Tokens per Sec: 21715.395863166843
Epoch Step: 80 / 135 Loss: 20.632308959960938 Tokens per Sec: 19193.255334075857
Epoch Step: 85 / 135 Loss: 10.126668930053711 Tokens per Sec: 17300.43135413485
Epoch Step: 90 / 135 Loss: 16.133014678955078 Tokens per Sec: 19914.36238495004
Epoch Step: 95 / 135 Loss: 9.61957836151123 Tokens per Sec: 21113.225060277204
Epoch Step: 100 / 135 Loss: 10.601949691772461 Tokens per Sec: 18497.694122415207
Epoch Step: 105 / 135 Loss: 11.639836311340332 Tokens per Sec: 19473.918095289497
Epoch Step: 110 / 135 Loss: 14.551198959350586 Tokens per Sec: 16473.697530689155
Epoch Step: 115 / 135 Loss: 17.5185489654541 Tokens per Sec: 18693.0259690948
Epoch Step: 120 / 135 Loss: 12.289995193481445 Tokens per Sec: 18147.08058102513
Epoch Step: 125 / 135 Loss: 19.544343948364258 Tokens per Sec: 16773.149781871063
Epoch Step: 130 / 135 Loss: 15.862215995788574 Tokens per Sec: 15914.169804414376
Epoch Step: 135 / 135 Loss: 15.901725769042969 Tokens per Sec: 17799.532573595683
Epoch ended with duration 0:00:13.162463
Train perplexity: 1.9117744272355623
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.691199
Validation perplexity: 2.694273884122485
Epoch 50 / 1000
Epoch Step: 5 / 135 Loss: 7.0129499435424805 Tokens per Sec: 18287.084877178608
Epoch Step: 10 / 135 Loss: 13.684737205505371 Tokens per Sec: 23063.61930865726
Epoch Step: 15 / 135 Loss: 9.133118629455566 Tokens per Sec: 15360.209890927774
Epoch Step: 20 / 135 Loss: 11.192676544189453 Tokens per Sec: 20367.520675173782
Epoch Step: 25 / 135 Loss: 14.009947776794434 Tokens per Sec: 18295.317189988047
Epoch Step: 30 / 135 Loss: 9.600836753845215 Tokens per Sec: 15773.216481360367
Epoch Step: 35 / 135 Loss: 15.951857566833496 Tokens per Sec: 22912.60019498909
Epoch Step: 40 / 135 Loss: 11.401529312133789 Tokens per Sec: 23084.12640669908
Epoch Step: 45 / 135 Loss: 14.353867530822754 Tokens per Sec: 17881.316855283225
Epoch Step: 50 / 135 Loss: 18.654296875 Tokens per Sec: 19178.29111065801
Epoch Step: 55 / 135 Loss: 16.26737403869629 Tokens per Sec: 21552.922555224926
Epoch Step: 60 / 135 Loss: 11.152512550354004 Tokens per Sec: 17944.55012993271
Epoch Step: 65 / 135 Loss: 55.741798400878906 Tokens per Sec: 21865.37964449995
Epoch Step: 70 / 135 Loss: 17.63374900817871 Tokens per Sec: 20500.288683401468
Epoch Step: 75 / 135 Loss: 13.54601764678955 Tokens per Sec: 16371.091991425428
Epoch Step: 80 / 135 Loss: 6.784056663513184 Tokens per Sec: 21253.119703055203
Epoch Step: 85 / 135 Loss: 16.178327560424805 Tokens per Sec: 18940.61133877016
Epoch Step: 90 / 135 Loss: 9.798140525817871 Tokens per Sec: 20768.70376569238
Epoch Step: 95 / 135 Loss: 12.959256172180176 Tokens per Sec: 23675.81037354807
Epoch Step: 100 / 135 Loss: 22.274900436401367 Tokens per Sec: 18857.696171990334
Epoch Step: 105 / 135 Loss: 15.715327262878418 Tokens per Sec: 17256.869663381935
Epoch Step: 110 / 135 Loss: 17.205154418945312 Tokens per Sec: 19875.877942894873
Epoch Step: 115 / 135 Loss: 112.93025207519531 Tokens per Sec: 16843.113023925183
Epoch Step: 120 / 135 Loss: 14.2893705368042 Tokens per Sec: 17742.841743700326
Epoch Step: 125 / 135 Loss: 13.507890701293945 Tokens per Sec: 17172.744735028908
Epoch Step: 130 / 135 Loss: 18.033674240112305 Tokens per Sec: 19438.863299586807
Epoch Step: 135 / 135 Loss: 117.8675537109375 Tokens per Sec: 15551.595628095514
Epoch ended with duration 0:00:13.273887
Train perplexity: 2.0370341317213154
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.676009
Validation perplexity: 1.924040595921231
Model saved checkpoint!
Epoch 51 / 1000
Epoch Step: 5 / 135 Loss: 16.868850708007812 Tokens per Sec: 18632.77759775894
Epoch Step: 10 / 135 Loss: 17.325796127319336 Tokens per Sec: 16861.94511403131
Epoch Step: 15 / 135 Loss: 15.373865127563477 Tokens per Sec: 19757.456887729506
Epoch Step: 20 / 135 Loss: 18.063884735107422 Tokens per Sec: 24291.082325568113
Epoch Step: 25 / 135 Loss: 18.300806045532227 Tokens per Sec: 19376.68318612448
Epoch Step: 30 / 135 Loss: 18.550678253173828 Tokens per Sec: 21163.82723362555
Epoch Step: 35 / 135 Loss: 11.137207984924316 Tokens per Sec: 23681.60978808026
Epoch Step: 40 / 135 Loss: 12.110902786254883 Tokens per Sec: 18891.09822445806
Epoch Step: 45 / 135 Loss: 15.785198211669922 Tokens per Sec: 19251.10657326282
Epoch Step: 50 / 135 Loss: 15.574548721313477 Tokens per Sec: 21414.247484241
Epoch Step: 55 / 135 Loss: 16.992307662963867 Tokens per Sec: 18645.48108404895
Epoch Step: 60 / 135 Loss: 7.73430871963501 Tokens per Sec: 19046.33280741606
Epoch Step: 65 / 135 Loss: 15.256495475769043 Tokens per Sec: 17499.592276350904
Epoch Step: 70 / 135 Loss: 19.357097625732422 Tokens per Sec: 21970.16171963532
Epoch Step: 75 / 135 Loss: 6.892409324645996 Tokens per Sec: 17070.091358357517
Epoch Step: 80 / 135 Loss: 15.209033012390137 Tokens per Sec: 19835.52709851077
Epoch Step: 85 / 135 Loss: 10.179583549499512 Tokens per Sec: 20653.783070307607
Epoch Step: 90 / 135 Loss: 12.08784294128418 Tokens per Sec: 20377.79095306941
Epoch Step: 95 / 135 Loss: 19.24663734436035 Tokens per Sec: 18423.751152351964
Epoch Step: 100 / 135 Loss: 29.344148635864258 Tokens per Sec: 19943.499664254065
Epoch Step: 105 / 135 Loss: 10.119559288024902 Tokens per Sec: 18228.63201639019
Epoch Step: 110 / 135 Loss: 10.656116485595703 Tokens per Sec: 17942.516127711737
Epoch Step: 115 / 135 Loss: 7.9549150466918945 Tokens per Sec: 18853.47761588001
Epoch Step: 120 / 135 Loss: 11.211551666259766 Tokens per Sec: 16305.691043596087
Epoch Step: 125 / 135 Loss: 14.131007194519043 Tokens per Sec: 16720.533621439492
Epoch Step: 130 / 135 Loss: 8.513847351074219 Tokens per Sec: 17085.105705968286
Epoch Step: 135 / 135 Loss: 12.9044828414917 Tokens per Sec: 18092.182980286143
Epoch ended with duration 0:00:13.232465
Train perplexity: 1.8584438754922934
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.671953
Validation perplexity: 1.6496390658831135
Model saved best_on_validation!
Epoch 52 / 1000
Epoch Step: 5 / 135 Loss: 14.5369873046875 Tokens per Sec: 19529.21494748106
Epoch Step: 10 / 135 Loss: 17.39838409423828 Tokens per Sec: 20972.966498229158
Epoch Step: 15 / 135 Loss: 11.388742446899414 Tokens per Sec: 24001.13342907747
Epoch Step: 20 / 135 Loss: 117.73248291015625 Tokens per Sec: 18328.411606199574
Epoch Step: 25 / 135 Loss: 20.21877670288086 Tokens per Sec: 20368.000408561587
Epoch Step: 30 / 135 Loss: 6.7657294273376465 Tokens per Sec: 19983.125112753714
Epoch Step: 35 / 135 Loss: 104.73818969726562 Tokens per Sec: 17095.480721828306
Epoch Step: 40 / 135 Loss: 19.135473251342773 Tokens per Sec: 21145.386443854513
Epoch Step: 45 / 135 Loss: 7.571588039398193 Tokens per Sec: 17913.72654134606
Epoch Step: 50 / 135 Loss: 20.47191047668457 Tokens per Sec: 16943.340202220723
Epoch Step: 55 / 135 Loss: 9.829317092895508 Tokens per Sec: 15978.035680277699
Epoch Step: 60 / 135 Loss: 10.318657875061035 Tokens per Sec: 22181.763220496225
Epoch Step: 65 / 135 Loss: 76.67683410644531 Tokens per Sec: 19059.02883701157
Epoch Step: 70 / 135 Loss: 10.073028564453125 Tokens per Sec: 18208.29215932497
Epoch Step: 75 / 135 Loss: 12.980337142944336 Tokens per Sec: 21035.808907209936
Epoch Step: 80 / 135 Loss: 17.874235153198242 Tokens per Sec: 18813.05805576932
Epoch Step: 85 / 135 Loss: 17.05760955810547 Tokens per Sec: 23957.649384809534
Epoch Step: 90 / 135 Loss: 12.168279647827148 Tokens per Sec: 20086.205813171222
Epoch Step: 95 / 135 Loss: 13.90665054321289 Tokens per Sec: 17758.662799995505
Epoch Step: 100 / 135 Loss: 7.692780017852783 Tokens per Sec: 23068.894224438358
Epoch Step: 105 / 135 Loss: 12.006476402282715 Tokens per Sec: 15033.698898227702
Epoch Step: 110 / 135 Loss: 16.3558349609375 Tokens per Sec: 18182.37228663221
Epoch Step: 115 / 135 Loss: 16.529197692871094 Tokens per Sec: 18988.020153794114
Epoch Step: 120 / 135 Loss: 10.67912483215332 Tokens per Sec: 18769.826221984928
Epoch Step: 125 / 135 Loss: 16.779218673706055 Tokens per Sec: 19465.190721308394
Epoch Step: 130 / 135 Loss: 17.085430145263672 Tokens per Sec: 17607.527413101165
Epoch Step: 135 / 135 Loss: 13.125385284423828 Tokens per Sec: 15498.274562431789
Epoch ended with duration 0:00:13.234640
Train perplexity: 1.9277747985852416
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.680444
Validation perplexity: 2.2270114897910855
Epoch 53 / 1000
Epoch Step: 5 / 135 Loss: 15.007231712341309 Tokens per Sec: 20370.735043375655
Epoch Step: 10 / 135 Loss: 10.765217781066895 Tokens per Sec: 20920.63006645825
Epoch Step: 15 / 135 Loss: 18.045080184936523 Tokens per Sec: 21135.961545451275
Epoch Step: 20 / 135 Loss: 17.577909469604492 Tokens per Sec: 21307.682630356263
Epoch Step: 25 / 135 Loss: 7.866860389709473 Tokens per Sec: 15279.890646142709
Epoch Step: 30 / 135 Loss: 10.588236808776855 Tokens per Sec: 20745.740005125514
Epoch Step: 35 / 135 Loss: 14.795039176940918 Tokens per Sec: 21096.968818752808
Epoch Step: 40 / 135 Loss: 16.879484176635742 Tokens per Sec: 20926.584635167386
Epoch Step: 45 / 135 Loss: 14.433938026428223 Tokens per Sec: 20099.041417997934
Epoch Step: 50 / 135 Loss: 17.517332077026367 Tokens per Sec: 19555.21098064657
Epoch Step: 55 / 135 Loss: 6.339750289916992 Tokens per Sec: 14016.878445795084
Epoch Step: 60 / 135 Loss: 12.74290943145752 Tokens per Sec: 18116.244218137217
Epoch Step: 65 / 135 Loss: 12.52513313293457 Tokens per Sec: 23592.503102932867
Epoch Step: 70 / 135 Loss: 13.737360954284668 Tokens per Sec: 22566.768979800545
Epoch Step: 75 / 135 Loss: 17.966445922851562 Tokens per Sec: 21266.470728468143
Epoch Step: 80 / 135 Loss: 15.534640312194824 Tokens per Sec: 18492.685006865955
Epoch Step: 85 / 135 Loss: 5.375882148742676 Tokens per Sec: 21179.60546331713
Epoch Step: 90 / 135 Loss: 18.625486373901367 Tokens per Sec: 20353.74195668814
Epoch Step: 95 / 135 Loss: 8.217872619628906 Tokens per Sec: 18417.188756999185
Epoch Step: 100 / 135 Loss: 93.58635711669922 Tokens per Sec: 19359.314819780135
Epoch Step: 105 / 135 Loss: 13.710286140441895 Tokens per Sec: 17608.63358878429
Epoch Step: 110 / 135 Loss: 15.56269645690918 Tokens per Sec: 18946.861473187088
Epoch Step: 115 / 135 Loss: 9.535720825195312 Tokens per Sec: 18747.209330968326
Epoch Step: 120 / 135 Loss: 102.18548583984375 Tokens per Sec: 16040.117531774584
Epoch Step: 125 / 135 Loss: 17.271909713745117 Tokens per Sec: 16319.189675448644
Epoch Step: 130 / 135 Loss: 7.769536018371582 Tokens per Sec: 15482.287264165334
Epoch Step: 135 / 135 Loss: 56.2850341796875 Tokens per Sec: 18611.39191106212
Epoch ended with duration 0:00:13.210122
Train perplexity: 1.9251086269471225
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.679607
Validation perplexity: 1.932609799147078
Epoch 54 / 1000
Epoch Step: 5 / 135 Loss: 19.530879974365234 Tokens per Sec: 18583.29953548441
Epoch Step: 10 / 135 Loss: 11.906137466430664 Tokens per Sec: 20612.062975429584
Epoch Step: 15 / 135 Loss: 16.247821807861328 Tokens per Sec: 20239.938551681316
Epoch Step: 20 / 135 Loss: 12.207478523254395 Tokens per Sec: 22041.546633329952
Epoch Step: 25 / 135 Loss: 11.826495170593262 Tokens per Sec: 21583.741645627655
Epoch Step: 30 / 135 Loss: 17.482572555541992 Tokens per Sec: 17196.607970540197
Epoch Step: 35 / 135 Loss: 10.87597942352295 Tokens per Sec: 20609.789250641436
Epoch Step: 40 / 135 Loss: 9.758291244506836 Tokens per Sec: 19071.23159118315
Epoch Step: 45 / 135 Loss: 15.782682418823242 Tokens per Sec: 20396.244977001254
Epoch Step: 50 / 135 Loss: 18.184417724609375 Tokens per Sec: 20871.27288921032
Epoch Step: 55 / 135 Loss: 10.816228866577148 Tokens per Sec: 19599.28473876622
Epoch Step: 60 / 135 Loss: 13.286816596984863 Tokens per Sec: 17086.368864713924
Epoch Step: 65 / 135 Loss: 8.817351341247559 Tokens per Sec: 18017.37402756759
Epoch Step: 70 / 135 Loss: 13.916433334350586 Tokens per Sec: 20775.847046619903
Epoch Step: 75 / 135 Loss: 11.464756965637207 Tokens per Sec: 15203.996070658126
Epoch Step: 80 / 135 Loss: 129.14044189453125 Tokens per Sec: 23819.085167623645
Epoch Step: 85 / 135 Loss: 14.096028327941895 Tokens per Sec: 21585.078058421936
Epoch Step: 90 / 135 Loss: 11.036541938781738 Tokens per Sec: 21445.11111147905
Epoch Step: 95 / 135 Loss: 5.9733476638793945 Tokens per Sec: 18055.856962268772
Epoch Step: 100 / 135 Loss: 10.439560890197754 Tokens per Sec: 18051.026270422026
Epoch Step: 105 / 135 Loss: 10.57452392578125 Tokens per Sec: 17817.632196195565
Epoch Step: 110 / 135 Loss: 15.213447570800781 Tokens per Sec: 18321.42320718592
Epoch Step: 115 / 135 Loss: 8.386054992675781 Tokens per Sec: 18211.098748062926
Epoch Step: 120 / 135 Loss: 15.23173713684082 Tokens per Sec: 16222.367631816385
Epoch Step: 125 / 135 Loss: 16.527549743652344 Tokens per Sec: 19059.112104184285
Epoch Step: 130 / 135 Loss: 15.499579429626465 Tokens per Sec: 15627.40702443999
Epoch Step: 135 / 135 Loss: 15.48147964477539 Tokens per Sec: 18217.21304221575
Epoch ended with duration 0:00:13.254733
Train perplexity: 1.7961330443137404
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.676471
Validation perplexity: 1.988895452098431
Epoch 55 / 1000
Epoch Step: 5 / 135 Loss: 15.796031951904297 Tokens per Sec: 19629.815954219426
Epoch Step: 10 / 135 Loss: 12.11511516571045 Tokens per Sec: 23044.106939159086
Epoch Step: 15 / 135 Loss: 15.94101333618164 Tokens per Sec: 18558.4455773775
Epoch Step: 20 / 135 Loss: 10.92783260345459 Tokens per Sec: 19868.278831211366
Epoch Step: 25 / 135 Loss: 15.877217292785645 Tokens per Sec: 20918.101047737597
Epoch Step: 30 / 135 Loss: 13.00283432006836 Tokens per Sec: 19870.32670801775
Epoch Step: 35 / 135 Loss: 16.926673889160156 Tokens per Sec: 21623.396178822404
Epoch Step: 40 / 135 Loss: 14.62116813659668 Tokens per Sec: 16203.497250314202
Epoch Step: 45 / 135 Loss: 12.04144287109375 Tokens per Sec: 19149.78216202903
Epoch Step: 50 / 135 Loss: 17.082395553588867 Tokens per Sec: 19343.85144810384
Epoch Step: 55 / 135 Loss: 6.412898540496826 Tokens per Sec: 20066.60464393785
Epoch Step: 60 / 135 Loss: 8.007494926452637 Tokens per Sec: 17819.62897358932
Epoch Step: 65 / 135 Loss: 7.605151176452637 Tokens per Sec: 16545.121022581057
Epoch Step: 70 / 135 Loss: 18.571189880371094 Tokens per Sec: 21199.693116552346
Epoch Step: 75 / 135 Loss: 7.493785381317139 Tokens per Sec: 22890.93988000466
Epoch Step: 80 / 135 Loss: 7.3293375968933105 Tokens per Sec: 21993.863082788597
Epoch Step: 85 / 135 Loss: 52.6657829284668 Tokens per Sec: 20024.13766936981
Epoch Step: 90 / 135 Loss: 8.300487518310547 Tokens per Sec: 22185.699205034158
Epoch Step: 95 / 135 Loss: 14.298304557800293 Tokens per Sec: 22599.788836642376
Epoch Step: 100 / 135 Loss: 11.705947875976562 Tokens per Sec: 18062.232439210722
Epoch Step: 105 / 135 Loss: 14.624171257019043 Tokens per Sec: 18126.101458847636
Epoch Step: 110 / 135 Loss: 10.316709518432617 Tokens per Sec: 16802.46620632014
Epoch Step: 115 / 135 Loss: 9.964072227478027 Tokens per Sec: 17742.24394827024
Epoch Step: 120 / 135 Loss: 13.831809043884277 Tokens per Sec: 16954.31229844614
Epoch Step: 125 / 135 Loss: 13.394430160522461 Tokens per Sec: 17805.614122529354
Epoch Step: 130 / 135 Loss: 12.261059761047363 Tokens per Sec: 18490.51746501498
Epoch Step: 135 / 135 Loss: 88.17969512939453 Tokens per Sec: 17012.72830127783
Epoch ended with duration 0:00:13.118551
Train perplexity: 1.7449934318269267
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.685644
Validation perplexity: 2.5312789185001563
Model saved checkpoint!
Epoch 56 / 1000
Epoch Step: 5 / 135 Loss: 17.291603088378906 Tokens per Sec: 16078.204510244908
Epoch Step: 10 / 135 Loss: 15.256111145019531 Tokens per Sec: 19403.802150518044
Epoch Step: 15 / 135 Loss: 9.966111183166504 Tokens per Sec: 16643.591677809396
Epoch Step: 20 / 135 Loss: 7.729630470275879 Tokens per Sec: 20777.042367652874
Epoch Step: 25 / 135 Loss: 14.067906379699707 Tokens per Sec: 19750.77685084733
Epoch Step: 30 / 135 Loss: 12.060281753540039 Tokens per Sec: 20775.375465477417
Epoch Step: 35 / 135 Loss: 13.268298149108887 Tokens per Sec: 23505.82248059436
Epoch Step: 40 / 135 Loss: 10.689497947692871 Tokens per Sec: 22208.24826096208
Epoch Step: 45 / 135 Loss: 8.494094848632812 Tokens per Sec: 19884.356347013163
Epoch Step: 50 / 135 Loss: 17.460124969482422 Tokens per Sec: 19517.05898811063
Epoch Step: 55 / 135 Loss: 18.872278213500977 Tokens per Sec: 19870.725975878617
Epoch Step: 60 / 135 Loss: 13.5977201461792 Tokens per Sec: 23761.978877070553
Epoch Step: 65 / 135 Loss: 17.685340881347656 Tokens per Sec: 21852.853864573855
Epoch Step: 70 / 135 Loss: 12.820765495300293 Tokens per Sec: 17696.407755586537
Epoch Step: 75 / 135 Loss: 12.29626750946045 Tokens per Sec: 21269.402236628644
Epoch Step: 80 / 135 Loss: 11.071990013122559 Tokens per Sec: 22559.060235145793
Epoch Step: 85 / 135 Loss: 18.1036376953125 Tokens per Sec: 18586.253165160637
Epoch Step: 90 / 135 Loss: 11.069795608520508 Tokens per Sec: 21456.03773461792
Epoch Step: 95 / 135 Loss: 21.20905876159668 Tokens per Sec: 19890.378369293016
Epoch Step: 100 / 135 Loss: 58.767982482910156 Tokens per Sec: 17409.873652215912
Epoch Step: 105 / 135 Loss: 18.304283142089844 Tokens per Sec: 15457.974428621024
Epoch Step: 110 / 135 Loss: 9.263278007507324 Tokens per Sec: 17672.707354822036
Epoch Step: 115 / 135 Loss: 14.927264213562012 Tokens per Sec: 16948.24391691342
Epoch Step: 120 / 135 Loss: 15.890401840209961 Tokens per Sec: 19675.501617144484
Epoch Step: 125 / 135 Loss: 36.228878021240234 Tokens per Sec: 18067.301470739494
Epoch Step: 130 / 135 Loss: 10.198987007141113 Tokens per Sec: 18282.42161783431
Epoch Step: 135 / 135 Loss: 11.356392860412598 Tokens per Sec: 16569.759205828566
Epoch ended with duration 0:00:13.130281
Train perplexity: 1.7644931285918883
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.685942
Validation perplexity: 2.3396240259363625
Epoch 57 / 1000
Epoch Step: 5 / 135 Loss: 11.506793975830078 Tokens per Sec: 19682.878538419875
Epoch Step: 10 / 135 Loss: 11.608297348022461 Tokens per Sec: 15792.771457065515
Epoch Step: 15 / 135 Loss: 13.18229866027832 Tokens per Sec: 22950.000233343464
Epoch Step: 20 / 135 Loss: 7.9842634201049805 Tokens per Sec: 18796.309135153635
Epoch Step: 25 / 135 Loss: 6.703944683074951 Tokens per Sec: 20421.828679193502
Epoch Step: 30 / 135 Loss: 12.529773712158203 Tokens per Sec: 20460.568724234527
Epoch Step: 35 / 135 Loss: 8.633580207824707 Tokens per Sec: 21251.27679430918
Epoch Step: 40 / 135 Loss: 38.79813003540039 Tokens per Sec: 21958.650854426003
Epoch Step: 45 / 135 Loss: 6.961601257324219 Tokens per Sec: 19795.991238136252
Epoch Step: 50 / 135 Loss: 8.761256217956543 Tokens per Sec: 17927.316675788377
Epoch Step: 55 / 135 Loss: 88.64620971679688 Tokens per Sec: 17533.03373522018
Epoch Step: 60 / 135 Loss: 7.96457052230835 Tokens per Sec: 19549.68279165445
Epoch Step: 65 / 135 Loss: 15.53213882446289 Tokens per Sec: 21917.80803042381
Epoch Step: 70 / 135 Loss: 12.728252410888672 Tokens per Sec: 18743.118816381466
Epoch Step: 75 / 135 Loss: 14.36600399017334 Tokens per Sec: 17645.88438023366
Epoch Step: 80 / 135 Loss: 13.111095428466797 Tokens per Sec: 21589.550434886045
Epoch Step: 85 / 135 Loss: 15.801291465759277 Tokens per Sec: 18857.19491053595
Epoch Step: 90 / 135 Loss: 5.706490516662598 Tokens per Sec: 20041.607548887263
Epoch Step: 95 / 135 Loss: 10.54386043548584 Tokens per Sec: 18679.80348864657
Epoch Step: 100 / 135 Loss: 14.423047065734863 Tokens per Sec: 20641.570265326693
Epoch Step: 105 / 135 Loss: 64.06993103027344 Tokens per Sec: 17859.39268784517
Epoch Step: 110 / 135 Loss: 108.88650512695312 Tokens per Sec: 19661.42030266749
Epoch Step: 115 / 135 Loss: 13.119539260864258 Tokens per Sec: 16390.038380688355
Epoch Step: 120 / 135 Loss: 9.580857276916504 Tokens per Sec: 17283.776912369543
Epoch Step: 125 / 135 Loss: 14.922197341918945 Tokens per Sec: 16308.972362023
Epoch Step: 130 / 135 Loss: 16.035232543945312 Tokens per Sec: 18233.47494881822
Epoch Step: 135 / 135 Loss: 15.686193466186523 Tokens per Sec: 18915.12784949147
Epoch ended with duration 0:00:13.250964
Train perplexity: 1.8505447149643846
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.671792
Validation perplexity: 1.6122329083329574
Model saved best_on_validation!
Epoch 58 / 1000
Epoch Step: 5 / 135 Loss: 15.473608016967773 Tokens per Sec: 21476.44708743264
Epoch Step: 10 / 135 Loss: 17.806974411010742 Tokens per Sec: 21494.307925084657
Epoch Step: 15 / 135 Loss: 11.687939643859863 Tokens per Sec: 20339.55231075775
Epoch Step: 20 / 135 Loss: 14.298103332519531 Tokens per Sec: 18787.287348988266
Epoch Step: 25 / 135 Loss: 7.926304817199707 Tokens per Sec: 17441.960321506354
Epoch Step: 30 / 135 Loss: 14.423840522766113 Tokens per Sec: 21641.01607900826
Epoch Step: 35 / 135 Loss: 14.841612815856934 Tokens per Sec: 15489.459377545312
Epoch Step: 40 / 135 Loss: 20.222679138183594 Tokens per Sec: 15562.88072007736
Epoch Step: 45 / 135 Loss: 8.99365234375 Tokens per Sec: 21553.15277157324
Epoch Step: 50 / 135 Loss: 57.157814025878906 Tokens per Sec: 20727.797643203383
Epoch Step: 55 / 135 Loss: 10.386640548706055 Tokens per Sec: 17297.90368916337
Epoch Step: 60 / 135 Loss: 10.744674682617188 Tokens per Sec: 17747.251441346616
Epoch Step: 65 / 135 Loss: 37.63363265991211 Tokens per Sec: 18429.84733697894
Epoch Step: 70 / 135 Loss: 10.767378807067871 Tokens per Sec: 19143.16195183143
Epoch Step: 75 / 135 Loss: 7.274641513824463 Tokens per Sec: 22437.900985765493
Epoch Step: 80 / 135 Loss: 13.236104965209961 Tokens per Sec: 21628.481092009446
Epoch Step: 85 / 135 Loss: 52.532859802246094 Tokens per Sec: 18928.37355324458
Epoch Step: 90 / 135 Loss: 10.926827430725098 Tokens per Sec: 20335.838501176193
Epoch Step: 95 / 135 Loss: 8.033110618591309 Tokens per Sec: 20937.579020883488
Epoch Step: 100 / 135 Loss: 15.00899600982666 Tokens per Sec: 22211.327923933168
Epoch Step: 105 / 135 Loss: 10.067536354064941 Tokens per Sec: 17764.65886196856
Epoch Step: 110 / 135 Loss: 10.839970588684082 Tokens per Sec: 17751.909239554247
Epoch Step: 115 / 135 Loss: 16.78348159790039 Tokens per Sec: 18873.696531950307
Epoch Step: 120 / 135 Loss: 115.09862518310547 Tokens per Sec: 18767.615941749864
Epoch Step: 125 / 135 Loss: 6.553122520446777 Tokens per Sec: 14289.029379707787
Epoch Step: 130 / 135 Loss: 16.39438819885254 Tokens per Sec: 18446.272270301764
Epoch Step: 135 / 135 Loss: 6.081632614135742 Tokens per Sec: 16161.207961955179
Epoch ended with duration 0:00:13.292563
Train perplexity: 1.7595547363813115
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.675467
Validation perplexity: 1.9690185830145979
Epoch 59 / 1000
Epoch Step: 5 / 135 Loss: 11.494946479797363 Tokens per Sec: 17556.71299304853
Epoch Step: 10 / 135 Loss: 15.16498851776123 Tokens per Sec: 21615.022424477433
Epoch Step: 15 / 135 Loss: 7.120994567871094 Tokens per Sec: 19538.479703264755
Epoch Step: 20 / 135 Loss: 11.18593692779541 Tokens per Sec: 20293.082403403732
Epoch Step: 25 / 135 Loss: 101.67292785644531 Tokens per Sec: 17532.11692301149
Epoch Step: 30 / 135 Loss: 8.499195098876953 Tokens per Sec: 17622.499127169056
Epoch Step: 35 / 135 Loss: 8.938365936279297 Tokens per Sec: 19044.455547051344
Epoch Step: 40 / 135 Loss: 14.757640838623047 Tokens per Sec: 18986.241556788802
Epoch Step: 45 / 135 Loss: 11.310582160949707 Tokens per Sec: 21986.555428834537
Epoch Step: 50 / 135 Loss: 14.273284912109375 Tokens per Sec: 19878.68215654236
Epoch Step: 55 / 135 Loss: 15.623261451721191 Tokens per Sec: 18188.446111061647
Epoch Step: 60 / 135 Loss: 13.65402889251709 Tokens per Sec: 22007.896658722628
Epoch Step: 65 / 135 Loss: 7.989358425140381 Tokens per Sec: 21268.84369074564
Epoch Step: 70 / 135 Loss: 9.931177139282227 Tokens per Sec: 19741.863808298258
Epoch Step: 75 / 135 Loss: 5.717784404754639 Tokens per Sec: 19927.710890865623
Epoch Step: 80 / 135 Loss: 8.495728492736816 Tokens per Sec: 24613.04531430938
Epoch Step: 85 / 135 Loss: 16.45866584777832 Tokens per Sec: 21336.76951366479
Epoch Step: 90 / 135 Loss: 8.75802230834961 Tokens per Sec: 19473.523434974584
Epoch Step: 95 / 135 Loss: 7.820897579193115 Tokens per Sec: 17501.768519553552
Epoch Step: 100 / 135 Loss: 10.746894836425781 Tokens per Sec: 19441.21153191037
Epoch Step: 105 / 135 Loss: 14.588187217712402 Tokens per Sec: 18262.792991779457
Epoch Step: 110 / 135 Loss: 79.60140228271484 Tokens per Sec: 19067.444630315593
Epoch Step: 115 / 135 Loss: 14.8001070022583 Tokens per Sec: 20401.85388552815
Epoch Step: 120 / 135 Loss: 13.049760818481445 Tokens per Sec: 17520.514700440555
Epoch Step: 125 / 135 Loss: 15.129427909851074 Tokens per Sec: 17193.66008796296
Epoch Step: 130 / 135 Loss: 9.167013168334961 Tokens per Sec: 14073.078568552472
Epoch Step: 135 / 135 Loss: 15.04889965057373 Tokens per Sec: 15856.100691586482
Epoch ended with duration 0:00:13.234484
Train perplexity: 1.7848442158408846
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.680775
Validation perplexity: 2.1088028652301527
Epoch 60 / 1000
Epoch Step: 5 / 135 Loss: 10.137392044067383 Tokens per Sec: 24018.980534453338
Epoch Step: 10 / 135 Loss: 16.87458038330078 Tokens per Sec: 22322.940252619053
Epoch Step: 15 / 135 Loss: 7.985979080200195 Tokens per Sec: 19945.604639088364
Epoch Step: 20 / 135 Loss: 10.842339515686035 Tokens per Sec: 16173.267884071316
Epoch Step: 25 / 135 Loss: 9.175629615783691 Tokens per Sec: 19099.374230400892
Epoch Step: 30 / 135 Loss: 54.6915168762207 Tokens per Sec: 14300.894764691297
Epoch Step: 35 / 135 Loss: 13.118135452270508 Tokens per Sec: 19434.67610090706
Epoch Step: 40 / 135 Loss: 12.969321250915527 Tokens per Sec: 19245.689250607862
Epoch Step: 45 / 135 Loss: 8.65883731842041 Tokens per Sec: 20247.604498263838
Epoch Step: 50 / 135 Loss: 101.01744842529297 Tokens per Sec: 18108.775731091646
Epoch Step: 55 / 135 Loss: 6.75637149810791 Tokens per Sec: 19090.154197970063
Epoch Step: 60 / 135 Loss: 8.893054008483887 Tokens per Sec: 23648.6577143825
Epoch Step: 65 / 135 Loss: 19.308849334716797 Tokens per Sec: 17908.765477103585
Epoch Step: 70 / 135 Loss: 12.826749801635742 Tokens per Sec: 19760.94172910011
Epoch Step: 75 / 135 Loss: 12.410784721374512 Tokens per Sec: 19663.667357724207
Epoch Step: 80 / 135 Loss: 14.183954238891602 Tokens per Sec: 20717.198809322515
Epoch Step: 85 / 135 Loss: 15.060737609863281 Tokens per Sec: 22515.46411410354
Epoch Step: 90 / 135 Loss: 8.635856628417969 Tokens per Sec: 21700.35127678485
Epoch Step: 95 / 135 Loss: 8.215601921081543 Tokens per Sec: 22537.86218193509
Epoch Step: 100 / 135 Loss: 5.9345502853393555 Tokens per Sec: 17039.854739058745
Epoch Step: 105 / 135 Loss: 11.832330703735352 Tokens per Sec: 17590.101723405987
Epoch Step: 110 / 135 Loss: 11.353760719299316 Tokens per Sec: 17273.204572819624
Epoch Step: 115 / 135 Loss: 16.285634994506836 Tokens per Sec: 17845.565221274774
Epoch Step: 120 / 135 Loss: 12.929179191589355 Tokens per Sec: 18663.346433358238
Epoch Step: 125 / 135 Loss: 7.235357761383057 Tokens per Sec: 16704.025575509513
Epoch Step: 130 / 135 Loss: 9.671846389770508 Tokens per Sec: 17518.135306464264
Epoch Step: 135 / 135 Loss: 14.258124351501465 Tokens per Sec: 19677.400449047356
Epoch ended with duration 0:00:13.172816
Train perplexity: 1.9439381865922318
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.671745
Validation perplexity: 1.5915329042477873
Model saved best_on_validation!
Model saved checkpoint!
Epoch 61 / 1000
Epoch Step: 5 / 135 Loss: 12.125419616699219 Tokens per Sec: 19824.108287703548
Epoch Step: 10 / 135 Loss: 15.825874328613281 Tokens per Sec: 19488.66456295271
Epoch Step: 15 / 135 Loss: 8.447325706481934 Tokens per Sec: 22188.231115884315
Epoch Step: 20 / 135 Loss: 8.115385055541992 Tokens per Sec: 19485.73286875726
Epoch Step: 25 / 135 Loss: 15.338879585266113 Tokens per Sec: 17289.448262896767
Epoch Step: 30 / 135 Loss: 15.573616981506348 Tokens per Sec: 21061.50880123327
Epoch Step: 35 / 135 Loss: 10.376616477966309 Tokens per Sec: 19960.55271879763
Epoch Step: 40 / 135 Loss: 16.52150535583496 Tokens per Sec: 20572.679451568205
Epoch Step: 45 / 135 Loss: 16.234756469726562 Tokens per Sec: 22315.234967719713
Epoch Step: 50 / 135 Loss: 10.36802864074707 Tokens per Sec: 22266.287855142473
Epoch Step: 55 / 135 Loss: 10.06875228881836 Tokens per Sec: 20297.321051090734
Epoch Step: 60 / 135 Loss: 15.063958168029785 Tokens per Sec: 15852.779108224597
Epoch Step: 65 / 135 Loss: 10.044883728027344 Tokens per Sec: 19310.098335958148
Epoch Step: 70 / 135 Loss: 9.272770881652832 Tokens per Sec: 20107.05887610127
Epoch Step: 75 / 135 Loss: 5.181814670562744 Tokens per Sec: 20530.06993466534
Epoch Step: 80 / 135 Loss: 14.603738784790039 Tokens per Sec: 17897.38016740466
Epoch Step: 85 / 135 Loss: 8.457296371459961 Tokens per Sec: 19929.39504243742
Epoch Step: 90 / 135 Loss: 15.573015213012695 Tokens per Sec: 21589.96364570621
Epoch Step: 95 / 135 Loss: 14.903484344482422 Tokens per Sec: 17858.362194657802
Epoch Step: 100 / 135 Loss: 14.9896879196167 Tokens per Sec: 20986.936317209464
Epoch Step: 105 / 135 Loss: 11.113876342773438 Tokens per Sec: 19222.60924189819
Epoch Step: 110 / 135 Loss: 13.18993854522705 Tokens per Sec: 17143.996668831925
Epoch Step: 115 / 135 Loss: 9.664896011352539 Tokens per Sec: 17353.129417026783
Epoch Step: 120 / 135 Loss: 6.04645299911499 Tokens per Sec: 17940.30408876707
Epoch Step: 125 / 135 Loss: 15.930593490600586 Tokens per Sec: 18333.413042261815
Epoch Step: 130 / 135 Loss: 8.26041030883789 Tokens per Sec: 15197.220430770585
Epoch Step: 135 / 135 Loss: 104.98360443115234 Tokens per Sec: 18655.972660794014
Epoch ended with duration 0:00:13.204285
Train perplexity: 1.8378089303549292
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.680130
Validation perplexity: 2.071875128240033
Epoch 62 / 1000
Epoch Step: 5 / 135 Loss: 8.55305290222168 Tokens per Sec: 19429.54951182282
Epoch Step: 10 / 135 Loss: 10.495615005493164 Tokens per Sec: 19155.008712024857
Epoch Step: 15 / 135 Loss: 10.270685195922852 Tokens per Sec: 21048.145786709294
Epoch Step: 20 / 135 Loss: 12.262893676757812 Tokens per Sec: 19587.459151951804
Epoch Step: 25 / 135 Loss: 13.941633224487305 Tokens per Sec: 19502.4450476969
Epoch Step: 30 / 135 Loss: 8.202455520629883 Tokens per Sec: 17893.80006106233
Epoch Step: 35 / 135 Loss: 13.824113845825195 Tokens per Sec: 20480.283903823492
Epoch Step: 40 / 135 Loss: 9.576362609863281 Tokens per Sec: 18908.69916134191
Epoch Step: 45 / 135 Loss: 8.329023361206055 Tokens per Sec: 20584.995406421796
Epoch Step: 50 / 135 Loss: 12.507783889770508 Tokens per Sec: 21202.546118739105
Epoch Step: 55 / 135 Loss: 12.531704902648926 Tokens per Sec: 22466.69471361806
Epoch Step: 60 / 135 Loss: 5.2441325187683105 Tokens per Sec: 20375.758566210137
Epoch Step: 65 / 135 Loss: 16.523244857788086 Tokens per Sec: 21108.751620202514
Epoch Step: 70 / 135 Loss: 10.627617835998535 Tokens per Sec: 18260.812995647328
Epoch Step: 75 / 135 Loss: 100.26921844482422 Tokens per Sec: 18401.563032795522
Epoch Step: 80 / 135 Loss: 108.2432861328125 Tokens per Sec: 23940.14266499889
Epoch Step: 85 / 135 Loss: 13.917463302612305 Tokens per Sec: 21426.17882730803
Epoch Step: 90 / 135 Loss: 6.948300361633301 Tokens per Sec: 18682.794839344246
Epoch Step: 95 / 135 Loss: 13.719120979309082 Tokens per Sec: 21099.254370414925
Epoch Step: 100 / 135 Loss: 13.570080757141113 Tokens per Sec: 15794.445183688313
Epoch Step: 105 / 135 Loss: 10.406932830810547 Tokens per Sec: 18467.399939734092
Epoch Step: 110 / 135 Loss: 8.567275047302246 Tokens per Sec: 14640.543457294856
Epoch Step: 115 / 135 Loss: 11.3643159866333 Tokens per Sec: 17665.81954020445
Epoch Step: 120 / 135 Loss: 14.681975364685059 Tokens per Sec: 19018.203092004067
Epoch Step: 125 / 135 Loss: 9.838191032409668 Tokens per Sec: 18994.479243442645
Epoch Step: 130 / 135 Loss: 45.18324661254883 Tokens per Sec: 14998.325511225994
Epoch Step: 135 / 135 Loss: 13.411588668823242 Tokens per Sec: 18345.72522477779
Epoch ended with duration 0:00:13.189220
Train perplexity: 1.7994816779860607
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.678751
Validation perplexity: 1.8804297349435268
Epoch 63 / 1000
Epoch Step: 5 / 135 Loss: 8.41059398651123 Tokens per Sec: 18305.214419914806
Epoch Step: 10 / 135 Loss: 8.661055564880371 Tokens per Sec: 17903.330246799756
Epoch Step: 15 / 135 Loss: 41.80789566040039 Tokens per Sec: 17782.70411093214
Epoch Step: 20 / 135 Loss: 7.066868782043457 Tokens per Sec: 17520.487135213847
Epoch Step: 25 / 135 Loss: 85.91796112060547 Tokens per Sec: 19915.410940285597
Epoch Step: 30 / 135 Loss: 13.740440368652344 Tokens per Sec: 18665.096277212022
Epoch Step: 35 / 135 Loss: 9.704261779785156 Tokens per Sec: 18983.823857151812
Epoch Step: 40 / 135 Loss: 16.088531494140625 Tokens per Sec: 17315.390335223026
Epoch Step: 45 / 135 Loss: 95.66998291015625 Tokens per Sec: 18850.608754760637
Epoch Step: 50 / 135 Loss: 10.75255012512207 Tokens per Sec: 19825.122345164436
Epoch Step: 55 / 135 Loss: 13.407889366149902 Tokens per Sec: 19168.78804133007
Epoch Step: 60 / 135 Loss: 15.697726249694824 Tokens per Sec: 20735.279399354273
Epoch Step: 65 / 135 Loss: 13.759003639221191 Tokens per Sec: 21447.464330614916
Epoch Step: 70 / 135 Loss: 13.485942840576172 Tokens per Sec: 20070.594586724084
Epoch Step: 75 / 135 Loss: 12.336965560913086 Tokens per Sec: 18738.073203435433
Epoch Step: 80 / 135 Loss: 95.94694519042969 Tokens per Sec: 20728.384382938253
Epoch Step: 85 / 135 Loss: 9.339812278747559 Tokens per Sec: 23389.010218568972
Epoch Step: 90 / 135 Loss: 12.569409370422363 Tokens per Sec: 23198.471547081524
Epoch Step: 95 / 135 Loss: 10.15687084197998 Tokens per Sec: 20599.466657941837
Epoch Step: 100 / 135 Loss: 6.956977367401123 Tokens per Sec: 19327.946101160243
Epoch Step: 105 / 135 Loss: 9.843297958374023 Tokens per Sec: 18302.327095465494
Epoch Step: 110 / 135 Loss: 95.840087890625 Tokens per Sec: 18842.322097710567
Epoch Step: 115 / 135 Loss: 14.404926300048828 Tokens per Sec: 16296.351015365988
Epoch Step: 120 / 135 Loss: 84.62433624267578 Tokens per Sec: 18235.481511934293
Epoch Step: 125 / 135 Loss: 15.799591064453125 Tokens per Sec: 20182.144385219708
Epoch Step: 130 / 135 Loss: 12.014840126037598 Tokens per Sec: 14982.856523885885
Epoch Step: 135 / 135 Loss: 6.6754231452941895 Tokens per Sec: 16043.998382365022
Epoch ended with duration 0:00:13.310586
Train perplexity: 1.868323678980026
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.676960
Validation perplexity: 1.7844382606734241
Epoch 64 / 1000
Epoch Step: 5 / 135 Loss: 16.33780288696289 Tokens per Sec: 19592.04607658573
Epoch Step: 10 / 135 Loss: 8.772514343261719 Tokens per Sec: 18686.78362727059
Epoch Step: 15 / 135 Loss: 97.51483917236328 Tokens per Sec: 21118.440851590833
Epoch Step: 20 / 135 Loss: 17.637168884277344 Tokens per Sec: 18575.54055082195
Epoch Step: 25 / 135 Loss: 73.68608856201172 Tokens per Sec: 20649.968901212273
Epoch Step: 30 / 135 Loss: 14.962776184082031 Tokens per Sec: 23372.336914945223
Epoch Step: 35 / 135 Loss: 17.558156967163086 Tokens per Sec: 21293.116984589185
Epoch Step: 40 / 135 Loss: 7.78300142288208 Tokens per Sec: 16938.748018570812
Epoch Step: 45 / 135 Loss: 12.75364875793457 Tokens per Sec: 19494.92210754278
Epoch Step: 50 / 135 Loss: 13.220256805419922 Tokens per Sec: 21547.51815412619
Epoch Step: 55 / 135 Loss: 13.683566093444824 Tokens per Sec: 17493.509273313437
Epoch Step: 60 / 135 Loss: 16.630653381347656 Tokens per Sec: 19508.927425447564
Epoch Step: 65 / 135 Loss: 12.521265029907227 Tokens per Sec: 21805.969848343968
Epoch Step: 70 / 135 Loss: 101.72168731689453 Tokens per Sec: 24207.867569483995
Epoch Step: 75 / 135 Loss: 7.191413879394531 Tokens per Sec: 17465.092405979678
Epoch Step: 80 / 135 Loss: 9.898555755615234 Tokens per Sec: 22434.01545777664
Epoch Step: 85 / 135 Loss: 15.174427032470703 Tokens per Sec: 21138.80627951012
Epoch Step: 90 / 135 Loss: 10.224740982055664 Tokens per Sec: 18778.900354389963
Epoch Step: 95 / 135 Loss: 10.061312675476074 Tokens per Sec: 18646.84962924727
Epoch Step: 100 / 135 Loss: 13.224954605102539 Tokens per Sec: 15447.819091373784
Epoch Step: 105 / 135 Loss: 56.347965240478516 Tokens per Sec: 14770.030510454428
Epoch Step: 110 / 135 Loss: 9.115069389343262 Tokens per Sec: 18639.985361390667
Epoch Step: 115 / 135 Loss: 83.5477523803711 Tokens per Sec: 19223.345439225828
Epoch Step: 120 / 135 Loss: 10.605446815490723 Tokens per Sec: 17518.8214920034
Epoch Step: 125 / 135 Loss: 14.597593307495117 Tokens per Sec: 16891.78876888958
Epoch Step: 130 / 135 Loss: 14.420201301574707 Tokens per Sec: 16885.773284535844
Epoch Step: 135 / 135 Loss: 7.634622573852539 Tokens per Sec: 19689.765386154802
Epoch ended with duration 0:00:13.182154
Train perplexity: 1.950560480736726
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.676229
Validation perplexity: 1.8372104727685645
Epoch 65 / 1000
Epoch Step: 5 / 135 Loss: 72.15946197509766 Tokens per Sec: 18377.213913518153
Epoch Step: 10 / 135 Loss: 13.005727767944336 Tokens per Sec: 17792.69794420053
Epoch Step: 15 / 135 Loss: 6.2096076011657715 Tokens per Sec: 20571.543889091186
Epoch Step: 20 / 135 Loss: 10.272916793823242 Tokens per Sec: 18489.063227518713
Epoch Step: 25 / 135 Loss: 41.78657150268555 Tokens per Sec: 22414.23142510494
Epoch Step: 30 / 135 Loss: 7.107272148132324 Tokens per Sec: 18540.78695120104
Epoch Step: 35 / 135 Loss: 16.5662899017334 Tokens per Sec: 22221.527630541685
Epoch Step: 40 / 135 Loss: 11.331376075744629 Tokens per Sec: 19470.99621785439
Epoch Step: 45 / 135 Loss: 6.456577777862549 Tokens per Sec: 18619.07595110079
Epoch Step: 50 / 135 Loss: 15.013124465942383 Tokens per Sec: 23832.379276470027
Epoch Step: 55 / 135 Loss: 10.670120239257812 Tokens per Sec: 20882.754878634638
Epoch Step: 60 / 135 Loss: 10.075631141662598 Tokens per Sec: 17760.803327075628
Epoch Step: 65 / 135 Loss: 100.27610778808594 Tokens per Sec: 20379.115893532362
Epoch Step: 70 / 135 Loss: 15.99876880645752 Tokens per Sec: 20327.09822349961
Epoch Step: 75 / 135 Loss: 9.090761184692383 Tokens per Sec: 17676.39496010108
Epoch Step: 80 / 135 Loss: 12.283088684082031 Tokens per Sec: 22165.138794455936
Epoch Step: 85 / 135 Loss: 6.931883811950684 Tokens per Sec: 19847.42757869503
Epoch Step: 90 / 135 Loss: 7.400949478149414 Tokens per Sec: 21857.749395380197
Epoch Step: 95 / 135 Loss: 12.263389587402344 Tokens per Sec: 18362.969014969167
Epoch Step: 100 / 135 Loss: 6.954598426818848 Tokens per Sec: 21067.010317220127
Epoch Step: 105 / 135 Loss: 13.65771770477295 Tokens per Sec: 18296.172286771718
Epoch Step: 110 / 135 Loss: 12.760883331298828 Tokens per Sec: 18481.67690959014
Epoch Step: 115 / 135 Loss: 10.907308578491211 Tokens per Sec: 17623.993183257742
Epoch Step: 120 / 135 Loss: 10.365588188171387 Tokens per Sec: 18928.440324230076
Epoch Step: 125 / 135 Loss: 10.996499061584473 Tokens per Sec: 17101.419656542894
Epoch Step: 130 / 135 Loss: 47.72003173828125 Tokens per Sec: 17541.785295514463
Epoch Step: 135 / 135 Loss: 7.189875602722168 Tokens per Sec: 15088.325212336946
Epoch ended with duration 0:00:13.147459
Train perplexity: 1.7047365712076303
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.675055
Validation perplexity: 1.8362590370576957
Model saved checkpoint!
Epoch 66 / 1000
Epoch Step: 5 / 135 Loss: 14.155628204345703 Tokens per Sec: 18141.649062568064
Epoch Step: 10 / 135 Loss: 11.941250801086426 Tokens per Sec: 23113.328053466015
Epoch Step: 15 / 135 Loss: 15.43571662902832 Tokens per Sec: 19852.09997904264
Epoch Step: 20 / 135 Loss: 94.30695343017578 Tokens per Sec: 19916.352319119756
Epoch Step: 25 / 135 Loss: 14.821626663208008 Tokens per Sec: 20917.357405238236
Epoch Step: 30 / 135 Loss: 15.197705268859863 Tokens per Sec: 18524.458096867853
Epoch Step: 35 / 135 Loss: 14.508955955505371 Tokens per Sec: 18207.314074855138
Epoch Step: 40 / 135 Loss: 10.694684982299805 Tokens per Sec: 19805.19638066227
Epoch Step: 45 / 135 Loss: 13.580761909484863 Tokens per Sec: 17414.02326154891
Epoch Step: 50 / 135 Loss: 5.244112968444824 Tokens per Sec: 18774.445207137327
Epoch Step: 55 / 135 Loss: 7.661302089691162 Tokens per Sec: 16821.250226745204
Epoch Step: 60 / 135 Loss: 8.242998123168945 Tokens per Sec: 18963.454135953514
Epoch Step: 65 / 135 Loss: 15.01011848449707 Tokens per Sec: 18082.812954913075
Epoch Step: 70 / 135 Loss: 15.674347877502441 Tokens per Sec: 21769.04866835488
Epoch Step: 75 / 135 Loss: 11.761601448059082 Tokens per Sec: 19237.8749743938
Epoch Step: 80 / 135 Loss: 11.649490356445312 Tokens per Sec: 22288.65028113034
Epoch Step: 85 / 135 Loss: 13.933530807495117 Tokens per Sec: 21506.11190293369
Epoch Step: 90 / 135 Loss: 47.9094352722168 Tokens per Sec: 19772.32415472291
Epoch Step: 95 / 135 Loss: 5.615634918212891 Tokens per Sec: 20086.17676199015
Epoch Step: 100 / 135 Loss: 12.042679786682129 Tokens per Sec: 22172.025437993754
Epoch Step: 105 / 135 Loss: 6.712924003601074 Tokens per Sec: 17069.317607224813
Epoch Step: 110 / 135 Loss: 11.953311920166016 Tokens per Sec: 19346.04073294303
Epoch Step: 115 / 135 Loss: 10.36087417602539 Tokens per Sec: 17353.532630858783
Epoch Step: 120 / 135 Loss: 11.53036117553711 Tokens per Sec: 16089.164666765551
Epoch Step: 125 / 135 Loss: 8.05976390838623 Tokens per Sec: 17406.8489256655
Epoch Step: 130 / 135 Loss: 14.224308967590332 Tokens per Sec: 18384.452736867588
Epoch Step: 135 / 135 Loss: 13.434209823608398 Tokens per Sec: 19061.59320024419
Epoch ended with duration 0:00:13.212415
Train perplexity: 1.6695692012176488
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.672276
Validation perplexity: 1.6056488842736623
Epoch 67 / 1000
Epoch Step: 5 / 135 Loss: 13.94223403930664 Tokens per Sec: 15600.048797760064
Epoch Step: 10 / 135 Loss: 83.65568542480469 Tokens per Sec: 22555.968536807635
Epoch Step: 15 / 135 Loss: 9.398542404174805 Tokens per Sec: 16963.33550436127
Epoch Step: 20 / 135 Loss: 15.927371978759766 Tokens per Sec: 20924.997104016624
Epoch Step: 25 / 135 Loss: 9.059321403503418 Tokens per Sec: 17499.339983966896
Epoch Step: 30 / 135 Loss: 6.587353706359863 Tokens per Sec: 19418.972171497197
Epoch Step: 35 / 135 Loss: 38.004634857177734 Tokens per Sec: 18923.979818134765
Epoch Step: 40 / 135 Loss: 6.4730448722839355 Tokens per Sec: 21357.848693889733
Epoch Step: 45 / 135 Loss: 8.496387481689453 Tokens per Sec: 17432.728246379054
Epoch Step: 50 / 135 Loss: 9.170910835266113 Tokens per Sec: 22275.16095746712
Epoch Step: 55 / 135 Loss: 14.34837818145752 Tokens per Sec: 21553.96964859949
Epoch Step: 60 / 135 Loss: 8.808548927307129 Tokens per Sec: 23385.69367157952
Epoch Step: 65 / 135 Loss: 10.158869743347168 Tokens per Sec: 14693.022739913977
Epoch Step: 70 / 135 Loss: 10.84311580657959 Tokens per Sec: 21843.936133034207
Epoch Step: 75 / 135 Loss: 10.9467191696167 Tokens per Sec: 20096.14295508937
Epoch Step: 80 / 135 Loss: 11.253597259521484 Tokens per Sec: 21360.54758951896
Epoch Step: 85 / 135 Loss: 14.049503326416016 Tokens per Sec: 21541.81723518955
Epoch Step: 90 / 135 Loss: 8.952314376831055 Tokens per Sec: 21823.98573608325
Epoch Step: 95 / 135 Loss: 14.903116226196289 Tokens per Sec: 19381.971738161585
Epoch Step: 100 / 135 Loss: 9.544380187988281 Tokens per Sec: 20598.509313968567
Epoch Step: 105 / 135 Loss: 6.200106620788574 Tokens per Sec: 16388.345953007283
Epoch Step: 110 / 135 Loss: 10.05701732635498 Tokens per Sec: 17637.771797047313
Epoch Step: 115 / 135 Loss: 13.06753158569336 Tokens per Sec: 19501.031667782187
Epoch Step: 120 / 135 Loss: 12.58850383758545 Tokens per Sec: 19662.39744611925
Epoch Step: 125 / 135 Loss: 7.826207160949707 Tokens per Sec: 16349.886049593035
Epoch Step: 130 / 135 Loss: 10.645529747009277 Tokens per Sec: 16542.147342721993
Epoch Step: 135 / 135 Loss: 14.01830768585205 Tokens per Sec: 17616.00819361698
Epoch ended with duration 0:00:13.168236
Train perplexity: 1.580053581195218
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.678874
Validation perplexity: 1.818606661530704
Epoch 68 / 1000
Epoch Step: 5 / 135 Loss: 8.364026069641113 Tokens per Sec: 16401.464431891054
Epoch Step: 10 / 135 Loss: 6.128279209136963 Tokens per Sec: 19501.99624555261
Epoch Step: 15 / 135 Loss: 10.252988815307617 Tokens per Sec: 18852.72979453325
Epoch Step: 20 / 135 Loss: 4.672308444976807 Tokens per Sec: 18908.694496731667
Epoch Step: 25 / 135 Loss: 11.769505500793457 Tokens per Sec: 19812.91312791569
Epoch Step: 30 / 135 Loss: 80.64836883544922 Tokens per Sec: 17631.36261750358
Epoch Step: 35 / 135 Loss: 9.924532890319824 Tokens per Sec: 23977.400890507724
Epoch Step: 40 / 135 Loss: 7.487283229827881 Tokens per Sec: 20725.38510306175
Epoch Step: 45 / 135 Loss: 8.456693649291992 Tokens per Sec: 19547.473964427656
Epoch Step: 50 / 135 Loss: 9.173670768737793 Tokens per Sec: 20197.005715083214
Epoch Step: 55 / 135 Loss: 8.16635513305664 Tokens per Sec: 22182.304098721903
Epoch Step: 60 / 135 Loss: 13.239751815795898 Tokens per Sec: 22378.672943104757
Epoch Step: 65 / 135 Loss: 13.131204605102539 Tokens per Sec: 17747.670074811584
Epoch Step: 70 / 135 Loss: 14.68022346496582 Tokens per Sec: 17368.520772086616
Epoch Step: 75 / 135 Loss: 9.719855308532715 Tokens per Sec: 22449.190674311074
Epoch Step: 80 / 135 Loss: 16.151775360107422 Tokens per Sec: 21011.398247367422
Epoch Step: 85 / 135 Loss: 13.297773361206055 Tokens per Sec: 17451.205628932647
Epoch Step: 90 / 135 Loss: 7.687199592590332 Tokens per Sec: 19294.23571475118
Epoch Step: 95 / 135 Loss: 10.22337532043457 Tokens per Sec: 20412.534615562836
Epoch Step: 100 / 135 Loss: 8.445161819458008 Tokens per Sec: 22364.600419619466
Epoch Step: 105 / 135 Loss: 11.129103660583496 Tokens per Sec: 17686.62540412113
Epoch Step: 110 / 135 Loss: 77.82113647460938 Tokens per Sec: 18822.133421678765
Epoch Step: 115 / 135 Loss: 12.325533866882324 Tokens per Sec: 16990.94703432147
Epoch Step: 120 / 135 Loss: 15.586506843566895 Tokens per Sec: 19758.64476122178
Epoch Step: 125 / 135 Loss: 9.165201187133789 Tokens per Sec: 15568.641569872303
Epoch Step: 130 / 135 Loss: 6.551318168640137 Tokens per Sec: 17219.433317531053
Epoch Step: 135 / 135 Loss: 88.52002716064453 Tokens per Sec: 18535.133686675093
Epoch ended with duration 0:00:13.136219
Train perplexity: 1.7562752934750168
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.685567
Validation perplexity: 2.278394540472282
Epoch 69 / 1000
Epoch Step: 5 / 135 Loss: 10.193671226501465 Tokens per Sec: 17356.77834568751
Epoch Step: 10 / 135 Loss: 6.8966851234436035 Tokens per Sec: 23238.399700752085
Epoch Step: 15 / 135 Loss: 10.912352561950684 Tokens per Sec: 17662.707576559595
Epoch Step: 20 / 135 Loss: 7.26412296295166 Tokens per Sec: 20451.314724336633
Epoch Step: 25 / 135 Loss: 10.275552749633789 Tokens per Sec: 19756.470320034456
Epoch Step: 30 / 135 Loss: 10.88766098022461 Tokens per Sec: 19933.581510296153
Epoch Step: 35 / 135 Loss: 10.601597785949707 Tokens per Sec: 22836.78446094023
Epoch Step: 40 / 135 Loss: 5.019596099853516 Tokens per Sec: 15460.16177640025
Epoch Step: 45 / 135 Loss: 9.51269817352295 Tokens per Sec: 20518.16159137504
Epoch Step: 50 / 135 Loss: 8.353140830993652 Tokens per Sec: 20391.312814758774
Epoch Step: 55 / 135 Loss: 15.729927062988281 Tokens per Sec: 19247.507711260147
Epoch Step: 60 / 135 Loss: 7.642209053039551 Tokens per Sec: 22489.84072181759
Epoch Step: 65 / 135 Loss: 13.414689064025879 Tokens per Sec: 18651.175221417758
Epoch Step: 70 / 135 Loss: 11.340360641479492 Tokens per Sec: 18840.136505645733
Epoch Step: 75 / 135 Loss: 11.788607597351074 Tokens per Sec: 16815.157243689086
Epoch Step: 80 / 135 Loss: 11.807869911193848 Tokens per Sec: 20196.452254559692
Epoch Step: 85 / 135 Loss: 6.392923831939697 Tokens per Sec: 20334.85234877026
Epoch Step: 90 / 135 Loss: 11.623680114746094 Tokens per Sec: 22469.973024653948
Epoch Step: 95 / 135 Loss: 14.049995422363281 Tokens per Sec: 22913.110192435517
Epoch Step: 100 / 135 Loss: 5.817460536956787 Tokens per Sec: 22196.454927102022
Epoch Step: 105 / 135 Loss: 6.917160987854004 Tokens per Sec: 18469.948912369047
Epoch Step: 110 / 135 Loss: 10.577862739562988 Tokens per Sec: 17612.69794867536
Epoch Step: 115 / 135 Loss: 9.236041069030762 Tokens per Sec: 15384.064927706626
Epoch Step: 120 / 135 Loss: 14.37114143371582 Tokens per Sec: 19387.308632643864
Epoch Step: 125 / 135 Loss: 8.253010749816895 Tokens per Sec: 18775.70040313367
Epoch Step: 130 / 135 Loss: 13.208006858825684 Tokens per Sec: 18333.72469547153
Epoch Step: 135 / 135 Loss: 39.79619598388672 Tokens per Sec: 17070.783578944043
Epoch ended with duration 0:00:13.072046
Train perplexity: 1.6247084728776897
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.678412
Validation perplexity: 1.933426744699397
Epoch 70 / 1000
Epoch Step: 5 / 135 Loss: 7.460165500640869 Tokens per Sec: 16505.972247061243
Epoch Step: 10 / 135 Loss: 13.135198593139648 Tokens per Sec: 18056.458060676978
Epoch Step: 15 / 135 Loss: 6.727071285247803 Tokens per Sec: 18651.377125310493
Epoch Step: 20 / 135 Loss: 7.498786449432373 Tokens per Sec: 18752.285907115056
Epoch Step: 25 / 135 Loss: 7.412052631378174 Tokens per Sec: 24695.428114540795
Epoch Step: 30 / 135 Loss: 15.181058883666992 Tokens per Sec: 21709.871822390967
Epoch Step: 35 / 135 Loss: 7.102017402648926 Tokens per Sec: 21792.243363631973
Epoch Step: 40 / 135 Loss: 11.65635871887207 Tokens per Sec: 17336.298668732627
Epoch Step: 45 / 135 Loss: 13.599980354309082 Tokens per Sec: 22354.38399381334
Epoch Step: 50 / 135 Loss: 10.334900856018066 Tokens per Sec: 22477.711037259814
Epoch Step: 55 / 135 Loss: 9.596067428588867 Tokens per Sec: 16951.369188552268
Epoch Step: 60 / 135 Loss: 7.339686393737793 Tokens per Sec: 21868.71965105683
Epoch Step: 65 / 135 Loss: 8.61712646484375 Tokens per Sec: 18761.22261582446
Epoch Step: 70 / 135 Loss: 12.99377727508545 Tokens per Sec: 17267.796891360882
Epoch Step: 75 / 135 Loss: 6.786393642425537 Tokens per Sec: 21092.206665501522
Epoch Step: 80 / 135 Loss: 7.261796474456787 Tokens per Sec: 20909.25163134161
Epoch Step: 85 / 135 Loss: 12.494001388549805 Tokens per Sec: 23759.613232338623
Epoch Step: 90 / 135 Loss: 6.639654159545898 Tokens per Sec: 21542.3343370086
Epoch Step: 95 / 135 Loss: 9.974385261535645 Tokens per Sec: 21324.17253187033
Epoch Step: 100 / 135 Loss: 13.559968948364258 Tokens per Sec: 18186.488276622124
Epoch Step: 105 / 135 Loss: 59.247379302978516 Tokens per Sec: 18695.89369406057
Epoch Step: 110 / 135 Loss: 6.461384296417236 Tokens per Sec: 15156.315623303075
Epoch Step: 115 / 135 Loss: 8.187727928161621 Tokens per Sec: 20068.84472800914
Epoch Step: 120 / 135 Loss: 12.266288757324219 Tokens per Sec: 18898.582349735698
Epoch Step: 125 / 135 Loss: 12.903361320495605 Tokens per Sec: 20287.307698461776
Epoch Step: 130 / 135 Loss: 12.482161521911621 Tokens per Sec: 19691.576934601606
Epoch Step: 135 / 135 Loss: 11.84628677368164 Tokens per Sec: 20267.559697962737
Epoch ended with duration 0:00:12.798997
Train perplexity: 1.6781407213078154
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.592177
Validation perplexity: 2.521628367421827
Model saved checkpoint!
Epoch 71 / 1000
Epoch Step: 5 / 135 Loss: 11.450579643249512 Tokens per Sec: 23770.564444410546
Epoch Step: 10 / 135 Loss: 11.28342056274414 Tokens per Sec: 21439.68834928004
Epoch Step: 15 / 135 Loss: 9.779158592224121 Tokens per Sec: 17867.291256038745
Epoch Step: 20 / 135 Loss: 10.726648330688477 Tokens per Sec: 19680.26764393449
Epoch Step: 25 / 135 Loss: 25.155197143554688 Tokens per Sec: 22644.077105877946
Epoch Step: 30 / 135 Loss: 12.200759887695312 Tokens per Sec: 19579.959060008816
Epoch Step: 35 / 135 Loss: 8.062750816345215 Tokens per Sec: 16851.28326831889
Epoch Step: 40 / 135 Loss: 7.610989093780518 Tokens per Sec: 20561.649281921727
Epoch Step: 45 / 135 Loss: 13.751436233520508 Tokens per Sec: 21116.676209633275
Epoch Step: 50 / 135 Loss: 9.187195777893066 Tokens per Sec: 25601.395485856647
Epoch Step: 55 / 135 Loss: 8.554946899414062 Tokens per Sec: 21782.85608052596
Epoch Step: 60 / 135 Loss: 7.369042873382568 Tokens per Sec: 23519.897133414746
Epoch Step: 65 / 135 Loss: 78.8199691772461 Tokens per Sec: 22898.05200606699
Epoch Step: 70 / 135 Loss: 5.850309371948242 Tokens per Sec: 19247.662072068222
Epoch Step: 75 / 135 Loss: 71.96339416503906 Tokens per Sec: 20732.28097097038
Epoch Step: 80 / 135 Loss: 8.639205932617188 Tokens per Sec: 22495.734268902117
Epoch Step: 85 / 135 Loss: 13.581013679504395 Tokens per Sec: 22995.68655921662
Epoch Step: 90 / 135 Loss: 10.745491981506348 Tokens per Sec: 23533.654478988272
Epoch Step: 95 / 135 Loss: 8.470929145812988 Tokens per Sec: 24274.806376051598
Epoch Step: 100 / 135 Loss: 10.877209663391113 Tokens per Sec: 18301.00523586078
Epoch Step: 105 / 135 Loss: 10.983060836791992 Tokens per Sec: 19564.463878020808
Epoch Step: 110 / 135 Loss: 6.4265570640563965 Tokens per Sec: 18172.85397817169
Epoch Step: 115 / 135 Loss: 14.054056167602539 Tokens per Sec: 19989.598634479396
Epoch Step: 120 / 135 Loss: 10.892729759216309 Tokens per Sec: 18911.000753005046
Epoch Step: 125 / 135 Loss: 13.068604469299316 Tokens per Sec: 20565.407541325367
Epoch Step: 130 / 135 Loss: 7.3193888664245605 Tokens per Sec: 18327.94251387931
Epoch Step: 135 / 135 Loss: 13.286665916442871 Tokens per Sec: 19397.51937942835
Epoch ended with duration 0:00:12.213980
Train perplexity: 1.6750429072306139
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.592680
Validation perplexity: 2.6309789385284836
Epoch 72 / 1000
Epoch Step: 5 / 135 Loss: 77.55420684814453 Tokens per Sec: 19982.736679288122
Epoch Step: 10 / 135 Loss: 12.05134391784668 Tokens per Sec: 19968.667115337987
Epoch Step: 15 / 135 Loss: 7.071897029876709 Tokens per Sec: 22796.44662116914
Epoch Step: 20 / 135 Loss: 9.050527572631836 Tokens per Sec: 18490.51700784003
Epoch Step: 25 / 135 Loss: 8.296597480773926 Tokens per Sec: 22643.448733741603
Epoch Step: 30 / 135 Loss: 8.226217269897461 Tokens per Sec: 21556.064455485135
Epoch Step: 35 / 135 Loss: 13.579571723937988 Tokens per Sec: 21509.052876875663
Epoch Step: 40 / 135 Loss: 9.246912002563477 Tokens per Sec: 24051.74069976438
Epoch Step: 45 / 135 Loss: 8.961177825927734 Tokens per Sec: 23911.528264729157
Epoch Step: 50 / 135 Loss: 18.810998916625977 Tokens per Sec: 22969.614402769308
Epoch Step: 55 / 135 Loss: 104.01437377929688 Tokens per Sec: 19202.512609288155
Epoch Step: 60 / 135 Loss: 9.198105812072754 Tokens per Sec: 22285.594513759253
Epoch Step: 65 / 135 Loss: 10.035599708557129 Tokens per Sec: 18956.33811352397
Epoch Step: 70 / 135 Loss: 7.886847019195557 Tokens per Sec: 21427.748849848213
Epoch Step: 75 / 135 Loss: 12.485148429870605 Tokens per Sec: 22706.433778957256
Epoch Step: 80 / 135 Loss: 12.190361022949219 Tokens per Sec: 20922.15665938043
Epoch Step: 85 / 135 Loss: 12.060897827148438 Tokens per Sec: 19657.25451124557
Epoch Step: 90 / 135 Loss: 13.032876968383789 Tokens per Sec: 24380.95390485953
Epoch Step: 95 / 135 Loss: 15.034262657165527 Tokens per Sec: 24327.475232954566
Epoch Step: 100 / 135 Loss: 6.627405643463135 Tokens per Sec: 19687.225727275396
Epoch Step: 105 / 135 Loss: 5.624237060546875 Tokens per Sec: 17919.020961466616
Epoch Step: 110 / 135 Loss: 12.077943801879883 Tokens per Sec: 20176.988711905655
Epoch Step: 115 / 135 Loss: 9.09875774383545 Tokens per Sec: 20276.517299090872
Epoch Step: 120 / 135 Loss: 8.54053783416748 Tokens per Sec: 16957.912847668475
Epoch Step: 125 / 135 Loss: 12.299182891845703 Tokens per Sec: 17731.77487093038
Epoch Step: 130 / 135 Loss: 10.860793113708496 Tokens per Sec: 19706.72004360145
Epoch Step: 135 / 135 Loss: 7.965108394622803 Tokens per Sec: 21073.808884748178
Epoch ended with duration 0:00:12.163312
Train perplexity: 1.73889023915866
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.592502
Validation perplexity: 2.6970484847581915
Epoch 73 / 1000
Epoch Step: 5 / 135 Loss: 7.095949649810791 Tokens per Sec: 21385.75050881323
Epoch Step: 10 / 135 Loss: 7.251095294952393 Tokens per Sec: 24649.148525190394
Epoch Step: 15 / 135 Loss: 9.188668251037598 Tokens per Sec: 19110.259431169543
Epoch Step: 20 / 135 Loss: 9.972850799560547 Tokens per Sec: 16749.919024593357
Epoch Step: 25 / 135 Loss: 8.768426895141602 Tokens per Sec: 23742.77997757312
Epoch Step: 30 / 135 Loss: 6.774843692779541 Tokens per Sec: 20753.525769154545
Epoch Step: 35 / 135 Loss: 7.687172889709473 Tokens per Sec: 23443.112739138818
Epoch Step: 40 / 135 Loss: 12.435248374938965 Tokens per Sec: 21274.531215765433
Epoch Step: 45 / 135 Loss: 10.920767784118652 Tokens per Sec: 23938.198947004123
Epoch Step: 50 / 135 Loss: 12.898157119750977 Tokens per Sec: 21632.73176421101
Epoch Step: 55 / 135 Loss: 4.969433784484863 Tokens per Sec: 19981.651325318253
Epoch Step: 60 / 135 Loss: 6.572391033172607 Tokens per Sec: 22320.375822771693
Epoch Step: 65 / 135 Loss: 12.549820899963379 Tokens per Sec: 25346.000097278193
Epoch Step: 70 / 135 Loss: 5.711608409881592 Tokens per Sec: 22286.93604859202
Epoch Step: 75 / 135 Loss: 9.282417297363281 Tokens per Sec: 20426.493562117557
Epoch Step: 80 / 135 Loss: 11.071870803833008 Tokens per Sec: 23626.930513917923
Epoch Step: 85 / 135 Loss: 5.89926815032959 Tokens per Sec: 22623.56418643931
Epoch Step: 90 / 135 Loss: 10.965839385986328 Tokens per Sec: 21073.392202771272
Epoch Step: 95 / 135 Loss: 15.494440078735352 Tokens per Sec: 18547.644777614416
Epoch Step: 100 / 135 Loss: 13.276188850402832 Tokens per Sec: 20917.744347841144
Epoch Step: 105 / 135 Loss: 10.287821769714355 Tokens per Sec: 20084.993213598867
Epoch Step: 110 / 135 Loss: 11.863730430603027 Tokens per Sec: 20410.067203060633
Epoch Step: 115 / 135 Loss: 87.60016632080078 Tokens per Sec: 19289.508227937076
Epoch Step: 120 / 135 Loss: 5.652270793914795 Tokens per Sec: 18333.93363798927
Epoch Step: 125 / 135 Loss: 7.670509338378906 Tokens per Sec: 20026.342808865727
Epoch Step: 130 / 135 Loss: 8.277115821838379 Tokens per Sec: 18951.18676849023
Epoch Step: 135 / 135 Loss: 10.613813400268555 Tokens per Sec: 14874.382251406652
Epoch ended with duration 0:00:12.128550
Train perplexity: 1.6177335327925102
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.587225
Validation perplexity: 1.6046867955585025
Epoch 74 / 1000
Epoch Step: 5 / 135 Loss: 8.065073013305664 Tokens per Sec: 18497.676581982254
Epoch Step: 10 / 135 Loss: 6.620129108428955 Tokens per Sec: 20204.51019575366
Epoch Step: 15 / 135 Loss: 6.066545486450195 Tokens per Sec: 23741.243407836053
Epoch Step: 20 / 135 Loss: 12.403701782226562 Tokens per Sec: 16891.872542140376
Epoch Step: 25 / 135 Loss: 7.02264404296875 Tokens per Sec: 19447.184759776872
Epoch Step: 30 / 135 Loss: 13.545754432678223 Tokens per Sec: 22391.820221860766
Epoch Step: 35 / 135 Loss: 6.905893325805664 Tokens per Sec: 19967.8667998087
Epoch Step: 40 / 135 Loss: 5.011094093322754 Tokens per Sec: 22673.191392236185
Epoch Step: 45 / 135 Loss: 41.09541320800781 Tokens per Sec: 22070.7194448436
Epoch Step: 50 / 135 Loss: 6.282094955444336 Tokens per Sec: 20772.145944665343
Epoch Step: 55 / 135 Loss: 9.489517211914062 Tokens per Sec: 24566.321524791172
Epoch Step: 60 / 135 Loss: 11.58095932006836 Tokens per Sec: 22372.40789956162
Epoch Step: 65 / 135 Loss: 13.606732368469238 Tokens per Sec: 19385.895773972366
Epoch Step: 70 / 135 Loss: 10.499632835388184 Tokens per Sec: 21235.452142808983
Epoch Step: 75 / 135 Loss: 73.36092376708984 Tokens per Sec: 22560.185235060908
Epoch Step: 80 / 135 Loss: 5.612860202789307 Tokens per Sec: 21812.198483206936
Epoch Step: 85 / 135 Loss: 7.112570762634277 Tokens per Sec: 22398.493076409784
Epoch Step: 90 / 135 Loss: 8.696240425109863 Tokens per Sec: 20584.056031756256
Epoch Step: 95 / 135 Loss: 26.4713134765625 Tokens per Sec: 19425.71656956601
Epoch Step: 100 / 135 Loss: 7.331230163574219 Tokens per Sec: 24222.73144877524
Epoch Step: 105 / 135 Loss: 11.808152198791504 Tokens per Sec: 17218.508582031594
Epoch Step: 110 / 135 Loss: 14.5943603515625 Tokens per Sec: 21787.235240353228
Epoch Step: 115 / 135 Loss: 10.660479545593262 Tokens per Sec: 20346.373858783027
Epoch Step: 120 / 135 Loss: 11.058900833129883 Tokens per Sec: 18129.418233543805
Epoch Step: 125 / 135 Loss: 10.46658706665039 Tokens per Sec: 18429.09492984048
Epoch Step: 130 / 135 Loss: 8.144547462463379 Tokens per Sec: 17913.142821901383
Epoch Step: 135 / 135 Loss: 9.160158157348633 Tokens per Sec: 20328.29732267513
Epoch ended with duration 0:00:12.312963
Train perplexity: 1.566899604753804
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.588604
Validation perplexity: 1.5395515168908613
Model saved best_on_validation!
Epoch 75 / 1000
Epoch Step: 5 / 135 Loss: 6.118394374847412 Tokens per Sec: 20832.237603325528
Epoch Step: 10 / 135 Loss: 13.572178840637207 Tokens per Sec: 21060.775559131784
Epoch Step: 15 / 135 Loss: 7.895123481750488 Tokens per Sec: 21631.555570605105
Epoch Step: 20 / 135 Loss: 10.126157760620117 Tokens per Sec: 19664.474596687112
Epoch Step: 25 / 135 Loss: 5.4161505699157715 Tokens per Sec: 18997.631673994176
Epoch Step: 30 / 135 Loss: 6.179364204406738 Tokens per Sec: 20477.739652952358
Epoch Step: 35 / 135 Loss: 7.3850016593933105 Tokens per Sec: 24828.03730938265
Epoch Step: 40 / 135 Loss: 11.047182083129883 Tokens per Sec: 19684.6481093133
Epoch Step: 45 / 135 Loss: 11.432853698730469 Tokens per Sec: 24180.17186397698
Epoch Step: 50 / 135 Loss: 7.508358955383301 Tokens per Sec: 23878.948571851113
Epoch Step: 55 / 135 Loss: 8.85666561126709 Tokens per Sec: 20506.56461140335
Epoch Step: 60 / 135 Loss: 7.919464588165283 Tokens per Sec: 19936.974914065868
Epoch Step: 65 / 135 Loss: 8.617378234863281 Tokens per Sec: 19907.23341766565
Epoch Step: 70 / 135 Loss: 7.350529670715332 Tokens per Sec: 18475.729142246586
Epoch Step: 75 / 135 Loss: 9.227746963500977 Tokens per Sec: 21115.937650785345
Epoch Step: 80 / 135 Loss: 8.377613067626953 Tokens per Sec: 22539.22176622139
Epoch Step: 85 / 135 Loss: 12.443235397338867 Tokens per Sec: 20384.807679489284
Epoch Step: 90 / 135 Loss: 54.694915771484375 Tokens per Sec: 25193.21259614646
Epoch Step: 95 / 135 Loss: 49.48134231567383 Tokens per Sec: 23152.337623287753
Epoch Step: 100 / 135 Loss: 82.02666473388672 Tokens per Sec: 22599.438296560074
Epoch Step: 105 / 135 Loss: 8.907079696655273 Tokens per Sec: 18025.80781105063
Epoch Step: 110 / 135 Loss: 10.458108901977539 Tokens per Sec: 17530.29864876771
Epoch Step: 115 / 135 Loss: 6.4453558921813965 Tokens per Sec: 18981.588954584266
Epoch Step: 120 / 135 Loss: 11.40247917175293 Tokens per Sec: 19862.929561676803
Epoch Step: 125 / 135 Loss: 12.3954496383667 Tokens per Sec: 20071.865623357913
Epoch Step: 130 / 135 Loss: 9.360297203063965 Tokens per Sec: 18380.289879036343
Epoch Step: 135 / 135 Loss: 99.23025512695312 Tokens per Sec: 20011.78974120885
Epoch ended with duration 0:00:12.265202
Train perplexity: 1.6699553943526533
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.597055
Validation perplexity: 1.8723120421005472
Model saved checkpoint!
Epoch 76 / 1000
Epoch Step: 5 / 135 Loss: 12.117496490478516 Tokens per Sec: 16837.610895185673
Epoch Step: 10 / 135 Loss: 9.214658737182617 Tokens per Sec: 25350.73333110833
Epoch Step: 15 / 135 Loss: 10.740339279174805 Tokens per Sec: 22876.5597165655
Epoch Step: 20 / 135 Loss: 9.152497291564941 Tokens per Sec: 20774.46618616946
Epoch Step: 25 / 135 Loss: 13.299007415771484 Tokens per Sec: 23373.262974924262
Epoch Step: 30 / 135 Loss: 10.744304656982422 Tokens per Sec: 22255.72759945365
Epoch Step: 35 / 135 Loss: 12.48045539855957 Tokens per Sec: 24318.88619777302
Epoch Step: 40 / 135 Loss: 4.965774059295654 Tokens per Sec: 19716.592485788988
Epoch Step: 45 / 135 Loss: 7.520626544952393 Tokens per Sec: 23045.110437912772
Epoch Step: 50 / 135 Loss: 13.318049430847168 Tokens per Sec: 21782.584541406544
Epoch Step: 55 / 135 Loss: 11.884754180908203 Tokens per Sec: 21399.51020408163
Epoch Step: 60 / 135 Loss: 8.738018035888672 Tokens per Sec: 20028.47917398363
Epoch Step: 65 / 135 Loss: 8.806467056274414 Tokens per Sec: 20720.897737370095
Epoch Step: 70 / 135 Loss: 6.7260613441467285 Tokens per Sec: 23048.893834427665
Epoch Step: 75 / 135 Loss: 13.641328811645508 Tokens per Sec: 20726.80696541098
Epoch Step: 80 / 135 Loss: 8.68982982635498 Tokens per Sec: 18579.09837755899
Epoch Step: 85 / 135 Loss: 90.70709991455078 Tokens per Sec: 23374.85322193739
Epoch Step: 90 / 135 Loss: 15.937671661376953 Tokens per Sec: 20421.41818359037
Epoch Step: 95 / 135 Loss: 10.830716133117676 Tokens per Sec: 20899.47680242127
Epoch Step: 100 / 135 Loss: 7.000899791717529 Tokens per Sec: 20972.68354843738
Epoch Step: 105 / 135 Loss: 10.0928373336792 Tokens per Sec: 17716.388642593658
Epoch Step: 110 / 135 Loss: 15.754414558410645 Tokens per Sec: 20495.596887904405
Epoch Step: 115 / 135 Loss: 9.071154594421387 Tokens per Sec: 18800.900521470467
Epoch Step: 120 / 135 Loss: 69.01046752929688 Tokens per Sec: 18958.971135092663
Epoch Step: 125 / 135 Loss: 6.487323760986328 Tokens per Sec: 17375.834016353525
Epoch Step: 130 / 135 Loss: 10.285400390625 Tokens per Sec: 20309.76500638924
Epoch Step: 135 / 135 Loss: 11.577478408813477 Tokens per Sec: 18709.4311086256
Epoch ended with duration 0:00:12.249780
Train perplexity: 1.6625263917864506
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) ;[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.596659
Validation perplexity: 2.045777017448078
Epoch 77 / 1000
Epoch Step: 5 / 135 Loss: 25.261951446533203 Tokens per Sec: 21132.614189926237
Epoch Step: 10 / 135 Loss: 101.20233917236328 Tokens per Sec: 22041.47088255657
Epoch Step: 15 / 135 Loss: 11.924882888793945 Tokens per Sec: 23656.67775069656
Epoch Step: 20 / 135 Loss: 11.75791072845459 Tokens per Sec: 21287.64451177096
Epoch Step: 25 / 135 Loss: 7.297807216644287 Tokens per Sec: 23013.960142167325
Epoch Step: 30 / 135 Loss: 6.986935615539551 Tokens per Sec: 20127.60619114853
Epoch Step: 35 / 135 Loss: 10.74749755859375 Tokens per Sec: 20924.447653526986
Epoch Step: 40 / 135 Loss: 7.401148319244385 Tokens per Sec: 21279.245259176125
Epoch Step: 45 / 135 Loss: 12.906317710876465 Tokens per Sec: 21398.32292056238
Epoch Step: 50 / 135 Loss: 4.866512298583984 Tokens per Sec: 23546.88392321573
Epoch Step: 55 / 135 Loss: 10.277522087097168 Tokens per Sec: 21653.26637000225
Epoch Step: 60 / 135 Loss: 10.218348503112793 Tokens per Sec: 20125.43022328281
Epoch Step: 65 / 135 Loss: 15.456446647644043 Tokens per Sec: 21275.97075881091
Epoch Step: 70 / 135 Loss: 6.528203964233398 Tokens per Sec: 21445.7593464218
Epoch Step: 75 / 135 Loss: 8.221048355102539 Tokens per Sec: 22179.16114909658
Epoch Step: 80 / 135 Loss: 6.62273645401001 Tokens per Sec: 25414.977688454932
Epoch Step: 85 / 135 Loss: 12.013357162475586 Tokens per Sec: 15921.899364614244
Epoch Step: 90 / 135 Loss: 6.875061511993408 Tokens per Sec: 23282.868080034015
Epoch Step: 95 / 135 Loss: 8.821466445922852 Tokens per Sec: 20415.482398919958
Epoch Step: 100 / 135 Loss: 26.861038208007812 Tokens per Sec: 17439.649754994767
Epoch Step: 105 / 135 Loss: 9.969290733337402 Tokens per Sec: 20066.961300160423
Epoch Step: 110 / 135 Loss: 12.22012710571289 Tokens per Sec: 18427.33479937127
Epoch Step: 115 / 135 Loss: 11.953058242797852 Tokens per Sec: 19149.783467484645
Epoch Step: 120 / 135 Loss: 12.283890724182129 Tokens per Sec: 19941.81259308045
Epoch Step: 125 / 135 Loss: 10.595222473144531 Tokens per Sec: 19113.280290512357
Epoch Step: 130 / 135 Loss: 49.16636657714844 Tokens per Sec: 18521.25948473928
Epoch Step: 135 / 135 Loss: 9.76624584197998 Tokens per Sec: 16313.429184134005
Epoch ended with duration 0:00:12.308428
Train perplexity: 1.568923779031494
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.595335
Validation perplexity: 2.062262055619653
Epoch 78 / 1000
Epoch Step: 5 / 135 Loss: 6.798214912414551 Tokens per Sec: 20936.786105740735
Epoch Step: 10 / 135 Loss: 9.950922012329102 Tokens per Sec: 24133.04439679523
Epoch Step: 15 / 135 Loss: 14.3939208984375 Tokens per Sec: 22639.5042231381
Epoch Step: 20 / 135 Loss: 8.110536575317383 Tokens per Sec: 21039.80433423805
Epoch Step: 25 / 135 Loss: 12.247674942016602 Tokens per Sec: 22032.083594723445
Epoch Step: 30 / 135 Loss: 6.946609020233154 Tokens per Sec: 18126.05530866511
Epoch Step: 35 / 135 Loss: 10.464415550231934 Tokens per Sec: 17433.3350425199
Epoch Step: 40 / 135 Loss: 12.590011596679688 Tokens per Sec: 20432.429195651246
Epoch Step: 45 / 135 Loss: 8.585214614868164 Tokens per Sec: 24393.80648609817
Epoch Step: 50 / 135 Loss: 7.925347805023193 Tokens per Sec: 21277.508586709122
Epoch Step: 55 / 135 Loss: 42.09514617919922 Tokens per Sec: 20793.345263678188
Epoch Step: 60 / 135 Loss: 10.687841415405273 Tokens per Sec: 22271.370899185375
Epoch Step: 65 / 135 Loss: 12.757407188415527 Tokens per Sec: 19297.592931733765
Epoch Step: 70 / 135 Loss: 7.994548797607422 Tokens per Sec: 20044.755105263594
Epoch Step: 75 / 135 Loss: 11.25515365600586 Tokens per Sec: 23126.75153864957
Epoch Step: 80 / 135 Loss: 7.694322109222412 Tokens per Sec: 23862.033730961193
Epoch Step: 85 / 135 Loss: 7.0382890701293945 Tokens per Sec: 23148.99766787169
Epoch Step: 90 / 135 Loss: 9.979621887207031 Tokens per Sec: 21219.29091190882
Epoch Step: 95 / 135 Loss: 8.367586135864258 Tokens per Sec: 21086.722572058614
Epoch Step: 100 / 135 Loss: 7.093774795532227 Tokens per Sec: 21856.920804842688
Epoch Step: 105 / 135 Loss: 9.679237365722656 Tokens per Sec: 18771.537626754565
Epoch Step: 110 / 135 Loss: 10.83732795715332 Tokens per Sec: 18471.64843813956
Epoch Step: 115 / 135 Loss: 7.16221809387207 Tokens per Sec: 17518.885022920505
Epoch Step: 120 / 135 Loss: 9.820631980895996 Tokens per Sec: 18547.85795773872
Epoch Step: 125 / 135 Loss: 6.5052056312561035 Tokens per Sec: 18643.430864130594
Epoch Step: 130 / 135 Loss: 9.883910179138184 Tokens per Sec: 20051.371247092095
Epoch Step: 135 / 135 Loss: 8.325579643249512 Tokens per Sec: 20367.682994788458
Epoch ended with duration 0:00:12.269656
Train perplexity: 1.6539484507463529
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.593811
Validation perplexity: 1.7632526173908691
Epoch 79 / 1000
Epoch Step: 5 / 135 Loss: 12.298513412475586 Tokens per Sec: 21201.980557581202
Epoch Step: 10 / 135 Loss: 15.18550968170166 Tokens per Sec: 20686.66985662499
Epoch Step: 15 / 135 Loss: 8.362918853759766 Tokens per Sec: 23856.001660267717
Epoch Step: 20 / 135 Loss: 6.578564643859863 Tokens per Sec: 22232.729394753256
Epoch Step: 25 / 135 Loss: 4.506192684173584 Tokens per Sec: 17246.735430342058
Epoch Step: 30 / 135 Loss: 9.628515243530273 Tokens per Sec: 22156.971494194207
Epoch Step: 35 / 135 Loss: 7.016254901885986 Tokens per Sec: 23867.751385228665
Epoch Step: 40 / 135 Loss: 13.78614330291748 Tokens per Sec: 21750.300938586937
Epoch Step: 45 / 135 Loss: 4.786839008331299 Tokens per Sec: 20234.155388087678
Epoch Step: 50 / 135 Loss: 7.440665245056152 Tokens per Sec: 19531.238159907054
Epoch Step: 55 / 135 Loss: 11.264851570129395 Tokens per Sec: 18565.617260378785
Epoch Step: 60 / 135 Loss: 12.588804244995117 Tokens per Sec: 18416.754012388275
Epoch Step: 65 / 135 Loss: 8.572867393493652 Tokens per Sec: 24622.910832756872
Epoch Step: 70 / 135 Loss: 10.860624313354492 Tokens per Sec: 20637.718568485652
Epoch Step: 75 / 135 Loss: 33.92634201049805 Tokens per Sec: 22268.310717380158
Epoch Step: 80 / 135 Loss: 11.302685737609863 Tokens per Sec: 24314.20207769331
Epoch Step: 85 / 135 Loss: 10.158370018005371 Tokens per Sec: 21704.103165382046
Epoch Step: 90 / 135 Loss: 12.255884170532227 Tokens per Sec: 23379.583276712317
Epoch Step: 95 / 135 Loss: 9.301422119140625 Tokens per Sec: 23188.328674905188
Epoch Step: 100 / 135 Loss: 8.927184104919434 Tokens per Sec: 20563.122915397555
Epoch Step: 105 / 135 Loss: 49.07509994506836 Tokens per Sec: 18563.444997106228
Epoch Step: 110 / 135 Loss: 9.724597930908203 Tokens per Sec: 19456.02056072235
Epoch Step: 115 / 135 Loss: 12.544081687927246 Tokens per Sec: 20952.654279284605
Epoch Step: 120 / 135 Loss: 6.716274738311768 Tokens per Sec: 17575.126351927633
Epoch Step: 125 / 135 Loss: 7.675826072692871 Tokens per Sec: 17808.59208698522
Epoch Step: 130 / 135 Loss: 10.121970176696777 Tokens per Sec: 20587.8686794361
Epoch Step: 135 / 135 Loss: 8.261696815490723 Tokens per Sec: 19421.295519240215
Epoch ended with duration 0:00:12.193377
Train perplexity: 1.684279433678681
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.593233
Validation perplexity: 1.8018549114042521
Epoch 80 / 1000
Epoch Step: 5 / 135 Loss: 11.000191688537598 Tokens per Sec: 20053.96365990655
Epoch Step: 10 / 135 Loss: 10.759052276611328 Tokens per Sec: 17362.124313812485
Epoch Step: 15 / 135 Loss: 7.45984411239624 Tokens per Sec: 20297.626492636587
Epoch Step: 20 / 135 Loss: 7.518997669219971 Tokens per Sec: 23199.663898545896
Epoch Step: 25 / 135 Loss: 6.011770248413086 Tokens per Sec: 24108.22752458348
Epoch Step: 30 / 135 Loss: 10.683932304382324 Tokens per Sec: 20043.374120372355
Epoch Step: 35 / 135 Loss: 8.483854293823242 Tokens per Sec: 17841.144014567686
Epoch Step: 40 / 135 Loss: 5.8072285652160645 Tokens per Sec: 23338.601086979546
Epoch Step: 45 / 135 Loss: 7.17471981048584 Tokens per Sec: 20762.306728284893
Epoch Step: 50 / 135 Loss: 12.854206085205078 Tokens per Sec: 22929.362172445813
Epoch Step: 55 / 135 Loss: 8.834479331970215 Tokens per Sec: 21350.15602065298
Epoch Step: 60 / 135 Loss: 8.752595901489258 Tokens per Sec: 22330.41709994223
Epoch Step: 65 / 135 Loss: 4.14747953414917 Tokens per Sec: 21238.073008990697
Epoch Step: 70 / 135 Loss: 83.74957275390625 Tokens per Sec: 23597.861232611194
Epoch Step: 75 / 135 Loss: 8.73434829711914 Tokens per Sec: 21992.54490576928
Epoch Step: 80 / 135 Loss: 78.3503189086914 Tokens per Sec: 22162.817109907188
Epoch Step: 85 / 135 Loss: 13.22864818572998 Tokens per Sec: 22493.358229453865
Epoch Step: 90 / 135 Loss: 10.695014953613281 Tokens per Sec: 19924.083346291703
Epoch Step: 95 / 135 Loss: 8.496516227722168 Tokens per Sec: 23295.369729431135
Epoch Step: 100 / 135 Loss: 13.340176582336426 Tokens per Sec: 21408.481638961293
Epoch Step: 105 / 135 Loss: 7.362085342407227 Tokens per Sec: 17066.593978656118
Epoch Step: 110 / 135 Loss: 9.717719078063965 Tokens per Sec: 18298.590843419875
Epoch Step: 115 / 135 Loss: 8.182774543762207 Tokens per Sec: 19610.988254462798
Epoch Step: 120 / 135 Loss: 7.082388401031494 Tokens per Sec: 19500.130793628032
Epoch Step: 125 / 135 Loss: 9.012310981750488 Tokens per Sec: 20100.156541381213
Epoch Step: 130 / 135 Loss: 12.62887954711914 Tokens per Sec: 17276.112476473892
Epoch Step: 135 / 135 Loss: 9.376433372497559 Tokens per Sec: 20182.855319371978
Epoch ended with duration 0:00:12.267965
Train perplexity: 1.6873772759870722
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.593138
Validation perplexity: 1.702134014050157
Model saved checkpoint!
Epoch 81 / 1000
Epoch Step: 5 / 135 Loss: 5.880364418029785 Tokens per Sec: 20225.012856466747
Epoch Step: 10 / 135 Loss: 7.259807586669922 Tokens per Sec: 19534.287395858548
Epoch Step: 15 / 135 Loss: 65.51887512207031 Tokens per Sec: 24121.155373451387
Epoch Step: 20 / 135 Loss: 44.574092864990234 Tokens per Sec: 19564.217754216566
Epoch Step: 25 / 135 Loss: 11.578851699829102 Tokens per Sec: 20780.469786048525
Epoch Step: 30 / 135 Loss: 34.71413040161133 Tokens per Sec: 18372.578195345075
Epoch Step: 35 / 135 Loss: 11.685213088989258 Tokens per Sec: 23795.47931659651
Epoch Step: 40 / 135 Loss: 8.441295623779297 Tokens per Sec: 18769.650418628225
Epoch Step: 45 / 135 Loss: 7.530757904052734 Tokens per Sec: 21314.328062764635
Epoch Step: 50 / 135 Loss: 12.901147842407227 Tokens per Sec: 22714.8812047842
Epoch Step: 55 / 135 Loss: 5.519367694854736 Tokens per Sec: 21098.421063952013
Epoch Step: 60 / 135 Loss: 10.10255241394043 Tokens per Sec: 20022.81545386779
Epoch Step: 65 / 135 Loss: 10.310442924499512 Tokens per Sec: 21895.52281757211
Epoch Step: 70 / 135 Loss: 33.90657424926758 Tokens per Sec: 24321.67563385872
Epoch Step: 75 / 135 Loss: 7.6921186447143555 Tokens per Sec: 23054.933141882797
Epoch Step: 80 / 135 Loss: 10.456053733825684 Tokens per Sec: 19105.6292972644
Epoch Step: 85 / 135 Loss: 12.263903617858887 Tokens per Sec: 22378.140395321025
Epoch Step: 90 / 135 Loss: 9.865302085876465 Tokens per Sec: 23184.404298149366
Epoch Step: 95 / 135 Loss: 28.447214126586914 Tokens per Sec: 20472.658776553508
Epoch Step: 100 / 135 Loss: 28.79220199584961 Tokens per Sec: 22994.17361488938
Epoch Step: 105 / 135 Loss: 12.590282440185547 Tokens per Sec: 19696.212373844886
Epoch Step: 110 / 135 Loss: 12.061131477355957 Tokens per Sec: 19099.550844601883
Epoch Step: 115 / 135 Loss: 9.842893600463867 Tokens per Sec: 18604.38946734051
Epoch Step: 120 / 135 Loss: 6.536644458770752 Tokens per Sec: 18043.457800371518
Epoch Step: 125 / 135 Loss: 9.430776596069336 Tokens per Sec: 20861.35069780166
Epoch Step: 130 / 135 Loss: 9.022915840148926 Tokens per Sec: 19726.73153257452
Epoch Step: 135 / 135 Loss: 62.76832580566406 Tokens per Sec: 16500.957317418182
Epoch ended with duration 0:00:12.275385
Train perplexity: 1.7244026478644163
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.598701
Validation perplexity: 2.0227864006932252
Epoch 82 / 1000
Epoch Step: 5 / 135 Loss: 9.120150566101074 Tokens per Sec: 22759.650570227946
Epoch Step: 10 / 135 Loss: 8.43746280670166 Tokens per Sec: 22103.388233478647
Epoch Step: 15 / 135 Loss: 12.527268409729004 Tokens per Sec: 19747.433324495283
Epoch Step: 20 / 135 Loss: 7.2333574295043945 Tokens per Sec: 21020.556534820218
Epoch Step: 25 / 135 Loss: 12.53924560546875 Tokens per Sec: 19982.82824039459
Epoch Step: 30 / 135 Loss: 21.1564998626709 Tokens per Sec: 20755.88176954249
Epoch Step: 35 / 135 Loss: 7.843038558959961 Tokens per Sec: 22755.82230815159
Epoch Step: 40 / 135 Loss: 8.580439567565918 Tokens per Sec: 21958.4010315145
Epoch Step: 45 / 135 Loss: 11.333319664001465 Tokens per Sec: 18076.011767000302
Epoch Step: 50 / 135 Loss: 80.54156494140625 Tokens per Sec: 22512.052706671337
Epoch Step: 55 / 135 Loss: 24.667593002319336 Tokens per Sec: 26443.63872539808
Epoch Step: 60 / 135 Loss: 6.137872695922852 Tokens per Sec: 21648.61953518046
Epoch Step: 65 / 135 Loss: 9.171804428100586 Tokens per Sec: 20478.276638507275
Epoch Step: 70 / 135 Loss: 5.212298393249512 Tokens per Sec: 17088.135865284665
Epoch Step: 75 / 135 Loss: 59.43923568725586 Tokens per Sec: 23823.783735367117
Epoch Step: 80 / 135 Loss: 11.574209213256836 Tokens per Sec: 22400.76762187359
Epoch Step: 85 / 135 Loss: 7.51305627822876 Tokens per Sec: 18353.413833857285
Epoch Step: 90 / 135 Loss: 7.480401039123535 Tokens per Sec: 21272.44231009826
Epoch Step: 95 / 135 Loss: 10.686333656311035 Tokens per Sec: 24073.016909444937
Epoch Step: 100 / 135 Loss: 8.831363677978516 Tokens per Sec: 19744.64376927957
Epoch Step: 105 / 135 Loss: 9.2229642868042 Tokens per Sec: 19322.56857484001
Epoch Step: 110 / 135 Loss: 10.441564559936523 Tokens per Sec: 18550.241536664045
Epoch Step: 115 / 135 Loss: 8.095545768737793 Tokens per Sec: 18614.03352442746
Epoch Step: 120 / 135 Loss: 10.439215660095215 Tokens per Sec: 19837.607845970924
Epoch Step: 125 / 135 Loss: 17.376344680786133 Tokens per Sec: 18066.59486442212
Epoch Step: 130 / 135 Loss: 10.890108108520508 Tokens per Sec: 19063.24569323416
Epoch Step: 135 / 135 Loss: 6.696979522705078 Tokens per Sec: 21124.195474602013
Epoch ended with duration 0:00:12.247019
Train perplexity: 1.620828647436509
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.588207
Validation perplexity: 1.529463927660536
Model saved best_on_validation!
Epoch 83 / 1000
Epoch Step: 5 / 135 Loss: 12.239554405212402 Tokens per Sec: 21346.04748242996
Epoch Step: 10 / 135 Loss: 10.326828956604004 Tokens per Sec: 21386.263609294067
Epoch Step: 15 / 135 Loss: 8.549347877502441 Tokens per Sec: 19262.030632297545
Epoch Step: 20 / 135 Loss: 8.668218612670898 Tokens per Sec: 23404.01934009477
Epoch Step: 25 / 135 Loss: 6.73087739944458 Tokens per Sec: 21173.311330061882
Epoch Step: 30 / 135 Loss: 5.6983256340026855 Tokens per Sec: 22897.07173581917
Epoch Step: 35 / 135 Loss: 11.75964641571045 Tokens per Sec: 21551.88273271422
Epoch Step: 40 / 135 Loss: 9.920373916625977 Tokens per Sec: 21748.078413779425
Epoch Step: 45 / 135 Loss: 10.631190299987793 Tokens per Sec: 23184.67373601198
Epoch Step: 50 / 135 Loss: 10.744867324829102 Tokens per Sec: 24877.056959741087
Epoch Step: 55 / 135 Loss: 11.4281587600708 Tokens per Sec: 19112.53052589548
Epoch Step: 60 / 135 Loss: 9.013673782348633 Tokens per Sec: 21549.46124383939
Epoch Step: 65 / 135 Loss: 10.03108024597168 Tokens per Sec: 23420.635797640738
Epoch Step: 70 / 135 Loss: 6.115682601928711 Tokens per Sec: 20811.553610423933
Epoch Step: 75 / 135 Loss: 13.049283027648926 Tokens per Sec: 22526.057749039453
Epoch Step: 80 / 135 Loss: 7.69361686706543 Tokens per Sec: 20777.727731732877
Epoch Step: 85 / 135 Loss: 7.602062702178955 Tokens per Sec: 20094.358335282064
Epoch Step: 90 / 135 Loss: 10.981158256530762 Tokens per Sec: 21784.89872525088
Epoch Step: 95 / 135 Loss: 12.425005912780762 Tokens per Sec: 21519.595670367802
Epoch Step: 100 / 135 Loss: 100.7780532836914 Tokens per Sec: 19137.04037661768
Epoch Step: 105 / 135 Loss: 44.5716667175293 Tokens per Sec: 17375.302756295154
Epoch Step: 110 / 135 Loss: 11.636117935180664 Tokens per Sec: 18068.38179816419
Epoch Step: 115 / 135 Loss: 6.180588245391846 Tokens per Sec: 19397.085451344923
Epoch Step: 120 / 135 Loss: 10.464303016662598 Tokens per Sec: 18933.47955774242
Epoch Step: 125 / 135 Loss: 12.561519622802734 Tokens per Sec: 19100.310628989762
Epoch Step: 130 / 135 Loss: 12.550244331359863 Tokens per Sec: 20664.638203301143
Epoch Step: 135 / 135 Loss: 11.42924690246582 Tokens per Sec: 20323.598954140693
Epoch ended with duration 0:00:12.184234
Train perplexity: 1.5973832292964123
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.591774
Validation perplexity: 1.8030075876629255
Epoch 84 / 1000
Epoch Step: 5 / 135 Loss: 12.630897521972656 Tokens per Sec: 19418.974768636628
Epoch Step: 10 / 135 Loss: 7.23912239074707 Tokens per Sec: 18176.552318685714
Epoch Step: 15 / 135 Loss: 7.8694748878479 Tokens per Sec: 20238.345148086722
Epoch Step: 20 / 135 Loss: 5.7089433670043945 Tokens per Sec: 22793.933641485935
Epoch Step: 25 / 135 Loss: 6.869935035705566 Tokens per Sec: 21106.912971623544
Epoch Step: 30 / 135 Loss: 9.87887191772461 Tokens per Sec: 22537.099181361875
Epoch Step: 35 / 135 Loss: 6.7666473388671875 Tokens per Sec: 22902.084092282705
Epoch Step: 40 / 135 Loss: 8.92641544342041 Tokens per Sec: 19164.197627370566
Epoch Step: 45 / 135 Loss: 7.341574192047119 Tokens per Sec: 23619.66210394241
Epoch Step: 50 / 135 Loss: 7.69846248626709 Tokens per Sec: 24169.596391561434
Epoch Step: 55 / 135 Loss: 12.508306503295898 Tokens per Sec: 21262.92090786242
Epoch Step: 60 / 135 Loss: 7.314854621887207 Tokens per Sec: 22762.031518873562
Epoch Step: 65 / 135 Loss: 9.801502227783203 Tokens per Sec: 23823.645329289393
Epoch Step: 70 / 135 Loss: 8.246397972106934 Tokens per Sec: 20658.25620401898
Epoch Step: 75 / 135 Loss: 7.220288276672363 Tokens per Sec: 23069.495571985954
Epoch Step: 80 / 135 Loss: 10.615220069885254 Tokens per Sec: 21596.917722323953
Epoch Step: 85 / 135 Loss: 13.217950820922852 Tokens per Sec: 20722.98068101894
Epoch Step: 90 / 135 Loss: 6.010141849517822 Tokens per Sec: 20049.082295835145
Epoch Step: 95 / 135 Loss: 51.443992614746094 Tokens per Sec: 19848.15115226692
Epoch Step: 100 / 135 Loss: 5.1261467933654785 Tokens per Sec: 21020.596851071798
Epoch Step: 105 / 135 Loss: 5.588771343231201 Tokens per Sec: 17188.322605130867
Epoch Step: 110 / 135 Loss: 11.739645004272461 Tokens per Sec: 20025.882039158634
Epoch Step: 115 / 135 Loss: 53.07692337036133 Tokens per Sec: 20055.68394018565
Epoch Step: 120 / 135 Loss: 10.181259155273438 Tokens per Sec: 19468.18482902423
Epoch Step: 125 / 135 Loss: 9.07414436340332 Tokens per Sec: 19484.68357482487
Epoch Step: 130 / 135 Loss: 11.089681625366211 Tokens per Sec: 17845.915107642424
Epoch Step: 135 / 135 Loss: 7.029510498046875 Tokens per Sec: 18966.440858576192
Epoch ended with duration 0:00:12.251275
Train perplexity: 1.6451564604847257
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.588937
Validation perplexity: 1.5784408036037734
Epoch 85 / 1000
Epoch Step: 5 / 135 Loss: 7.259544849395752 Tokens per Sec: 22099.265471438423
Epoch Step: 10 / 135 Loss: 5.552265167236328 Tokens per Sec: 20762.40946336944
Epoch Step: 15 / 135 Loss: 33.82121658325195 Tokens per Sec: 19816.23912347154
Epoch Step: 20 / 135 Loss: 9.297733306884766 Tokens per Sec: 20861.98667282799
Epoch Step: 25 / 135 Loss: 9.322747230529785 Tokens per Sec: 22647.997032720377
Epoch Step: 30 / 135 Loss: 7.016651153564453 Tokens per Sec: 24427.337431359483
Epoch Step: 35 / 135 Loss: 5.1789751052856445 Tokens per Sec: 23229.25998119292
Epoch Step: 40 / 135 Loss: 4.9878716468811035 Tokens per Sec: 24185.878615235095
Epoch Step: 45 / 135 Loss: 5.566941738128662 Tokens per Sec: 22576.43697338501
Epoch Step: 50 / 135 Loss: 4.7374444007873535 Tokens per Sec: 23757.229331602135
Epoch Step: 55 / 135 Loss: 5.889119625091553 Tokens per Sec: 18661.466474556775
Epoch Step: 60 / 135 Loss: 13.124876976013184 Tokens per Sec: 19612.566794214417
Epoch Step: 65 / 135 Loss: 11.461195945739746 Tokens per Sec: 21307.516642280065
Epoch Step: 70 / 135 Loss: 11.280854225158691 Tokens per Sec: 19188.80260485309
Epoch Step: 75 / 135 Loss: 53.57612991333008 Tokens per Sec: 20301.42894799589
Epoch Step: 80 / 135 Loss: 6.944286346435547 Tokens per Sec: 23185.739171964888
Epoch Step: 85 / 135 Loss: 39.20261001586914 Tokens per Sec: 19907.454368707207
Epoch Step: 90 / 135 Loss: 7.692249298095703 Tokens per Sec: 19041.757723544422
Epoch Step: 95 / 135 Loss: 10.687030792236328 Tokens per Sec: 20291.27634038586
Epoch Step: 100 / 135 Loss: 12.873845100402832 Tokens per Sec: 23238.443348664696
Epoch Step: 105 / 135 Loss: 6.245049476623535 Tokens per Sec: 19024.130085503915
Epoch Step: 110 / 135 Loss: 7.3039937019348145 Tokens per Sec: 17600.100102632467
Epoch Step: 115 / 135 Loss: 8.601960182189941 Tokens per Sec: 19514.846756346076
Epoch Step: 120 / 135 Loss: 7.0256524085998535 Tokens per Sec: 19616.313914403392
Epoch Step: 125 / 135 Loss: 6.309967994689941 Tokens per Sec: 17706.009741569906
Epoch Step: 130 / 135 Loss: 10.93375015258789 Tokens per Sec: 18908.813062789166
Epoch Step: 135 / 135 Loss: 9.453057289123535 Tokens per Sec: 18079.989914550002
Epoch ended with duration 0:00:12.302551
Train perplexity: 1.5076597134054661
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.592297
Validation perplexity: 1.8287696053473186
Model saved checkpoint!
Epoch 86 / 1000
Epoch Step: 5 / 135 Loss: 11.243687629699707 Tokens per Sec: 21677.801041399412
Epoch Step: 10 / 135 Loss: 9.436697006225586 Tokens per Sec: 25499.98682706631
Epoch Step: 15 / 135 Loss: 12.710874557495117 Tokens per Sec: 23729.88659358807
Epoch Step: 20 / 135 Loss: 6.081754207611084 Tokens per Sec: 17638.061489065494
Epoch Step: 25 / 135 Loss: 6.683305263519287 Tokens per Sec: 23148.92565512052
Epoch Step: 30 / 135 Loss: 6.430404186248779 Tokens per Sec: 22224.67969571937
Epoch Step: 35 / 135 Loss: 8.419319152832031 Tokens per Sec: 18637.60721010218
Epoch Step: 40 / 135 Loss: 6.816874980926514 Tokens per Sec: 21401.001656957986
Epoch Step: 45 / 135 Loss: 11.553506851196289 Tokens per Sec: 24299.35178604904
Epoch Step: 50 / 135 Loss: 10.022568702697754 Tokens per Sec: 22665.21962430311
Epoch Step: 55 / 135 Loss: 9.137435913085938 Tokens per Sec: 24902.734540794394
Epoch Step: 60 / 135 Loss: 10.445674896240234 Tokens per Sec: 21815.50385956264
Epoch Step: 65 / 135 Loss: 5.705050945281982 Tokens per Sec: 22202.74758266474
Epoch Step: 70 / 135 Loss: 12.753274917602539 Tokens per Sec: 21357.275833323438
Epoch Step: 75 / 135 Loss: 6.435337543487549 Tokens per Sec: 18838.119722982017
Epoch Step: 80 / 135 Loss: 10.299836158752441 Tokens per Sec: 22263.04382410382
Epoch Step: 85 / 135 Loss: 8.971988677978516 Tokens per Sec: 18260.506293636343
Epoch Step: 90 / 135 Loss: 6.414542198181152 Tokens per Sec: 19978.79553350379
Epoch Step: 95 / 135 Loss: 5.898160457611084 Tokens per Sec: 16392.13038752672
Epoch Step: 100 / 135 Loss: 9.241512298583984 Tokens per Sec: 20000.165954022905
Epoch Step: 105 / 135 Loss: 8.185147285461426 Tokens per Sec: 20110.77828382931
Epoch Step: 110 / 135 Loss: 9.118585586547852 Tokens per Sec: 19150.36410326735
Epoch Step: 115 / 135 Loss: 7.132084846496582 Tokens per Sec: 19475.356147867125
Epoch Step: 120 / 135 Loss: 11.841655731201172 Tokens per Sec: 19691.70784732651
Epoch Step: 125 / 135 Loss: 9.106736183166504 Tokens per Sec: 17897.743066299
Epoch Step: 130 / 135 Loss: 9.737107276916504 Tokens per Sec: 20302.678748181
Epoch Step: 135 / 135 Loss: 7.424295425415039 Tokens per Sec: 17703.597728547848
Epoch ended with duration 0:00:12.263411
Train perplexity: 1.489270432527841
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.598978
Validation perplexity: 2.120749348211421
Epoch 87 / 1000
Epoch Step: 5 / 135 Loss: 7.250566005706787 Tokens per Sec: 18254.029854454966
Epoch Step: 10 / 135 Loss: 12.239216804504395 Tokens per Sec: 18728.38983900494
Epoch Step: 15 / 135 Loss: 5.219874858856201 Tokens per Sec: 20866.686198127318
Epoch Step: 20 / 135 Loss: 5.590729236602783 Tokens per Sec: 21231.795684443354
Epoch Step: 25 / 135 Loss: 6.618040084838867 Tokens per Sec: 23786.20420737852
Epoch Step: 30 / 135 Loss: 8.98629093170166 Tokens per Sec: 23809.557275323466
Epoch Step: 35 / 135 Loss: 9.004536628723145 Tokens per Sec: 24813.463387679705
Epoch Step: 40 / 135 Loss: 5.89774227142334 Tokens per Sec: 23582.59651262909
Epoch Step: 45 / 135 Loss: 13.580134391784668 Tokens per Sec: 21835.05623096541
Epoch Step: 50 / 135 Loss: 6.677233695983887 Tokens per Sec: 20118.423428042406
Epoch Step: 55 / 135 Loss: 7.175051212310791 Tokens per Sec: 25748.820100416244
Epoch Step: 60 / 135 Loss: 57.251277923583984 Tokens per Sec: 20704.2430270489
Epoch Step: 65 / 135 Loss: 12.684171676635742 Tokens per Sec: 19000.668120607446
Epoch Step: 70 / 135 Loss: 9.43630599975586 Tokens per Sec: 20346.030642140147
Epoch Step: 75 / 135 Loss: 6.6038408279418945 Tokens per Sec: 18316.67632815429
Epoch Step: 80 / 135 Loss: 7.355280876159668 Tokens per Sec: 19308.75521286148
Epoch Step: 85 / 135 Loss: 6.5630574226379395 Tokens per Sec: 22018.83123091549
Epoch Step: 90 / 135 Loss: 7.904581546783447 Tokens per Sec: 20431.936326692477
Epoch Step: 95 / 135 Loss: 7.277259349822998 Tokens per Sec: 21603.746676872994
Epoch Step: 100 / 135 Loss: 11.605530738830566 Tokens per Sec: 21536.481140497977
Epoch Step: 105 / 135 Loss: 9.393046379089355 Tokens per Sec: 18993.041794677123
Epoch Step: 110 / 135 Loss: 7.238242149353027 Tokens per Sec: 21403.85897011158
Epoch Step: 115 / 135 Loss: 7.730132102966309 Tokens per Sec: 20116.515965938608
Epoch Step: 120 / 135 Loss: 8.266545295715332 Tokens per Sec: 18097.158777215674
Epoch Step: 125 / 135 Loss: 9.090227127075195 Tokens per Sec: 18583.35742430126
Epoch Step: 130 / 135 Loss: 10.724638938903809 Tokens per Sec: 18640.78738509891
Epoch Step: 135 / 135 Loss: 6.414883136749268 Tokens per Sec: 19143.877301642555
Epoch ended with duration 0:00:12.250934
Train perplexity: 1.5810140227337874
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.595847
Validation perplexity: 1.7989907833742207
Epoch 88 / 1000
Epoch Step: 5 / 135 Loss: 46.022220611572266 Tokens per Sec: 18858.165959135804
Epoch Step: 10 / 135 Loss: 12.383111000061035 Tokens per Sec: 21159.490486149312
Epoch Step: 15 / 135 Loss: 10.110727310180664 Tokens per Sec: 19106.86903861245
Epoch Step: 20 / 135 Loss: 7.344006538391113 Tokens per Sec: 19584.755638498045
Epoch Step: 25 / 135 Loss: 5.996711254119873 Tokens per Sec: 24847.133505225946
Epoch Step: 30 / 135 Loss: 9.535758972167969 Tokens per Sec: 21388.45475818718
Epoch Step: 35 / 135 Loss: 6.256357192993164 Tokens per Sec: 23321.7198422877
Epoch Step: 40 / 135 Loss: 4.99626350402832 Tokens per Sec: 23242.720553026542
Epoch Step: 45 / 135 Loss: 5.076040267944336 Tokens per Sec: 24749.60841054237
Epoch Step: 50 / 135 Loss: 13.112261772155762 Tokens per Sec: 20588.389370614696
Epoch Step: 55 / 135 Loss: 5.964375019073486 Tokens per Sec: 24535.527643842885
Epoch Step: 60 / 135 Loss: 9.695625305175781 Tokens per Sec: 22059.420640072123
Epoch Step: 65 / 135 Loss: 9.885908126831055 Tokens per Sec: 21989.7862906971
Epoch Step: 70 / 135 Loss: 10.584261894226074 Tokens per Sec: 22095.236371965868
Epoch Step: 75 / 135 Loss: 11.000434875488281 Tokens per Sec: 22692.276446426014
Epoch Step: 80 / 135 Loss: 7.695954322814941 Tokens per Sec: 23563.322943342595
Epoch Step: 85 / 135 Loss: 8.069530487060547 Tokens per Sec: 20732.56771913454
Epoch Step: 90 / 135 Loss: 8.68081283569336 Tokens per Sec: 17702.45937073361
Epoch Step: 95 / 135 Loss: 36.440879821777344 Tokens per Sec: 20298.7494050319
Epoch Step: 100 / 135 Loss: 7.4320549964904785 Tokens per Sec: 19661.24098835892
Epoch Step: 105 / 135 Loss: 44.76758575439453 Tokens per Sec: 18201.039848580334
Epoch Step: 110 / 135 Loss: 11.897390365600586 Tokens per Sec: 19913.199013746445
Epoch Step: 115 / 135 Loss: 96.23802947998047 Tokens per Sec: 17819.229828536198
Epoch Step: 120 / 135 Loss: 13.940587043762207 Tokens per Sec: 20871.191471767368
Epoch Step: 125 / 135 Loss: 59.6811637878418 Tokens per Sec: 17463.752383557676
Epoch Step: 130 / 135 Loss: 45.44069290161133 Tokens per Sec: 17939.169147945475
Epoch Step: 135 / 135 Loss: 8.779677391052246 Tokens per Sec: 18749.46654560418
Epoch ended with duration 0:00:12.236948
Train perplexity: 1.6493443901375338
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.592951
Validation perplexity: 1.7015186357039012
Epoch 89 / 1000
Epoch Step: 5 / 135 Loss: 10.890166282653809 Tokens per Sec: 21587.64941652353
Epoch Step: 10 / 135 Loss: 7.669318675994873 Tokens per Sec: 21127.45061971894
Epoch Step: 15 / 135 Loss: 10.530037879943848 Tokens per Sec: 21255.730261797285
Epoch Step: 20 / 135 Loss: 10.712654113769531 Tokens per Sec: 20376.874316318488
Epoch Step: 25 / 135 Loss: 8.69579029083252 Tokens per Sec: 23382.964674195788
Epoch Step: 30 / 135 Loss: 7.564296722412109 Tokens per Sec: 21432.500229562716
Epoch Step: 35 / 135 Loss: 8.100309371948242 Tokens per Sec: 20948.749619978284
Epoch Step: 40 / 135 Loss: 11.033744812011719 Tokens per Sec: 19582.951724322626
Epoch Step: 45 / 135 Loss: 6.908349990844727 Tokens per Sec: 23340.78225833687
Epoch Step: 50 / 135 Loss: 5.8091607093811035 Tokens per Sec: 21719.640966628307
Epoch Step: 55 / 135 Loss: 4.9455132484436035 Tokens per Sec: 24569.95800752405
Epoch Step: 60 / 135 Loss: 53.064056396484375 Tokens per Sec: 22412.701916705624
Epoch Step: 65 / 135 Loss: 11.951889991760254 Tokens per Sec: 18409.831863784053
Epoch Step: 70 / 135 Loss: 10.318107604980469 Tokens per Sec: 22057.307298802883
Epoch Step: 75 / 135 Loss: 10.559178352355957 Tokens per Sec: 17288.314208556403
Epoch Step: 80 / 135 Loss: 10.834213256835938 Tokens per Sec: 22273.21302071417
Epoch Step: 85 / 135 Loss: 9.677833557128906 Tokens per Sec: 19796.60297382929
Epoch Step: 90 / 135 Loss: 10.0892915725708 Tokens per Sec: 20926.80727540508
Epoch Step: 95 / 135 Loss: 11.602890968322754 Tokens per Sec: 23762.2856382315
Epoch Step: 100 / 135 Loss: 9.099076271057129 Tokens per Sec: 20324.523014799368
Epoch Step: 105 / 135 Loss: 8.65373420715332 Tokens per Sec: 15271.89057382622
Epoch Step: 110 / 135 Loss: 6.9568939208984375 Tokens per Sec: 19406.97124126129
Epoch Step: 115 / 135 Loss: 7.712304592132568 Tokens per Sec: 19019.857443242105
Epoch Step: 120 / 135 Loss: 9.398568153381348 Tokens per Sec: 21459.85844048582
Epoch Step: 125 / 135 Loss: 66.90969848632812 Tokens per Sec: 17834.513150470368
Epoch Step: 130 / 135 Loss: 8.969315528869629 Tokens per Sec: 20345.76976283532
Epoch Step: 135 / 135 Loss: 7.6020827293396 Tokens per Sec: 20725.305508250935
Epoch ended with duration 0:00:12.301064
Train perplexity: 1.5249987217328558
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.591770
Validation perplexity: 1.6601539720458585
Epoch 90 / 1000
Epoch Step: 5 / 135 Loss: 10.260387420654297 Tokens per Sec: 23034.644008411953
Epoch Step: 10 / 135 Loss: 6.3385820388793945 Tokens per Sec: 18570.556549375127
Epoch Step: 15 / 135 Loss: 7.150065898895264 Tokens per Sec: 24559.851526955656
Epoch Step: 20 / 135 Loss: 6.997039318084717 Tokens per Sec: 19793.829465735365
Epoch Step: 25 / 135 Loss: 62.61505126953125 Tokens per Sec: 24379.199286549283
Epoch Step: 30 / 135 Loss: 6.937597274780273 Tokens per Sec: 25308.10375604183
Epoch Step: 35 / 135 Loss: 13.175122261047363 Tokens per Sec: 19034.5964956943
Epoch Step: 40 / 135 Loss: 3.772284746170044 Tokens per Sec: 23241.90269501943
Epoch Step: 45 / 135 Loss: 6.273885726928711 Tokens per Sec: 23428.917045201233
Epoch Step: 50 / 135 Loss: 10.168438911437988 Tokens per Sec: 22656.745082781028
Epoch Step: 55 / 135 Loss: 10.778963088989258 Tokens per Sec: 22950.4392641823
Epoch Step: 60 / 135 Loss: 10.993107795715332 Tokens per Sec: 20246.92954207307
Epoch Step: 65 / 135 Loss: 10.29749584197998 Tokens per Sec: 23947.632215478927
Epoch Step: 70 / 135 Loss: 82.53778839111328 Tokens per Sec: 19348.816658696745
Epoch Step: 75 / 135 Loss: 9.020578384399414 Tokens per Sec: 20858.861764836605
Epoch Step: 80 / 135 Loss: 63.58370590209961 Tokens per Sec: 22023.360430360564
Epoch Step: 85 / 135 Loss: 9.460561752319336 Tokens per Sec: 22381.304876656683
Epoch Step: 90 / 135 Loss: 10.619400024414062 Tokens per Sec: 17621.60339062459
Epoch Step: 95 / 135 Loss: 80.32046508789062 Tokens per Sec: 19552.14337265574
Epoch Step: 100 / 135 Loss: 8.799981117248535 Tokens per Sec: 19061.476485524934
Epoch Step: 105 / 135 Loss: 37.64841842651367 Tokens per Sec: 19312.685507154143
Epoch Step: 110 / 135 Loss: 24.287033081054688 Tokens per Sec: 17020.6382438731
Epoch Step: 115 / 135 Loss: 10.383475303649902 Tokens per Sec: 20310.722511731445
Epoch Step: 120 / 135 Loss: 87.28910827636719 Tokens per Sec: 19465.163548017008
Epoch Step: 125 / 135 Loss: 10.964423179626465 Tokens per Sec: 18936.290631598353
Epoch Step: 130 / 135 Loss: 7.602511882781982 Tokens per Sec: 17397.44442203482
Epoch Step: 135 / 135 Loss: 6.062797546386719 Tokens per Sec: 19785.362779056606
Epoch ended with duration 0:00:12.233916
Train perplexity: 1.8288009259367148
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.594630
Validation perplexity: 1.7741386167136897
Model saved checkpoint!
Epoch 91 / 1000
Epoch Step: 5 / 135 Loss: 8.142218589782715 Tokens per Sec: 23036.670587320914
Epoch Step: 10 / 135 Loss: 8.2260103225708 Tokens per Sec: 16609.268316432433
Epoch Step: 15 / 135 Loss: 10.157134056091309 Tokens per Sec: 23735.487530916438
Epoch Step: 20 / 135 Loss: 6.4669647216796875 Tokens per Sec: 21613.10307589839
Epoch Step: 25 / 135 Loss: 8.806611061096191 Tokens per Sec: 18251.286642121377
Epoch Step: 30 / 135 Loss: 7.835687160491943 Tokens per Sec: 21228.37467906675
Epoch Step: 35 / 135 Loss: 6.497726917266846 Tokens per Sec: 21300.75477861564
Epoch Step: 40 / 135 Loss: 10.958334922790527 Tokens per Sec: 17164.91067417459
Epoch Step: 45 / 135 Loss: 12.477153778076172 Tokens per Sec: 21897.077761181383
Epoch Step: 50 / 135 Loss: 5.323208332061768 Tokens per Sec: 24803.134477569078
Epoch Step: 55 / 135 Loss: 11.177227973937988 Tokens per Sec: 22263.11617009356
Epoch Step: 60 / 135 Loss: 7.68308162689209 Tokens per Sec: 23883.704956226848
Epoch Step: 65 / 135 Loss: 9.93395709991455 Tokens per Sec: 19257.83923950454
Epoch Step: 70 / 135 Loss: 4.945502758026123 Tokens per Sec: 22918.725689064053
Epoch Step: 75 / 135 Loss: 10.253894805908203 Tokens per Sec: 20805.791758652693
Epoch Step: 80 / 135 Loss: 9.004775047302246 Tokens per Sec: 22863.652933823087
Epoch Step: 85 / 135 Loss: 9.857244491577148 Tokens per Sec: 20861.37068225755
Epoch Step: 90 / 135 Loss: 5.322916030883789 Tokens per Sec: 24263.555141298562
Epoch Step: 95 / 135 Loss: 7.103394031524658 Tokens per Sec: 23710.337273045687
Epoch Step: 100 / 135 Loss: 10.719230651855469 Tokens per Sec: 19396.73379260399
Epoch Step: 105 / 135 Loss: 5.533605575561523 Tokens per Sec: 17446.05823366856
Epoch Step: 110 / 135 Loss: 8.074679374694824 Tokens per Sec: 17449.137631915288
Epoch Step: 115 / 135 Loss: 9.408946990966797 Tokens per Sec: 20997.114192708275
Epoch Step: 120 / 135 Loss: 10.139022827148438 Tokens per Sec: 20621.170799418855
Epoch Step: 125 / 135 Loss: 8.06263256072998 Tokens per Sec: 17972.92101500842
Epoch Step: 130 / 135 Loss: 8.683746337890625 Tokens per Sec: 19362.9126554681
Epoch Step: 135 / 135 Loss: 69.44865417480469 Tokens per Sec: 19635.262332331316
Epoch ended with duration 0:00:12.220633
Train perplexity: 1.4820712516296082
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.592416
Validation perplexity: 1.72863351933247
Epoch 92 / 1000
Epoch Step: 5 / 135 Loss: 4.743813514709473 Tokens per Sec: 18496.001653491996
Epoch Step: 10 / 135 Loss: 9.647010803222656 Tokens per Sec: 20550.31566767414
Epoch Step: 15 / 135 Loss: 6.931948661804199 Tokens per Sec: 23418.015233061742
Epoch Step: 20 / 135 Loss: 7.625460624694824 Tokens per Sec: 20768.37298100291
Epoch Step: 25 / 135 Loss: 9.802504539489746 Tokens per Sec: 24496.596143785253
Epoch Step: 30 / 135 Loss: 32.23204040527344 Tokens per Sec: 20551.36198498731
Epoch Step: 35 / 135 Loss: 34.22506332397461 Tokens per Sec: 23400.66057068734
Epoch Step: 40 / 135 Loss: 9.344717025756836 Tokens per Sec: 21915.41080364842
Epoch Step: 45 / 135 Loss: 10.279211044311523 Tokens per Sec: 23343.9927206234
Epoch Step: 50 / 135 Loss: 7.868546009063721 Tokens per Sec: 22288.425613314917
Epoch Step: 55 / 135 Loss: 9.25329875946045 Tokens per Sec: 24433.405940165776
Epoch Step: 60 / 135 Loss: 4.502081871032715 Tokens per Sec: 23542.87293993161
Epoch Step: 65 / 135 Loss: 6.2654643058776855 Tokens per Sec: 21542.647807052643
Epoch Step: 70 / 135 Loss: 4.738971710205078 Tokens per Sec: 21775.195739276056
Epoch Step: 75 / 135 Loss: 59.704742431640625 Tokens per Sec: 21003.0712894467
Epoch Step: 80 / 135 Loss: 7.03037691116333 Tokens per Sec: 19643.287795673714
Epoch Step: 85 / 135 Loss: 46.91282272338867 Tokens per Sec: 19404.482398453125
Epoch Step: 90 / 135 Loss: 8.894722938537598 Tokens per Sec: 20163.725218306332
Epoch Step: 95 / 135 Loss: 6.3448262214660645 Tokens per Sec: 19589.47479450971
Epoch Step: 100 / 135 Loss: 29.705825805664062 Tokens per Sec: 23199.78786431679
Epoch Step: 105 / 135 Loss: 4.637951850891113 Tokens per Sec: 19230.853656845164
Epoch Step: 110 / 135 Loss: 7.692758083343506 Tokens per Sec: 19047.861017575437
Epoch Step: 115 / 135 Loss: 9.760223388671875 Tokens per Sec: 21209.01244403579
Epoch Step: 120 / 135 Loss: 9.846308708190918 Tokens per Sec: 17812.506738070282
Epoch Step: 125 / 135 Loss: 9.614095687866211 Tokens per Sec: 18051.082463305866
Epoch Step: 130 / 135 Loss: 9.100654602050781 Tokens per Sec: 20186.251338038408
Epoch Step: 135 / 135 Loss: 9.835776329040527 Tokens per Sec: 18968.506631510034
Epoch ended with duration 0:00:12.145248
Train perplexity: 1.4980918001897168
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.580484
Validation perplexity: 1.8178955949879088
Epoch 93 / 1000
Epoch Step: 5 / 135 Loss: 5.884922981262207 Tokens per Sec: 22903.49778453539
Epoch Step: 10 / 135 Loss: 5.961317539215088 Tokens per Sec: 20071.858339233127
Epoch Step: 15 / 135 Loss: 7.6114606857299805 Tokens per Sec: 22513.627575950162
Epoch Step: 20 / 135 Loss: 3.845395803451538 Tokens per Sec: 20416.245754900378
Epoch Step: 25 / 135 Loss: 91.94286346435547 Tokens per Sec: 24883.817931283913
Epoch Step: 30 / 135 Loss: 5.032923221588135 Tokens per Sec: 22474.595472907524
Epoch Step: 35 / 135 Loss: 6.666345119476318 Tokens per Sec: 24279.446546563508
Epoch Step: 40 / 135 Loss: 5.743780136108398 Tokens per Sec: 20522.682348733946
Epoch Step: 45 / 135 Loss: 9.082794189453125 Tokens per Sec: 24001.480013224347
Epoch Step: 50 / 135 Loss: 8.122989654541016 Tokens per Sec: 19067.48139677075
Epoch Step: 55 / 135 Loss: 7.992587089538574 Tokens per Sec: 20986.31001815016
Epoch Step: 60 / 135 Loss: 9.623025894165039 Tokens per Sec: 23973.569576495855
Epoch Step: 65 / 135 Loss: 7.549699783325195 Tokens per Sec: 21245.921810212316
Epoch Step: 70 / 135 Loss: 10.748696327209473 Tokens per Sec: 20941.506035708513
Epoch Step: 75 / 135 Loss: 8.990972518920898 Tokens per Sec: 22556.98875732081
Epoch Step: 80 / 135 Loss: 6.068333148956299 Tokens per Sec: 23634.890196018732
Epoch Step: 85 / 135 Loss: 6.358677864074707 Tokens per Sec: 20135.265282398206
Epoch Step: 90 / 135 Loss: 6.914735794067383 Tokens per Sec: 19699.19848426137
Epoch Step: 95 / 135 Loss: 6.759139060974121 Tokens per Sec: 19038.524078548202
Epoch Step: 100 / 135 Loss: 9.085686683654785 Tokens per Sec: 19362.460976474726
Epoch Step: 105 / 135 Loss: 9.244163513183594 Tokens per Sec: 18847.16453634981
Epoch Step: 110 / 135 Loss: 7.511641025543213 Tokens per Sec: 19729.980535128278
Epoch Step: 115 / 135 Loss: 9.457724571228027 Tokens per Sec: 20601.831881108355
Epoch Step: 120 / 135 Loss: 6.208796501159668 Tokens per Sec: 19369.112565531275
Epoch Step: 125 / 135 Loss: 8.356621742248535 Tokens per Sec: 17915.46603027079
Epoch Step: 130 / 135 Loss: 6.8107452392578125 Tokens per Sec: 15523.337441289365
Epoch Step: 135 / 135 Loss: 7.613685607910156 Tokens per Sec: 21398.691043238832
Epoch ended with duration 0:00:12.131754
Train perplexity: 1.4457381689429982
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.579922
Validation perplexity: 1.6972485212349215
Epoch 94 / 1000
Epoch Step: 5 / 135 Loss: 5.471704483032227 Tokens per Sec: 19226.86176623251
Epoch Step: 10 / 135 Loss: 71.0866928100586 Tokens per Sec: 19072.52937694253
Epoch Step: 15 / 135 Loss: 6.553511619567871 Tokens per Sec: 22230.1952682935
Epoch Step: 20 / 135 Loss: 9.719252586364746 Tokens per Sec: 21619.30149799626
Epoch Step: 25 / 135 Loss: 88.05365753173828 Tokens per Sec: 18317.89041169983
Epoch Step: 30 / 135 Loss: 8.425119400024414 Tokens per Sec: 22436.881237831003
Epoch Step: 35 / 135 Loss: 9.697150230407715 Tokens per Sec: 24812.392202880594
Epoch Step: 40 / 135 Loss: 9.697697639465332 Tokens per Sec: 19364.740974873028
Epoch Step: 45 / 135 Loss: 9.065997123718262 Tokens per Sec: 22221.22847516865
Epoch Step: 50 / 135 Loss: 7.224111080169678 Tokens per Sec: 26359.220016215095
Epoch Step: 55 / 135 Loss: 5.2265729904174805 Tokens per Sec: 21399.85235537039
Epoch Step: 60 / 135 Loss: 9.48902702331543 Tokens per Sec: 20424.26989146848
Epoch Step: 65 / 135 Loss: 10.20567512512207 Tokens per Sec: 22436.208137247566
Epoch Step: 70 / 135 Loss: 5.324586868286133 Tokens per Sec: 22486.119958227446
Epoch Step: 75 / 135 Loss: 5.694923400878906 Tokens per Sec: 20475.648106579643
Epoch Step: 80 / 135 Loss: 8.354632377624512 Tokens per Sec: 24141.18657743271
Epoch Step: 85 / 135 Loss: 9.800217628479004 Tokens per Sec: 19784.65893412617
Epoch Step: 90 / 135 Loss: 5.314377307891846 Tokens per Sec: 21516.077700306767
Epoch Step: 95 / 135 Loss: 8.422684669494629 Tokens per Sec: 20597.624080968326
Epoch Step: 100 / 135 Loss: 10.093554496765137 Tokens per Sec: 23560.9919439843
Epoch Step: 105 / 135 Loss: 8.792658805847168 Tokens per Sec: 19343.455173857004
Epoch Step: 110 / 135 Loss: 8.650275230407715 Tokens per Sec: 17272.57187055587
Epoch Step: 115 / 135 Loss: 5.72363805770874 Tokens per Sec: 20089.161075997523
Epoch Step: 120 / 135 Loss: 6.598001480102539 Tokens per Sec: 19153.326190495663
Epoch Step: 125 / 135 Loss: 59.2184944152832 Tokens per Sec: 18453.002600207437
Epoch Step: 130 / 135 Loss: 7.592055797576904 Tokens per Sec: 19230.466483921853
Epoch Step: 135 / 135 Loss: 5.725255966186523 Tokens per Sec: 20824.160407500945
Epoch ended with duration 0:00:12.165705
Train perplexity: 1.5301091978771766
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.579848
Validation perplexity: 1.6551248734971225
Epoch 95 / 1000
Epoch Step: 5 / 135 Loss: 4.255764007568359 Tokens per Sec: 21878.411100115496
Epoch Step: 10 / 135 Loss: 10.056639671325684 Tokens per Sec: 20343.70445926851
Epoch Step: 15 / 135 Loss: 7.975702285766602 Tokens per Sec: 22120.39973902861
Epoch Step: 20 / 135 Loss: 8.381631851196289 Tokens per Sec: 21692.091208555103
Epoch Step: 25 / 135 Loss: 8.031654357910156 Tokens per Sec: 20803.206327294796
Epoch Step: 30 / 135 Loss: 5.097133159637451 Tokens per Sec: 23614.939506968265
Epoch Step: 35 / 135 Loss: 4.854733467102051 Tokens per Sec: 24424.798433329608
Epoch Step: 40 / 135 Loss: 13.16347599029541 Tokens per Sec: 23488.091574435686
Epoch Step: 45 / 135 Loss: 11.741659164428711 Tokens per Sec: 16139.559357679931
Epoch Step: 50 / 135 Loss: 6.338619709014893 Tokens per Sec: 20866.60441889048
Epoch Step: 55 / 135 Loss: 84.38262176513672 Tokens per Sec: 23056.643831197962
Epoch Step: 60 / 135 Loss: 4.722317218780518 Tokens per Sec: 20934.05385517945
Epoch Step: 65 / 135 Loss: 5.841213226318359 Tokens per Sec: 22115.218290877216
Epoch Step: 70 / 135 Loss: 10.322406768798828 Tokens per Sec: 18959.974271007228
Epoch Step: 75 / 135 Loss: 11.359695434570312 Tokens per Sec: 21455.598938970386
Epoch Step: 80 / 135 Loss: 6.041145324707031 Tokens per Sec: 19822.97663506869
Epoch Step: 85 / 135 Loss: 5.965933799743652 Tokens per Sec: 24494.90762006149
Epoch Step: 90 / 135 Loss: 26.989641189575195 Tokens per Sec: 22660.57626910628
Epoch Step: 95 / 135 Loss: 7.347300052642822 Tokens per Sec: 23291.992741070513
Epoch Step: 100 / 135 Loss: 3.3657238483428955 Tokens per Sec: 24139.259778934364
Epoch Step: 105 / 135 Loss: 5.248844623565674 Tokens per Sec: 19098.542888308177
Epoch Step: 110 / 135 Loss: 40.37406921386719 Tokens per Sec: 19737.283942710612
Epoch Step: 115 / 135 Loss: 8.218988418579102 Tokens per Sec: 17496.07104843448
Epoch Step: 120 / 135 Loss: 7.18643045425415 Tokens per Sec: 20049.8045146427
Epoch Step: 125 / 135 Loss: 9.786011695861816 Tokens per Sec: 20685.824505957655
Epoch Step: 130 / 135 Loss: 4.964134693145752 Tokens per Sec: 17954.22006937818
Epoch Step: 135 / 135 Loss: 6.960635662078857 Tokens per Sec: 19644.572066686516
Epoch ended with duration 0:00:12.101474
Train perplexity: 1.4669201413358988
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.583603
Validation perplexity: 1.6326057404466041
Model saved checkpoint!
Epoch 96 / 1000
Epoch Step: 5 / 135 Loss: 8.2195405960083 Tokens per Sec: 16797.18000078339
Epoch Step: 10 / 135 Loss: 9.194565773010254 Tokens per Sec: 24246.961077353233
Epoch Step: 15 / 135 Loss: 6.114418983459473 Tokens per Sec: 20192.555090820537
Epoch Step: 20 / 135 Loss: 9.414693832397461 Tokens per Sec: 18678.853953859187
Epoch Step: 25 / 135 Loss: 8.04780101776123 Tokens per Sec: 18011.892374649207
Epoch Step: 30 / 135 Loss: 8.209918975830078 Tokens per Sec: 21995.53648129397
Epoch Step: 35 / 135 Loss: 7.804163455963135 Tokens per Sec: 23203.84765921573
Epoch Step: 40 / 135 Loss: 8.427714347839355 Tokens per Sec: 23837.6766718798
Epoch Step: 45 / 135 Loss: 6.362147331237793 Tokens per Sec: 23492.33778887505
Epoch Step: 50 / 135 Loss: 8.456344604492188 Tokens per Sec: 21232.244818926953
Epoch Step: 55 / 135 Loss: 9.191736221313477 Tokens per Sec: 20024.146816389406
Epoch Step: 60 / 135 Loss: 6.8543009757995605 Tokens per Sec: 22942.959021165956
Epoch Step: 65 / 135 Loss: 11.357264518737793 Tokens per Sec: 22157.018510502352
Epoch Step: 70 / 135 Loss: 9.885906219482422 Tokens per Sec: 24439.15921784156
Epoch Step: 75 / 135 Loss: 12.36674976348877 Tokens per Sec: 23066.79414854233
Epoch Step: 80 / 135 Loss: 9.746415138244629 Tokens per Sec: 21720.93735627835
Epoch Step: 85 / 135 Loss: 6.806237697601318 Tokens per Sec: 22993.635367392777
Epoch Step: 90 / 135 Loss: 9.32297134399414 Tokens per Sec: 17497.190022659008
Epoch Step: 95 / 135 Loss: 8.041498184204102 Tokens per Sec: 26488.93640357961
Epoch Step: 100 / 135 Loss: 7.959167003631592 Tokens per Sec: 17756.047094662656
Epoch Step: 105 / 135 Loss: 5.678504943847656 Tokens per Sec: 19316.070673116254
Epoch Step: 110 / 135 Loss: 5.2919087409973145 Tokens per Sec: 18006.72954669306
Epoch Step: 115 / 135 Loss: 8.95451545715332 Tokens per Sec: 18680.180978839362
Epoch Step: 120 / 135 Loss: 8.6214017868042 Tokens per Sec: 20063.55039689694
Epoch Step: 125 / 135 Loss: 8.915221214294434 Tokens per Sec: 20338.004026241986
Epoch Step: 130 / 135 Loss: 5.704292297363281 Tokens per Sec: 19871.24792180437
Epoch Step: 135 / 135 Loss: 7.861844539642334 Tokens per Sec: 21131.61037909396
Epoch ended with duration 0:00:12.159874
Train perplexity: 1.4859301464413508
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.579660
Validation perplexity: 1.690061605139464
Epoch 97 / 1000
Epoch Step: 5 / 135 Loss: 9.9331693649292 Tokens per Sec: 20073.969719571458
Epoch Step: 10 / 135 Loss: 59.35298538208008 Tokens per Sec: 22646.31226240422
Epoch Step: 15 / 135 Loss: 8.842077255249023 Tokens per Sec: 21965.418728844692
Epoch Step: 20 / 135 Loss: 5.908675670623779 Tokens per Sec: 21407.19352604758
Epoch Step: 25 / 135 Loss: 6.14793062210083 Tokens per Sec: 21835.224174739236
Epoch Step: 30 / 135 Loss: 5.638504505157471 Tokens per Sec: 22356.814466774587
Epoch Step: 35 / 135 Loss: 9.667688369750977 Tokens per Sec: 20581.328321180234
Epoch Step: 40 / 135 Loss: 8.158884048461914 Tokens per Sec: 23246.304673821796
Epoch Step: 45 / 135 Loss: 75.16189575195312 Tokens per Sec: 20660.10486621078
Epoch Step: 50 / 135 Loss: 10.972362518310547 Tokens per Sec: 22646.186244477492
Epoch Step: 55 / 135 Loss: 5.684566020965576 Tokens per Sec: 20557.936826986606
Epoch Step: 60 / 135 Loss: 6.388313293457031 Tokens per Sec: 25141.494411506155
Epoch Step: 65 / 135 Loss: 6.795297622680664 Tokens per Sec: 22205.187833023614
Epoch Step: 70 / 135 Loss: 5.861578941345215 Tokens per Sec: 19490.215624003988
Epoch Step: 75 / 135 Loss: 5.914677143096924 Tokens per Sec: 17476.466568018725
Epoch Step: 80 / 135 Loss: 9.669918060302734 Tokens per Sec: 19469.79766003577
Epoch Step: 85 / 135 Loss: 6.983946323394775 Tokens per Sec: 23797.74780286167
Epoch Step: 90 / 135 Loss: 8.156954765319824 Tokens per Sec: 17375.63620725161
Epoch Step: 95 / 135 Loss: 8.887991905212402 Tokens per Sec: 22953.895287909945
Epoch Step: 100 / 135 Loss: 6.307742595672607 Tokens per Sec: 23097.492016999273
Epoch Step: 105 / 135 Loss: 6.029537200927734 Tokens per Sec: 18186.8608573706
Epoch Step: 110 / 135 Loss: 7.822082042694092 Tokens per Sec: 19051.708135411325
Epoch Step: 115 / 135 Loss: 5.575353622436523 Tokens per Sec: 18149.515948703494
Epoch Step: 120 / 135 Loss: 6.014589786529541 Tokens per Sec: 20757.65326934613
Epoch Step: 125 / 135 Loss: 7.734323978424072 Tokens per Sec: 19249.59049515406
Epoch Step: 130 / 135 Loss: 5.726152420043945 Tokens per Sec: 20748.927440807824
Epoch Step: 135 / 135 Loss: 7.245234489440918 Tokens per Sec: 19214.23082830574
Epoch ended with duration 0:00:12.156949
Train perplexity: 1.549227891255747
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.590430
Validation perplexity: 2.3597326533849903
Epoch 98 / 1000
Epoch Step: 5 / 135 Loss: 8.149057388305664 Tokens per Sec: 21063.3660729927
Epoch Step: 10 / 135 Loss: 5.06855583190918 Tokens per Sec: 18602.274048313557
Epoch Step: 15 / 135 Loss: 6.270000457763672 Tokens per Sec: 20564.073269165205
Epoch Step: 20 / 135 Loss: 9.053483963012695 Tokens per Sec: 24958.838841737346
Epoch Step: 25 / 135 Loss: 7.524482250213623 Tokens per Sec: 25286.082217791703
Epoch Step: 30 / 135 Loss: 8.067434310913086 Tokens per Sec: 19695.245427820853
Epoch Step: 35 / 135 Loss: 7.904504299163818 Tokens per Sec: 22924.725076328225
Epoch Step: 40 / 135 Loss: 5.976966381072998 Tokens per Sec: 21551.4777110934
Epoch Step: 45 / 135 Loss: 6.403439044952393 Tokens per Sec: 24445.358470171734
Epoch Step: 50 / 135 Loss: 7.107468605041504 Tokens per Sec: 19783.97112990415
Epoch Step: 55 / 135 Loss: 5.51708984375 Tokens per Sec: 16875.26336021036
Epoch Step: 60 / 135 Loss: 9.69948959350586 Tokens per Sec: 22953.52438113193
Epoch Step: 65 / 135 Loss: 8.542276382446289 Tokens per Sec: 23848.896912097705
Epoch Step: 70 / 135 Loss: 5.08955717086792 Tokens per Sec: 19528.043628564606
Epoch Step: 75 / 135 Loss: 7.819936752319336 Tokens per Sec: 20166.223437326622
Epoch Step: 80 / 135 Loss: 4.6227946281433105 Tokens per Sec: 20672.990533005377
Epoch Step: 85 / 135 Loss: 6.869227886199951 Tokens per Sec: 20880.17686055736
Epoch Step: 90 / 135 Loss: 7.512777805328369 Tokens per Sec: 18640.229075260573
Epoch Step: 95 / 135 Loss: 10.219040870666504 Tokens per Sec: 25149.280003728116
Epoch Step: 100 / 135 Loss: 5.592101097106934 Tokens per Sec: 23793.4358218687
Epoch Step: 105 / 135 Loss: 5.186206340789795 Tokens per Sec: 16869.674329205143
Epoch Step: 110 / 135 Loss: 6.862631797790527 Tokens per Sec: 18429.752665114665
Epoch Step: 115 / 135 Loss: 10.448114395141602 Tokens per Sec: 19491.483464148325
Epoch Step: 120 / 135 Loss: 8.648765563964844 Tokens per Sec: 19977.82329671601
Epoch Step: 125 / 135 Loss: 4.849054336547852 Tokens per Sec: 19092.887818957046
Epoch Step: 130 / 135 Loss: 6.675843238830566 Tokens per Sec: 20269.427346712946
Epoch Step: 135 / 135 Loss: 9.39730453491211 Tokens per Sec: 20419.41974556126
Epoch ended with duration 0:00:12.135992
Train perplexity: 1.409435784018531
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.580551
Validation perplexity: 1.622637870117299
Epoch 99 / 1000
Epoch Step: 5 / 135 Loss: 5.587284564971924 Tokens per Sec: 21842.041189631476
Epoch Step: 10 / 135 Loss: 66.20631408691406 Tokens per Sec: 24304.529377331623
Epoch Step: 15 / 135 Loss: 10.607778549194336 Tokens per Sec: 22183.510909028497
Epoch Step: 20 / 135 Loss: 4.1368207931518555 Tokens per Sec: 22266.814216822455
Epoch Step: 25 / 135 Loss: 4.629575729370117 Tokens per Sec: 21773.111461737135
Epoch Step: 30 / 135 Loss: 8.035529136657715 Tokens per Sec: 18790.065243856585
Epoch Step: 35 / 135 Loss: 9.70175552368164 Tokens per Sec: 23167.695213412164
Epoch Step: 40 / 135 Loss: 9.935121536254883 Tokens per Sec: 20299.999850185675
Epoch Step: 45 / 135 Loss: 66.85818481445312 Tokens per Sec: 19637.93100322031
Epoch Step: 50 / 135 Loss: 5.3917107582092285 Tokens per Sec: 22872.96035778
Epoch Step: 55 / 135 Loss: 10.039621353149414 Tokens per Sec: 20703.076675699016
Epoch Step: 60 / 135 Loss: 47.29302215576172 Tokens per Sec: 20569.118659479118
Epoch Step: 65 / 135 Loss: 5.297332763671875 Tokens per Sec: 23360.739353207013
Epoch Step: 70 / 135 Loss: 8.106450080871582 Tokens per Sec: 23011.954709940743
Epoch Step: 75 / 135 Loss: 4.126971244812012 Tokens per Sec: 23116.929010800206
Epoch Step: 80 / 135 Loss: 5.483457088470459 Tokens per Sec: 20059.689996873938
Epoch Step: 85 / 135 Loss: 9.836254119873047 Tokens per Sec: 19138.252760991523
Epoch Step: 90 / 135 Loss: 5.125011444091797 Tokens per Sec: 24210.785769844842
Epoch Step: 95 / 135 Loss: 6.462085723876953 Tokens per Sec: 25477.56382041747
Epoch Step: 100 / 135 Loss: 9.285364151000977 Tokens per Sec: 17579.752072413732
Epoch Step: 105 / 135 Loss: 6.762648582458496 Tokens per Sec: 18764.699596299164
Epoch Step: 110 / 135 Loss: 8.091599464416504 Tokens per Sec: 19326.615936622136
Epoch Step: 115 / 135 Loss: 9.25936508178711 Tokens per Sec: 18778.504412527782
Epoch Step: 120 / 135 Loss: 7.043927192687988 Tokens per Sec: 17414.01613608712
Epoch Step: 125 / 135 Loss: 8.382899284362793 Tokens per Sec: 20415.72879198451
Epoch Step: 130 / 135 Loss: 7.432199001312256 Tokens per Sec: 19712.868961915774
Epoch Step: 135 / 135 Loss: 7.999237060546875 Tokens per Sec: 19707.39780877704
Epoch ended with duration 0:00:12.146156
Train perplexity: 1.5174194287839047
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.584858
Validation perplexity: 1.9329666071511302
Epoch 100 / 1000
Epoch Step: 5 / 135 Loss: 52.650245666503906 Tokens per Sec: 23614.688749236167
Epoch Step: 10 / 135 Loss: 7.279952526092529 Tokens per Sec: 22715.08282950831
Epoch Step: 15 / 135 Loss: 6.059847831726074 Tokens per Sec: 20889.695129966894
Epoch Step: 20 / 135 Loss: 5.260578155517578 Tokens per Sec: 22903.024307064003
Epoch Step: 25 / 135 Loss: 6.587348937988281 Tokens per Sec: 20354.44762388528
Epoch Step: 30 / 135 Loss: 7.253988742828369 Tokens per Sec: 22020.755071894757
Epoch Step: 35 / 135 Loss: 7.992432117462158 Tokens per Sec: 21488.48752145751
Epoch Step: 40 / 135 Loss: 8.457925796508789 Tokens per Sec: 21901.143696707382
Epoch Step: 45 / 135 Loss: 7.569900989532471 Tokens per Sec: 21484.742799747153
Epoch Step: 50 / 135 Loss: 7.559508323669434 Tokens per Sec: 23600.34148987875
Epoch Step: 55 / 135 Loss: 7.404825687408447 Tokens per Sec: 19395.221085887988
Epoch Step: 60 / 135 Loss: 6.3618974685668945 Tokens per Sec: 21266.23533866328
Epoch Step: 65 / 135 Loss: 3.636658191680908 Tokens per Sec: 16806.625555412935
Epoch Step: 70 / 135 Loss: 27.444780349731445 Tokens per Sec: 22004.416933341643
Epoch Step: 75 / 135 Loss: 7.383528709411621 Tokens per Sec: 23971.83549542594
Epoch Step: 80 / 135 Loss: 7.236787796020508 Tokens per Sec: 20112.76672314494
Epoch Step: 85 / 135 Loss: 89.21104431152344 Tokens per Sec: 23073.813190728724
Epoch Step: 90 / 135 Loss: 7.694643974304199 Tokens per Sec: 22339.90283578134
Epoch Step: 95 / 135 Loss: 5.405838489532471 Tokens per Sec: 22475.99299960597
Epoch Step: 100 / 135 Loss: 8.990828514099121 Tokens per Sec: 21575.43245419383
Epoch Step: 105 / 135 Loss: 5.6346025466918945 Tokens per Sec: 18745.333298280504
Epoch Step: 110 / 135 Loss: 8.788480758666992 Tokens per Sec: 19153.678806984597
Epoch Step: 115 / 135 Loss: 7.9982008934021 Tokens per Sec: 16171.812856149076
Epoch Step: 120 / 135 Loss: 4.707000732421875 Tokens per Sec: 19833.399495965263
Epoch Step: 125 / 135 Loss: 8.349493026733398 Tokens per Sec: 18359.220131563256
Epoch Step: 130 / 135 Loss: 8.704693794250488 Tokens per Sec: 20809.04698855014
Epoch Step: 135 / 135 Loss: 6.887770175933838 Tokens per Sec: 20001.304729188272
Epoch ended with duration 0:00:12.138392
Train perplexity: 1.4927459716968665
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.579036
Validation perplexity: 1.6326850640281225
Model saved checkpoint!
Epoch 101 / 1000
Epoch Step: 5 / 135 Loss: 9.153618812561035 Tokens per Sec: 22524.849306185686
Epoch Step: 10 / 135 Loss: 7.305485725402832 Tokens per Sec: 24419.042317877356
Epoch Step: 15 / 135 Loss: 5.925696849822998 Tokens per Sec: 25767.609931821567
Epoch Step: 20 / 135 Loss: 19.580320358276367 Tokens per Sec: 19026.255769553052
Epoch Step: 25 / 135 Loss: 9.246719360351562 Tokens per Sec: 24551.469530723418
Epoch Step: 30 / 135 Loss: 10.972457885742188 Tokens per Sec: 22242.515670444827
Epoch Step: 35 / 135 Loss: 9.910043716430664 Tokens per Sec: 21481.316242687175
Epoch Step: 40 / 135 Loss: 8.894734382629395 Tokens per Sec: 22472.91804734895
Epoch Step: 45 / 135 Loss: 7.084623336791992 Tokens per Sec: 22037.950221708656
Epoch Step: 50 / 135 Loss: 5.702271938323975 Tokens per Sec: 20274.617611208687
Epoch Step: 55 / 135 Loss: 5.886265754699707 Tokens per Sec: 18308.723604367206
Epoch Step: 60 / 135 Loss: 6.940545082092285 Tokens per Sec: 17836.179402474365
Epoch Step: 65 / 135 Loss: 7.596653461456299 Tokens per Sec: 21987.744404722565
Epoch Step: 70 / 135 Loss: 9.016697883605957 Tokens per Sec: 23338.66494585134
Epoch Step: 75 / 135 Loss: 9.789060592651367 Tokens per Sec: 22930.764522313224
Epoch Step: 80 / 135 Loss: 4.244612693786621 Tokens per Sec: 20327.833012742973
Epoch Step: 85 / 135 Loss: 4.51887845993042 Tokens per Sec: 24175.084266863203
Epoch Step: 90 / 135 Loss: 5.377636432647705 Tokens per Sec: 19887.81853202288
Epoch Step: 95 / 135 Loss: 7.417184352874756 Tokens per Sec: 17724.22613591478
Epoch Step: 100 / 135 Loss: 7.923649787902832 Tokens per Sec: 22653.495385327784
Epoch Step: 105 / 135 Loss: 6.863043785095215 Tokens per Sec: 18643.596030337736
Epoch Step: 110 / 135 Loss: 7.0743408203125 Tokens per Sec: 20116.12329460412
Epoch Step: 115 / 135 Loss: 10.452651977539062 Tokens per Sec: 20538.37528861367
Epoch Step: 120 / 135 Loss: 7.098932266235352 Tokens per Sec: 19229.9981355848
Epoch Step: 125 / 135 Loss: 7.143085479736328 Tokens per Sec: 15596.325887893236
Epoch Step: 130 / 135 Loss: 8.231973648071289 Tokens per Sec: 20057.832211020428
Epoch Step: 135 / 135 Loss: 7.21510124206543 Tokens per Sec: 19195.486535702
Epoch ended with duration 0:00:12.081238
Train perplexity: 1.4169606725129538
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.580494
Validation perplexity: 1.776970496376781
Epoch 102 / 1000
Epoch Step: 5 / 135 Loss: 5.175282955169678 Tokens per Sec: 20488.39410731911
Epoch Step: 10 / 135 Loss: 3.276413679122925 Tokens per Sec: 24213.025349517127
Epoch Step: 15 / 135 Loss: 5.697384357452393 Tokens per Sec: 23858.322896232257
Epoch Step: 20 / 135 Loss: 5.099499225616455 Tokens per Sec: 21609.015183137635
Epoch Step: 25 / 135 Loss: 5.642472267150879 Tokens per Sec: 24343.89310787496
Epoch Step: 30 / 135 Loss: 5.829150199890137 Tokens per Sec: 19300.70391323752
Epoch Step: 35 / 135 Loss: 6.119219779968262 Tokens per Sec: 22105.52669816068
Epoch Step: 40 / 135 Loss: 6.867176055908203 Tokens per Sec: 19662.35710876729
Epoch Step: 45 / 135 Loss: 4.735918998718262 Tokens per Sec: 19349.862546574215
Epoch Step: 50 / 135 Loss: 7.5306291580200195 Tokens per Sec: 14299.05163032244
Epoch Step: 55 / 135 Loss: 4.422719478607178 Tokens per Sec: 21657.388787521282
Epoch Step: 60 / 135 Loss: 7.359066009521484 Tokens per Sec: 23794.09114008178
Epoch Step: 65 / 135 Loss: 8.66662883758545 Tokens per Sec: 18664.66660522678
Epoch Step: 70 / 135 Loss: 4.9500813484191895 Tokens per Sec: 27094.820680919664
Epoch Step: 75 / 135 Loss: 9.37101936340332 Tokens per Sec: 21955.704231472748
Epoch Step: 80 / 135 Loss: 8.542862892150879 Tokens per Sec: 20769.15109265748
Epoch Step: 85 / 135 Loss: 10.227742195129395 Tokens per Sec: 20757.10928212833
Epoch Step: 90 / 135 Loss: 7.418600082397461 Tokens per Sec: 17599.308401822793
Epoch Step: 95 / 135 Loss: 59.429439544677734 Tokens per Sec: 25030.486379564656
Epoch Step: 100 / 135 Loss: 6.872731685638428 Tokens per Sec: 22604.161766463738
Epoch Step: 105 / 135 Loss: 7.484212875366211 Tokens per Sec: 18497.768935902142
Epoch Step: 110 / 135 Loss: 6.382668495178223 Tokens per Sec: 19982.88295596775
Epoch Step: 115 / 135 Loss: 68.58123016357422 Tokens per Sec: 17679.41241176252
Epoch Step: 120 / 135 Loss: 5.260060787200928 Tokens per Sec: 17557.657951690515
Epoch Step: 125 / 135 Loss: 11.67136001586914 Tokens per Sec: 20151.557914346646
Epoch Step: 130 / 135 Loss: 7.740115642547607 Tokens per Sec: 18700.007629909363
Epoch Step: 135 / 135 Loss: 8.975699424743652 Tokens per Sec: 20547.33795911529
Epoch ended with duration 0:00:12.221019
Train perplexity: 1.4595691281509988
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.583510
Validation perplexity: 1.78033077152235
Epoch 103 / 1000
Epoch Step: 5 / 135 Loss: 6.939250946044922 Tokens per Sec: 24954.18783881037
Epoch Step: 10 / 135 Loss: 7.753354072570801 Tokens per Sec: 17254.57624668825
Epoch Step: 15 / 135 Loss: 18.107711791992188 Tokens per Sec: 20807.88665630225
Epoch Step: 20 / 135 Loss: 8.371332168579102 Tokens per Sec: 22321.50430494516
Epoch Step: 25 / 135 Loss: 7.488515377044678 Tokens per Sec: 20328.9328931602
Epoch Step: 30 / 135 Loss: 10.770034790039062 Tokens per Sec: 21817.801451257
Epoch Step: 35 / 135 Loss: 5.2647600173950195 Tokens per Sec: 22975.172416499725
Epoch Step: 40 / 135 Loss: 9.35350227355957 Tokens per Sec: 24637.199877130653
Epoch Step: 45 / 135 Loss: 4.56428861618042 Tokens per Sec: 21314.882753151556
Epoch Step: 50 / 135 Loss: 9.291501998901367 Tokens per Sec: 24361.587830101005
Epoch Step: 55 / 135 Loss: 5.610102653503418 Tokens per Sec: 21782.780889728518
Epoch Step: 60 / 135 Loss: 70.65442657470703 Tokens per Sec: 22951.756471824785
Epoch Step: 65 / 135 Loss: 6.61461877822876 Tokens per Sec: 16752.968354599543
Epoch Step: 70 / 135 Loss: 5.905618667602539 Tokens per Sec: 19045.834911446607
Epoch Step: 75 / 135 Loss: 7.735886573791504 Tokens per Sec: 19372.635611667392
Epoch Step: 80 / 135 Loss: 8.45953369140625 Tokens per Sec: 22618.801635265925
Epoch Step: 85 / 135 Loss: 9.005204200744629 Tokens per Sec: 20742.299604715063
Epoch Step: 90 / 135 Loss: 6.290862560272217 Tokens per Sec: 23190.343925856323
Epoch Step: 95 / 135 Loss: 9.031437873840332 Tokens per Sec: 21528.781268215134
Epoch Step: 100 / 135 Loss: 6.713459014892578 Tokens per Sec: 19495.33335812293
Epoch Step: 105 / 135 Loss: 7.247081279754639 Tokens per Sec: 17145.958899576883
Epoch Step: 110 / 135 Loss: 28.297340393066406 Tokens per Sec: 17958.957066542567
Epoch Step: 115 / 135 Loss: 7.049675464630127 Tokens per Sec: 20967.232718618492
Epoch Step: 120 / 135 Loss: 6.531621932983398 Tokens per Sec: 20228.581803157693
Epoch Step: 125 / 135 Loss: 7.463161468505859 Tokens per Sec: 21562.010802662982
Epoch Step: 130 / 135 Loss: 40.948909759521484 Tokens per Sec: 18339.023996791773
Epoch Step: 135 / 135 Loss: 5.808521270751953 Tokens per Sec: 18776.732451090138
Epoch ended with duration 0:00:12.206576
Train perplexity: 1.486328438476095
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.580974
Validation perplexity: 1.67255340627606
Epoch 104 / 1000
Epoch Step: 5 / 135 Loss: 4.126195907592773 Tokens per Sec: 24668.26015239531
Epoch Step: 10 / 135 Loss: 8.027676582336426 Tokens per Sec: 23264.86291424782
Epoch Step: 15 / 135 Loss: 4.9535746574401855 Tokens per Sec: 20155.067451879284
Epoch Step: 20 / 135 Loss: 8.464165687561035 Tokens per Sec: 21370.730149655337
Epoch Step: 25 / 135 Loss: 5.359868049621582 Tokens per Sec: 20804.70824042617
Epoch Step: 30 / 135 Loss: 4.2878899574279785 Tokens per Sec: 22130.835895768116
Epoch Step: 35 / 135 Loss: 10.74413776397705 Tokens per Sec: 19414.611729632194
Epoch Step: 40 / 135 Loss: 41.79642868041992 Tokens per Sec: 24185.175022148716
Epoch Step: 45 / 135 Loss: 5.735231876373291 Tokens per Sec: 21409.515162771633
Epoch Step: 50 / 135 Loss: 5.271747589111328 Tokens per Sec: 16263.388689172078
Epoch Step: 55 / 135 Loss: 7.295679092407227 Tokens per Sec: 21293.591761004707
Epoch Step: 60 / 135 Loss: 4.017198085784912 Tokens per Sec: 22075.550694721085
Epoch Step: 65 / 135 Loss: 4.892207622528076 Tokens per Sec: 19910.18423570315
Epoch Step: 70 / 135 Loss: 10.98317813873291 Tokens per Sec: 22024.718621822976
Epoch Step: 75 / 135 Loss: 6.821339130401611 Tokens per Sec: 24271.02696012203
Epoch Step: 80 / 135 Loss: 7.706451892852783 Tokens per Sec: 20284.372365263338
Epoch Step: 85 / 135 Loss: 8.83776569366455 Tokens per Sec: 21129.88998410175
Epoch Step: 90 / 135 Loss: 5.70106840133667 Tokens per Sec: 22241.573644263935
Epoch Step: 95 / 135 Loss: 5.845896244049072 Tokens per Sec: 22303.446463381697
Epoch Step: 100 / 135 Loss: 6.4889092445373535 Tokens per Sec: 22607.914408263587
Epoch Step: 105 / 135 Loss: 7.347467422485352 Tokens per Sec: 19799.79371890902
Epoch Step: 110 / 135 Loss: 8.212388038635254 Tokens per Sec: 15982.653909618995
Epoch Step: 115 / 135 Loss: 8.949005126953125 Tokens per Sec: 21089.82425886661
Epoch Step: 120 / 135 Loss: 9.567405700683594 Tokens per Sec: 20221.038137992073
Epoch Step: 125 / 135 Loss: 3.786203384399414 Tokens per Sec: 17513.571931793
Epoch Step: 130 / 135 Loss: 54.41255187988281 Tokens per Sec: 20785.90820410361
Epoch Step: 135 / 135 Loss: 6.8872575759887695 Tokens per Sec: 19786.222954661556
Epoch ended with duration 0:00:12.136755
Train perplexity: 1.503842248854219
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.581347
Validation perplexity: 1.64422558513254
Epoch 105 / 1000
Epoch Step: 5 / 135 Loss: 5.706079959869385 Tokens per Sec: 21910.767581512002
Epoch Step: 10 / 135 Loss: 6.652403831481934 Tokens per Sec: 19289.819462325275
Epoch Step: 15 / 135 Loss: 9.705680847167969 Tokens per Sec: 23422.838476665198
Epoch Step: 20 / 135 Loss: 19.608060836791992 Tokens per Sec: 21438.542134792206
Epoch Step: 25 / 135 Loss: 4.882380962371826 Tokens per Sec: 23887.004692845858
Epoch Step: 30 / 135 Loss: 6.500129222869873 Tokens per Sec: 21522.153081540997
Epoch Step: 35 / 135 Loss: 4.5239787101745605 Tokens per Sec: 19380.11925660202
Epoch Step: 40 / 135 Loss: 23.99142837524414 Tokens per Sec: 22240.313541905794
Epoch Step: 45 / 135 Loss: 6.701519966125488 Tokens per Sec: 21386.676563689063
Epoch Step: 50 / 135 Loss: 7.835689544677734 Tokens per Sec: 18768.839494933247
Epoch Step: 55 / 135 Loss: 5.011174201965332 Tokens per Sec: 22810.027492649308
Epoch Step: 60 / 135 Loss: 6.9736223220825195 Tokens per Sec: 18673.58961041804
Epoch Step: 65 / 135 Loss: 8.709708213806152 Tokens per Sec: 22654.458979141556
Epoch Step: 70 / 135 Loss: 6.069863319396973 Tokens per Sec: 20391.931398990437
Epoch Step: 75 / 135 Loss: 5.074554920196533 Tokens per Sec: 20022.818107319334
Epoch Step: 80 / 135 Loss: 5.344660758972168 Tokens per Sec: 22262.330813776603
Epoch Step: 85 / 135 Loss: 5.787459373474121 Tokens per Sec: 23813.338652832488
Epoch Step: 90 / 135 Loss: 4.826870441436768 Tokens per Sec: 26040.5484424129
Epoch Step: 95 / 135 Loss: 6.739145278930664 Tokens per Sec: 19094.042597354983
Epoch Step: 100 / 135 Loss: 4.672053337097168 Tokens per Sec: 24763.202950475614
Epoch Step: 105 / 135 Loss: 8.587359428405762 Tokens per Sec: 18617.938051432742
Epoch Step: 110 / 135 Loss: 4.84876823425293 Tokens per Sec: 17314.648442498754
Epoch Step: 115 / 135 Loss: 8.500909805297852 Tokens per Sec: 21758.705524432975
Epoch Step: 120 / 135 Loss: 59.793495178222656 Tokens per Sec: 18632.71623125837
Epoch Step: 125 / 135 Loss: 5.735158920288086 Tokens per Sec: 18306.96793739877
Epoch Step: 130 / 135 Loss: 6.274529933929443 Tokens per Sec: 18519.856165451918
Epoch Step: 135 / 135 Loss: 7.833276748657227 Tokens per Sec: 20125.24957335102
Epoch ended with duration 0:00:12.159500
Train perplexity: 1.4245981745483487
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.576797
Validation perplexity: 1.4952188011807166
Model saved best_on_validation!
Model saved checkpoint!
Epoch 106 / 1000
Epoch Step: 5 / 135 Loss: 4.435670852661133 Tokens per Sec: 20668.591525902117
Epoch Step: 10 / 135 Loss: 7.392216205596924 Tokens per Sec: 22444.178561392146
Epoch Step: 15 / 135 Loss: 8.541122436523438 Tokens per Sec: 23103.969597318603
Epoch Step: 20 / 135 Loss: 4.219420433044434 Tokens per Sec: 22311.65981609541
Epoch Step: 25 / 135 Loss: 8.703288078308105 Tokens per Sec: 24315.125609353086
Epoch Step: 30 / 135 Loss: 10.3096923828125 Tokens per Sec: 22053.89906094085
Epoch Step: 35 / 135 Loss: 5.034021377563477 Tokens per Sec: 18750.96897113371
Epoch Step: 40 / 135 Loss: 5.895053863525391 Tokens per Sec: 24197.714110594807
Epoch Step: 45 / 135 Loss: 7.926274299621582 Tokens per Sec: 21065.828407560304
Epoch Step: 50 / 135 Loss: 8.304754257202148 Tokens per Sec: 20360.2980920859
Epoch Step: 55 / 135 Loss: 4.095713138580322 Tokens per Sec: 21195.33436399164
Epoch Step: 60 / 135 Loss: 5.082538604736328 Tokens per Sec: 22544.491103167384
Epoch Step: 65 / 135 Loss: 6.580757141113281 Tokens per Sec: 20315.034334196887
Epoch Step: 70 / 135 Loss: 6.297118186950684 Tokens per Sec: 20713.711899651906
Epoch Step: 75 / 135 Loss: 6.74540901184082 Tokens per Sec: 22430.69969478894
Epoch Step: 80 / 135 Loss: 8.790691375732422 Tokens per Sec: 20154.94101825802
Epoch Step: 85 / 135 Loss: 6.7625041007995605 Tokens per Sec: 23004.661254507264
Epoch Step: 90 / 135 Loss: 51.10307312011719 Tokens per Sec: 22262.338950800335
Epoch Step: 95 / 135 Loss: 8.430129051208496 Tokens per Sec: 19864.82608452432
Epoch Step: 100 / 135 Loss: 8.328189849853516 Tokens per Sec: 19258.461053488234
Epoch Step: 105 / 135 Loss: 5.936262130737305 Tokens per Sec: 17627.677672171794
Epoch Step: 110 / 135 Loss: 5.437741279602051 Tokens per Sec: 17328.857764031236
Epoch Step: 115 / 135 Loss: 7.994951248168945 Tokens per Sec: 15188.849199029657
Epoch Step: 120 / 135 Loss: 6.905940532684326 Tokens per Sec: 16703.114635802576
Epoch Step: 125 / 135 Loss: 7.08968448638916 Tokens per Sec: 16799.980182623516
Epoch Step: 130 / 135 Loss: 7.848447799682617 Tokens per Sec: 16997.216972513597
Epoch Step: 135 / 135 Loss: 4.80896520614624 Tokens per Sec: 17643.675432352364
Epoch ended with duration 0:00:12.652700
Train perplexity: 1.4030682418716602
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.584045
Validation perplexity: 1.9394766450492682
Epoch 107 / 1000
Epoch Step: 5 / 135 Loss: 4.720156669616699 Tokens per Sec: 19907.965533624312
Epoch Step: 10 / 135 Loss: 8.508378982543945 Tokens per Sec: 15712.311274105417
Epoch Step: 15 / 135 Loss: 6.816828727722168 Tokens per Sec: 23131.263961291897
Epoch Step: 20 / 135 Loss: 6.670536041259766 Tokens per Sec: 17844.8315168243
Epoch Step: 25 / 135 Loss: 8.766711235046387 Tokens per Sec: 19059.192262606495
Epoch Step: 30 / 135 Loss: 41.58271408081055 Tokens per Sec: 21884.298127149956
Epoch Step: 35 / 135 Loss: 5.943323135375977 Tokens per Sec: 18330.346788344676
Epoch Step: 40 / 135 Loss: 4.468585014343262 Tokens per Sec: 18033.40867368388
Epoch Step: 45 / 135 Loss: 6.660202980041504 Tokens per Sec: 18275.544047997344
Epoch Step: 50 / 135 Loss: 4.560709476470947 Tokens per Sec: 20363.18632761347
Epoch Step: 55 / 135 Loss: 6.546057224273682 Tokens per Sec: 16472.173239036816
Epoch Step: 60 / 135 Loss: 5.414693832397461 Tokens per Sec: 21200.45319831548
Epoch Step: 65 / 135 Loss: 7.54929780960083 Tokens per Sec: 15538.24276063632
Epoch Step: 70 / 135 Loss: 66.85482025146484 Tokens per Sec: 20532.59603737967
Epoch Step: 75 / 135 Loss: 3.8659160137176514 Tokens per Sec: 19264.45329692769
Epoch Step: 80 / 135 Loss: 9.819790840148926 Tokens per Sec: 19383.635052002217
Epoch Step: 85 / 135 Loss: 6.941678047180176 Tokens per Sec: 17636.814781766927
Epoch Step: 90 / 135 Loss: 4.532297134399414 Tokens per Sec: 20980.406023603864
Epoch Step: 95 / 135 Loss: 6.273307800292969 Tokens per Sec: 20708.993503962367
Epoch Step: 100 / 135 Loss: 5.191844463348389 Tokens per Sec: 19898.783146648628
Epoch Step: 105 / 135 Loss: 7.406738758087158 Tokens per Sec: 16318.954374000949
Epoch Step: 110 / 135 Loss: 7.656166076660156 Tokens per Sec: 18444.725392502896
Epoch Step: 115 / 135 Loss: 47.10673141479492 Tokens per Sec: 16322.998601934127
Epoch Step: 120 / 135 Loss: 5.386200428009033 Tokens per Sec: 16392.276434787855
Epoch Step: 125 / 135 Loss: 6.645691394805908 Tokens per Sec: 16839.949286138715
Epoch Step: 130 / 135 Loss: 5.654701232910156 Tokens per Sec: 16441.34048102858
Epoch Step: 135 / 135 Loss: 39.28266143798828 Tokens per Sec: 18558.396150740817
Epoch ended with duration 0:00:13.694821
Train perplexity: 1.3671445130698208
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.581450
Validation perplexity: 1.7573124642365336
Epoch 108 / 1000
Epoch Step: 5 / 135 Loss: 9.918709754943848 Tokens per Sec: 19585.254043868354
Epoch Step: 10 / 135 Loss: 6.688006401062012 Tokens per Sec: 19969.965515453885
Epoch Step: 15 / 135 Loss: 6.8451995849609375 Tokens per Sec: 20313.957205265553
Epoch Step: 20 / 135 Loss: 4.395607948303223 Tokens per Sec: 16216.2512984801
Epoch Step: 25 / 135 Loss: 6.617502689361572 Tokens per Sec: 16338.754402970062
Epoch Step: 30 / 135 Loss: 5.367356777191162 Tokens per Sec: 17015.34124441357
Epoch Step: 35 / 135 Loss: 4.9449872970581055 Tokens per Sec: 21199.488579219742
Epoch Step: 40 / 135 Loss: 7.694082260131836 Tokens per Sec: 17780.22827192837
Epoch Step: 45 / 135 Loss: 5.750176429748535 Tokens per Sec: 18313.022342867636
Epoch Step: 50 / 135 Loss: 6.4416327476501465 Tokens per Sec: 20587.806276534975
Epoch Step: 55 / 135 Loss: 9.081833839416504 Tokens per Sec: 16761.15883190771
Epoch Step: 60 / 135 Loss: 7.3753886222839355 Tokens per Sec: 21866.812266461307
Epoch Step: 65 / 135 Loss: 3.9350686073303223 Tokens per Sec: 19685.665308434545
Epoch Step: 70 / 135 Loss: 6.98152494430542 Tokens per Sec: 20310.44720941348
Epoch Step: 75 / 135 Loss: 5.34913444519043 Tokens per Sec: 19920.134787117207
Epoch Step: 80 / 135 Loss: 7.123312950134277 Tokens per Sec: 19552.522774641107
Epoch Step: 85 / 135 Loss: 6.9469523429870605 Tokens per Sec: 21422.66281899283
Epoch Step: 90 / 135 Loss: 4.33261251449585 Tokens per Sec: 22479.71607459647
Epoch Step: 95 / 135 Loss: 38.36754608154297 Tokens per Sec: 19539.218834001178
Epoch Step: 100 / 135 Loss: 8.474072456359863 Tokens per Sec: 18778.59920536976
Epoch Step: 105 / 135 Loss: 4.637782573699951 Tokens per Sec: 16973.287780128856
Epoch Step: 110 / 135 Loss: 7.590457916259766 Tokens per Sec: 17953.2553692663
Epoch Step: 115 / 135 Loss: 5.140522480010986 Tokens per Sec: 17941.305872053712
Epoch Step: 120 / 135 Loss: 6.684278964996338 Tokens per Sec: 16866.557171627945
Epoch Step: 125 / 135 Loss: 7.9665303230285645 Tokens per Sec: 16617.31021462459
Epoch Step: 130 / 135 Loss: 4.8058013916015625 Tokens per Sec: 15885.8258790309
Epoch Step: 135 / 135 Loss: 7.443739414215088 Tokens per Sec: 18088.165057645747
Epoch ended with duration 0:00:13.556673
Train perplexity: 1.3467294984127987
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.587253
Validation perplexity: 2.176112633543694
Epoch 109 / 1000
Epoch Step: 5 / 135 Loss: 7.222404956817627 Tokens per Sec: 17570.972433236107
Epoch Step: 10 / 135 Loss: 8.16335678100586 Tokens per Sec: 19868.14329853774
Epoch Step: 15 / 135 Loss: 5.238034725189209 Tokens per Sec: 18656.864760331577
Epoch Step: 20 / 135 Loss: 4.293239593505859 Tokens per Sec: 17379.106463546424
Epoch Step: 25 / 135 Loss: 6.396543502807617 Tokens per Sec: 20720.358765012636
Epoch Step: 30 / 135 Loss: 7.679373264312744 Tokens per Sec: 16646.25512004185
Epoch Step: 35 / 135 Loss: 7.813370227813721 Tokens per Sec: 20623.617599821904
Epoch Step: 40 / 135 Loss: 8.607009887695312 Tokens per Sec: 19200.293799440675
Epoch Step: 45 / 135 Loss: 5.661196231842041 Tokens per Sec: 18793.55714691439
Epoch Step: 50 / 135 Loss: 5.521150588989258 Tokens per Sec: 19748.781998178667
Epoch Step: 55 / 135 Loss: 4.0248942375183105 Tokens per Sec: 17314.97730889788
Epoch Step: 60 / 135 Loss: 5.135025501251221 Tokens per Sec: 16875.996367165662
Epoch Step: 65 / 135 Loss: 4.83519983291626 Tokens per Sec: 17794.92317072444
Epoch Step: 70 / 135 Loss: 7.706850528717041 Tokens per Sec: 19321.053945951226
Epoch Step: 75 / 135 Loss: 5.482327938079834 Tokens per Sec: 18429.28768819312
Epoch Step: 80 / 135 Loss: 6.630376815795898 Tokens per Sec: 18712.419533476852
Epoch Step: 85 / 135 Loss: 6.024455547332764 Tokens per Sec: 20123.386290722487
Epoch Step: 90 / 135 Loss: 72.60975646972656 Tokens per Sec: 21118.0448595801
Epoch Step: 95 / 135 Loss: 5.41598653793335 Tokens per Sec: 20651.084567770577
Epoch Step: 100 / 135 Loss: 10.826602935791016 Tokens per Sec: 20250.46059372563
Epoch Step: 105 / 135 Loss: 5.376092433929443 Tokens per Sec: 18111.77931601732
Epoch Step: 110 / 135 Loss: 6.561617851257324 Tokens per Sec: 18204.341755067675
Epoch Step: 115 / 135 Loss: 6.661289215087891 Tokens per Sec: 16476.543990172817
Epoch Step: 120 / 135 Loss: 5.589568138122559 Tokens per Sec: 16183.774222300048
Epoch Step: 125 / 135 Loss: 49.75324249267578 Tokens per Sec: 18749.538918101203
Epoch Step: 130 / 135 Loss: 4.580421447753906 Tokens per Sec: 15688.500079473964
Epoch Step: 135 / 135 Loss: 7.8017754554748535 Tokens per Sec: 19138.97184055295
Epoch ended with duration 0:00:13.647485
Train perplexity: 1.457535914546613
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.577419
Validation perplexity: 1.4913241961050605
Model saved best_on_validation!
Epoch 110 / 1000
Epoch Step: 5 / 135 Loss: 7.2181501388549805 Tokens per Sec: 16432.582707053825
Epoch Step: 10 / 135 Loss: 6.4530863761901855 Tokens per Sec: 20125.66048965135
Epoch Step: 15 / 135 Loss: 5.608587265014648 Tokens per Sec: 20937.37798456976
Epoch Step: 20 / 135 Loss: 62.16043472290039 Tokens per Sec: 17066.747763142994
Epoch Step: 25 / 135 Loss: 4.499962329864502 Tokens per Sec: 18973.904490897814
Epoch Step: 30 / 135 Loss: 10.427358627319336 Tokens per Sec: 20537.41055678637
Epoch Step: 35 / 135 Loss: 4.477217674255371 Tokens per Sec: 17502.583204741866
Epoch Step: 40 / 135 Loss: 5.4885687828063965 Tokens per Sec: 16976.565482068254
Epoch Step: 45 / 135 Loss: 6.253329277038574 Tokens per Sec: 21826.223209369862
Epoch Step: 50 / 135 Loss: 6.102078914642334 Tokens per Sec: 21951.505195228347
Epoch Step: 55 / 135 Loss: 8.455170631408691 Tokens per Sec: 14008.063386769854
Epoch Step: 60 / 135 Loss: 8.459275245666504 Tokens per Sec: 20441.264201959984
Epoch Step: 65 / 135 Loss: 5.693943500518799 Tokens per Sec: 20479.90554705941
Epoch Step: 70 / 135 Loss: 7.126864433288574 Tokens per Sec: 21285.087431289998
Epoch Step: 75 / 135 Loss: 10.456437110900879 Tokens per Sec: 19416.99684918691
Epoch Step: 80 / 135 Loss: 4.057276725769043 Tokens per Sec: 18524.53567862275
Epoch Step: 85 / 135 Loss: 5.524274826049805 Tokens per Sec: 21573.25848846761
Epoch Step: 90 / 135 Loss: 4.204000949859619 Tokens per Sec: 17803.737075049597
Epoch Step: 95 / 135 Loss: 5.139195442199707 Tokens per Sec: 20966.703479113672
Epoch Step: 100 / 135 Loss: 5.836103916168213 Tokens per Sec: 18058.719626664908
Epoch Step: 105 / 135 Loss: 4.849058151245117 Tokens per Sec: 16576.845749733595
Epoch Step: 110 / 135 Loss: 7.918332576751709 Tokens per Sec: 17298.98242905623
Epoch Step: 115 / 135 Loss: 7.126766204833984 Tokens per Sec: 18418.63351680137
Epoch Step: 120 / 135 Loss: 5.7052321434021 Tokens per Sec: 16789.840249219964
Epoch Step: 125 / 135 Loss: 6.517186641693115 Tokens per Sec: 16638.2453254373
Epoch Step: 130 / 135 Loss: 5.744950771331787 Tokens per Sec: 16578.01173057754
Epoch Step: 135 / 135 Loss: 6.005347728729248 Tokens per Sec: 18209.595706022686
Epoch ended with duration 0:00:13.604895
Train perplexity: 1.4241941228043573
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.583820
Validation perplexity: 1.8257012647421993
Model saved checkpoint!
Epoch 111 / 1000
Epoch Step: 5 / 135 Loss: 6.84124231338501 Tokens per Sec: 18664.581125996574
Epoch Step: 10 / 135 Loss: 7.156071186065674 Tokens per Sec: 20135.22976693951
Epoch Step: 15 / 135 Loss: 4.616088390350342 Tokens per Sec: 20741.93773595967
Epoch Step: 20 / 135 Loss: 9.463623046875 Tokens per Sec: 18141.629065942223
Epoch Step: 25 / 135 Loss: 8.58175277709961 Tokens per Sec: 20537.527102901233
Epoch Step: 30 / 135 Loss: 7.053675651550293 Tokens per Sec: 21571.97554181697
Epoch Step: 35 / 135 Loss: 6.646475791931152 Tokens per Sec: 20242.1758270828
Epoch Step: 40 / 135 Loss: 5.056646823883057 Tokens per Sec: 19366.036447002767
Epoch Step: 45 / 135 Loss: 4.047495365142822 Tokens per Sec: 19152.775724547606
Epoch Step: 50 / 135 Loss: 4.216261863708496 Tokens per Sec: 20395.973610502588
Epoch Step: 55 / 135 Loss: 8.038274765014648 Tokens per Sec: 18490.822804860487
Epoch Step: 60 / 135 Loss: 6.412351131439209 Tokens per Sec: 22606.638461527335
Epoch Step: 65 / 135 Loss: 7.127735137939453 Tokens per Sec: 18211.86902721795
Epoch Step: 70 / 135 Loss: 7.741534233093262 Tokens per Sec: 20434.9785590162
Epoch Step: 75 / 135 Loss: 4.146617412567139 Tokens per Sec: 13236.354147009195
Epoch Step: 80 / 135 Loss: 8.661445617675781 Tokens per Sec: 17828.089671901682
Epoch Step: 85 / 135 Loss: 53.79856491088867 Tokens per Sec: 18281.232175937253
Epoch Step: 90 / 135 Loss: 7.954238414764404 Tokens per Sec: 17178.3779632438
Epoch Step: 95 / 135 Loss: 4.248380184173584 Tokens per Sec: 15449.997795998399
Epoch Step: 100 / 135 Loss: 6.953243255615234 Tokens per Sec: 22420.16680453433
Epoch Step: 105 / 135 Loss: 5.6435866355896 Tokens per Sec: 17235.926187331122
Epoch Step: 110 / 135 Loss: 7.446724891662598 Tokens per Sec: 17735.32663347077
Epoch Step: 115 / 135 Loss: 6.095614433288574 Tokens per Sec: 15157.414459818565
Epoch Step: 120 / 135 Loss: 6.6643218994140625 Tokens per Sec: 15170.112639307361
Epoch Step: 125 / 135 Loss: 5.990735054016113 Tokens per Sec: 17731.521180992004
Epoch Step: 130 / 135 Loss: 15.359633445739746 Tokens per Sec: 16969.611583304162
Epoch Step: 135 / 135 Loss: 5.480315208435059 Tokens per Sec: 19146.437368208604
Epoch ended with duration 0:00:13.662058
Train perplexity: 1.4298113266873318
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.590444
Validation perplexity: 2.4080449154558106
Epoch 112 / 1000
Epoch Step: 5 / 135 Loss: 3.8584766387939453 Tokens per Sec: 15230.927964531409
Epoch Step: 10 / 135 Loss: 5.910517692565918 Tokens per Sec: 20831.53413791841
Epoch Step: 15 / 135 Loss: 9.468828201293945 Tokens per Sec: 18974.718066288762
Epoch Step: 20 / 135 Loss: 5.524735927581787 Tokens per Sec: 20606.733336910216
Epoch Step: 25 / 135 Loss: 4.596303939819336 Tokens per Sec: 14969.248801394064
Epoch Step: 30 / 135 Loss: 9.112919807434082 Tokens per Sec: 20271.445493416206
Epoch Step: 35 / 135 Loss: 5.098752498626709 Tokens per Sec: 20536.45456951485
Epoch Step: 40 / 135 Loss: 7.94936990737915 Tokens per Sec: 21015.268470421626
Epoch Step: 45 / 135 Loss: 4.296238899230957 Tokens per Sec: 18070.902634743285
Epoch Step: 50 / 135 Loss: 4.773728370666504 Tokens per Sec: 16242.71050791545
Epoch Step: 55 / 135 Loss: 4.835251808166504 Tokens per Sec: 20380.806985379186
Epoch Step: 60 / 135 Loss: 6.464152812957764 Tokens per Sec: 21189.31680254867
Epoch Step: 65 / 135 Loss: 6.628819465637207 Tokens per Sec: 18247.99932834905
Epoch Step: 70 / 135 Loss: 6.94025182723999 Tokens per Sec: 22738.745983066307
Epoch Step: 75 / 135 Loss: 6.088493347167969 Tokens per Sec: 17856.008052492878
Epoch Step: 80 / 135 Loss: 6.964535713195801 Tokens per Sec: 19063.689304850108
Epoch Step: 85 / 135 Loss: 7.339210033416748 Tokens per Sec: 18198.608503702813
Epoch Step: 90 / 135 Loss: 6.634629726409912 Tokens per Sec: 22091.986497497383
Epoch Step: 95 / 135 Loss: 72.61869049072266 Tokens per Sec: 22041.480410669636
Epoch Step: 100 / 135 Loss: 4.531789302825928 Tokens per Sec: 15720.514106472774
Epoch Step: 105 / 135 Loss: 6.468438148498535 Tokens per Sec: 14875.0448372191
Epoch Step: 110 / 135 Loss: 8.9413480758667 Tokens per Sec: 16641.582211459725
Epoch Step: 115 / 135 Loss: 10.03002643585205 Tokens per Sec: 18690.184332163106
Epoch Step: 120 / 135 Loss: 8.303925514221191 Tokens per Sec: 17535.962454362234
Epoch Step: 125 / 135 Loss: 7.546821594238281 Tokens per Sec: 18095.63627075351
Epoch Step: 130 / 135 Loss: 6.607425689697266 Tokens per Sec: 17485.433729843146
Epoch Step: 135 / 135 Loss: 4.123691558837891 Tokens per Sec: 15432.697207320269
Epoch ended with duration 0:00:13.702263
Train perplexity: 1.4956033348769928
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.588084
Validation perplexity: 1.9334820662757306
Epoch 113 / 1000
Epoch Step: 5 / 135 Loss: 5.691908359527588 Tokens per Sec: 18062.07623944725
Epoch Step: 10 / 135 Loss: 7.408140659332275 Tokens per Sec: 21131.435533445954
Epoch Step: 15 / 135 Loss: 7.449790000915527 Tokens per Sec: 20358.95455727303
Epoch Step: 20 / 135 Loss: 65.7864990234375 Tokens per Sec: 17786.772508373822
Epoch Step: 25 / 135 Loss: 3.4803733825683594 Tokens per Sec: 20387.6589735076
Epoch Step: 30 / 135 Loss: 6.096407890319824 Tokens per Sec: 18522.691233113514
Epoch Step: 35 / 135 Loss: 42.20554733276367 Tokens per Sec: 19952.248102237416
Epoch Step: 40 / 135 Loss: 5.2142486572265625 Tokens per Sec: 17287.985451882403
Epoch Step: 45 / 135 Loss: 6.783053874969482 Tokens per Sec: 16106.321915386652
Epoch Step: 50 / 135 Loss: 66.1695556640625 Tokens per Sec: 20796.860132525406
Epoch Step: 55 / 135 Loss: 6.265209674835205 Tokens per Sec: 19742.65744091465
Epoch Step: 60 / 135 Loss: 31.87480926513672 Tokens per Sec: 15454.817853191002
Epoch Step: 65 / 135 Loss: 8.994306564331055 Tokens per Sec: 18013.411452954424
Epoch Step: 70 / 135 Loss: 8.67992877960205 Tokens per Sec: 20630.005253813095
Epoch Step: 75 / 135 Loss: 5.748486042022705 Tokens per Sec: 20986.858400867026
Epoch Step: 80 / 135 Loss: 8.72362232208252 Tokens per Sec: 20402.76898889919
Epoch Step: 85 / 135 Loss: 7.440108776092529 Tokens per Sec: 18915.644751864624
Epoch Step: 90 / 135 Loss: 8.225703239440918 Tokens per Sec: 21458.301262203673
Epoch Step: 95 / 135 Loss: 54.67415237426758 Tokens per Sec: 20071.356580532232
Epoch Step: 100 / 135 Loss: 8.619422912597656 Tokens per Sec: 17968.247714585246
Epoch Step: 105 / 135 Loss: 6.1302337646484375 Tokens per Sec: 17564.331533896704
Epoch Step: 110 / 135 Loss: 7.388373374938965 Tokens per Sec: 16767.631090368533
Epoch Step: 115 / 135 Loss: 5.563098907470703 Tokens per Sec: 17331.437216434595
Epoch Step: 120 / 135 Loss: 8.824117660522461 Tokens per Sec: 17766.893011499134
Epoch Step: 125 / 135 Loss: 5.469186305999756 Tokens per Sec: 16951.6356353218
Epoch Step: 130 / 135 Loss: 61.571319580078125 Tokens per Sec: 19129.703164839215
Epoch Step: 135 / 135 Loss: 7.364786148071289 Tokens per Sec: 15729.904547628274
Epoch ended with duration 0:00:13.591908
Train perplexity: 1.5048291122501039
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.576738
Validation perplexity: 1.5090708057202433
Epoch 114 / 1000
Epoch Step: 5 / 135 Loss: 55.976871490478516 Tokens per Sec: 17717.76696273473
Epoch Step: 10 / 135 Loss: 7.071816444396973 Tokens per Sec: 21304.292771635843
Epoch Step: 15 / 135 Loss: 7.6648478507995605 Tokens per Sec: 22130.954345813057
Epoch Step: 20 / 135 Loss: 5.169470310211182 Tokens per Sec: 19454.8128322331
Epoch Step: 25 / 135 Loss: 6.774954319000244 Tokens per Sec: 17874.44850586369
Epoch Step: 30 / 135 Loss: 7.228423118591309 Tokens per Sec: 17971.21776757955
Epoch Step: 35 / 135 Loss: 8.493849754333496 Tokens per Sec: 20805.21168409142
Epoch Step: 40 / 135 Loss: 4.432897567749023 Tokens per Sec: 19704.994979343635
Epoch Step: 45 / 135 Loss: 6.463710784912109 Tokens per Sec: 23727.684821052284
Epoch Step: 50 / 135 Loss: 9.069740295410156 Tokens per Sec: 18649.52840533159
Epoch Step: 55 / 135 Loss: 4.7501654624938965 Tokens per Sec: 19406.967865174778
Epoch Step: 60 / 135 Loss: 25.540924072265625 Tokens per Sec: 19827.661432372905
Epoch Step: 65 / 135 Loss: 3.862652540206909 Tokens per Sec: 20530.881203952107
Epoch Step: 70 / 135 Loss: 5.583050727844238 Tokens per Sec: 15614.755522737063
Epoch Step: 75 / 135 Loss: 8.511866569519043 Tokens per Sec: 17035.897341929973
Epoch Step: 80 / 135 Loss: 5.45709753036499 Tokens per Sec: 18396.630897662348
Epoch Step: 85 / 135 Loss: 6.921542167663574 Tokens per Sec: 15983.12585532425
Epoch Step: 90 / 135 Loss: 5.008649826049805 Tokens per Sec: 20014.06481718423
Epoch Step: 95 / 135 Loss: 6.24744987487793 Tokens per Sec: 20195.88746162404
Epoch Step: 100 / 135 Loss: 4.7919697761535645 Tokens per Sec: 18284.966821009846
Epoch Step: 105 / 135 Loss: 4.872463703155518 Tokens per Sec: 16610.074897461473
Epoch Step: 110 / 135 Loss: 7.177403450012207 Tokens per Sec: 16667.010665215374
Epoch Step: 115 / 135 Loss: 6.576740741729736 Tokens per Sec: 19607.211510879115
Epoch Step: 120 / 135 Loss: 5.604696750640869 Tokens per Sec: 14939.039428223474
Epoch Step: 125 / 135 Loss: 4.438929080963135 Tokens per Sec: 15863.885897214499
Epoch Step: 130 / 135 Loss: 7.356450080871582 Tokens per Sec: 18607.21734709062
Epoch Step: 135 / 135 Loss: 5.882794380187988 Tokens per Sec: 16653.436659615934
Epoch ended with duration 0:00:13.654801
Train perplexity: 1.4535534350839037
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.587967
Validation perplexity: 2.2735957196126177
Epoch 115 / 1000
Epoch Step: 5 / 135 Loss: 4.799259185791016 Tokens per Sec: 20202.917412081373
Epoch Step: 10 / 135 Loss: 6.7487640380859375 Tokens per Sec: 22221.272869629134
Epoch Step: 15 / 135 Loss: 7.2714314460754395 Tokens per Sec: 22583.515781656144
Epoch Step: 20 / 135 Loss: 4.480860233306885 Tokens per Sec: 16934.0647459618
Epoch Step: 25 / 135 Loss: 5.173028945922852 Tokens per Sec: 17596.95487797741
Epoch Step: 30 / 135 Loss: 6.910017967224121 Tokens per Sec: 21129.975322320242
Epoch Step: 35 / 135 Loss: 6.773589134216309 Tokens per Sec: 20866.45049851114
Epoch Step: 40 / 135 Loss: 5.250661849975586 Tokens per Sec: 18811.10834041646
Epoch Step: 45 / 135 Loss: 5.462726593017578 Tokens per Sec: 17383.926166762423
Epoch Step: 50 / 135 Loss: 17.599952697753906 Tokens per Sec: 17124.155368107255
Epoch Step: 55 / 135 Loss: 6.211709499359131 Tokens per Sec: 17481.81103447908
Epoch Step: 60 / 135 Loss: 29.621891021728516 Tokens per Sec: 22223.04488776985
Epoch Step: 65 / 135 Loss: 8.109430313110352 Tokens per Sec: 19152.007446861095
Epoch Step: 70 / 135 Loss: 6.4329023361206055 Tokens per Sec: 16175.01328088343
Epoch Step: 75 / 135 Loss: 8.072319984436035 Tokens per Sec: 16947.03669327264
Epoch Step: 80 / 135 Loss: 30.066356658935547 Tokens per Sec: 20190.26022995113
Epoch Step: 85 / 135 Loss: 6.182311058044434 Tokens per Sec: 19241.00950674646
Epoch Step: 90 / 135 Loss: 8.548160552978516 Tokens per Sec: 16874.259936663868
Epoch Step: 95 / 135 Loss: 5.256171226501465 Tokens per Sec: 20075.832444850323
Epoch Step: 100 / 135 Loss: 88.6794204711914 Tokens per Sec: 19740.128040876403
Epoch Step: 105 / 135 Loss: 6.639631271362305 Tokens per Sec: 16217.833671399594
Epoch Step: 110 / 135 Loss: 7.988363742828369 Tokens per Sec: 17951.10329828752
Epoch Step: 115 / 135 Loss: 8.171469688415527 Tokens per Sec: 18416.146094340962
Epoch Step: 120 / 135 Loss: 5.502030372619629 Tokens per Sec: 17857.579985951994
Epoch Step: 125 / 135 Loss: 6.176762580871582 Tokens per Sec: 16028.80474223409
Epoch Step: 130 / 135 Loss: 6.484524726867676 Tokens per Sec: 15489.582241266107
Epoch Step: 135 / 135 Loss: 6.673771381378174 Tokens per Sec: 18832.59192007772
Epoch ended with duration 0:00:13.649103
Train perplexity: 1.4265697984940502
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.584619
Validation perplexity: 2.1513408763482964
Model saved checkpoint!
Epoch 116 / 1000
Epoch Step: 5 / 135 Loss: 27.547658920288086 Tokens per Sec: 17218.34920272342
Epoch Step: 10 / 135 Loss: 7.042425155639648 Tokens per Sec: 20472.528628016575
Epoch Step: 15 / 135 Loss: 3.4678523540496826 Tokens per Sec: 16143.060095420391
Epoch Step: 20 / 135 Loss: 3.7206718921661377 Tokens per Sec: 18369.752883043962
Epoch Step: 25 / 135 Loss: 6.826039791107178 Tokens per Sec: 19473.5300579658
Epoch Step: 30 / 135 Loss: 7.928635120391846 Tokens per Sec: 22187.80293243557
Epoch Step: 35 / 135 Loss: 7.8964948654174805 Tokens per Sec: 18152.40318216857
Epoch Step: 40 / 135 Loss: 3.507904291152954 Tokens per Sec: 18587.35374569337
Epoch Step: 45 / 135 Loss: 52.23017883300781 Tokens per Sec: 22389.13175217839
Epoch Step: 50 / 135 Loss: 3.604398012161255 Tokens per Sec: 19228.6876927443
Epoch Step: 55 / 135 Loss: 3.672783374786377 Tokens per Sec: 19652.692892052484
Epoch Step: 60 / 135 Loss: 4.68432092666626 Tokens per Sec: 16888.41950912564
Epoch Step: 65 / 135 Loss: 7.837015151977539 Tokens per Sec: 19416.96479830215
Epoch Step: 70 / 135 Loss: 4.82346773147583 Tokens per Sec: 18250.65295428063
Epoch Step: 75 / 135 Loss: 6.039324760437012 Tokens per Sec: 18906.226498980915
Epoch Step: 80 / 135 Loss: 6.860708713531494 Tokens per Sec: 20132.534829128468
Epoch Step: 85 / 135 Loss: 5.631124019622803 Tokens per Sec: 21842.531639828376
Epoch Step: 90 / 135 Loss: 7.467978000640869 Tokens per Sec: 21531.326445247
Epoch Step: 95 / 135 Loss: 6.161073684692383 Tokens per Sec: 18690.126094061587
Epoch Step: 100 / 135 Loss: 6.552760124206543 Tokens per Sec: 18153.011275789107
Epoch Step: 105 / 135 Loss: 4.560433387756348 Tokens per Sec: 16441.587803292077
Epoch Step: 110 / 135 Loss: 7.97764253616333 Tokens per Sec: 19337.202483873432
Epoch Step: 115 / 135 Loss: 6.888088703155518 Tokens per Sec: 16814.468761175056
Epoch Step: 120 / 135 Loss: 7.87832498550415 Tokens per Sec: 17343.9138490304
Epoch Step: 125 / 135 Loss: 5.503139019012451 Tokens per Sec: 17639.44312959858
Epoch Step: 130 / 135 Loss: 5.674093246459961 Tokens per Sec: 16251.631002411816
Epoch Step: 135 / 135 Loss: 4.923500061035156 Tokens per Sec: 15063.880047426754
Epoch ended with duration 0:00:13.624408
Train perplexity: 1.397861986008933
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.586427
Validation perplexity: 2.0344878816001115
Epoch 117 / 1000
Epoch Step: 5 / 135 Loss: 6.289856433868408 Tokens per Sec: 21549.781185124346
Epoch Step: 10 / 135 Loss: 6.897940635681152 Tokens per Sec: 16874.09575938277
Epoch Step: 15 / 135 Loss: 7.3723554611206055 Tokens per Sec: 19789.55802424611
Epoch Step: 20 / 135 Loss: 4.604316711425781 Tokens per Sec: 20290.92501535574
Epoch Step: 25 / 135 Loss: 10.18465805053711 Tokens per Sec: 19563.441625745756
Epoch Step: 30 / 135 Loss: 4.63027286529541 Tokens per Sec: 16216.54915741888
Epoch Step: 35 / 135 Loss: 6.906682968139648 Tokens per Sec: 19652.649697494406
Epoch Step: 40 / 135 Loss: 3.9975671768188477 Tokens per Sec: 18062.429177726266
Epoch Step: 45 / 135 Loss: 7.390937805175781 Tokens per Sec: 19128.64933053251
Epoch Step: 50 / 135 Loss: 6.879183292388916 Tokens per Sec: 19164.594342077726
Epoch Step: 55 / 135 Loss: 6.779501438140869 Tokens per Sec: 21923.029727544643
Epoch Step: 60 / 135 Loss: 57.801143646240234 Tokens per Sec: 21211.977068226985
Epoch Step: 65 / 135 Loss: 3.1478798389434814 Tokens per Sec: 17976.98644807702
Epoch Step: 70 / 135 Loss: 4.121628284454346 Tokens per Sec: 15558.233257267773
Epoch Step: 75 / 135 Loss: 5.666546821594238 Tokens per Sec: 20857.32688741016
Epoch Step: 80 / 135 Loss: 6.441770553588867 Tokens per Sec: 21342.636283935193
Epoch Step: 85 / 135 Loss: 6.171070098876953 Tokens per Sec: 17356.879860333724
Epoch Step: 90 / 135 Loss: 6.956751346588135 Tokens per Sec: 18938.967049904844
Epoch Step: 95 / 135 Loss: 6.635486602783203 Tokens per Sec: 20336.10214231202
Epoch Step: 100 / 135 Loss: 8.1583833694458 Tokens per Sec: 18534.36939270216
Epoch Step: 105 / 135 Loss: 5.370940208435059 Tokens per Sec: 17659.062649056646
Epoch Step: 110 / 135 Loss: 4.96463680267334 Tokens per Sec: 18483.671519110794
Epoch Step: 115 / 135 Loss: 5.47089958190918 Tokens per Sec: 14949.777512398681
Epoch Step: 120 / 135 Loss: 7.862133026123047 Tokens per Sec: 16983.589942157767
Epoch Step: 125 / 135 Loss: 5.957198619842529 Tokens per Sec: 16382.934807611804
Epoch Step: 130 / 135 Loss: 6.643316745758057 Tokens per Sec: 16295.508764235627
Epoch Step: 135 / 135 Loss: 4.284752368927002 Tokens per Sec: 17193.851795680377
Epoch ended with duration 0:00:13.720294
Train perplexity: 1.421703599075822
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.580386
Validation perplexity: 1.64131689050467
Epoch 118 / 1000
Epoch Step: 5 / 135 Loss: 7.629697799682617 Tokens per Sec: 16439.43281394577
Epoch Step: 10 / 135 Loss: 4.144381046295166 Tokens per Sec: 20103.79042003805
Epoch Step: 15 / 135 Loss: 5.558740615844727 Tokens per Sec: 16070.519887729712
Epoch Step: 20 / 135 Loss: 77.72618103027344 Tokens per Sec: 22146.397642523923
Epoch Step: 25 / 135 Loss: 40.63486099243164 Tokens per Sec: 18358.3788510189
Epoch Step: 30 / 135 Loss: 4.721396446228027 Tokens per Sec: 17911.3629982429
Epoch Step: 35 / 135 Loss: 6.7649922370910645 Tokens per Sec: 16904.016079232366
Epoch Step: 40 / 135 Loss: 7.03825044631958 Tokens per Sec: 20166.49694899762
Epoch Step: 45 / 135 Loss: 4.482821464538574 Tokens per Sec: 17980.81982085913
Epoch Step: 50 / 135 Loss: 9.396815299987793 Tokens per Sec: 21268.269393468297
Epoch Step: 55 / 135 Loss: 5.858716011047363 Tokens per Sec: 18603.688584489133
Epoch Step: 60 / 135 Loss: 4.84255313873291 Tokens per Sec: 20630.83476456581
Epoch Step: 65 / 135 Loss: 5.312829971313477 Tokens per Sec: 20188.13929124698
Epoch Step: 70 / 135 Loss: 6.457248687744141 Tokens per Sec: 20373.541997727112
Epoch Step: 75 / 135 Loss: 9.971298217773438 Tokens per Sec: 19339.01208439531
Epoch Step: 80 / 135 Loss: 6.241985321044922 Tokens per Sec: 23082.908574106834
Epoch Step: 85 / 135 Loss: 5.047833442687988 Tokens per Sec: 19486.374119897315
Epoch Step: 90 / 135 Loss: 4.799350738525391 Tokens per Sec: 21401.186843992193
Epoch Step: 95 / 135 Loss: 4.873425483703613 Tokens per Sec: 18798.720679771017
Epoch Step: 100 / 135 Loss: 8.255859375 Tokens per Sec: 17690.10023740823
Epoch Step: 105 / 135 Loss: 43.31370162963867 Tokens per Sec: 17200.17345776332
Epoch Step: 110 / 135 Loss: 8.314704895019531 Tokens per Sec: 17946.72449229341
Epoch Step: 115 / 135 Loss: 7.120227813720703 Tokens per Sec: 17280.135786998486
Epoch Step: 120 / 135 Loss: 5.278793811798096 Tokens per Sec: 15474.409677080046
Epoch Step: 125 / 135 Loss: 4.27393102645874 Tokens per Sec: 18068.055112953396
Epoch Step: 130 / 135 Loss: 6.324086666107178 Tokens per Sec: 17970.960844999947
Epoch Step: 135 / 135 Loss: 5.626840591430664 Tokens per Sec: 15547.590103399878
Epoch ended with duration 0:00:13.637381
Train perplexity: 1.3783235543480963
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.577491
Validation perplexity: 1.549469635144376
Epoch 119 / 1000
Epoch Step: 5 / 135 Loss: 7.66068696975708 Tokens per Sec: 18062.918233632186
Epoch Step: 10 / 135 Loss: 6.838013648986816 Tokens per Sec: 19950.58121763597
Epoch Step: 15 / 135 Loss: 6.132251739501953 Tokens per Sec: 17880.717925405515
Epoch Step: 20 / 135 Loss: 4.752501010894775 Tokens per Sec: 19535.245246879527
Epoch Step: 25 / 135 Loss: 5.181364059448242 Tokens per Sec: 23096.414026624258
Epoch Step: 30 / 135 Loss: 4.883096218109131 Tokens per Sec: 19171.43579800588
Epoch Step: 35 / 135 Loss: 4.618443489074707 Tokens per Sec: 17522.97706018638
Epoch Step: 40 / 135 Loss: 70.46247863769531 Tokens per Sec: 20271.117512939505
Epoch Step: 45 / 135 Loss: 2.836047410964966 Tokens per Sec: 17546.140584592362
Epoch Step: 50 / 135 Loss: 4.669849395751953 Tokens per Sec: 21412.94244231936
Epoch Step: 55 / 135 Loss: 5.06528902053833 Tokens per Sec: 22925.47228883382
Epoch Step: 60 / 135 Loss: 6.504134178161621 Tokens per Sec: 16989.685512886103
Epoch Step: 65 / 135 Loss: 4.993747711181641 Tokens per Sec: 20914.74469784229
Epoch Step: 70 / 135 Loss: 6.3301920890808105 Tokens per Sec: 19482.401204634596
Epoch Step: 75 / 135 Loss: 9.991642951965332 Tokens per Sec: 19259.184162504174
Epoch Step: 80 / 135 Loss: 4.1381449699401855 Tokens per Sec: 20116.157257298615
Epoch Step: 85 / 135 Loss: 5.580984115600586 Tokens per Sec: 19941.421581873255
Epoch Step: 90 / 135 Loss: 4.595364570617676 Tokens per Sec: 17723.557869087457
Epoch Step: 95 / 135 Loss: 5.648891448974609 Tokens per Sec: 16450.26808654902
Epoch Step: 100 / 135 Loss: 47.436622619628906 Tokens per Sec: 16647.292639055588
Epoch Step: 105 / 135 Loss: 5.9832611083984375 Tokens per Sec: 16145.4107578873
Epoch Step: 110 / 135 Loss: 42.878726959228516 Tokens per Sec: 16755.699306660274
Epoch Step: 115 / 135 Loss: 15.952091217041016 Tokens per Sec: 16983.91732777302
Epoch Step: 120 / 135 Loss: 36.151153564453125 Tokens per Sec: 17949.789527791836
Epoch Step: 125 / 135 Loss: 28.35120391845703 Tokens per Sec: 15640.724897927308
Epoch Step: 130 / 135 Loss: 5.883359432220459 Tokens per Sec: 18562.070323450967
Epoch Step: 135 / 135 Loss: 6.484969615936279 Tokens per Sec: 17178.802959029686
Epoch ended with duration 0:00:13.655432
Train perplexity: 1.4086048928791517
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.580650
Validation perplexity: 1.774229711896742
Epoch 120 / 1000
Epoch Step: 5 / 135 Loss: 5.169697284698486 Tokens per Sec: 15889.334770130557
Epoch Step: 10 / 135 Loss: 6.754638195037842 Tokens per Sec: 18397.540253766994
Epoch Step: 15 / 135 Loss: 6.467348098754883 Tokens per Sec: 21963.83692414697
Epoch Step: 20 / 135 Loss: 6.17518949508667 Tokens per Sec: 18146.104686371033
Epoch Step: 25 / 135 Loss: 6.771160125732422 Tokens per Sec: 20119.248796889595
Epoch Step: 30 / 135 Loss: 6.726594924926758 Tokens per Sec: 20647.781264860663
Epoch Step: 35 / 135 Loss: 4.697533130645752 Tokens per Sec: 17877.08305708709
Epoch Step: 40 / 135 Loss: 6.639998912811279 Tokens per Sec: 18654.534560989254
Epoch Step: 45 / 135 Loss: 6.771154880523682 Tokens per Sec: 19852.855290376898
Epoch Step: 50 / 135 Loss: 58.61071014404297 Tokens per Sec: 18820.945097317515
Epoch Step: 55 / 135 Loss: 5.455733299255371 Tokens per Sec: 22748.411198941183
Epoch Step: 60 / 135 Loss: 3.8506991863250732 Tokens per Sec: 18057.71012307119
Epoch Step: 65 / 135 Loss: 4.090023040771484 Tokens per Sec: 21080.35858079948
Epoch Step: 70 / 135 Loss: 4.47617244720459 Tokens per Sec: 19449.904292666135
Epoch Step: 75 / 135 Loss: 4.950814723968506 Tokens per Sec: 18881.181698784414
Epoch Step: 80 / 135 Loss: 71.9078598022461 Tokens per Sec: 20478.673598961745
Epoch Step: 85 / 135 Loss: 4.289347171783447 Tokens per Sec: 19955.546249051247
Epoch Step: 90 / 135 Loss: 6.947475433349609 Tokens per Sec: 17673.916306514708
Epoch Step: 95 / 135 Loss: 47.53460693359375 Tokens per Sec: 17971.313182749815
Epoch Step: 100 / 135 Loss: 8.000588417053223 Tokens per Sec: 19379.862155822484
Epoch Step: 105 / 135 Loss: 7.26131534576416 Tokens per Sec: 18080.943684476722
Epoch Step: 110 / 135 Loss: 7.14641809463501 Tokens per Sec: 15264.740772562858
Epoch Step: 115 / 135 Loss: 54.940921783447266 Tokens per Sec: 16140.965059967455
Epoch Step: 120 / 135 Loss: 5.778210163116455 Tokens per Sec: 16935.114726692605
Epoch Step: 125 / 135 Loss: 5.924270153045654 Tokens per Sec: 15727.873612031308
Epoch Step: 130 / 135 Loss: 7.426931858062744 Tokens per Sec: 19980.82975944248
Epoch Step: 135 / 135 Loss: 6.1106061935424805 Tokens per Sec: 14460.807309821987
Epoch ended with duration 0:00:13.737795
Train perplexity: 1.504537910445396
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.582998
Validation perplexity: 1.877890869649185
Model saved checkpoint!
Epoch 121 / 1000
Epoch Step: 5 / 135 Loss: 41.91664123535156 Tokens per Sec: 16434.560751706984
Epoch Step: 10 / 135 Loss: 3.6387298107147217 Tokens per Sec: 17081.659220685655
Epoch Step: 15 / 135 Loss: 7.7644429206848145 Tokens per Sec: 17634.67134257567
Epoch Step: 20 / 135 Loss: 4.097710132598877 Tokens per Sec: 17829.340002930443
Epoch Step: 25 / 135 Loss: 3.364163875579834 Tokens per Sec: 19876.802607636197
Epoch Step: 30 / 135 Loss: 4.784092426300049 Tokens per Sec: 18584.54498626328
Epoch Step: 35 / 135 Loss: 38.097999572753906 Tokens per Sec: 19015.395016484035
Epoch Step: 40 / 135 Loss: 4.590319633483887 Tokens per Sec: 19540.496751035058
Epoch Step: 45 / 135 Loss: 7.408853054046631 Tokens per Sec: 20218.933743669095
Epoch Step: 50 / 135 Loss: 5.735161304473877 Tokens per Sec: 19240.119230842745
Epoch Step: 55 / 135 Loss: 4.48253059387207 Tokens per Sec: 20625.742856246856
Epoch Step: 60 / 135 Loss: 6.182826042175293 Tokens per Sec: 16191.426169366752
Epoch Step: 65 / 135 Loss: 3.519761562347412 Tokens per Sec: 20483.492777259595
Epoch Step: 70 / 135 Loss: 5.105468273162842 Tokens per Sec: 15131.04798949215
Epoch Step: 75 / 135 Loss: 4.498129367828369 Tokens per Sec: 19339.751111886366
Epoch Step: 80 / 135 Loss: 5.248281478881836 Tokens per Sec: 22011.230789151945
Epoch Step: 85 / 135 Loss: 7.96009635925293 Tokens per Sec: 17644.02451598407
Epoch Step: 90 / 135 Loss: 6.118024826049805 Tokens per Sec: 20259.769587359962
Epoch Step: 95 / 135 Loss: 4.4553141593933105 Tokens per Sec: 23504.895804642634
Epoch Step: 100 / 135 Loss: 7.483170032501221 Tokens per Sec: 23530.565108568917
Epoch Step: 105 / 135 Loss: 3.8231048583984375 Tokens per Sec: 15485.050135855516
Epoch Step: 110 / 135 Loss: 6.0357489585876465 Tokens per Sec: 17764.237582138958
Epoch Step: 115 / 135 Loss: 6.363975524902344 Tokens per Sec: 18168.506082501393
Epoch Step: 120 / 135 Loss: 4.574152946472168 Tokens per Sec: 16846.004013127753
Epoch Step: 125 / 135 Loss: 6.84812593460083 Tokens per Sec: 17839.152700514445
Epoch Step: 130 / 135 Loss: 7.965645790100098 Tokens per Sec: 17196.44743726375
Epoch Step: 135 / 135 Loss: 5.744485378265381 Tokens per Sec: 17440.065891588998
Epoch ended with duration 0:00:13.620435
Train perplexity: 1.3886737969983733
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.591862
Validation perplexity: 2.2728816630677877
Epoch 122 / 1000
Epoch Step: 5 / 135 Loss: 5.247486114501953 Tokens per Sec: 21540.317833100744
Epoch Step: 10 / 135 Loss: 5.422043800354004 Tokens per Sec: 19792.39407956803
Epoch Step: 15 / 135 Loss: 5.324118137359619 Tokens per Sec: 16262.850804283602
Epoch Step: 20 / 135 Loss: 5.458563804626465 Tokens per Sec: 19722.92113845698
Epoch Step: 25 / 135 Loss: 6.161588191986084 Tokens per Sec: 18099.109191196952
Epoch Step: 30 / 135 Loss: 5.097621917724609 Tokens per Sec: 19453.96179039142
Epoch Step: 35 / 135 Loss: 5.978538513183594 Tokens per Sec: 23021.251871990615
Epoch Step: 40 / 135 Loss: 4.622203826904297 Tokens per Sec: 14684.979084417433
Epoch Step: 45 / 135 Loss: 35.728065490722656 Tokens per Sec: 20313.69634252964
Epoch Step: 50 / 135 Loss: 6.003226280212402 Tokens per Sec: 18466.791490530726
Epoch Step: 55 / 135 Loss: 6.250657558441162 Tokens per Sec: 17688.396772555436
Epoch Step: 60 / 135 Loss: 41.52832794189453 Tokens per Sec: 19368.595088077152
Epoch Step: 65 / 135 Loss: 7.147542476654053 Tokens per Sec: 20302.634325911942
Epoch Step: 70 / 135 Loss: 5.656455993652344 Tokens per Sec: 15136.007604937215
Epoch Step: 75 / 135 Loss: 4.98998498916626 Tokens per Sec: 22525.880307046322
Epoch Step: 80 / 135 Loss: 4.953415870666504 Tokens per Sec: 16412.72997932777
Epoch Step: 85 / 135 Loss: 6.123774528503418 Tokens per Sec: 20425.800468492656
Epoch Step: 90 / 135 Loss: 3.950734853744507 Tokens per Sec: 17290.65568985957
Epoch Step: 95 / 135 Loss: 4.820589065551758 Tokens per Sec: 22398.018708450003
Epoch Step: 100 / 135 Loss: 6.091571807861328 Tokens per Sec: 20467.9647300877
Epoch Step: 105 / 135 Loss: 7.610940933227539 Tokens per Sec: 18067.159042347477
Epoch Step: 110 / 135 Loss: 6.539822578430176 Tokens per Sec: 16139.965516709231
Epoch Step: 115 / 135 Loss: 5.5304155349731445 Tokens per Sec: 17666.254863911472
Epoch Step: 120 / 135 Loss: 7.035626411437988 Tokens per Sec: 16686.085255687387
Epoch Step: 125 / 135 Loss: 5.382628440856934 Tokens per Sec: 15596.804408288079
Epoch Step: 130 / 135 Loss: 6.005886554718018 Tokens per Sec: 16830.6390090636
Epoch Step: 135 / 135 Loss: 6.661283016204834 Tokens per Sec: 18505.62019348568
Epoch ended with duration 0:00:13.690034
Train perplexity: 1.310131969604957
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.581929
Validation perplexity: 2.2210937627991525
Epoch 123 / 1000
Epoch Step: 5 / 135 Loss: 7.125537872314453 Tokens per Sec: 14994.205924859121
Epoch Step: 10 / 135 Loss: 6.771456718444824 Tokens per Sec: 23034.589434055397
Epoch Step: 15 / 135 Loss: 3.777085542678833 Tokens per Sec: 16754.161956471475
Epoch Step: 20 / 135 Loss: 6.918531894683838 Tokens per Sec: 18294.723278671223
Epoch Step: 25 / 135 Loss: 42.61589813232422 Tokens per Sec: 23250.79426942803
Epoch Step: 30 / 135 Loss: 4.953121662139893 Tokens per Sec: 22957.42299116
Epoch Step: 35 / 135 Loss: 4.023609638214111 Tokens per Sec: 17511.928954340703
Epoch Step: 40 / 135 Loss: 4.312549114227295 Tokens per Sec: 20587.70485185314
Epoch Step: 45 / 135 Loss: 5.7594804763793945 Tokens per Sec: 15320.161656229853
Epoch Step: 50 / 135 Loss: 4.273090839385986 Tokens per Sec: 20499.362855177907
Epoch Step: 55 / 135 Loss: 5.432013034820557 Tokens per Sec: 19102.956093999965
Epoch Step: 60 / 135 Loss: 6.760200500488281 Tokens per Sec: 17922.615324165028
Epoch Step: 65 / 135 Loss: 5.953854560852051 Tokens per Sec: 21257.33776103676
Epoch Step: 70 / 135 Loss: 41.735069274902344 Tokens per Sec: 18456.68098926221
Epoch Step: 75 / 135 Loss: 41.051021575927734 Tokens per Sec: 20178.38749760564
Epoch Step: 80 / 135 Loss: 43.233943939208984 Tokens per Sec: 18297.67067882123
Epoch Step: 85 / 135 Loss: 76.64708709716797 Tokens per Sec: 21786.903786064602
Epoch Step: 90 / 135 Loss: 5.153842926025391 Tokens per Sec: 18663.27895882002
Epoch Step: 95 / 135 Loss: 6.461695194244385 Tokens per Sec: 21457.667515627396
Epoch Step: 100 / 135 Loss: 4.38567590713501 Tokens per Sec: 17752.86193613623
Epoch Step: 105 / 135 Loss: 6.961713790893555 Tokens per Sec: 17628.009903097245
Epoch Step: 110 / 135 Loss: 7.353180885314941 Tokens per Sec: 16635.703719075424
Epoch Step: 115 / 135 Loss: 7.967415809631348 Tokens per Sec: 16363.459412337164
Epoch Step: 120 / 135 Loss: 6.283353805541992 Tokens per Sec: 18309.55615743271
Epoch Step: 125 / 135 Loss: 5.4430365562438965 Tokens per Sec: 16055.794223383316
Epoch Step: 130 / 135 Loss: 5.963603973388672 Tokens per Sec: 17744.546715231983
Epoch Step: 135 / 135 Loss: 4.5668439865112305 Tokens per Sec: 15227.31998355893
Epoch ended with duration 0:00:13.596170
Train perplexity: 1.543142824750479
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.577605
Validation perplexity: 1.5632979682729826
Epoch 124 / 1000
Epoch Step: 5 / 135 Loss: 5.359318733215332 Tokens per Sec: 19752.42338180902
Epoch Step: 10 / 135 Loss: 4.368321895599365 Tokens per Sec: 16694.26037494371
Epoch Step: 15 / 135 Loss: 4.694217681884766 Tokens per Sec: 21210.886009264952
Epoch Step: 20 / 135 Loss: 4.181443691253662 Tokens per Sec: 23098.015957265674
Epoch Step: 25 / 135 Loss: 3.9533636569976807 Tokens per Sec: 15948.817550582735
Epoch Step: 30 / 135 Loss: 6.335270404815674 Tokens per Sec: 14820.514106347475
Epoch Step: 35 / 135 Loss: 7.534308433532715 Tokens per Sec: 20537.401323958195
Epoch Step: 40 / 135 Loss: 6.638241767883301 Tokens per Sec: 17422.22428707795
Epoch Step: 45 / 135 Loss: 5.669008255004883 Tokens per Sec: 21138.04609115877
Epoch Step: 50 / 135 Loss: 6.815718650817871 Tokens per Sec: 16761.3987624035
Epoch Step: 55 / 135 Loss: 7.0219244956970215 Tokens per Sec: 20022.762505828745
Epoch Step: 60 / 135 Loss: 4.686916828155518 Tokens per Sec: 20047.359862844452
Epoch Step: 65 / 135 Loss: 6.93394136428833 Tokens per Sec: 18786.254352213284
Epoch Step: 70 / 135 Loss: 6.314699649810791 Tokens per Sec: 20689.575375777506
Epoch Step: 75 / 135 Loss: 4.8827643394470215 Tokens per Sec: 19605.254846090542
Epoch Step: 80 / 135 Loss: 4.91687536239624 Tokens per Sec: 20629.065692892822
Epoch Step: 85 / 135 Loss: 6.706727981567383 Tokens per Sec: 19806.105744120123
Epoch Step: 90 / 135 Loss: 4.211954116821289 Tokens per Sec: 18385.97822858368
Epoch Step: 95 / 135 Loss: 4.5157999992370605 Tokens per Sec: 17590.264835105816
Epoch Step: 100 / 135 Loss: 5.3175129890441895 Tokens per Sec: 20350.260098827166
Epoch Step: 105 / 135 Loss: 54.747657775878906 Tokens per Sec: 15122.545962770322
Epoch Step: 110 / 135 Loss: 7.1156182289123535 Tokens per Sec: 17558.987955965018
Epoch Step: 115 / 135 Loss: 6.7084174156188965 Tokens per Sec: 17313.075125783336
Epoch Step: 120 / 135 Loss: 6.047393798828125 Tokens per Sec: 18859.026455523854
Epoch Step: 125 / 135 Loss: 3.8913304805755615 Tokens per Sec: 17178.866626516177
Epoch Step: 130 / 135 Loss: 5.280506134033203 Tokens per Sec: 15943.454131246865
Epoch Step: 135 / 135 Loss: 3.870408535003662 Tokens per Sec: 17711.35758610884
Epoch ended with duration 0:00:13.632225
Train perplexity: 1.3079531165688547
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.577322
Validation perplexity: 1.807375372829625
Epoch 125 / 1000
Epoch Step: 5 / 135 Loss: 6.242958068847656 Tokens per Sec: 19931.743128167498
Epoch Step: 10 / 135 Loss: 5.616358757019043 Tokens per Sec: 20957.287696639632
Epoch Step: 15 / 135 Loss: 5.4428582191467285 Tokens per Sec: 20552.637317287852
Epoch Step: 20 / 135 Loss: 3.9320034980773926 Tokens per Sec: 19677.717061388084
Epoch Step: 25 / 135 Loss: 4.494893550872803 Tokens per Sec: 22858.29616439236
Epoch Step: 30 / 135 Loss: 4.434390068054199 Tokens per Sec: 18225.519299782492
Epoch Step: 35 / 135 Loss: 4.629116535186768 Tokens per Sec: 23233.830377703725
Epoch Step: 40 / 135 Loss: 6.798317909240723 Tokens per Sec: 18765.774930279196
Epoch Step: 45 / 135 Loss: 70.3449935913086 Tokens per Sec: 17522.448270835455
Epoch Step: 50 / 135 Loss: 5.0045599937438965 Tokens per Sec: 17242.433410724967
Epoch Step: 55 / 135 Loss: 5.3129706382751465 Tokens per Sec: 21548.819615637825
Epoch Step: 60 / 135 Loss: 19.548587799072266 Tokens per Sec: 13610.815881773058
Epoch Step: 65 / 135 Loss: 28.485347747802734 Tokens per Sec: 19072.260697434656
Epoch Step: 70 / 135 Loss: 7.9542975425720215 Tokens per Sec: 19118.740429993235
Epoch Step: 75 / 135 Loss: 5.419227600097656 Tokens per Sec: 18510.866905213206
Epoch Step: 80 / 135 Loss: 6.401834011077881 Tokens per Sec: 19407.467089883943
Epoch Step: 85 / 135 Loss: 4.817400932312012 Tokens per Sec: 19881.27270122984
Epoch Step: 90 / 135 Loss: 4.690118312835693 Tokens per Sec: 22568.502257156022
Epoch Step: 95 / 135 Loss: 6.945194721221924 Tokens per Sec: 18134.29937232148
Epoch Step: 100 / 135 Loss: 5.348326683044434 Tokens per Sec: 19642.258784154466
Epoch Step: 105 / 135 Loss: 6.628623008728027 Tokens per Sec: 16435.757800273223
Epoch Step: 110 / 135 Loss: 5.573694705963135 Tokens per Sec: 19261.96728690542
Epoch Step: 115 / 135 Loss: 5.006745338439941 Tokens per Sec: 17164.780991207077
Epoch Step: 120 / 135 Loss: 6.375174522399902 Tokens per Sec: 16619.764728342885
Epoch Step: 125 / 135 Loss: 4.229742050170898 Tokens per Sec: 17660.131929399813
Epoch Step: 130 / 135 Loss: 5.193059921264648 Tokens per Sec: 16077.703037037285
Epoch Step: 135 / 135 Loss: 5.306784152984619 Tokens per Sec: 16200.638828465417
Epoch ended with duration 0:00:13.529203
Train perplexity: 1.3676728911422829
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.581252
Validation perplexity: 1.9323639244735795
Model saved checkpoint!
Epoch 126 / 1000
Epoch Step: 5 / 135 Loss: 5.343227386474609 Tokens per Sec: 21743.52181990027
Epoch Step: 10 / 135 Loss: 7.140976428985596 Tokens per Sec: 19078.974374689813
Epoch Step: 15 / 135 Loss: 3.52327036857605 Tokens per Sec: 21771.866328423133
Epoch Step: 20 / 135 Loss: 5.352848052978516 Tokens per Sec: 16182.274361476466
Epoch Step: 25 / 135 Loss: 5.421025276184082 Tokens per Sec: 20327.753235726403
Epoch Step: 30 / 135 Loss: 4.008301258087158 Tokens per Sec: 18050.161679622666
Epoch Step: 35 / 135 Loss: 3.887223482131958 Tokens per Sec: 20053.18758079855
Epoch Step: 40 / 135 Loss: 5.073846817016602 Tokens per Sec: 15540.800147869752
Epoch Step: 45 / 135 Loss: 3.8819758892059326 Tokens per Sec: 20406.56918078654
Epoch Step: 50 / 135 Loss: 4.653074264526367 Tokens per Sec: 14174.55467777703
Epoch Step: 55 / 135 Loss: 3.7179925441741943 Tokens per Sec: 19095.980621698338
Epoch Step: 60 / 135 Loss: 4.360158443450928 Tokens per Sec: 18833.890807100415
Epoch Step: 65 / 135 Loss: 5.899062156677246 Tokens per Sec: 15260.656049469975
Epoch Step: 70 / 135 Loss: 7.42564058303833 Tokens per Sec: 17247.532723770608
Epoch Step: 75 / 135 Loss: 6.172708511352539 Tokens per Sec: 21674.29930294372
Epoch Step: 80 / 135 Loss: 5.831822395324707 Tokens per Sec: 19913.27282911606
Epoch Step: 85 / 135 Loss: 5.341485977172852 Tokens per Sec: 21417.608093213035
Epoch Step: 90 / 135 Loss: 7.2863054275512695 Tokens per Sec: 20936.871785104075
Epoch Step: 95 / 135 Loss: 2.8933000564575195 Tokens per Sec: 22964.886406782472
Epoch Step: 100 / 135 Loss: 3.397632360458374 Tokens per Sec: 19419.105254773025
Epoch Step: 105 / 135 Loss: 3.4242982864379883 Tokens per Sec: 17278.308674347987
Epoch Step: 110 / 135 Loss: 4.925508975982666 Tokens per Sec: 15878.610002848505
Epoch Step: 115 / 135 Loss: 30.052387237548828 Tokens per Sec: 15261.615922589455
Epoch Step: 120 / 135 Loss: 5.566656589508057 Tokens per Sec: 17401.112360789502
Epoch Step: 125 / 135 Loss: 6.1693902015686035 Tokens per Sec: 17646.031249785603
Epoch Step: 130 / 135 Loss: 4.511654853820801 Tokens per Sec: 18399.07371481569
Epoch Step: 135 / 135 Loss: 4.908002853393555 Tokens per Sec: 18870.81487121027
Epoch ended with duration 0:00:13.617989
Train perplexity: 1.3586301186598426
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.577064
Validation perplexity: 1.8340642521394555
Epoch 127 / 1000
Epoch Step: 5 / 135 Loss: 58.0828971862793 Tokens per Sec: 20031.660328987586
Epoch Step: 10 / 135 Loss: 6.375582218170166 Tokens per Sec: 16814.231715741054
Epoch Step: 15 / 135 Loss: 3.847656726837158 Tokens per Sec: 22475.183165150895
Epoch Step: 20 / 135 Loss: 6.836739540100098 Tokens per Sec: 20848.33955427319
Epoch Step: 25 / 135 Loss: 3.0524518489837646 Tokens per Sec: 17524.307468667008
Epoch Step: 30 / 135 Loss: 5.180864334106445 Tokens per Sec: 18044.185576282376
Epoch Step: 35 / 135 Loss: 53.090049743652344 Tokens per Sec: 21810.394478011847
Epoch Step: 40 / 135 Loss: 4.278891086578369 Tokens per Sec: 20266.28967141439
Epoch Step: 45 / 135 Loss: 8.040080070495605 Tokens per Sec: 15466.924145857502
Epoch Step: 50 / 135 Loss: 3.6446373462677 Tokens per Sec: 19706.76969589719
Epoch Step: 55 / 135 Loss: 7.20966100692749 Tokens per Sec: 19381.51323473018
Epoch Step: 60 / 135 Loss: 4.455061435699463 Tokens per Sec: 15562.95887748284
Epoch Step: 65 / 135 Loss: 34.977699279785156 Tokens per Sec: 15959.128539102654
Epoch Step: 70 / 135 Loss: 3.1283810138702393 Tokens per Sec: 18753.5224730296
Epoch Step: 75 / 135 Loss: 4.756588459014893 Tokens per Sec: 19318.059984382522
Epoch Step: 80 / 135 Loss: 6.160122394561768 Tokens per Sec: 18534.342270252393
Epoch Step: 85 / 135 Loss: 6.9811553955078125 Tokens per Sec: 20808.766596142283
Epoch Step: 90 / 135 Loss: 7.048022270202637 Tokens per Sec: 21794.939208408665
Epoch Step: 95 / 135 Loss: 5.10903263092041 Tokens per Sec: 21331.298862122814
Epoch Step: 100 / 135 Loss: 6.163402557373047 Tokens per Sec: 20408.160032679796
Epoch Step: 105 / 135 Loss: 4.62805700302124 Tokens per Sec: 18199.859355636097
Epoch Step: 110 / 135 Loss: 6.182790756225586 Tokens per Sec: 15858.64147222084
Epoch Step: 115 / 135 Loss: 3.453599452972412 Tokens per Sec: 16006.19498464941
Epoch Step: 120 / 135 Loss: 6.797295093536377 Tokens per Sec: 18587.916640537478
Epoch Step: 125 / 135 Loss: 38.172672271728516 Tokens per Sec: 17376.454714141993
Epoch Step: 130 / 135 Loss: 5.213181495666504 Tokens per Sec: 18769.95373736379
Epoch Step: 135 / 135 Loss: 3.7993786334991455 Tokens per Sec: 16467.88233729947
Epoch ended with duration 0:00:13.605677
Train perplexity: 1.3447135898425164
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.577334
Validation perplexity: 1.7031153377378578
Epoch 128 / 1000
Epoch Step: 5 / 135 Loss: 5.152763366699219 Tokens per Sec: 19363.78220792553
Epoch Step: 10 / 135 Loss: 6.129734039306641 Tokens per Sec: 20620.02738049577
Epoch Step: 15 / 135 Loss: 5.225269794464111 Tokens per Sec: 18996.554028041002
Epoch Step: 20 / 135 Loss: 5.192623615264893 Tokens per Sec: 19774.76608504731
Epoch Step: 25 / 135 Loss: 4.720509052276611 Tokens per Sec: 17033.640475174427
Epoch Step: 30 / 135 Loss: 5.157261848449707 Tokens per Sec: 23223.498279896583
Epoch Step: 35 / 135 Loss: 3.8089404106140137 Tokens per Sec: 17124.899922775745
Epoch Step: 40 / 135 Loss: 46.14473342895508 Tokens per Sec: 22117.471810846786
Epoch Step: 45 / 135 Loss: 5.783586025238037 Tokens per Sec: 17636.674494156938
Epoch Step: 50 / 135 Loss: 5.273725986480713 Tokens per Sec: 19238.20185064389
Epoch Step: 55 / 135 Loss: 5.353261470794678 Tokens per Sec: 19628.53642309683
Epoch Step: 60 / 135 Loss: 4.241225242614746 Tokens per Sec: 16535.11483063675
Epoch Step: 65 / 135 Loss: 5.2243828773498535 Tokens per Sec: 17525.108719112315
Epoch Step: 70 / 135 Loss: 69.74219512939453 Tokens per Sec: 21937.9177533261
Epoch Step: 75 / 135 Loss: 5.605628490447998 Tokens per Sec: 22437.615742424736
Epoch Step: 80 / 135 Loss: 6.1342339515686035 Tokens per Sec: 19177.67973087244
Epoch Step: 85 / 135 Loss: 4.416375637054443 Tokens per Sec: 18850.100843598357
Epoch Step: 90 / 135 Loss: 2.8350892066955566 Tokens per Sec: 18890.766250822577
Epoch Step: 95 / 135 Loss: 7.542117595672607 Tokens per Sec: 19450.38036079439
Epoch Step: 100 / 135 Loss: 3.4957051277160645 Tokens per Sec: 18164.033493131752
Epoch Step: 105 / 135 Loss: 6.014317035675049 Tokens per Sec: 15107.805678090119
Epoch Step: 110 / 135 Loss: 5.858105659484863 Tokens per Sec: 17442.645988457258
Epoch Step: 115 / 135 Loss: 4.891299724578857 Tokens per Sec: 17866.128520213515
Epoch Step: 120 / 135 Loss: 5.307868480682373 Tokens per Sec: 18414.38180428514
Epoch Step: 125 / 135 Loss: 4.407363414764404 Tokens per Sec: 15599.447356380526
Epoch Step: 130 / 135 Loss: 3.5613560676574707 Tokens per Sec: 17533.970643152923
Epoch Step: 135 / 135 Loss: 5.634331226348877 Tokens per Sec: 17917.446960750884
Epoch ended with duration 0:00:13.563187
Train perplexity: 1.2978447097698678
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.584427
Validation perplexity: 2.4658084629884787
Epoch 129 / 1000
Epoch Step: 5 / 135 Loss: 4.410309314727783 Tokens per Sec: 18434.89405349164
Epoch Step: 10 / 135 Loss: 3.8014047145843506 Tokens per Sec: 22348.50044909611
Epoch Step: 15 / 135 Loss: 6.880284309387207 Tokens per Sec: 19034.91396172695
Epoch Step: 20 / 135 Loss: 3.478144884109497 Tokens per Sec: 17269.22226280827
Epoch Step: 25 / 135 Loss: 82.38955688476562 Tokens per Sec: 18669.06877220596
Epoch Step: 30 / 135 Loss: 7.714451313018799 Tokens per Sec: 22088.32556333868
Epoch Step: 35 / 135 Loss: 5.146971702575684 Tokens per Sec: 18094.60823195684
Epoch Step: 40 / 135 Loss: 4.12878942489624 Tokens per Sec: 17449.100450891492
Epoch Step: 45 / 135 Loss: 4.97724723815918 Tokens per Sec: 20347.964224396754
Epoch Step: 50 / 135 Loss: 5.5240373611450195 Tokens per Sec: 17524.560352670356
Epoch Step: 55 / 135 Loss: 7.05955696105957 Tokens per Sec: 20363.22892761324
Epoch Step: 60 / 135 Loss: 4.556558132171631 Tokens per Sec: 19426.647444837843
Epoch Step: 65 / 135 Loss: 7.370737075805664 Tokens per Sec: 20900.5843476092
Epoch Step: 70 / 135 Loss: 5.768350124359131 Tokens per Sec: 20482.971383631233
Epoch Step: 75 / 135 Loss: 3.750950336456299 Tokens per Sec: 19049.889860530173
Epoch Step: 80 / 135 Loss: 5.7908124923706055 Tokens per Sec: 17912.528345159295
Epoch Step: 85 / 135 Loss: 4.436166763305664 Tokens per Sec: 20115.447933591877
Epoch Step: 90 / 135 Loss: 6.70334529876709 Tokens per Sec: 22241.63280600324
Epoch Step: 95 / 135 Loss: 6.222300052642822 Tokens per Sec: 17908.412405699917
Epoch Step: 100 / 135 Loss: 4.623684883117676 Tokens per Sec: 19760.027895598385
Epoch Step: 105 / 135 Loss: 5.446779727935791 Tokens per Sec: 18225.88344472091
Epoch Step: 110 / 135 Loss: 3.496981382369995 Tokens per Sec: 18413.555596828763
Epoch Step: 115 / 135 Loss: 4.437554359436035 Tokens per Sec: 17094.16222731619
Epoch Step: 120 / 135 Loss: 6.199762344360352 Tokens per Sec: 17272.25588176897
Epoch Step: 125 / 135 Loss: 4.60732364654541 Tokens per Sec: 15842.083681031281
Epoch Step: 130 / 135 Loss: 6.15211296081543 Tokens per Sec: 17372.851561546016
Epoch Step: 135 / 135 Loss: 3.7777743339538574 Tokens per Sec: 16820.26725543266
Epoch ended with duration 0:00:13.507759
Train perplexity: 1.3616615078398677
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.585107
Validation perplexity: 2.3499698429162197
Epoch 130 / 1000
Epoch Step: 5 / 135 Loss: 6.84659481048584 Tokens per Sec: 19842.120493642138
Epoch Step: 10 / 135 Loss: 17.921016693115234 Tokens per Sec: 17509.398302050682
Epoch Step: 15 / 135 Loss: 5.687453746795654 Tokens per Sec: 23354.211892491825
Epoch Step: 20 / 135 Loss: 3.9414525032043457 Tokens per Sec: 20280.814893045914
Epoch Step: 25 / 135 Loss: 3.1536545753479004 Tokens per Sec: 18866.930644111293
Epoch Step: 30 / 135 Loss: 5.233404636383057 Tokens per Sec: 19384.164656652712
Epoch Step: 35 / 135 Loss: 6.197999477386475 Tokens per Sec: 18533.884865532957
Epoch Step: 40 / 135 Loss: 78.37345886230469 Tokens per Sec: 15950.771669383732
Epoch Step: 45 / 135 Loss: 4.280846118927002 Tokens per Sec: 17238.618710350882
Epoch Step: 50 / 135 Loss: 7.715578556060791 Tokens per Sec: 20133.296557812995
Epoch Step: 55 / 135 Loss: 4.152967929840088 Tokens per Sec: 17508.981401036264
Epoch Step: 60 / 135 Loss: 6.211284637451172 Tokens per Sec: 18438.857112608024
Epoch Step: 65 / 135 Loss: 4.357773780822754 Tokens per Sec: 18619.723509420615
Epoch Step: 70 / 135 Loss: 33.15232467651367 Tokens per Sec: 19175.758737750977
Epoch Step: 75 / 135 Loss: 4.991600513458252 Tokens per Sec: 22760.055223159794
Epoch Step: 80 / 135 Loss: 6.020447731018066 Tokens per Sec: 18040.462037776288
Epoch Step: 85 / 135 Loss: 7.575376987457275 Tokens per Sec: 20846.46330523609
Epoch Step: 90 / 135 Loss: 17.879209518432617 Tokens per Sec: 20301.163880777243
Epoch Step: 95 / 135 Loss: 4.302787780761719 Tokens per Sec: 19530.06651561485
Epoch Step: 100 / 135 Loss: 5.68742561340332 Tokens per Sec: 17669.17855538305
Epoch Step: 105 / 135 Loss: 5.3987250328063965 Tokens per Sec: 17151.920022587205
Epoch Step: 110 / 135 Loss: 6.970309257507324 Tokens per Sec: 15944.765044977423
Epoch Step: 115 / 135 Loss: 4.913173198699951 Tokens per Sec: 17684.0385702216
Epoch Step: 120 / 135 Loss: 6.1904120445251465 Tokens per Sec: 16032.48688763722
Epoch Step: 125 / 135 Loss: 5.102365016937256 Tokens per Sec: 17464.185474986232
Epoch Step: 130 / 135 Loss: 5.62637996673584 Tokens per Sec: 17850.374246911957
Epoch Step: 135 / 135 Loss: 6.781539440155029 Tokens per Sec: 16909.72218172621
Epoch ended with duration 0:00:13.693661
Train perplexity: 1.4190704286106275
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.585139
Validation perplexity: 2.2654300059753973
Model saved checkpoint!
Epoch 131 / 1000
Epoch Step: 5 / 135 Loss: 5.508290767669678 Tokens per Sec: 19468.59838130922
Epoch Step: 10 / 135 Loss: 4.910581588745117 Tokens per Sec: 18866.840671959304
Epoch Step: 15 / 135 Loss: 4.671700954437256 Tokens per Sec: 19746.053371085396
Epoch Step: 20 / 135 Loss: 4.457533359527588 Tokens per Sec: 19830.373010944484
Epoch Step: 25 / 135 Loss: 6.2753682136535645 Tokens per Sec: 15888.61824104608
Epoch Step: 30 / 135 Loss: 3.208921194076538 Tokens per Sec: 17859.72330684085
Epoch Step: 35 / 135 Loss: 4.514564514160156 Tokens per Sec: 19972.61135880717
Epoch Step: 40 / 135 Loss: 4.296485900878906 Tokens per Sec: 20304.401510724223
Epoch Step: 45 / 135 Loss: 6.192378520965576 Tokens per Sec: 18484.795483391492
Epoch Step: 50 / 135 Loss: 5.242530822753906 Tokens per Sec: 20176.418015792322
Epoch Step: 55 / 135 Loss: 4.410821437835693 Tokens per Sec: 23804.3307968732
Epoch Step: 60 / 135 Loss: 5.233761787414551 Tokens per Sec: 17641.290274869774
Epoch Step: 65 / 135 Loss: 6.11121129989624 Tokens per Sec: 17238.505283072285
Epoch Step: 70 / 135 Loss: 4.221497535705566 Tokens per Sec: 19031.899706371965
Epoch Step: 75 / 135 Loss: 6.580296993255615 Tokens per Sec: 17373.950420718127
Epoch Step: 80 / 135 Loss: 4.7890520095825195 Tokens per Sec: 21525.751250018853
Epoch Step: 85 / 135 Loss: 7.467685699462891 Tokens per Sec: 19039.370289169787
Epoch Step: 90 / 135 Loss: 4.08873176574707 Tokens per Sec: 19436.666990933776
Epoch Step: 95 / 135 Loss: 4.640358924865723 Tokens per Sec: 19966.259667720726
Epoch Step: 100 / 135 Loss: 7.002020835876465 Tokens per Sec: 19502.342888482664
Epoch Step: 105 / 135 Loss: 5.762225151062012 Tokens per Sec: 18203.527140305127
Epoch Step: 110 / 135 Loss: 4.522555828094482 Tokens per Sec: 18432.62396699379
Epoch Step: 115 / 135 Loss: 4.608405113220215 Tokens per Sec: 17038.873486797358
Epoch Step: 120 / 135 Loss: 3.9696226119995117 Tokens per Sec: 16862.651384132183
Epoch Step: 125 / 135 Loss: 4.2325568199157715 Tokens per Sec: 16806.432060717023
Epoch Step: 130 / 135 Loss: 4.489426612854004 Tokens per Sec: 16207.191827421779
Epoch Step: 135 / 135 Loss: 5.364527225494385 Tokens per Sec: 15145.257366811473
Epoch ended with duration 0:00:13.644551
Train perplexity: 1.3094318979787596
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.587508
Validation perplexity: 1.5774364742100246
Epoch 132 / 1000
Epoch Step: 5 / 135 Loss: 2.6306588649749756 Tokens per Sec: 16262.84490743062
Epoch Step: 10 / 135 Loss: 6.479504108428955 Tokens per Sec: 20674.995803919017
Epoch Step: 15 / 135 Loss: 19.385955810546875 Tokens per Sec: 17629.639703440873
Epoch Step: 20 / 135 Loss: 6.02848482131958 Tokens per Sec: 21258.65473980649
Epoch Step: 25 / 135 Loss: 5.393847465515137 Tokens per Sec: 19692.221330804103
Epoch Step: 30 / 135 Loss: 3.6128664016723633 Tokens per Sec: 18128.568805770163
Epoch Step: 35 / 135 Loss: 4.065185546875 Tokens per Sec: 17692.7328981716
Epoch Step: 40 / 135 Loss: 4.9628825187683105 Tokens per Sec: 17995.037183939203
Epoch Step: 45 / 135 Loss: 51.93458938598633 Tokens per Sec: 16804.700165309736
Epoch Step: 50 / 135 Loss: 4.067514419555664 Tokens per Sec: 19266.978535738905
Epoch Step: 55 / 135 Loss: 4.749892234802246 Tokens per Sec: 20203.167408936377
Epoch Step: 60 / 135 Loss: 3.654661178588867 Tokens per Sec: 22691.320082440783
Epoch Step: 65 / 135 Loss: 3.19162917137146 Tokens per Sec: 15710.261436326766
Epoch Step: 70 / 135 Loss: 83.92085266113281 Tokens per Sec: 21296.649642837427
Epoch Step: 75 / 135 Loss: 55.889896392822266 Tokens per Sec: 19406.7643091248
Epoch Step: 80 / 135 Loss: 5.171603202819824 Tokens per Sec: 19602.556284280505
Epoch Step: 85 / 135 Loss: 3.5156328678131104 Tokens per Sec: 20947.548444561937
Epoch Step: 90 / 135 Loss: 8.268806457519531 Tokens per Sec: 21548.221288351873
Epoch Step: 95 / 135 Loss: 5.803801536560059 Tokens per Sec: 19761.03748473879
Epoch Step: 100 / 135 Loss: 7.228850841522217 Tokens per Sec: 17348.999289173673
Epoch Step: 105 / 135 Loss: 3.9710233211517334 Tokens per Sec: 16401.289703904367
Epoch Step: 110 / 135 Loss: 6.451534748077393 Tokens per Sec: 19666.341318008464
Epoch Step: 115 / 135 Loss: 7.320298671722412 Tokens per Sec: 16657.9016612893
Epoch Step: 120 / 135 Loss: 8.280146598815918 Tokens per Sec: 17313.639614943826
Epoch Step: 125 / 135 Loss: 5.649301528930664 Tokens per Sec: 17796.386353819413
Epoch Step: 130 / 135 Loss: 5.714988708496094 Tokens per Sec: 15376.665888220963
Epoch Step: 135 / 135 Loss: 4.163686752319336 Tokens per Sec: 16689.409995072292
Epoch ended with duration 0:00:13.642799
Train perplexity: 1.4864763679754476
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.584353
Validation perplexity: 2.2748032237119213
Epoch 133 / 1000
Epoch Step: 5 / 135 Loss: 3.631305694580078 Tokens per Sec: 20378.177546695504
Epoch Step: 10 / 135 Loss: 6.5983567237854 Tokens per Sec: 18239.46169757888
Epoch Step: 15 / 135 Loss: 6.933568954467773 Tokens per Sec: 23228.956896656426
Epoch Step: 20 / 135 Loss: 5.580916404724121 Tokens per Sec: 14855.102725603034
Epoch Step: 25 / 135 Loss: 3.396327018737793 Tokens per Sec: 16086.703471473595
Epoch Step: 30 / 135 Loss: 5.537827491760254 Tokens per Sec: 16503.891684112856
Epoch Step: 35 / 135 Loss: 5.762032508850098 Tokens per Sec: 20222.792581348738
Epoch Step: 40 / 135 Loss: 5.0497145652771 Tokens per Sec: 18248.026438027548
Epoch Step: 45 / 135 Loss: 8.147157669067383 Tokens per Sec: 19428.261319092446
Epoch Step: 50 / 135 Loss: 4.4634270668029785 Tokens per Sec: 18624.289277767275
Epoch Step: 55 / 135 Loss: 4.562220573425293 Tokens per Sec: 19443.227967912044
Epoch Step: 60 / 135 Loss: 3.9555349349975586 Tokens per Sec: 18581.54124471096
Epoch Step: 65 / 135 Loss: 6.152630805969238 Tokens per Sec: 20289.458167291075
Epoch Step: 70 / 135 Loss: 7.304231643676758 Tokens per Sec: 20362.56196520199
Epoch Step: 75 / 135 Loss: 5.66010856628418 Tokens per Sec: 18458.53541742476
Epoch Step: 80 / 135 Loss: 4.456751823425293 Tokens per Sec: 21303.66659215046
Epoch Step: 85 / 135 Loss: 6.8070831298828125 Tokens per Sec: 20967.997998731662
Epoch Step: 90 / 135 Loss: 45.58335876464844 Tokens per Sec: 21343.66936288638
Epoch Step: 95 / 135 Loss: 6.015572547912598 Tokens per Sec: 16797.4534283764
Epoch Step: 100 / 135 Loss: 93.17498016357422 Tokens per Sec: 19700.707698387127
Epoch Step: 105 / 135 Loss: 5.006330966949463 Tokens per Sec: 16473.549375856594
Epoch Step: 110 / 135 Loss: 3.5099122524261475 Tokens per Sec: 15826.775869916892
Epoch Step: 115 / 135 Loss: 4.893468379974365 Tokens per Sec: 17949.590803152907
Epoch Step: 120 / 135 Loss: 3.8610281944274902 Tokens per Sec: 18594.441819071348
Epoch Step: 125 / 135 Loss: 4.958938121795654 Tokens per Sec: 17640.47976962095
Epoch Step: 130 / 135 Loss: 4.977295875549316 Tokens per Sec: 16213.661156328131
Epoch Step: 135 / 135 Loss: 4.764077663421631 Tokens per Sec: 18149.138062218386
Epoch ended with duration 0:00:13.614588
Train perplexity: 1.4197441409123503
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.577598
Validation perplexity: 1.7773004747139607
Epoch 134 / 1000
Epoch Step: 5 / 135 Loss: 2.580878973007202 Tokens per Sec: 18687.054531317754
Epoch Step: 10 / 135 Loss: 4.682581901550293 Tokens per Sec: 18870.28823488628
Epoch Step: 15 / 135 Loss: 3.3799962997436523 Tokens per Sec: 19626.24152289117
Epoch Step: 20 / 135 Loss: 29.787967681884766 Tokens per Sec: 19348.566801760255
Epoch Step: 25 / 135 Loss: 3.0240421295166016 Tokens per Sec: 19450.31655337208
Epoch Step: 30 / 135 Loss: 5.189323425292969 Tokens per Sec: 18640.452677637768
Epoch Step: 35 / 135 Loss: 4.1316118240356445 Tokens per Sec: 22026.760447271354
Epoch Step: 40 / 135 Loss: 4.270333766937256 Tokens per Sec: 17985.978417754617
Epoch Step: 45 / 135 Loss: 4.680766582489014 Tokens per Sec: 18987.958322566174
Epoch Step: 50 / 135 Loss: 6.959197998046875 Tokens per Sec: 17922.914357477206
Epoch Step: 55 / 135 Loss: 4.677004337310791 Tokens per Sec: 22721.249773345186
Epoch Step: 60 / 135 Loss: 5.975278377532959 Tokens per Sec: 17245.61523756092
Epoch Step: 65 / 135 Loss: 6.797296524047852 Tokens per Sec: 16796.250234456376
Epoch Step: 70 / 135 Loss: 5.825917720794678 Tokens per Sec: 21285.902799030227
Epoch Step: 75 / 135 Loss: 4.132014751434326 Tokens per Sec: 22247.76769508412
Epoch Step: 80 / 135 Loss: 4.315783977508545 Tokens per Sec: 20547.689597358472
Epoch Step: 85 / 135 Loss: 4.661242485046387 Tokens per Sec: 23113.688823280885
Epoch Step: 90 / 135 Loss: 5.902108192443848 Tokens per Sec: 17417.177584734254
Epoch Step: 95 / 135 Loss: 5.634108543395996 Tokens per Sec: 20838.563716382585
Epoch Step: 100 / 135 Loss: 5.068819999694824 Tokens per Sec: 16775.439083510733
Epoch Step: 105 / 135 Loss: 4.179065227508545 Tokens per Sec: 17849.19218624689
Epoch Step: 110 / 135 Loss: 5.531802654266357 Tokens per Sec: 19131.482920528088
Epoch Step: 115 / 135 Loss: 5.218335151672363 Tokens per Sec: 14393.988583567369
Epoch Step: 120 / 135 Loss: 5.429554462432861 Tokens per Sec: 16961.280928578435
Epoch Step: 125 / 135 Loss: 4.958724498748779 Tokens per Sec: 18157.347362476048
Epoch Step: 130 / 135 Loss: 5.2632927894592285 Tokens per Sec: 17132.777555000564
Epoch Step: 135 / 135 Loss: 4.388021469116211 Tokens per Sec: 17361.33570599613
Epoch ended with duration 0:00:13.485708
Train perplexity: 1.3132524183279974
Example #1[0m
Src : public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 e ) { METHOD_3 ( ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 e ) { METHOD_2 ( ) ; }[0m
Example #2[0m
Src : TYPE_1 < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: java.util.Set < java.lang.String , TYPE_2 < TYPE_3 > > METHOD_1 ( ) { return VAR_1 ; }[0m
Example #3[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.util.Set < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Epoch ended with duration 0:00:00.584141
Validation perplexity: 2.232155613665986
Training was early stopped on epoch 135 with early stopping rounds 25
[68.19886838603878, 18.898549281685362, 13.99302068947562, 10.71970138870105, 9.688996452011896, 8.075889307450119, 8.145539684930739, 6.974265455384154, 6.708035726973475, 5.93622115982218, 4.822345291862491, 5.135946668467501, 5.025994014461638, 4.8553098358393285, 4.583549269268772, 3.7410754942046465, 4.0882707962755696, 4.5142243920379626, 4.048095404605028, 3.6793118787292283, 3.0773035539279343, 3.2645761386647703, 3.0638700069352134, 3.0890619827617325, 2.7433183672587456, 2.88484877433068, 2.8054561315221846, 2.496693214465957, 3.0182402372802444, 2.9490999298955622, 2.8397634028754504, 2.5370149247772718, 2.5569740539211887, 2.359610711332223, 2.7278845073075395, 2.503585297136469, 2.2043513160508557, 2.315527967497909, 2.3738095971640796, 2.472079533088291, 2.1102088706536084, 2.071350192396975, 2.2433856514663315, 2.0218557259947643, 1.9577439241165957, 2.078705308225326, 1.9456404859598753, 1.9847213117019213, 2.010970341463787, 1.9117744272355623, 2.0370341317213154, 1.8584438754922934, 1.9277747985852416, 1.9251086269471225, 1.7961330443137404, 1.7449934318269267, 1.7644931285918883, 1.8505447149643846, 1.7595547363813115, 1.7848442158408846, 1.9439381865922318, 1.8378089303549292, 1.7994816779860607, 1.868323678980026, 1.950560480736726, 1.7047365712076303, 1.6695692012176488, 1.580053581195218, 1.7562752934750168, 1.6247084728776897, 1.6781407213078154, 1.6750429072306139, 1.73889023915866, 1.6177335327925102, 1.566899604753804, 1.6699553943526533, 1.6625263917864506, 1.568923779031494, 1.6539484507463529, 1.684279433678681, 1.6873772759870722, 1.7244026478644163, 1.620828647436509, 1.5973832292964123, 1.6451564604847257, 1.5076597134054661, 1.489270432527841, 1.5810140227337874, 1.6493443901375338, 1.5249987217328558, 1.8288009259367148, 1.4820712516296082, 1.4980918001897168, 1.4457381689429982, 1.5301091978771766, 1.4669201413358988, 1.4859301464413508, 1.549227891255747, 1.409435784018531, 1.5174194287839047, 1.4927459716968665, 1.4169606725129538, 1.4595691281509988, 1.486328438476095, 1.503842248854219, 1.4245981745483487, 1.4030682418716602, 1.3671445130698208, 1.3467294984127987, 1.457535914546613, 1.4241941228043573, 1.4298113266873318, 1.4956033348769928, 1.5048291122501039, 1.4535534350839037, 1.4265697984940502, 1.397861986008933, 1.421703599075822, 1.3783235543480963, 1.4086048928791517, 1.504537910445396, 1.3886737969983733, 1.310131969604957, 1.543142824750479, 1.3079531165688547, 1.3676728911422829, 1.3586301186598426, 1.3447135898425164, 1.2978447097698678, 1.3616615078398677, 1.4190704286106275, 1.3094318979787596, 1.4864763679754476, 1.4197441409123503, 1.3132524183279974]
[20.71450513317302, 15.04916194403319, 10.501628844402022, 10.268280014761707, 8.751742016154024, 6.106840741296037, 6.389303568241676, 5.476711030273409, 6.452150693869631, 5.05856711170466, 5.070103632719516, 4.223146623501102, 3.5571555034080595, 4.5908791114973635, 4.354346734226138, 4.181731473487568, 3.231500565141963, 3.946904361323993, 3.6366339360717728, 2.8244861870162183, 3.3213300108286243, 3.4775451956671857, 2.661923330699608, 3.7149840975871626, 3.201587930323027, 2.7737688125840263, 3.8654654031419966, 2.7833825762817126, 2.5290653495399926, 2.341221459907419, 2.4661985668777335, 2.035716799235857, 2.6876893709304195, 2.60269239963182, 2.549037284483979, 2.335603253395959, 2.7506918527412476, 1.9415140355993734, 1.833545886436423, 2.4758910235185883, 2.127120747423228, 3.0840517584459235, 2.0990457591565272, 2.4780510021359285, 1.7306080854274895, 1.7322971020406446, 1.9755053994647038, 1.9088787889469097, 2.5290266645261203, 2.694273884122485, 1.924040595921231, 1.6496390658831135, 2.2270114897910855, 1.932609799147078, 1.988895452098431, 2.5312789185001563, 2.3396240259363625, 1.6122329083329574, 1.9690185830145979, 2.1088028652301527, 1.5915329042477873, 2.071875128240033, 1.8804297349435268, 1.7844382606734241, 1.8372104727685645, 1.8362590370576957, 1.6056488842736623, 1.818606661530704, 2.278394540472282, 1.933426744699397, 2.521628367421827, 2.6309789385284836, 2.6970484847581915, 1.6046867955585025, 1.5395515168908613, 1.8723120421005472, 2.045777017448078, 2.062262055619653, 1.7632526173908691, 1.8018549114042521, 1.702134014050157, 2.0227864006932252, 1.529463927660536, 1.8030075876629255, 1.5784408036037734, 1.8287696053473186, 2.120749348211421, 1.7989907833742207, 1.7015186357039012, 1.6601539720458585, 1.7741386167136897, 1.72863351933247, 1.8178955949879088, 1.6972485212349215, 1.6551248734971225, 1.6326057404466041, 1.690061605139464, 2.3597326533849903, 1.622637870117299, 1.9329666071511302, 1.6326850640281225, 1.776970496376781, 1.78033077152235, 1.67255340627606, 1.64422558513254, 1.4952188011807166, 1.9394766450492682, 1.7573124642365336, 2.176112633543694, 1.4913241961050605, 1.8257012647421993, 2.4080449154558106, 1.9334820662757306, 1.5090708057202433, 2.2735957196126177, 2.1513408763482964, 2.0344878816001115, 1.64131689050467, 1.549469635144376, 1.774229711896742, 1.877890869649185, 2.2728816630677877, 2.2210937627991525, 1.5632979682729826, 1.807375372829625, 1.9323639244735795, 1.8340642521394555, 1.7031153377378578, 2.4658084629884787, 2.3499698429162197, 2.2654300059753973, 1.5774364742100246, 2.2748032237119213, 1.7773004747139607, 2.232155613665986]
Model saved checkpoint!

====STARTING EVALUATION====
Data set sizes (number of sentence pairs):
train 8627
valid 1079
test 1077 

First training example:
src: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ; TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
trg: private void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( ( VAR_2 ? VAR_3 : 0 ) ) ; }
diff_alignment: —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ
diff_prev: VAR_1 . METHOD_2 ( STRING_1 , VAR_2 , VAR_3 ) ;
diff_updated: –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ 

Most common words:
         (      76236
         )      76208
   –ø–∞–¥–¥–∏–Ω–≥      44322
  —É–¥–∞–ª–µ–Ω–∏–µ      34492
         ;      33724
         .      30504
     VAR_1      24100
         ,      23668
         {      22776
         }      22616 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 (
05 )
06 –ø–∞–¥–¥–∏–Ω–≥
07 —É–¥–∞–ª–µ–Ω–∏–µ
08 ;
09 . 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 6423 25
—É–¥–∞–ª–µ–Ω–∏–µ 34492 7
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 9830 19
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 44322 6
Number of words (types): 662
Starting conducting edit representation visualization experiment for tufano_labeled_0_50_2d_representations.png...
Duration: 0:00:05.358266

Starting conducting edit representation visualization experiment for tufano_labeled_50_100_2d_representations.png...
Duration: 0:00:04.303082

Starting conducting edit representation visualization experiment for defects4j_2d_representations.png...
Duration: 0:00:00.850004

Starting conducting edit representation visualization experiment for test300_2d_representations.png...
Duration: 0:00:02.909638

Starting conducting edit representation visualization experiment for val300_2d_representations.png...
Duration: 0:00:02.768744

Starting conducting edit representation visualization experiment for train300_2d_representations.png...
Duration: 0:00:03.132177

Starting conducting edit representation visualization experiment for test_2d_representations.png...
Duration: 0:00:04.729393

Starting conducting edit representation visualization experiment for val_2d_representations.png...
Duration: 0:00:04.030863

Starting conducting edit representation visualization experiment for train5000_2d_representations.png...
Duration: 0:00:09.617451

Start conducting accuracy calculation experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy: 177 / 388 = 0.45618556701030927
Top-3 accuracy: 262 / 388 = 0.6752577319587629
Top-5 accuracy: 289 / 388 = 0.7448453608247423
Top-10 accuracy: 311 / 388 = 0.8015463917525774
Top-50 accuracy: 346 / 388 = 0.8917525773195877
Duration: 0:01:48.640433

Start conducting accuracy calculation experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy: 5 / 244 = 0.020491803278688523
Top-3 accuracy: 7 / 244 = 0.028688524590163935
Top-5 accuracy: 11 / 244 = 0.045081967213114756
Top-10 accuracy: 13 / 244 = 0.05327868852459016
Top-50 accuracy: 18 / 244 = 0.07377049180327869
Duration: 0:01:00.598748

Start conducting accuracy calculation experiment for Defects4J...
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:05.085740

Start conducting accuracy calculation experiment for Test dataset 300...
Top-1 accuracy: 59 / 300 = 0.19666666666666666
Top-3 accuracy: 92 / 300 = 0.30666666666666664
Top-5 accuracy: 101 / 300 = 0.33666666666666667
Top-10 accuracy: 119 / 300 = 0.39666666666666667
Top-50 accuracy: 146 / 300 = 0.4866666666666667
Duration: 0:01:23.735211

Start conducting accuracy calculation experiment for Validation dataset 300...
Top-1 accuracy: 59 / 300 = 0.19666666666666666
Top-3 accuracy: 88 / 300 = 0.29333333333333333
Top-5 accuracy: 103 / 300 = 0.3433333333333333
Top-10 accuracy: 120 / 300 = 0.4
Top-50 accuracy: 149 / 300 = 0.49666666666666665
Duration: 0:01:23.758165

Start conducting accuracy calculation experiment for Train dataset 300...
Top-1 accuracy: 119 / 300 = 0.39666666666666667
Top-3 accuracy: 172 / 300 = 0.5733333333333334
Top-5 accuracy: 192 / 300 = 0.64
Top-10 accuracy: 204 / 300 = 0.68
Top-50 accuracy: 237 / 300 = 0.79
Duration: 0:01:22.585676

Start conducting one shot learning experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 36 / 64 = 0.5625
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 42 / 64 = 0.65625
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 48 / 64 = 0.75
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 50 / 64 = 0.78125
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 55 / 64 = 0.859375

Top-1 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 138 / 324 = 0.42592592592592593
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 215 / 324 = 0.6635802469135802
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 238 / 324 = 0.7345679012345679
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 257 / 324 = 0.7932098765432098
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 286 / 324 = 0.8827160493827161
================
Correct Examples
Class: Abstract an existing method using the abstract keyword
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract void METHOD_1 ( int index , short value ) ;[0m
Pred: abstract void METHOD_1 ( int index , short value ) ;[0m
+++++++++++++++
[32mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract java.lang.String METHOD_1 ( ) ;[0m
Pred: public abstract java.lang.String METHOD_1 ( ) ;[0m
[32mExample #2[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract boolean METHOD_1 ( ) ;[0m
Pred: public abstract boolean METHOD_1 ( ) ;[0m
[32mExample #3[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract float METHOD_1 ( int index ) ;[0m
Pred: abstract float METHOD_1 ( int index ) ;[0m
[32mExample #4[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) { throw new TYPE_3 ( ) ; }[0m
Trg : public abstract void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
Pred: public abstract void METHOD_1 ( TYPE_1 < TYPE_2 > callback ) ;[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( address ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
Pred: final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( address ) ) , value ) ; }[0m
[32mExample #2[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return r ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
Pred: static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 m ) { TYPE_1 r = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return r ; }[0m
---------------
Class: Add null check
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void run ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public void run ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getId ( ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities . Disk > result = dao . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[32mExample #2[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
[32mExample #3[0m
Src : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: private TYPE_1 . ProjectConfig METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
[32mExample #4[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( constants ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 location , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
[32mExample #3[0m
Src : native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : native boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: native boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] input , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
[32mExample #4[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: void METHOD_1 ( ) ;[0m
[32mExample #5[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String project , int id , java.lang.String VAR_1 ) { return TYPE_2 . change ( project , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (True):
[32mExample #1[0m
Src : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Integer returnValue ) { VAR_1 = returnValue ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
Pred: public void onSuccess ( java.lang.Boolean returnValue ) { METHOD_1 ( returnValue ) ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
+++++++++++++++
[32mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
[32mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
[32mExample #3[0m
Src : protected org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Trg : public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
Pred: public org.ovirt.engine.core.common.businessentities.VDSGroup getVdsGroup ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . getVdsGroup ( ) ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
[32mExample #2[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { TYPE_1 . when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM vm ) { org.mockito.Mockito.when ( VAR_1 . get ( VAR_2 . Matchers < org.ovirt.engine.core.compat.Guid > any ( VAR_3 . Guid class ) ) ) . thenReturn ( vm ) ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] d , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , count , d , VAR_3 ) ; }[0m
[32mExample #2[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network network ) { return network . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
[32mExample #3[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[32mExample #4[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final com.google.gerrit.reviewdb.client . PatchSetApproval VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . create ( VAR_1 . getAccountId ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
[32mExample #5[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
[32mExample #6[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
Pred: synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 ) ; }[0m
[32mExample #7[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[32mExample #8[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
[32mExample #9[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . network object ) { return object . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities . Network object ) { return object . METHOD_1 ( ) ; }[0m
[32mExample #10[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[32mExample #11[0m
Src : public static native byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static native byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: public static native byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
[32mExample #12[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . VdcBllMessages VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > command , TYPE_2 . EngineMessage VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , command . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , command , VAR_2 ) ; }[0m
[32mExample #13[0m
Src : native void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
[32mExample #14[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[32mExample #15[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
[32mExample #16[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[32mExample #17[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 ) ; }[0m
[32mExample #18[0m
Src : public static native void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
[32mExample #19[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities . VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface entity ) { return VAR_1 . METHOD_2 ( model , entity , VAR_2 , VAR_3 ) ; }[0m
[32mExample #20[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
Pred: synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long s ) { METHOD_2 ( ) ; METHOD_3 ( mContext , VAR_1 , VAR_2 , s ) ; }[0m
[32mExample #21[0m
Src : public static native void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
[32mExample #22[0m
Src : native void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
[32mExample #23[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities . Network VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( getParameters ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
Pred: protected java.util.List < org.ovirt.engine.core.common.businessentities.VDSGroup > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_2 ) ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return getEntity ( VAR_1 class , VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , id . toString ( ) ) ; }[0m
[32mExample #3[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . in , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
[32mExample #4[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , INT_1 , false ) ; args.out = TYPE_3 . METHOD_3 ( args . inV , t ) ; }[0m
[32mExample #5[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . instance , METHOD_4 ( ) . addValue ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change return type
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities . VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name ) { for ( org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface iface : METHOD_2 ( ) ) { if ( iface . getName ( ) . equals ( name ) ) { return iface ; } } return null ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = dao . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
[32mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( vmId , VAR_1 , true , false , VAR_2 , false ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (True):
[32mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid VAR_2 ) { return METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) . addValue ( STRING_2 , VAR_2 ) ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return null ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( 5 ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( 5 ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( VAR_3 ) ; VAR_4 = dao . get ( VAR_5 ) ; }[0m
[32mExample #3[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #4[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public java.lang.Object METHOD_1 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
[32mExample #5[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . instance ( ) . METHOD_3 ( ) , TYPE_4 . instance ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
[32mExample #7[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = Main . METHOD_2 ( FLOAT_1 ) ; b = Main . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
[32mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 apply ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( nic ) ) ; }[0m
[32mExample #3[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , version ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
[32mExample #4[0m
Src : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > getParameters ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
[32mExample #5[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . OrmException { METHOD_2 ( VAR_1 ) ; }[0m
[32mExample #6[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
[32mExample #7[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.StoragePool > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } log ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
Pred: public void info ( java.lang.String msg ) { log ( TYPE_1 , msg ) ; }[0m
[32mExample #2[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( resource . get ( ) , 0 ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( mRS , INPUTSIZE ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[32mExample #6[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
[32mExample #7[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) ) ; }[0m
[32mExample #8[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
[32mExample #9[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
[32mExample #10[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
[32mExample #11[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; VAR_1 . METHOD_3 ( model ) ; return model ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 model , org.ovirt.engine.core.common.businessentities.VDS entity ) { VAR_1 . METHOD_2 ( model , entity ) ; return model ; }[0m
[32mExample #12[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
[32mExample #13[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
[32mExample #14[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
[32mExample #15[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
[32mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( resource . get ( ) , INT_1 ) ; }[0m
[32mExample #17[0m
Src : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } else { setItems ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { if ( ( getEntity ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
[32mExample #18[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { Main . METHOD_3 ( ) ; }[0m
[32mExample #19[0m
Src : public static int METHOD_1 ( int arg1 , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - arg1 ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
Pred: public static int METHOD_1 ( int arg1 , int VAR_1 ) { return ( - arg1 ) - VAR_1 ; }[0m
[32mExample #20[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
[32mExample #21[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { parameters . setId ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( command . validate ( ) ) ; }[0m
[32mExample #22[0m
Src : public void METHOD_1 ( ) { errln ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
[32mExample #23[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[32mExample #24[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
[32mExample #25[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
[32mExample #26[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
[32mExample #27[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.ovirt.engine.core.compat.Guid vmId = new org.ovirt.engine.core.compat.Guid ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( vmId , VAR_2 ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( vmId ) , VAR_3 ) ; }[0m
[32mExample #28[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
[32mExample #29[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
[32mExample #30[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) ) ; }[0m
[32mExample #31[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
[32mExample #32[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
[32mExample #33[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , 4 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , 4 ) ; }[0m
[32mExample #34[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
[32mExample #35[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( Main . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
[32mExample #36[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) { Main . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
[32mExample #37[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.VDS > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . setItems ( VAR_1 ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( returnValue ) ) ) ; }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[32mExample #7[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface result = dao . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[32mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( TYPE_1 ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
[32mExample #9[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Rename parameter
Golden example (True):
[32mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
+++++++++++++++
[32mExample #1[0m
Src : public native boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
[32mExample #2[0m
Src : public void METHOD_1 ( com.android.jack.ir.ast.JMethod type ) { }[0m
Trg : public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
Pred: public void METHOD_1 ( com.android.jack.ir.ast.JMethod method ) { }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
[32mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
[32mExample #3[0m
Src : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 req ) throws java.lang.Exception { TYPE_2 res = new TYPE_2 ( ) ; servlet . METHOD_2 ( req , res ) ; org.junit.Assert.assertEquals ( VAR_1 , res . getStatus ( ) ) ; }[0m
[32mExample #4[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; org.junit.Assert.assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return getEntity ( new TYPE_2 ( VAR_1 , VAR_2 . IdQueryParameters class ) , false ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
[32mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
[32mExample #4[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . getInstance ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
[32mExample #5[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . setItems ( VAR_1 ) ; value . setSelectedItem ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
[32mExample #2[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( address ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
Pred: final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( address ) ) ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
[32mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( TYPE_2 < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . METHOD_2 ( hosts ) ; }[0m
[32mExample #5[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
---------------
Class: unclear
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . instance ) ; }[0m
[32mExample #2[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract void METHOD_1 ( int index , short value ) ;[0m
Pred: abstract void METHOD_1 ( int index , short value ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: public abstract java.lang.String METHOD_1 ( ) ;[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( java.lang.IllegalArgumentException e ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( java.lang.IllegalArgumentException expected ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( STRING_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . project ) ; }[0m
Trg : public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( change . get ( ) . project ) ; }[0m
Pred: public Project . NameKey METHOD_1 ( ) { return new com.google.gerrit.reviewdb.client.Project.NameKey ( project . get ( project ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( in , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; in . name = name ; }[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . getInstance ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
Pred: private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . valueOf ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception e ) { return VAR_2 ; } }[0m
---------------
Class: Add null check
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 < TYPE_2 > e ) { VAR_1 . METHOD_2 ( e . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public int [ ] METHOD_1 ( ) { return VAR_1 ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { VAR_1 . close ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . close ( ) ; } }[0m
Pred: public void close ( ) { }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getParentKey ( ) ) ) ; }[0m
Trg : public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( project , VAR_1 . getParentKey ( ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_1 result ) { TYPE_2 . display ( TYPE_3 . METHOD_1 ( VAR_1 . getId ( ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId , true ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat.Guid vmId ) { TYPE_1 params = new TYPE_1 ( VAR_1 , vmId ) ; params . METHOD_2 ( TYPE_2 . getParameters ( ) . METHOD_3 ( ) ) ; return params ; }[0m
[31mExample #2[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . StorageDomain ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . StorageDomain ) ) ; }[0m
Pred: public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) , true ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . getId ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #4[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null , null ) ; }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , true ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( android.os.RemoteException VAR_5 ) { } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 e ) { } }[0m
[31mExample #9[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , android.os.Bundle VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , VAR_4 ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; METHOD_6 ( resource . get ( ) , 1 ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , org.ovirt.engine.core.common.businessentities.StorageDomain storageDomain , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 e ) { } }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( android.os.RemoteException VAR_4 ) { } }[0m
[31mExample #15[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , true ) ; }[0m
[31mExample #17[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , TYPE_2 VAR_2 ) { return getEntity ( VAR_3 . List class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , null , STRING_1 ) , STRING_1 , true ) ; }[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.getMessage ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String input ) { return input ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String input ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( input ) ; } catch ( TYPE_3 e ) { throw new TYPE_2 ( e.toString ( ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws android.os.RemoteException { }[0m
---------------
Class: Add/Remove parameter
Golden example (True):
[32mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( in , type , arg ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_2 . VdcQueryReturnValue returnValue ) { this . setItems ( ( ( java.util.List < TYPE_1 > ) ( returnValue . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #2[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int netId ) throws TYPE_2 ;[0m
Pred: TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
[31mExample #3[0m
Src : public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
Pred: public void METHOD_1 ( com.google.gerrit.reviewdb.client.Change change , com.google.gerrit.reviewdb.server.ReviewDb db ) { }[0m
[31mExample #4[0m
Src : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static native void METHOD_1 ( long ret , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: public static native void METHOD_1 ( long ret , long VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws android.os.RemoteException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws android.os.RemoteException { return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
[31mExample #6[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: void METHOD_1 ( int type ) ;[0m
[31mExample #7[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( VAR_1 ) ) . getReturnValue ( ) ) ) ) ; }[0m
Pred: public void onSuccess ( TYPE_2 . VdcQueryReturnValue returnValue ) { setItems ( ( ( TYPE_1 < org.ovirt.engine.core.common.businessentities.VmTemplate > ) ( returnValue . getReturnValue ( ) ) ) ) ; }[0m
[31mExample #8[0m
Src : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 . VdcActionType action , java.util.List < TYPE_2 > VAR_1 ) { }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . DiskImage ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( command . validate ( ) ) ; }[0m
[31mExample #10[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: void METHOD_1 ( ) ;[0m
[31mExample #11[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( int type , int VAR_2 ) { }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , null , false , null ) ; }[0m
[31mExample #13[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
[31mExample #14[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 req , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 in = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . change ( project , id ) . view ( STRING_1 ) . METHOD_3 ( in , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( com.google.gerrit.reviewdb.client.Project.NameKey project , TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , project , VAR_1 , revision , VAR_2 , null , 0 ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , com.google.gerrit.reviewdb.client.PatchSet.Id revision , com.google.gerrit.reviewdb.client.PatchSet.Id revision , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , revision , VAR_2 , null , 0 , 0 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , project , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( project , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( STRING_1 , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String project , com.google.gerrit.reviewdb.client.PatchSet.Id id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . revision ( project , id , STRING_1 ) . id ( VAR_1 ) . equals ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove this qualifier
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
[31mExample #2[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
[31mExample #2[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
[31mExample #3[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
[31mExample #4[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . getVm ( ) ) ) && ( validate ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: private boolean METHOD_1 ( TYPE_1 . DiskImage diskImage ) { return validate ( METHOD_2 ( diskImage ) . METHOD_3 ( TYPE_2 . getParameters ( ) . METHOD_4 ( ) ) ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
[31mExample #7[0m
Src : private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: private boolean METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities.VM > VAR_1 ) { for ( org.ovirt.engine.core.common.businessentities.VM vm : VAR_1 ) { if ( ( vm . getStatus ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
[31mExample #8[0m
Src : private static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 of ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: private static TYPE_1 map ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #9[0m
Src : protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Trg : public TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
Pred: protected TYPE_1 . DbFacade METHOD_1 ( ) { return org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) ; }[0m
[31mExample #10[0m
Src : protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Trg : public void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
Pred: protected void METHOD_1 ( final org.ovirt.engine.core.common.businessentities.VM value ) { vm = value ; }[0m
[31mExample #11[0m
Src : private static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: private static native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
[31mExample #12[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #3[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: protected boolean validate ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , project ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
---------------
Class: Change method return value
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return false ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public final TYPE_1 METHOD_1 ( ) { return this . location ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public boolean METHOD_1 ( ) { return false ; }[0m
[31mExample #3[0m
Src : protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String getRefName ( ) { return ref ; }[0m
Pred: protected java.lang.String getRefName ( ) { return STRING_1 ; }[0m
---------------
Class: Change method return value,Change return type
Golden example (True):
[32mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( long [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( mContext , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: static long METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[31mExample #2[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 pool = new TYPE_1 ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Trg : private static org.ovirt.engine.core.common.businessentities.StoragePool METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool pool = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; pool . setId ( org.ovirt.engine.core.compat.Guid . METHOD_2 ( ) ) ; pool . METHOD_3 ( STRING_1 ) ; return pool ; }[0m
[31mExample #3[0m
Src : private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
Pred: private static void METHOD_1 ( final TYPE_1 r , final TYPE_2 . NameKey branch ) { TYPE_3 . METHOD_2 ( r , STRING_1 , branch . get ( ) ) ; }[0m
[31mExample #4[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VmTemplate ) ( object ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VmTemplate object ) { return java.lang.String.valueOf ( object . METHOD_1 ( ) . size ( ) ) ; }[0m
[31mExample #5[0m
Src : public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object object ) { return ( java.lang.String.valueOf ( ( ( org.ovirt.engine.core.common.businessentities.VM ) ( object ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: public java.lang.String getValue ( org.ovirt.engine.core.common.businessentities.VM object ) { return ( java.lang.String.valueOf ( object . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( TYPE_1 domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StorageDomain domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool domain ) { return ( domain . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (True):
[32mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . instance , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; org.junit.Assert.assertEquals ( STRING_2 , VAR_2 ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , 2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 2 , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( 1 , VAR_1 . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
Pred: public static boolean METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { return ! ( TYPE_1 . METHOD_2 ( vmId ) . isEmpty ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId , org.ovirt.engine.core.compat.Guid VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( vmId , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 , VAR_4 ) ; }[0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . addValue ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( org.ovirt.engine.core.compat.Guid vmId ) { TYPE_2 VAR_1 = METHOD_2 ( ) . addValue ( STRING_1 , vmId ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 , METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
[31mExample #3[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { return new java.io.File ( VAR_1 ) ; }[0m
---------------
Class: Narrow method visibility
Golden example (True):
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
[31mExample #3[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: protected abstract void METHOD_1 ( ) ;[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( ) { return user ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return user ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return user ; }[0m
[31mExample #5[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
[31mExample #3[0m
Src : public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 getInstance ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 getInstance ( ) { if ( ( VAR_1 ) == null ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } return VAR_1 ; }[0m
---------------
Class: Remove invoked method
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 4 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . in ) ) ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = 3 ; VAR_2 = 16 ; args.out = ( ( float ) ( TYPE_2 . METHOD_2 ( args , args . inV ) ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; }[0m
[31mExample #3[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = TYPE_2 . METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = storageDomain . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: public static synchronized boolean METHOD_1 ( TYPE_1 . StorageDomain storageDomain ) { TYPE_2 type = METHOD_2 ( storageDomain . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
[31mExample #4[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
[31mExample #5[0m
Src : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; } }[0m
[31mExample #6[0m
Src : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , TYPE_3 . METHOD_5 ( disk ) ) ; return disk ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 disk = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( vmId , disk ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
Pred: public TYPE_1 get ( ) { TYPE_1 res = METHOD_1 ( METHOD_2 ( ) : : value ) ; TYPE_2 . METHOD_4 ( vmId , disk ) ; return disk ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private org.ovirt.engine.core.common.businessentities . VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: private org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) , name , true , null , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . VDS class ) , TYPE_1 . any ( VAR_3 class ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( command ) . METHOD_2 ( TYPE_1 . any ( VAR_2 . IdQueryParameters class ) , TYPE_1 . any ( VAR_3 ) ) ; command . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 quota , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false , false ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( 16 ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( mRS ) ; VAR_1 . METHOD_2 ( s ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_2 { }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , branch , null , null ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > repo , java.lang.String branch ) throws java.lang.Exception { return METHOD_2 ( repo , null , null , branch , null , null ) ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
[31mExample #9[0m
Src : public TYPE_1 create ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 create ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public TYPE_1 create ( ) { return new TYPE_1 ( ) ; }[0m
[31mExample #10[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return VAR_1 . METHOD_3 ( ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , result ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , null , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new org.ovirt.engine.core.common.businessentities.VM ( ) , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Disk > ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
[31mExample #15[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws android.os.RemoteException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_4 , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , true ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 0 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.doReturn ( null ) . when ( validator ) . METHOD_2 ( TYPE_1 . any ( VAR_1 . Guid class ) ) ; TYPE_2 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap ( ) ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . create ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( VAR_2 . Guid class ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( null ) ; TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( command , VAR_3 ) ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
[31mExample #23[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 r = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( r . METHOD_3 ( ) ) ; }[0m
---------------
Class: Remove redundant initialization
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_3 ( VAR_1 ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #3[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 ) ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.compat.Guid VAR_2 = org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( getEntity ( 1 ) ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( resource . get ( ) , 1 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( true ) ; TYPE_1 . METHOD_4 ( validator . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; }[0m
[31mExample #9[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int id , java.lang.String ... ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; resource . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; org.ovirt.engine.core.compat.Guid VAR_2 = VAR_3 ; java.util.List < TYPE_1 > dao = dao . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
[31mExample #13[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public static void METHOD_1 ( ) { TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public void METHOD_1 ( int VAR_1 ) { android.util.Log.e ( VAR_2 . TAG , ( STRING_1 + VAR_1 ) ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; resource . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = resource . get ( ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; org.ovirt.engine.ui.frontend.Frontend . METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_3 ( null ) ; }[0m
[31mExample #18[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( getEntity ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
[31mExample #20[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { return arg - 1 ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ! ( VAR_1 ) ) ; METHOD_3 ( ! ( VAR_1 ) ) ; }[0m
[31mExample #22[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
[31mExample #23[0m
Src : public static long METHOD_1 ( long arg1 , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + VAR_3 ) ; }[0m
Pred: public static long METHOD_1 ( long arg1 , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( arg1 + VAR_3 ) | ( arg1 + ( VAR_3 ) ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: public void METHOD_1 ( final java.lang.String VAR_1 ) { format = VAR_1 ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
[31mExample #26[0m
Src : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: protected void METHOD_1 ( android.os.Bundle VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
[31mExample #27[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . getMessage ( ) . equals ( VAR_2 ) ) ; }[0m
---------------
Class: Rename method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < org.ovirt.engine.core.common.businessentities > VAR_1 = ( ( java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ) ( ( ( TYPE_1 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( VAR_1 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
[31mExample #3[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean validate ( ) ;[0m
Pred: boolean METHOD_1 ( ) ;[0m
---------------
Class: Rename parameter
Golden example (True):
[32mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
Pred: public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , java.lang.IllegalArgumentException ;[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: TYPE_1 id ( ) ;[0m
[31mExample #2[0m
Src : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version Version ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , org.ovirt.engine.core.compat . Version version ) ;[0m
Pred: public int METHOD_1 ( int VAR_1 ) ;[0m
---------------
Class: Rename variable
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private native java.lang.String METHOD_1 ( ) ;[0m
Pred: protected java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; org.junit.Assert . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; org.junit.Assert.assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - 1 ) ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 e ) { VAR_2 . println ( STRING_1 ) ; } }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
[31mExample #2[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 < TYPE_1 > ( value , version . toString ( ) , returnValue ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , version . toString ( ) , returnValue ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , org.ovirt.engine.core.compat . Version version , TYPE_1 returnValue ) { return new TYPE_2 ( value , value . toString ( ) , returnValue ) ; }[0m
---------------
Class: Replace invoked method
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . get ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . isEqualTo ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { com.google.common.truth.Truth.assertThat ( VAR_2 . METHOD_2 ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_2 ( ) ) . isEqualTo ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 in = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 r = VAR_2 . put ( STRING_2 , in ) ; org.junit.Assert.assertEquals ( VAR_3 , r . METHOD_2 ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , res . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; com.google.common.truth.Truth.assertThat ( res . METHOD_4 ( ) ) . isEqualTo ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 res = METHOD_3 ( STRING_1 ) ; org.junit.Assert.assertEquals ( STRING_2 , . METHOD_4 ( ) ) ; }[0m
[31mExample #5[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > ( VAR_2 ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_2 , r . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . delete ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 r = VAR_1 . METHOD_2 ( METHOD_2 ( ) ) ; com.google.common.truth.Truth.assertThat ( r . METHOD_3 ( ) ) . isEqualTo ( VAR_2 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { com.google.common.truth.Truth.assertThat ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . isEqualTo ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
[31mExample #8[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , org.ovirt.engine.core.compat . Version VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
[31mExample #9[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . getParameters ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.Network result = dao . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.core.common.businessentities.StoragePool item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
[31mExample #12[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( vds . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . ValidationResult ( VAR_3 ) ; } return VAR_4 ; }[0m
[31mExample #13[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
[31mExample #14[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: protected java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getStoragePoolId ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VDS > result = dao . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
[31mExample #16[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( getEntity ( ) . getId ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #17[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . getStoragePoolId ( ) ) ; return METHOD_5 ( VAR_2 , params , action ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 action ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( getEntity ( ) . METHOD_4 ( ) , action ) ; }[0m
[31mExample #18[0m
Src : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public int METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 , org.ovirt.engine.core.common.businessentities.network.Network VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
[31mExample #19[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . VdcQueryType VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #21[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #22[0m
Src : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . getName ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( org.ovirt.engine.core.common.businessentities.VM entity ) { return entity . METHOD_2 ( ) ; }[0m
[31mExample #23[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) { return VAR_1 ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( storage ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_1 ( storage ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String storage ) { METHOD_2 ( ) . METHOD_3 ( value ) ; }[0m
[31mExample #25[0m
Src : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( org.ovirt.engine.core.common.businessentities.network.Network VAR_1 ) { return iface . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.core.common.businessentities.VDSGroup result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { dao . METHOD_2 ( VAR_1 ) ; projects result = dao . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
---------------
Class: Replace statement
Golden example (True):
[32mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . getMessage ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; }[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = Main . METHOD_2 ( INT_1 ) ; int VAR_2 = Main . METHOD_3 ( 3 ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = 10 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
Pred: public static long METHOD_1 ( ) { long VAR_1 = INT_1 ; int VAR_2 = 3 ; return VAR_1 & VAR_2 ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
---------------
Class: unclear
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { validator = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( validator . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected native byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
---------------
================
Duration: 0:03:33.097419

Start conducting one shot learning experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 1 / 56 = 0.017857142857142856
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 2 / 56 = 0.03571428571428571
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 2 / 56 = 0.03571428571428571
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 2 / 56 = 0.03571428571428571
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 4 / 56 = 0.07142857142857142

Top-1 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 4 / 188 = 0.02127659574468085
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 6 / 188 = 0.031914893617021274
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 8 / 188 = 0.0425531914893617
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 10 / 188 = 0.05319148936170213
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 14 / 188 = 0.07446808510638298
================
Correct Examples
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 d = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( d == null ) { return false ; } d . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
[32mExample #2[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; result . METHOD_3 ( ) . add ( METHOD_4 ( ( java.lang.String ) ( value ) ) ) ; } return result ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Trg : protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Pred: protected boolean validate ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . getParameters ( ) . METHOD_5 ( ) , TYPE_1 . getParameters ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { METHOD_2 ( METHOD_3 ( VAR_3 . getName ( ) ) ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( server . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
---------------
================
================
Incorrect Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return VAR_2 ; return service . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return VAR_2 ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return VAR_2 ; } return service . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { return TYPE_2 . METHOD_3 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) return false ; return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { android.util.Log.w ( TYPE_2 . TAG , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { METHOD_3 ( STRING_1 , STRING_1 ) ; return false ; } TYPE_2 service = METHOD_3 ( ) ; if ( service == null ) { return false ; } return service . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #2[0m
Src : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Log.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; <unk> = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Trg : private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) { android.util.Log.d ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; } android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; <unk> = address ; msg.arg1 = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Pred: private synchronized void METHOD_1 ( byte [ ] address , boolean VAR_1 ) { if ( VAR_2 ) android.util.Slog.v ( VAR_3 . TAG , ( STRING_1 + VAR_1 ) ) ; android.os.Message msg = VAR_4 . METHOD_2 ( VAR_5 ) ; VAR_5 = INT_1 ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) return ; service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 fd , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( fd ) ) ; TYPE_4 service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 pw , java.lang.String [ ] args ) { TYPE_2 service = new TYPE_2 ( ) ; service service = METHOD_2 ( ) ; if ( service == null ) { return ; } service . METHOD_1 ( fd , VAR_1 , args ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (True):
[32mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( VAR_4 class ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object returnValue ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( returnValue ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . any ( ) ) ) . thenReturn ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Trg : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 entry = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return entry ; } } android.util.Log.e ( TYPE_1 . TAG , ( STRING_1 + name ) ) ; return null ; }[0m
Pred: TYPE_1 < TYPE_2 > . METHOD_1 ( java.lang.String name ) { java.util.Set < TYPE_1 < > > VAR_2 = VAR_2 . METHOD_2 ( ) ; while ( i . i . METHOD_4 ( ) ) { return ( VAR_3 . equals ( name ) ) ; } }[0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Trg : public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Pred: public java.lang.String METHOD_1 ( int subId , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , VAR_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } return null ; }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( VAR_4 . Guid class ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_2 . METHOD_4 ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { org.mockito.Mockito.when ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . thenReturn ( VAR_3 ) ; }[0m
[31mExample #4[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getParameters ( ) . getStoragePoolId ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_3 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_4 ( ) , org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . getParameters ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . getParameters ( ) . METHOD_8 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getStoragePoolId ( ) ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_5 ( VAR_2 , org.mockito.Mockito . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . any ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( cmd . METHOD_8 ( ) , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( true ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; TYPE_3 . METHOD_4 ( cmd . validate ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 d = TYPE_5 . METHOD_2 ( version , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 r = new TYPE_6 ( d , VAR_4 , 0 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 version , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 = TYPE_5 . METHOD_2 ( version version , VAR_2 , VAR_3 , VAR_1 ) ; r r = new TYPE_6 ( d , VAR_4 ) ; VAR_5 . METHOD_4 ( d . METHOD_5 ( ) , r ) ; }[0m
[31mExample #9[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , subId , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int subId ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( subId ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
---------------
Class: Add statement
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = <unk> . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( java.lang.String.valueOf ( VAR_2 ) ) ) { TYPE_3 = java.lang.String.valueOf ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) . setId ( new org.ovirt.engine.core.compat.Guid ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = <unk> . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 config ) { TYPE_1 node = . METHOD_3 ( TYPE_2 . get ( STRING_2 ) . getValue ( ) ) ; return METHOD_3 ( VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , s ) ; s . METHOD_4 ( VAR_4 , VAR_5 ) ; s . METHOD_5 ( VAR_5 , VAR_5 ) ; s . METHOD_6 ( VAR_5 , VAR_5 ) ; s . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; s . METHOD_10 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Pred: public void run ( ) { return VAR_1 = new TYPE_2 ( ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Trg : public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; s . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Pred: public void run ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 s = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( s ) ; VAR_1 . METHOD_5 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
[31mExample #2[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . setItems ( VAR_1 ) ; METHOD_1 ( ) . setSelectedItem ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Pred: public void onSuccess ( java.util.List < TYPE_1 > VAR_1 ) { VAR_1 = VAR_1 ; }[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk disk : VAR_1 ) { if ( ( disk . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( disk . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } } } return VAR_3 ; }[0m
Pred: private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . Disk > VAR_1 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . Disk : VAR_1 ) { VAR_3 . add ( ( ( TYPE_1 ) ( disk ) ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Trg : protected java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , in ) ) ) { return false ; } } return true ; }[0m
Pred: private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 in ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , in ) ) ) { return false ; } }[0m
[31mExample #3[0m
Src : private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( getVm ( ) . METHOD_4 ( ) ) ) . getReturnValue ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Pred: private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( ) ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( ) . METHOD_4 ( ) ) ) ; if ( VAR_1 ) { addCanDoActionMessage ( VAR_3 ) ; } return VAR_1 ; }[0m
[31mExample #4[0m
Src : private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Pred: private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { return false ; }[0m
---------------
Class: Change comparison operator (e.g. >) in condition
Golden example (False):
[31mExample #1[0m
Src : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Trg : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Pred: private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { return TYPE_1 [ ] VAR_2 = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( VAR_1 + 1 ) - 1 ) ) ) ++ ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Trg : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Pred: private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { return VAR_4 . METHOD_3 ( VAR_1 ) ; } }[0m
---------------
Class: Change exception type in catch clause
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_5 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_5 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 = METHOD_2 ( x ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( e ) ; } catch ( java.lang.RuntimeException e ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable e ) { throw METHOD_7 ( x , e ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.RuntimeException e ) { throw METHOD_7 ( x , e ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . Float ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . setId ( new TYPE_3 . VAR_7 , VAR_7 , VAR_2 . METHOD_3 ( ) , VAR_2 ) ; }[0m
[31mExample #2[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , d , VAR_5 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_6 , int VAR_7 , int VAR_6 , int VAR_6 , int VAR_6 , int VAR_6 , int VAR_6 , int VAR_6 , int VAR_6 , a , VAR_12 , VAR_5 , VAR_5 ) ; }[0m
[31mExample #3[0m
Src : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Trg : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 res = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Pred: public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new java.lang.RuntimeException ( STRING_1 ) ; METHOD_3 ( res . METHOD_4 ( ) ) ; return res ; } }[0m
[31mExample #4[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( java.util.Map VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; }[0m
[31mExample #5[0m
Src : private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Trg : private org.ovirt.engine.core.compat.Guid METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 map : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Pred: private org.ovirt.engine.core.compat.Guid METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 : VAR_2 ) { if ( METHOD_4 ( map . METHOD_5 ( ) ) ) { return map . METHOD_5 ( ) ; } } return VAR_4 ; }[0m
[31mExample #6[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , int [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int VAR_5 , byte [ ] d , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( mContext , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , w , h , VAR_5 , d , VAR_6 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int w , int h , int [ ] d , int VAR_6 ) ;[0m
[31mExample #7[0m
Src : public void METHOD_1 ( int session , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( session , VAR_1 , c , VAR_2 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session , int VAR_1 , TYPE_1 VAR_2 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; org.junit.Assert.assertEquals ( STRING_1 , new java.lang.String ( VAR_1 ) ) ; }[0m
[31mExample #8[0m
Src : static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Trg : static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Pred: static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; return VAR_2 ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 2 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , model . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( model , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . VM model , int VAR_1 ) { METHOD_2 ( model . METHOD_3 ( ) . getId ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
Trg : private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < org.ovirt.engine.core.common.businessentities.DiskImage > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( VAR_2 . Guid class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_5 ( command . validate ( ) ) ; TYPE_2 . METHOD_6 ( command . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new org.ovirt.engine.core.common.businessentities.VDS ( ) , true ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( VAR_1 ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_1 ) . METHOD_4 ( ) ; org.mockito.Mockito.doReturn ( VAR_5 ) . when ( VAR_1 ) . METHOD_5 ( ) ; org.mockito.Mockito . METHOD_6 ( ) . when ( VAR_1 ) . METHOD_7 ( TYPE_2 . any ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new TYPE_2 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > list = VAR_2 . Linq < org.ovirt.engine.core.common.businessentities.VDS > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_3 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; TYPE_3 in = t . METHOD_3 ( args . inV ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; args.out = t . METHOD_4 ( in , VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( 3 , 3 , false ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , version , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 . ValidationResult VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; org.mockito.Mockito.when ( nic . METHOD_3 ( ) ) . thenReturn ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , validator . METHOD_4 ( ) ) ; }[0m
[31mExample #7[0m
Src : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * 2 ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Trg : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 . length , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Pred: protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < org.ovirt.engine.core.common.businessentities.VM > result = dao . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( result , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . getId ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 VAR_1 , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( service == null ) { throw new TYPE_2 ( error ) ; } } }[0m
[31mExample #2[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( v == null ) ? ( ( long ) ( m . METHOD_2 ( ) ) ) : ( ( long ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 VAR_2 , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { METHOD_4 ( long ) . METHOD_2 ( VAR_3 ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = validator . METHOD_2 ( new org.ovirt.engine.core.common.businessentities.VDS ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( false ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 , VAR_2 . get ( 0 ) ) ; }[0m
[31mExample #4[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( v == null ) { m . METHOD_2 ( value ) ; } else { m . METHOD_2 ( v , value ) ; } } catch ( TYPE_3 e ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 a , long VAR_1 , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( service == null ) { throw new METHOD_2 ( value ) ; } } }[0m
---------------
Class: Change qualified name in response to a move class refactoring
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String toString ( ) { TYPE_1 sb = new TYPE_1 ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Trg : public java.lang.String toString ( ) { java.lang.StringBuilder sb = new java.lang.StringBuilder ( ( ( ( size ) * 5 ) + 10 ) ) ; sb.append ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { sb.append ( STRING_1 ) ; } sb.append ( values [ i ] ) ; } sb.append ( CHAR_2 ) ; return sb . toString ( ) ; }[0m
Pred: public java.lang.String toString ( ) { return item ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities . Network > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , new TYPE_1 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_1 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( TYPE_2 . any ( ) , TYPE_2 . METHOD_3 ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( org.mockito.Mockito . METHOD_5 ( VAR_2 class ) ) ) ; org.mockito.Mockito.when ( VAR_3 . METHOD_6 ( ) ) . thenReturn ( VAR_1 ) ; validator = new TYPE_4 ( VAR_3 , cluster , VAR_4 ) ; TYPE_5 . METHOD_7 ( validator . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_6 ( VAR_3 . METHOD_6 ( ) , VAR_4 ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities.network.Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities.network.Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( TYPE_5 : VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 resource ) { METHOD_2 ( resource , VAR_1 ) ; org.ovirt.engine.core.common.businessentities . Network network = METHOD_3 ( resource ) ; if ( network != null ) { resource . METHOD_4 ( ) . METHOD_5 ( network . METHOD_6 ( ) ) ; resource . METHOD_4 ( ) . setId ( null ) ; } return METHOD_7 ( resource , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 resource ) { return network . METHOD_3 ( resource ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat.Guid id : VAR_1 ) { java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_2 = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StoragePool VAR_1 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_1 . setId ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setId ( VAR_2 ) ; org.mockito.Mockito.when ( VAR_4 . get ( VAR_2 ) ) . thenReturn ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities . VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities . VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; <unk> ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; <unk> ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; METHOD_6 ( VAR_4 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( org.ovirt.engine.core.common.businessentities.StorageDomain ) ( source ) ) : null ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_4 ( VAR_1 , mContext . METHOD_5 ( ) , VAR_2 ) ; } catch ( android.os.RemoteException e ) { throw new java.lang.RuntimeException ( e ) ; } }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ) ( source ) ) : new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . Disk ) ; VAR_1 . METHOD_2 ( INT_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , VAR_1 , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #3[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( disk . METHOD_3 ( ) ) != null ? disk . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( TYPE_1 . Disk disk ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , disk . METHOD_2 ( ) ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new TYPE_3 ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; } catch ( android.os.RemoteException e ) { throw e . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_4 ( ) . METHOD_1 ( mContext . METHOD_5 ( ) , VAR_1 ) ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( getModel ( ) , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { getModel ( ) . METHOD_3 ( ) . setEntity ( ( ( java.lang.Boolean ) ( returnValue ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( org.ovirt.engine.core.compat.Guid id ) { TYPE_1 . METHOD_2 ( new ( getModel ( ) ) , null ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_2 ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.DiskImage > ( ) ; } } ; org.ovirt.engine.core.common.queries.IdQueryParameters params = new org.ovirt.engine.core.common.queries.IdQueryParameters ( vmId ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid vmId , boolean VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , METHOD_3 ( ) ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Trg : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.lang.Integer ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , model . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Pred: private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { METHOD_3 ( ) ; METHOD_3 ( ) ; } }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( VAR_1 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new org.ovirt.engine.core.common.queries.IdQueryParameters ( id ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid id ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( returnValue ) ) ) ; } } ; TYPE_2 . getInstance ( ) . METHOD_4 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_1 . METHOD_2 ( this ) ; }[0m
[31mExample #8[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_2 , params , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_2 , params , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , TYPE_1 VAR_1 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #9[0m
Src : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { setItems ( ( ( java.util.List < TYPE_2 > ) ( returnValue ) ) ) ; METHOD_3 ( ) ; } } ) , getEntity ( ) . getId ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( getEntity ( ) ) == null ) { return ; } }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Trg : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( returnValue ) ) ) ; } } ) ) ; }[0m
Pred: private void METHOD_1 ( final TYPE_1 VAR_1 ) { }[0m
[31mExample #11[0m
Src : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , org.ovirt.engine.core.compat . Version > , java.lang.Boolean > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( ) { org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 = new org.ovirt.engine.ui.frontend.AsyncQuery ( ) ; VAR_2 = new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { VAR_3 = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( ) { display ( VAR_1 class ) ; }[0m
[31mExample #12[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( name ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #13[0m
Src : private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 . getInstance ( ) . METHOD_2 ( new org.ovirt.engine.ui.frontend.AsyncQuery ( this , new org.ovirt.engine.ui.frontend.INewAsyncCallback ( ) { public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { VAR_1 = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StorageDomain > ) ( returnValue ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_1 ( new java.util.ArrayList < > > ) ( returnValue ) ) ; METHOD_3 ( ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source != null ) { return source ; } return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ( ) ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , org.ovirt.engine.core.compat.Guid VAR_1 , boolean VAR_2 ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
[31mExample #15[0m
Src : public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( org.ovirt.engine.core.compat . Version VAR_3 : VAR_4 < TYPE_1 < org.ovirt.engine.core.compat . Version > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; }[0m
[31mExample #16[0m
Src : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend . RunQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Trg : public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object Convert ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { if ( source == null ) { return new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.StoragePool > ( ) ; } return source ; } } ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . runQuery ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . StoragePool ) , aQuery ) ; }[0m
Pred: public static void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery , java.lang.String name ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; return map ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , obj . getName ( ) ) . addValue ( STRING_2 , obj . METHOD_3 ( ) ) . addValue ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 map = METHOD_2 ( obj . getId ( ) ) . addValue ( STRING_1 , STRING_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , long <unk> , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( <unk> , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , long <unk> , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( <unk> , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { return VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } return VAR_5 ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; try { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new VAR_3 [ 0 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Trg : public static void METHOD_1 ( int id , int flags , final boolean VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; } catch ( java.lang.Throwable e ) { throw TYPE_2 . METHOD_5 ( e ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Pred: public static void METHOD_1 ( java.lang.String project , int id , int flags , final boolean VAR_1 ) { try { VAR_2 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , flags ) ; e ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; try { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ;[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 = dao . get ( new org.ovirt.engine.core.compat.Guid ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; vds = new org.ovirt.engine.core.compat.Guid ( STRING_2 ) ; VAR_4 = new org.ovirt.engine.core.compat.Guid ( STRING_3 ) ; storageDomain = new org.ovirt.engine.core.compat.Guid ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new org.ovirt.engine.core.compat . Version ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; dao = VAR_1 . METHOD_3 ( ) ; VAR_2 . METHOD_6 ( STRING_2 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_6 ( STRING_5 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . getVm ( ) . METHOD_4 ( ) , TYPE_4 . getParameters ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . getSucceeded ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new <unk> ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , org.ovirt.engine.ui.frontend.AsyncQuery _asyncQuery ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , aQuery ) ; }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.frontend.AsyncQuery aQuery ) { aQuery.converterCallback = new org.ovirt.engine.core.common.businessentities.VM ( ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( null ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( getSelectedItem ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . getReturnValue ( ) ) ; } } ; getWindow ( ) . METHOD_5 ( ) ; org.ovirt.engine.ui.frontend.Frontend.getInstance ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return vm ; }[0m
Trg : public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; vm . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type ) ; return vm ; }[0m
Pred: public static TYPE_1 map ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 vm ) { TYPE_3 VAR_2 = vm . METHOD_1 ( ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_1 , response , VAR_3 , VAR_2 ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_3 { TYPE_4 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; }[0m
[31mExample #3[0m
Src : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . getStatus ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) . METHOD_4 ( ) ) ; METHOD_6 ( ) . METHOD_7 ( ) . getName ( ) ; return null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . getStatus ( ) ) ; METHOD_8 ( ( ( response . getEntity ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . getEntity ( ) ) ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( METHOD_4 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , null , null ) ) ; METHOD_5 ( cmd . validate ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( VAR_7 . Guid class ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; org.ovirt.engine.core.common.businessentities.StoragePool VAR_4 = new org.ovirt.engine.core.common.businessentities.StoragePool ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; org.mockito.Mockito.when ( VAR_6 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( VAR_4 ) ; TYPE_2 . METHOD_5 ( validator . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_3 ( VAR_3 ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( VAR_5 . Guid class ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; org.mockito.Mockito.when ( VAR_4 . METHOD_3 ( TYPE_2 . any ( ) ) ) . thenReturn ( TYPE_3 . METHOD_4 ( vm ) ) ; org.mockito.Mockito.when ( VAR_6 . METHOD_5 ( vm . getId ( ) ) ) . thenReturn ( vm . METHOD_6 ( ) ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.VM vm = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; org.mockito.Mockito.doReturn ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . when ( command ) . METHOD_4 ( TYPE_3 . any ( ) ) ; TYPE_4 . METHOD_5 ( command ) ; command . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( command . getReturnValue ( ) . getSucceeded ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = command . METHOD_2 ( ) . METHOD_3 ( ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd , VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( cmd . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , null , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( cmd . validate ( ) ) ; }[0m
[31mExample #10[0m
Src : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( VAR_6 class ) ) ; return VAR_2 ; }[0m
Trg : protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( boolean VAR_1 ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new org.ovirt.engine.core.common.businessentities.StorageDomain ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } org.mockito.Mockito.doReturn ( METHOD_6 ( VAR_3 ) ) . when ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . any ( ) ) ; return VAR_2 ; }[0m
Pred: protected org.ovirt.engine.core.common.businessentities.StorageDomain METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.StorageDomain VAR_2 = null ; java.util.List < org.ovirt.engine.core.common.businessentities.StorageDomain > VAR_3 = new TYPE_1 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( ) ; command . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( command ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; vm . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 expected = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( expected , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 t = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , expected , ( - 1 ) , null , null , null ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; org.junit.Assert.assertEquals ( expected , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 location = mContext . METHOD_3 ( node ) ; mContext . METHOD_4 ( VAR_2 , node , location , ( STRING_2 + STRING_3 ) ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 node ) { return VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.IllegalArgumentException { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; org.mockito.Mockito.verify ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws java.lang.Exception { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , false ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) { context . METHOD_4 ( VAR_2 . METHOD_3 ( ) . equals ( STRING_1 ) ) ; } }[0m
[31mExample #16[0m
Src : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object returnValue ) { this . METHOD_1 ( ( returnValue == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { METHOD_1 ( ( ( cluster == null ? new java.util.ArrayList < TYPE_1 > ) ( ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ) ) ) ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( VAR_4 class ) ) ; }[0m
Trg : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
Pred: protected void METHOD_1 ( boolean VAR_1 ) { VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( command ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . any ( ) ) ; }[0m
[31mExample #18[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 ) ; } }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
[31mExample #19[0m
Src : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( VAR_2 , true ) ; org.junit.Assert.assertEquals ( ( STRING_1 + ( STRING_2 + STRING_8 ) ) , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 r = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( r != null ) { return VAR_3 ; } } return null ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( VAR_2 . Version class ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ; cmd . METHOD_3 ( ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . any ( ) ) ) . thenReturn ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , cmd . METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd . getParameters ( ) . getVm ( ) . METHOD_2 ( cluster . getId ( ) ) ;[0m
[31mExample #23[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 , null ) ; }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , location , VAR_3 ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 location = VAR_2 . METHOD_2 ( ) ; return VAR_4 ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( VAR_2 . Guid class ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; cmd . METHOD_1 ( ) ; org.mockito.Mockito . METHOD_4 ( VAR_1 , org.mockito.Mockito . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . any ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , cmd . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; }[0m
[31mExample #25[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , options ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { return TYPE_2 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #26[0m
Src : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( constants ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Trg : void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( model . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 model ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( model . METHOD_3 ( ) ) ) { VAR_3 = METHOD_4 ( ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
---------------
Class: Remove redundant initialization,Replace statement
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > config ) { TYPE_3 rr = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { java.util.ArrayList < TYPE_4 > ret = TYPE_5 . METHOD_3 ( config , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , ret ) ; } VAR_2 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.util.List < TYPE_2 > config ) { TYPE_3 VAR_2 = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( != null ) { VAR_1 . METHOD_3 ( config , VAR_2 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 rr = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( rr != null ) { TYPE_4 ret = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , ret ) ; } VAR_3 . METHOD_5 ( rr , VAR_1 , ret ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 msg = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( != null ) { VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ; } }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int action ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( action ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , action ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int action )[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( <unk> , STRING_8 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; provider . METHOD_2 ( STRING_9 , STRING_8 ) ; provider . METHOD_2 ( <unk> , STRING_8 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 provider ) { provider . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_4 ) ) ; provider . METHOD_2 ( STRING_7 , STRING_8 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; try { resource . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . getStatus ( ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; METHOD_6 ( STRING_1 ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; }[0m
[31mExample #5[0m
Src : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Trg : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 dao = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { dao . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; dao . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 params = org.ovirt.engine.core.dal.dbbroker.DbFacade.getInstance ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = dao . METHOD_3 ( VAR_1 . getId ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { VAR_2 . METHOD_6 ( VAR_2 ) ; } return VAR_2 ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { org.junit.Assert.assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . IdQueryParameters class ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_2 model = getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( vds ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( vm ) ; final org.ovirt.engine.core.common.businessentities.VDS VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { final org.ovirt.engine.core.common.businessentities.VDS vds = null ; final org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_1 ) ; VAR_1 . METHOD_6 ( vm ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , getEntity ( 1 ) ) ; TYPE_1 . Disk disk = resource . get ( ) ; TYPE_2 . METHOD_6 ( disk , 1 ) ; METHOD_7 ( disk ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( getVm ( ) ) ; TYPE_2 VAR_3 = resource . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_6 ( resource . get ( ) ) ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; getName ( ) . setIsChangable ( false ) ; METHOD_4 ( ) . setIsChangable ( false ) ; }[0m
Trg : private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; if ( vds == null ) { vds = new org.ovirt.engine.core.common.businessentities.VDS ( ) ; } METHOD_3 ( vds , null , false , null ) ; }[0m
Pred: private void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( METHOD_2 ( ) . getSelectedItem ( ) ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) , TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . METHOD_3 ( TYPE_1 . any ( ) ) ; VAR_1 . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , command . validate ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.doReturn ( false ) . when ( command ) . any ( ) . METHOD_6 ( ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { org.mockito.Mockito.when ( VAR_1 . get ( TYPE_1 . any ( ) ) ) . thenReturn ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . Main class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 options = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; options . METHOD_4 ( VAR_2 ) ; options . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( options . METHOD_8 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . from class ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { } ) ; }[0m
[31mExample #16[0m
Src : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( getModel ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , org.ovirt.engine.ui.uicommonweb.UICommand VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( source , VAR_1 ) , { if ( VAR_1 == ( getModel ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { org.mockito.Mockito.when ( VAR_1 . METHOD_2 ( ) ) . thenReturn ( null ) ; METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( false ) ; cmd . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , cmd , VAR_2 ) ; org.mockito.Mockito . METHOD_6 ( VAR_3 , org.mockito.Mockito . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . any ( VAR_5 class ) ) ; org.mockito.Mockito . METHOD_6 ( cmd , org.mockito.Mockito . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_4 ( false ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { } int c = TYPE_1 . METHOD_3 ( ) ; int s = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( s ) ) ; TYPE_1 . METHOD_6 ( s ) ; TYPE_1 . METHOD_7 ( c ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException expected ) { TYPE_1 . METHOD_7 ( c ) ; } }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; disk . METHOD_5 ( vmId ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_4 ( true ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( command ) . METHOD_6 ( ) ; org.mockito.Mockito.when ( VAR_3 . get ( VAR_1 ) ) . thenReturn ( disk ) ; METHOD_7 ( false ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.DiskImage disk = new org.ovirt.engine.core.common.businessentities.DiskImage ( ) ; disk . METHOD_2 ( VAR_1 ) ; disk . METHOD_3 ( VAR_2 ) ; disk . METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
[31mExample #20[0m
Src : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( VAR_1 == ) || ( path . equals ( STRING_1 ) ) ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } }[0m
[31mExample #21[0m
Src : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
Trg : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 res = this ; res != null ; res = res . METHOD_2 ( ) ) { TYPE_1 obj = res . METHOD_3 ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }[0m
Pred: protected abstract TYPE_1 METHOD_1 ( int index ) ;[0m
[31mExample #22[0m
Src : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Trg : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Pred: private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_2 ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , diskImage ) . METHOD_9 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VM vm = new org.ovirt.engine.core.common.businessentities.VM ( ) ; vm . METHOD_4 ( VAR_2 ) ; vm . METHOD_5 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( METHOD_6 ( false ) ) . when ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( vm , VAR_1 ) . METHOD_9 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . DiskImage diskImage = new TYPE_1 . DiskImage ( ) ; diskImage . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network model = new TYPE_1 . Network ( ) ; model . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_3 . add ( model ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . Network network = new TYPE_1 . Network ( ) ; }[0m
[31mExample #25[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ! ( METHOD_2 ( ) ) ) { android.util.Log.e ( android.bluetooth.BluetoothDevice . TAG , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { METHOD_2 ( METHOD_2 ( ) ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_1 model = TYPE_2 . getModel ( 1 ) ; model . setId ( VAR_2 [ 1 ] . toString ( ) ) ; try { resource . METHOD_6 ( model ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; }[0m
---------------
Class: Remove statement,Add try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; VAR_1 . METHOD_7 ( ) ; server . METHOD_7 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { final int VAR_2 = 100 ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= 10 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; server . METHOD_6 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , server . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 server = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( ) . METHOD_3 ( ) ; }[0m
---------------
Class: Remove statement,Move existing statements in try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . put ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.network.VdsNetworkInterface > ( ) ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . IdQueryParameters class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { resource . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 class ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { resource . METHOD_6 ( getModel ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; }[0m
---------------
Class: Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . getEntity ( ) ) ) ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } else { METHOD_3 ( ) . setIsChangable ( METHOD_2 ( ) . getEntity ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object sender , TYPE_2 args ) { if ( ( METHOD_2 ( ) . getEntity ( ) ) == null ) { METHOD_3 ( ) . setIsChangable ( false ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . Float ( value ) ) ; } }[0m
Trg : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
Pred: public void METHOD_1 ( final float value ) { VAR_2 . METHOD_4 ( new TYPE_2 ( ) ) ; }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . validate ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { TYPE_1 . ValidationResult result = super . METHOD_1 ( value ) ; result . METHOD_3 ( ) . add ( METHOD_4 ( ( java.lang.String ) ( value ) ) ) ; } return result ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 tempVar = new TYPE_1 ( ) ; tempVar . METHOD_2 ( 1 ) ; tempVar . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , tempVar } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( 1 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( returnValue != null ) { org.ovirt.engine.core.common.businessentities.VDS VAR_2 = ( ( org.ovirt.engine.core.common.businessentities.VDS ) ( returnValue ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Trg : protected boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( validate ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( validate ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( validate ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Pred: protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1[0m
[31mExample #5[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Trg : public boolean validate ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . getEntity ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_7 ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . ValidationResult validate ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . ValidationResult VAR_4 = new TYPE_1 . ValidationResult ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 . ValidationResult METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Trg : public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . setIsChangable ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . setIsChangable ( false ) ; } } }[0m
Pred: public void onSuccess ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) . getReturnValue ( ) ; model . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 model = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . VdcQueryReturnValue ) ( returnValue ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( returnValue ) ) { VAR_1 . METHOD_3 ( ) . add ( ) ; } }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . hosts = hosts ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void onSuccess ( java.lang.Object target , java.lang.Object returnValue ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > hosts = ( ( java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VDS > ) ( returnValue ) ) ; VAR_1 . setId ( name ) ; VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Trg : public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( returnValue ) ) ; TYPE_1 pool = VAR_1 . get ( 0 ) ; if ( pool != null ) { TYPE_2 . METHOD_2 ( ( ( org.ovirt.engine.ui.frontend.AsyncQuery ) ( model ) ) , pool . getId ( ) ) ; } }[0m
Pred: public void onSuccess ( java.lang.Object model , java.lang.Object returnValue ) { TYPE_1 . METHOD_1 ( VAR_1 ) ; }[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_6 ( ) ) ; dao . METHOD_7 ( VAR_4 ) ; org.ovirt.engine.core.common.businessentities . Network result = dao . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = dao . METHOD_2 ( ) . METHOD_3 ( cluster ) ; TYPE_1 VAR_3 = result . METHOD_6 ( ) ; TYPE_2 . METHOD_6 ( VAR_4 , result ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( org.ovirt.engine.core.common.businessentities . Network VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < org.ovirt.engine.core.common.businessentities . Network > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < org.ovirt.engine.core.common.businessentities > : new java.util.ArrayList ( VAR_1 . METHOD_2 ( ) ) ) { return ( ( ! ( VAR_3 . getName ( ) ) ) ) ; } return list ; }[0m
[31mExample #2[0m
Src : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
Trg : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( fail ) ; return new byte [ 0 ] ; } }[0m
Pred: byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( t ) ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . when ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . thenReturn ( VAR_1 ) ; org.junit.Assert.assertEquals ( 2 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws android.os.RemoteException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { METHOD_2 ( METHOD_3 ( VAR_3 . getName ( ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Trg : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Pred: public static int METHOD_1 ( int a , int b , int b ) { int [ ] values = new int [ ] { a , b , b ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , TYPE_2 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , <unk> . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; org.mockito.Mockito.verify ( VAR_5 ) . METHOD_4 ( org.mockito.Matchers.eq ( VAR_1 ) , <unk> . METHOD_5 ( int . class ) ) ; org.junit.Assert.assertEquals ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; server . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( server . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 in = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; org.junit.Assert.assertEquals ( STRING_1 , METHOD_8 ( in , VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { server . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_5 ) ; org.junit.Assert.assertEquals ( VAR_1 , VAR_9 ) ; org.junit.Assert.assertEquals ( VAR_3 , VAR_6 ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Trg : public void METHOD_1 ( long session , long s , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { org.junit.Assert.assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , fd , callback ) ; }[0m
Pred: public void METHOD_1 ( long session long c , long c , TYPE_1 VAR_1 , TYPE_2 fd , TYPE_3 callback ) throws java.lang.Exception { ( ( VAR_2 , TYPE_4 . METHOD_2 ( s ) ) ) ; super . METHOD_1 ( session , s , c , VAR_1 , callback ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; params . METHOD_4 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; cmd = org.mockito.Mockito . METHOD_5 ( new TYPE_2 ( params ) ) ; org.mockito.Mockito.doReturn ( VAR_1 ) . when ( cmd ) . METHOD_6 ( ) ; org.mockito.Mockito.doReturn ( VAR_2 ) . when ( cmd ) . METHOD_7 ( ) ; org.mockito.Mockito.doReturn ( VAR_3 ) . when ( cmd ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( org.ovirt.engine.core.compat.Guid . METHOD_3 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( ) { public TYPE_3 METHOD_2 ( org.ovirt.engine.core.compat.Guid VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return inject ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_2 < org.ovirt.engine.core.compat.Guid > VAR_1 = new TYPE_2 ( ) ; try { return VAR_3 . METHOD_2 ( VAR_2 ) ; } return TYPE_5 ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < org.ovirt.engine.core.compat.Guid > ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . IdQueryParameters class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . VdcActionParametersBase getParameters ( TYPE_1 VAR_5 , TYPE_1 entity ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . map ( VAR_5 , entity ) ) ; } } ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_4 ( cmd . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( cmd . getReturnValue ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( cmd ) ; TYPE_3 . METHOD_6 ( cmd . METHOD_7 ( ) . METHOD_7 ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( cmd . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { cmd = org.mockito.Mockito . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_5 ( cmd . getReturnValue ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
---------------
Class: Replace if statement with assert statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Trg : public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 s = VAR_2 . get ( VAR_1 ) ; if ( s == null ) { throw new java.lang.IllegalArgumentException ( STRING_2 ) ; } return s . METHOD_3 ( ) ; }[0m
Pred: public int METHOD_1 ( TYPE_1 VAR_1 ) { return s . get ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_3 ( ) ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) . METHOD_2 ( 1 , 2 ) . METHOD_2 ( 2 , 3 ) . METHOD_2 ( 3 , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 2 ) . METHOD_6 ( ) ) ; assertEquals ( 6 , VAR_1 . METHOD_5 ( 3 ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( 3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 m , TYPE_2 v , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( v == null ) ? ( ( double ) ( m . METHOD_2 ( ) ) ) : ( ( double ) ( m . METHOD_2 ( v ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 e ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 m , TYPE_2 VAR_2 , boolean VAR_1 ) throws android.os.RemoteException { boolean VAR_2 = false ; try { ( ( double ) . METHOD_2 ( e ) ) ; } }[0m
[31mExample #2[0m
Src : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Trg : void METHOD_1 ( ) { if ( VAR_1 ) android.util.Slog.v ( VAR_2 . TAG , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Pred: void METHOD_1 ( ) { if ( VAR_1 ) android.util.Log.v ( VAR_2 . TAG , ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
[31mExample #3[0m
Src : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Trg : public void run ( ) { TYPE_1 is = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( is ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . log ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException e ) { } }[0m
Pred: public void run ( ) { TYPE_1 = new TYPE_1 ( VAR_1 ) ; }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Log.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Trg : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Pred: boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) android.util.Slog.v ( VAR_4 . TAG , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; } return false ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String version , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . valueOf ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.util.Map < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_1 = new TYPE_2 ( VAR_1 , version ) ; java.lang.Object value = VAR_4 < java.lang.Object > ( TYPE_3 . getValue ( VAR_1 . toString ( ) ) , version ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; return true ; }[0m
Pred: protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Log.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) android.util.Slog.v ( TYPE_2 . TAG , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( command . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_4 . METHOD_5 ( ) . getReturnValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . VM ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getStoragePoolId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . getParameters ( ) . METHOD_7 ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . getParameters ( ) , TYPE_1 . METHOD_6 ( ) ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . <unk> class ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { org.mockito.Mockito.doReturn ( VAR_1 ) . when ( VAR_2 ) . METHOD_2 ( TYPE_3 . any ( ) ) ; org.mockito.Mockito.doReturn ( VAR_4 ) . when ( VAR_2 ) . METHOD_4 ( TYPE_3 . any ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; org.mockito.Mockito . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws TYPE_1[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_1 class ) ; }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . addColumn ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 entity ) { return entity . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { return TYPE_2 . METHOD_4 ( ) ; } }[0m
[31mExample #15[0m
Src : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Trg : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( host . getId ( ) ) ) ; TYPE_2 returnValue = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( returnValue . getSucceeded ( ) ) { return true ; } } catch ( java.lang.Exception e ) { } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_5 ( VAR_1 ) ) ; }[0m
[31mExample #16[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . getReturnValue ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . setId ( org.ovirt.engine.core.compat.Guid . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; org.mockito.Mockito.doReturn ( true ) . when ( command ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( command , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; parameters . METHOD_6 ( VAR_3 ) ; TYPE_2 . METHOD_5 ( command , VAR_4 ) ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) . METHOD_4 ( ) , getVm ( ) . getStatus ( ) ) ; METHOD_6 ( getVm ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( getVm ( ) , getVm ( ) . METHOD_5 ( ) ) ; METHOD_6 ( ) . METHOD_7 ( ) ; return null ; }[0m
[31mExample #19[0m
Src : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Trg : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( VAR_1 ) ; TYPE_1 . getReturnValue ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Pred: private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { addCanDoActionMessage ( ) . METHOD_3 ( ) . put ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
[31mExample #20[0m
Src : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . METHOD_5 ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < org.ovirt.engine.core.common.businessentities.VM > ( ) ; org.mockito.Mockito.when ( METHOD_4 ( ) . getId ( ) ) . thenReturn ( VAR_3 ) ; org.mockito.Mockito.when ( VAR_1 . METHOD_6 ( VAR_3 ) ) . thenReturn ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { org.mockito.Mockito.when ( METHOD_2 ( ) . METHOD_3 ( ) ) . thenReturn ( VAR_1 ) . thenReturn ( VAR_3 ) ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : log . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . getParameters ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . getStatus ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getVm ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( TYPE_1 . getVm ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( command . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
Trg : public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; if ( command == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( command == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_1 . equals ( command . getName ( ) ) ) { METHOD_7 ( ) ; } else if ( STRING_2 . equals ( command . getName ( ) ) ) { METHOD_8 ( ) ; } }[0m
Pred: public void METHOD_1 ( org.ovirt.engine.ui.uicommonweb.UICommand command ) { super . METHOD_1 ( command ) ; }[0m
[31mExample #24[0m
Src : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Trg : private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . getStoragePoolId ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Pred: private void METHOD_1 ( org.ovirt.engine.core.common.businessentities.VDS vds ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( vds . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
[31mExample #25[0m
Src : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . getStatus ( ) ) != ( VAR_2 ) ) ) { addCanDoActionMessage ( VAR_3 ) ; returnValue = false ; } return returnValue ; }[0m
Pred: protected boolean METHOD_1 ( ) { boolean returnValue = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { addCanDoActionMessage ( VAR_1 ) ; returnValue = false ; } return false ; }[0m
[31mExample #26[0m
Src : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Trg : protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . getId ( ) ) ; if ( vds != null ) { vds . METHOD_5 ( TYPE_2 . METHOD_6 ( vds . METHOD_7 ( ) , vds . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( vds ) ; }[0m
Pred: protected void METHOD_1 ( ) { org.ovirt.engine.core.common.businessentities.VDS vds = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . getParameters ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #27[0m
Src : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . METHOD_2 ( ) ) ) ) ) { return network ; } } return null ; }[0m
Trg : protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name , java.util.List < TYPE_1 . Network > VAR_2 ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( network . getName ( ) ) ) ) ) { return network ; } } return null ; }[0m
Pred: protected TYPE_1 . Network METHOD_1 ( org.ovirt.engine.core.compat.Guid VAR_1 , org.ovirt.engine.core.compat.Guid id , java.lang.String name ) { for ( TYPE_1 . Network network : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( network . getName ( ) ) ) ) ) { return network ; } } return null ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 log = org.mockito.Mockito . METHOD_2 ( VAR_1 class ) ; org.mockito.Mockito.when ( log . METHOD_3 ( ) ) . thenReturn ( true ) ; TYPE_2 . METHOD_4 ( log , id , new TYPE_3 ( ) ) ; org.mockito.Mockito . METHOD_5 ( log ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . any ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 . METHOD_2 ( VAR_1 class ) ; }[0m
---------------
================
Duration: 0:01:56.306697

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return <unk> ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case 0 : : return ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 ; return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . <unk> = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( <unk> ) ; }[0m
Pred: public void ( int VAR_2 , int VAR_3 ) { super . ( VAR_2 , VAR_3 ) ; this . this = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( ) ; }[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: void add ( final org.ovirt.engine.ui.frontend.AsyncQuery VAR_1 ) { METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 ) ; }[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null ) { return VAR_1 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return VAR_1 ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . <unk> ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public TYPE_1 ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: boolean METHOD_1 ( ) { return VAR_1 ; }[0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . <unk> ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double <unk> = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; <unk> += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( <unk> ) ; }[0m
Pred: public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int VAR_1 = 0 ; return i . length ; }[0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: static float METHOD_1 ( final VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { return ; } }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: final double METHOD_1 ( final java.lang.StringBuilder , final int VAR_2 , final int VAR_3 ) throws TYPE_2 { final int VAR_4 = VAR_4 ; return VAR_5 ; }[0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public void METHOD_1 ( ) { if ( this . VAR_1 != null ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null ) { return true ; } if ( VAR_1 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
---------------
================
Duration: 0:00:09.873413

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
Top-1 accuracy: 190 / 1077 = 0.1764159702878366
Top-3 accuracy: 313 / 1077 = 0.2906220984215413
Top-5 accuracy: 365 / 1077 = 0.33890436397400187
Top-10 accuracy: 417 / 1077 = 0.3871866295264624
Top-50 accuracy: 520 / 1077 = 0.4828226555246054
Duration: 0:04:57.513741

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
Top-1 accuracy: 17 / 300 = 0.056666666666666664
Top-3 accuracy: 37 / 300 = 0.12333333333333334
Top-5 accuracy: 43 / 300 = 0.14333333333333334
Top-10 accuracy: 51 / 300 = 0.17
Top-50 accuracy: 68 / 300 = 0.22666666666666666
Duration: 0:01:22.678355

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
Top-1 accuracy: 6 / 300 = 0.02
Top-3 accuracy: 28 / 300 = 0.09333333333333334
Top-5 accuracy: 32 / 300 = 0.10666666666666667
Top-10 accuracy: 44 / 300 = 0.14666666666666667
Top-50 accuracy: 62 / 300 = 0.20666666666666667
Duration: 0:01:22.096780

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
Top-1 accuracy: 16 / 300 = 0.05333333333333334
Top-3 accuracy: 32 / 300 = 0.10666666666666667
Top-5 accuracy: 39 / 300 = 0.13
Top-10 accuracy: 52 / 300 = 0.17333333333333334
Top-50 accuracy: 76 / 300 = 0.25333333333333335
Duration: 0:01:21.415271

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 0 / 300 = 0.0
Top-5 accuracy: 0 / 300 = 0.0
Top-10 accuracy: 1 / 300 = 0.0033333333333333335
Top-50 accuracy: 1 / 300 = 0.0033333333333333335
Duration: 0:01:14.997360

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 0 / 300 = 0.0
Top-5 accuracy: 0 / 300 = 0.0
Top-10 accuracy: 0 / 300 = 0.0
Top-50 accuracy: 1 / 300 = 0.0033333333333333335
Duration: 0:01:14.258649

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 0 / 300 = 0.0
Top-5 accuracy: 0 / 300 = 0.0
Top-10 accuracy: 1 / 300 = 0.0033333333333333335
Top-50 accuracy: 1 / 300 = 0.0033333333333333335
Duration: 0:01:14.582555

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
Top-1 accuracy: 119 / 300 = 0.39666666666666667
Top-3 accuracy: 172 / 300 = 0.5733333333333334
Top-5 accuracy: 192 / 300 = 0.64
Top-10 accuracy: 204 / 300 = 0.68
Top-50 accuracy: 237 / 300 = 0.79
Duration: 0:01:23.358298

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
Top-1 accuracy: 59 / 300 = 0.19666666666666666
Top-3 accuracy: 88 / 300 = 0.29333333333333333
Top-5 accuracy: 103 / 300 = 0.3433333333333333
Top-10 accuracy: 120 / 300 = 0.4
Top-50 accuracy: 149 / 300 = 0.49666666666666665
Duration: 0:01:23.751614

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
Top-1 accuracy: 59 / 300 = 0.19666666666666666
Top-3 accuracy: 92 / 300 = 0.30666666666666664
Top-5 accuracy: 101 / 300 = 0.33666666666666667
Top-10 accuracy: 119 / 300 = 0.39666666666666667
Top-50 accuracy: 146 / 300 = 0.4866666666666667
Duration: 0:01:22.948893

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
Top-1 accuracy: 4 / 300 = 0.013333333333333334
Top-3 accuracy: 5 / 300 = 0.016666666666666666
Top-5 accuracy: 5 / 300 = 0.016666666666666666
Top-10 accuracy: 6 / 300 = 0.02
Top-50 accuracy: 12 / 300 = 0.04
Duration: 0:01:14.841469

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 1 / 300 = 0.0033333333333333335
Top-5 accuracy: 1 / 300 = 0.0033333333333333335
Top-10 accuracy: 2 / 300 = 0.006666666666666667
Top-50 accuracy: 5 / 300 = 0.016666666666666666
Duration: 0:01:13.546666

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
Top-1 accuracy: 5 / 300 = 0.016666666666666666
Top-3 accuracy: 5 / 300 = 0.016666666666666666
Top-5 accuracy: 7 / 300 = 0.023333333333333334
Top-10 accuracy: 8 / 300 = 0.02666666666666667
Top-50 accuracy: 12 / 300 = 0.04
Duration: 0:01:18.399215

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
Top-1 accuracy: 278 / 5835 = 0.04764353041988004
Top-3 accuracy: 547 / 5835 = 0.09374464438731792
Top-5 accuracy: 670 / 5835 = 0.11482433590402742
Top-10 accuracy: 843 / 5835 = 0.14447300771208227
Top-50 accuracy: 1205 / 5835 = 0.20651242502142245
Duration: 0:30:24.952069

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
Top-1 accuracy: 3 / 6545 = 0.0004583651642475172
Top-3 accuracy: 8 / 6545 = 0.0012223071046600458
Top-5 accuracy: 12 / 6545 = 0.0018334606569900688
Top-10 accuracy: 18 / 6545 = 0.0027501909854851033
Top-50 accuracy: 41 / 6545 = 0.0062643239113827345
Duration: 0:30:14.474463

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
Top-1 accuracy: 190 / 1077 = 0.1764159702878366
Top-3 accuracy: 313 / 1077 = 0.2906220984215413
Top-5 accuracy: 365 / 1077 = 0.33890436397400187
Top-10 accuracy: 417 / 1077 = 0.3871866295264624
Top-50 accuracy: 520 / 1077 = 0.4828226555246054
Duration: 0:05:16.100764

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
Top-1 accuracy: 10 / 1098 = 0.009107468123861567
Top-3 accuracy: 15 / 1098 = 0.01366120218579235
Top-5 accuracy: 21 / 1098 = 0.01912568306010929
Top-10 accuracy: 25 / 1098 = 0.022768670309653915
Top-50 accuracy: 36 / 1098 = 0.03278688524590164
Duration: 0:04:30.477441

