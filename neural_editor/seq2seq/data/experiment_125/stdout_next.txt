{'ADDITION_TOKEN': '–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ',
 'BATCH_SIZE': 64,
 'BEAM_SIZE': 50,
 'DATASET_ROOT': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'DECODER_HIDDEN_SIZE': 256,
 'DEFECTS4J_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/Defects4J',
 'DELETION_TOKEN': '—É–¥–∞–ª–µ–Ω–∏–µ',
 'DEVICE': device(type='cuda', index=0),
 'DIVERSITY_STRENGTH': None,
 'DROPOUT': 0.2,
 'EARLY_STOPPING_ROUNDS': 25,
 'EDIT_REPRESENTATION_SIZE': 16,
 'ENCODER_HIDDEN_SIZE': 128,
 'EOS_TOKEN': '</s>',
 'IS_TEST': False,
 'LEARNING_RATE': 0.0001,
 'LEAVE_ONLY_CHANGED': True,
 'LOWER': False,
 'MAKE_CUDA_REPRODUCIBLE': False,
 'MAX_NUM_OF_EPOCHS': 1000,
 'NUM_GROUPS': 1,
 'NUM_LAYERS': 2,
 'OUTPUT_PATH': '../../../embeddings-for-code-diffs-data/experiment_125/',
 'PADDING_TOKEN': '–ø–∞–¥–¥–∏–Ω–≥',
 'PAD_TOKEN': '<pad>',
 'PRINT_EVERY_iTH_BATCH': 5,
 'REPLACEMENT_TOKEN': '–∑–∞–º–µ–Ω–∞',
 'SAVE_MODEL_EVERY': 5,
 'SEED': 9382,
 'SOS_TOKEN': '<s>',
 'TEACHER_FORCING_RATIO': 0.9,
 'TEST_BATCH_SIZE': 64,
 'TOKENS_CODE_CHUNK_MAX_LEN': 100,
 'TOKEN_MIN_FREQ': 1,
 'TOP_K': [1, 3, 5, 10, 50],
 'TSNE_BATCH_SIZE': 1024,
 'TUFANO_BUG_FIXES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/0_50',
 'TUFANO_BUG_FIXES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_bug_fixes/50_100',
 'TUFANO_CODE_CHANGES_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/0_50',
 'TUFANO_CODE_CHANGES_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/50_100',
 'TUFANO_LABELED_0_50_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/0_50',
 'TUFANO_LABELED_50_100_PATH': '../../../embeddings-for-code-diffs-data/datasets/java/tufano_code_changes/labeled/50_100',
 'UNCHANGED_TOKEN': '—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ',
 'UNK_TOKEN': '<unk>',
 'USE_BRIDGE': True,
 'USE_EDIT_REPRESENTATION': True,
 'VAL_BATCH_SIZE': 64,
 'VERBOSE': True,
 'WORD_EMBEDDING_SIZE': 128}
Data set sizes (number of sentence pairs):
train 46680
valid 5835
test 5835 

First training example:
src: public java.lang.String METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) . format ( VAR_1 [ ( ( VAR_1 . length ) - 1 ) ] . getTime ( ) ) ; }
trg: public java.lang.String METHOD_1 ( ) { return new TYPE_1 ( STRING_1 ) . format ( VAR_1 [ ( ( type ) - 1 ) ] . getTime ( ) ) ; }
diff_alignment: —É–¥–∞–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω–∞
diff_prev: VAR_1 . length
diff_updated: –ø–∞–¥–¥–∏–Ω–≥ –ø–∞–¥–¥–∏–Ω–≥ type 

Most common words:
         (     430398
         )     430228
   –ø–∞–¥–¥–∏–Ω–≥     303839
  —É–¥–∞–ª–µ–Ω–∏–µ     217186
         ;     212760
         .     170394
     VAR_1     168782
         {     129358
         }     129328
  METHOD_1     107650 

First 10 words:
00 <unk>
01 <pad>
02 <s>
03 </s>
04 (
05 )
06 –ø–∞–¥–¥–∏–Ω–≥
07 —É–¥–∞–ª–µ–Ω–∏–µ
08 ;
09 . 

Special words frequency and ids: 
<unk> 0 0
<pad> 0 1
<s> 0 2
</s> 0 3
–∑–∞–º–µ–Ω–∞ 33822 25
—É–¥–∞–ª–µ–Ω–∏–µ 217186 7
–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 86653 16
—Ä–∞–≤–µ–Ω—Å—Ç–≤–æ 0 0
–ø–∞–¥–¥–∏–Ω–≥ 303839 6
Number of words (types): 437
Start conducting accuracy calculation experiment for Tufano Labeled 0 50 Code Changes...
BUG FIXING ACCURACY
Top-1 accuracy: 18 / 388 = 0.04639175257731959
Top-3 accuracy: 22 / 388 = 0.05670103092783505
Top-5 accuracy: 22 / 388 = 0.05670103092783505
Top-10 accuracy: 24 / 388 = 0.061855670103092786
Top-50 accuracy: 27 / 388 = 0.06958762886597938
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 114 / 388 = 0.29381443298969073
Top-3 accuracy: 133 / 388 = 0.3427835051546392
Top-5 accuracy: 137 / 388 = 0.35309278350515466
Top-10 accuracy: 141 / 388 = 0.3634020618556701
Top-50 accuracy: 150 / 388 = 0.3865979381443299
Duration: 0:05:03.240513

Start conducting accuracy calculation experiment for Tufano Labeled 50 100 Code Changes...
BUG FIXING ACCURACY
Top-1 accuracy: 0 / 244 = 0.0
Top-3 accuracy: 0 / 244 = 0.0
Top-5 accuracy: 0 / 244 = 0.0
Top-10 accuracy: 0 / 244 = 0.0
Top-50 accuracy: 0 / 244 = 0.0
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 0 / 244 = 0.0
Top-3 accuracy: 1 / 244 = 0.004098360655737705
Top-5 accuracy: 2 / 244 = 0.00819672131147541
Top-10 accuracy: 2 / 244 = 0.00819672131147541
Top-50 accuracy: 3 / 244 = 0.012295081967213115
Duration: 0:02:38.892366

Start conducting accuracy calculation experiment for Defects4J...
BUG FIXING ACCURACY
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 0 / 20 = 0.0
Top-3 accuracy: 0 / 20 = 0.0
Top-5 accuracy: 0 / 20 = 0.0
Top-10 accuracy: 0 / 20 = 0.0
Top-50 accuracy: 0 / 20 = 0.0
Duration: 0:00:18.798771

Start conducting accuracy calculation experiment for Test dataset 300...
BUG FIXING ACCURACY
Top-1 accuracy: 25 / 300 = 0.08333333333333333
Top-3 accuracy: 31 / 300 = 0.10333333333333333
Top-5 accuracy: 35 / 300 = 0.11666666666666667
Top-10 accuracy: 38 / 300 = 0.12666666666666668
Top-50 accuracy: 44 / 300 = 0.14666666666666667
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 172 / 300 = 0.5733333333333334
Top-3 accuracy: 202 / 300 = 0.6733333333333333
Top-5 accuracy: 208 / 300 = 0.6933333333333334
Top-10 accuracy: 215 / 300 = 0.7166666666666667
Top-50 accuracy: 233 / 300 = 0.7766666666666666
Duration: 0:03:50.069381

Start conducting accuracy calculation experiment for Validation dataset 300...
BUG FIXING ACCURACY
Top-1 accuracy: 30 / 300 = 0.1
Top-3 accuracy: 37 / 300 = 0.12333333333333334
Top-5 accuracy: 38 / 300 = 0.12666666666666668
Top-10 accuracy: 40 / 300 = 0.13333333333333333
Top-50 accuracy: 45 / 300 = 0.15
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 169 / 300 = 0.5633333333333334
Top-3 accuracy: 206 / 300 = 0.6866666666666666
Top-5 accuracy: 218 / 300 = 0.7266666666666667
Top-10 accuracy: 226 / 300 = 0.7533333333333333
Top-50 accuracy: 243 / 300 = 0.81
Duration: 0:03:52.944937

Start conducting accuracy calculation experiment for Train dataset 300...
BUG FIXING ACCURACY
Top-1 accuracy: 201 / 300 = 0.67
Top-3 accuracy: 234 / 300 = 0.78
Top-5 accuracy: 245 / 300 = 0.8166666666666667
Top-10 accuracy: 256 / 300 = 0.8533333333333334
Top-50 accuracy: 270 / 300 = 0.9
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 201 / 300 = 0.67
Top-3 accuracy: 234 / 300 = 0.78
Top-5 accuracy: 245 / 300 = 0.8166666666666667
Top-10 accuracy: 256 / 300 = 0.8533333333333334
Top-50 accuracy: 270 / 300 = 0.9
Duration: 0:03:52.308644

Start conducting one shot learning experiment for Tufano Labeled 0 50 Code Changes...
Top-1 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 21 / 64 = 0.328125
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 27 / 64 = 0.421875
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 27 / 64 = 0.421875
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 27 / 64 = 0.421875
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for same edit representations: 29 / 64 = 0.453125

Top-1 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 33 / 324 = 0.10185185185185185
Top-3 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 42 / 324 = 0.12962962962962962
Top-5 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 43 / 324 = 0.13271604938271606
Top-10 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 48 / 324 = 0.14814814814814814
Top-50 accuracy on Tufano Labeled 0 50 Code Changes for other edit representations: 59 / 324 = 0.18209876543209877
================
Correct Examples
Class: Abstract an existing method using the abstract keyword
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract void METHOD_1 ( int index , short value ) ;[0m
Pred: abstract void METHOD_1 ( int index , short value ) ;[0m
+++++++++++++++
[32mExample #1[0m
Src : public java.lang.String METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract java.lang.String METHOD_1 ( ) ;[0m
Pred: public abstract java.lang.String METHOD_1 ( ) ;[0m
[32mExample #2[0m
Src : public java.lang.String METHOD_1 ( java.lang.String url ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
Pred: public abstract java.lang.String METHOD_1 ( java.lang.String url ) ;[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( <unk> , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( <unk> , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { TYPE_1 = TYPE_1 . METHOD_2 ( false , type , arg ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return TYPE_4 . METHOD_2 ( null ) ; }[0m
[32mExample #2[0m
Src : void METHOD_1 ( boolean VAR_1 ) ;[0m
Trg : void METHOD_1 ( ) ;[0m
Pred: void METHOD_1 ( ) ;[0m
---------------
Class: Add/Remove this qualifier
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.Boolean value ) { this . VAR_1 = value ; }[0m
Trg : public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
Pred: public void METHOD_1 ( java.lang.Boolean value ) { VAR_1 = value ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 = VAR_1 ; }[0m
[32mExample #2[0m
Src : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return this . VAR_1 ; }[0m
Trg : public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public java.util.Map < java.lang.String , java.lang.String > METHOD_1 ( ) { return VAR_1 ; }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
+++++++++++++++
[32mExample #1[0m
Src : protected java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
[32mExample #2[0m
Src : protected void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 = TYPE_1 . METHOD_2 ( new TYPE_2 ( STRING_1 , STRING_2 ) ) ; }[0m
[32mExample #3[0m
Src : private static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Trg : public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
Pred: public static native void METHOD_1 ( java.lang.Object VAR_1 , long VAR_2 ) ;[0m
[32mExample #4[0m
Src : protected java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( METHOD_2 ( ) ) != null ) { return METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
---------------
Class: Change method return value
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return true ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public boolean METHOD_1 ( ) { return false ; }[0m
Trg : public boolean METHOD_1 ( ) { return true ; }[0m
Pred: public boolean METHOD_1 ( ) { return true ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( id , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : static int METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Trg : static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
Pred: static int METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return 0 ; } return VAR_4 . METHOD_3 ( ) ; }[0m
[32mExample #2[0m
Src : static java.lang.String METHOD_1 ( int VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Trg : static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
Pred: static java.lang.String METHOD_1 ( long VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_2 == null ) { return STRING_1 ; } return VAR_4 . toString ( ) ; }[0m
[32mExample #3[0m
Src : static boolean METHOD_1 ( int VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; return true ; }[0m
[32mExample #4[0m
Src : native void METHOD_1 ( int VAR_1 , int VAR_2 ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
Pred: native void METHOD_1 ( long VAR_1 , long VAR_2 ) ;[0m
[32mExample #5[0m
Src : final void METHOD_1 ( int VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Trg : final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
Pred: final void METHOD_1 ( long VAR_1 ) { synchronized ( this ) { METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_1 ) ; } }[0m
[32mExample #6[0m
Src : public static native void METHOD_1 ( int VAR_1 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
Pred: public static native void METHOD_1 ( long VAR_1 ) throws TYPE_1 ;[0m
[32mExample #7[0m
Src : public static native void METHOD_1 ( int VAR_1 , int VAR_2 ) throws TYPE_1 ;[0m
Trg : public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
Pred: public static native void METHOD_1 ( long VAR_1 , long VAR_2 ) throws TYPE_1 ;[0m
---------------
Class: Narrow method visibility
Golden example (True):
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected synchronized void METHOD_1 ( ) { }[0m
Trg : public synchronized void METHOD_1 ( ) { }[0m
Pred: public synchronized void METHOD_1 ( ) { }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( a , a . length , this . VAR_1 ) ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) ; }[0m
[32mExample #2[0m
Src : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; }[0m
[32mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 value ) { status = value . getValue ( ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { status = value ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , new java.io.File ( VAR_2 , STRING_1 ) , false ) ; }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
+++++++++++++++
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . assertEquals ( ( STRING_2 + ( value ) ) , value . METHOD_3 ( ) , value . getValue ( ) ) ; }[0m
[32mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; TYPE_3 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
[32mExample #3[0m
Src : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; }[0m
Trg : void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: void METHOD_1 ( java.lang.String VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
[32mExample #4[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_2 ( VAR_1 ) ; }[0m
[32mExample #5[0m
Src : public void METHOD_1 ( ) { <unk> ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
[32mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( new TYPE_2 ( TYPE_3 . METHOD_3 ( ) ) ) ; }[0m
[32mExample #7[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; METHOD_3 ( ( ! VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; }[0m
[32mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; super . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( INT_1 , VAR_1 ) ; }[0m
[32mExample #9[0m
Src : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 VAR_2 = METHOD_2 ( ) ; return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_1 ( VAR_1 ) ; }[0m
---------------
Class: Rename parameter
Golden example (False):
[31mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , <unk> ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , <unk> ;[0m
Pred: public native float METHOD_1 ( java.lang.Object arg ) throws TYPE_1 , TYPE_1 ;[0m
+++++++++++++++
[32mExample #1[0m
Src : TYPE_1 id ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
Pred: TYPE_1 id ( java.lang.String id ) throws TYPE_2 ;[0m
---------------
================
================
Incorrect Examples
Class: Abstract an existing method using the abstract keyword
Golden example (True):
[32mExample #1[0m
Src : void METHOD_1 ( int index , short value ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract void METHOD_1 ( int index , short value ) ;[0m
Pred: abstract void METHOD_1 ( int index , short value ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : public synchronized boolean METHOD_1 ( ) { throw new TYPE_1 ( ) ; }[0m
Trg : public abstract boolean METHOD_1 ( ) ;[0m
Pred: public abstract synchronized boolean METHOD_1 ( ) ;[0m
[31mExample #2[0m
Src : float METHOD_1 ( int index ) { throw new TYPE_1 ( ) ; }[0m
Trg : abstract float METHOD_1 ( int index ) ;[0m
Pred: public abstract TYPE_1 METHOD_1 ( int index ) ;[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 < TYPE_2 > <unk> ) { throw new TYPE_3 ( ) ; }[0m
Trg : public abstract void METHOD_1 ( TYPE_1 < TYPE_2 > <unk> ) ;[0m
Pred: public abstract void METHOD_1 ( TYPE_1 < TYPE_2 > ) ;[0m
---------------
Class: Add invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; } catch ( <unk> <unk> ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; fail ( ) ; } catch ( <unk> <unk> ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 . METHOD_2 ( STRING_1 ) ; java.lang.System.out.println ( VAR_1 ) ; } catch ( java.lang.Throwable t ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public <unk> . <unk> METHOD_1 ( ) { return new <unk> ( <unk> . <unk> ) ; }[0m
Trg : public <unk> . <unk> METHOD_1 ( ) { return new <unk> ( <unk> . get ( ) . <unk> ) ; }[0m
Pred: public java.lang.String [ ] METHOD_1 ( ) { java.lang.System.out.println ( true ) ; return new java.lang.Thread ( to ) ; }[0m
[31mExample #2[0m
Src : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_2 ( ( offset + ( <unk> ) ) , value ) ; }[0m
Trg : final void METHOD_1 ( int offset , int value ) { VAR_1 . METHOD_1 ( ( offset + ( <unk> ) ) , value ) ; }[0m
Pred: final void METHOD_1 ( int offset , int value ) { java.lang.System.out.println ( offset ) ; VAR_1 . METHOD_2 ( ( offset + ( ) ) , value ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( ) ; <unk> . name = STRING_1 ; VAR_1 = STRING_2 ; METHOD_2 ( <unk> , VAR_2 class ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( ) ; <unk> . name = name ( STRING_1 ) ; VAR_1 = STRING_2 ; METHOD_2 ( <unk> , VAR_2 class ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 ( new TYPE_1 ( ) ) ; TYPE_1 . name = STRING_1 ; VAR_1 = STRING_2 ; VAR_1 = STRING_2 ; METHOD_2 ( VAR_2 , VAR_2 class ) ; }[0m
[31mExample #4[0m
Src : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 <unk> ) { TYPE_1 <unk> = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; return <unk> ; }[0m
Trg : static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 <unk> ) { TYPE_1 <unk> = TYPE_1 . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; return <unk> ; }[0m
Pred: static TYPE_1 METHOD_1 ( TYPE_1 a , TYPE_1 to ) { TYPE_1 TYPE_1 = TYPE_1 . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ) ; java.lang.System.out.println ( ) ; return ; }[0m
[31mExample #5[0m
Src : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . <unk> ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception <unk> ) { return VAR_2 ; } }[0m
Trg : private TYPE_1 METHOD_1 ( ) { try { return TYPE_1 . <unk> ( ( ( java.lang.String ) ( TYPE_2 . <unk> ( ) . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception <unk> ) { return VAR_2 ; } }[0m
Pred: private TYPE_1 METHOD_1 ( ) { try { java.lang.System.out.println ( VAR_1 ) ; return TYPE_1 . ( ( ( java.lang.String ) ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ) ) ; } catch ( java.lang.Exception java.lang.Exception ) { return VAR_2 ; } }[0m
---------------
Class: Add null check
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( final java.lang.String name ) { if ( ( name != null ) && ( ! ( name . isEmpty ( ) ) ) ) { this . name = name ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
Pred: public void METHOD_1 ( final java.lang.String name ) { this . name = name ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void <unk> ( ) { VAR_1 . METHOD_1 ( this , status ) ; }[0m
Trg : public void <unk> ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . METHOD_1 ( this , status ) ; } }[0m
Pred: public void METHOD_1 ( ) ;[0m
[31mExample #2[0m
Src : void METHOD_1 ( TYPE_1 < TYPE_2 > <unk> ) { VAR_1 . METHOD_2 ( <unk> . getValue ( ) ) ; view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 < TYPE_2 > <unk> ) { VAR_1 . METHOD_2 ( <unk> . getValue ( ) ) ; if ( ( view ) != null ) { view . METHOD_3 ( ) . METHOD_4 ( STRING_1 , VAR_1 . METHOD_2 ( ) ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 < TYPE_2 > { VAR_1 . METHOD_2 ( ) . METHOD_2 ( ) ) ; }[0m
[31mExample #3[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_2 ) != null ) { VAR_2 . METHOD_1 ( VAR_1 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
[31mExample #4[0m
Src : public int [ ] METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public int [ ] METHOD_1 ( ) { return ( VAR_1 ) == null ? null : VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public int [ ] METHOD_1 ( ) ;[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { VAR_1 . <unk> ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( VAR_1 ) != null ) { VAR_1 . <unk> ( ) ; } }[0m
Pred: public void METHOD_1 ( ) ;[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { this . VAR_1 . METHOD_1 ( ) ; VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { if ( ( this . VAR_1 ) != null ) { this . VAR_1 . METHOD_1 ( ) ; } VAR_2 . METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( ) ;[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public void <unk> ( TYPE_1 result ) { TYPE_2 . <unk> ( TYPE_3 . METHOD_1 ( VAR_1 . <unk> ( ) ) ) ; }[0m
Trg : public void <unk> ( TYPE_1 result ) { TYPE_2 . <unk> ( TYPE_3 . METHOD_1 ( <unk> , VAR_1 . <unk> ( ) ) ) ; }[0m
Pred: public void void ( TYPE_1 < TYPE_2 > ) { TYPE_2 . METHOD_1 ( TYPE_3 . METHOD_1 ( VAR_1 . id ( ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , <unk> <unk> ) { TYPE_1 params = new TYPE_1 ( VAR_1 , <unk> ) ; params . METHOD_2 ( TYPE_2 . <unk> ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , <unk> <unk> ) { TYPE_1 params = new TYPE_1 ( VAR_1 , <unk> , true ) ; params . METHOD_2 ( TYPE_2 . <unk> ( ) . METHOD_3 ( ) ) ; return params ; }[0m
Pred: private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , to [ ] ) { TYPE_1 params = new TYPE_1 ( VAR_1 , event ) ; params . METHOD_2 ( TYPE_2 . equals ( ) . METHOD_3 ( ) ) ; return params ; }[0m
[31mExample #2[0m
Src : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . <unk> ) ) ; }[0m
Trg : public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_2 . <unk> ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . <unk> ) ) ; }[0m
Pred: public TYPE_1 list ( ) { if ( METHOD_1 ( ) ) return METHOD_2 ( METHOD_3 ( VAR_1 , new TYPE_2 ( ) , this ) ) ; else return METHOD_2 ( METHOD_3 ( VAR_2 . VAR_2 ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null ) , null ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { super = super . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null , null , null ) ) ) ; METHOD_3 ( event ) ; TYPE_3 . METHOD_4 ( TYPE_1 . to ( ) ) ; }[0m
[31mExample #4[0m
Src : private <unk> METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , name , true , null , null , VAR_1 , true , null , false , null ) ; }[0m
Trg : private <unk> METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , name , true , null , null , null , VAR_1 , true , null , false , null ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( buffer . METHOD_3 ( ) , name , true , true , null , null , VAR_1 , true , false , false , null ) ; }[0m
[31mExample #5[0m
Src : private <unk> METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true ) ; }[0m
Trg : private <unk> METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , VAR_1 , false , null , null , VAR_2 , true , null ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , java.lang.String VAR_2 ) { return METHOD_2 ( state . METHOD_3 ( ) , VAR_1 , false , false , null , null , VAR_2 , true ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 ) ; } } catch ( <unk> VAR_5 ) { } }[0m
Trg : public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_1 , null ) ; } } catch ( <unk> VAR_5 ) { } }[0m
Pred: public void METHOD_1 ( boolean VAR_1 ) { try { if ( VAR_2 ) { VAR_3 . METHOD_2 ( VAR_4 , VAR_4 , VAR_1 ) ; } } catch ( java.io.IOException VAR_5 ) { } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 , false ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null , null ) ; TYPE_2 . METHOD_3 ( STRING_1 , VAR_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; TYPE_2 . METHOD_5 ( STRING_2 , VAR_1 . METHOD_6 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 <unk> ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 , null , true ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 <unk> ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 = TYPE_1 . METHOD_2 ( ) ; try { METHOD_3 ( this , VAR_1 , null ) ; TYPE_2 . fail ( ) ; } catch ( TYPE_3 error ) { } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { java.util.List < <unk> . <unk> > result = <unk> . METHOD_2 ( null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < <unk> . <unk> > result = <unk> . METHOD_2 ( null , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > > result = super . METHOD_2 ( false , null , null , false ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #10[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , <unk> VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , <unk> VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_4 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , TYPE_2 VAR_2 , int VAR_3 , TYPE_1 VAR_4 ) throws TYPE_3 { return METHOD_2 ( VAR_1 , VAR_3 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( <unk> . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( <unk> . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , false , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( super . get ( ) , 1 ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.lang.Thread = state . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( false ) ; TYPE_3 . METHOD_4 ( super . METHOD_1 ( ) ) ; }[0m
[31mExample #13[0m
Src : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) + msg ) , args ) ; } }[0m
Trg : private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( VAR_2 . METHOD_4 ( ) ) + msg ) , args ) ; } }[0m
Pred: private void METHOD_1 ( java.lang.String msg , TYPE_1 ... args ) { if ( VAR_1 . METHOD_2 ( ) ) { VAR_1 . METHOD_3 ( ( ( ( STRING_1 + ( VAR_2 . METHOD_4 ( ) ) ) + STRING_2 ) , msg ) , args ) ; } }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( int VAR_1 , <unk> <unk> , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , <unk> <unk> , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 [ ] , java.lang.String value ) { VAR_2 . METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 <unk> ) { } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , null , true ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 <unk> ) { } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.io.File VAR_1 ; try { VAR_1 = METHOD_2 ( true , false , null ) ; TYPE_1 . fail ( ) ; } catch ( TYPE_2 | java.lang.NullPointerException ) { }[0m
[31mExample #16[0m
Src : private TYPE_1 . <unk> METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true ) ; }[0m
Trg : private TYPE_1 . <unk> METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
Pred: private TYPE_1 TYPE_1 . METHOD_1 ( ) throws java.lang.Exception { return METHOD_1 ( STRING_1 , true , true ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state ) ; } } catch ( <unk> VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , null ) ; } } catch ( <unk> VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { try { if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_3 , state , state ) ; } } catch ( java.io.IOException VAR_4 ) { } }[0m
[31mExample #18[0m
Src : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a ) ; }[0m
Trg : public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , 0 , ( ( a . length ) - 1 ) , null , 0 , 0 ) ; }[0m
Pred: public static void METHOD_1 ( short [ ] a ) { TYPE_1 . METHOD_1 ( a , a ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , true , true , true , true ) ; }[0m
[31mExample #20[0m
Src : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( <unk> ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( this , this ) ; }[0m
[31mExample #21[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( <unk> VAR_1 , TYPE_2 VAR_2 ) { return <unk> ( VAR_3 . <unk> class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( <unk> VAR_1 , TYPE_2 VAR_2 ) { return <unk> ( VAR_3 . <unk> class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null , false ) , STRING_1 , true ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( java.lang.Boolean VAR_1 , TYPE_2 VAR_2 ) { return super . METHOD_1 ( VAR_3 . class , VAR_4 , new TYPE_3 ( VAR_1 , VAR_2 , false , null ) , STRING_1 , true ) ; }[0m
---------------
Class: Add statement,Remove thrown exception
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String <unk> ) throws TYPE_2 { try { return TYPE_1 . METHOD_2 ( <unk> ) ; } catch ( TYPE_3 <unk> ) { throw new TYPE_2 ( <unk> ( ) ) ; } }[0m
Trg : public java.lang.String METHOD_1 ( java.lang.String <unk> ) { return <unk> ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String message ) { return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws <unk> { }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) { this . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public abstract void METHOD_1 ( )[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( <unk> , type , arg ) ; }[0m
Trg : protected void METHOD_1 ( int type , int arg , int size ) { VAR_2 = TYPE_1 . METHOD_2 ( <unk> , type , arg ) ; }[0m
Pred: protected void METHOD_1 ( int VAR_1 , int type , int arg , int size ) { TYPE_1 = TYPE_1 . METHOD_2 ( false , type , arg ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void <unk> ( java.lang.Object VAR_1 , java.lang.Object <unk> ) { this . <unk> ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ) ; }[0m
Trg : public void <unk> ( java.lang.Object <unk> ) { this . <unk> ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ) ; }[0m
Pred: public void void ( java.lang.Object VAR_1 , java.lang.Object to ) { java.lang.System.out.println ( ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . start ( ) ) ) . ( ( ) ) ) ) ) ; }[0m
[31mExample #2[0m
Src : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 ;[0m
Trg : TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 , int <unk> ) throws TYPE_2 ;[0m
Pred: TYPE_1 [ ] METHOD_1 ( ) throws TYPE_2 ;[0m
[31mExample #3[0m
Src : public void METHOD_1 ( <unk> <unk> , TYPE_1 event , <unk> <unk> ) { }[0m
Trg : public void METHOD_1 ( TYPE_1 event , <unk> <unk> ) { }[0m
Pred: public void METHOD_1 ( TYPE_1 event , TYPE_1 event ) { }[0m
[31mExample #4[0m
Src : public static native void METHOD_1 ( long <unk> , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
Trg : public static native void METHOD_1 ( long <unk> , int VAR_1 , boolean VAR_2 , long VAR_3 , long VAR_4 ) ;[0m
Pred: public static native void METHOD_1 ( long VAR_2 , boolean VAR_2 , long VAR_3 , long VAR_4 , long VAR_5 ) ;[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws <unk> { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws <unk> { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws java.lang.NullPointerException { METHOD_2 ( ) ; return METHOD_3 ( VAR_2 ) . METHOD_1 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 <unk> , java.lang.String VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 <unk> , java.lang.String VAR_2 ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.Object data ) { throw new TYPE_4 ( STRING_1 ) ; }[0m
[31mExample #7[0m
Src : void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) ;[0m
Trg : void METHOD_1 ( int type , int VAR_2 ) ;[0m
Pred: void METHOD_1 ( long type , int VAR_2 ) ;[0m
[31mExample #8[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 listener ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_3 listener ) { return null ; }[0m
[31mExample #9[0m
Src : public void <unk> ( java.lang.Object <unk> , java.lang.Object VAR_1 ) { <unk> ( ( ( TYPE_1 < <unk> > ) ( ( ( TYPE_2 . <unk> ) ( VAR_1 ) ) . <unk> ( ) ) ) ) ; }[0m
Trg : public void <unk> ( java.lang.Object VAR_1 ) { <unk> ( ( ( TYPE_1 < <unk> > ) ( ( ( TYPE_2 . <unk> ) ( VAR_1 ) ) . <unk> ( ) ) ) ) ; }[0m
Pred: public void void ( java.lang.Object to , java.lang.Object ) { java.lang.System.out.println ( ( ( TYPE_1 < > ) ( ( ( TYPE_2 . ) ( VAR_1 ) ) . . ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : void METHOD_1 ( TYPE_1 . <unk> <unk> , java.util.List < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 . <unk> <unk> , java.util.List < TYPE_2 > VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_1 TYPE_1 . startTime < TYPE_2 > VAR_1 , java.util.List < TYPE_3 > VAR_2 ) ;[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , new TYPE_1 . <unk> ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( <unk> . <unk> ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 . <unk> ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( <unk> . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( ) ) ; METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( false ) ; TYPE_2 . METHOD_6 ( ) ; }[0m
[31mExample #12[0m
Src : void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) ;[0m
Trg : void METHOD_1 ( TYPE_1 VAR_1 ) ;[0m
Pred: void METHOD_1 ( TYPE_2 VAR_2 ) ;[0m
[31mExample #13[0m
Src : public void METHOD_1 ( long VAR_1 , int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( int type , int VAR_2 ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( long VAR_1 , int type ) { throw new TYPE_1 ( STRING_1 ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false , null ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( VAR_1 , null , null , 0 , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , null , null , false , false ) ; }[0m
[31mExample #15[0m
Src : native boolean METHOD_1 ( int VAR_1 , int VAR_2 , byte [ ] <unk> , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Trg : native boolean METHOD_1 ( java.lang.String path , int VAR_1 , int VAR_2 , byte [ ] <unk> , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
Pred: native boolean METHOD_1 ( int VAR_2 , byte [ ] values , byte [ ] output , float [ ] VAR_3 , int VAR_4 ) ;[0m
[31mExample #16[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 <unk> , java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String VAR_1 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) . METHOD_5 ( path ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_2 , java.lang.String path ) { if ( TYPE_3 . METHOD_2 ( path ) ) { return null ; } return TYPE_4 . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( path ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_2 . METHOD_2 ( VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 ) { TYPE_2 . METHOD_2 ( ) ; }[0m
---------------
Class: Add/Remove parameter,Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 <unk> = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . <unk> ( id ) . view ( STRING_1 ) . METHOD_3 ( <unk> , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String <unk> , int id , TYPE_1 < TYPE_2 > VAR_1 ) { TYPE_2 <unk> = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . <unk> ( <unk> , id ) . view ( STRING_1 ) . METHOD_3 ( <unk> , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( int id , TYPE_1 < TYPE_2 > VAR_1 , java.lang.String type ) { TYPE_2 c = TYPE_2 . METHOD_2 ( ) ; TYPE_3 . id ( id ) . view ( STRING_1 ) . METHOD_3 ( token , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 VAR_1 , <unk> <unk> , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , <unk> , VAR_2 , null , 0 ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( <unk> <unk> , TYPE_1 VAR_1 , <unk> <unk> , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , <unk> , VAR_1 , <unk> , VAR_2 , null , 0 ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( java.lang.String VAR_1 , java.lang.String token , java.util.Map < java.lang.String , java.lang.String > VAR_2 ) { return TYPE_2 . METHOD_2 ( STRING_1 , VAR_1 , VAR_1 , VAR_2 , null , 0 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , <unk> , STRING_1 , true , VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( <unk> , STRING_1 , VAR_1 , true , VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String text , java.lang.String path ) throws java.lang.Exception { METHOD_2 ( VAR_1 , event , STRING_1 , true , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 ) { return TYPE_2 . <unk> ( id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String <unk> , int id , java.lang.String VAR_1 ) { return TYPE_2 . <unk> ( <unk> , id ) . view ( STRING_1 ) . id ( VAR_1 ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( int id , java.lang.String VAR_1 , java.lang.String type ) { return TYPE_2 . id ( id ) . view ( STRING_1 ) . id ( id , VAR_1 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( <unk> id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . <unk> ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String <unk> , <unk> id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > VAR_2 ) { TYPE_3 . <unk> ( <unk> , id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String id , java.lang.String VAR_1 , TYPE_1 < TYPE_2 > , TYPE_2 < TYPE_2 > VAR_2 ) { TYPE_3 . id ( id , STRING_1 ) . id ( VAR_1 ) . delete ( VAR_2 ) ; }[0m
---------------
Class: Add/Remove parameter,Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( java.lang.Integer ) ( <unk> ) ) ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Trg : public void <unk> ( java.lang.Integer <unk> ) { VAR_1 = <unk> ; METHOD_1 ( ) ; METHOD_2 ( ) ; }[0m
Pred: public void init ( java.lang.Object ... VAR_1 ) { METHOD_1 ( ) ; METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { METHOD_1 ( ( ( java.lang.Boolean ) ( <unk> ) ) ) ; }[0m
Trg : public void <unk> ( java.lang.Boolean <unk> ) { METHOD_1 ( <unk> ) ; }[0m
Pred: public void init ( java.lang.Object to ) { }[0m
---------------
Class: Broad method visibility
Golden example (True):
[32mExample #1[0m
Src : abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Trg : public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
Pred: public abstract TYPE_1 id ( java.lang.String VAR_1 ) ;[0m
+++++++++++++++
[31mExample #1[0m
Src : private TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
Pred: public final TYPE_1 METHOD_1 ( ) { return VAR_1 ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.Object > VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( VAR_1 ) ; VAR_3 . METHOD_4 ( ) ; }[0m
[31mExample #3[0m
Src : private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . <unk> ( ) ) ) && ( <unk> ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . <unk> ( ) ) ) && ( <unk> ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return ( METHOD_2 ( TYPE_2 . METHOD_2 ( ) ) ) && ( && ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #4[0m
Src : private boolean METHOD_1 ( TYPE_1 . <unk> <unk> ) { return <unk> ( METHOD_2 ( <unk> ) . METHOD_3 ( TYPE_2 . <unk> ( ) . METHOD_4 ( ) ) ) ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 . <unk> <unk> ) { return <unk> ( METHOD_2 ( <unk> ) . METHOD_3 ( TYPE_2 . <unk> ( ) . METHOD_4 ( ) ) ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 . to ) { return ! ( METHOD_2 ( METHOD_2 ( ) ) . METHOD_3 ( TYPE_2 . getName ( ) . METHOD_4 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : protected TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
Pred: public final TYPE_1 METHOD_1 ( ) { return VAR_1 . get ( ) ; }[0m
[31mExample #6[0m
Src : protected <unk> <unk> ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . <unk> ( ) ; }[0m
Trg : public <unk> <unk> ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . <unk> ( ) ; }[0m
Pred: public synchronized void METHOD_2 ( ) { if ( ( TYPE_1 . METHOD_1 ( ) ) != null ) { METHOD_2 ( TYPE_1 . METHOD_1 ( ) . METHOD_3 ( ) ) ; } return super . build ( ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( final java.util.Map < java.lang.String , java.lang.String > VAR_1 ) { this . VAR_1 = VAR_1 ; }[0m
[31mExample #8[0m
Src : private boolean METHOD_1 ( java.util.List < <unk> > VAR_1 ) { for ( <unk> <unk> : VAR_1 ) { if ( ( <unk> . <unk> ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Trg : protected boolean METHOD_1 ( java.util.List < <unk> > VAR_1 ) { for ( <unk> <unk> : VAR_1 ) { if ( ( <unk> . <unk> ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
Pred: public boolean METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) { for ( TYPE_1 b : VAR_1 ) { if ( ( ! . ( ) ) != ( VAR_2 ) ) { return true ; } } return false ; }[0m
[31mExample #9[0m
Src : private static TYPE_1 <unk> ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public static TYPE_1 <unk> ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static static TYPE_1 TYPE_1 ( java.io.File VAR_1 , TYPE_2 VAR_2 ) { return new TYPE_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #10[0m
Src : protected TYPE_1 . <unk> METHOD_1 ( ) { return <unk> ( ) ; }[0m
Trg : public TYPE_1 . <unk> METHOD_1 ( ) { return <unk> ( ) ; }[0m
Pred: public TYPE_1 TYPE_1 . METHOD_1 ( ) { return ! ( ) ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( final <unk> value ) { <unk> = value ; }[0m
Trg : public void METHOD_1 ( final <unk> value ) { <unk> = value ; }[0m
Pred: public void METHOD_1 METHOD_1 ( final TYPE_1 value ) { this = value ; }[0m
---------------
Class: Change method invocation as result of a move method
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 . <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { java.lang.System.out.println ( VAR_1 . METHOD_2 ( ) ) . ) ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( true , false , null , true ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( true , false , null , true ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( true , false , false , true ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { <unk> ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( null , STRING_1 ) ; METHOD_2 ( STRING_2 , STRING_3 ) ; TYPE_1 . METHOD_2 ( STRING_4 , STRING_5 ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Trg : protected boolean METHOD_1 ( ) { return ( TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
Pred: protected boolean METHOD_1 ( ) { return ( METHOD_2 ( ) . get ( METHOD_3 ( ) . getId ( ) ) ) != null ; }[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , <unk> ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { TYPE_2 VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , <unk> ) ; return METHOD_3 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws java.lang.Exception { VAR_1 = VAR_2 . get ( key . METHOD_2 ( ) , ) ; return TYPE_3 . METHOD_3 ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( <unk> <unk> ) { TYPE_1 . <unk> ( VAR_1 . get ( VAR_2 . <unk> < <unk> > <unk> ( VAR_3 . <unk> class ) ) ) . <unk> ( <unk> ) ; }[0m
Trg : private void METHOD_1 ( <unk> <unk> ) { <unk> ( VAR_1 . get ( VAR_2 . <unk> < <unk> > <unk> ( VAR_3 . <unk> class ) ) ) . <unk> ( <unk> ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . VAR_1 ( VAR_1 . get ( VAR_2 . < java.lang.Long > ( VAR_3 . getSelection class ) ) ) . start ( ) ; }[0m
---------------
Class: Change method return value
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { return false ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return true ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public final TYPE_1 METHOD_1 ( ) { return this . <unk> ; }[0m
Trg : public final TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public final TYPE_1 METHOD_1 ( ) { return this . true ; }[0m
[31mExample #2[0m
Src : protected java.lang.String <unk> ( ) { return STRING_1 ; }[0m
Trg : protected java.lang.String <unk> ( ) { return <unk> ; }[0m
Pred: protected java.lang.String METHOD_2 ( ) { return STRING_1 ; }[0m
---------------
Class: Change method return value,Change return type
Golden example (False):
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return true ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( java.lang.String . METHOD_3 ( STRING_1 , VAR_2 ) , java.lang.Integer . toString ( VAR_3 . METHOD_4 ( ) ) ) ; return VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return null ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return true ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) throws java.lang.Exception { VAR_1 . METHOD_2 ( ) ; return VAR_1 ; }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Trg : synchronized long METHOD_1 ( long [ ] VAR_1 , long [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: synchronized long METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 , int [ ] VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( id , VAR_1 , VAR_2 , VAR_3 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int count , float [ ] <unk> , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 , count , <unk> , VAR_3 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int count , float [ ] <unk> , int VAR_3 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 , count , <unk> , VAR_3 ) ; }[0m
Pred: synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , double count , float [ ] [ ] [ ] VAR_3 , VAR_3 ) { METHOD_3 ( id , id , VAR_2 , count , count , VAR_3 , VAR_3 ) ; }[0m
[31mExample #2[0m
Src : public boolean METHOD_1 ( <unk> . <unk> <unk> ) { return <unk> . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( <unk> <unk> ) { return <unk> . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.Boolean id ) { return false . getId ( ) . equals ( VAR_1 . METHOD_2 ( ) ) ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return <unk> . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return <unk> . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.Boolean id ) { return names . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #4[0m
Src : private TYPE_1 METHOD_1 ( final TYPE_2 . <unk> VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . <unk> ( VAR_1 . <unk> ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final <unk> . <unk> VAR_1 ) { if ( VAR_1 != null ) { return VAR_2 . <unk> ( VAR_1 . <unk> ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final TYPE_2 target ) { if ( VAR_1 != null ) { return VAR_2 . id ( VAR_1 . id ( ) ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_3 . METHOD_4 ( ) ) ; } return VAR_3 ; }[0m
[31mExample #5[0m
Src : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( VAR_2 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.Throwable t ) { return VAR_1 . METHOD_2 ( name ) . equals ( VAR_2 . getName ( ) ) ; }[0m
[31mExample #6[0m
Src : private static TYPE_1 METHOD_1 ( ) { TYPE_1 <unk> = new TYPE_1 ( ) ; <unk> . <unk> ( <unk> . METHOD_2 ( ) ) ; <unk> . METHOD_3 ( STRING_1 ) ; return <unk> ; }[0m
Trg : private static <unk> METHOD_1 ( ) { <unk> <unk> = new <unk> ( ) ; <unk> . <unk> ( <unk> . METHOD_2 ( ) ) ; <unk> . METHOD_3 ( STRING_1 ) ; return <unk> ; }[0m
Pred: private static TYPE_1 METHOD_1 ( ) { TYPE_1 a = new TYPE_1 ( ) ; java.lang.System.out.println ( event . METHOD_2 ( ) ) ; false . METHOD_3 ( STRING_1 ) ; return id ; }[0m
[31mExample #7[0m
Src : synchronized TYPE_1 METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 ) ; }[0m
Trg : synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( <unk> , VAR_1 ) ; }[0m
Pred: synchronized TYPE_1 METHOD_1 ( long VAR_1 ) { METHOD_2 ( ) ; return METHOD_3 ( id , VAR_1 ) ; }[0m
[31mExample #8[0m
Src : private static void METHOD_1 ( final TYPE_1 <unk> , final TYPE_2 . <unk> <unk> ) { TYPE_3 . METHOD_2 ( <unk> , STRING_1 , <unk> . get ( ) ) ; }[0m
Trg : private static void METHOD_1 ( final java.lang.StringBuilder <unk> , final TYPE_2 . <unk> <unk> ) { TYPE_3 . METHOD_2 ( <unk> , STRING_1 , <unk> . get ( ) ) ; }[0m
Pred: private static void METHOD_1 ( final TYPE_1 event , final TYPE_2 . to ) ) { TYPE_3 . METHOD_2 ( id , STRING_1 , id . get ( ) ) ; }[0m
[31mExample #9[0m
Src : public java.lang.String getValue ( <unk> . <unk> <unk> ) { return <unk> . METHOD_1 ( ) ; }[0m
Trg : public java.lang.String getValue ( <unk> . <unk> <unk> ) { return <unk> . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String getValue ( java.lang.Long id ) { return names . METHOD_1 ( id ) ; }[0m
[31mExample #10[0m
Src : public java.lang.String getValue ( <unk> <unk> ) { return <unk> ( <unk> . METHOD_1 ( ) . size ( ) ) ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object <unk> ) { return <unk> ( ( ( <unk> ) ( <unk> ) ) . METHOD_1 ( ) . size ( ) ) ; }[0m
Pred: public java.lang.String getValue ( long id ) { return ( ( id . METHOD_1 ( ) . size ( ) ) ) ; }[0m
[31mExample #11[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , int VAR_1 , long VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( id , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #12[0m
Src : public static native byte [ ] METHOD_1 ( int VAR_1 ) ;[0m
Trg : public static native byte [ ] METHOD_1 ( long VAR_1 ) ;[0m
Pred: public static native byte [ ] METHOD_1 ( byte VAR_1 ) ;[0m
[31mExample #13[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > <unk> , TYPE_2 . <unk> VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , <unk> . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , <unk> , VAR_2 ) ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > <unk> , TYPE_2 . <unk> VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , <unk> . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , <unk> , VAR_2 ) ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.lang.String VAR_1 , TYPE_1 < ? > id , TYPE_2 VAR_2 ) { TYPE_3 . METHOD_2 ( STRING_1 , id . METHOD_3 ( ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , event , VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public java.lang.String getValue ( <unk> <unk> ) { return ( <unk> ( <unk> . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Trg : public java.lang.String getValue ( java.lang.Object <unk> ) { return ( <unk> ( ( ( <unk> ) ( <unk> ) ) . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
Pred: public java.lang.String getValue ( java.lang.Throwable t ) { return ( id ( id . METHOD_1 ( ) ) ) + STRING_1 ; }[0m
[31mExample #15[0m
Src : synchronized int METHOD_1 ( int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : synchronized long METHOD_1 ( long VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: synchronized int METHOD_1 ( int VAR_1 , long VAR_2 , long VAR_3 , int VAR_4 ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #16[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , float VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( id , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #17[0m
Src : public boolean METHOD_1 ( TYPE_1 <unk> ) { return ( <unk> . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( <unk> <unk> ) { return ( <unk> . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 event ) { return ( id . METHOD_2 ( ) ) == ( VAR_1 ) ; }[0m
[31mExample #18[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 ) ; }[0m
Pred: synchronized void METHOD_1 ( long id , long VAR_1 , byte [ ] VAR_2 ) { METHOD_2 ( ) ; METHOD_3 ( id , id , VAR_1 , VAR_2 ) ; }[0m
[31mExample #19[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 <unk> , <unk> . <unk> <unk> ) { return VAR_1 . METHOD_2 ( <unk> , <unk> , VAR_2 , VAR_3 ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 <unk> , <unk> <unk> ) { return VAR_1 . METHOD_2 ( <unk> , <unk> , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 event , java.lang.Boolean to ) ) { return VAR_1 . METHOD_2 ( id , id , VAR_2 , VAR_3 ) ; }[0m
[31mExample #20[0m
Src : synchronized void METHOD_1 ( int VAR_1 , int VAR_2 , int <unk> ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , VAR_1 , VAR_2 , <unk> ) ; }[0m
Trg : synchronized void METHOD_1 ( long VAR_1 , int VAR_2 , long <unk> ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , VAR_1 , VAR_2 , <unk> ) ; }[0m
Pred: synchronized void METHOD_1 ( int VAR_1 , long VAR_2 , int time ) { METHOD_2 ( ) ; METHOD_3 ( id , VAR_1 , VAR_2 , VAR_2 ) ; }[0m
[31mExample #21[0m
Src : native void METHOD_1 ( int VAR_1 , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Trg : native void METHOD_1 ( long VAR_1 , long id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
Pred: private void METHOD_1 ( int id , int id , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , TYPE_1 b ) ;[0m
[31mExample #22[0m
Src : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( <unk> ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( <unk> . <unk> VAR_1 ) { return VAR_1 . METHOD_2 ( ) . equals ( <unk> ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.Boolean id ) { return VAR_1 . METHOD_2 ( ) . equals ( id ( ) . METHOD_3 ( ) . METHOD_4 ( ) ) ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_4 . <unk> , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new java.util.ArrayList ( ) ; return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_4 ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected java.util.List < <unk> > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
Trg : protected java.util.List < <unk> > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new <unk> ( VAR_2 ) ) ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 ) ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( <unk> id ) { return <unk> ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( <unk> id ) { return <unk> ( VAR_1 class , VAR_2 , new <unk> ( id ) , id . toString ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 id ) { return state ( VAR_1 class , VAR_2 , new TYPE_2 ( id ) , id . toString ( ) ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; <unk> = TYPE_3 . METHOD_3 ( args . <unk> , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; <unk> = TYPE_3 . METHOD_3 ( args . <unk> , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( VAR_1 , VAR_1 , true ) ; java.lang.Thread = TYPE_3 . METHOD_3 ( args . to , t ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( <unk> , INT_1 , false ) ; <unk> = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( <unk> , INT_1 , false ) ; <unk> = TYPE_3 . METHOD_3 ( args . <unk> , t ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( this , INT_1 , false ) ; java.util.Set = TYPE_3 . METHOD_3 ( VAR_1 , t ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; TYPE_1 VAR_1 = METHOD_4 ( ) ; java.lang.String VAR_2 = VAR_1 . METHOD_5 ( STRING_1 , null ) ; assertEquals ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . <unk> ( STRING_2 , VAR_1 ) ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , TYPE_2 . <unk> , METHOD_4 ( ) . <unk> ( STRING_2 , VAR_1 ) ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_2 ( ) , METHOD_4 ( ) . equals ( STRING_2 , VAR_1 ) ) ; }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = <unk> . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , <unk> ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = <unk> . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( <unk> , VAR_1 . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 . assertEquals ( VAR_1 . size ( ) , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( INT_2 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { long VAR_1 = INT_1 ; long VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 , VAR_3 , VAR_4 ) . METHOD_3 ( ) ; TYPE_2 . assertEquals ( VAR_2 , INT_2 ) ; }[0m
---------------
Class: Change return type
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected <unk> . <unk> METHOD_1 ( java.lang.String name ) { for ( <unk> . <unk> <unk> : METHOD_2 ( ) ) { if ( <unk> . getName ( ) . equals ( name ) ) { return <unk> ; } } return null ; }[0m
Trg : protected <unk> METHOD_1 ( java.lang.String name ) { for ( <unk> <unk> : METHOD_2 ( ) ) { if ( <unk> . getName ( ) . equals ( name ) ) { return <unk> ; } } return null ; }[0m
Pred: protected boolean METHOD_2 ( java.lang.String name ) { for ( TYPE_1 . getSelection TYPE_1 . METHOD_2 ( ) ) { if ( && . getName ( ) . equals ( name ) ) { return true ; } } return null ; }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( <unk> <unk> ) { return ! ( TYPE_1 . METHOD_2 ( <unk> ) . isEmpty ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( <unk> <unk> ) { return ! ( METHOD_2 ( <unk> ) . isEmpty ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return ! ( TYPE_1 . METHOD_2 ( ) ) . isEmpty ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = <unk> . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; TYPE_2 . METHOD_4 ( result . isEmpty ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { final java.util.List < TYPE_1 > result = METHOD_2 ( ) . METHOD_3 ( ( ( VAR_1 ) + STRING_1 ) ) ; METHOD_4 ( result . isEmpty ( ) ) ; }[0m
[31mExample #2[0m
Src : public static TYPE_1 METHOD_1 ( <unk> <unk> , <unk> VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return TYPE_2 . METHOD_1 ( <unk> , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( <unk> <unk> , <unk> VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( <unk> , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , java.lang.Boolean VAR_1 , java.lang.Boolean VAR_2 , java.lang.Boolean VAR_3 , boolean VAR_4 ) { return METHOD_1 ( VAR_1 , VAR_1 , VAR_2 , VAR_3 , STRING_1 , VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public static TYPE_1 METHOD_1 ( <unk> <unk> , <unk> VAR_1 , java.lang.String VAR_2 ) { return TYPE_2 . METHOD_1 ( <unk> , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( <unk> <unk> , <unk> VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( <unk> , VAR_1 , true , false , VAR_2 , false ) ; }[0m
Pred: public static METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_1 , java.lang.String VAR_2 ) { return METHOD_1 ( VAR_1 , VAR_1 , true , false , VAR_2 , false ) ; }[0m
[31mExample #4[0m
Src : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( METHOD_4 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + STRING_1 ) + ( VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = VAR_1 . METHOD_2 ( ) ; return ( ( VAR_2 . get ( 0 ) . METHOD_3 ( ) ) + ( METHOD_4 ( VAR_1 ) ) ) ; }[0m
---------------
Class: Forbid overriding: add final to method
Golden example (False):
[31mExample #1[0m
Src : public long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Trg : public final long METHOD_1 ( int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
Pred: public long METHOD_1 ( final int i ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( i , VAR_2 ) ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Trg : public final double METHOD_1 ( ) { if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
Pred: public double METHOD_1 ( ) { final if ( ! ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } return METHOD_1 ( METHOD_2 ( METHOD_3 ( VAR_2 ) ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( <unk> VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . <unk> ( STRING_1 , VAR_1 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( <unk> VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . <unk> ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.Throwable VAR_1 ) { TYPE_2 VAR_2 = METHOD_2 ( ) . METHOD_2 ( STRING_1 , VAR_1 ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_4 , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( <unk> <unk> ) { TYPE_2 VAR_1 = METHOD_2 ( ) . <unk> ( STRING_1 , <unk> ) ; java.util.List < TYPE_1 > VAR_2 = METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( <unk> <unk> ) { TYPE_2 VAR_1 = METHOD_2 ( ) . <unk> ( STRING_1 , <unk> ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( boolean b ) { TYPE_2 VAR_1 = METHOD_2 ( ) . . ( STRING_1 , false ) ; return METHOD_3 ( ) . METHOD_4 ( STRING_2 , VAR_3 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 ; VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { TYPE_1 VAR_3 = super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ; return VAR_3 == null ? null : METHOD_3 ( VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String VAR_1 , boolean VAR_2 ) { return VAR_3 ; super . METHOD_1 ( VAR_4 . METHOD_2 ( VAR_1 ) , VAR_2 ) ? null : METHOD_3 ( VAR_3 ) ; }[0m
[31mExample #3[0m
Src : private TYPE_1 METHOD_1 ( <unk> VAR_1 , <unk> VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( ) . <unk> ( STRING_1 , VAR_1 ) . <unk> ( STRING_2 , VAR_2 ) ; return VAR_3 ; }[0m
Trg : private TYPE_1 METHOD_1 ( <unk> VAR_1 , <unk> VAR_2 ) { return METHOD_2 ( ) . <unk> ( STRING_1 , VAR_1 ) . <unk> ( STRING_2 , VAR_2 ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( float VAR_1 , boolean VAR_2 ) { return METHOD_2 ( ) . ( STRING_1 , VAR_1 ) . ( STRING_2 , VAR_2 ) ; }[0m
[31mExample #4[0m
Src : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 ; VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Trg : public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { java.lang.String VAR_1 = TYPE_2 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
Pred: public static java.io.File METHOD_1 ( java.lang.String name ) throws TYPE_1 { return VAR_1 . METHOD_2 ( ) ; return new java.io.File ( VAR_1 , ( name + ( VAR_2 ) ) ) ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Trg : public static long METHOD_1 ( ) { VAR_1 . METHOD_2 ( ) ; try { return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
Pred: public static long METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( ) ; return TYPE_1 . METHOD_3 ( ) ; } finally { VAR_1 . METHOD_4 ( ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( <unk> ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( <unk> ) ; try { c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( ) ; c . METHOD_2 ( STRING_1 , null ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( <unk> ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = new TYPE_1 ( <unk> ) ; try { c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = new TYPE_1 ( ) ; c . get ( null ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_1 ) { } }[0m
---------------
Class: Narrow method visibility
Golden example (True):
[32mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return null ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( STRING_2 ) ; return VAR_1 ; }[0m
[31mExample #2[0m
Src : protected TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Trg : private TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String id ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_3 ( METHOD_4 ( id ) ) ; return VAR_1 ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( ) { return <unk> ; }[0m
Trg : private TYPE_1 METHOD_1 ( ) { return <unk> ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { return true ; }[0m
[31mExample #4[0m
Src : protected static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Trg : private static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_1 . METHOD_2 ( STRING_2 ) ; VAR_1 . METHOD_2 ( STRING_3 ) ; VAR_1 . METHOD_2 ( STRING_4 ) ; VAR_1 . METHOD_2 ( STRING_5 ) ; }[0m
---------------
Class: Remove condition
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { METHOD_4 ( new TYPE_2 ( STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 value ) { if ( ( this . VAR_1 . METHOD_2 ( ) ) != value ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.String line ) { if ( line != null ) { METHOD_2 ( line ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String line ) { METHOD_2 ( line ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String line ) { }[0m
[31mExample #3[0m
Src : public static TYPE_1 <unk> ( ) { if ( ( VAR_1 ) == null ) { synchronized ( VAR_2 class ) { if ( ( VAR_1 ) == null ) { VAR_1 = new TYPE_1 ( ) ; } } } return VAR_1 ; }[0m
Trg : public static TYPE_1 <unk> ( ) { return VAR_1 ; }[0m
Pred: public static TYPE_1 TYPE_1 ( ) { VAR_1 = null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( java.lang.String value ) { if ( ! ( TYPE_1 . METHOD_2 ( this . VAR_1 . METHOD_3 ( ) , value ) ) ) { this . VAR_1 . METHOD_1 ( value ) ; } }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ) ; }[0m
Trg : void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_2 . METHOD_4 ( a , a . length , this . VAR_1 ) ; }[0m
Pred: void METHOD_1 ( byte [ ] a ) { this . METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( a , a . length , this . VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = <unk> ; VAR_2 = <unk> ; <unk> = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . <unk> ) ) ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = <unk> ; VAR_2 = <unk> ; <unk> = ( ( float ) ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . <unk> ) ) ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args ) { VAR_1 = VAR_2 ; VAR_2 = true ; if ( TYPE_2 . METHOD_2 ( FLOAT_1 , args . ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) [ 1 ] ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = <unk> . METHOD_2 ( FLOAT_1 ) ; b = <unk> . METHOD_2 ( FLOAT_2 ) ; c = a % b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a % b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = b . METHOD_2 ( FLOAT_1 ) ; b = b ; c = a % b ; return c ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = <unk> . get ( VAR_3 ) ; VAR_4 = <unk> . get ( VAR_5 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = VAR_1 . METHOD_3 ( ) ; VAR_2 = <unk> . get ( VAR_3 ) ; VAR_4 = <unk> . get ( VAR_5 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = TYPE_1 . get ( VAR_3 ) ; VAR_4 = VAR_2 . get ( VAR_5 ) ; }[0m
[31mExample #5[0m
Src : public static synchronized boolean METHOD_1 ( TYPE_1 . <unk> <unk> ) { TYPE_2 type = TYPE_2 . METHOD_2 ( <unk> . METHOD_3 ( ) ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Trg : public static synchronized boolean METHOD_1 ( TYPE_1 . <unk> <unk> ) { TYPE_2 type = <unk> . METHOD_3 ( ) ; return ( type != null ) && ( type == ( VAR_1 ) ) ; }[0m
Pred: public static synchronized boolean METHOD_1 ( TYPE_1 TYPE_1 ) { TYPE_2 type = TYPE_2 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; return ( type != null ) && ( VAR_1 ) ; }[0m
[31mExample #6[0m
Src : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) ; }[0m
Trg : public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return element . METHOD_1 ( VAR_1 ) . METHOD_1 ( ) ; }[0m
Pred: public long METHOD_1 ( TYPE_1 element , TYPE_2 VAR_1 ) { return VAR_1 ; }[0m
[31mExample #7[0m
Src : public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return INT_1 ; } return ( ( java.lang.Integer ) ( source ) ) . METHOD_1 ( ) ; }[0m
Trg : public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return INT_1 ; } return source ; }[0m
Pred: public java.lang.Object [ ( java.lang.Object source , TYPE_1 > ) { if ( source == null ) { return INT_1 ; } return source ( METHOD_1 ( ) ) ; }[0m
[31mExample #8[0m
Src : public TYPE_1 get ( ) { TYPE_1 <unk> = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( <unk> , <unk> ) ; TYPE_2 . METHOD_4 ( <unk> , TYPE_3 . METHOD_5 ( <unk> ) ) ; return <unk> ; }[0m
Trg : public TYPE_1 get ( ) { TYPE_1 <unk> = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( <unk> , <unk> ) ; TYPE_2 . METHOD_4 ( <unk> , <unk> ) ; return <unk> ; }[0m
Pred: public TYPE_1 get ( ) { TYPE_1 TYPE_1 = METHOD_1 ( METHOD_2 ( ) : : get ) ; TYPE_2 . METHOD_3 ( TYPE_1 , TYPE_2 ) ; TYPE_2 . METHOD_5 ( METHOD_5 ( ) ) ; return ; }[0m
[31mExample #9[0m
Src : public java.lang.Object METHOD_1 ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) : 1 ; }[0m
Trg : public java.lang.Object METHOD_1 ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; }[0m
Pred: public java.lang.Object METHOD_1 ( java.lang.Object source , TYPE_1 event ) { return ( ( java.lang.Integer ) ( source ) ) . METHOD_2 ( ) ; }[0m
[31mExample #10[0m
Src : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . <unk> ( ) . METHOD_3 ( ) , TYPE_4 . <unk> ( ) . METHOD_4 ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( VAR_1 , METHOD_2 ( ) , TYPE_4 . METHOD_3 ( ) , TYPE_4 . METHOD_4 ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #11[0m
Src : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = <unk> . METHOD_2 ( FLOAT_1 ) ; b = <unk> . METHOD_2 ( FLOAT_2 ) ; c = a - b ; return c ; }[0m
Trg : public static float METHOD_1 ( ) { float a ; float b ; float c ; a = FLOAT_1 ; b = FLOAT_2 ; c = a - b ; return c ; }[0m
Pred: public static float METHOD_1 ( ) { float a ; float b ; float c ; a = b . METHOD_2 ( FLOAT_1 ) ; b = b ; b = a - b ; return c ; }[0m
[31mExample #12[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_6 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = <unk> . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = VAR_1 . METHOD_3 ( ) ; VAR_2 = <unk> . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( ) ; VAR_3 . METHOD_4 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = VAR_2 . get ( STRING_1 ) ; VAR_3 = new TYPE_1 ( STRING_2 ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = TYPE_3 . METHOD_2 ( key ) ; if ( ( VAR_2 ) == null ) { throw new TYPE_4 ( STRING_1 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private <unk> . <unk> METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
Trg : private <unk> . <unk> METHOD_1 ( java.lang.String name , java.lang.String VAR_1 ) { return METHOD_2 ( <unk> . METHOD_3 ( ) , name , true , null , null , VAR_1 , true ) ; }[0m
Pred: private TYPE_1 event METHOD_1 ( java.lang.String name ) { return METHOD_2 ( event . METHOD_3 ( ) , name , true , null , null , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : private void METHOD_1 ( ) { <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( VAR_2 . <unk> class ) , TYPE_1 . <unk> ( VAR_3 class ) ) ; <unk> . METHOD_3 ( VAR_4 ) ; }[0m
Trg : private void METHOD_1 ( ) { <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( ) , TYPE_1 . <unk> ( ) ) ; <unk> . METHOD_3 ( VAR_4 ) ; }[0m
Pred: private void METHOD_1 ( ) { while ( VAR_1 ) . METHOD_2 ( TYPE_1 . METHOD_2 ( TYPE_1 . VAR_2 class ) , TYPE_1 . getSelection ( VAR_3 class ) ) ; event . METHOD_3 ( VAR_4 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 <unk> , java.lang.String value ) { VAR_2 . METHOD_2 ( ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 <unk> , java.lang.String value ) { VAR_2 . METHOD_2 ( true ) ; }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 value ) { VAR_2 . METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false , false ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; METHOD_3 ( 0 , false , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , false ) ; METHOD_3 ( 0 , false , false ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( <unk> , VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( <unk> ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( <unk> ) ; VAR_1 . METHOD_2 ( <unk> ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 ) ; VAR_1 . METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null , null ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 { TYPE_2 . METHOD_1 ( null ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > <unk> , java.lang.String <unk> ) throws java.lang.Exception { return METHOD_2 ( <unk> , null , null , <unk> , null , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > <unk> , java.lang.String <unk> ) throws java.lang.Exception { return METHOD_2 ( <unk> , null , <unk> , null , null ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 < TYPE_3 > values ) throws java.lang.Exception { return METHOD_2 ( false , null , null , null , null , null ) ; }[0m
[31mExample #8[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( true ) ; add ( VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 = new TYPE_1 ( ) ; add ( ) ; }[0m
[31mExample #9[0m
Src : public TYPE_1 <unk> ( ) { return new TYPE_1 ( this , null ) ; }[0m
Trg : public TYPE_1 <unk> ( ) { return new TYPE_1 ( this ) ; }[0m
Pred: public TYPE_1 TYPE_1 ( ) { return new TYPE_1 ( this ) ; }[0m
[31mExample #10[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , java.lang.Class < ? > [ ] VAR_2 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 , STRING_1 ) ; java.lang.String result = VAR_1 . METHOD_3 ( VAR_2 , STRING_2 , STRING_2 ) ; TYPE_1 . assertEquals ( STRING_3 , STRING_4 , result ) ; }[0m
[31mExample #12[0m
Src : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 <unk> ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 TYPE_1 ( TYPE_2 VAR_1 ) { return new TYPE_1 ( VAR_2 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_4 ( VAR_1 , true ) ; METHOD_5 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_2 ( false ) ; METHOD_3 ( false ) ; TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , VAR_4 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( ) ; }[0m
[31mExample #14[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new <unk> ( ) , null , new java.util.ArrayList < <unk> . <unk> > ( ) ) , false , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new <unk> ( ) , null , new java.util.ArrayList < <unk> . <unk> > ( ) , null ) , false , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( new TYPE_1 ( ) . null , new java.util.ArrayList < > ( ) ) , false , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( <unk> ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( <unk> ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( INT_1 , INT_2 , 0 , 0 ) ; TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #16[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , <unk> ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( VAR_2 , VAR_3 , false ) ; }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 , STRING_1 ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return METHOD_2 ( STRING_1 ) ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws <unk> { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 ) throws <unk> { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.lang.NullPointerException { synchronized ( VAR_3 ) { METHOD_2 ( ) ; return METHOD_3 ( VAR_4 ) . METHOD_1 ( VAR_5 , VAR_6 , VAR_2 , VAR_2 ) ; } }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true , true , false ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( false , true , true ) ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 0 , 1 , 0 , 0 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( 0 , 0 , 1 , 1 ) ; TYPE_1 VAR_1 = METHOD_3 ( ) ; TYPE_2 . METHOD_4 ( VAR_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #21[0m
Src : public void METHOD_1 ( ) { <unk> ( null ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( VAR_1 . <unk> class ) ) ; TYPE_2 . METHOD_3 ( <unk> . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> ( null ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( ) ) ; TYPE_2 . METHOD_3 ( <unk> . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { while ( null ) . METHOD_2 ( TYPE_1 . METHOD_2 ( VAR_1 . class ) ) ; TYPE_2 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_3 . METHOD_5 ( ) ) ; }[0m
[31mExample #22[0m
Src : protected TYPE_1 < TYPE_2 > <unk> ( ) { return new TYPE_3 ( METHOD_1 ( ) , METHOD_1 ( ) . getId ( ) ) ; }[0m
Trg : protected TYPE_1 < TYPE_2 > <unk> ( ) { return new TYPE_3 ( METHOD_1 ( ) ) ; }[0m
Pred: protected TYPE_1 < TYPE_2 > > ( ) { return new TYPE_3 ( METHOD_1 ( ) . METHOD_1 ( ) . getId ( ) ) ; }[0m
[31mExample #23[0m
Src : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . <unk> { METHOD_2 ( VAR_1 , null ) ; }[0m
Trg : public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 . <unk> { METHOD_2 ( VAR_1 ) ; }[0m
Pred: public final void METHOD_1 ( final TYPE_1 < TYPE_2 > VAR_1 ) throws TYPE_3 { METHOD_2 ( null , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true , true , true ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_1 ( new java.util.HashMap < > ( ) , true ) ; }[0m
[31mExample #25[0m
Src : public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 ) { return VAR_2 . METHOD_3 ( VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; return VAR_2 . METHOD_3 ( ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . <unk> ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . <unk> ( 1 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , 0 ) ; METHOD_2 ( TYPE_2 . ( 1 , 0 ) , VAR_1 . METHOD_3 ( INT_1 ) ) ; }[0m
[31mExample #27[0m
Src : private java.util.List < <unk> > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true , null ) ; }[0m
Trg : private java.util.List < <unk> > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , true ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( TYPE_1 . METHOD_3 ( ) . METHOD_4 ( ) , null ) ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) { <unk> ( VAR_1 . get ( TYPE_1 . <unk> ( VAR_2 . <unk> class ) ) ) . <unk> ( null ) ; TYPE_2 . METHOD_2 ( <unk> , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> ( VAR_1 . get ( TYPE_1 . <unk> ( ) ) ) . <unk> ( null ) ; TYPE_2 . METHOD_2 ( <unk> , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) { while ( VAR_1 . get ( TYPE_1 . ( VAR_2 . class ) ) ) . ( null ) ; TYPE_2 . METHOD_2 ( false , VAR_3 ) ; }[0m
[31mExample #29[0m
Src : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 <unk> = METHOD_2 ( VAR_1 , false , false ) ; return new TYPE_1 ( <unk> . METHOD_3 ( ) ) ; }[0m
Trg : public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 <unk> = METHOD_2 ( VAR_1 , false , false , false ) ; return new TYPE_1 ( <unk> . METHOD_3 ( ) ) ; }[0m
Pred: public static TYPE_1 METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_2 ( false , false ) ; return new TYPE_1 ( TYPE_1 . METHOD_3 ( ) ) ; }[0m
---------------
Class: Remove redundant initialization
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { int [ ] a = null ; TYPE_1 VAR_1 = new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { int [ ] a = null ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 = new TYPE_1 ( ) ; new TYPE_1 ( a ) ; METHOD_2 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { TYPE_1 [ ] VAR_1 = new TYPE_1 [ VAR_2 ] ; new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( VAR_2 [ ] ) ; TYPE_2 VAR_3 = new TYPE_2 ( TYPE_3 . METHOD_2 ( VAR_1 ) ) ; METHOD_3 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove statement
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { }[0m
Pred: public void METHOD_1 ( ) { }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; return METHOD_2 ( VAR_1 ) ; }[0m
Trg : private java.util.List < TYPE_1 > METHOD_1 ( ) { return METHOD_2 ( VAR_2 ) ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( ) { TYPE_2 VAR_1 = new TYPE_3 ( VAR_2 ) ; }[0m
[31mExample #2[0m
Src : public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } <unk> ( TYPE_1 , msg ) ; }[0m
Trg : public void info ( java.lang.String msg ) { <unk> ( TYPE_1 , msg ) ; }[0m
Pred: public void info ( java.lang.String msg ) { if ( ( TYPE_1 . METHOD_1 ( ) ) < ( VAR_1 ) ) { return ; } }[0m
[31mExample #3[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg > > 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg > > 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { return arg > > > 0 ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( <unk> . get ( ) , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( <unk> . get ( ) , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; METHOD_6 ( TYPE_1 . get ( ) , 0 ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; <unk> ( VAR_1 ) . <unk> ( VAR_2 ) . METHOD_6 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; if ( VAR_1 ) . ) ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( <unk> , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( <unk> , <unk> ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_2 VAR_4 = new TYPE_2 ( <unk> , <unk> ) ; VAR_5 = VAR_4 . METHOD_2 ( ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( TYPE_1 , VAR_2 , VAR_3 ) ; TYPE_2 VAR_4 = new TYPE_2 ( VAR_2 , false ) ; METHOD_3 ( INT_1 , 0 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #8[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_3 ( METHOD_4 ( VAR_1 ) , VAR_1 , null ) ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { assert ( VAR_1 . METHOD_2 ( VAR_2 class ) ) == null ; return METHOD_3 ( METHOD_4 ( VAR_1 ) , null ) ; }[0m
[31mExample #9[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; }[0m
[31mExample #10[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x + y ; return VAR_2 - y ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( ) ) ; <unk> ( VAR_1 . METHOD_3 ( ) ) . <unk> ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_2 ( TYPE_1 . <unk> ( ) ) ; }[0m
Pred: private void METHOD_1 ( ) { while ( VAR_1 ) . METHOD_2 ( TYPE_1 . false ( ) ) ; if ( VAR_1 . METHOD_3 ( ) ) . ) ( VAR_2 ) ; }[0m
[31mExample #12[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return INT_1 - ( INT_2 - arg ) ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return INT_1 - ( INT_2 - arg ) ; }[0m
Pred: public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { return INT_1 - ( INT_2 + arg ) ; } }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; <unk> VAR_2 = <unk> . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; <unk> VAR_2 = <unk> . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 VAR_2 ) . METHOD_3 ( ) ; METHOD_4 ( VAR_2 ) ; METHOD_5 ( ) ; METHOD_6 ( VAR_2 ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( INT_1 , INT_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( <unk> ( 1 ) ) ) ; VAR_1 . METHOD_6 ( ) ; METHOD_7 ( <unk> . get ( ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( <unk> ( 1 ) ) ) ; METHOD_7 ( <unk> . get ( ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( METHOD_5 ( false ( ) ) ) ; METHOD_7 ( METHOD_7 . get ( ) , 1 ) ; }[0m
[31mExample #16[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; try { c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_2 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 c = TYPE_2 . METHOD_2 ( ) ; c . METHOD_3 ( null , VAR_1 , STRING_1 ) ; METHOD_4 ( ) ; } }[0m
[31mExample #17[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_1 <unk> , <unk> <unk> ) { VAR_1 . METHOD_2 ( <unk> , <unk> ) ; VAR_1 . METHOD_3 ( <unk> ) ; return <unk> ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_1 <unk> , <unk> <unk> ) { VAR_1 . METHOD_2 ( <unk> , <unk> ) ; return <unk> ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_1 event , to ) { VAR_1 . METHOD_2 ( false , false ) ; return VAR_1 ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( true ) ; METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( <unk> . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( true ) ; TYPE_1 . METHOD_4 ( <unk> . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { while ( VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( ) ; TYPE_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( new TYPE_2 ( VAR_3 ) ) , TYPE_3 . METHOD_6 ( ) ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) { return null ; } protected TYPE_4 METHOD_3 ( ) { return null ; } } ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 < TYPE_2 > ( ) { protected TYPE_3 METHOD_2 ( ) ; } protected TYPE_4 METHOD_3 ( ) ; }[0m
[31mExample #20[0m
Src : public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ) ; } else { return METHOD_3 ( ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
Trg : public boolean METHOD_1 ( int id , java.lang.String response ) { return VAR_2 . METHOD_2 ( response ) ; }[0m
Pred: public boolean METHOD_1 ( int id , java.lang.String response ) { if ( VAR_1 ) { return VAR_2 . METHOD_2 ( response ( ( ( STRING_1 + id ) + STRING_2 ) + response ) ) ; } }[0m
[31mExample #21[0m
Src : public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Trg : public static int METHOD_1 ( int x , int y ) { int VAR_2 = x - y ; return y + VAR_2 ; }[0m
Pred: public static int METHOD_1 ( int x , int y ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } int VAR_2 = x + y ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; VAR_1 . METHOD_6 ( ) ; <unk> . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; <unk> . METHOD_7 ( new TYPE_1 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 . ( new TYPE_1 ( ) ) ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; <unk> VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = <unk> . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> VAR_2 = VAR_3 ; java.util.List < TYPE_1 > VAR_4 = <unk> . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.util.List < TYPE_1 > VAR_4 = output . METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_4 , VAR_5 , VAR_6 , VAR_7 ) ; }[0m
[31mExample #24[0m
Src : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
Trg : TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; return VAR_2 ; }[0m
Pred: TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( STRING_1 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; return VAR_2 ; }[0m
[31mExample #25[0m
Src : private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { METHOD_3 ( true ) ; METHOD_4 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( ) ; }[0m
[31mExample #26[0m
Src : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( new TYPE_3 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; }[0m
Pred: public static void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 class ) ; TYPE_2 . METHOD_3 ( ) ; }[0m
[31mExample #27[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( <unk> . get ( ) , INT_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( <unk> . get ( ) , INT_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_6 ( TYPE_1 . get ( ) , INT_1 ) ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( int VAR_1 ) { <unk> ( VAR_2 . <unk> , ( STRING_1 + VAR_1 ) ) ; }[0m
Trg : public void METHOD_1 ( int VAR_1 ) { }[0m
Pred: public void METHOD_1 ( int VAR_1 ) { if ( VAR_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( ) { if ( ( <unk> ( ) ) != null ) { super . METHOD_1 ( ) ; } else { <unk> ( null ) ; } }[0m
Trg : public void METHOD_1 ( ) { if ( ( <unk> ( ) ) != null ) { super . METHOD_1 ( ) ; } }[0m
Pred: public void METHOD_1 ( ) { if ( ( false ( ) ) != null ) { } else { if ( null ) ; } }[0m
[31mExample #30[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; <unk> . METHOD_3 ( ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { <unk> . METHOD_3 ( ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; }[0m
[31mExample #31[0m
Src : public static int METHOD_1 ( int <unk> , int VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } return ( - <unk> ) - VAR_1 ; }[0m
Trg : public static int METHOD_1 ( int <unk> , int VAR_1 ) { return ( - <unk> ) - VAR_1 ; }[0m
Pred: public static int METHOD_1 ( int to , int VAR_1 ) { if ( VAR_2 ) { } return ( - > ) - VAR_1 ; }[0m
[31mExample #32[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; <unk> . METHOD_4 ( METHOD_5 ( ) ) ; VAR_1 . METHOD_6 ( ) ; TYPE_1 VAR_2 = <unk> . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; <unk> . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = <unk> . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; event . METHOD_4 ( METHOD_5 ( ) ) ; TYPE_1 VAR_2 = TYPE_1 . get ( ) ; assertEquals ( VAR_3 , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #33[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_3 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
[31mExample #34[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . <unk> ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( <unk> . <unk> ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { parameters . <unk> ( VAR_1 ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( <unk> . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; parameters . METHOD_3 ( VAR_2 ) ; TYPE_1 . METHOD_4 ( TYPE_1 . to ( ) ) ; }[0m
[31mExample #35[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; <unk> . METHOD_4 ( ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_3 ( null ) ; <unk> . METHOD_4 ( ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( null ) ; }[0m
[31mExample #36[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( <unk> . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) == ( <unk> . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) == ( METHOD_2 ( ) ) ? INT_2 ; }[0m
[31mExample #37[0m
Src : public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Trg : public static byte METHOD_1 ( short value ) { return ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
Pred: public static byte METHOD_1 ( short value ) { if ( VAR_1 ) { throw new TYPE_1 ( ( byte ) ( ( char ) ( value ) ) ) ; }[0m
[31mExample #38[0m
Src : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( <unk> ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( ( <unk> ( ) ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; } METHOD_7 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { super ( METHOD_1 ( ) ( null ) != null ) { METHOD_2 ( ) ; METHOD_3 ( ) . METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; } METHOD_7 ( ) ; }[0m
[31mExample #39[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; TYPE_3 . assertEquals ( STRING_1 , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final java.lang.String VAR_2 = VAR_1 . METHOD_2 ( VAR_3 ) ; }[0m
[31mExample #40[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; METHOD_2 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { VAR_2 . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 ) ; }[0m
[31mExample #41[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { <unk> <unk> = new <unk> ( ) ; <unk> ( VAR_1 . METHOD_2 ( <unk> , VAR_2 ) ) . <unk> ( true ) ; TYPE_1 . METHOD_3 ( <unk> . METHOD_4 ( <unk> ) , VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { <unk> ( VAR_1 . METHOD_2 ( <unk> , VAR_2 ) ) . <unk> ( true ) ; TYPE_1 . METHOD_3 ( <unk> . METHOD_4 ( <unk> ) , VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { while ( VAR_1 . METHOD_2 ( false , VAR_2 ) ) . init ( true ) ; TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( event ) , VAR_3 ) ; }[0m
[31mExample #42[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_2 ) ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; METHOD_2 ( new TYPE_2 ( STRING_1 ) ) ; }[0m
[31mExample #43[0m
Src : public static long METHOD_1 ( long arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg - 0 ; }[0m
Trg : public static long METHOD_1 ( long arg ) { return arg - 0 ; }[0m
Pred: public static long METHOD_1 ( long arg ) { throw new TYPE_1 ( ) ; } return arg ; }[0m
[31mExample #44[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( <unk> . get ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( VAR_1 , true ) ; METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; METHOD_7 ( <unk> . get ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( ) ; METHOD_4 ( METHOD_5 ( ) ) ; VAR_2 . METHOD_6 ( ) ; METHOD_7 ( event . get ( ) ) ; }[0m
[31mExample #45[0m
Src : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String value ) { METHOD_2 ( new TYPE_1 ( STRING_1 ) ) ; }[0m
[31mExample #46[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_4 ) ; VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }[0m
[31mExample #47[0m
Src : public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( <unk> , VAR_2 , VAR_3 ) ; METHOD_2 ( INT_1 , <unk> ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( INT_1 , <unk> ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( item , VAR_2 , VAR_3 ) ; }[0m
[31mExample #48[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 ) ; return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_3 ( VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_2 class , VAR_1 , new TYPE_2 ( ) , VAR_3 , new TYPE_3 ( ) ) ; }[0m
[31mExample #49[0m
Src : public static float METHOD_1 ( float arg ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
Trg : public static float METHOD_1 ( float arg ) { return arg / FLOAT_1 ; }[0m
Pred: public static float METHOD_1 ( float arg ) { throw new TYPE_1 ( ) ; } return arg / FLOAT_1 ; }[0m
[31mExample #50[0m
Src : public static long METHOD_1 ( long <unk> , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( <unk> + VAR_3 ) | ( <unk> + VAR_3 ) ; }[0m
Trg : public static long METHOD_1 ( long <unk> , long VAR_1 ) { long VAR_3 = - VAR_1 ; return ( <unk> + VAR_3 ) | ( <unk> + VAR_3 ) ; }[0m
Pred: public static long METHOD_1 ( long a , long VAR_1 ) { if ( VAR_2 ) { throw new TYPE_1 ( ) ; } long VAR_3 = - VAR_1 ; return ( [ + + VAR_3 ) ) ; }[0m
[31mExample #51[0m
Src : public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( <unk> . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Trg : public static int METHOD_1 ( int i ) { return ( i > INT_1 ) != ( <unk> . METHOD_2 ( ) ) ? INT_2 : INT_3 ; }[0m
Pred: public static int METHOD_1 ( int i ) { if ( VAR_1 ) { throw new TYPE_1 ( ) ; } return ( i > INT_1 ) != ( METHOD_2 ( ) ) ? INT_2 ; }[0m
[31mExample #52[0m
Src : public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { file = VAR_1 ; } }[0m
Trg : public void METHOD_1 ( final java.lang.String VAR_1 ) { file = VAR_1 ; }[0m
Pred: public void METHOD_1 ( final java.lang.String VAR_1 ) { if ( ( VAR_1 != null ) && ( ! ( VAR_1 . isEmpty ( ) ) ) ) { } }[0m
[31mExample #53[0m
Src : public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; <unk> . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( java.lang.String [ ] args ) { <unk> . METHOD_3 ( new TYPE_2 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.String [ ] args ) { TYPE_1 . METHOD_2 ( args [ 1 ] ) ; java.lang.System.exit ( new TYPE_2 ( ) ) ; }[0m
[31mExample #54[0m
Src : protected void METHOD_1 ( <unk> VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( this ) ; }[0m
Trg : protected void METHOD_1 ( <unk> VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.Throwable VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; METHOD_2 ( ) ; }[0m
[31mExample #55[0m
Src : public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . <unk> ( ) . equals ( VAR_2 ) ) ; }[0m
Trg : private static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { return ( VAR_1 instanceof TYPE_3 ) && ( VAR_1 . <unk> ( ) . equals ( VAR_2 ) ) ; }[0m
Pred: public static boolean METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } return ( VAR_1 instanceof TYPE_3 ) && ( ( VAR_2 ) != null ) ; }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 <unk> = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( <unk> ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 <unk> = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( <unk> ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object to ) { TYPE_1 TYPE_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 = ( ( java.lang.Integer ) ( b ) ) ; METHOD_2 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( java.lang.Object <unk> , java.lang.Object result ) { java.util.List < <unk> > VAR_1 = ( ( java.util.List < <unk> > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . <unk> ( VAR_1 ) ; }[0m
Trg : public void <unk> ( java.lang.Object <unk> , java.lang.Object result ) { java.util.List < <unk> > VAR_1 = ( ( java.util.List < <unk> > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . <unk> ( VAR_1 ) ; }[0m
Pred: public void init ( java.lang.Object obj , java.lang.Object result ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < > ) ( result ) ) ; VAR_1 . add ( 0 , null ) ; METHOD_2 ( ) . ) ( VAR_1 ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object <unk> , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Trg : public void <unk> ( java.lang.Object <unk> , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
Pred: public void delete ( java.lang.Object obj , java.lang.Object result ) { METHOD_2 ( ( ( java.util.List < TYPE_1 > ) ( result ) ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object <unk> , java.lang.Object <unk> ) { java.util.List < <unk> > VAR_1 = ( ( java.util.List < <unk> > ) ( ( ( TYPE_1 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Trg : public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { java.util.List < <unk> > VAR_1 = ( ( java.util.List < <unk> > ) ( ( ( TYPE_1 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
Pred: public void init ( java.lang.Object obj , java.lang.Object to ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < > > ) ( ( ( TYPE_1 . getSelection ( ) ) ) >= ( ) ) ) ; VAR_2 = VAR_1 ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
Pred: public void delete ( java.lang.Object target , java.lang.Object to ) { TYPE_1 . METHOD_2 ( target ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( <unk> ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( <unk> ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
Pred: public void update ( java.lang.Object target , java.lang.Object to ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.lang.Integer ) ( ) ) ) ; VAR_1 . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( <unk> ) ) ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( <unk> ) ) ) ; }[0m
Pred: public void init ( java.lang.Object target , java.lang.Object to ) { VAR_1 . METHOD_2 ( ( ( TYPE_1 ) ( to ) ) ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . assertEquals ( 0 , TYPE_2 . METHOD_3 ( ) . size ( ) ) ; }[0m
Pred: public void init ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( ( ( TYPE_2 . METHOD_3 ( ) . size ( ) ) == 0 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < <unk> > <unk> = ( ( java.util.ArrayList < <unk> > ) ( <unk> ) ) ; VAR_1 . METHOD_2 ( <unk> ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < <unk> > <unk> = ( ( java.util.ArrayList < <unk> > ) ( <unk> ) ) ; VAR_1 . METHOD_2 ( <unk> ) ; }[0m
Pred: public void init ( java.lang.Object target , java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_1 > > ( ( java.util.ArrayList < > > ) ( ) ) ; VAR_1 . METHOD_2 ( ( ) ) ; }[0m
[31mExample #9[0m
Src : boolean METHOD_1 ( ) ;[0m
Trg : boolean <unk> ( ) ;[0m
Pred: boolean isEmpty ( ) ;[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) { <unk> . <unk> result = <unk> . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
Pred: public void init ( ) { TYPE_1 . result = b . METHOD_2 ( VAR_1 , VAR_2 , true ) ; TYPE_1 . METHOD_3 ( result ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( TYPE_1 ) ( <unk> ) ) ; METHOD_2 ( ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( TYPE_1 ) ( <unk> ) ) ; METHOD_2 ( ) ; }[0m
Pred: public void update ( java.lang.Object target , java.lang.Object to ) { VAR_1 = ( ( TYPE_1 ) ( to ) ) ; METHOD_2 ( ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; <unk> VAR_2 = ( ( <unk> ) ( <unk> ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; <unk> VAR_2 = ( ( <unk> ) ( <unk> ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void init ( java.lang.Object target , java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if VAR_2 = ( ( state ) ( >= ) ) ; VAR_3 = VAR_2 ; VAR_1 . METHOD_2 ( ) ; }[0m
---------------
Class: Rename parameter
Golden example (False):
[31mExample #1[0m
Src : public native float METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , <unk> ;[0m
Trg : public native float METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , <unk> ;[0m
Pred: public native float METHOD_1 ( java.lang.Object arg ) throws TYPE_1 , TYPE_1 ;[0m
+++++++++++++++
[31mExample #1[0m
Src : public native boolean METHOD_1 ( java.lang.Object VAR_1 ) throws TYPE_1 , <unk> ;[0m
Trg : public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , <unk> ;[0m
Pred: public native boolean METHOD_1 ( java.lang.Object obj ) throws TYPE_1 , TYPE_1 ;[0m
[31mExample #2[0m
Src : public void METHOD_1 ( <unk> type ) { }[0m
Trg : public void METHOD_1 ( <unk> method ) { }[0m
Pred: public void METHOD_1 ( TYPE_1 element ) { }[0m
[31mExample #3[0m
Src : public int METHOD_1 ( int VAR_1 , <unk> . <unk> <unk> ) ;[0m
Trg : public int METHOD_1 ( int VAR_1 , <unk> . <unk> <unk> ) ;[0m
Pred: public int METHOD_1 ( int y , TYPE_1 event . to ) ;[0m
---------------
Class: Rename variable
Golden example (True):
[32mExample #1[0m
Src : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_2 = VAR_1 ; }[0m
Trg : public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
Pred: public void METHOD_1 ( java.lang.String VAR_1 ) throws TYPE_1 { this . VAR_1 = VAR_1 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( this ) ; }[0m
Trg : private native java.lang.String METHOD_1 ( ) ;[0m
Pred: private java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_1 ( VAR_1 ) ; }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Trg : public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; <unk> . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { new TYPE_1 ( STRING_1 , STRING_2 ) . METHOD_2 ( STRING_3 ) ; this . METHOD_3 ( STRING_4 ) ; } catch ( TYPE_2 VAR_1 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; <unk> ( VAR_5 ) . METHOD_4 ( <unk> ( VAR_1 ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; <unk> ( VAR_5 ) . METHOD_4 ( <unk> ( VAR_1 ) ) ; <unk> ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; synchronized ( VAR_5 ) . METHOD_4 ( ) ( this . VAR_1 ) ; assertEquals ( VAR_2 , true ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . assertEquals ( STRING_1 , new TYPE_1 ( STRING_2 , STRING_3 ) . METHOD_2 ( STRING_4 ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; <unk> ( STRING_1 , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 key = new TYPE_1 ( ) ; assertEquals ( STRING_1 , key , key . METHOD_2 ( ) , ( - INT_1 ) ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 <unk> ) { VAR_2 . <unk> ( STRING_1 ) ; } }[0m
Trg : public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_2 <unk> ) { java.lang.System.out.println ( STRING_1 ) ; } }[0m
Pred: public static void METHOD_1 ( long VAR_1 ) { try { TYPE_1 . METHOD_1 ( VAR_1 , VAR_1 ) ; } catch ( TYPE_2 t ) { VAR_2 . . ( STRING_1 ) ; } }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 <unk> ) throws java.lang.Exception { TYPE_2 <unk> = new TYPE_2 ( ) ; <unk> . METHOD_2 ( <unk> , <unk> ) ; assertEquals ( VAR_1 , <unk> . <unk> ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 <unk> ) throws java.lang.Exception { TYPE_2 <unk> = new TYPE_2 ( ) ; <unk> . METHOD_2 ( <unk> , <unk> ) ; <unk> ( VAR_1 , <unk> . <unk> ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 TYPE_1 ) throws java.lang.Exception { TYPE_2 . = new TYPE_2 ( ) ; this . METHOD_2 ( this , this ) ; assertEquals ( VAR_1 , TYPE_1 . to ( ) ) ; }[0m
[31mExample #6[0m
Src : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Trg : private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; <unk> ( ( STRING_1 + length ) , 0 , length ) ; }[0m
Pred: private static < TYPE_1 > void METHOD_1 ( TYPE_1 [ ] VAR_1 ) { int length = VAR_1 . length ; assertEquals ( STRING_1 + ( STRING_1 + length ) , 0 , length ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (True):
[32mExample #1[0m
Src : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 < TYPE_2 > ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > get ( ) { return new TYPE_1 ( key , TYPE_3 . METHOD_1 ( VAR_1 , type ) , STRING_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( ) { return <unk> ( new TYPE_2 < <unk> > ( VAR_1 , VAR_2 . <unk> class ) , false ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return <unk> ( new TYPE_2 ( VAR_1 , VAR_2 . <unk> class ) , false ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( VAR_1 ) > ( VAR_1 , VAR_2 . class ) , false ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new <unk> ( VAR_4 ) ) ; return new TYPE_1 < TYPE_2 > ( VAR_1 ) ; }[0m
Trg : public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new <unk> ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
Pred: public TYPE_1 < TYPE_2 > METHOD_1 ( ) { java.util.List < TYPE_2 > VAR_1 = METHOD_2 ( VAR_2 class , VAR_3 , new TYPE_1 ( VAR_4 ) ) ; return new TYPE_1 ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 < <unk> > ( VAR_3 , VAR_4 . <unk> class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . <unk> class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( VAR_3 , VAR_4 . class ) ; return METHOD_2 ( VAR_1 , VAR_2 , VAR_5 , new TYPE_3 ( ) ) ; }[0m
[31mExample #4[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( <unk> id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( <unk> id ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 ( ) , METHOD_4 ( id ) ) ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . METHOD_3 ( STRING_1 , new TYPE_3 < java.lang.String > ( ) , METHOD_4 ( id ) ) ) ; }[0m
[31mExample #5[0m
Src : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( TYPE_2 . <unk> ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Trg : protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . <unk> ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
Pred: protected java.util.List < TYPE_1 > METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList ( TYPE_2 . METHOD_2 ( ) . METHOD_2 ( ) ) ; TYPE_3 . METHOD_3 ( VAR_1 ) ; return VAR_1 ; }[0m
[31mExample #6[0m
Src : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , <unk> . <unk> <unk> , TYPE_1 <unk> ) { return new TYPE_2 < TYPE_1 > ( value , <unk> . toString ( ) , <unk> ) ; }[0m
Trg : public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , <unk> . <unk> <unk> , TYPE_1 <unk> ) { return new TYPE_2 ( value , <unk> . toString ( ) , <unk> ) ; }[0m
Pred: public static < TYPE_1 > TYPE_2 < TYPE_1 > METHOD_1 ( TYPE_3 value , TYPE_1 target ) TYPE_1 { return new TYPE_2 < TYPE_1 > ( value , values . toString ( ) , VAR_1 ) ; }[0m
[31mExample #7[0m
Src : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 < java.lang.String > ( ) ; value . <unk> ( VAR_1 ) ; value . <unk> ( STRING_1 ) ; return value ; }[0m
Trg : protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . <unk> ( VAR_1 ) ; value . <unk> ( STRING_1 ) ; return value ; }[0m
Pred: protected TYPE_1 < java.lang.String > METHOD_1 ( ) { TYPE_1 < java.lang.String > value = new TYPE_1 ( ) ; value . . ( VAR_1 ) ; value . ( STRING_1 ) ; return value ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . get ( STRING_1 ) ; <unk> ( VAR_2 , <unk> . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . get ( STRING_1 ) ; <unk> ( <unk> . METHOD_2 ( ) ) . <unk> ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . VAR_1 . get ( STRING_1 ) ; if ( VAR_2 . METHOD_2 ( ) , VAR_1 . METHOD_2 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . METHOD_2 ( STRING_1 ) ; <unk> ( VAR_2 , <unk> . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . METHOD_2 ( STRING_1 ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . VAR_1 . METHOD_2 ( STRING_1 ) ; if ( VAR_2 . METHOD_3 ( ) . METHOD_3 ( VAR_1 ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { <unk> ( VAR_1 , VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { <unk> ( VAR_2 . METHOD_2 ( ( ( STRING_1 + ( VAR_3 . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) . <unk> ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { VAR_1 . VAR_2 . METHOD_2 ( ( ( STRING_1 + ( ( VAR_3 . get ( ) . get ( ) ) ) + STRING_2 ) ) . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 . getName ( ) , VAR_2 , false ) ; METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { if ( VAR_1 . isEmpty ( ) . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , false ) ) ; METHOD_4 ( result ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 <unk> = VAR_2 . put ( STRING_2 , <unk> ) ; <unk> ( VAR_3 , <unk> . METHOD_2 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( ) ; VAR_1 = STRING_1 ; TYPE_2 <unk> = VAR_2 . put ( STRING_2 , <unk> ) ; <unk> ( <unk> . METHOD_2 ( ) ) . <unk> ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( STRING_2 ) ; VAR_2 . put ( STRING_2 , VAR_1 ) ; java.lang.System.out.println ( VAR_3 , TYPE_1 . METHOD_2 ( ) ) ; }[0m
[31mExample #5[0m
Src : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( <unk> ) ) ) ; }[0m
Trg : final byte METHOD_1 ( int offset ) { return VAR_1 . METHOD_1 ( ( offset + ( <unk> ) ) ) ; }[0m
Pred: final int METHOD_1 ( int offset ) { return VAR_1 . METHOD_2 ( ( offset + ( offset ) ) ) . METHOD_2 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 <unk> = METHOD_3 ( STRING_1 ) ; <unk> ( STRING_2 , <unk> . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( ) ; TYPE_1 <unk> = METHOD_3 ( STRING_1 ) ; <unk> ( <unk> . METHOD_4 ( ) ) . <unk> ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_3 ( STRING_1 ) ; METHOD_2 ( ) ; TYPE_1 . METHOD_3 ( STRING_2 , TYPE_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #7[0m
Src : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > METHOD_5 ( VAR_2 ) ) ; }[0m
Trg : public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > getValue ( VAR_2 ) ) ; }[0m
Pred: public static java.lang.String METHOD_1 ( ) { return TYPE_1 . METHOD_3 ( TYPE_2 . METHOD_3 ( ) . METHOD_4 ( ) , VAR_1 < java.lang.String > ( ) . METHOD_5 ( VAR_2 ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . delete ( METHOD_2 ( ) ) ; <unk> ( VAR_2 , <unk> . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = VAR_1 . delete ( METHOD_2 ( ) ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . VAR_1 . delete ( METHOD_2 ( ) ) ; if ( VAR_2 . METHOD_3 ( ) . METHOD_3 ( VAR_1 ) ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { <unk> ( STRING_1 , VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( STRING_2 , null , STRING_3 ) ) . <unk> ( STRING_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_2 , VAR_1 . METHOD_2 ( STRING_2 , new java.lang.String ( STRING_3 ) ) ) ; }[0m
[31mExample #10[0m
Src : public boolean METHOD_1 ( java.lang.String VAR_1 , <unk> . <unk> VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String VAR_1 , <unk> . <unk> VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( VAR_1 ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { final TYPE_1 VAR_3 = VAR_4 . get ( VAR_2 ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_2 ( VAR_1 . get ( VAR_1 ) ) ; } return false ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . <unk> ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . put ( STRING_1 , TYPE_1 . <unk> ( ) . METHOD_2 ( ) . toString ( ) ) ; VAR_1 . put ( STRING_2 , METHOD_3 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . add ( STRING_1 , TYPE_1 . METHOD_2 ( ) . toString ( ) . toString ( ) ) ; VAR_1 . add ( STRING_2 , METHOD_3 ( METHOD_3 ( ) ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> result = <unk> . METHOD_2 ( VAR_1 , VAR_2 ) ; TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . getName ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( VAR_1 , VAR_2 ) ) ) TYPE_1 . METHOD_3 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result . METHOD_4 ( ) ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Trg : public void METHOD_1 ( <unk> item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 item , TYPE_2 VAR_1 ) { TYPE_3 . METHOD_2 ( VAR_1 . METHOD_3 ( ) , item . METHOD_4 ( ) . METHOD_4 ( ) ) ; }[0m
[31mExample #14[0m
Src : public TYPE_1 . <unk> METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( <unk> . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > METHOD_4 ( VAR_2 ) ) ) { return new TYPE_1 . <unk> ( VAR_3 ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . <unk> METHOD_1 ( ) { if ( ( TYPE_2 . METHOD_2 ( <unk> . METHOD_3 ( ) ) ) && ( VAR_1 < java.lang.Boolean > getValue ( VAR_2 ) ) ) { return new TYPE_1 . <unk> ( VAR_3 ) ; } return VAR_4 ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { if ( ! ( VAR_1 . METHOD_2 ( ) . METHOD_3 ( ) ) ) && ( ! ( VAR_1 . equals ( METHOD_4 ( VAR_2 ) ) ) ) { return new TYPE_1 ( VAR_3 ) ; } return VAR_4 ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( value ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_1 ( value ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 value ) { this . VAR_1 . METHOD_2 ( this . VAR_1 ) ; }[0m
[31mExample #16[0m
Src : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . getName ( ) ; } return VAR_1 ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { if ( ( ( VAR_1 ) == null ) && ( ( METHOD_2 ( ) ) != null ) ) { VAR_1 = METHOD_2 ( ) . METHOD_1 ( ) . METHOD_1 ( ) ; } return VAR_1 ; }[0m
[31mExample #17[0m
Src : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_3 ( ) : null ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return METHOD_2 ( ) ? VAR_1 . METHOD_1 ( ) : null ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_3 ( ) . METHOD_2 ( ) . METHOD_2 ( ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < <unk> > <unk> = ( ( TYPE_2 < <unk> > ) ( <unk> ) ) ; VAR_1 . METHOD_2 ( <unk> ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < <unk> > <unk> = ( ( TYPE_2 < <unk> > ) ( <unk> ) ) ; VAR_1 . METHOD_2 ( <unk> ) ; }[0m
Pred: public void METHOD_1 ( java.lang.Object target , java.lang.Object ... ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; TYPE_2 < TYPE_1 > ( ( TYPE_2 < TYPE_2 > ) ( ) ) ; VAR_1 . METHOD_2 ( TYPE_1 . values ( ) ) ; }[0m
[31mExample #19[0m
Src : public void METHOD_1 ( ) { java.util.List < <unk> > result = <unk> . METHOD_2 ( VAR_1 . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < <unk> > result = <unk> . METHOD_2 ( VAR_1 . <unk> ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > result = METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_3 ( ) , VAR_2 , true ) ; TYPE_1 . METHOD_4 ( result ) ; }[0m
[31mExample #20[0m
Src : protected void METHOD_1 ( ) { if ( ( <unk> ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new <unk> ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( <unk> ( ) ) == null ) { return ; } super . METHOD_1 ( VAR_1 , new <unk> ( <unk> ( ) . getId ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { return ; } super . METHOD_1 ( VAR_1 , new java.lang.Thread ( METHOD_2 ( ) . getId ( ) ) ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 <unk> ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( <unk> ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , <unk> ) ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 <unk> ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( <unk> ( ) . <unk> ( ) ) ; return METHOD_5 ( VAR_2 , params , <unk> ) ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 params = new TYPE_3 ( true ) ; params . METHOD_2 ( VAR_1 ) ; params . METHOD_3 ( METHOD_3 ( ) . METHOD_4 ( ) ) ; return METHOD_5 ( VAR_2 , params , false ) ; }[0m
[31mExample #22[0m
Src : public int METHOD_1 ( <unk> VAR_1 , <unk> VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) ) ; }[0m
Trg : public int METHOD_1 ( <unk> VAR_1 , <unk> VAR_2 ) { return VAR_1 . getName ( ) . METHOD_3 ( VAR_2 . getName ( ) ) ; }[0m
Pred: public int METHOD_1 ( int VAR_1 , int VAR_2 ) { return VAR_1 . METHOD_2 ( ) . METHOD_3 ( VAR_2 . METHOD_2 ( ) . METHOD_2 ( ) ) ; }[0m
[31mExample #23[0m
Src : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > METHOD_2 ( VAR_2 ) ; }[0m
Trg : protected int METHOD_1 ( ) { return VAR_1 < java.lang.Integer > getValue ( VAR_2 ) ; }[0m
Pred: protected int METHOD_1 ( ) { return new java.util.ArrayList < > ( ) . METHOD_2 ( VAR_2 ) ; }[0m
[31mExample #24[0m
Src : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . <unk> VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 , parameters ) ; }[0m
Trg : protected TYPE_1 < ? > METHOD_1 ( TYPE_2 . <unk> VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_1 ( VAR_1 , parameters ) ; }[0m
Pred: protected TYPE_1 < ? > METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 parameters ) { return TYPE_4 . METHOD_2 ( VAR_1 . intValue ( ) , parameters ) ; }[0m
[31mExample #25[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; <unk> ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . <unk> ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; <unk> ( VAR_1 . getValue ( VAR_2 , VAR_3 ) ) . <unk> ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; while ( VAR_1 . METHOD_3 ( VAR_2 , VAR_3 ) ) . METHOD_2 ( ) . start ( VAR_4 ) ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #26[0m
Src : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.String METHOD_1 ( ) { return VAR_1 . get ( ) . METHOD_2 ( ) ; }[0m
[31mExample #27[0m
Src : protected java.lang.String METHOD_1 ( <unk> <unk> ) { return <unk> . METHOD_2 ( ) ; }[0m
Trg : protected java.lang.String METHOD_1 ( <unk> <unk> ) { return <unk> . getName ( ) ; }[0m
Pred: protected java.lang.String METHOD_1 ( ) { return this . METHOD_2 ( ) . intValue ( ) ; }[0m
[31mExample #28[0m
Src : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public java.lang.Boolean METHOD_1 ( ) { return this . VAR_1 . METHOD_2 ( ) . METHOD_2 ( ) ; }[0m
[31mExample #29[0m
Src : public void METHOD_1 ( java.lang.String <unk> ) { METHOD_2 ( ) . METHOD_3 ( <unk> ) ; }[0m
Trg : public void METHOD_1 ( java.lang.String <unk> ) { METHOD_2 ( ) . METHOD_1 ( <unk> ) ; }[0m
Pred: public void METHOD_1 ( java.lang.String event ) { METHOD_3 ( ) . METHOD_2 ( ) . METHOD_3 ( ) ; }[0m
[31mExample #30[0m
Src : public boolean METHOD_1 ( <unk> VAR_1 ) { return <unk> . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public boolean METHOD_1 ( <unk> VAR_1 ) { return <unk> . METHOD_2 ( ) . equals ( VAR_1 . getName ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.Thread VAR_1 ) { return ! ( VAR_1 . METHOD_2 ( ) . equals ( VAR_1 . METHOD_3 ( ) ) ) ; }[0m
[31mExample #31[0m
Src : public void METHOD_1 ( ) { <unk> . METHOD_2 ( VAR_1 ) ; <unk> result = <unk> . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> . METHOD_2 ( VAR_1 ) ; <unk> result = <unk> . METHOD_3 ( VAR_1 . getName ( ) ) ; TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.lang.Thread . METHOD_2 ( VAR_1 ) ; if ( ! ( VAR_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ) ) TYPE_1 . METHOD_5 ( result ) ; TYPE_1 . assertEquals ( VAR_1 , result ) ; }[0m
---------------
Class: Replace statement
Golden example (True):
[32mExample #1[0m
Src : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( java.lang.Integer . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
Pred: public java.lang.String METHOD_1 ( int VAR_1 ) { return VAR_2 . get ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . <unk> ( ) ) . METHOD_3 ( ) ; }[0m
Trg : public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; super . METHOD_1 ( VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( final TYPE_1 VAR_1 ) { METHOD_2 ( true ) ; new TYPE_2 ( VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #2[0m
Src : public static long METHOD_1 ( ) { long VAR_1 = <unk> . METHOD_2 ( INT_1 ) ; int VAR_2 = <unk> . METHOD_3 ( <unk> ) ; return VAR_1 & VAR_2 ; }[0m
Trg : public static long METHOD_1 ( ) { long VAR_1 = <unk> ; int VAR_2 = <unk> ; return VAR_1 & VAR_2 ; }[0m
Pred: public static long METHOD_1 ( ) { long VAR_1 = TYPE_1 . METHOD_2 ( INT_1 ) ; int VAR_2 = VAR_2 ; return VAR_1 & VAR_2 ; }[0m
[31mExample #3[0m
Src : public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( TYPE_1 . equals ( METHOD_3 ( ) ) ) ) ; }[0m
Trg : public boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) ) ; }[0m
Pred: public boolean METHOD_1 ( ) { return ( ! ( METHOD_2 ( ) ) ) && ( ! ( METHOD_3 ( ) ) ) ; }[0m
---------------
Class: unclear
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { <unk> = METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( <unk> . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( <unk> . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_3 ( TYPE_1 . METHOD_4 ( ) , TYPE_2 . METHOD_5 ( VAR_2 , STRING_1 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
Trg : protected native byte METHOD_1 ( ) throws java.io.IOException ;[0m
Pred: protected byte METHOD_1 ( ) throws java.io.IOException { return ( ( byte ) ( METHOD_2 ( ) ) ) ; }[0m
[31mExample #2[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( VAR_2 ) . METHOD_2 ( VAR_1 , VAR_3 . <unk> ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return VAR_2 . METHOD_2 ( VAR_1 , VAR_3 . <unk> ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 ) { return new TYPE_2 ( ) . METHOD_2 ( VAR_1 , VAR_3 . ) ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
Trg : public TYPE_1 < java.lang.String > METHOD_1 ( ) { return METHOD_2 ( ) ; }[0m
Pred: public TYPE_1 < java.lang.String > METHOD_1 ( ) { METHOD_2 ( ) ; }[0m
---------------
================
Duration: 0:04:25.939296

Start conducting one shot learning experiment for Tufano Labeled 50 100 Code Changes...
Top-1 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 0 / 56 = 0.0
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 0 / 56 = 0.0
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 0 / 56 = 0.0
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 0 / 56 = 0.0
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for same edit representations: 1 / 56 = 0.017857142857142856

Top-1 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 0 / 188 = 0.0
Top-3 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 0 / 188 = 0.0
Top-5 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 2 / 188 = 0.010638297872340425
Top-10 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 2 / 188 = 0.010638297872340425
Top-50 accuracy on Tufano Labeled 50 100 Code Changes for other edit representations: 2 / 188 = 0.010638297872340425
================
Correct Examples
================
================
Incorrect Examples
Class: Add braces to if statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { <unk> ( TYPE_2 . <unk> , STRING_1 ) ; return VAR_2 ; } TYPE_2 <unk> = METHOD_3 ( ) ; if ( <unk> == null ) return VAR_2 ; return <unk> . METHOD_1 ( ) ; }[0m
Trg : public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { <unk> ( TYPE_2 . <unk> , STRING_1 ) ; return VAR_2 ; } TYPE_2 <unk> = METHOD_3 ( ) ; if ( <unk> == null ) { return VAR_2 ; } return <unk> . METHOD_1 ( ) ; }[0m
Pred: public int METHOD_1 ( ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_1 ) ) ) { if ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; return VAR_2 ; } catch ( java.lang.NullPointerException == null ) { return VAR_2 ; } return VAR_2 . METHOD_1 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { <unk> ( TYPE_2 . <unk> , STRING_1 ) ; return false ; } TYPE_2 <unk> = METHOD_3 ( ) ; if ( <unk> == null ) return false ; return <unk> . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Trg : public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { <unk> ( TYPE_2 . <unk> , STRING_1 ) ; return false ; } TYPE_2 <unk> = METHOD_3 ( ) ; if ( <unk> == null ) { return false ; } return <unk> . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
Pred: public boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { if ( ! ( TYPE_1 . METHOD_2 ( ) ) ) { if ( TYPE_2 . METHOD_2 ( ) ) ; return false ; } catch ( java.lang.NullPointerException == null ) { return false ; } return super . METHOD_1 ( VAR_1 , VAR_2 ) ; }[0m
[31mExample #2[0m
Src : private synchronized void METHOD_1 ( byte [ ] <unk> , boolean VAR_1 ) { if ( VAR_2 ) <unk> ( VAR_3 . <unk> , ( STRING_1 + VAR_1 ) ) ; <unk> msg = VAR_4 . METHOD_2 ( VAR_5 ) ; <unk> = <unk> ; <unk> = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Trg : private synchronized void METHOD_1 ( byte [ ] <unk> , boolean VAR_1 ) { if ( VAR_2 ) { <unk> ( VAR_3 . <unk> , ( STRING_1 + VAR_1 ) ) ; } <unk> msg = VAR_4 . METHOD_2 ( VAR_5 ) ; <unk> = <unk> ; <unk> = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; }[0m
Pred: private synchronized void METHOD_1 ( byte [ ] VAR_1 , boolean VAR_1 ) { if ( VAR_2 . equals ( STRING_1 + VAR_1 ) ) { try { msg = VAR_4 . METHOD_2 ( VAR_5 ) ; } else java.lang.NullPointerException = ( VAR_1 ) ? 1 : 0 ; VAR_4 . METHOD_3 ( msg ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 <unk> , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( <unk> ) ) ; TYPE_4 <unk> = METHOD_2 ( ) ; if ( <unk> == null ) return ; <unk> . METHOD_1 ( <unk> , VAR_1 , args ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 <unk> , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( <unk> ) ) ; TYPE_4 <unk> = METHOD_2 ( ) ; if ( <unk> == null ) { return ; } <unk> . METHOD_1 ( <unk> , VAR_1 , args ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 TYPE_1 , java.lang.String [ ] args ) { TYPE_2 VAR_1 = new TYPE_2 ( new TYPE_3 ( ) ) ; TYPE_4 TYPE_4 = METHOD_2 ( ) ; if ( == == null ) { return ; } finally . METHOD_1 ( TYPE_1 , VAR_1 , args ) ; }[0m
---------------
Class: Add parameter in the method/constructor invocation
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object <unk> ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( <unk> ) ; <unk> ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . <unk> ( VAR_4 class ) ) ) . <unk> ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object <unk> ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( <unk> ) ; <unk> ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . <unk> ( ) ) ) . <unk> ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object TYPE_1 ) { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( ) ; if ( VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) , TYPE_3 . ( VAR_4 class ) ) ) . ( VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 <unk> = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return <unk> ; } <unk> ( TYPE_1 . <unk> , ( STRING_1 + name ) ) ; return null ; }[0m
Trg : TYPE_1 < TYPE_2 > . VAR_1 METHOD_1 ( java.lang.String name ) { synchronized ( VAR_2 ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( i . METHOD_3 ( ) ) { TYPE_1 < TYPE_2 > . VAR_1 <unk> = i . METHOD_4 ( ) ; if ( VAR_3 . equals ( name ) ) return <unk> ; } } <unk> ( TYPE_1 . <unk> , ( STRING_1 + name ) ) ; return null ; }[0m
Pred: TYPE_1 < TYPE_2 > . METHOD_1 ( java.lang.String name ) { TYPE_3 < TYPE_1 < TYPE_2 > . VAR_1 > i = VAR_2 . METHOD_2 ( ) ; while ( VAR_1 . METHOD_4 ( ) ) return ; } else TYPE_1 ( TYPE_1 . , ( STRING_1 + name ) ) ; return null ; }[0m
[31mExample #2[0m
Src : public java.lang.String METHOD_1 ( int <unk> , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( <unk> ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Trg : public java.lang.String METHOD_1 ( int <unk> , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , <unk> , VAR_1 , STRING_1 ) ) ) { return null ; } final TYPE_2 VAR_3 = METHOD_3 ( <unk> ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
Pred: public java.lang.String METHOD_1 ( int VAR_1 , java.lang.String VAR_1 ) { if ( ! ( TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } if ( VAR_3 != null ) { return VAR_3 . METHOD_4 ( ) ; } else { return null ; } }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( <unk> VAR_1 ) { <unk> ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . <unk> ( VAR_3 ) ; <unk> ( VAR_2 . METHOD_4 ( TYPE_1 . <unk> ( VAR_4 . <unk> class ) ) ) . <unk> ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Trg : private void METHOD_1 ( <unk> VAR_1 ) { <unk> ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . <unk> ( VAR_3 ) ; <unk> ( VAR_2 . METHOD_4 ( TYPE_1 . <unk> ( ) ) ) . <unk> ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
Pred: private void METHOD_1 ( ) VAR_1 { if ( VAR_2 . METHOD_2 ( TYPE_1 . METHOD_3 ( VAR_1 ) ) ) . ( VAR_3 ) ; ( VAR_2 . METHOD_4 ( VAR_4 . getSelection ( ) ) ) ) . ( TYPE_2 . METHOD_5 ( VAR_1 ) ) ; }[0m
[31mExample #4[0m
Src : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . <unk> ( ) . <unk> ( ) , METHOD_2 ( ) . <unk> ( ) . METHOD_3 ( ) , METHOD_2 ( ) . <unk> ( ) . METHOD_4 ( ) , <unk> ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . <unk> ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . <unk> ( ) . METHOD_8 ( ) , null ) ; }[0m
Trg : protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . <unk> ( ) . <unk> ( ) , METHOD_2 ( ) . <unk> ( ) . METHOD_3 ( ) , METHOD_2 ( ) . <unk> ( ) . METHOD_4 ( ) , <unk> ( ) . METHOD_5 ( ) . get ( METHOD_2 ( ) . <unk> ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . <unk> ( ) . METHOD_8 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( ) { return new TYPE_2 ( METHOD_2 ( ) . getId ( ) , METHOD_2 ( ) . METHOD_2 ( ) , ( ( ) . METHOD_5 ( ) . METHOD_6 ( ) ) . METHOD_7 ( ) , METHOD_2 ( ) . METHOD_7 ( ) , null ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; <unk> . METHOD_1 ( ) ; <unk> . METHOD_5 ( VAR_2 , <unk> . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . <unk> ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( <unk> . METHOD_8 ( ) , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , null ) ; <unk> . METHOD_1 ( ) ; <unk> . METHOD_5 ( VAR_2 , <unk> . METHOD_6 ( 1 ) ) . METHOD_7 ( TYPE_3 . <unk> ( VAR_3 class ) ) ; TYPE_4 . assertEquals ( <unk> . METHOD_8 ( ) , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 = TYPE_1 . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( ) ; METHOD_4 ( true , VAR_1 . METHOD_6 ( ) ) ; TYPE_4 . assertEquals ( TYPE_1 . METHOD_8 ( ) , VAR_4 ) ; }[0m
[31mExample #6[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; try { return VAR_6 . METHOD_3 ( METHOD_4 ( this , VAR_1 , true ) , VAR_2 , VAR_3 ) ; } finally { TYPE_2 . METHOD_5 ( VAR_5 ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , boolean VAR_3 ) { synchronized ( VAR_4 ) { long VAR_5 = TYPE_2 . METHOD_2 ( ) ; return METHOD_3 ( METHOD_4 ( this , VAR_1 ) , VAR_2 , VAR_3 ) ; } finally { METHOD_5 ( VAR_5 ) ; } }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; TYPE_3 . METHOD_5 ( <unk> . <unk> ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) , null ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( <unk> . <unk> ( ) ) ; TYPE_3 . METHOD_5 ( <unk> . <unk> ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 = METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 ) ) ) ; METHOD_3 ( VAR_2 ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ; }[0m
[31mExample #8[0m
Src : private void METHOD_1 ( TYPE_1 <unk> , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 <unk> = TYPE_5 . METHOD_2 ( <unk> , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 <unk> = new TYPE_6 ( <unk> , VAR_4 ) ; VAR_5 . METHOD_4 ( <unk> . METHOD_5 ( ) , <unk> ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 <unk> , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 <unk> = TYPE_5 . METHOD_2 ( <unk> , VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) ; TYPE_6 <unk> = new TYPE_6 ( <unk> , VAR_4 , 0 ) ; VAR_5 . METHOD_4 ( <unk> . METHOD_5 ( ) , <unk> ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 TYPE_1 , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 . TYPE_5 TYPE_5 ( METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) . METHOD_3 ( ) , VAR_4 ) ; VAR_5 . METHOD_4 ( . METHOD_5 ( ) , VAR_1 ) ; }[0m
[31mExample #9[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int <unk> ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( <unk> ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int <unk> ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , <unk> , VAR_1 , STRING_1 ) ) ) { return null ; } TYPE_3 VAR_3 = METHOD_3 ( <unk> ) ; if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.lang.String VAR_1 , int VAR_2 ) { if ( ! ( TYPE_2 . METHOD_2 ( VAR_2 , VAR_1 , STRING_1 ) ) ) { return null ; } if ( VAR_3 != null ) { return VAR_3 . METHOD_1 ( ) ; } return null ; }[0m
---------------
Class: Add statement
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) . <unk> ( new <unk> ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = <unk> . METHOD_3 ( STRING_2 ) ; if ( node != null ) { if ( TYPE_3 . equals ( <unk> ( VAR_2 ) ) ) { TYPE_3 = <unk> ( VAR_3 ) ; } VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) . <unk> ( new <unk> ( TYPE_2 . get ( STRING_1 ) . getValue ( ) ) ) ; TYPE_1 node = <unk> . METHOD_3 ( STRING_2 ) ; if ( node != null ) { VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 TYPE_1 ) { VAR_1 . METHOD_2 ( ) . METHOD_3 ( STRING_2 ) ; VAR_1 . METHOD_2 ( ) . METHOD_4 ( VAR_4 . METHOD_5 ( TYPE_3 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void <unk> ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 <unk> = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , <unk> ) ; <unk> . METHOD_4 ( VAR_4 , VAR_5 ) ; <unk> . METHOD_5 ( VAR_5 , VAR_5 ) ; <unk> . METHOD_6 ( VAR_5 , VAR_5 ) ; <unk> . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Trg : public void <unk> ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 <unk> = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , <unk> ) ; <unk> . METHOD_4 ( VAR_4 , VAR_5 ) ; <unk> . METHOD_5 ( VAR_5 , VAR_5 ) ; <unk> . METHOD_6 ( VAR_5 , VAR_5 ) ; <unk> . METHOD_7 ( VAR_5 ) ; VAR_1 . METHOD_8 ( ) ; METHOD_9 ( ) ; <unk> . METHOD_10 ( ) ; VAR_1 . METHOD_10 ( ) ; }[0m
Pred: public void void ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( VAR_1 , VAR_5 ) ; VAR_1 . METHOD_8 ( VAR_5 ) ; }[0m
---------------
Class: Add/Remove parameter
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 key , int VAR_1 ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_3 ( VAR_2 ) ) ; java.lang.String VAR_4 = key . METHOD_4 ( 0 , VAR_3 ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; if ( ( VAR_5 ) == null ) { return null ; } return VAR_6 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 key ) { VAR_2 = METHOD_2 ( key ) ; int VAR_3 = ( key . length ( ) ) - ( TYPE_3 . METHOD_4 ( 0 ) ) ; VAR_5 = TYPE_4 . METHOD_5 ( VAR_4 ) ; else { return null ; } return VAR_6 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void <unk> ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 <unk> = new TYPE_2 ( VAR_1 , VAR_3 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( <unk> ) ; <unk> . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Trg : public void <unk> ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 <unk> = new TYPE_2 ( VAR_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( <unk> ) ; <unk> . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
Pred: public void init ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_1 ( VAR_2 ) ; TYPE_2 . METHOD_2 ( VAR_5 , VAR_4 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( ) ; VAR_1 . METHOD_5 ( ) ; METHOD_6 ( ) ; VAR_1 . METHOD_7 ( ) ; }[0m
[31mExample #2[0m
Src : public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( <unk> ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . <unk> ( VAR_1 ) ; METHOD_1 ( ) . <unk> ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Trg : public void <unk> ( java.lang.Object <unk> ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < TYPE_1 > ) ( <unk> ) ) ; VAR_1 = ( VAR_1 != null ) ? VAR_1 : new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . <unk> ( VAR_1 ) ; METHOD_1 ( ) . <unk> ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
Pred: public void init ( java.lang.Object ... , java.lang.Object ) { java.util.List < TYPE_1 > VAR_1 = ( ( java.util.List < null ) ) ; VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; METHOD_1 ( ) . METHOD_1 ( ) . METHOD_1 ( TYPE_2 . METHOD_2 ( VAR_1 ) ) ; }[0m
---------------
Class: Broad method visibility
Golden example (False):
[31mExample #1[0m
Src : private static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . <unk> > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . <unk> <unk> : VAR_1 ) { if ( ( <unk> . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( <unk> . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( <unk> ) ) ) ; } } } return VAR_3 ; }[0m
Trg : public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 . <unk> > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList < > ( ) ; for ( TYPE_3 . <unk> <unk> : VAR_1 ) { if ( ( <unk> . METHOD_2 ( ) ) == ( VAR_4 ) ) { if ( ( ! VAR_2 ) || ( <unk> . METHOD_3 ( ) ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( <unk> ) ) ) ; } } } return VAR_3 ; }[0m
Pred: public static java.util.List < TYPE_1 > METHOD_1 ( TYPE_2 < ? extends TYPE_3 > > VAR_1 , boolean VAR_2 ) { java.util.List < TYPE_1 > VAR_3 = new java.util.ArrayList > ( VAR_1 . METHOD_2 ( ) ) == ( VAR_4 ) ) { VAR_3 . add ( ( ( TYPE_1 ) ( ) ) ) ; } } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < <unk> > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( <unk> ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Trg : protected java.util.List < <unk> > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( <unk> ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : private static boolean METHOD_1 ( TYPE_1 node , TYPE_2 <unk> ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , <unk> ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , <unk> ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 <unk> ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , <unk> ) ) ) { return false ; } for ( int i = 0 ; i < ( VAR_1 . size ( ) ) ; i ++ ) { if ( ! ( TYPE_3 . METHOD_1 ( VAR_1 . get ( i ) , <unk> ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 node , TYPE_2 state ) throws java.io.IOException { if ( ! ( TYPE_3 . METHOD_2 ( node , false ) ) ) { for ( int i = 0 ; i < ( VAR_1 . get ( i ) , false ) ) { return false ; } } return true ; }[0m
[31mExample #3[0m
Src : private boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( <unk> ( ) . METHOD_4 ( ) ) ) . <unk> ( ) ) ) ; if ( VAR_1 ) { <unk> ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( <unk> ( ) . METHOD_4 ( ) ) ) . <unk> ( ) ) ) ; if ( VAR_1 ) { <unk> ( VAR_3 ) ; } return ! VAR_1 ; }[0m
Pred: public boolean METHOD_1 ( ) { boolean VAR_1 = ( ( java.lang.Boolean ) ( METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_1 ( TYPE_1 ( ) . METHOD_4 ( ) ) ) . ) ( ) ) { if ( VAR_3 ) ; } return ! VAR_1 ; }[0m
[31mExample #4[0m
Src : private static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Trg : public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { return false ; } for ( int i = 0 ; i < length ; i ++ ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
Pred: public static boolean METHOD_1 ( java.lang.String VAR_1 , char [ ] VAR_2 ) { int length = VAR_1 . length ( ) ; if ( ( VAR_2 . length ) != length ) { if ( ( VAR_2 [ i ] ) != ( VAR_1 . METHOD_2 ( i ) ) ) { return false ; } } return true ; }[0m
---------------
Class: Change comparison operator (e.g. >) in condition
Golden example (False):
[31mExample #1[0m
Src : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i <= ( ( VAR_3 ) - 1 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Trg : private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i < ( VAR_3 ) ; i ++ ) { VAR_2 [ i ] = TYPE_2 . METHOD_2 ( ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ) ; } return VAR_2 ; }[0m
Pred: private static TYPE_1 [ ] METHOD_1 ( java.lang.String VAR_1 ) { TYPE_1 [ ] VAR_2 = new TYPE_1 [ VAR_3 ] ; for ( int i = 0 ; i ++ ) { VAR_2 [ ( ( VAR_1 + ( i + 1 ) ) + STRING_1 ) ; } return VAR_2 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 >= VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Trg : private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { throw new TYPE_2 ( ( ( ( STRING_1 + VAR_3 ) + STRING_2 ) + VAR_2 ) ) ; } long VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; if ( ( VAR_3 + VAR_4 ) != VAR_2 ) { throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; } return VAR_3 ; }[0m
Pred: private static long METHOD_1 ( TYPE_1 VAR_1 , long VAR_2 ) throws TYPE_2 { long VAR_3 = TYPE_3 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 > VAR_2 ) { } VAR_4 = TYPE_3 . METHOD_3 ( VAR_1 ) ; throw new TYPE_2 ( ( STRING_3 + STRING_4 ) ) ; }[0m
---------------
Class: Change exception type in catch clause
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( java.lang.Throwable <unk> ) { throw METHOD_5 ( x , <unk> ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_4 = METHOD_3 ( VAR_5 ) ; TYPE_4 VAR_6 = METHOD_3 ( VAR_7 ) ; METHOD_4 ( new TYPE_5 ( info , VAR_6 , VAR_4 , VAR_2 ) ) ; } catch ( <unk> <unk> ) { throw METHOD_5 ( x , <unk> ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { TYPE_3 info = METHOD_2 ( x ) ; TYPE_4 VAR_2 = METHOD_3 ( VAR_3 ) ; TYPE_4 VAR_6 = METHOD_3 ( this , VAR_6 , VAR_4 , VAR_2 ) ; } catch ( java.lang.Throwable t ) { throw METHOD_5 ( x , to ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable <unk> ) { throw METHOD_7 ( x , <unk> ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( <unk> <unk> ) { throw METHOD_7 ( x , <unk> ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 x , TYPE_2 VAR_1 ) { try { assert METHOD_2 ( ) . get ( VAR_2 ) . METHOD_3 ( VAR_3 . type ) ; METHOD_4 ( METHOD_5 ( METHOD_6 ( x ) ) ) ; } catch ( java.lang.Throwable t ) { throw METHOD_7 ( x , event ) ; } }[0m
---------------
Class: Change parameter type
Golden example (False):
[31mExample #1[0m
Src : static boolean METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } TYPE_1 VAR_5 = VAR_4 . METHOD_2 ( VAR_2 ) ; if ( VAR_5 == null ) { return true ; } VAR_6 . METHOD_3 ( ) ; VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return true ; } catch ( VAR_5 == null ) { return VAR_6 ; } VAR_6 . METHOD_4 ( VAR_7 ) ; return true ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . <unk> ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( new TYPE_3 . <unk> ( VAR_7 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) ) , false ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_6 . append ( STRING_3 , VAR_8 , VAR_2 . METHOD_3 ( ) , VAR_2 . METHOD_4 ( ) , false ) ; }[0m
[31mExample #2[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int <unk> , int <unk> , int [ ] <unk> , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , <unk> , <unk> , <unk> , VAR_5 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int <unk> , int <unk> , int [ ] <unk> , int VAR_5 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , <unk> , <unk> , <unk> , VAR_5 ) ; }[0m
Pred: synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int [ ] [ ] , int VAR_5 ) { METHOD_3 ( false , id , VAR_2 , VAR_3 , VAR_4 , VAR_4 , false , event , VAR_5 ) ; }[0m
[31mExample #3[0m
Src : static boolean METHOD_1 ( int VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 <unk> = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( <unk> == null ) { return false ; } <unk> . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Trg : static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 <unk> = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( <unk> == null ) { return false ; } <unk> . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
Pred: static boolean METHOD_1 ( long VAR_1 , float VAR_2 , float VAR_3 ) { TYPE_1 event = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( false == null ) { return false ; } id . METHOD_3 ( TYPE_1 . METHOD_4 ( VAR_2 , VAR_3 ) ) ; return true ; }[0m
[31mExample #4[0m
Src : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new <unk> ( STRING_1 ) ; } int VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 <unk> = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( <unk> . METHOD_4 ( ) ) ; return <unk> ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Trg : public final TYPE_1 METHOD_1 ( int VAR_1 , java.lang.String VAR_2 , int VAR_3 ) throws java.io.IOException { synchronized ( this ) { if ( ! ( VAR_4 ) ) { throw new <unk> ( STRING_1 ) ; } long VAR_5 = METHOD_2 ( VAR_1 , VAR_2 , VAR_3 ) ; if ( VAR_5 != 0 ) { TYPE_2 <unk> = new TYPE_2 ( VAR_5 ) ; METHOD_3 ( <unk> . METHOD_4 ( ) ) ; return <unk> ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
Pred: public final TYPE_1 METHOD_1 ( long VAR_1 , java.lang.String VAR_2 , long VAR_3 ) throws java.io.IOException { if ( ! ( VAR_4 ) ) { throw new java.lang.NullPointerException ( STRING_1 , VAR_2 ) ; if ( VAR_5 != 0 ) { return false ; } } throw new TYPE_3 ( ( STRING_2 + VAR_2 ) ) ; }[0m
[31mExample #5[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Trg : public TYPE_1 METHOD_1 ( java.util.Map VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { java.util.Map < java.lang.String , java.lang.Object > VAR_2 = VAR_3 . METHOD_1 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_1 VAR_4 = new TYPE_1 ( VAR_2 ) ; return VAR_4 ; } catch ( TYPE_3 VAR_5 ) { throw new TYPE_4 ( VAR_5 ) ; } }[0m
[31mExample #6[0m
Src : private <unk> METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 <unk> : VAR_2 ) { if ( METHOD_4 ( <unk> . METHOD_5 ( ) ) ) { return <unk> . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Trg : private <unk> METHOD_1 ( <unk> VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { for ( TYPE_2 <unk> : VAR_2 ) { if ( METHOD_4 ( <unk> . METHOD_5 ( ) ) ) { return <unk> . METHOD_5 ( ) ; } } } return VAR_4 ; }[0m
Pred: private java.lang.String METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < TYPE_2 > VAR_2 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_1 , VAR_3 ) ; if ( VAR_2 != null ) { if ( METHOD_4 ( event . METHOD_5 ( ) ) ) { return t . METHOD_5 ( ) ; } } return VAR_4 ; }[0m
[31mExample #7[0m
Src : static void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Trg : static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , int VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
Pred: static void METHOD_1 ( long VAR_1 , TYPE_1 VAR_2 , long VAR_3 ) { TYPE_2 VAR_4 = VAR_5 . METHOD_2 ( VAR_1 ) ; if ( VAR_4 == null ) { return ; } VAR_4 . METHOD_3 ( VAR_6 , VAR_7 , VAR_8 , VAR_9 , VAR_3 ) ; }[0m
[31mExample #8[0m
Src : synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int <unk> , int <unk> , int VAR_5 , int [ ] <unk> , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , <unk> , <unk> , VAR_5 , <unk> , VAR_6 ) ; }[0m
Trg : synchronized void METHOD_1 ( long id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int <unk> , int <unk> , int VAR_5 , byte [ ] <unk> , int VAR_6 ) { METHOD_2 ( ) ; METHOD_3 ( <unk> , id , VAR_1 , VAR_2 , VAR_3 , VAR_4 , <unk> , <unk> , VAR_5 , <unk> , VAR_6 ) ; }[0m
Pred: synchronized void METHOD_1 ( int id , int VAR_1 , int VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int [ ] VAR_2 , int VAR_6 ) { METHOD_2 ( false , id , VAR_2 , VAR_3 , VAR_4 , false , VAR_5 , VAR_5 , VAR_6 , VAR_6 ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( int <unk> , int VAR_1 , int c , TYPE_1 VAR_2 , TYPE_2 <unk> , TYPE_3 <unk> ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( <unk> , VAR_1 , c , VAR_2 , <unk> , <unk> ) ; }[0m
Trg : public void METHOD_1 ( long <unk> , long VAR_1 , long c , TYPE_1 VAR_2 , TYPE_2 <unk> , TYPE_3 <unk> ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 ) ; assertEquals ( STRING_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , 0 , ( ( TYPE_4 . METHOD_3 ( VAR_1 ) ) & ( VAR_4 ) ) ) ; super . METHOD_1 ( <unk> , VAR_1 , c , VAR_2 , <unk> , <unk> ) ; }[0m
Pred: public void METHOD_1 ( int id , int c , long c , TYPE_1 VAR_2 , TYPE_2 event ) throws java.lang.Exception { byte [ ] VAR_3 = TYPE_4 . METHOD_2 ( VAR_1 , new java.lang.String ( VAR_3 ) ) ; assertEquals ( STRING_2 , c , VAR_2 , VAR_2 , to , false ) ; }[0m
[31mExample #10[0m
Src : static int METHOD_1 ( int VAR_1 , int VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Trg : static long METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
Pred: static int METHOD_1 ( long VAR_1 , long VAR_2 ) { TYPE_1 VAR_3 = VAR_4 . METHOD_2 ( VAR_1 ) ; if ( VAR_3 == null ) { return 0 ; } VAR_5 = TYPE_2 . METHOD_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; return VAR_2 ; }[0m
---------------
Class: Change parameter value of invoked method
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( TYPE_1 . <unk> <unk> , int VAR_1 ) { METHOD_2 ( <unk> . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ <unk> ] . toString ( ) , <unk> . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( <unk> , VAR_1 ) ; }[0m
Trg : protected void METHOD_1 ( TYPE_1 . <unk> <unk> , int VAR_1 ) { METHOD_2 ( <unk> . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) , <unk> . METHOD_3 ( ) . getId ( ) ) ; METHOD_4 ( <unk> , VAR_1 ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 . getSelection VAR_1 , int VAR_1 ) { METHOD_2 ( event . METHOD_3 ( ) . getId ( ) ) ; assertEquals ( VAR_2 [ 1 ] . toString ( ) . getId ( ) ) ; METHOD_4 ( 1 , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : private java.util.List < <unk> > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( <unk> ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
Trg : private java.util.List < <unk> > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( <unk> ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , true , true ) ; } return VAR_1 ; }[0m
Pred: private java.util.List < TYPE_1 > METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { VAR_1 = TYPE_1 . METHOD_2 ( METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( TYPE_2 . METHOD_5 ( ) ) , false , true ) ; } return VAR_1 ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new <unk> ( ) , true ) ; <unk> ( VAR_1 . METHOD_3 ( TYPE_1 . <unk> ( VAR_2 . <unk> class ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . <unk> ( false ) ; TYPE_2 . METHOD_5 ( <unk> . <unk> ( ) ) ; TYPE_2 . METHOD_6 ( <unk> . <unk> ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new <unk> ( ) , true ) ; <unk> ( VAR_1 . METHOD_3 ( TYPE_1 . <unk> ( ) , TYPE_1 . METHOD_4 ( VAR_3 ) ) ) . <unk> ( false ) ; TYPE_2 . METHOD_5 ( <unk> . <unk> ( ) ) ; TYPE_2 . METHOD_6 ( <unk> . <unk> ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( true , new java.lang.Thread ( ) , true ) ; ; ( VAR_1 . METHOD_3 ( TYPE_1 . getSelection ( VAR_3 ) ) ) . TYPE_2 ( false . METHOD_7 ( ) . METHOD_8 ( ) . METHOD_8 ( TYPE_3 . toString ( ) ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { VAR_1 = <unk> . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; <unk> ( VAR_3 ) . <unk> ( VAR_1 ) . METHOD_3 ( ) ; <unk> ( VAR_4 ) . <unk> ( VAR_1 ) . METHOD_4 ( ) ; <unk> ( VAR_5 ) . <unk> ( VAR_1 ) . METHOD_5 ( ) ; <unk> . METHOD_6 ( ) . <unk> ( VAR_1 ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 = <unk> . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; <unk> ( VAR_3 ) . <unk> ( VAR_1 ) . METHOD_3 ( ) ; <unk> ( VAR_4 ) . <unk> ( VAR_1 ) . METHOD_4 ( ) ; <unk> ( VAR_5 ) . <unk> ( VAR_1 ) . METHOD_5 ( ) ; <unk> . METHOD_6 ( ) . <unk> ( VAR_1 ) . METHOD_7 ( TYPE_2 . <unk> ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 = b . METHOD_2 ( new TYPE_1 ( VAR_2 ) ) ; java.lang.System.out.println ( VAR_1 ) . METHOD_3 ( ) ; while ( VAR_5 ) . METHOD_7 ( ) . METHOD_7 ( TYPE_2 . METHOD_8 ( ) ) ; VAR_6 . METHOD_9 ( VAR_7 class , VAR_8 ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( <unk> <unk> , <unk> VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source != null ) { java.util.ArrayList < <unk> > list = VAR_2 . <unk> < <unk> > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < <unk> > ( ) ; } } ; <unk> . <unk> ( VAR_3 , new TYPE_2 ( VAR_1 ) , <unk> ) ; }[0m
Trg : public static void METHOD_1 ( <unk> <unk> , <unk> VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source != null ) { java.util.ArrayList < <unk> > list = VAR_2 . <unk> < <unk> > METHOD_2 ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) ; return list ; } return new java.util.ArrayList < <unk> > ( ) ; } } ; <unk> . <unk> ( VAR_3 , new <unk> ( VAR_1 ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.Throwable getSelection , boolean VAR_1 ) { boolean = new ( ( source ) != null ) { final java.util.Set < > list = METHOD_2 ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ; return ; } java.lang.System.out.println ( VAR_3 , new TYPE_2 ( VAR_1 ) , false ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( <unk> , <unk> , false ) ; TYPE_3 <unk> = t . METHOD_3 ( VAR_1 ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; <unk> = t . METHOD_4 ( <unk> , VAR_2 ) ; }[0m
Trg : public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( <unk> , <unk> , false ) ; TYPE_3 <unk> = t . METHOD_3 ( args . <unk> ) ; TYPE_3 VAR_2 = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; <unk> = t . METHOD_4 ( <unk> , VAR_2 ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 args , TYPE_2 t ) { t . METHOD_2 ( false , false , false ) ; TYPE_3 t = t . METHOD_3 ( ( ( float ) ( FLOAT_1 / ( VAR_3 ) ) ) ) ; else = t . METHOD_4 ( item , VAR_2 ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( TYPE_1 . <unk> VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , <unk> . METHOD_4 ( ) ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 . <unk> VAR_1 , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , <unk> , VAR_2 ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , <unk> . METHOD_4 ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) , boolean VAR_2 , java.lang.String VAR_3 ) { VAR_4 . METHOD_2 ( VAR_5 , null , VAR_2 ) ; java.lang.System.out.println ( event . METHOD_3 ( ) ) . start ( VAR_3 ) ; TYPE_2 . assertEquals ( VAR_1 , METHOD_4 ( ) ) ; }[0m
[31mExample #7[0m
Src : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) * <unk> ) , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Trg : protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( VAR_2 . length , VAR_1 . size ( ) ) ; for ( int i = 0 ; i < ( VAR_2 . length ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
Pred: protected void METHOD_1 ( java.util.List < TYPE_1 > VAR_1 ) throws java.lang.Exception { METHOD_2 ( VAR_1 ) ; assertEquals ( ( ( VAR_2 . length ) - 1 ) , VAR_1 <= ( VAR_2 . length ) ) ; i ++ ) { METHOD_3 ( VAR_1 . get ( i ) , i ) ; } }[0m
---------------
Class: Change parameters order in method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < <unk> > result = <unk> . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < <unk> > result = <unk> . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( VAR_2 , result . METHOD_3 ( ) . METHOD_4 ( ) . getId ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > result = super . METHOD_2 ( VAR_1 ) ; TYPE_1 . assertEquals ( 1 , result . size ( ) ) ; TYPE_1 . assertEquals ( result . METHOD_3 ( ) . getId ( ) , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 <unk> , TYPE_2 <unk> , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( <unk> == null ) { <unk> . METHOD_2 ( value ) ; } else { <unk> . METHOD_2 ( <unk> , value ) ; } } catch ( TYPE_3 <unk> ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 <unk> , TYPE_2 <unk> , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( <unk> == null ) { <unk> . METHOD_2 ( value ) ; } else { <unk> . METHOD_2 ( <unk> , value ) ; } } catch ( TYPE_3 <unk> ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 TYPE_1 , TYPE_2 [ , java.lang.String value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( VAR_2 == null ) { java.lang.Thread . METHOD_2 ( value ) ; } } catch ( TYPE_3 VAR_2 ) { } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #2[0m
Src : static void METHOD_1 ( TYPE_1 <unk> , TYPE_2 <unk> , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( <unk> == null ) ? ( ( long ) ( <unk> . METHOD_2 ( ) ) ) : ( ( long ) ( <unk> . METHOD_2 ( <unk> ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 <unk> ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 <unk> , TYPE_2 <unk> , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( <unk> == null ) ? ( ( long ) ( <unk> . METHOD_2 ( ) ) ) : ( ( long ) ( <unk> . METHOD_2 ( <unk> ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 <unk> ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 TYPE_1 , TYPE_2 > , boolean value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final long VAR_3 = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; } catch ( TYPE_4 VAR_2 ) { } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = <unk> . METHOD_2 ( new <unk> ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . get ( 0 ) , STRING_1 ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; boolean result = <unk> . METHOD_2 ( new <unk> ( ) , VAR_2 ) ; TYPE_2 . METHOD_3 ( result ) ; TYPE_2 . assertEquals ( 1 , VAR_2 . size ( ) ) ; TYPE_2 . assertEquals ( STRING_1 , VAR_2 . get ( 0 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { while ( VAR_1 . METHOD_2 ( ) ) . start ( false ) ; java.util.List < java.lang.String > VAR_2 = new TYPE_1 < > ( ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , 1 ) ; TYPE_2 . assertEquals ( VAR_2 . size ( ) , STRING_1 ) ; }[0m
[31mExample #4[0m
Src : static void METHOD_1 ( TYPE_1 <unk> , TYPE_2 <unk> , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( <unk> == null ) { <unk> . METHOD_2 ( value ) ; } else { <unk> . METHOD_2 ( <unk> , value ) ; } } catch ( TYPE_3 <unk> ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 <unk> , TYPE_2 <unk> , long value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( <unk> == null ) { <unk> . METHOD_2 ( value ) ; } else { <unk> . METHOD_2 ( <unk> , value ) ; } } catch ( TYPE_3 <unk> ) { VAR_2 = true ; } TYPE_4 . assertEquals ( VAR_1 , VAR_2 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 TYPE_1 , TYPE_2 > , boolean value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { if ( VAR_1 == null ) { METHOD_2 ( false ) ; } } catch ( TYPE_3 VAR_2 ) { } TYPE_4 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
---------------
Class: Change qualified name in response to a move class refactoring
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; TYPE_1 . METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_2 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_4 ( ) ) ; METHOD_7 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) , METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 . METHOD_3 ( ) , TYPE_1 . METHOD_5 ( ) ) ; METHOD_8 ( TYPE_1 . METHOD_4 ( ) , METHOD_5 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public java.lang.String toString ( ) { TYPE_1 <unk> = new TYPE_1 ( ( ( ( size ) * <unk> ) + <unk> ) ) ; <unk> ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { <unk> ( STRING_1 ) ; } <unk> ( values [ i ] ) ; } <unk> ( CHAR_2 ) ; return <unk> . toString ( ) ; }[0m
Trg : public java.lang.String toString ( ) { java.lang.StringBuilder <unk> = new java.lang.StringBuilder ( ( ( ( size ) * <unk> ) + <unk> ) ) ; <unk> ( CHAR_1 ) ; for ( int i = 0 ; i < ( size ) ; i ++ ) { if ( i != 0 ) { <unk> ( STRING_1 ) ; } <unk> ( values [ i ] ) ; } <unk> ( CHAR_2 ) ; return <unk> . toString ( ) ; }[0m
Pred: public java.lang.String toString ( ) { TYPE_1 ( new TYPE_1 ( ( ( ( size ) ) + ) ) ) ; java.lang.System.out.println ( CHAR_1 ) ; i ++ ) { if ( values [ i ] ) ; } ( CHAR_2 ) ; return words . toString ( ) ; }[0m
---------------
Class: Change type of a variable
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( <unk> <unk> , <unk> VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.util.ArrayList < <unk> . <unk> > ) ( source ) ) : new java.util.ArrayList < <unk> . <unk> > ( ) ; } } ; <unk> . <unk> ( VAR_2 , new TYPE_1 ( VAR_1 ) , <unk> ) ; }[0m
Trg : public static void METHOD_1 ( <unk> <unk> , <unk> VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.util.ArrayList < <unk> . <unk> > ) ( source ) ) : new java.util.ArrayList < <unk> . <unk> > ( ) ; } } ; <unk> . <unk> ( VAR_2 , new TYPE_1 ( VAR_1 ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.Thread event , int VAR_1 ) { java.util.List < TYPE_1 > ( java.lang.Object source , to ) { return source != ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < > ( ) ; } ; VAR_2 . ( new TYPE_1 ( VAR_1 ) , VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( TYPE_1 . <unk> ( ) , TYPE_2 . METHOD_3 ( ) ) ) . <unk> ( TYPE_3 . METHOD_4 ( <unk> . METHOD_5 ( VAR_2 class ) ) ) ; <unk> ( VAR_3 . METHOD_6 ( ) ) . <unk> ( VAR_1 ) ; <unk> = new TYPE_4 ( VAR_3 , <unk> , VAR_4 ) ; TYPE_5 . METHOD_7 ( <unk> . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> ( VAR_1 . METHOD_2 ( TYPE_2 . <unk> ( ) , TYPE_2 . METHOD_3 ( ) ) ) . <unk> ( TYPE_3 . METHOD_4 ( <unk> . METHOD_5 ( VAR_2 class ) ) ) ; <unk> ( VAR_3 . METHOD_6 ( ) ) . <unk> ( VAR_1 ) ; <unk> = new TYPE_4 ( VAR_3 , <unk> , VAR_4 ) ; TYPE_5 . METHOD_7 ( <unk> . METHOD_8 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_1 ( TYPE_1 . METHOD_2 ( ) , TYPE_2 . METHOD_3 ( ) . METHOD_5 ( VAR_2 ) ) ; java.lang.Thread ( VAR_3 . METHOD_6 ( ) , VAR_4 ) ; TYPE_5 . METHOD_7 ( METHOD_7 ( ) , TYPE_6 . METHOD_9 ( VAR_5 ) ) ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( <unk> id : VAR_1 ) { java.util.List < <unk> . <unk> > VAR_2 = <unk> ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( <unk> . <unk> VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( <unk> id : VAR_1 ) { java.util.List < <unk> > VAR_2 = <unk> ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( <unk> VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_3 ( ) ; METHOD_3 ( ) ; for ( TYPE_1 id : VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = - ( ) . METHOD_5 ( id ) ; TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #3[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 <unk> ) { METHOD_2 ( <unk> , VAR_1 ) ; <unk> . <unk> <unk> = METHOD_3 ( <unk> ) ; if ( <unk> != null ) { <unk> . METHOD_4 ( ) . METHOD_5 ( <unk> . METHOD_6 ( ) ) ; <unk> . METHOD_4 ( ) . <unk> ( null ) ; } return METHOD_7 ( <unk> , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 <unk> ) { METHOD_2 ( <unk> , VAR_1 ) ; <unk> . <unk> <unk> = METHOD_3 ( <unk> ) ; if ( <unk> != null ) { <unk> . METHOD_4 ( ) . METHOD_5 ( <unk> . METHOD_6 ( ) ) ; <unk> . METHOD_4 ( ) . <unk> ( null ) ; } return METHOD_7 ( <unk> , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 event ) { METHOD_2 ( event , VAR_1 ) ; super . METHOD_3 ( VAR_1 ) ; if ( event != null ) { . METHOD_4 ( ) . METHOD_6 ( ) ; } return METHOD_7 ( METHOD_7 , VAR_2 , VAR_3 , VAR_4 ) ; }[0m
[31mExample #4[0m
Src : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( <unk> id : VAR_1 ) { java.util.List < <unk> . <unk> > VAR_2 = <unk> ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( <unk> . <unk> VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Trg : protected void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( ) ; for ( <unk> id : VAR_1 ) { java.util.List < <unk> . <unk> > VAR_2 = <unk> ( ) . METHOD_4 ( ) . METHOD_5 ( id ) ; for ( <unk> . <unk> VAR_3 : VAR_2 ) { TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } } TYPE_2 . METHOD_7 ( true ) ; }[0m
Pred: protected void METHOD_1 ( ) { METHOD_3 ( ) ; METHOD_3 ( ) ; for ( TYPE_1 id : VAR_1 ) { java.util.List < TYPE_1 > VAR_2 = - ( ) . METHOD_5 ( id ) ; TYPE_1 . METHOD_6 ( id , VAR_3 ) ; } TYPE_2 . METHOD_7 ( true ) ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . <unk> ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; <unk> ( VAR_4 . get ( VAR_2 ) ) . <unk> ( VAR_1 ) ; <unk> ( VAR_4 ) . <unk> ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { <unk> VAR_1 = new <unk> ( ) ; VAR_1 . <unk> ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; <unk> ( VAR_4 . get ( VAR_2 ) ) . <unk> ( VAR_1 ) ; <unk> ( VAR_4 ) . <unk> ( VAR_5 ) . METHOD_3 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . setEnabled ( VAR_2 ) ; VAR_1 . METHOD_2 ( VAR_3 ) ; ( VAR_4 . get ( VAR_2 ) ) . setEnabled ( VAR_1 ) ; VAR_4 ( VAR_5 ) . METHOD_3 ( ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { <unk> . <unk> VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < <unk> . <unk> > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> VAR_1 = METHOD_2 ( VAR_2 , null ) ; java.util.List < <unk> > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_1 parameters = new TYPE_1 ( ) ; VAR_3 . add ( VAR_1 ) ; parameters . METHOD_5 ( VAR_3 ) ; TYPE_2 VAR_4 = METHOD_6 ( parameters ) ; METHOD_7 ( VAR_4 ) ; METHOD_8 ( VAR_4 ) ; METHOD_9 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_11 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { java.lang.Thread VAR_1 . METHOD_2 ( VAR_2 , VAR_2 ) ; java.util.List < TYPE_1 > VAR_3 = METHOD_3 ( VAR_1 . getName ( ) ) ; VAR_3 . METHOD_5 ( VAR_3 ) ; METHOD_8 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; METHOD_10 ( VAR_4 ) ; }[0m
---------------
Class: Class becomes static. Delete object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : public static void METHOD_1 ( <unk> <unk> , <unk> VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( <unk> ) ( source ) ) : null ; } } ; <unk> ( ) . <unk> ( VAR_2 , new <unk> ( VAR_1 ) , <unk> ) ; }[0m
Trg : public void METHOD_1 ( <unk> <unk> , <unk> VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( <unk> ) ( source ) ) : null ; } } ; <unk> ( ) . <unk> ( VAR_2 , new <unk> ( VAR_1 ) , <unk> ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return source != null ? ( ( TYPE_1 ) ( source ) ) : null ; } ; ( ) . ( VAR_2 , new java.lang.Thread ( VAR_1 ) , VAR_2 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( VAR_1 , <unk> . METHOD_5 ( ) , VAR_2 ) ; } catch ( <unk> <unk> ) { throw <unk> . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( VAR_1 , <unk> . METHOD_5 ( ) , VAR_2 ) ; } catch ( <unk> <unk> ) { throw <unk> . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( int VAR_1 , TYPE_1 VAR_2 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_2 ) ; return ; } METHOD_4 ( ) . METHOD_1 ( VAR_1 . METHOD_5 ( ) , VAR_2 ) ; else { . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( <unk> <unk> ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.util.ArrayList < <unk> > ) ( source ) ) : new java.util.ArrayList < <unk> > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . <unk> ) ; VAR_1 . METHOD_2 ( INT_1 ) ; <unk> ( ) . <unk> ( VAR_3 , VAR_1 , <unk> ) ; }[0m
Trg : public void METHOD_1 ( <unk> <unk> ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.util.ArrayList < <unk> > ) ( source ) ) : new java.util.ArrayList < <unk> > ( ) ; } } ; TYPE_1 VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . <unk> ) ; VAR_1 . METHOD_2 ( INT_1 ) ; <unk> ( ) . <unk> ( VAR_3 , VAR_1 , <unk> ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { return source != null ? ( ) instanceof ? new java.util.ArrayList < > ( ) ) ; } ; VAR_1 = new TYPE_1 ( STRING_1 , VAR_2 . VAR_2 ) ; java.lang.System.out.println ( VAR_3 , VAR_1 , VAR_2 ) ; }[0m
[31mExample #3[0m
Src : public static java.lang.String METHOD_1 ( TYPE_1 . <unk> <unk> ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , <unk> . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( <unk> . METHOD_3 ( ) ) != null ? <unk> . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Trg : public java.lang.String METHOD_1 ( TYPE_1 . <unk> <unk> ) throws TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 < > ( ) ; VAR_1 . put ( VAR_2 , <unk> . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( <unk> . METHOD_3 ( ) ) != null ? <unk> . METHOD_3 ( ) : STRING_1 ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
Pred: public java.lang.String METHOD_1 ( TYPE_1 TYPE_1 ) { TYPE_2 { java.util.Map < java.lang.String , java.lang.Object > VAR_1 = new TYPE_3 ( VAR_2 , VAR_1 . METHOD_2 ( ) ) ; VAR_1 . put ( VAR_3 , ( ( METHOD_3 ( ) ) != null ) ) ; return TYPE_4 . METHOD_4 ( VAR_1 , false ) ; }[0m
[31mExample #4[0m
Src : public static void METHOD_1 ( <unk> <unk> , TYPE_1 VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; <unk> ( ) . <unk> ( VAR_2 , new TYPE_3 ( VAR_1 ) , <unk> ) ; }[0m
Trg : public void METHOD_1 ( <unk> <unk> , TYPE_1 VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } } ; <unk> ( ) . <unk> ( VAR_2 , new TYPE_3 ( VAR_1 ) , <unk> ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_1 ) { if ( VAR_1 . isEmpty ( ) ) { if ( source == null ) { return new java.util.ArrayList < TYPE_2 > ( ) ; } return source ; } ( ) . ( VAR_2 , new TYPE_3 ( VAR_1 ) , VAR_2 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( <unk> . METHOD_5 ( ) , VAR_1 ) ; } catch ( <unk> <unk> ) { throw <unk> . METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { TYPE_2 . METHOD_4 ( ) . METHOD_1 ( <unk> . METHOD_5 ( ) , VAR_1 ) ; } catch ( <unk> <unk> ) { throw <unk> . METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! ( METHOD_2 ( ) ) ) { TYPE_2 . METHOD_3 ( VAR_1 ) ; return ; } try { METHOD_4 ( ) . METHOD_1 ( ) . METHOD_1 ( VAR_1 ) ; } catch ( ) { throw . METHOD_6 ( ) ; } }[0m
---------------
Class: Class is not static anymore. Add object instance to invoke its methods
Golden example (False):
[31mExample #1[0m
Src : protected void METHOD_1 ( <unk> id ) { TYPE_1 . METHOD_2 ( new <unk> ( <unk> ( ) , new <unk> ( ) { public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { <unk> ( ) . METHOD_3 ( ) . <unk> ( ( ( java.lang.Boolean ) ( <unk> ) ) ) ; } } ) , id ) ; }[0m
Trg : protected void METHOD_1 ( <unk> id ) { TYPE_1 . <unk> ( ) . METHOD_2 ( new <unk> ( <unk> ( ) , new <unk> ( ) { public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { <unk> ( ) . METHOD_3 ( ) . <unk> ( ( ( java.lang.Boolean ) ( <unk> ) ) ) ; } } ) , id ) ; }[0m
Pred: protected void METHOD_1 ( TYPE_1 id ) { TYPE_1 . METHOD_2 ( new java.lang.Thread ( ( ( ) , new java.lang.Thread ( ) { public void && ( java.lang.Object [ ] ) ) ) { METHOD_3 ( ) . . ( ( ( java.lang.Boolean ) ( state ) ) ) ; } } ) , id ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( <unk> <unk> , <unk> id ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; <unk> ( ) . <unk> ( VAR_1 , new TYPE_2 ( id ) , <unk> ) ; }[0m
Trg : public void METHOD_1 ( <unk> <unk> , <unk> id ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; <unk> ( ) . <unk> ( VAR_1 , new TYPE_2 ( id ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 event , TYPE_1 id ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { return source != null ? new java.util.ArrayList < TYPE_1 > ( ( java.util.ArrayList < TYPE_1 ) ) , new java.util.ArrayList < TYPE_1 > ( ) ; } ) . ( VAR_1 , new TYPE_2 ( id ) , false ) ; }[0m
[31mExample #2[0m
Src : public static void METHOD_1 ( <unk> <unk> , <unk> <unk> , boolean VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source != null ) { return source ; } return new java.util.ArrayList < <unk> > ( ) ; } } ; <unk> params = new <unk> ( <unk> ) ; params . METHOD_2 ( VAR_1 ) ; <unk> . <unk> ( VAR_2 , params , <unk> ) ; }[0m
Trg : public static void METHOD_1 ( <unk> <unk> , <unk> <unk> , boolean VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source != null ) { return source ; } return new java.util.ArrayList < <unk> > ( ) ; } } ; <unk> params = new <unk> ( <unk> ) ; params . METHOD_2 ( VAR_1 ) ; <unk> ( ) . <unk> ( VAR_2 , params , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.Thread getSelection , boolean to , boolean VAR_1 ) { TYPE_1 = new TYPE_1 ( ) ; synchronized ( this . source ) { if ( source != null ) { return new java.util.ArrayList < TYPE_1 > ( ) ; } params . METHOD_2 ( VAR_1 ) ; java.lang.System.out.println ( VAR_2 , params , false ) ; }[0m
[31mExample #3[0m
Src : public static void METHOD_1 ( <unk> <unk> ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; <unk> ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , <unk> ) ; }[0m
Trg : public void METHOD_1 ( <unk> <unk> ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } } ; <unk> ( ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , METHOD_3 ( ) ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 event ) { if ( ! ( VAR_1 . isEmpty ( ) , TYPE_1 ) ) { return source != null ? ( ( java.lang.String ) ( source ) ) : STRING_1 ; } ; ) . METHOD_2 ( VAR_1 , new TYPE_1 ( VAR_2 , TYPE_2 . METHOD_3 ( ) ) , ) ; }[0m
[31mExample #4[0m
Src : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new <unk> ( this , new <unk> ( ) { public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( java.lang.Integer ) ( <unk> ) ) ; METHOD_3 ( ) ; } } , <unk> . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Trg : private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . <unk> ( ) . METHOD_2 ( new <unk> ( this , new <unk> ( ) { public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( java.lang.Integer ) ( <unk> ) ) ; METHOD_3 ( ) ; } } , <unk> . METHOD_4 ( ) ) ) ; } else { METHOD_3 ( ) ; } }[0m
Pred: private void METHOD_1 ( ) { if ( ( VAR_1 ) == null ) { TYPE_1 . METHOD_2 ( new java.lang.Thread ( this , new java.lang.Thread ( ) ) { public void > ( ( java.lang.Integer ) ( ) ) ; } } , TYPE_1 . METHOD_4 ( ) ) ; } else { METHOD_3 ( ) ; }[0m
[31mExample #5[0m
Src : public static void METHOD_1 ( <unk> <unk> , <unk> VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; <unk> ( ) . <unk> ( VAR_2 , new <unk> ( VAR_1 ) , <unk> ) ; }[0m
Trg : public void METHOD_1 ( <unk> <unk> , <unk> VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } } ; <unk> ( ) . <unk> ( VAR_2 , new <unk> ( VAR_1 ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 event , boolean VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) { return source != null ? ( ( java.util.ArrayList < TYPE_1 > ) ( source ) ) : new java.util.ArrayList < TYPE_1 > ( ) ; } VAR_2 . ) ( VAR_2 , ( VAR_1 ) , false ) ; }[0m
[31mExample #6[0m
Src : public static void METHOD_1 ( <unk> <unk> , <unk> id ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return new java.util.ArrayList < <unk> > ( ) ; } return source ; } } ; <unk> . <unk> ( VAR_1 , new <unk> ( id ) , <unk> ) ; }[0m
Trg : public static void METHOD_1 ( <unk> <unk> , <unk> id ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return new java.util.ArrayList < <unk> > ( ) ; } return source ; } } ; <unk> ( ) . <unk> ( VAR_1 , new <unk> ( id ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 event , TYPE_1 id ) { if ( ! ( VAR_1 . isEmpty ( ) , TYPE_1 ) ) { if ( source == null ) { return new java.util.ArrayList < > ( ) ; } return source ; } ; . METHOD_7 ( VAR_1 , new java.lang.Thread ( id ) , false ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( ) { <unk> VAR_1 = new <unk> ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new <unk> ( ) { public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( <unk> ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : private void METHOD_1 ( ) { <unk> VAR_1 = new <unk> ( ) ; VAR_1 . METHOD_2 ( this ) ; VAR_2 = new <unk> ( ) { public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { METHOD_3 ( ( ( java.util.List < TYPE_1 > ) ( <unk> ) ) ) ; } } ; TYPE_2 . <unk> ( ) . METHOD_4 ( VAR_1 ) ; }[0m
Pred: private void METHOD_1 ( ) { if ( ! ( VAR_1 . isEmpty ( ) ) ) VAR_1 . METHOD_2 ( this ) ; VAR_2 = new TYPE_1 ( ) { public void ( ( ( java.util.List < TYPE_1 > ) ( ) ) ) ; } } ; TYPE_2 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #8[0m
Src : public static void METHOD_1 ( <unk> <unk> , TYPE_1 VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; <unk> . <unk> ( VAR_2 , params , <unk> ) ; }[0m
Trg : public static void METHOD_1 ( <unk> <unk> , TYPE_1 VAR_1 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source != null ) { return source ; } return STRING_1 ; } } ; TYPE_2 params = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_1 ) ; <unk> ( ) . <unk> ( VAR_2 , params , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 event , TYPE_1 VAR_1 ) { if ( ! ( VAR_1 . isEmpty ( ) , TYPE_1 ) ) { if ( source != null ) { return source ; } ; java.lang.String str = new TYPE_2 ( ) ; params . METHOD_2 ( VAR_2 , params , true ) ; } }[0m
[31mExample #9[0m
Src : protected void METHOD_1 ( ) { if ( ( <unk> ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new <unk> ( this , new <unk> ( ) { public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { <unk> ( ( ( java.util.List < TYPE_2 > ) ( <unk> ) ) ) ; METHOD_3 ( ) ; } } ) , <unk> ( ) . getId ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( <unk> ( ) ) == null ) { return ; } TYPE_1 . <unk> ( ) . METHOD_2 ( new <unk> ( this , new <unk> ( ) { public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { <unk> ( ( ( java.util.List < TYPE_2 > ) ( <unk> ) ) ) ; METHOD_3 ( ) ; } } ) , <unk> ( ) . getId ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( ! ( ) ) == null ) { return ; } TYPE_1 . METHOD_2 ( new java.lang.Thread ( this , new java.lang.Thread ( ) { public void ( ( java.util.List < TYPE_2 > ) ) ) ; METHOD_3 ( ) ) ; } getActivity ( ) . getId ( ) ) ; }[0m
[31mExample #10[0m
Src : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new <unk> ( this , new <unk> ( ) { public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( <unk> ) ) ) ; } } ) ) ; }[0m
Trg : private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . <unk> ( ) . METHOD_2 ( new <unk> ( this , new <unk> ( ) { public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( <unk> ) ) ) ; } } ) ) ; }[0m
Pred: private void METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( new java.lang.Thread ( this , new java.lang.Thread ( ) { public void && ( java.lang.Object target , java.lang.Object ) ) { VAR_1 . METHOD_3 ( ( ( java.util.List < TYPE_3 > ) ( ) ) ) ) ; } } ) ; }[0m
[31mExample #11[0m
Src : public static void METHOD_1 ( ) { <unk> VAR_1 = new <unk> ( ) ; VAR_2 = new <unk> ( ) { public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.Integer , <unk> . <unk> > , java.lang.Boolean > ) ( ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ; } } ; <unk> . <unk> ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Trg : public static void METHOD_1 ( ) { <unk> VAR_1 = new <unk> ( ) ; VAR_2 = new <unk> ( ) { public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { VAR_3 = ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ; } } ; <unk> ( ) . <unk> ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
Pred: public static void METHOD_1 ( ) { java.lang.Thread VAR_1 = new java.lang.Thread ( ) ; VAR_2 = new java.util.ArrayList < TYPE_1 > ( ) ; try { VAR_3 = ( ( java.util.Map < TYPE_1 < java.lang.String , > ( ( TYPE_2 . ) ( ) ) - 1 ) ) ; } . ( VAR_4 , new TYPE_3 ( VAR_5 ) , VAR_1 ) ; }[0m
[31mExample #12[0m
Src : public static void METHOD_1 ( <unk> <unk> , java.lang.String name ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; <unk> . <unk> ( VAR_1 , new TYPE_1 ( name ) , <unk> ) ; }[0m
Trg : public static void METHOD_1 ( <unk> <unk> , java.lang.String name ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) : false ; } } ; <unk> ( ) . <unk> ( VAR_1 , new TYPE_1 ( name ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 event , java.lang.String name ) { if ( ! ( VAR_1 . isEmpty ( ) , TYPE_1 ) ) { return source != null ? ! ( ( ( java.lang.Boolean ) ( source ) ) . METHOD_2 ( ) ) ; } ; METHOD_7 ( VAR_1 , new TYPE_1 ( name ) , false ) ; }[0m
[31mExample #13[0m
Src : private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new <unk> ( this , new <unk> ( ) { public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( java.util.ArrayList < <unk> > ) ( <unk> ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 . <unk> ( ) . METHOD_2 ( new <unk> ( this , new <unk> ( ) { public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { VAR_1 = ( ( java.util.ArrayList < <unk> > ) ( <unk> ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new java.lang.Thread ( this , new java.lang.Thread ( ) { public void > ( java.lang.Object target , java.lang.Object ) ) { VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( ) ) ; METHOD_3 ( ) ; } } , VAR_2 ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( <unk> <unk> , <unk> VAR_1 , boolean VAR_2 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source != null ) { return source ; } return new java.util.ArrayList < <unk> > ( ) ; } } ; <unk> ( ) . <unk> ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , <unk> ) ; }[0m
Trg : public void METHOD_1 ( <unk> <unk> , <unk> VAR_1 , boolean VAR_2 ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source != null ) { return source ; } return new java.util.ArrayList < <unk> > ( ) ; } } ; <unk> ( ) . <unk> ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( java.lang.Throwable t , boolean VAR_1 , boolean VAR_2 ) { if ( this . equals ( java.lang.Object source ) ) { if ( source != null ) { return source ; } return new java.util.ArrayList < TYPE_1 > ( ) ; new TYPE_1 ( VAR_3 , new TYPE_1 ( VAR_1 , VAR_2 ) , VAR_2 ) ; }[0m
[31mExample #15[0m
Src : public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( <unk> . <unk> VAR_3 : VAR_4 < TYPE_1 < <unk> . <unk> > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( <unk> . <unk> VAR_3 : VAR_4 < TYPE_1 < <unk> . <unk> > > getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public static void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_1 . VAR_3 < TYPE_1 > . getValue ( VAR_5 ) ) { VAR_2 . put ( VAR_3 , new TYPE_2 ( VAR_3 ) ) ; } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
[31mExample #16[0m
Src : public static void METHOD_1 ( <unk> <unk> , java.lang.String name ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return new java.util.ArrayList < <unk> > ( ) ; } return source ; } } ; <unk> . <unk> ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . <unk> ) , <unk> ) ; }[0m
Trg : public static void METHOD_1 ( <unk> <unk> , java.lang.String name ) { <unk> = new <unk> ( ) { public java.lang.Object <unk> ( java.lang.Object source , <unk> <unk> ) { if ( source == null ) { return new java.util.ArrayList < <unk> > ( ) ; } return source ; } } ; <unk> ( ) . <unk> ( VAR_1 , new TYPE_1 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . <unk> ) , <unk> ) ; }[0m
Pred: public static void METHOD_1 ( TYPE_1 event , java.lang.String name ) { if ( ! ( VAR_1 . isEmpty ( ) , TYPE_1 ) ) { if ( source != null ) { return new java.util.ArrayList < > ( ) ; } } return ; TYPE_1 . METHOD_7 ( ( ( STRING_1 + name ) + STRING_2 ) , VAR_2 . ) ) ; }[0m
---------------
Class: Merge variable definition & initialization
Golden example (False):
[31mExample #1[0m
Src : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { TYPE_1 <unk> = METHOD_2 ( obj . getId ( ) ) . <unk> ( STRING_1 , obj . getName ( ) ) . <unk> ( STRING_2 , obj . METHOD_3 ( ) ) . <unk> ( STRING_3 , obj . METHOD_4 ( ) ) ; return <unk> ; }[0m
Trg : protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . <unk> ( STRING_1 , obj . getName ( ) ) . <unk> ( STRING_2 , obj . METHOD_3 ( ) ) . <unk> ( STRING_3 , obj . METHOD_4 ( ) ) ; }[0m
Pred: protected TYPE_1 METHOD_1 ( TYPE_2 obj ) { return METHOD_2 ( obj . getId ( ) ) . ( STRING_1 , obj . getName ( ) ) . trim ( STRING_2 , obj . METHOD_3 ( ) ) . ( STRING_3 , METHOD_4 ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) throws TYPE_3 { if ( ( VAR_3 ) != ( this ) ) { throw new TYPE_4 ( ) ; } final TYPE_5 VAR_4 = this . VAR_4 ; if ( ! ( VAR_4 . METHOD_2 ( time , VAR_2 ) ) ) { return false ; } boolean VAR_5 = false ; try { return VAR_5 = VAR_1 . METHOD_3 ( ) ; } finally { if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } }[0m
Pred: public boolean METHOD_1 ( TYPE_1 VAR_1 , long time , TYPE_2 VAR_2 ) { if ( ( VAR_3 ) != ( this ) ) { return ; VAR_4 = VAR_4 . METHOD_2 ( time , VAR_2 ) ; } if ( ! VAR_5 ) { VAR_4 . METHOD_4 ( ) ; } } return VAR_5 ; }[0m
---------------
Class: Move existing statements out of try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; try { VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = TYPE_2 . METHOD_2 ( ) ; java.lang.Integer [ ] VAR_2 = new java.lang.Integer [ VAR_3 ] ; VAR_1 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_2 ) ) ; METHOD_5 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static void METHOD_1 ( int id , int <unk> , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , <unk> ) ; } catch ( java.lang.Throwable <unk> ) { throw TYPE_2 . METHOD_5 ( <unk> ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Trg : public static void METHOD_1 ( int id , int <unk> , final boolean VAR_1 ) { VAR_2 . METHOD_2 ( ) ; try { if ( VAR_1 ) { TYPE_1 . METHOD_3 ( id ) ; } TYPE_1 . METHOD_4 ( id , VAR_3 , <unk> ) ; } catch ( java.lang.Throwable <unk> ) { throw TYPE_2 . METHOD_5 ( <unk> ) ; } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
Pred: public static void METHOD_1 ( int id , int VAR_1 , final boolean VAR_1 ) { try { VAR_2 . METHOD_2 ( ) ; } if ( VAR_1 ) { TYPE_1 . METHOD_4 ( id , VAR_3 ) ; } catch ( java.lang.Throwable t ) { } finally { VAR_2 . METHOD_6 ( ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; java.lang.Integer [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; for ( int i = 0 ; i < ( ( VAR_2 ) - 1 ) ; ++ i ) VAR_3 [ i ] = new java.lang.Integer ( i ) ; try { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; METHOD_4 ( ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
Pred: public void METHOD_1 ( ) { try { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 ) ; int [ ] VAR_3 = new java.lang.Integer [ VAR_2 ] ; i ++ ) ; i ++ ) { VAR_1 . METHOD_2 ( TYPE_2 . METHOD_3 ( VAR_3 ) ) ; } catch ( java.lang.NullPointerException VAR_4 ) { } }[0m
---------------
Class: Remove invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; VAR_2 = <unk> . get ( new <unk> ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; <unk> = new <unk> ( STRING_2 ) ; VAR_4 = new <unk> ( STRING_3 ) ; <unk> = new <unk> ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new <unk> . <unk> ( STRING_6 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; <unk> = VAR_1 . METHOD_3 ( ) ; VAR_2 = <unk> . get ( new <unk> ( STRING_1 ) ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; <unk> = new <unk> ( STRING_2 ) ; VAR_4 = new <unk> ( STRING_3 ) ; <unk> = new <unk> ( STRING_4 ) ; VAR_5 = new TYPE_1 ( ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new <unk> . <unk> ( STRING_6 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { super . METHOD_1 ( ) ; VAR_2 = VAR_1 . get ( ) ; VAR_2 . METHOD_4 ( STRING_2 ) ; VAR_5 = new TYPE_1 ( STRING_4 ) ; VAR_5 . METHOD_5 ( STRING_5 ) ; VAR_5 . METHOD_6 ( new java.lang.Thread ( STRING_6 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . <unk> ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . <unk> ( ) . METHOD_4 ( ) . getValue ( ) , TYPE_4 . <unk> ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . <unk> ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . <unk> ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . <unk> ( ) . METHOD_4 ( ) , TYPE_4 . <unk> ( ) . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . <unk> ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_2 . METHOD_3 ( ) . METHOD_3 ( VAR_2 , new TYPE_3 ( TYPE_4 . METHOD_4 ( ) . getValue ( ) , TYPE_4 . METHOD_5 ( ) ) ) ; METHOD_6 ( VAR_1 . METHOD_7 ( ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( <unk> <unk> ) { <unk> = new <unk> ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , <unk> ) ; }[0m
Trg : public void METHOD_1 ( <unk> <unk> ) { <unk> = new <unk> ( ) { public java.lang.Object METHOD_2 ( java.lang.Object source , <unk> <unk> ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) : 1 ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) , <unk> ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 event ) { do = METHOD_2 ( java.lang.Object source , TYPE_1 ) { return source != null ? ( ( java.lang.Integer ) ( source ) ) . METHOD_3 ( ) ; } } ; METHOD_4 ( new TYPE_1 ( VAR_1 , METHOD_5 ( ) ) ) ; }[0m
---------------
Class: Remove parameter from the method invocation
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( <unk> ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . <unk> ( ) ) ; } } ; <unk> ( ) . METHOD_5 ( null ) ; <unk> ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( <unk> ( ) ) ) ; TYPE_2 parameters = new TYPE_2 ( VAR_1 . METHOD_2 ( ) ) ; TYPE_3 VAR_2 = new TYPE_3 ( ) { public void METHOD_3 ( TYPE_4 result ) { METHOD_4 ( result . <unk> ( ) ) ; } } ; <unk> ( ) . METHOD_5 ( ) ; <unk> ( ) . METHOD_6 ( VAR_3 , parameters , VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( METHOD_2 ( ) ) ) ; TYPE_2 parameters = new TYPE_3 ( ) ; public void METHOD_3 ( TYPE_4 ) { METHOD_4 ( ) ; } ( ) . METHOD_6 ( VAR_3 , parameters , parameters ) VAR_2 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static TYPE_1 <unk> ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 <unk> ) { TYPE_3 VAR_2 = <unk> . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; <unk> . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return <unk> ; }[0m
Trg : public static TYPE_1 <unk> ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 <unk> ) { TYPE_3 VAR_2 = <unk> . METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_3 ( ) ; <unk> . METHOD_2 ( VAR_2 ) ; } TYPE_4 VAR_3 = VAR_2 . METHOD_3 ( ) ; if ( VAR_3 == null ) { VAR_3 = new TYPE_4 ( ) ; VAR_2 . METHOD_4 ( VAR_3 ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type ) ; return <unk> ; }[0m
Pred: public static TYPE_1 ( ( java.lang.String VAR_1 , TYPE_2 type , TYPE_1 event ) { TYPE_3 VAR_2 = METHOD_1 ( ) ; if ( VAR_2 == null ) { VAR_3 = VAR_2 . METHOD_3 ( ) ; } VAR_3 . METHOD_5 ( VAR_1 ) ; VAR_3 . METHOD_6 ( type . value ( ) ) ; return ; }[0m
[31mExample #2[0m
Src : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
Trg : protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , TYPE_6 . METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( VAR_1 , response , VAR_3 , VAR_2 ) ; } }[0m
Pred: protected void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 response ) throws TYPE_3 , TYPE_4 { try { TYPE_5 . METHOD_2 ( response , METHOD_3 ( METHOD_4 ( ) ) ) ; } catch ( java.lang.Exception VAR_2 ) { TYPE_5 . METHOD_5 ( response , VAR_3 , VAR_2 ) ; } }[0m
[31mExample #3[0m
Src : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) . <unk> ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . <unk> ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . getId ( ) , METHOD_4 ( ) . <unk> ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_4 ( ) , METHOD_4 ( ) ) ; METHOD_4 ( ) . METHOD_5 ( VAR_1 ) ; METHOD_6 ( ) . METHOD_7 ( METHOD_4 ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_8 ( ) ; return null ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 , false ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . <unk> ( ) ) ; METHOD_8 ( ( ( response . <unk> ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . <unk> ( ) ) ) , 1 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , STRING_1 , VAR_1 ) ) ; METHOD_5 ( false ) ; VAR_3 . METHOD_6 ( VAR_4 ) ; TYPE_2 response = VAR_3 . add ( METHOD_7 ( ) ) ; assertEquals ( INT_1 , response . <unk> ( ) ) ; METHOD_8 ( ( ( response . <unk> ( ) ) instanceof TYPE_3 ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . <unk> ( ) ) ) , 1 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( METHOD_4 ( VAR_2 , false , VAR_1 , false ) ) ; VAR_4 . METHOD_5 ( METHOD_7 ( ) ) ; METHOD_9 ( ( ( TYPE_3 ) ( response . . ( ) ) ) , 1 ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( <unk> , VAR_3 ) ; TYPE_4 . METHOD_6 ( <unk> . <unk> ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , null ) ) ; METHOD_5 ( VAR_3 ) ; TYPE_4 . METHOD_6 ( <unk> . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { super . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , TYPE_3 . METHOD_3 ( METHOD_4 ( STRING_3 , null ) ) ) , ) ; METHOD_5 ( ) ; TYPE_4 . METHOD_6 ( METHOD_7 ( ) ) ; }[0m
[31mExample #6[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; <unk> VAR_4 = new <unk> ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; <unk> ( VAR_6 . get ( TYPE_1 . <unk> ( VAR_7 . <unk> class ) ) ) . <unk> ( VAR_4 ) ; TYPE_2 . METHOD_5 ( <unk> . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; <unk> VAR_4 = new <unk> ( ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; <unk> ( VAR_6 . get ( TYPE_1 . <unk> ( ) ) ) . <unk> ( VAR_4 ) ; TYPE_2 . METHOD_5 ( <unk> . METHOD_6 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( VAR_5 ) ; java.lang.System.out.println ( VAR_6 . get ( VAR_7 ) ) . start ( VAR_4 ) ; TYPE_2 . METHOD_5 ( ) , TYPE_3 . METHOD_7 ( ) ) ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( boolean VAR_1 ) { <unk> <unk> = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; <unk> ( VAR_4 . METHOD_3 ( TYPE_2 . <unk> ( VAR_5 . <unk> class ) ) ) . <unk> ( TYPE_3 . METHOD_4 ( <unk> ) ) ; <unk> ( VAR_6 . METHOD_5 ( <unk> . getId ( ) ) ) . <unk> ( <unk> . METHOD_6 ( ) ) ; }[0m
Trg : private void METHOD_1 ( boolean VAR_1 ) { <unk> <unk> = TYPE_1 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; <unk> ( VAR_4 . METHOD_3 ( TYPE_2 . <unk> ( ) ) ) . <unk> ( TYPE_3 . METHOD_4 ( <unk> ) ) ; <unk> ( VAR_6 . METHOD_5 ( <unk> . getId ( ) ) ) . <unk> ( <unk> . METHOD_6 ( ) ) ; }[0m
Pred: private void METHOD_1 ( boolean VAR_1 ) { TYPE_1 . TYPE_1 ( VAR_2 , VAR_3 , VAR_1 ) ; if ( VAR_4 . METHOD_3 ( VAR_5 . getSelection ( ) ) ) . METHOD_5 ( VAR_6 . METHOD_5 ( ) . getId ( ) ) . METHOD_7 ( ) . METHOD_6 ( ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = <unk> . METHOD_2 ( ) . METHOD_3 ( ) ; <unk> ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . <unk> ( <unk> ) . METHOD_4 ( TYPE_3 . <unk> ( VAR_2 class ) ) ; TYPE_4 . METHOD_5 ( <unk> ) ; <unk> . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( <unk> . <unk> ( ) . <unk> ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = <unk> . METHOD_2 ( ) . METHOD_3 ( ) ; <unk> ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . <unk> ( <unk> ) . METHOD_4 ( TYPE_3 . <unk> ( ) ) ; TYPE_4 . METHOD_5 ( <unk> ) ; <unk> . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( <unk> . <unk> ( ) . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) ; while ( new TYPE_2 ( VAR_1 , VAR_1 . getId ( ) ) ) . METHOD_4 ( ) ; TYPE_4 . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( ) . METHOD_7 ( ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( <unk> , VAR_3 ) ; TYPE_4 . METHOD_5 ( <unk> . <unk> ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ) ; METHOD_4 ( VAR_3 ) ; TYPE_4 . METHOD_5 ( <unk> . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , STRING_1 , STRING_2 , VAR_2 , null , null , TYPE_3 . METHOD_3 ( ) ) , null ) ; METHOD_4 ( VAR_1 , VAR_3 ) ; TYPE_4 . METHOD_5 ( ) ; }[0m
[31mExample #10[0m
Src : protected <unk> METHOD_1 ( boolean VAR_1 ) { <unk> VAR_2 = null ; java.util.List < <unk> > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new <unk> ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } <unk> ( METHOD_6 ( VAR_3 ) ) . <unk> ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . <unk> ( VAR_6 class ) ) ; return VAR_2 ; }[0m
Trg : protected <unk> METHOD_1 ( boolean VAR_1 ) { <unk> VAR_2 = null ; java.util.List < <unk> > VAR_3 = TYPE_1 . METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 = new <unk> ( ) ; VAR_2 . METHOD_3 ( ) . METHOD_4 ( new TYPE_2 ( ) ) ; VAR_3 = TYPE_1 . METHOD_5 ( VAR_2 ) ; } <unk> ( METHOD_6 ( VAR_3 ) ) . <unk> ( VAR_4 ) . METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . <unk> ( ) ) ; return VAR_2 ; }[0m
Pred: protected void METHOD_1 ( boolean VAR_1 ) { VAR_2 = null ; java.util.List < TYPE_1 > VAR_3 = METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_2 ) ; METHOD_7 ( TYPE_3 . METHOD_8 ( VAR_5 ) , TYPE_3 . ( VAR_6 class ) ) ; return VAR_2 ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; <unk> . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; <unk> ( true ) . <unk> ( <unk> ) . METHOD_7 ( ) ; <unk> . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( <unk> ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; <unk> . METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; <unk> ( true ) . <unk> ( <unk> ) . METHOD_7 ( ) ; <unk> . METHOD_8 ( ) ; TYPE_2 . METHOD_9 ( <unk> ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; METHOD_4 ( TYPE_1 . METHOD_5 ( ) , true ) ; METHOD_6 ( ) ; METHOD_7 ( ) ) . METHOD_7 ( ) ; METHOD_7 ( ) ; TYPE_2 . METHOD_9 ( ( ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , <unk> , ( - 1 ) , null , null , null , VAR_1 , VAR_2 , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( <unk> , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , <unk> , ( - 1 ) , null , null , null , VAR_3 ) ; TYPE_1 VAR_4 = new TYPE_1 ( ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( <unk> , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 TYPE_1 = METHOD_2 ( ) ; TYPE_2 p = new TYPE_3 ( null , ( - 1 ) , ( - 1 ) , null , VAR_1 , VAR_2 , VAR_3 ) ; p . METHOD_3 ( VAR_4 ) ; assertEquals ( VAR_4 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 <unk> = <unk> . METHOD_3 ( node ) ; <unk> . METHOD_4 ( VAR_2 , node , <unk> , ( STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
Trg : public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 <unk> = <unk> . METHOD_3 ( node ) ; <unk> . METHOD_4 ( VAR_2 , node , <unk> , ( STRING_2 + STRING_3 ) ) ; } return false ; }[0m
Pred: public boolean METHOD_1 ( TYPE_1 node ) { java.lang.String VAR_1 = node . METHOD_2 ( ) ; if ( VAR_1 . equals ( STRING_1 ) ) { TYPE_2 . METHOD_4 ( VAR_2 , node , ( , STRING_2 + STRING_3 ) , null ) ; } return false ; }[0m
[31mExample #14[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws <unk> { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; <unk> ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws <unk> { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 . METHOD_2 ( ) , VAR_2 , VAR_3 , VAR_5 , 0 , true ) ; int VAR_6 = METHOD_3 ( ) ; TYPE_2 VAR_7 = TYPE_3 . METHOD_4 ( VAR_8 class ) ; VAR_9 . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; <unk> ( VAR_10 ) . METHOD_5 ( VAR_6 , VAR_4 , VAR_7 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , byte [ ] VAR_3 ) throws TYPE_1 { TYPE_1 VAR_4 = new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_5 , 0 ) ; assertEquals ( VAR_6 , VAR_4 , VAR_7 ) ; METHOD_5 ( VAR_6 ) VAR_4 METHOD_5 ( VAR_6 , VAR_7 ) ; }[0m
[31mExample #15[0m
Src : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) && ( ! ( node . METHOD_2 ( ) . METHOD_3 ( ) . toString ( ) . equals ( STRING_1 ) ) ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 node ) { if ( ( ( node . METHOD_2 ( ) . size ( ) ) == 1 ) ) { context . METHOD_4 ( VAR_2 , node , context . METHOD_5 ( node ) , ( STRING_2 + STRING_3 ) , null ) ; } }[0m
[31mExample #16[0m
Src : public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { this . METHOD_1 ( ( <unk> == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ) ) ; }[0m
Trg : public void <unk> ( java.lang.Object <unk> ) { this . METHOD_1 ( ( <unk> == null ? new java.util.ArrayList < TYPE_1 > ( ) : ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ) ) ) ) ; }[0m
Pred: public void void ( java.lang.Object [ ] , java.lang.Object ) { this . METHOD_1 ( ( ( == null ? new java.util.ArrayList < TYPE_1 > ( ( java.util.List < TYPE_1 > ) ( ( ( TYPE_2 . ( ) ) ( ) ) . ) ( ) ) ) ) ) ; }[0m
[31mExample #17[0m
Src : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; <unk> ( VAR_2 ) . <unk> ( <unk> ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . <unk> ( VAR_4 class ) ) ; }[0m
Trg : protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; <unk> ( VAR_2 ) . <unk> ( <unk> ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . <unk> ( ) ) ; }[0m
Pred: protected void METHOD_1 ( boolean VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( ( ! VAR_1 ) ) ; if ( VAR_2 ) . METHOD_3 ( TYPE_2 . METHOD_4 ( VAR_3 ) , TYPE_2 . ( VAR_4 class ) ) ; }[0m
[31mExample #18[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , context . METHOD_5 ( element ) , STRING_1 ) ; } }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 element ) { if ( ( TYPE_3 . METHOD_2 ( element ) ) && ( TYPE_3 . METHOD_3 ( element ) ) ) { context . METHOD_4 ( VAR_1 , element , METHOD_5 ( element ) , STRING_1 , null ) ; } }[0m
[31mExample #19[0m
Src : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 , STRING_3 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Trg : private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_2 ( STRING_2 ) , VAR_5 ) { public java.lang.String METHOD_2 ( ) { return VAR_1 ; } protected void METHOD_3 ( ) { } } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
Pred: private TYPE_1 METHOD_1 ( final java.lang.String VAR_1 ) { TYPE_1 VAR_2 = new TYPE_1 ( VAR_3 , new TYPE_2 ( STRING_1 ) , VAR_4 , new TYPE_3 ( ) ) ; public java.lang.String METHOD_3 ( ) { } ; VAR_2 . METHOD_4 ( VAR_6 , new TYPE_2 ( STRING_4 ) ) ; return VAR_2 ; }[0m
[31mExample #20[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) + STRING_5 ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_1 = TYPE_3 . METHOD_3 ( VAR_2 ) ; assertEquals ( ( STRING_1 + ( STRING_2 + STRING_6 ) ) , VAR_1 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String VAR_1 = STRING_1 + ( ( ( ( STRING_2 + STRING_3 ) + STRING_4 ) + STRING_3 ) ) ; TYPE_1 VAR_2 = TYPE_2 . METHOD_3 ( VAR_2 , true ) ; assertEquals ( STRING_1 + ( STRING_2 + STRING_6 ) , VAR_1 ) ; }[0m
[31mExample #21[0m
Src : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 <unk> = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( <unk> != null ) { return VAR_3 ; } } return null ; }[0m
Trg : private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 ) ; if ( index >= 0 ) { TYPE_1 <unk> = ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ; if ( <unk> != null ) { return VAR_3 ; } } return null ; }[0m
Pred: private TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { int index = METHOD_2 ( VAR_1 , true ) ; if ( index >= 0 ) { TYPE_1 ( ( ( TYPE_1 ) ( VAR_2 . get ( index ) ) ) ) { return VAR_3 ; } } return null ; }[0m
[31mExample #22[0m
Src : public void METHOD_1 ( ) { <unk> . <unk> ( ) . <unk> ( ) . METHOD_2 ( <unk> . getId ( ) ) ; <unk> . METHOD_3 ( ) ; <unk> ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . <unk> ( VAR_2 . <unk> class ) ) ) . <unk> ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , <unk> . METHOD_8 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> . <unk> ( ) . <unk> ( ) . METHOD_2 ( <unk> . getId ( ) ) ; <unk> . METHOD_3 ( ) ; <unk> ( VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) , TYPE_1 . <unk> ( ) ) ) . <unk> ( new java.util.ArrayList < > ( TYPE_2 . METHOD_6 ( STRING_1 ) ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , <unk> . METHOD_8 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { while ( ) . METHOD_2 ( VAR_1 . getId ( ) ) ; VAR_1 . METHOD_3 ( ) ; TYPE_1 . METHOD_3 ( ) . METHOD_5 ( VAR_2 . METHOD_6 ( STRING_1 ) ) ; TYPE_3 . METHOD_7 ( STRING_2 , TYPE_1 . METHOD_8 ( ) ) ; }[0m
[31mExample #23[0m
Src : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 <unk> = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , <unk> , VAR_3 , null ) ; }[0m
Trg : private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 <unk> = VAR_2 . METHOD_2 ( ) ; java.lang.Object VAR_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { if ( context . METHOD_4 ( ) . METHOD_5 ( null , VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ) { return ; } } context . METHOD_1 ( VAR_1 , <unk> , VAR_3 ) ; }[0m
Pred: private static void METHOD_1 ( TYPE_1 context , TYPE_2 VAR_1 , TYPE_3 VAR_2 , java.lang.String VAR_3 ) { TYPE_4 TYPE_4 = VAR_2 . METHOD_3 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { METHOD_5 ( VAR_1 , ( ( TYPE_5 ) ( VAR_4 ) ) ) ; } context . METHOD_1 ( VAR_1 , VAR_3 , null ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; <unk> . METHOD_1 ( ) ; <unk> . METHOD_4 ( VAR_1 , <unk> . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . <unk> ( VAR_2 . <unk> class ) ) ; TYPE_2 . assertEquals ( VAR_3 , <unk> . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; <unk> . METHOD_1 ( ) ; <unk> . METHOD_4 ( VAR_1 , <unk> . METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . <unk> ( ) ) ; TYPE_2 . assertEquals ( VAR_3 , <unk> . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_3 ( true , null ) ; super . METHOD_1 ( VAR_1 ) . METHOD_5 ( METHOD_5 ( 1 ) ) . METHOD_6 ( TYPE_1 . VAR_2 ) ; TYPE_2 . assertEquals ( VAR_3 , event . METHOD_7 ( ) ) ; }[0m
[31mExample #25[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_3 , VAR_6 , <unk> ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) throws java.io.IOException { assert TYPE_2 . METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( ) ; for ( TYPE_3 VAR_3 : VAR_4 ) { new TYPE_4 ( VAR_2 , VAR_5 , VAR_1 , VAR_6 ) . METHOD_4 ( ) ; } VAR_2 . METHOD_5 ( ) ; }[0m
[31mExample #26[0m
Src : void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( <unk> . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( <unk> ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Trg : void METHOD_1 ( TYPE_1 <unk> ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( <unk> . METHOD_3 ( ) ) ) ) { TYPE_3 VAR_3 = new TYPE_3 ( ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
Pred: void METHOD_1 ( TYPE_1 TYPE_1 ) { VAR_1 . METHOD_2 ( ) ; for ( final TYPE_2 VAR_2 : ( ( java.util.ArrayList < TYPE_2 > ) ( METHOD_3 ( ) ) ) ) { VAR_3 . METHOD_4 ( VAR_2 ) ; VAR_1 . add ( VAR_3 ) ; } }[0m
---------------
Class: Remove redundant initialization,Replace statement
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > <unk> ) { TYPE_3 <unk> = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( <unk> != null ) { java.util.ArrayList < TYPE_4 > <unk> = null ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { <unk> = TYPE_5 . METHOD_3 ( <unk> , VAR_2 ) ; TYPE_6 . METHOD_4 ( VAR_4 , <unk> ) ; } VAR_2 . METHOD_5 ( <unk> , VAR_1 , <unk> ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > <unk> ) { TYPE_3 <unk> = VAR_2 . METHOD_2 ( VAR_1 ) ; if ( <unk> != null ) { java.util.ArrayList < TYPE_4 > <unk> = TYPE_5 . METHOD_3 ( <unk> , VAR_2 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , <unk> ) ; } VAR_2 . METHOD_5 ( <unk> , VAR_1 , <unk> ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.util.ArrayList < TYPE_2 > > ) { try { TYPE_3 [ ] . VAR_2 = METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 . error ) == ( VAR_3 ) ) { TYPE_6 . METHOD_4 ( VAR_4 , VAR_2 , VAR_1 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 <unk> = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( <unk> != null ) { TYPE_4 <unk> = null ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { <unk> = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; TYPE_6 . METHOD_4 ( VAR_5 , <unk> ) ; } VAR_3 . METHOD_5 ( <unk> , VAR_1 , <unk> ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_3 <unk> = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( <unk> != null ) { TYPE_4 <unk> = TYPE_5 . METHOD_3 ( VAR_2 , VAR_3 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , <unk> ) ; } VAR_3 . METHOD_5 ( <unk> , VAR_1 , <unk> ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { TYPE_4 < TYPE_1 > VAR_3 = VAR_3 . METHOD_2 ( VAR_1 ) ; if ( ( VAR_1 . error ) == ( VAR_4 ) ) { TYPE_6 . METHOD_4 ( VAR_5 , VAR_2 ) ; } VAR_3 . METHOD_5 ( VAR_1 , VAR_2 ) ; }[0m
---------------
Class: Remove statement
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( java.lang.String path , int <unk> ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( <unk> ) ) ) ) { throw new <unk> ( STRING_2 ) ; } else if ( ( VAR_1 ) == ( METHOD_3 ( ) ) ) { throw new TYPE_3 ( STRING_3 ) ; } return METHOD_4 ( VAR_2 , path , <unk> ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( java.lang.String path , int <unk> ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) || ( ! ( TYPE_2 . METHOD_2 ( <unk> ) ) ) ) { throw new <unk> ( STRING_2 ) ; } return METHOD_4 ( VAR_2 , path , <unk> ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( java.lang.String path , int b ) { if ( ! ( TYPE_2 . METHOD_2 ( ) ) ) { throw new TYPE_3 ( STRING_3 , path ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 <unk> ) { <unk> . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; <unk> . METHOD_2 ( STRING_3 , ( ( VAR_1 ) + STRING_4 ) ) ; <unk> . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; <unk> . METHOD_2 ( STRING_7 , STRING_8 ) ; <unk> . METHOD_2 ( STRING_9 , STRING_8 ) ; <unk> . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 <unk> ) { <unk> . METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; <unk> . METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; <unk> . METHOD_2 ( STRING_7 , STRING_8 ) ; <unk> . METHOD_2 ( STRING_9 , STRING_8 ) ; <unk> . METHOD_2 ( STRING_10 , STRING_8 ) ; }[0m
Pred: public void METHOD_1 ( TYPE_1 TYPE_1 ) { METHOD_2 ( STRING_1 , ( ( VAR_1 ) + STRING_2 ) ) ; METHOD_2 ( STRING_5 , ( ( VAR_1 ) + STRING_6 ) ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; TYPE_3 . METHOD_5 ( 0 ) ; }[0m
Trg : public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { for ( TYPE_1 < ? > VAR_3 : VAR_2 ) { VAR_3 . METHOD_3 ( true ) ; } } if ( ( VAR_4 . size ( ) ) > 0 ) { for ( TYPE_2 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } } VAR_1 . METHOD_2 ( STRING_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { VAR_1 . METHOD_2 ( STRING_1 ) ; for ( TYPE_1 VAR_5 : VAR_4 ) { VAR_5 . METHOD_4 ( ) ; } . METHOD_5 ( 0 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; try { <unk> . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . <unk> ( ) ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; try { <unk> . METHOD_5 ( ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_3 ) { assertEquals ( INT_1 , VAR_3 . METHOD_7 ( ) . <unk> ( ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; METHOD_3 ( VAR_1 ) ; VAR_2 . METHOD_4 ( ) ; METHOD_6 ( STRING_1 ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertNotNull ( VAR_4 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 = METHOD_4 ( VAR_2 ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_5 ( ) ) ; TYPE_2 . assertTrue ( VAR_4 . METHOD_6 ( ) . METHOD_7 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( VAR_1 , VAR_2 . METHOD_3 ( ) , VAR_3 ) ; TYPE_1 VAR_4 . METHOD_4 ( VAR_2 ) ; }[0m
[31mExample #5[0m
Src : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 <unk> = <unk> ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = <unk> . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { <unk> . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; VAR_2 . <unk> ( <unk> . METHOD_6 ( ) ) ; <unk> . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Trg : public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 <unk> = <unk> ( ) . METHOD_2 ( ) ; TYPE_1 VAR_2 = <unk> . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; if ( VAR_2 != null ) { <unk> . METHOD_5 ( VAR_2 ) ; } else { VAR_2 = new TYPE_1 ( VAR_1 ) ; <unk> . METHOD_7 ( VAR_2 ) ; } return VAR_2 ; }[0m
Pred: public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_3 VAR_2 = TYPE_1 . METHOD_3 ( VAR_1 . METHOD_4 ( ) , VAR_1 . getId ( ) ) ; return VAR_2 ; }[0m
[31mExample #6[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . <unk> class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; VAR_5 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 . <unk> class , new java.lang.String [ ] { } , new java.lang.Object [ ] { } , METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { assertEquals ( STRING_1 , VAR_1 , VAR_4 . class , VAR_2 , VAR_2 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_2 <unk> = <unk> ( 1 ) ; <unk> . <unk> ( VAR_2 [ 1 ] . toString ( ) ) ; try { <unk> . METHOD_6 ( <unk> ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_2 <unk> = <unk> ( 1 ) ; <unk> . <unk> ( VAR_2 [ 1 ] . toString ( ) ) ; try { <unk> . METHOD_6 ( <unk> ) ; TYPE_1 . METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_4 ( VAR_2 [ 1 ] ) ; VAR_1 . METHOD_5 ( ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final <unk> <unk> = null ; final <unk> <unk> = new <unk> ( ) ; <unk> . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( <unk> ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( <unk> ) ; final <unk> VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { final <unk> <unk> = null ; final <unk> <unk> = new <unk> ( ) ; <unk> . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( <unk> ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( <unk> ) ; final <unk> VAR_4 = VAR_1 . METHOD_6 ( ) ; TYPE_3 . METHOD_7 ( VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_2 ( ) ; final TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_4 ( VAR_3 ) ; VAR_1 . METHOD_5 ( ) ; }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . <unk> class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , <unk> ( 1 ) ) ; VAR_4 . METHOD_5 ( ) ; TYPE_1 . <unk> <unk> = <unk> . get ( ) ; TYPE_2 . METHOD_6 ( <unk> , 1 ) ; METHOD_7 ( <unk> ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . <unk> class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , <unk> ( 1 ) ) ; TYPE_1 . <unk> <unk> = <unk> . get ( ) ; TYPE_2 . METHOD_6 ( <unk> , 1 ) ; METHOD_7 ( <unk> ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . class , VAR_3 ) ; VAR_4 . METHOD_5 ( ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( <unk> ( ) ) ; VAR_2 . METHOD_6 ( ) ; TYPE_2 VAR_3 = <unk> . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; METHOD_5 ( <unk> ( ) ) ; TYPE_2 VAR_3 = <unk> . get ( ) ; METHOD_7 ( VAR_3 ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 = METHOD_3 ( VAR_1 , STRING_1 ) ; METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #11[0m
Src : private void METHOD_1 ( ) { <unk> <unk> = ( ( <unk> ) ( METHOD_2 ( ) . <unk> ( ) ) ) ; if ( <unk> == null ) { <unk> = new <unk> ( ) ; } METHOD_3 ( <unk> , null , false , null ) ; getName ( ) . <unk> ( false ) ; METHOD_4 ( ) . <unk> ( false ) ; }[0m
Trg : private void METHOD_1 ( ) { <unk> <unk> = ( ( <unk> ) ( METHOD_2 ( ) . <unk> ( ) ) ) ; if ( <unk> == null ) { <unk> = new <unk> ( ) ; } METHOD_3 ( <unk> , null , false , null ) ; }[0m
Pred: private void METHOD_1 ( ) { TYPE_1 b = ( ( TYPE_1 ) ( METHOD_2 ( ) . METHOD_2 ( ) ) ) ; METHOD_4 ( ) . false ( false ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; <unk> ( false ) . <unk> ( <unk> ) . METHOD_3 ( TYPE_1 . <unk> ( ) , TYPE_1 . <unk> ( ) ) ; VAR_1 . METHOD_4 ( <unk> . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , <unk> . <unk> ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; <unk> ( false ) . <unk> ( <unk> ) . METHOD_3 ( TYPE_1 . <unk> ( ) ) ; VAR_1 . METHOD_4 ( <unk> . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , <unk> . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; VAR_1 . METHOD_4 ( TYPE_1 . METHOD_5 ( ) ) ; TYPE_2 . METHOD_6 ( STRING_1 , false ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) { METHOD_2 ( ) ; <unk> ( VAR_1 . get ( TYPE_1 . <unk> ( ) ) ) . <unk> ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Trg : public void METHOD_1 ( ) { METHOD_2 ( ) ; <unk> ( VAR_1 . get ( TYPE_1 . <unk> ( ) ) ) . <unk> ( TYPE_2 . METHOD_3 ( ) ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_8 ( VAR_2 ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; METHOD_7 ( ) ; METHOD_7 ( ) ; }[0m
[31mExample #14[0m
Src : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . <unk> class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_3 <unk> = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; <unk> . METHOD_4 ( VAR_2 ) ; <unk> . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( <unk> . METHOD_8 ( ) ) ; }[0m
Trg : public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { TYPE_3 <unk> = new TYPE_3 ( ) ; TYPE_4 VAR_2 = new TYPE_4 ( ) ; <unk> . METHOD_4 ( VAR_2 ) ; <unk> . METHOD_5 ( VAR_2 ) . METHOD_6 ( ) ; TYPE_5 . METHOD_7 ( <unk> . METHOD_8 ( ) ) ; }[0m
Pred: public static void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { VAR_1 . class . METHOD_2 ( ) . METHOD_3 ( true ) ; TYPE_5 . METHOD_7 ( VAR_2 ) . METHOD_6 ( ) ; }[0m
[31mExample #15[0m
Src : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
Trg : protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 ) ; METHOD_2 ( VAR_3 , VAR_4 , new java.lang.String [ ] { VAR_5 } , new java.lang.Object [ ] { TYPE_2 . toString ( ) } , TYPE_1 . METHOD_3 ( ) , VAR_2 ) ; }[0m
Pred: protected void METHOD_1 ( java.lang.String VAR_1 , java.lang.Object VAR_2 ) throws java.lang.Exception { TYPE_1 . assertEquals ( STRING_1 , VAR_1 , VAR_4 , VAR_4 ) ; VAR_6 . METHOD_4 ( ) ; }[0m
[31mExample #16[0m
Src : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , <unk> VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( <unk> ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else if ( VAR_1 == ( <unk> ( ) . METHOD_3 ( ) ) ) { return VAR_4 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Trg : public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , <unk> VAR_1 , TYPE_2 VAR_2 ) { if ( VAR_1 == ( <unk> ( ) . METHOD_2 ( ) ) ) { return VAR_3 . get ( ) ; } else { return super . METHOD_1 ( source , VAR_1 , VAR_2 ) ; } }[0m
Pred: public TYPE_1 < ? extends TYPE_2 , ? > METHOD_1 ( TYPE_3 source , TYPE_1 VAR_1 , TYPE_2 VAR_2 ) { return VAR_3 . get ( ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { <unk> ( VAR_1 . METHOD_2 ( ) ) . <unk> ( null ) ; METHOD_3 ( false ) ; <unk> . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , <unk> , VAR_2 ) ; <unk> . METHOD_6 ( VAR_3 , <unk> . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . <unk> ( VAR_5 class ) ) ; <unk> . METHOD_6 ( <unk> , <unk> . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_3 ( false ) ; <unk> . METHOD_4 ( ) ; TYPE_1 . METHOD_5 ( STRING_1 , <unk> , VAR_2 ) ; <unk> . METHOD_6 ( VAR_3 , <unk> . METHOD_7 ( 1 ) ) . METHOD_8 ( TYPE_2 . METHOD_9 ( VAR_4 ) , TYPE_2 . <unk> ( VAR_5 class ) ) ; <unk> . METHOD_6 ( <unk> , <unk> . METHOD_7 ( 0 ) ) . METHOD_10 ( ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . METHOD_5 ( STRING_1 , event . METHOD_7 ( 1 ) , TYPE_2 . METHOD_7 ( VAR_4 class ) ) . METHOD_8 ( ) ; }[0m
[31mExample #18[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException <unk> ) { } int c = TYPE_1 . METHOD_3 ( ) ; int <unk> = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( <unk> ) ) ; TYPE_1 . METHOD_6 ( <unk> ) ; TYPE_1 . METHOD_7 ( c ) ; TYPE_2 . METHOD_8 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; fail ( ) ; } catch ( java.lang.NullPointerException <unk> ) { } int c = TYPE_1 . METHOD_3 ( ) ; int <unk> = TYPE_1 . METHOD_4 ( c ) ; METHOD_5 ( TYPE_1 . METHOD_2 ( <unk> ) ) ; TYPE_1 . METHOD_6 ( <unk> ) ; TYPE_1 . METHOD_7 ( c ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { try { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_6 ( TYPE_1 ) ; TYPE_2 . METHOD_6 ( c ) ; } }[0m
[31mExample #19[0m
Src : protected void METHOD_1 ( ) { <unk> <unk> = new <unk> ( ) ; <unk> . METHOD_2 ( VAR_1 ) ; <unk> . METHOD_3 ( VAR_2 ) ; <unk> . METHOD_4 ( true ) ; <unk> . METHOD_5 ( <unk> ) ; <unk> ( VAR_3 ) . <unk> ( <unk> ) . METHOD_6 ( ) ; <unk> ( VAR_3 . get ( VAR_1 ) ) . <unk> ( <unk> ) ; METHOD_7 ( false ) ; }[0m
Trg : protected void METHOD_1 ( ) { <unk> <unk> = new <unk> ( ) ; <unk> . METHOD_2 ( VAR_1 ) ; <unk> . METHOD_3 ( VAR_2 ) ; <unk> . METHOD_4 ( true ) ; <unk> ( VAR_3 ) . <unk> ( <unk> ) . METHOD_6 ( ) ; <unk> ( VAR_3 . get ( VAR_1 ) ) . <unk> ( <unk> ) ; METHOD_7 ( false ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( VAR_1 ) ; TYPE_1 . METHOD_2 ( VAR_2 ) ; super . METHOD_4 ( true ) ; METHOD_7 ( false ) ; }[0m
[31mExample #20[0m
Src : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new <unk> ( STRING_2 ) ; } else if ( ( VAR_2 ) == ( METHOD_2 ( ) ) ) { throw new TYPE_1 ( STRING_3 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Trg : public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( ( null == path ) || ( path . equals ( STRING_1 ) ) ) && ( ( null == VAR_1 ) || ( VAR_1 . equals ( STRING_1 ) ) ) ) { throw new <unk> ( STRING_2 ) ; } return METHOD_3 ( VAR_3 , path , VAR_1 ) ; }[0m
Pred: public boolean METHOD_1 ( java.lang.String path , java.lang.String VAR_1 ) { if ( ( VAR_2 == null ) || ( VAR_1 . equals ( STRING_1 ) ) ) { return METHOD_3 ( STRING_3 , VAR_1 ) ; } }[0m
[31mExample #21[0m
Src : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 <unk> = this ; <unk> != null ; <unk> = <unk> . METHOD_2 ( ) ) { TYPE_1 obj = <unk> . METHOD_3 ( index , null , this ) ; if ( obj != null ) { ( ( TYPE_2 ) ( obj ) ) . METHOD_4 ( METHOD_5 ( ) ) ; return obj ; } } return null ; }[0m
Trg : protected TYPE_1 METHOD_1 ( int index ) { for ( TYPE_1 <unk> = this ; <unk> != null ; <unk> = <unk> . METHOD_2 ( ) ) { TYPE_1 obj = <unk> . METHOD_3 ( index , null , this ) ; if ( obj != null ) { return obj ; } } return null ; }[0m
Pred: protected TYPE_1 METHOD_1 ( int index ) { TYPE_1 ( TYPE_1 != null ) { TYPE_1 obj = this . METHOD_3 ( index , null , this ) ; return obj ; } return null ; }[0m
[31mExample #22[0m
Src : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } if ( ( VAR_5 ) != null ) { VAR_2 . METHOD_2 ( STRING_4 ) ; VAR_2 . METHOD_2 ( VAR_5 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Trg : private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < java.lang.String > ( VAR_3 ) ; if ( ( VAR_4 ) != null ) { VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( VAR_4 . METHOD_3 ( STRING_2 , STRING_3 ) ) ; } return VAR_2 ; }[0m
Pred: private static java.util.List < java.lang.String > METHOD_1 ( TYPE_1 VAR_1 ) { java.util.List < java.lang.String > VAR_2 = new java.util.ArrayList < > ( VAR_3 ) ; VAR_2 . METHOD_2 ( STRING_1 ) ; VAR_2 . METHOD_2 ( STRING_4 ) ; return VAR_2 ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( ) { TYPE_1 . <unk> <unk> = new TYPE_1 . <unk> ( ) ; <unk> . METHOD_2 ( new java.util.ArrayList ( TYPE_2 . METHOD_3 ( VAR_1 ) ) ) ; <unk> <unk> = new <unk> ( ) ; <unk> . METHOD_4 ( VAR_2 ) ; <unk> . METHOD_5 ( VAR_3 ) ; <unk> ( METHOD_6 ( false ) ) . <unk> ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( <unk> , <unk> ) . METHOD_9 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> <unk> = new <unk> ( ) ; <unk> . METHOD_4 ( VAR_2 ) ; <unk> . METHOD_5 ( VAR_3 ) ; <unk> ( METHOD_6 ( false ) ) . <unk> ( VAR_4 ) . METHOD_7 ( VAR_3 ) ; TYPE_3 . assertEquals ( false , VAR_5 . METHOD_8 ( <unk> , VAR_1 ) . METHOD_9 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( new java.util.ArrayList ( ) ) ; TYPE_3 . METHOD_4 ( false , VAR_5 . METHOD_8 ( VAR_3 ) ) . METHOD_7 ( VAR_3 ) ; }[0m
[31mExample #24[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . <unk> <unk> = new TYPE_1 . <unk> ( ) ; <unk> . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; VAR_2 . METHOD_5 ( ) ; try { VAR_3 . add ( <unk> ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . <unk> <unk> = new TYPE_1 . <unk> ( ) ; <unk> . METHOD_2 ( VAR_1 [ 0 ] ) ; METHOD_3 ( METHOD_4 ( ) ) ; try { VAR_3 . add ( <unk> ) ; METHOD_6 ( STRING_1 ) ; } catch ( TYPE_2 VAR_4 ) { METHOD_7 ( VAR_4 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 . TYPE_1 . TYPE_1 . TYPE_1 ( ) ; ) . METHOD_2 ( METHOD_4 ( ) ) ; METHOD_6 ( STRING_1 ) ; }[0m
[31mExample #25[0m
Src : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ( METHOD_2 ( ) ) == false ) { <unk> ( <unk> . <unk> , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { if ( ! ( METHOD_2 ( ) ) ) { <unk> ( <unk> . <unk> , STRING_1 ) ; throw new java.io.IOException ( ) ; } return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , this , VAR_1 , null ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( int VAR_1 ) throws java.io.IOException { return new TYPE_1 ( VAR_2 , ( - 1 ) , true , true , VAR_1 , null ) ; }[0m
[31mExample #26[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; VAR_1 . METHOD_5 ( ) ; TYPE_1 <unk> = TYPE_2 . <unk> ( 1 ) ; <unk> . <unk> ( VAR_2 [ 1 ] . toString ( ) ) ; try { <unk> . METHOD_6 ( <unk> ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , 0 , false ) ; TYPE_1 <unk> = TYPE_2 . <unk> ( 1 ) ; <unk> . <unk> ( VAR_2 [ 1 ] . toString ( ) ) ; try { <unk> . METHOD_6 ( <unk> ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_8 ( VAR_3 ) ; } }[0m
---------------
Class: Remove statement,Add try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , <unk> . METHOD_3 ( ) ) ; final int VAR_2 = <unk> ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= <unk> ) ) ; VAR_1 . METHOD_7 ( ) ; <unk> . METHOD_7 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 <unk> = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , <unk> . METHOD_3 ( ) ) ) { final int VAR_2 = <unk> ; VAR_1 . METHOD_4 ( VAR_2 ) ; int VAR_3 = VAR_1 . METHOD_5 ( ) ; assertTrue ( STRING_1 , ( ( TYPE_4 . METHOD_6 ( ( VAR_2 - VAR_3 ) ) ) <= <unk> ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 > = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , VAR_2 . METHOD_3 ( ) ) ; final int VAR_2 = VAR_1 . METHOD_5 ( ) ; METHOD_7 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 <unk> = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , <unk> . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; VAR_1 . METHOD_6 ( ) ; <unk> . METHOD_6 ( ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { try ( TYPE_1 <unk> = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , <unk> . METHOD_3 ( ) ) ) { VAR_1 . METHOD_4 ( INT_1 ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 > = new TYPE_1 ( 0 ) ; TYPE_2 VAR_1 = new TYPE_2 ( TYPE_3 . METHOD_2 ( ) , METHOD_3 ( ) ) ; assertTrue ( STRING_1 , ( ( VAR_1 . METHOD_5 ( ) ) >= INT_1 ) ) ; }[0m
---------------
Class: Remove statement,Move existing statements in try block
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; TYPE_1 . METHOD_5 ( STRING_1 ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_3 , STRING_4 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; try { VAR_2 . add ( new TYPE_2 ( ) ) ; } catch ( TYPE_3 VAR_3 ) { METHOD_6 ( VAR_3 , STRING_2 , STRING_4 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . <unk> class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < <unk> > ( ) ) ; VAR_4 . METHOD_5 ( ) ; try { <unk> . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . <unk> class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < <unk> > ( ) ) ; try { <unk> . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . class , new java.lang.Object [ ] { VAR_3 } , new java.lang.Exception ( ) ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . <unk> class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; VAR_4 . METHOD_5 ( ) ; try { <unk> . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . <unk> class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) , null ) ; try { <unk> . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . class , new java.lang.Object [ ] { VAR_3 } , new java.util.ArrayList < TYPE_1 > ( ) ) ; } catch ( TYPE_2 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . <unk> class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; VAR_4 . METHOD_5 ( ) ; try { <unk> . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . <unk> class , new java.lang.String [ ] { STRING_1 } , new java.lang.Object [ ] { VAR_3 } , null ) ; try { <unk> . get ( ) ; METHOD_6 ( STRING_2 ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( VAR_1 , VAR_2 . class , new java.lang.Object [ ] { VAR_3 } ) { VAR_4 . METHOD_5 ( ) ; } catch ( TYPE_1 VAR_5 ) { METHOD_7 ( VAR_5 ) ; } }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; VAR_1 . METHOD_5 ( ) ; try { <unk> . METHOD_6 ( <unk> ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { <unk> . METHOD_6 ( <unk> ( 0 ) ) ; METHOD_7 ( STRING_1 ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { METHOD_2 ( METHOD_3 ( ) ) ; METHOD_4 ( 1 , true ) ; try { try . METHOD_6 ( TYPE_1 ( 0 ) ) ; } catch ( TYPE_1 VAR_2 ) { METHOD_8 ( VAR_2 ) ; } }[0m
---------------
Class: Remove type casting in method body
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object <unk> , TYPE_2 args ) { if ( ( METHOD_2 ( ) . <unk> ( ) ) == null ) { METHOD_3 ( ) . <unk> ( false ) ; } else { METHOD_3 ( ) . <unk> ( ( ( java.lang.Boolean ) ( METHOD_2 ( ) . <unk> ( ) ) ) ) ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object <unk> , TYPE_2 args ) { if ( ( METHOD_2 ( ) . <unk> ( ) ) == null ) { METHOD_3 ( ) . <unk> ( false ) ; } else { METHOD_3 ( ) . <unk> ( METHOD_2 ( ) . <unk> ( ) ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 , java.lang.Object to , TYPE_2 args ) { if ( ( METHOD_2 ( ) ) == null ) { METHOD_3 ( ) ; } else { METHOD_3 ( ) . setEnabled ( METHOD_2 ( ) . METHOD_2 ( ) ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( new TYPE_2 . <unk> ( value ) ) ; } }[0m
Trg : public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( ( ( VAR_1 == INT_1 ) || ( VAR_1 == INT_2 ) ) || ( VAR_1 == INT_3 ) ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + ( ( int ) ( value ) ) ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
Pred: public void METHOD_1 ( final float value ) { int VAR_1 = TYPE_1 . METHOD_2 ( value ) ; if ( VAR_1 == INT_3 ) { VAR_2 . METHOD_3 ( ( ( VAR_3 ) + value ) ) ; } else { VAR_2 . METHOD_4 ( value ) ; } }[0m
---------------
Class: Rename method
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 . <unk> METHOD_1 ( java.lang.Object value ) { TYPE_1 . <unk> result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Trg : public TYPE_1 . <unk> <unk> ( java.lang.Object value ) { TYPE_1 . <unk> result = super . <unk> ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( ( java.lang.String ) ( value ) ) ) ) ; } return result ; }[0m
Pred: public synchronized void init ( java.lang.Object value ) { TYPE_1 . result = super . METHOD_1 ( value ) ; if ( ! ( result . METHOD_2 ( ) ) ) { result . METHOD_3 ( ) . add ( METHOD_4 ( ( java.lang.String ) ( value ) ) ) ; } return result ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 <unk> = new TYPE_1 ( ) ; <unk> . METHOD_2 ( 1 ) ; <unk> . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , <unk> } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Trg : public boolean <unk> ( ) { TYPE_1 <unk> = new TYPE_1 ( ) ; <unk> . METHOD_2 ( 1 ) ; <unk> . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) , <unk> } ) ; return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
Pred: public void METHOD_3 ( ) { TYPE_1 TYPE_1 = new TYPE_1 ( ) ; counter . METHOD_2 ( 1 ) ; METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( new TYPE_2 [ ] { new TYPE_3 ( ) ) ; } return METHOD_4 ( ) . METHOD_6 ( ) ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( <unk> ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ( <unk> ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
Pred: public void init ( java.lang.Object target , java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; VAR_1 . METHOD_2 ( ( ( java.util.ArrayList < TYPE_2 > ) ) ) ; VAR_1 . METHOD_3 ( ) . add ( VAR_2 ) ; VAR_1 . METHOD_4 ( VAR_1 ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( <unk> != null ) { <unk> VAR_2 = ( ( <unk> ) ( <unk> ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( <unk> != null ) { <unk> VAR_2 = ( ( <unk> ) ( <unk> ) ) ; VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void init ( java.lang.Object target , java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; if ( ( != null ) && ( VAR_1 ) ) { VAR_3 = VAR_2 ; } else { VAR_4 = true ; } VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #4[0m
Src : protected boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( <unk> ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( <unk> ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( <unk> ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Trg : protected boolean <unk> ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( <unk> ( VAR_1 . METHOD_4 ( ) ) ) && ( ( METHOD_5 ( ) ) || ( <unk> ( VAR_2 . METHOD_6 ( ) ) ) ) ) && ( <unk> ( METHOD_7 ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ) ; }[0m
Pred: protected void init ( ) { TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; TYPE_1 VAR_2 = new TYPE_1 ( METHOD_3 ( ) ) ; return ( ( this . VAR_1 ) && ( ( VAR_2 . METHOD_6 ( ) ) ) ) && ( ( METHOD_2 ( ) , METHOD_3 ( ) ) ) ; }[0m
[31mExample #5[0m
Src : public boolean METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . <unk> ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Trg : public boolean <unk> ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_2 ( 1 ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; if ( ( ( java.lang.Boolean ) ( METHOD_6 ( ) . <unk> ( ) ) ) ) { METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 , new TYPE_3 ( ) } ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
Pred: public void METHOD_3 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; VAR_1 . METHOD_3 ( INT_1 ) ; METHOD_4 ( ) . METHOD_5 ( true ) ; METHOD_4 ( ) . METHOD_7 ( new TYPE_2 [ ] { VAR_1 ) ; } return METHOD_4 ( ) . METHOD_8 ( ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . <unk> ( ) . METHOD_5 ( ) , TYPE_1 . <unk> ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Trg : protected boolean <unk> ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . <unk> ( ) . METHOD_5 ( ) , TYPE_1 . <unk> ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
Pred: protected boolean init ( ) { return ( METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ) && ( METHOD_4 ( TYPE_1 . TYPE_1 ( ) . METHOD_5 ( ) , TYPE_1 . METHOD_7 ( ) . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) ) ) ; }[0m
[31mExample #7[0m
Src : public TYPE_1 . <unk> METHOD_1 ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . <unk> VAR_4 = new TYPE_1 . <unk> ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Trg : public TYPE_1 . <unk> <unk> ( java.lang.Object value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) <= ( METHOD_3 ( ) ) ; TYPE_1 . <unk> VAR_4 = new TYPE_1 . <unk> ( ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; if ( ! VAR_2 ) { VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; } return VAR_4 ; }[0m
Pred: public void init ( java.lang.Object value value ) { int VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = ( ( ( VAR_3 . length ( ) ) + VAR_1 ) + 1 ) ; VAR_4 . METHOD_4 ( VAR_2 ) ; VAR_4 . METHOD_5 ( TYPE_2 . METHOD_6 ( METHOD_7 ( ) ) ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . <unk> ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . <unk> ( false ) ; } } }[0m
Trg : public void <unk> ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_2 ( ) . <unk> ( false ) ; if ( ! VAR_4 ) { VAR_3 . METHOD_3 ( ) . <unk> ( false ) ; } } }[0m
Pred: public void select ( java.lang.Object VAR_1 , java.lang.Object result ) { java.util.ArrayList < TYPE_1 > VAR_2 = ( ( java.util.ArrayList < TYPE_1 > ) ( result ) ) ; if ( ( VAR_2 . size ( ) ) > 0 ) { VAR_3 . METHOD_3 ( ) . ) ( false ) ; } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 <unk> = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ; <unk> . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 <unk> = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . <unk> ) ( <unk> ) ) . <unk> ( ) ; <unk> . METHOD_2 ( ( result != null ? ( ( java.util.ArrayList < TYPE_3 > ) ( result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ) ; }[0m
Pred: public void init ( java.lang.Object target , java.lang.Object ... ) { TYPE_1 TYPE_1 = ( ( TYPE_1 ) ( target ) ) ; java.lang.Object result = ( ( TYPE_2 . ) ( ) != null ? ( ( java.util.ArrayList < TYPE_3 > result ) ) : new java.util.ArrayList < TYPE_3 > ( ) ) ; }[0m
[31mExample #10[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( <unk> ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( ( java.util.ArrayList < TYPE_2 > ) ( <unk> ) ) ; if ( VAR_1 . METHOD_2 ( VAR_2 ) ) { VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_5 ( ) ; } else { VAR_1 . METHOD_6 ( ) ; } }[0m
Pred: public void init ( java.lang.Object target , java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_2 > VAR_2 = ( VAR_1 instanceof TYPE_2 ) ) ; VAR_1 . METHOD_3 ( ) . add ( METHOD_4 ( ) ) ; VAR_1 . METHOD_6 ( ) ; }[0m
[31mExample #11[0m
Src : public void METHOD_1 ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < <unk> > <unk> = ( ( java.util.ArrayList < <unk> > ) ( <unk> ) ) ; VAR_1 . <unk> = <unk> ; VAR_1 . METHOD_2 ( ) ; }[0m
Trg : public void <unk> ( java.lang.Object target , java.lang.Object <unk> ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < <unk> > <unk> = ( ( java.util.ArrayList < <unk> > ) ( <unk> ) ) ; VAR_1 . <unk> = <unk> ; VAR_1 . METHOD_2 ( ) ; }[0m
Pred: public void init ( java.lang.Object target , java.lang.Object obj ) { TYPE_1 VAR_1 = ( ( TYPE_1 ) ( target ) ) ; java.util.ArrayList < TYPE_1 > > ( ( java.util.ArrayList < > > ) ) ; VAR_1 . b = b ; VAR_1 . METHOD_2 ( ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( java.lang.Object <unk> , java.lang.Object <unk> ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( <unk> ) ) ; TYPE_1 <unk> = VAR_1 . get ( 0 ) ; if ( <unk> != null ) { TYPE_2 . METHOD_2 ( ( ( <unk> ) ( <unk> ) ) , <unk> . getId ( ) ) ; } }[0m
Trg : public void <unk> ( java.lang.Object <unk> , java.lang.Object <unk> ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( ( java.util.ArrayList < TYPE_1 > ) ( <unk> ) ) ; TYPE_1 <unk> = VAR_1 . get ( 0 ) ; if ( <unk> != null ) { TYPE_2 . METHOD_2 ( ( ( <unk> ) ( <unk> ) ) , <unk> . getId ( ) ) ; } }[0m
Pred: public void init ( java.lang.Object obj , java.lang.Object to ) { java.util.ArrayList < TYPE_1 > VAR_1 = ( java.util.ArrayList < TYPE_1 > ) ( TYPE_1 . get ( 0 ) ) ; if ( ! != null ) { TYPE_2 . METHOD_2 ( ( ( ) ) ( VAR_1 . getId ( ) ) ) ; } }[0m
---------------
Class: Rename variable
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( <unk> ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . <unk> ( <unk> . METHOD_6 ( ) ) ; <unk> . METHOD_7 ( VAR_4 ) ; <unk> . <unk> result = <unk> . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Trg : public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( <unk> ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; TYPE_2 . METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( VAR_3 ) ; VAR_4 . <unk> ( <unk> . METHOD_6 ( ) ) ; <unk> . METHOD_7 ( VAR_4 ) ; <unk> . <unk> result = <unk> . METHOD_8 ( VAR_4 . METHOD_9 ( ) ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
Pred: public void METHOD_1 ( ) { java.util.List < TYPE_1 > VAR_1 = VAR_2 . METHOD_2 ( ) . METHOD_3 ( 1L ) ; TYPE_1 VAR_3 = VAR_1 . get ( 0 ) ; VAR_4 . METHOD_5 ( VAR_4 ) ; TYPE_2 . METHOD_4 ( result ) ; TYPE_2 . assertEquals ( VAR_4 , result ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < <unk> . <unk> > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( <unk> . <unk> VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Trg : public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < <unk> . <unk> > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( ) ; for ( <unk> . <unk> VAR_3 : VAR_1 ) { if ( ( ! ( VAR_3 . METHOD_2 ( ) ) ) && ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } } return list ; }[0m
Pred: public static java.util.List < java.lang.String > METHOD_1 ( java.util.List < java.lang.Void > VAR_1 , TYPE_1 < java.lang.String > VAR_2 ) { java.util.List < java.lang.String > list = new java.util.ArrayList < java.lang.String > ( VAR_1 ) ; if ( VAR_2 . METHOD_3 ( VAR_3 . getName ( ) ) ) { list . add ( VAR_3 . getName ( ) ) ; } }[0m
[31mExample #2[0m
Src : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable t ) { METHOD_6 ( t ) ; return new byte [ 0 ] ; } }[0m
Trg : byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_2 ( VAR_1 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; return VAR_2 . METHOD_5 ( ) ; } catch ( java.lang.Throwable fail ) { METHOD_6 ( fail ) ; return new byte [ 0 ] ; } }[0m
Pred: byte [ ] METHOD_1 ( java.lang.Object VAR_1 ) { try { TYPE_1 VAR_2 = new TYPE_1 ( ) ; TYPE_2 VAR_3 = new TYPE_2 ( VAR_2 ) ; VAR_3 . METHOD_3 ( ) ; VAR_3 . METHOD_4 ( ) ; } catch ( java.lang.Throwable t ) { return new byte [ 0 ] ; } }[0m
---------------
Class: Replace fully qualified name with import or vice versa
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) throws <unk> { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . <unk> ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . <unk> ( VAR_1 ) ; assertEquals ( <unk> , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws <unk> { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { { METHOD_2 ( METHOD_3 ( VAR_2 ) . build ( ) ) ; METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } } ; TYPE_2 . <unk> ( VAR_4 . METHOD_4 ( <unk> . METHOD_5 ( VAR_5 class ) ) ) . <unk> ( VAR_1 ) ; <unk> ( <unk> , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.io.IOException { java.util.List < TYPE_1 > VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) { METHOD_2 ( METHOD_3 ( VAR_3 ) . build ( ) ) ; } ; TYPE_2 . ( VAR_4 . METHOD_5 ( VAR_5 class ) ) . assertEquals ( VAR_6 , VAR_6 . METHOD_4 ( ) . size ( ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; VAR_1 . <unk> ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Trg : public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , b , c } ; java.lang.System.out.println ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b ? a : b ; }[0m
Pred: public static int METHOD_1 ( int a , int b , int c ) { int [ ] values = new int [ ] { a , c } ; VAR_1 . ( ( ( STRING_1 + ( TYPE_1 . toString ( values ) ) ) + STRING_2 ) ) ; return a > b b ; }[0m
[31mExample #2[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; <unk> ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; <unk> ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; assertEquals ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( VAR_2 , true ) ; VAR_1 . METHOD_2 ( null , new TYPE_2 ( ) ) ; VAR_1 . METHOD_4 ( null , new TYPE_3 ( ) , new TYPE_2 ( ) ) ; ) ( VAR_3 , VAR_1 . METHOD_3 ( ) ) ; }[0m
[31mExample #3[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( <unk> . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( <unk> . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; <unk> ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 ) throws java.lang.Exception { TYPE_1 VAR_2 = ( ( TYPE_1 ) ( token . METHOD_2 ( STRING_1 ) . METHOD_3 ( ) ) ) ; VAR_2 . METHOD_4 ( VAR_1 ) ; assertEquals ( VAR_1 , VAR_2 . METHOD_5 ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; <unk> ( VAR_5 ) . METHOD_4 ( <unk> ( VAR_1 ) , <unk> . METHOD_5 ( int . class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; <unk> ( VAR_5 ) . METHOD_4 ( <unk> ( VAR_1 ) , <unk> . METHOD_5 ( int . class ) ) ; <unk> ( VAR_2 , true ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = METHOD_2 ( ) ; boolean VAR_2 = VAR_3 . METHOD_3 ( VAR_4 ) ; synchronized ( VAR_5 ) . METHOD_4 ( VAR_1 ( this ) , VAR_1 . METHOD_5 ( int class ) ) ; assertEquals ( VAR_2 , true ) ; }[0m
[31mExample #5[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { <unk> . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; <unk> . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( <unk> . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 <unk> = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( <unk> , VAR_2 ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { <unk> . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; <unk> . METHOD_4 ( ) ; TYPE_2 VAR_1 = ( ( TYPE_2 ) ( <unk> . METHOD_5 ( STRING_2 ) . METHOD_6 ( ) ) ) ; TYPE_3 <unk> = ( ( TYPE_3 ) ( VAR_1 . METHOD_7 ( ) ) ) ; <unk> ( STRING_1 , METHOD_8 ( <unk> , VAR_2 ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { counter . METHOD_2 ( new TYPE_1 ( ) . METHOD_3 ( STRING_1 ) ) ; TYPE_2 . METHOD_4 ( ( TYPE_2 ) ( this . VAR_1 . METHOD_7 ( ) ) ) ; assertEquals ( STRING_1 , METHOD_8 ( to , VAR_2 ) ) ; }[0m
[31mExample #6[0m
Src : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_1 , VAR_9 ) ; assertEquals ( VAR_3 , VAR_10 ) ; }[0m
Trg : private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_2 ) . METHOD_3 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; <unk> ( VAR_1 , VAR_9 ) ; <unk> ( VAR_3 , VAR_10 ) ; }[0m
Pred: private void METHOD_1 ( java.lang.String VAR_1 , byte [ ] VAR_2 , java.lang.String VAR_3 , byte [ ] VAR_4 ) throws java.lang.Exception { TYPE_1 VAR_5 = new TYPE_2 ( VAR_6 ) . METHOD_2 ( VAR_4 ) . build ( ) ; TYPE_3 VAR_7 = TYPE_3 . METHOD_4 ( VAR_5 , VAR_8 ) ; assertEquals ( VAR_3 , VAR_9 ) ; }[0m
[31mExample #7[0m
Src : public void METHOD_1 ( long <unk> , long <unk> , long c , TYPE_1 VAR_1 , TYPE_2 <unk> , TYPE_3 <unk> ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( <unk> ) ) ; super . METHOD_1 ( <unk> , <unk> , c , VAR_1 , <unk> , <unk> ) ; }[0m
Trg : public void METHOD_1 ( long <unk> , long <unk> , long c , TYPE_1 VAR_1 , TYPE_2 <unk> , TYPE_3 <unk> ) throws java.lang.Exception { <unk> ( VAR_2 , TYPE_4 . METHOD_2 ( <unk> ) ) ; super . METHOD_1 ( <unk> , <unk> , c , VAR_1 , <unk> , <unk> ) ; }[0m
Pred: public void METHOD_1 ( long VAR_1 , long c , TYPE_1 VAR_1 , TYPE_2 to , TYPE_3 < TYPE_2 ) throws java.lang.Exception { assertEquals ( VAR_2 , TYPE_4 . METHOD_2 ( token ) ) ; super . METHOD_1 ( super , c , c , VAR_1 , false ) ; }[0m
---------------
Class: Replace generic specification with diamond operator
Golden example (False):
[31mExample #1[0m
Src : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( <unk> . METHOD_3 ( ) ) ; params . METHOD_4 ( <unk> . METHOD_3 ( ) ) ; <unk> = <unk> . METHOD_5 ( new TYPE_2 < TYPE_1 > ( params ) ) ; <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_6 ( ) ; <unk> ( VAR_2 ) . <unk> ( <unk> ) . METHOD_7 ( ) ; <unk> ( VAR_3 ) . <unk> ( <unk> ) . METHOD_8 ( ) ; }[0m
Trg : private void METHOD_1 ( ) { TYPE_1 params = new TYPE_1 ( ) ; params . METHOD_2 ( <unk> . METHOD_3 ( ) ) ; params . METHOD_4 ( <unk> . METHOD_3 ( ) ) ; <unk> = <unk> . METHOD_5 ( new TYPE_2 ( params ) ) ; <unk> ( VAR_1 ) . <unk> ( <unk> ) . METHOD_6 ( ) ; <unk> ( VAR_2 ) . <unk> ( <unk> ) . METHOD_7 ( ) ; <unk> ( VAR_3 ) . <unk> ( <unk> ) . METHOD_8 ( ) ; }[0m
Pred: private void METHOD_1 ( ) { params . METHOD_2 ( ) ; params . METHOD_2 ( METHOD_3 ( ) ) ; params . METHOD_5 ( new TYPE_2 ( params ) . METHOD_6 ( ) ) ; METHOD_7 ( ) . setEnabled ( VAR_3 ) . METHOD_7 ( ) . METHOD_8 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) { TYPE_2 < <unk> > VAR_1 = new TYPE_2 < <unk> > ( ) { public TYPE_3 METHOD_2 ( <unk> VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return <unk> ( new TYPE_6 < TYPE_7 , TYPE_3 > ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { TYPE_2 < <unk> > VAR_1 = new TYPE_2 < <unk> > ( ) { public TYPE_3 METHOD_2 ( <unk> VAR_2 ) throws TYPE_4 { return VAR_3 . METHOD_2 ( VAR_2 ) ; } } ; TYPE_5 VAR_4 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; return <unk> ( new TYPE_6 ( VAR_5 , VAR_2 , VAR_4 ) ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { VAR_1 = new TYPE_2 < > ( ) { public TYPE_3 METHOD_2 ( VAR_2 ) ; TYPE_4 { VAR_3 = new TYPE_5 ( VAR_1 , METHOD_3 ( id ) ) ; } return new TYPE_6 ( VAR_5 , VAR_2 , VAR_2 , VAR_4 ) ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 < <unk> > ( VAR_2 , VAR_3 . <unk> class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . <unk> <unk> ( TYPE_1 VAR_5 , TYPE_1 <unk> ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . <unk> ( VAR_5 , <unk> ) ) ; } } ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . <unk> class ) , VAR_4 , new TYPE_3 < TYPE_1 , TYPE_1 > ( ) { public TYPE_4 . <unk> <unk> ( TYPE_1 VAR_5 , TYPE_1 <unk> ) { return new TYPE_5 ( METHOD_3 ( VAR_6 , VAR_7 class ) . <unk> ( VAR_5 , <unk> ) ) ; } } ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { return METHOD_2 ( VAR_1 , new TYPE_2 ( VAR_2 , VAR_3 . class ) , VAR_4 , new TYPE_1 ( ) { public TYPE_4 . METHOD_6 ( METHOD_3 ( VAR_6 , VAR_7 class ) . . ( VAR_5 , false ) ) ; } }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( <unk> . <unk> ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; METHOD_3 ( <unk> ) ; TYPE_3 . METHOD_4 ( <unk> . METHOD_5 ( ) ) ; TYPE_3 . METHOD_6 ( <unk> . <unk> ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 ( new TYPE_2 ( VAR_1 , null ) ) ) ; METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( ) . METHOD_7 ( ) . METHOD_7 ( ) . METHOD_8 ( TYPE_4 . toString ( ) ) ; }[0m
[31mExample #4[0m
Src : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( <unk> . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( <unk> . <unk> ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) { <unk> = <unk> . METHOD_2 ( new TYPE_1 ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( <unk> . METHOD_4 ( ) ) ; TYPE_3 . METHOD_5 ( <unk> . <unk> ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ) ; }[0m
Pred: public void METHOD_1 ( ) { METHOD_2 ( new TYPE_1 < TYPE_2 > ( new TYPE_2 ( null ) ) ) ; TYPE_3 . METHOD_3 ( ) . METHOD_4 ( ) ; TYPE_3 . METHOD_5 ( ) . METHOD_6 ( ) . METHOD_7 ( TYPE_4 . toString ( ) ) ; }[0m
---------------
Class: Replace if statement with assert statement
Golden example (False):
[31mExample #1[0m
Src : public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 <unk> = VAR_2 . get ( VAR_1 ) ; if ( <unk> == null ) { throw new <unk> ( STRING_2 ) ; } return <unk> . METHOD_3 ( ) ; }[0m
Trg : public int METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 <unk> = VAR_2 . get ( VAR_1 ) ; if ( <unk> == null ) { throw new <unk> ( STRING_2 ) ; } return <unk> . METHOD_3 ( ) ; }[0m
Pred: public int METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } VAR_2 = VAR_2 . get ( VAR_1 ) ; throw new TYPE_1 ( STRING_2 ) ; return METHOD_3 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new java.lang.NullPointerException ( STRING_1 ) ; } METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { assert VAR_1 != null ; METHOD_2 ( ) ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; if ( VAR_2 != null ) { return VAR_2 ; } VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; TYPE_2 value = VAR_1 . METHOD_3 ( ) ; TYPE_1 VAR_2 = VAR_3 . get ( value ) ; VAR_3 . METHOD_4 ( value , VAR_1 ) ; return VAR_1 ; }[0m
---------------
Class: Replace invoked method
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( <unk> ) . METHOD_2 ( 1 , <unk> ) . METHOD_2 ( <unk> , <unk> ) . METHOD_2 ( <unk> , 1 ) . METHOD_3 ( 1 ) . METHOD_4 ( ) ; assertEquals ( <unk> , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( <unk> , VAR_1 . METHOD_5 ( <unk> ) . METHOD_6 ( ) ) ; assertEquals ( <unk> , VAR_1 . METHOD_5 ( <unk> ) . METHOD_6 ( ) ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( <unk> ) . METHOD_2 ( 1 , <unk> ) . METHOD_2 ( <unk> , <unk> ) . METHOD_2 ( <unk> , 1 ) . METHOD_3 ( 1 ) . build ( ) ; assertEquals ( <unk> , VAR_1 . METHOD_5 ( 1 ) . METHOD_6 ( ) ) ; assertEquals ( <unk> , VAR_1 . METHOD_5 ( <unk> ) . METHOD_6 ( ) ) ; assertEquals ( <unk> , VAR_1 . METHOD_5 ( <unk> ) . METHOD_6 ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_2 ( VAR_1 ) . METHOD_2 ( 1 , token ) . METHOD_2 ( 1L , 1 ) . METHOD_4 ( ) ; assertEquals ( INT_4 , VAR_1 . METHOD_5 ( ) ) ; METHOD_6 ( TYPE_1 , VAR_1 . METHOD_5 ( ) ) . METHOD_6 ( ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : static void METHOD_1 ( TYPE_1 <unk> , TYPE_2 <unk> , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( <unk> == null ) ? ( ( double ) ( <unk> . METHOD_2 ( ) ) ) : ( ( double ) ( <unk> . METHOD_2 ( <unk> ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 <unk> ) { VAR_2 = true ; } TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; }[0m
Trg : static void METHOD_1 ( TYPE_1 <unk> , TYPE_2 <unk> , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = false ; try { final double VAR_3 = ( <unk> == null ) ? ( ( double ) ( <unk> . METHOD_2 ( ) ) ) : ( ( double ) ( <unk> . METHOD_2 ( <unk> ) ) ) ; TYPE_3 . assertTrue ( ( VAR_3 == value ) ) ; } catch ( TYPE_4 <unk> ) { VAR_2 = true ; } TYPE_3 . assertEquals ( VAR_2 , VAR_1 ) ; }[0m
Pred: static void METHOD_1 ( TYPE_1 > , TYPE_2 < , double value , boolean VAR_1 ) throws java.lang.Throwable { boolean VAR_2 = true ; try { final double VAR_3 = ( double ) ( VAR_1 . METHOD_2 ( ) ) ; } catch ( TYPE_4 t ) { TYPE_3 . METHOD_3 ( VAR_2 , VAR_1 ) ; } }[0m
[31mExample #2[0m
Src : void METHOD_1 ( ) { if ( VAR_1 ) <unk> ( VAR_2 . <unk> , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Trg : void METHOD_1 ( ) { if ( VAR_1 ) <unk> ( VAR_2 . <unk> , ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
Pred: void METHOD_1 ( ) { if ( VAR_1 ) && ( VAR_2 . ( ( ( ( ( STRING_1 + ( this ) ) + STRING_2 ) + ( VAR_3 ) ) + STRING_3 ) + ( VAR_4 ) ) ) ; VAR_5 . METHOD_2 ( ) ; }[0m
[31mExample #3[0m
Src : public void <unk> ( ) { TYPE_1 <unk> = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( <unk> ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException <unk> ) { } }[0m
Trg : public void <unk> ( ) { TYPE_1 <unk> = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( <unk> ) ; try { while ( true ) { java.lang.String line = VAR_2 . METHOD_2 ( ) ; if ( line != null ) { VAR_3 . <unk> ( STRING_1 , VAR_4 , line ) ; } else { break ; } } } catch ( java.io.IOException <unk> ) { } }[0m
Pred: public void init ( ) { TYPE_1 TYPE_1 = new TYPE_1 ( VAR_1 . METHOD_1 ( ) ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; try { line . METHOD_3 ( STRING_1 , VAR_4 , line ) ; } else { break ; } } catch ( java.io.IOException ) { } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) <unk> ( VAR_4 . <unk> , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Trg : boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) <unk> ( VAR_4 . <unk> , ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = false ; return true ; } return false ; }[0m
Pred: boolean METHOD_1 ( ) { if ( VAR_1 ) { if ( ( VAR_2 ) || ( VAR_3 ) ) && ( VAR_4 . error ( STRING_1 + ( VAR_5 ) ) ) ; VAR_6 = true ; VAR_1 = true ; return true ; } return false ; }[0m
[31mExample #5[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String <unk> , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , <unk> ) ; java.lang.Object value = VAR_4 < java.lang.Object > METHOD_2 ( TYPE_3 . <unk> ( VAR_1 . toString ( ) ) , <unk> ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String <unk> , java.util.Map < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , <unk> ) ; java.lang.Object value = VAR_4 < java.lang.Object > getValue ( TYPE_3 . <unk> ( VAR_1 . toString ( ) ) , <unk> ) ; VAR_2 . put ( VAR_3 , value ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 , java.lang.String < TYPE_2 < TYPE_1 , java.lang.String > , java.lang.Object > VAR_2 ) { TYPE_2 < TYPE_1 , java.lang.String > VAR_3 = new TYPE_2 < TYPE_1 , java.lang.String > ( VAR_1 , null ) ; java.lang.Object value = VAR_4 . put ( VAR_3 , value ) ; }[0m
[31mExample #6[0m
Src : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
Trg : protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; METHOD_4 ( ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . METHOD_5 ( STRING_3 ) ; return true ; }[0m
Pred: protected boolean METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 , int VAR_3 ) { VAR_4 . info ( STRING_1 ) ; VAR_1 . METHOD_2 ( VAR_5 ) ; METHOD_3 ( VAR_1 , 0 , VAR_6 ) ; VAR_4 . METHOD_5 ( STRING_2 ) ; VAR_4 . info ( STRING_3 ) ; return true ; }[0m
[31mExample #7[0m
Src : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) <unk> ( TYPE_2 . <unk> , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Trg : private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_2 >= 0 ) { if ( VAR_4 ) <unk> ( TYPE_2 . <unk> , ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; VAR_3 . METHOD_4 ( VAR_2 ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; } }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_2 ( VAR_1 , false ) ; int VAR_2 = VAR_3 . METHOD_3 ( VAR_1 ) ; if ( VAR_4 ) && ( TYPE_2 . ( ( ( STRING_1 + VAR_2 ) + STRING_2 ) + VAR_1 ) ) ; METHOD_5 ( VAR_2 , VAR_1 ) ; }[0m
[31mExample #8[0m
Src : public void METHOD_1 ( <unk> <unk> ) { super . METHOD_1 ( <unk> ) ; if ( <unk> == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( <unk> . getName ( ) , STRING_1 ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_4 ( <unk> . getName ( ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
Trg : public void METHOD_1 ( <unk> <unk> ) { super . METHOD_1 ( <unk> ) ; if ( <unk> == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( STRING_1 . equals ( <unk> . getName ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_2 . equals ( <unk> . getName ( ) ) ) { METHOD_6 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { super . METHOD_1 ( true ) ; if ( item == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_4 ( TYPE_1 . getName ( ) ( STRING_2 ) , STRING_2 ) ) { METHOD_6 ( ) ; } }[0m
[31mExample #9[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . <unk> ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) . <unk> ( ) ) ) ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . <unk> ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; VAR_4 . METHOD_3 ( ) ; TYPE_3 . assertEquals ( VAR_5 , VAR_4 . METHOD_5 ( ) . <unk> ( ) ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { TYPE_1 VAR_1 = new TYPE_1 ( ( STRING_1 + ( VAR_2 ) ) , VAR_3 . ) ; TYPE_2 < TYPE_1 > VAR_4 = METHOD_2 ( VAR_1 ) ; TYPE_3 . METHOD_4 ( ( ( VAR_5 ) == ( VAR_4 . METHOD_5 ( ) ) ) ) ; }[0m
[31mExample #10[0m
Src : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Trg : public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . getId ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
Pred: public java.lang.Object METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { VAR_2 . METHOD_2 ( ) . METHOD_3 ( VAR_3 ) ; VAR_4 . METHOD_4 ( ) . put ( VAR_2 . METHOD_5 ( ) , VAR_2 ) ; VAR_4 . METHOD_6 ( ) . add ( VAR_2 ) ; return null ; }[0m
[31mExample #11[0m
Src : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . <unk> ( ) . <unk> ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . <unk> ( ) . METHOD_7 ( ) ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . <unk> ( ) . getId ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . <unk> ( ) . METHOD_7 ( ) ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( ) . METHOD_3 ( TYPE_1 . METHOD_4 ( ) . METHOD_5 ( ) . get ( TYPE_1 . . toString ( ) , TYPE_1 . METHOD_6 ( ) , TYPE_1 . METHOD_7 ( ) . METHOD_7 ( ) ) ) ; }[0m
[31mExample #12[0m
Src : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { <unk> ( VAR_1 ) . <unk> ( VAR_2 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . <unk> class ) ) ; <unk> ( VAR_4 ) . <unk> ( VAR_2 ) . METHOD_4 ( TYPE_3 . <unk> ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; <unk> . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; <unk> . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { <unk> ( VAR_1 ) . <unk> ( VAR_2 ) . METHOD_2 ( TYPE_3 . <unk> ( ) ) ; <unk> ( VAR_4 ) . <unk> ( VAR_2 ) . METHOD_4 ( TYPE_3 . <unk> ( ) ) ; VAR_2 . METHOD_5 ( VAR_5 , VAR_6 ) ; <unk> . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; <unk> . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) throws TYPE_1 , TYPE_2 { while ( VAR_1 ) . METHOD_2 ( TYPE_3 . METHOD_3 ( VAR_3 . class ) ) ; if ( VAR_4 ) . METHOD_5 ( VAR_5 ) . METHOD_7 ( VAR_7 , VAR_1 ) ; METHOD_7 . METHOD_6 ( VAR_5 ) . METHOD_7 ( VAR_8 , VAR_4 ) ; }[0m
[31mExample #13[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 <unk> = <unk> . METHOD_2 ( VAR_1 class ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( true ) ; TYPE_2 . METHOD_4 ( <unk> , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; <unk> . METHOD_5 ( <unk> ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 <unk> = <unk> . METHOD_2 ( VAR_1 class ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( true ) ; TYPE_2 . METHOD_4 ( <unk> , id , new TYPE_3 ( ) , new java.lang.Object ( ) ) ; <unk> . METHOD_5 ( <unk> ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . <unk> ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 TYPE_1 = TYPE_1 . METHOD_2 ( VAR_1 class ) . setEnabled ( true ) ; METHOD_6 ( true ) ; METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_7 ( id ) ) ; } }[0m
[31mExample #14[0m
Src : protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 <unk> ) { return <unk> . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 <unk> ) { return <unk> . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { VAR_1 . <unk> ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 <unk> ) { return <unk> . METHOD_4 ( ) ; } } , VAR_2 . METHOD_5 ( ) ) ; VAR_1 . <unk> ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 <unk> ) { return <unk> . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) { public java.lang.String METHOD_3 ( TYPE_2 ) { } } ; VAR_1 . METHOD_2 ( new TYPE_1 < TYPE_2 > ( ) ) { return true . METHOD_6 ( ) ; } } , VAR_2 . METHOD_7 ( ) ) ; }[0m
[31mExample #15[0m
Src : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . <unk> ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( <unk> . getId ( ) ) ) ; TYPE_2 <unk> = VAR_1 . get ( VAR_3 < java.lang.Integer > METHOD_4 ( VAR_4 ) , VAR_5 ) ; if ( <unk> . <unk> ( ) ) { return true ; } } catch ( java.lang.Exception <unk> ) { } return false ; }[0m
Trg : public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . <unk> ( ) . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( <unk> . getId ( ) ) ) ; TYPE_2 <unk> = VAR_1 . get ( VAR_3 < java.lang.Integer > getValue ( VAR_4 ) , VAR_5 ) ; if ( <unk> . <unk> ( ) ) { return true ; } } catch ( java.lang.Exception <unk> ) { } return false ; }[0m
Pred: public boolean METHOD_1 ( ) { try { TYPE_1 < TYPE_2 > VAR_1 = TYPE_3 . METHOD_2 ( ) . METHOD_3 ( VAR_2 , new TYPE_4 ( this . toString ( ) ) ) ; TYPE_2 VAR_1 = VAR_1 . get ( VAR_4 ) ; return true ; } catch ( java.lang.Exception { ) { } return false ; }[0m
[31mExample #16[0m
Src : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . <unk> ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Trg : public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( getName ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_5 > ) ( VAR_2 . <unk> ( ) ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
Pred: public java.util.List < TYPE_1 > METHOD_1 ( java.util.List < TYPE_2 > VAR_1 ) { TYPE_3 VAR_2 = VAR_3 . METHOD_2 ( VAR_4 , new TYPE_4 ( METHOD_3 ( ) , VAR_1 , false ) ) ; java.util.List < TYPE_5 > VAR_5 = ( ( java.util.List < TYPE_2 > ) ( VAR_2 ) ) ; return METHOD_4 ( VAR_5 ) ; }[0m
[31mExample #17[0m
Src : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_3 ( <unk> . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; <unk> ( true ) . <unk> ( <unk> ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( <unk> , VAR_4 ) ; }[0m
Trg : public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . <unk> ( <unk> . METHOD_4 ( ) . toString ( ) ) ; parameters . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; <unk> ( true ) . <unk> ( <unk> ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( <unk> , VAR_4 ) ; }[0m
Pred: public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 , STRING_2 , STRING_3 ) ; VAR_1 . METHOD_5 ( VAR_1 ) ; parameters . METHOD_6 ( VAR_3 ) ; METHOD_7 ( true ) . METHOD_7 ( VAR_1 , null ) ; TYPE_2 . METHOD_8 ( TYPE_1 , VAR_4 ) ; }[0m
[31mExample #18[0m
Src : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( <unk> ( ) . METHOD_4 ( ) , <unk> ( ) . METHOD_5 ( ) ) ; METHOD_6 ( <unk> ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( <unk> ( ) . METHOD_4 ( ) , <unk> ( ) . <unk> ( ) ) ; METHOD_6 ( <unk> ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( ( ( ) . METHOD_4 ( ) , VAR_1 ) ) METHOD_5 ( ) ; METHOD_6 ( METHOD_7 ( ) . METHOD_4 ( ) ) ; METHOD_2 ( ) . METHOD_7 ( ) ; return null ; }[0m
[31mExample #19[0m
Src : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { <unk> ( VAR_1 ) ; TYPE_1 . <unk> ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Trg : private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { <unk> ( VAR_1 ) ; TYPE_1 . <unk> ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > getValue ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
Pred: private boolean METHOD_1 ( ) { if ( METHOD_2 ( ) ) { VAR_1 ( VAR_1 ) ; TYPE_1 . TYPE_1 ( ) . METHOD_3 ( ) . add ( java.lang.String . METHOD_4 ( STRING_1 , VAR_2 < java.lang.Integer > METHOD_5 ( VAR_3 ) ) ) ; return false ; } return true ; }[0m
[31mExample #20[0m
Src : private void METHOD_1 ( ) { <unk> ( METHOD_2 ( ) . METHOD_3 ( ) ) . <unk> ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < <unk> > ( ) ; <unk> ( METHOD_4 ( ) . METHOD_5 ( ) ) . <unk> ( VAR_3 ) ; <unk> ( VAR_1 . METHOD_6 ( VAR_3 ) ) . <unk> ( VAR_2 ) ; }[0m
Trg : private void METHOD_1 ( ) { <unk> ( METHOD_2 ( ) . METHOD_3 ( ) ) . <unk> ( VAR_1 ) ; VAR_2 = new java.util.ArrayList < <unk> > ( ) ; <unk> ( METHOD_4 ( ) . getId ( ) ) . <unk> ( VAR_3 ) ; <unk> ( VAR_1 . METHOD_6 ( VAR_3 ) ) . <unk> ( VAR_2 ) ; }[0m
Pred: private void METHOD_1 ( ) { java.lang.Thread ( METHOD_2 ( ) . METHOD_3 ( ) ) . VAR_1 ( VAR_1 ) ; if ( METHOD_4 ( ) . METHOD_5 ( ) ) . setEnabled ( VAR_3 ) ; while ( VAR_1 . METHOD_6 ( VAR_3 ) ) . ) ( VAR_2 ) ; }[0m
[31mExample #21[0m
Src : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : VAR_3 . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . <unk> ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Trg : protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : <unk> . error ( java.lang.String . METHOD_4 ( STRING_1 , TYPE_2 . <unk> ( ) . METHOD_5 ( ) ) ) ; return ; case VAR_4 : METHOD_6 ( VAR_1 ) ; TYPE_2 . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( TYPE_2 . METHOD_3 ( ) ) ; switch ( VAR_1 ) { case VAR_2 : error . error ( STRING_1 , TYPE_2 . METHOD_5 ( ) ) ; return ; case . METHOD_7 ( ) . METHOD_8 ( false ) ; return ; } super . METHOD_1 ( ) ; }[0m
[31mExample #22[0m
Src : protected void METHOD_1 ( ) { if ( ( TYPE_1 . <unk> ( ) . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . <unk> ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Trg : protected void METHOD_1 ( ) { if ( ( TYPE_1 . <unk> ( ) . <unk> ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . <unk> ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_6 ( ) ; TYPE_1 . METHOD_7 ( METHOD_8 ( ) ) ; }[0m
Pred: protected void METHOD_1 ( ) { if ( ( TYPE_1 . METHOD_2 ( ) ) != ( VAR_1 ) ) { TYPE_2 . METHOD_3 ( TYPE_1 . getName ( ) . METHOD_4 ( ) , TYPE_1 . METHOD_5 ( ) ) ; } TYPE_1 . METHOD_7 ( METHOD_8 ( METHOD_8 ( ) ) ) ; }[0m
[31mExample #23[0m
Src : public void METHOD_1 ( <unk> <unk> ) { super . METHOD_1 ( <unk> ) ; if ( <unk> == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( <unk> == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( TYPE_1 . METHOD_6 ( <unk> . getName ( ) , STRING_1 ) ) { METHOD_7 ( ) ; } else if ( TYPE_1 . METHOD_6 ( <unk> . getName ( ) , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
Trg : public void METHOD_1 ( <unk> <unk> ) { super . METHOD_1 ( <unk> ) ; if ( <unk> == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( <unk> == ( METHOD_4 ( ) ) ) { METHOD_5 ( ) ; } else if ( STRING_1 . equals ( <unk> . getName ( ) ) ) { METHOD_7 ( ) ; } else if ( STRING_2 . equals ( <unk> . getName ( ) ) ) { METHOD_8 ( ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 state ) { super . METHOD_1 ( true ) ; if ( == == ( METHOD_2 ( ) ) ) { METHOD_3 ( ) ; } else if ( TYPE_1 . METHOD_6 ( ) , STRING_1 ) { } else if ( TYPE_1 . METHOD_6 ( STRING_2 , STRING_2 ) ) { METHOD_8 ( ) ; } }[0m
[31mExample #24[0m
Src : private void METHOD_1 ( <unk> <unk> ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( <unk> . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Trg : private void METHOD_1 ( <unk> <unk> ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( <unk> . <unk> ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
Pred: private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( VAR_1 ) == null ) { VAR_1 = new java.util.HashMap < java.lang.String , java.lang.String > ( ) ; } VAR_1 . put ( token . METHOD_2 ( ) . toString ( ) , TYPE_1 . name ( ) ) ; }[0m
[31mExample #25[0m
Src : protected boolean METHOD_1 ( ) { boolean <unk> = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { <unk> ( VAR_1 ) ; <unk> = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) ) { <unk> ( VAR_3 ) ; <unk> = false ; } return <unk> ; }[0m
Trg : protected boolean METHOD_1 ( ) { boolean <unk> = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { <unk> ( VAR_1 ) ; <unk> = false ; } else if ( ( METHOD_3 ( ) ) && ( ( TYPE_1 . METHOD_2 ( ) . <unk> ( ) ) != ( VAR_2 ) ) ) { <unk> ( VAR_3 ) ; <unk> = false ; } return <unk> ; }[0m
Pred: protected boolean METHOD_1 ( ) { boolean true = true ; if ( ( TYPE_1 . METHOD_2 ( ) ) == null ) { VAR_1 = false ; } else if ( ( METHOD_3 ( ) . METHOD_4 ( ) ) != ( VAR_2 ) ) { VAR_1 = false ; } return false ; }[0m
[31mExample #26[0m
Src : protected void METHOD_1 ( ) { <unk> <unk> = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . <unk> ( ) . METHOD_4 ( ) ) ; if ( <unk> != null ) { <unk> . METHOD_5 ( TYPE_2 . METHOD_6 ( <unk> . METHOD_7 ( ) , <unk> . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( <unk> ) ; }[0m
Trg : protected void METHOD_1 ( ) { <unk> <unk> = TYPE_1 . METHOD_2 ( ) . METHOD_3 ( ) . get ( TYPE_1 . <unk> ( ) . getId ( ) ) ; if ( <unk> != null ) { <unk> . METHOD_5 ( TYPE_2 . METHOD_6 ( <unk> . METHOD_7 ( ) , <unk> . METHOD_8 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( <unk> ) ; }[0m
Pred: protected void METHOD_1 ( ) { TYPE_1 VAR_1 = TYPE_1 . METHOD_2 ( ) . get ( TYPE_1 . METHOD_5 ( ) . METHOD_4 ( ) ) ; try { METHOD_5 ( TYPE_2 . METHOD_6 ( state . METHOD_7 ( ) ) ) ; } TYPE_1 . METHOD_9 ( ) . METHOD_10 ( ) ) ; }[0m
[31mExample #27[0m
Src : protected TYPE_1 . <unk> METHOD_1 ( <unk> VAR_1 , <unk> id , java.lang.String name , java.util.List < TYPE_1 . <unk> > VAR_2 ) { for ( TYPE_1 . <unk> <unk> : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( <unk> . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( <unk> . METHOD_2 ( ) ) ) ) ) { return <unk> ; } } return null ; }[0m
Trg : protected TYPE_1 . <unk> METHOD_1 ( <unk> VAR_1 , <unk> id , java.lang.String name , java.util.List < TYPE_1 . <unk> > VAR_2 ) { for ( TYPE_1 . <unk> <unk> : VAR_2 ) { if ( ( ( id != null ) && ( id . equals ( <unk> . getId ( ) ) ) ) || ( ( name != null ) && ( name . equals ( <unk> . getName ( ) ) ) ) ) { return <unk> ; } } return null ; }[0m
Pred: protected TYPE_1 TYPE_1 ( ( VAR_1 VAR_1 , id id , java.lang.String name , java.util.List < TYPE_1 > VAR_2 ) { for ( TYPE_1 . values : VAR_1 ) { if ( ( name != null ) && ( name . equals ( METHOD_2 ( ) ) ) ) { return ; } } return null ; }[0m
[31mExample #28[0m
Src : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 <unk> = <unk> . METHOD_2 ( VAR_1 class ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( true ) ; TYPE_2 . METHOD_4 ( <unk> , id , new TYPE_3 ( ) ) ; <unk> . METHOD_5 ( <unk> ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . METHOD_8 ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Trg : public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 <unk> = <unk> . METHOD_2 ( VAR_1 class ) ; <unk> ( <unk> . METHOD_3 ( ) ) . <unk> ( true ) ; TYPE_2 . METHOD_4 ( <unk> , id , new TYPE_3 ( ) ) ; <unk> . METHOD_5 ( <unk> ) . METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new java.lang.Object [ ] { TYPE_4 . <unk> ( ) , TYPE_4 . METHOD_7 ( id ) } ) ; }[0m
Pred: public void METHOD_1 ( ) throws java.lang.Exception { java.lang.String id = STRING_1 ; TYPE_1 TYPE_1 = TYPE_1 . METHOD_2 ( VAR_1 class ) . setEnabled ( true ) ; TYPE_2 . METHOD_4 ( event ) ; METHOD_6 ( TYPE_4 . METHOD_7 ( VAR_2 ) , new TYPE_1 ( ) , TYPE_4 . METHOD_7 ( id ) ) ; }[0m
---------------
================
Duration: 0:02:13.419887

Start conducting one shot learning experiment for Defects4J...
Top-1 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-3 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-5 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-10 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0
Top-50 accuracy on Defects4J for same edit representations: 0 / 8 = 0.0

Top-1 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-3 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-5 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-10 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
Top-50 accuracy on Defects4J for other edit representations: 0 / 12 = 0.0
================
Correct Examples
================
================
Incorrect Examples
Class: ['condBlockExcAdd']
Golden example (False):
[31mExample #1[0m
Src : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Trg : public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case - 1 : if ( VAR_1 == VAR_4 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return - VAR_1 ; case 0 : return 0L ; case 1 : return VAR_1 ; } long VAR_3 = VAR_1 * VAR_2 ; if ( VAR_3 / VAR_2 != VAR_1 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 + VAR_2 ) ; } return VAR_3 ; }[0m
Pred: public static long METHOD_1 ( long VAR_1 , int VAR_2 ) { switch ( VAR_2 ) { case 0 : return - VAR_1 ; if ( VAR_3 == VAR_2 ) { case 1 : return VAR_1 + VAR_2 ; } case VAR_3 : VAR_1 = VAR_2 ; if ( VAR_3 != VAR_2 ) { throw new TYPE_1 ( STRING_1 + VAR_1 + STRING_2 VAR_2 ) ; } return VAR_3 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }[0m
Trg : public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; long VAR_6 = ( long ) VAR_2 ; long VAR_7 = ( long ) VAR_3 ; if ( VAR_6 * VAR_7 >= ( long ) VAR_8 ) { throw new TYPE_2 ( VAR_6 * VAR_7 , VAR_8 , false ) ; } this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; }[0m
Pred: public VAR_1 ( int VAR_2 , int VAR_3 ) { super ( VAR_2 , VAR_3 ) ; this . rows = VAR_2 ; this . VAR_4 = VAR_3 ; if ( ( this . VAR_5 ) != null ) { this . VAR_4 = VAR_3 ; this . VAR_5 = new TYPE_1 ( 0.0 ) ; } }[0m
---------------
Class: ['condBlockOthersAdd']
Golden example (False):
[31mExample #1[0m
Src : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Trg : void add ( String VAR_1 ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } char c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) || c == CHAR_1 ) && METHOD_3 ( METHOD_4 ( ) ) ) { append ( STRING_1 ) ; } else if ( c == CHAR_2 && METHOD_4 ( ) == CHAR_2 ) { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
Pred: void add ( ( java.io.InputStream VAR_1 ) ) { METHOD_1 ( ) ; if ( VAR_1 . length ( ) == 0 ) { return ; } finally c = VAR_1 . METHOD_2 ( 0 ) ; if ( ( METHOD_3 ( c ) ) == CHAR_1 ) { METHOD_3 ( METHOD_4 ( ) ) ; } else { append ( STRING_1 ) ; } append ( VAR_1 ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( this . METHOD_3 ( ) . METHOD_4 ( ) . METHOD_5 ( ) ) { new TYPE_3 ( ) . METHOD_6 ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
Pred: public TYPE_1 METHOD_1 ( ) throws TYPE_2 { if ( ( VAR_2 ) == null ) { VAR_1 = new java.util.ArrayList < TYPE_1 > ( ) ; } return VAR_1 . METHOD_2 ( VAR_2 , VAR_3 ) ; }[0m
---------------
Class: ['condBlockRetAdd']
Golden example (False):
[31mExample #1[0m
Src : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Trg : public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null || VAR_2 == null ) { return VAR_1 == null && VAR_2 == null ; } else if ( METHOD_2 ( VAR_1 ) ) { return METHOD_2 ( VAR_2 ) && METHOD_3 ( VAR_1 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
Pred: public static boolean METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == null ) { return VAR_1 == null ; } else if ( VAR_1 == null ) { return false ; } else if ( METHOD_2 ( VAR_2 ) ) { return METHOD_2 ( VAR_2 , VAR_2 ) ; } else { return VAR_1 . equals ( VAR_2 ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { return VAR_1 . METHOD_1 ( ) ; }[0m
Trg : public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { if ( TYPE_4 . METHOD_2 ( VAR_1 . METHOD_3 ( ) . METHOD_4 ( ) ) ) { return new TYPE_5 ( ) . answer ( VAR_1 ) ; } return VAR_1 . METHOD_1 ( ) ; }[0m
Pred: public TYPE_1 answer ( TYPE_2 VAR_1 ) throws TYPE_3 { TYPE_1 result = VAR_1 . METHOD_1 ( ) ; return result == null ? null : null ; }[0m
[31mExample #2[0m
Src : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Trg : public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_4 || VAR_5 ) { return VAR_6 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
Pred: public TYPE_1 add ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( VAR_1 ) ; if ( VAR_1 == null ) { return VAR_2 ; } return METHOD_2 ( VAR_2 + VAR_1 . METHOD_3 ( ) , VAR_3 + VAR_1 . METHOD_4 ( ) ) ; }[0m
[31mExample #3[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( METHOD_10 ( ) ) { return ; } if ( VAR_1 . METHOD_2 ( ) ) { for ( String VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; if ( ! METHOD_5 ( VAR_2 ) ) { TYPE_2 VAR_4 = VAR_3 ; if ( ! METHOD_6 ( VAR_2 ) ) { VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } METHOD_9 ( VAR_2 , VAR_4 , null ) ; } } } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) ) { for ( java.lang.Integer VAR_2 : VAR_1 . METHOD_3 ( ) ) { TYPE_2 VAR_3 = VAR_1 . METHOD_4 ( VAR_2 ) ; break ; VAR_4 = METHOD_7 ( VAR_5 ) . METHOD_8 ( VAR_3 ) ; } else { VAR_9 ( VAR_2 , VAR_4 , null ) ; } } }[0m
[31mExample #4[0m
Src : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Trg : boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ; VAR_2 != null ; VAR_2 = VAR_2 . METHOD_4 ( ) ) { if ( VAR_3 ) { if ( VAR_1 . METHOD_5 ( ) . METHOD_6 ( ) != VAR_5 ) { return false ; } break ; } else if ( VAR_4 ) { return false ; } } return true ; }[0m
Pred: boolean METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 == null ) { return false ; } for ( TYPE_2 VAR_2 = VAR_1 . METHOD_3 ( ) ) { VAR_2 = VAR_2 . METHOD_4 ( ) ; break ; } else { if ( VAR_4 ) { return false ; } } return false ; }[0m
---------------
Class: ['notClassified']
Golden example (False):
[31mExample #1[0m
Src : public TYPE_1 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_1 [ ] out = ( TYPE_1 [ ] ) TYPE_3 . METHOD_2 ( VAR_3 . get ( 0 ) . getClass ( ) , VAR_1 ) ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Trg : public TYPE_4 [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { throw new TYPE_2 ( VAR_2 , VAR_1 ) ; } final TYPE_4 [ ] out = new TYPE_4 [ VAR_1 ] ; for ( int i = 0 ; i < VAR_1 ; i ++ ) { out [ i ] = METHOD_1 ( ) ; } return out ; }[0m
Pred: public java.lang.String [ ] METHOD_1 ( int VAR_1 ) throws TYPE_2 { if ( VAR_1 <= 0 ) { for ( int i = 0 ; i ++ ) ; out [ i ] = null ; } return out ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final int VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }[0m
Trg : public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { double sum = 0 ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { final double VAR_3 = VAR_1 [ i ] - VAR_2 [ i ] ; sum += VAR_3 * VAR_3 ; } return TYPE_1 . METHOD_2 ( sum ) ; }[0m
Pred: public static double METHOD_1 ( int [ ] VAR_1 , int [ ] VAR_2 ) { int sum = 0 ; i ++ ; i = VAR_3 [ i ] ; sum += VAR_3 ; }[0m
---------------
Class: ['singleLine']
Golden example (False):
[31mExample #1[0m
Src : static float METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Trg : static int METHOD_1 ( String VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
Pred: static float METHOD_1 ( short VAR_1 ) { return METHOD_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Trg : public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; while ( VAR_1 . METHOD_2 ( ) ) { try { VAR_2 . METHOD_1 ( data ) ; if ( VAR_3 ) { return ; } else { error = null ; } } catch ( TYPE_3 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } catch ( TYPE_2 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } } if ( error != null ) { throw error ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 data ) { TYPE_2 error = null ; VAR_1 . start ( ) ; try { VAR_1 . METHOD_1 ( data ) ; if ( VAR_3 ) { error = null ; } } catch ( TYPE_4 VAR_4 ) { error = METHOD_3 ( VAR_4 ) ; } throw error ; }[0m
[31mExample #2[0m
Src : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final int VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Trg : private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , TYPE_2 { final double VAR_4 = VAR_2 * VAR_3 ; final double VAR_5 = VAR_4 / FLOAT_1 ; final double VAR_6 = VAR_4 * ( VAR_2 + VAR_3 + 1 ) / FLOAT_2 ; final double VAR_7 = ( VAR_1 - VAR_5 ) / TYPE_3 . METHOD_2 ( VAR_6 ) ; final TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
Pred: private double METHOD_1 ( final double VAR_1 , final int VAR_2 , final int VAR_3 ) throws TYPE_1 , final int VAR_5 = VAR_5 ; final double VAR_5 = ( VAR_1 + VAR_5 ) / TYPE_4 ; TYPE_4 VAR_8 = new TYPE_4 ( 0 , 1 ) ; return INT_1 * VAR_8 . METHOD_3 ( VAR_7 ) ; }[0m
---------------
Class: ['wrapsIf']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
Trg : public void METHOD_1 ( ) { if ( this . VAR_1 != VAR_2 && this . VAR_1 != VAR_3 ) { throw new TYPE_1 ( STRING_1 ) ; } if ( this . VAR_1 == VAR_2 ) { VAR_4 = TYPE_2 . METHOD_2 ( ) ; } this . VAR_1 = VAR_5 ; }[0m
Pred: public void METHOD_1 ( ) { if ( this . VAR_1 ) { if ( this . VAR_1 != this ) { throw new TYPE_1 ( STRING_1 ) ; } throw new TYPE_1 ( STRING_1 ) ; } VAR_4 = TYPE_2 . METHOD_2 ( ) ; this . VAR_1 = VAR_5 ; }[0m
+++++++++++++++
[31mExample #1[0m
Src : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
Trg : public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } if ( VAR_1 == null || VAR_2 == null ) { return false ; } if ( VAR_1 instanceof String && VAR_2 instanceof String ) { return VAR_1 . equals ( VAR_2 ) ; } return TYPE_2 . METHOD_1 ( VAR_1 , false , 0 , VAR_2 , 0 , TYPE_3 . METHOD_2 ( VAR_1 . length ( ) , VAR_2 . length ( ) ) ) ; }[0m
Pred: public static boolean equals ( TYPE_1 VAR_1 , TYPE_1 VAR_2 ) { if ( VAR_1 == VAR_2 ) { return true ; } else if ( VAR_1 == null ) { if ( VAR_1 == null ) { return false ; } return false ; } return VAR_1 . equals ( VAR_2 ) ; }[0m
---------------
Class: ['wrapsIfElse']
Golden example (False):
[31mExample #1[0m
Src : public void METHOD_1 ( TYPE_1 VAR_1 ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; }[0m
Trg : public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 < ? > ) { METHOD_1 ( ( TYPE_2 < ? > ) VAR_1 ) ; } else { throw new TYPE_3 ( STRING_1 ) ; } }[0m
Pred: public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ( instanceof TYPE_2 ) > 0 ) { METHOD_1 ( ( TYPE_2 < ? > ) ) ; } else { METHOD_1 ( VAR_1 , null ) ; } }[0m
+++++++++++++++
[31mExample #1[0m
Src : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; return ( TYPE_1 ) VAR_2 ; } return VAR_3 class ; }[0m
Trg : public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 != null && VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; if ( VAR_2 instanceof TYPE_1 ) { return ( TYPE_1 ) VAR_2 ; } else if ( VAR_2 instanceof TYPE_4 ) { return ( TYPE_1 ) ( ( TYPE_4 ) VAR_2 ) . METHOD_3 ( ) ; } } return VAR_3 class ; }[0m
Pred: public TYPE_1 METHOD_1 ( TYPE_2 field ) { TYPE_3 VAR_1 = field . METHOD_1 ( ) ; if ( VAR_1 instanceof TYPE_4 ) { TYPE_3 VAR_2 = ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) [ 0 ] ; } else { TYPE_3 VAR_2 = ( ( TYPE_4 ) ( VAR_1 ) ) ; } else { return VAR_3 ; } return null ; }[0m
[31mExample #2[0m
Src : public TYPE_1 METHOD_1 ( final int x ) { return METHOD_2 ( x ) ; }[0m
Trg : public TYPE_1 METHOD_1 ( final int x ) { if ( x >= 0 && x < VAR_1 ) { return METHOD_2 ( x ) ; } else { return METHOD_1 ( METHOD_3 ( x ) ) ; } }[0m
Pred: public TYPE_1 METHOD_1 ( final int x ) { if ( x == null ) { return new java.util.ArrayList < > ( ) ; } else { return METHOD_2 ( x ) ; } }[0m
---------------
================
Duration: 0:00:11.262298

Starting long experiments
Start conducting accuracy calculation experiment for Test dataset all...
BUG FIXING ACCURACY
Top-1 accuracy: 528 / 5835 = 0.09048843187660668
Top-3 accuracy: 659 / 5835 = 0.11293916023993145
Top-5 accuracy: 710 / 5835 = 0.12167952013710369
Top-10 accuracy: 756 / 5835 = 0.12956298200514138
Top-50 accuracy: 862 / 5835 = 0.1477292202227935
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 3285 / 5835 = 0.5629820051413882
Top-3 accuracy: 3931 / 5835 = 0.6736932305055698
Top-5 accuracy: 4129 / 5835 = 0.7076263924592974
Top-10 accuracy: 4336 / 5835 = 0.743101970865467
Top-50 accuracy: 4631 / 5835 = 0.7936589545844045
Duration: 1:14:25.707587

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset train 300...
BUG FIXING ACCURACY
Top-1 accuracy: 201 / 300 = 0.67
Top-3 accuracy: 234 / 300 = 0.78
Top-5 accuracy: 245 / 300 = 0.8166666666666667
Top-10 accuracy: 256 / 300 = 0.8533333333333334
Top-50 accuracy: 270 / 300 = 0.9
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 201 / 300 = 0.67
Top-3 accuracy: 234 / 300 = 0.78
Top-5 accuracy: 245 / 300 = 0.8166666666666667
Top-10 accuracy: 256 / 300 = 0.8533333333333334
Top-50 accuracy: 270 / 300 = 0.9
Duration: 0:03:51.843828

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset val 300...
BUG FIXING ACCURACY
Top-1 accuracy: 30 / 300 = 0.1
Top-3 accuracy: 37 / 300 = 0.12333333333333334
Top-5 accuracy: 38 / 300 = 0.12666666666666668
Top-10 accuracy: 40 / 300 = 0.13333333333333333
Top-50 accuracy: 45 / 300 = 0.15
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 169 / 300 = 0.5633333333333334
Top-3 accuracy: 206 / 300 = 0.6866666666666666
Top-5 accuracy: 218 / 300 = 0.7266666666666667
Top-10 accuracy: 226 / 300 = 0.7533333333333333
Top-50 accuracy: 243 / 300 = 0.81
Duration: 0:03:53.686368

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test 300...
BUG FIXING ACCURACY
Top-1 accuracy: 25 / 300 = 0.08333333333333333
Top-3 accuracy: 31 / 300 = 0.10333333333333333
Top-5 accuracy: 35 / 300 = 0.11666666666666667
Top-10 accuracy: 38 / 300 = 0.12666666666666668
Top-50 accuracy: 44 / 300 = 0.14666666666666667
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 172 / 300 = 0.5733333333333334
Top-3 accuracy: 202 / 300 = 0.6733333333333333
Top-5 accuracy: 208 / 300 = 0.6933333333333334
Top-10 accuracy: 215 / 300 = 0.7166666666666667
Top-50 accuracy: 233 / 300 = 0.7766666666666666
Duration: 0:03:51.845699

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset train 300...
BUG FIXING ACCURACY
Top-1 accuracy: 1 / 300 = 0.0033333333333333335
Top-3 accuracy: 2 / 300 = 0.006666666666666667
Top-5 accuracy: 2 / 300 = 0.006666666666666667
Top-10 accuracy: 4 / 300 = 0.013333333333333334
Top-50 accuracy: 4 / 300 = 0.013333333333333334
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 1 / 300 = 0.0033333333333333335
Top-3 accuracy: 5 / 300 = 0.016666666666666666
Top-5 accuracy: 7 / 300 = 0.023333333333333334
Top-10 accuracy: 11 / 300 = 0.03666666666666667
Top-50 accuracy: 12 / 300 = 0.04
Duration: 0:03:14.022215

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset val 300...
BUG FIXING ACCURACY
Top-1 accuracy: 1 / 300 = 0.0033333333333333335
Top-3 accuracy: 2 / 300 = 0.006666666666666667
Top-5 accuracy: 2 / 300 = 0.006666666666666667
Top-10 accuracy: 2 / 300 = 0.006666666666666667
Top-50 accuracy: 2 / 300 = 0.006666666666666667
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 5 / 300 = 0.016666666666666666
Top-3 accuracy: 10 / 300 = 0.03333333333333333
Top-5 accuracy: 12 / 300 = 0.04
Top-10 accuracy: 14 / 300 = 0.04666666666666667
Top-50 accuracy: 18 / 300 = 0.06
Duration: 0:03:14.368888

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test 300...
BUG FIXING ACCURACY
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 1 / 300 = 0.0033333333333333335
Top-5 accuracy: 2 / 300 = 0.006666666666666667
Top-10 accuracy: 2 / 300 = 0.006666666666666667
Top-50 accuracy: 2 / 300 = 0.006666666666666667
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 5 / 300 = 0.016666666666666666
Top-3 accuracy: 10 / 300 = 0.03333333333333333
Top-5 accuracy: 12 / 300 = 0.04
Top-10 accuracy: 13 / 300 = 0.043333333333333335
Top-50 accuracy: 15 / 300 = 0.05
Duration: 0:03:15.058321

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset train 300...
BUG FIXING ACCURACY
Top-1 accuracy: 6 / 300 = 0.02
Top-3 accuracy: 7 / 300 = 0.023333333333333334
Top-5 accuracy: 7 / 300 = 0.023333333333333334
Top-10 accuracy: 10 / 300 = 0.03333333333333333
Top-50 accuracy: 14 / 300 = 0.04666666666666667
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 91 / 300 = 0.30333333333333334
Top-3 accuracy: 112 / 300 = 0.37333333333333335
Top-5 accuracy: 116 / 300 = 0.38666666666666666
Top-10 accuracy: 124 / 300 = 0.41333333333333333
Top-50 accuracy: 137 / 300 = 0.45666666666666667
Duration: 0:03:54.193741

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset val 300...
BUG FIXING ACCURACY
Top-1 accuracy: 3 / 300 = 0.01
Top-3 accuracy: 6 / 300 = 0.02
Top-5 accuracy: 6 / 300 = 0.02
Top-10 accuracy: 6 / 300 = 0.02
Top-50 accuracy: 9 / 300 = 0.03
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 103 / 300 = 0.3433333333333333
Top-3 accuracy: 127 / 300 = 0.42333333333333334
Top-5 accuracy: 132 / 300 = 0.44
Top-10 accuracy: 140 / 300 = 0.4666666666666667
Top-50 accuracy: 153 / 300 = 0.51
Duration: 0:03:54.778907

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test 300...
BUG FIXING ACCURACY
Top-1 accuracy: 9 / 300 = 0.03
Top-3 accuracy: 12 / 300 = 0.04
Top-5 accuracy: 12 / 300 = 0.04
Top-10 accuracy: 13 / 300 = 0.043333333333333335
Top-50 accuracy: 14 / 300 = 0.04666666666666667
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 96 / 300 = 0.32
Top-3 accuracy: 113 / 300 = 0.37666666666666665
Top-5 accuracy: 118 / 300 = 0.3933333333333333
Top-10 accuracy: 122 / 300 = 0.4066666666666667
Top-50 accuracy: 137 / 300 = 0.45666666666666667
Duration: 0:03:53.616411

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset train 300...
BUG FIXING ACCURACY
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 0 / 300 = 0.0
Top-5 accuracy: 0 / 300 = 0.0
Top-10 accuracy: 0 / 300 = 0.0
Top-50 accuracy: 0 / 300 = 0.0
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 4 / 300 = 0.013333333333333334
Top-3 accuracy: 5 / 300 = 0.016666666666666666
Top-5 accuracy: 5 / 300 = 0.016666666666666666
Top-10 accuracy: 5 / 300 = 0.016666666666666666
Top-50 accuracy: 6 / 300 = 0.02
Duration: 0:03:14.668707

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset val 300...
BUG FIXING ACCURACY
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 0 / 300 = 0.0
Top-5 accuracy: 0 / 300 = 0.0
Top-10 accuracy: 0 / 300 = 0.0
Top-50 accuracy: 0 / 300 = 0.0
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 0 / 300 = 0.0
Top-5 accuracy: 0 / 300 = 0.0
Top-10 accuracy: 2 / 300 = 0.006666666666666667
Top-50 accuracy: 4 / 300 = 0.013333333333333334
Duration: 0:03:15.088124

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test 300...
BUG FIXING ACCURACY
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 0 / 300 = 0.0
Top-5 accuracy: 0 / 300 = 0.0
Top-10 accuracy: 0 / 300 = 0.0
Top-50 accuracy: 0 / 300 = 0.0
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 0 / 300 = 0.0
Top-3 accuracy: 3 / 300 = 0.01
Top-5 accuracy: 4 / 300 = 0.013333333333333334
Top-10 accuracy: 5 / 300 = 0.016666666666666666
Top-50 accuracy: 7 / 300 = 0.023333333333333334
Duration: 0:03:15.009535

Start conducting accuracy calculation experiment for Tufano bug fixes 0 50 dataset test...
BUG FIXING ACCURACY
Top-1 accuracy: 528 / 5835 = 0.09048843187660668
Top-3 accuracy: 659 / 5835 = 0.11293916023993145
Top-5 accuracy: 710 / 5835 = 0.12167952013710369
Top-10 accuracy: 756 / 5835 = 0.12956298200514138
Top-50 accuracy: 862 / 5835 = 0.1477292202227935
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 3285 / 5835 = 0.5629820051413882
Top-3 accuracy: 3931 / 5835 = 0.6736932305055698
Top-5 accuracy: 4129 / 5835 = 0.7076263924592974
Top-10 accuracy: 4336 / 5835 = 0.743101970865467
Top-50 accuracy: 4631 / 5835 = 0.7936589545844045
Duration: 1:14:21.408794

Start conducting accuracy calculation experiment for Tufano bug fixes 50 100 dataset test...
BUG FIXING ACCURACY
Top-1 accuracy: 25 / 6545 = 0.0038197097020626434
Top-3 accuracy: 46 / 6545 = 0.007028265851795263
Top-5 accuracy: 56 / 6545 = 0.008556149732620321
Top-10 accuracy: 65 / 6545 = 0.009931245225362872
Top-50 accuracy: 84 / 6545 = 0.012834224598930482
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 126 / 6545 = 0.019251336898395723
Top-3 accuracy: 197 / 6545 = 0.03009931245225363
Top-5 accuracy: 217 / 6545 = 0.033155080213903745
Top-10 accuracy: 260 / 6545 = 0.03972498090145149
Top-50 accuracy: 339 / 6545 = 0.05179526355996944
Duration: 1:08:44.878625

Start conducting accuracy calculation experiment for Tufano code changes 0 50 dataset test...
BUG FIXING ACCURACY
Top-1 accuracy: 29 / 1077 = 0.02692664809656453
Top-3 accuracy: 35 / 1077 = 0.032497678737233054
Top-5 accuracy: 36 / 1077 = 0.033426183844011144
Top-10 accuracy: 39 / 1077 = 0.036211699164345405
Top-50 accuracy: 47 / 1077 = 0.0436397400185701
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 263 / 1077 = 0.24419684308263695
Top-3 accuracy: 311 / 1077 = 0.28876508820798513
Top-5 accuracy: 326 / 1077 = 0.30269266480965645
Top-10 accuracy: 341 / 1077 = 0.3166202414113278
Top-50 accuracy: 372 / 1077 = 0.34540389972144847
Duration: 0:13:23.362429

Start conducting accuracy calculation experiment for Tufano code changes 50 100 dataset test...
BUG FIXING ACCURACY
Top-1 accuracy: 0 / 1098 = 0.0
Top-3 accuracy: 0 / 1098 = 0.0
Top-5 accuracy: 0 / 1098 = 0.0
Top-10 accuracy: 0 / 1098 = 0.0
Top-50 accuracy: 0 / 1098 = 0.0
TRAINING OBJECTIVE ACCURACY
Top-1 accuracy: 2 / 1098 = 0.0018214936247723133
Top-3 accuracy: 7 / 1098 = 0.006375227686703097
Top-5 accuracy: 8 / 1098 = 0.007285974499089253
Top-10 accuracy: 10 / 1098 = 0.009107468123861567
Top-50 accuracy: 14 / 1098 = 0.012750455373406194
Duration: 0:11:17.452065

